<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="markdown" source-language="en-US" target-language="zh-cn">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-56a7a5e" tool-company="Microsoft" />
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">09fe6767eab182497dbc942e1415a64668f93326</xliffext:olfilehash>
      <xliffext:olfilepath xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">System.Linq.Expressions.Expression.yml</xliffext:olfilepath>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">
      </xliffext:oltranslationpriority>
      <xliffext:oltranslationtype xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">Human Translation</xliffext:oltranslationtype>
      <xliffext:olskeletonhash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">27025819dda59546b81cc6fdd803c4ab2c4812c8</xliffext:olskeletonhash>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>Expression()</source>
          <target state="new">Expression()</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>CanReduce</source>
          <target state="new">CanReduce</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;True if the node can be reduced, otherwise false.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;True if the node can be reduced, otherwise false.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>NodeType</source>
          <target state="new">NodeType</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Accept(ExpressionVisitor)</source>
          <target state="new">Accept(ExpressionVisitor)</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The visitor to visit this node with.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The visitor to visit this node with.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of visiting this node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of visiting this node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Add(Expression, Expression)</source>
          <target state="new">Add(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>Add(Expression, Expression, MethodInfo)</source>
          <target state="new">Add(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>AddAssign(Expression, Expression)</source>
          <target state="new">AddAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>AddAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">AddAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>AddAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">AddAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>AddAssignChecked(Expression, Expression)</source>
          <target state="new">AddAssignChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>AddAssignChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">AddAssignChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source>AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">AddAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>AddChecked(Expression, Expression)</source>
          <target state="new">AddChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>AddChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">AddChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the addition operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>And(Expression, Expression)</source>
          <target state="new">And(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>And(Expression, Expression, MethodInfo)</source>
          <target state="new">And(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>AndAlso(Expression, Expression)</source>
          <target state="new">AndAlso(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>AndAlso(Expression, Expression, MethodInfo)</source>
          <target state="new">AndAlso(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;AND&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source>AndAssign(Expression, Expression)</source>
          <target state="new">AndAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>AndAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">AndAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>AndAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">AndAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>ArrayAccess(Expression, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">ArrayAccess(Expression, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An expression that represents the multidimensional array.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An expression that represents the multidimensional array.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve">
          <source>ArrayAccess(Expression, Expression[])</source>
          <target state="new">ArrayAccess(Expression, Expression[])</target>
        </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An expression representing the array to index.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An expression representing the array to index.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array that contains expressions used to index the array.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An array that contains expressions used to index the array.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve">
          <source>ArrayIndex(Expression, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">ArrayIndex(Expression, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve">
          <source>ArrayIndex(Expression, Expression)</source>
          <target state="new">ArrayIndex(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;index&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;index&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve">
          <source>ArrayIndex(Expression, Expression[])</source>
          <target state="new">ArrayIndex(Expression, Expression[])</target>
        </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; or &lt;em&gt;indexes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve">
          <source>ArrayLength(Expression)</source>
          <target state="new">ArrayLength(Expression)</target>
        </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt;.Type does not represent an array type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;array&lt;/em&gt;.Type does not represent an array type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve">
          <source>Assign(Expression, Expression)</source>
          <target state="new">Assign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve">
          <source>Bind(MemberInfo, Expression)</source>
          <target state="new">Bind(MemberInfo, Expression)</target>
        </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property represented by &lt;em&gt;member&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property represented by &lt;em&gt;member&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve">
          <source>Bind(MethodInfo, Expression)</source>
          <target state="new">Bind(MethodInfo, Expression)</target>
        </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; does not represent a property accessor method.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property accessed by &lt;em&gt;propertyAccessor&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; does not represent a property accessor method.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property accessed by &lt;em&gt;propertyAccessor&lt;/em&gt; does not have a &lt;strong&gt;set&lt;/strong&gt; accessor.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the type of the field or property that &lt;em&gt;member&lt;/em&gt; represents.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve">
          <source>Block(IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Block(IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve">
          <source>Block(IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Block(IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve">
          <source>Block(IEnumerable&lt;ParameterExpression&gt;, Expression[])</source>
          <target state="new">Block(IEnumerable&lt;ParameterExpression&gt;, Expression[])</target>
        </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve">
          <source>Block(Expression, Expression)</source>
          <target state="new">Block(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve">
          <source>Block(Expression, Expression, Expression)</source>
          <target state="new">Block(Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve">
          <source>Block(Expression, Expression, Expression, Expression)</source>
          <target state="new">Block(Expression, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve">
          <source>Block(Expression, Expression, Expression, Expression, Expression)</source>
          <target state="new">Block(Expression, Expression, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The first expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The second expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The third expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The fourth expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The fifth expression in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The fifth expression in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve">
          <source>Block(Expression[])</source>
          <target state="new">Block(Expression[])</target>
        </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve">
          <source>Block(Type, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Block(Type, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve">
          <source>Block(Type, IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Block(Type, IEnumerable&lt;ParameterExpression&gt;, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve">
          <source>Block(Type, IEnumerable&lt;ParameterExpression&gt;, Expression[])</source>
          <target state="new">Block(Type, IEnumerable&lt;ParameterExpression&gt;, Expression[])</target>
        </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The variables in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve">
          <source>Block(Type, Expression[])</source>
          <target state="new">Block(Type, Expression[])</target>
        </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expressions in the block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve">
          <source>Break(LabelTarget)</source>
          <target state="new">Break(LabelTarget)</target>
        </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve">
          <source>Break(LabelTarget, Expression)</source>
          <target state="new">Break(LabelTarget, Expression)</target>
        </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve">
          <source>Break(LabelTarget, Expression, Type)</source>
          <target state="new">Break(LabelTarget, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve">
          <source>Break(LabelTarget, Type)</source>
          <target state="new">Break(LabelTarget, Type)</target>
        </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve">
          <source>Call(Expression, MethodInfo)</source>
          <target state="new">Call(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve">
          <source>Call(Expression, MethodInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Call(Expression, MethodInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve">
          <source>Call(Expression, MethodInfo, Expression, Expression)</source>
          <target state="new">Call(Expression, MethodInfo, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve">
          <source>Call(Expression, MethodInfo, Expression, Expression, Expression)</source>
          <target state="new">Call(Expression, MethodInfo, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve">
          <source>Call(Expression, MethodInfo, Expression[])</source>
          <target state="new">Call(Expression, MethodInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and one or more of its elements is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;method&lt;/em&gt; represents an instance method.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and one or more of its elements is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve">
          <source>Call(Expression, String, Type[], Expression[])</source>
          <target state="new">Call(Expression, String, Type[], Expression[])</target>
        </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the method.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the method.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;instance&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;instance&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Call(MethodInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression)</source>
          <target state="new">Call(MethodInfo, Expression)</target>
        </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression, Expression)</source>
          <target state="new">Call(MethodInfo, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression, Expression, Expression)</source>
          <target state="new">Call(MethodInfo, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression, Expression, Expression, Expression)</source>
          <target state="new">Call(MethodInfo, Expression, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)</source>
          <target state="new">Call(MethodInfo, Expression, Expression, Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve">
          <source>Call(MethodInfo, Expression[])</source>
          <target state="new">Call(MethodInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The number of elements in &lt;em&gt;arguments&lt;/em&gt; does not equal the number of parameters for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more of the elements of &lt;em&gt;arguments&lt;/em&gt; is not assignable to the corresponding parameter for the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve">
          <source>Call(Type, String, Type[], Expression[])</source>
          <target state="new">Call(Type, String, Type[], Expression[])</target>
        </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the method.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the method.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;methodName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;More than one method whose name is &lt;em&gt;methodName&lt;/em&gt;, whose type parameters match &lt;em&gt;typeArguments&lt;/em&gt;, and whose parameter types match &lt;em&gt;arguments&lt;/em&gt; is found in &lt;em&gt;type&lt;/em&gt; or its base types.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve">
          <source>Catch(ParameterExpression, Expression)</source>
          <target state="new">Catch(ParameterExpression, Expression)</target>
        </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve">
          <source>Catch(ParameterExpression, Expression, Expression)</source>
          <target state="new">Catch(ParameterExpression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve">
          <source>Catch(Type, Expression)</source>
          <target state="new">Catch(Type, Expression)</target>
        </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve">
          <source>Catch(Type, Expression, Expression)</source>
          <target state="new">Catch(Type, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve">
          <source>ClearDebugInfo(SymbolDocumentInfo)</source>
          <target state="new">ClearDebugInfo(SymbolDocumentInfo)</target>
        </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve">
          <source>Coalesce(Expression, Expression)</source>
          <target state="new">Coalesce(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve">
          <source>Coalesce(Expression, Expression, LambdaExpression)</source>
          <target state="new">Coalesce(Expression, Expression, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;conversion&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;conversion&lt;/em&gt;.Type is a delegate type that does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not convertible to each other.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;conversion&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;conversion&lt;/em&gt;.Type is a delegate type that does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve">
          <source>Condition(Expression, Expression, Expression)</source>
          <target state="new">Condition(Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;test&lt;/em&gt; or &lt;em&gt;ifTrue&lt;/em&gt; or &lt;em&gt;ifFalse&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;test&lt;/em&gt; or &lt;em&gt;ifTrue&lt;/em&gt; or &lt;em&gt;ifFalse&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve">
          <source>Condition(Expression, Expression, Expression, Type)</source>
          <target state="new">Condition(Expression, Expression, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve">
          <source>Constant(Object)</source>
          <target state="new">Constant(Object)</target>
        </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve">
          <source>Constant(Object, Type)</source>
          <target state="new">Constant(Object, Type)</target>
        </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;value&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;type&lt;/em&gt; is not assignable from the dynamic type of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;value&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;type&lt;/em&gt; is not assignable from the dynamic type of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve">
          <source>Continue(LabelTarget)</source>
          <target state="new">Continue(LabelTarget)</target>
        </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve">
          <source>Continue(LabelTarget, Type)</source>
          <target state="new">Continue(LabelTarget, Type)</target>
        </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve">
          <source>Convert(Expression, Type)</source>
          <target state="new">Convert(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve">
          <source>Convert(Expression, Type, MethodInfo)</source>
          <target state="new">Convert(Expression, Type, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve">
          <source>ConvertChecked(Expression, Type)</source>
          <target state="new">ConvertChecked(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve">
          <source>ConvertChecked(Expression, Type, MethodInfo)</source>
          <target state="new">ConvertChecked(Expression, Type, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No conversion operator is defined between &lt;em&gt;expression&lt;/em&gt;.Type and &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The return type of the method represented by &lt;em&gt;method&lt;/em&gt; is not assignable to &lt;em&gt;type&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type or &lt;em&gt;type&lt;/em&gt; is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;More than one method that matches the &lt;em&gt;method&lt;/em&gt; description was found.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve">
          <source>DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)</source>
          <target state="new">DebugInfo(SymbolDocumentInfo, Int32, Int32, Int32, Int32)</target>
        </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve">
          <source>Decrement(Expression)</source>
          <target state="new">Decrement(Expression)</target>
        </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve">
          <source>Decrement(Expression, MethodInfo)</source>
          <target state="new">Decrement(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve">
          <source>Default(Type)</source>
          <target state="new">Default(Type)</target>
        </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve">
          <source>Divide(Expression, Expression)</source>
          <target state="new">Divide(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve">
          <source>Divide(Expression, Expression, MethodInfo)</source>
          <target state="new">Divide(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the division operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve">
          <source>DivideAssign(Expression, Expression)</source>
          <target state="new">DivideAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve">
          <source>DivideAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">DivideAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve">
          <source>DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">DivideAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve">
          <source>ElementInit(MethodInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">ElementInit(MethodInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve">
          <source>ElementInit(MethodInfo, Expression[])</source>
          <target state="new">ElementInit(MethodInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;addMethod&lt;/em&gt; or &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve">
          <source>Empty()</source>
          <target state="new">Empty()</target>
        </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve">
          <source>Equal(Expression, Expression)</source>
          <target state="new">Equal(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve">
          <source>Equal(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">Equal(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the equality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve">
          <source>ExclusiveOr(Expression, Expression)</source>
          <target state="new">ExclusiveOr(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve">
          <source>ExclusiveOr(Expression, Expression, MethodInfo)</source>
          <target state="new">ExclusiveOr(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the &lt;strong&gt;XOR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve">
          <source>ExclusiveOrAssign(Expression, Expression)</source>
          <target state="new">ExclusiveOrAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve">
          <source>ExclusiveOrAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">ExclusiveOrAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve">
          <source>ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">ExclusiveOrAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve">
          <source>Field(Expression, FieldInfo)</source>
          <target state="new">Field(Expression, FieldInfo)</target>
        </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;field&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The field represented by &lt;em&gt;field&lt;/em&gt; is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;field&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The field represented by &lt;em&gt;field&lt;/em&gt; is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the field represented by &lt;em&gt;field&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the field represented by &lt;em&gt;field&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve">
          <source>Field(Expression, String)</source>
          <target state="new">Field(Expression, String)</target>
        </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of a field to be accessed.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of a field to be accessed.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;fieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;fieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No field named &lt;em&gt;fieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No field named &lt;em&gt;fieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve">
          <source>Field(Expression, Type, String)</source>
          <target state="new">Field(Expression, Type, String)</target>
        </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The containing object of the field.</source>
          <target state="new">\n&lt;p&gt;The containing object of the field.</target>
        </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve">
          <source>This can be null for static fields.&lt;/p&gt;\n</source>
          <target state="new">This can be null for static fields.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The field to be accessed.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The field to be accessed.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve">
          <source>GetActionType(Type[])</source>
          <target state="new">GetActionType(Type[])</target>
        </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of a System.Action delegate that has the specified type arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of a System.Action delegate that has the specified type arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve">
          <source>GetDelegateType(Type[])</source>
          <target state="new">GetDelegateType(Type[])</target>
        </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type arguments of the delegate.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type arguments of the delegate.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The delegate type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve">
          <source>GetFuncType(Type[])</source>
          <target state="new">GetFuncType(Type[])</target>
        </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of a System.Func delegate that has the specified type arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of a System.Func delegate that has the specified type arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; contains fewer than one or more than seventeen elements.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; contains fewer than one or more than seventeen elements.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;typeArgs&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve">
          <source>Goto(LabelTarget)</source>
          <target state="new">Goto(LabelTarget)</target>
        </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve">
          <source>Goto(LabelTarget, Expression)</source>
          <target state="new">Goto(LabelTarget, Expression)</target>
        </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve">
          <source>Goto(LabelTarget, Expression, Type)</source>
          <target state="new">Goto(LabelTarget, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve">
          <source>Goto(LabelTarget, Type)</source>
          <target state="new">Goto(LabelTarget, Type)</target>
        </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve">
          <source>GreaterThan(Expression, Expression)</source>
          <target state="new">GreaterThan(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve">
          <source>GreaterThan(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">GreaterThan(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve">
          <source>GreaterThanOrEqual(Expression, Expression)</source>
          <target state="new">GreaterThanOrEqual(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve">
          <source>GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">GreaterThanOrEqual(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve">
          <source>IfThen(Expression, Expression)</source>
          <target state="new">IfThen(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve">
          <source>IfThenElse(Expression, Expression, Expression)</source>
          <target state="new">IfThenElse(Expression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve">
          <source>Increment(Expression)</source>
          <target state="new">Increment(Expression)</target>
        </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve">
          <source>Increment(Expression, MethodInfo)</source>
          <target state="new">Increment(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve">
          <source>Invoke(Expression, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Invoke(Expression, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve">
          <source>Invoke(Expression, Expression[])</source>
          <target state="new">Invoke(Expression, Expression[])</target>
        </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;arguments&lt;/em&gt; does not contain the same number of elements as the list of parameters for the delegate represented by &lt;em&gt;expression&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve">
          <source>IsFalse(Expression)</source>
          <target state="new">IsFalse(Expression)</target>
        </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve">
          <source>IsFalse(Expression, MethodInfo)</source>
          <target state="new">IsFalse(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve">
          <source>IsTrue(Expression)</source>
          <target state="new">IsTrue(Expression)</target>
        </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve">
          <source>IsTrue(Expression, MethodInfo)</source>
          <target state="new">IsTrue(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve">
          <source>Label()</source>
          <target state="new">Label()</target>
        </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve">
          <source>Label(LabelTarget)</source>
          <target state="new">Label(LabelTarget)</target>
        </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve">
          <source>Label(LabelTarget, Expression)</source>
          <target state="new">Label(LabelTarget, Expression)</target>
        </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve">
          <source>Label(String)</source>
          <target state="new">Label(String)</target>
        </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the label.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the label.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve">
          <source>Label(Type)</source>
          <target state="new">Label(Type)</target>
        </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve">
          <source>Label(Type, String)</source>
          <target state="new">Label(Type, String)</target>
        </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of value that is passed when jumping to the label.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the label.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the label.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, Boolean, ParameterExpression[])</source>
          <target state="new">Lambda(Expression, Boolean, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Expression, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, ParameterExpression[])</source>
          <target state="new">Lambda(Expression, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;parameters&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;parameters&lt;/em&gt; contains more than sixteen elements.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name for the lambda.</source>
          <target state="new">\n&lt;p&gt;The name for the lambda.</target>
        </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve">
          <source>Used for emitting debug information.&lt;/p&gt;\n</source>
          <target state="new">Used for emitting debug information.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve">
          <source>Lambda(Expression, String, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Expression, String, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name for the lambda.</source>
          <target state="new">\n&lt;p&gt;The name for the lambda.</target>
        </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve">
          <source>Used for emitting debug information.&lt;/p&gt;\n</source>
          <target state="new">Used for emitting debug information.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Type, Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, Boolean, ParameterExpression[])</source>
          <target state="new">Lambda(Type, Expression, Boolean, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Type, Expression, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, ParameterExpression[])</source>
          <target state="new">Lambda(Type, Expression, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;delegateType&lt;/em&gt; or &lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Type, Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name for the lambda.</source>
          <target state="new">\n&lt;p&gt;The name for the lambda.</target>
        </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve">
          <source>Used for emitting debug information.&lt;/p&gt;\n</source>
          <target state="new">Used for emitting debug information.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve">
          <source>Lambda(Type, Expression, String, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda(Type, Expression, String, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name for the lambda.</source>
          <target state="new">\n&lt;p&gt;The name for the lambda.</target>
        </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve">
          <source>Used for emitting debug information.&lt;/p&gt;\n</source>
          <target state="new">Used for emitting debug information.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type.</source>
          <target state="new">\n&lt;p&gt;The delegate type.</target>
        </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, Boolean, ParameterExpression[])</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, Boolean, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type.</source>
          <target state="new">\n&lt;p&gt;The delegate type.</target>
        </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A delegate type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;A delegate type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, ParameterExpression[])</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;A delegate type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;A delegate type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;body&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements in &lt;em&gt;parameters&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, String, Boolean, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the lambda.</source>
          <target state="new">\n&lt;p&gt;The name of the lambda.</target>
        </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve">
          <source>Used for generating debugging info.&lt;/p&gt;\n</source>
          <target state="new">Used for generating debugging info.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type.</source>
          <target state="new">\n&lt;p&gt;The delegate type.</target>
        </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve">
          <source>Lambda&lt;TDelegate&gt;(Expression, String, IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">Lambda&lt;TDelegate&gt;(Expression, String, IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the lambda.</source>
          <target state="new">\n&lt;p&gt;The name of the lambda.</target>
        </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve">
          <source>Used for generating debugging information.&lt;/p&gt;\n</source>
          <target state="new">Used for generating debugging information.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The delegate type.</source>
          <target state="new">\n&lt;p&gt;The delegate type.</target>
        </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve">
          <source>LeftShift(Expression, Expression)</source>
          <target state="new">LeftShift(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve">
          <source>LeftShift(Expression, Expression, MethodInfo)</source>
          <target state="new">LeftShift(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the left-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve">
          <source>LeftShiftAssign(Expression, Expression)</source>
          <target state="new">LeftShiftAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve">
          <source>LeftShiftAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">LeftShiftAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve">
          <source>LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">LeftShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve">
          <source>LessThan(Expression, Expression)</source>
          <target state="new">LessThan(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve">
          <source>LessThan(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">LessThan(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve">
          <source>LessThanOrEqual(Expression, Expression)</source>
          <target state="new">LessThanOrEqual(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve">
          <source>LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">LessThanOrEqual(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve">
          <source>ListBind(MemberInfo, IEnumerable&lt;ElementInit&gt;)</source>
          <target state="new">ListBind(MemberInfo, IEnumerable&lt;ElementInit&gt;)</target>
        </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve">
          <source>ListBind(MemberInfo, ElementInit[])</source>
          <target state="new">ListBind(MemberInfo, ElementInit[])</target>
        </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve">
          <source>ListBind(MethodInfo, IEnumerable&lt;ElementInit&gt;)</source>
          <target state="new">ListBind(MethodInfo, IEnumerable&lt;ElementInit&gt;)</target>
        </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve">
          <source>ListBind(MethodInfo, ElementInit[])</source>
          <target state="new">ListBind(MethodInfo, ElementInit[])</target>
        </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve">
          <source>&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, IEnumerable&lt;ElementInit&gt;)</source>
          <target state="new">ListInit(NewExpression, IEnumerable&lt;ElementInit&gt;)</target>
        </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">ListInit(NewExpression, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, ElementInit[])</source>
          <target state="new">ListInit(NewExpression, ElementInit[])</target>
        </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, Expression[])</source>
          <target state="new">ListInit(NewExpression, Expression[])</target>
        </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, MethodInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">ListInit(NewExpression, MethodInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve">
          <source>ListInit(NewExpression, MethodInfo, Expression[])</source>
          <target state="new">ListInit(NewExpression, MethodInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;One or more elements of &lt;em&gt;initializers&lt;/em&gt; are &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve">
          <source>Loop(Expression)</source>
          <target state="new">Loop(Expression)</target>
        </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve">
          <source>Loop(Expression, LabelTarget)</source>
          <target state="new">Loop(Expression, LabelTarget)</target>
        </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve">
          <source>Loop(Expression, LabelTarget, LabelTarget)</source>
          <target state="new">Loop(Expression, LabelTarget, LabelTarget)</target>
        </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the loop.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The break target used by the loop body.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The continue target used by the loop body.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The continue target used by the loop body.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve">
          <source>MakeBinary(ExpressionType, Expression, Expression)</source>
          <target state="new">MakeBinary(ExpressionType, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve">
          <source>MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve">
          <source>MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)</source>
          <target state="new">MakeBinary(ExpressionType, Expression, Expression, Boolean, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;binaryType&lt;/em&gt; does not correspond to a binary expression node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve">
          <source>MakeCatchBlock(Type, ParameterExpression, Expression, Expression)</source>
          <target state="new">MakeCatchBlock(Type, ParameterExpression, Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the catch statement.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve">
          <source>MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)</source>
          <target state="new">MakeGoto(GotoExpressionKind, LabelTarget, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve">
          <source>MakeIndex(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">MakeIndex(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object to which the property belongs.</source>
          <target state="new">\n&lt;p&gt;The object to which the property belongs.</target>
        </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve">
          <source>It should be null if the property is &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;shared&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\n</source>
          <target state="new">It should be null if the property is &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;shared&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An &lt;code&gt;IEnumerable&lt;Expression&gt;&lt;/code&gt; (&lt;code&gt;IEnumerable (Of Expression)&lt;/code&gt; in Visual Basic) that contains the arguments that will be used to index the property.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An &lt;code&gt;IEnumerable&lt;Expression&gt;&lt;/code&gt; (&lt;code&gt;IEnumerable (Of Expression)&lt;/code&gt; in Visual Basic) that contains the arguments that will be used to index the property.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve">
          <source>MakeMemberAccess(Expression, MemberInfo)</source>
          <target state="new">MakeMemberAccess(Expression, MemberInfo)</target>
        </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; does not represent a field or property.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve">
          <source>MakeTry(Type, Expression, Expression, Expression, IEnumerable&lt;CatchBlock&gt;)</source>
          <target state="new">MakeTry(Type, Expression, Expression, Expression, IEnumerable&lt;CatchBlock&gt;)</target>
        </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the try expression.</source>
          <target state="new">\n&lt;p&gt;The result type of the try expression.</target>
        </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve">
          <source>If null, bodh and all handlers must have identical type.&lt;/p&gt;\n</source>
          <target state="new">If null, bodh and all handlers must have identical type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the finally block.</source>
          <target state="new">\n&lt;p&gt;The body of the finally block.</target>
        </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve">
          <source>Pass null if the try block has no finally block associated with it.&lt;/p&gt;\n</source>
          <target state="new">Pass null if the try block has no finally block associated with it.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the fault block.</source>
          <target state="new">\n&lt;p&gt;The body of the fault block.</target>
        </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve">
          <source>Pass null if the try block has no fault block associated with it.&lt;/p&gt;\n</source>
          <target state="new">Pass null if the try block has no fault block associated with it.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve">
          <source>MakeUnary(ExpressionType, Expression, Type)</source>
          <target state="new">MakeUnary(ExpressionType, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve">
          <source>MakeUnary(ExpressionType, Expression, Type, MethodInfo)</source>
          <target state="new">MakeUnary(ExpressionType, Expression, Type, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;operand&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;unaryType&lt;/em&gt; does not correspond to a unary expression node.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve">
          <source>MemberBind(MemberInfo, IEnumerable&lt;MemberBinding&gt;)</source>
          <target state="new">MemberBind(MemberInfo, IEnumerable&lt;MemberBinding&gt;)</target>
        </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve">
          <source>MemberBind(MemberInfo, MemberBinding[])</source>
          <target state="new">MemberBind(MemberInfo, MemberBinding[])</target>
        </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;member&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve">
          <source>MemberBind(MethodInfo, IEnumerable&lt;MemberBinding&gt;)</source>
          <target state="new">MemberBind(MethodInfo, IEnumerable&lt;MemberBinding&gt;)</target>
        </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve">
          <source>MemberBind(MethodInfo, MemberBinding[])</source>
          <target state="new">MemberBind(MethodInfo, MemberBinding[])</target>
        </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve">
          <source>MemberInit(NewExpression, IEnumerable&lt;MemberBinding&gt;)</source>
          <target state="new">MemberInit(NewExpression, IEnumerable&lt;MemberBinding&gt;)</target>
        </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve">
          <source>MemberInit(NewExpression, MemberBinding[])</source>
          <target state="new">MemberInit(NewExpression, MemberBinding[])</target>
        </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;newExpression&lt;/em&gt; or &lt;em&gt;bindings&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve">
          <source>Modulo(Expression, Expression)</source>
          <target state="new">Modulo(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve">
          <source>Modulo(Expression, Expression, MethodInfo)</source>
          <target state="new">Modulo(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the modulus operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve">
          <source>ModuloAssign(Expression, Expression)</source>
          <target state="new">ModuloAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve">
          <source>ModuloAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">ModuloAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve">
          <source>ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">ModuloAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve">
          <source>Multiply(Expression, Expression)</source>
          <target state="new">Multiply(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve">
          <source>Multiply(Expression, Expression, MethodInfo)</source>
          <target state="new">Multiply(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve">
          <source>MultiplyAssign(Expression, Expression)</source>
          <target state="new">MultiplyAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve">
          <source>MultiplyAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">MultiplyAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve">
          <source>MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">MultiplyAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve">
          <source>MultiplyAssignChecked(Expression, Expression)</source>
          <target state="new">MultiplyAssignChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve">
          <source>MultiplyAssignChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">MultiplyAssignChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve">
          <source>MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">MultiplyAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve">
          <source>MultiplyChecked(Expression, Expression)</source>
          <target state="new">MultiplyChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve">
          <source>MultiplyChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">MultiplyChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the multiplication operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve">
          <source>Negate(Expression)</source>
          <target state="new">Negate(Expression)</target>
        </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve">
          <source>Negate(Expression, MethodInfo)</source>
          <target state="new">Negate(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve">
          <source>NegateChecked(Expression)</source>
          <target state="new">NegateChecked(Expression)</target>
        </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve">
          <source>NegateChecked(Expression, MethodInfo)</source>
          <target state="new">NegateChecked(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary minus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve">
          <source>New(ConstructorInfo)</source>
          <target state="new">New(ConstructorInfo)</target>
        </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The constructor that &lt;em&gt;constructor&lt;/em&gt; represents has at least one parameter.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The constructor that &lt;em&gt;constructor&lt;/em&gt; represents has at least one parameter.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve">
          <source>New(ConstructorInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">New(ConstructorInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve">
          <source>New(ConstructorInfo, IEnumerable&lt;Expression&gt;, IEnumerable&lt;MemberInfo&gt;)</source>
          <target state="new">New(ConstructorInfo, IEnumerable&lt;Expression&gt;, IEnumerable&lt;MemberInfo&gt;)</target>
        </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve">
          <source>New(ConstructorInfo, IEnumerable&lt;Expression&gt;, MemberInfo[])</source>
          <target state="new">New(ConstructorInfo, IEnumerable&lt;Expression&gt;, MemberInfo[])</target>
        </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;members&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve">
          <source>New(ConstructorInfo, Expression[])</source>
          <target state="new">New(ConstructorInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;constructor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;arguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve">
          <source>New(Type)</source>
          <target state="new">New(Type)</target>
        </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type that &lt;em&gt;type&lt;/em&gt; represents does not have a constructor without parameters.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type that &lt;em&gt;type&lt;/em&gt; represents does not have a constructor without parameters.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve">
          <source>NewArrayBounds(Type, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">NewArrayBounds(Type, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve">
          <source>NewArrayBounds(Type, Expression[])</source>
          <target state="new">NewArrayBounds(Type, Expression[])</target>
        </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;bounds&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve">
          <source>NewArrayInit(Type, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">NewArrayInit(Type, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="596" translate="yes" xml:space="preserve">
          <source>NewArrayInit(Type, Expression[])</source>
          <target state="new">NewArrayInit(Type, Expression[])</target>
        </trans-unit>
        <trans-unit id="597" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;An element of &lt;em&gt;initializers&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="598" translate="yes" xml:space="preserve">
          <source>Not(Expression)</source>
          <target state="new">Not(Expression)</target>
        </trans-unit>
        <trans-unit id="599" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="600" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="601" translate="yes" xml:space="preserve">
          <source>Not(Expression, MethodInfo)</source>
          <target state="new">Not(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="602" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="603" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="604" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary not operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="605" translate="yes" xml:space="preserve">
          <source>NotEqual(Expression, Expression)</source>
          <target state="new">NotEqual(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="606" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="607" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="608" translate="yes" xml:space="preserve">
          <source>NotEqual(Expression, Expression, Boolean, MethodInfo)</source>
          <target state="new">NotEqual(Expression, Expression, Boolean, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="609" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="610" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="611" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the inequality operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="612" translate="yes" xml:space="preserve">
          <source>OnesComplement(Expression)</source>
          <target state="new">OnesComplement(Expression)</target>
        </trans-unit>
        <trans-unit id="613" translate="yes" xml:space="preserve">
          <source>OnesComplement(Expression, MethodInfo)</source>
          <target state="new">OnesComplement(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="614" translate="yes" xml:space="preserve">
          <source>Or(Expression, Expression)</source>
          <target state="new">Or(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="615" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="616" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="617" translate="yes" xml:space="preserve">
          <source>Or(Expression, Expression, MethodInfo)</source>
          <target state="new">Or(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="618" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="619" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="620" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="621" translate="yes" xml:space="preserve">
          <source>OrAssign(Expression, Expression)</source>
          <target state="new">OrAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="622" translate="yes" xml:space="preserve">
          <source>OrAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">OrAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="623" translate="yes" xml:space="preserve">
          <source>OrAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">OrAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="624" translate="yes" xml:space="preserve">
          <source>OrElse(Expression, Expression)</source>
          <target state="new">OrElse(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="625" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="626" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="627" translate="yes" xml:space="preserve">
          <source>OrElse(Expression, Expression, MethodInfo)</source>
          <target state="new">OrElse(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="628" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="629" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="630" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the bitwise &lt;strong&gt;OR&lt;/strong&gt; operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type are not the same Boolean type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="631" translate="yes" xml:space="preserve">
          <source>Parameter(Type)</source>
          <target state="new">Parameter(Type)</target>
        </trans-unit>
        <trans-unit id="632" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="633" translate="yes" xml:space="preserve">
          <source>Parameter(Type, String)</source>
          <target state="new">Parameter(Type, String)</target>
        </trans-unit>
        <trans-unit id="634" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="635" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the parameter or variable, used for debugging or printing purpose only.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the parameter or variable, used for debugging or printing purpose only.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="636" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="637" translate="yes" xml:space="preserve">
          <source>PostDecrementAssign(Expression)</source>
          <target state="new">PostDecrementAssign(Expression)</target>
        </trans-unit>
        <trans-unit id="638" translate="yes" xml:space="preserve">
          <source>PostDecrementAssign(Expression, MethodInfo)</source>
          <target state="new">PostDecrementAssign(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="639" translate="yes" xml:space="preserve">
          <source>PostIncrementAssign(Expression)</source>
          <target state="new">PostIncrementAssign(Expression)</target>
        </trans-unit>
        <trans-unit id="640" translate="yes" xml:space="preserve">
          <source>PostIncrementAssign(Expression, MethodInfo)</source>
          <target state="new">PostIncrementAssign(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="641" translate="yes" xml:space="preserve">
          <source>Power(Expression, Expression)</source>
          <target state="new">Power(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="642" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="643" translate="yes" xml:space="preserve">
          <source>Power(Expression, Expression, MethodInfo)</source>
          <target state="new">Power(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="644" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="645" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="646" translate="yes" xml:space="preserve">
          <source>PowerAssign(Expression, Expression)</source>
          <target state="new">PowerAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="647" translate="yes" xml:space="preserve">
          <source>PowerAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">PowerAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="648" translate="yes" xml:space="preserve">
          <source>PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">PowerAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="649" translate="yes" xml:space="preserve">
          <source>PreDecrementAssign(Expression)</source>
          <target state="new">PreDecrementAssign(Expression)</target>
        </trans-unit>
        <trans-unit id="650" translate="yes" xml:space="preserve">
          <source>PreDecrementAssign(Expression, MethodInfo)</source>
          <target state="new">PreDecrementAssign(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="651" translate="yes" xml:space="preserve">
          <source>PreIncrementAssign(Expression)</source>
          <target state="new">PreIncrementAssign(Expression)</target>
        </trans-unit>
        <trans-unit id="652" translate="yes" xml:space="preserve">
          <source>PreIncrementAssign(Expression, MethodInfo)</source>
          <target state="new">PreIncrementAssign(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="653" translate="yes" xml:space="preserve">
          <source>Property(Expression, MethodInfo)</source>
          <target state="new">Property(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="654" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;propertyAccessor&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="655" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;propertyAccessor&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not a property accessor method.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the method represented by &lt;em&gt;propertyAccessor&lt;/em&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The method that &lt;em&gt;propertyAccessor&lt;/em&gt; represents is not a property accessor method.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="656" translate="yes" xml:space="preserve">
          <source>Property(Expression, PropertyInfo)</source>
          <target state="new">Property(Expression, PropertyInfo)</target>
        </trans-unit>
        <trans-unit id="657" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;property&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property that &lt;em&gt;property&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;property&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;The property that &lt;em&gt;property&lt;/em&gt; represents is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic) and &lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="658" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the property that &lt;em&gt;property&lt;/em&gt; represents.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type is not assignable to the declaring type of the property that &lt;em&gt;property&lt;/em&gt; represents.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="659" translate="yes" xml:space="preserve">
          <source>Property(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">Property(Expression, PropertyInfo, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="660" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object to which the property belongs.</source>
          <target state="new">\n&lt;p&gt;The object to which the property belongs.</target>
        </trans-unit>
        <trans-unit id="661" translate="yes" xml:space="preserve">
          <source>If the property is static/shared, it must be null.&lt;/p&gt;\n</source>
          <target state="new">If the property is static/shared, it must be null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="662" translate="yes" xml:space="preserve">
          <source>Property(Expression, PropertyInfo, Expression[])</source>
          <target state="new">Property(Expression, PropertyInfo, Expression[])</target>
        </trans-unit>
        <trans-unit id="663" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object to which the property belongs.</source>
          <target state="new">\n&lt;p&gt;The object to which the property belongs.</target>
        </trans-unit>
        <trans-unit id="664" translate="yes" xml:space="preserve">
          <source>If the property is static/shared, it must be null.&lt;/p&gt;\n</source>
          <target state="new">If the property is static/shared, it must be null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="665" translate="yes" xml:space="preserve">
          <source>Property(Expression, String)</source>
          <target state="new">Property(Expression, String)</target>
        </trans-unit>
        <trans-unit id="666" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of a property to be accessed.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of a property to be accessed.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="667" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="668" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No property named &lt;em&gt;propertyName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No property named &lt;em&gt;propertyName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="669" translate="yes" xml:space="preserve">
          <source>Property(Expression, String, Expression[])</source>
          <target state="new">Property(Expression, String, Expression[])</target>
        </trans-unit>
        <trans-unit id="670" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The object to which the property belongs.</source>
          <target state="new">\n&lt;p&gt;The object to which the property belongs.</target>
        </trans-unit>
        <trans-unit id="671" translate="yes" xml:space="preserve">
          <source>If the property is static/shared, it must be null.&lt;/p&gt;\n</source>
          <target state="new">If the property is static/shared, it must be null.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="672" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the indexer.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of the indexer.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="673" translate="yes" xml:space="preserve">
          <source>Property(Expression, Type, String)</source>
          <target state="new">Property(Expression, Type, String)</target>
        </trans-unit>
        <trans-unit id="674" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The containing object of the property.</source>
          <target state="new">\n&lt;p&gt;The containing object of the property.</target>
        </trans-unit>
        <trans-unit id="675" translate="yes" xml:space="preserve">
          <source>This can be null for static properties.&lt;/p&gt;\n</source>
          <target state="new">This can be null for static properties.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="676" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The property to be accessed.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The property to be accessed.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="677" translate="yes" xml:space="preserve">
          <source>PropertyOrField(Expression, String)</source>
          <target state="new">PropertyOrField(Expression, String)</target>
        </trans-unit>
        <trans-unit id="678" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of a property or field to be accessed.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The name of a property or field to be accessed.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="679" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyOrFieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;propertyOrFieldName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="680" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;No property or field named &lt;em&gt;propertyOrFieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;No property or field named &lt;em&gt;propertyOrFieldName&lt;/em&gt; is defined in &lt;em&gt;expression&lt;/em&gt;.Type or its base types.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="681" translate="yes" xml:space="preserve">
          <source>Quote(Expression)</source>
          <target state="new">Quote(Expression)</target>
        </trans-unit>
        <trans-unit id="682" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="683" translate="yes" xml:space="preserve">
          <source>Reduce()</source>
          <target state="new">Reduce()</target>
        </trans-unit>
        <trans-unit id="684" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="685" translate="yes" xml:space="preserve">
          <source>ReduceAndCheck()</source>
          <target state="new">ReduceAndCheck()</target>
        </trans-unit>
        <trans-unit id="686" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="687" translate="yes" xml:space="preserve">
          <source>ReduceExtensions()</source>
          <target state="new">ReduceExtensions()</target>
        </trans-unit>
        <trans-unit id="688" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The reduced expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="689" translate="yes" xml:space="preserve">
          <source>ReferenceEqual(Expression, Expression)</source>
          <target state="new">ReferenceEqual(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="690" translate="yes" xml:space="preserve">
          <source>ReferenceNotEqual(Expression, Expression)</source>
          <target state="new">ReferenceNotEqual(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="691" translate="yes" xml:space="preserve">
          <source>Rethrow()</source>
          <target state="new">Rethrow()</target>
        </trans-unit>
        <trans-unit id="692" translate="yes" xml:space="preserve">
          <source>Rethrow(Type)</source>
          <target state="new">Rethrow(Type)</target>
        </trans-unit>
        <trans-unit id="693" translate="yes" xml:space="preserve">
          <source>Return(LabelTarget)</source>
          <target state="new">Return(LabelTarget)</target>
        </trans-unit>
        <trans-unit id="694" translate="yes" xml:space="preserve">
          <source>Return(LabelTarget, Expression)</source>
          <target state="new">Return(LabelTarget, Expression)</target>
        </trans-unit>
        <trans-unit id="695" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="696" translate="yes" xml:space="preserve">
          <source>Return(LabelTarget, Expression, Type)</source>
          <target state="new">Return(LabelTarget, Expression, Type)</target>
        </trans-unit>
        <trans-unit id="697" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value that will be passed to the associated label upon jumping.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="698" translate="yes" xml:space="preserve">
          <source>Return(LabelTarget, Type)</source>
          <target state="new">Return(LabelTarget, Type)</target>
        </trans-unit>
        <trans-unit id="699" translate="yes" xml:space="preserve">
          <source>RightShift(Expression, Expression)</source>
          <target state="new">RightShift(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="700" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="701" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="702" translate="yes" xml:space="preserve">
          <source>RightShift(Expression, Expression, MethodInfo)</source>
          <target state="new">RightShift(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="703" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="704" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="705" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the right-shift operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="706" translate="yes" xml:space="preserve">
          <source>RightShiftAssign(Expression, Expression)</source>
          <target state="new">RightShiftAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="707" translate="yes" xml:space="preserve">
          <source>RightShiftAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">RightShiftAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="708" translate="yes" xml:space="preserve">
          <source>RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">RightShiftAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="709" translate="yes" xml:space="preserve">
          <source>RuntimeVariables(IEnumerable&lt;ParameterExpression&gt;)</source>
          <target state="new">RuntimeVariables(IEnumerable&lt;ParameterExpression&gt;)</target>
        </trans-unit>
        <trans-unit id="710" translate="yes" xml:space="preserve">
          <source>RuntimeVariables(ParameterExpression[])</source>
          <target state="new">RuntimeVariables(ParameterExpression[])</target>
        </trans-unit>
        <trans-unit id="711" translate="yes" xml:space="preserve">
          <source>Subtract(Expression, Expression)</source>
          <target state="new">Subtract(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="712" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="713" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="714" translate="yes" xml:space="preserve">
          <source>Subtract(Expression, Expression, MethodInfo)</source>
          <target state="new">Subtract(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="715" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="716" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="717" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="718" translate="yes" xml:space="preserve">
          <source>SubtractAssign(Expression, Expression)</source>
          <target state="new">SubtractAssign(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="719" translate="yes" xml:space="preserve">
          <source>SubtractAssign(Expression, Expression, MethodInfo)</source>
          <target state="new">SubtractAssign(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="720" translate="yes" xml:space="preserve">
          <source>SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">SubtractAssign(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="721" translate="yes" xml:space="preserve">
          <source>SubtractAssignChecked(Expression, Expression)</source>
          <target state="new">SubtractAssignChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="722" translate="yes" xml:space="preserve">
          <source>SubtractAssignChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">SubtractAssignChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="723" translate="yes" xml:space="preserve">
          <source>SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</source>
          <target state="new">SubtractAssignChecked(Expression, Expression, MethodInfo, LambdaExpression)</target>
        </trans-unit>
        <trans-unit id="724" translate="yes" xml:space="preserve">
          <source>SubtractChecked(Expression, Expression)</source>
          <target state="new">SubtractChecked(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="725" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="726" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="727" translate="yes" xml:space="preserve">
          <source>SubtractChecked(Expression, Expression, MethodInfo)</source>
          <target state="new">SubtractChecked(Expression, Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="728" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;left&lt;/em&gt; or &lt;em&gt;right&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="729" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly two arguments.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="730" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the subtraction operator is not defined for &lt;em&gt;left&lt;/em&gt;.Type and &lt;em&gt;right&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="731" translate="yes" xml:space="preserve">
          <source>Switch(Expression, Expression, SwitchCase[])</source>
          <target state="new">Switch(Expression, Expression, SwitchCase[])</target>
        </trans-unit>
        <trans-unit id="732" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="733" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="734" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="735" translate="yes" xml:space="preserve">
          <source>Switch(Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)</source>
          <target state="new">Switch(Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)</target>
        </trans-unit>
        <trans-unit id="736" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="737" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="738" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="739" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="740" translate="yes" xml:space="preserve">
          <source>Switch(Expression, Expression, MethodInfo, SwitchCase[])</source>
          <target state="new">Switch(Expression, Expression, MethodInfo, SwitchCase[])</target>
        </trans-unit>
        <trans-unit id="741" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="742" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="743" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="744" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="745" translate="yes" xml:space="preserve">
          <source>Switch(Expression, SwitchCase[])</source>
          <target state="new">Switch(Expression, SwitchCase[])</target>
        </trans-unit>
        <trans-unit id="746" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="747" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="748" translate="yes" xml:space="preserve">
          <source>Switch(Type, Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)</source>
          <target state="new">Switch(Type, Expression, Expression, MethodInfo, IEnumerable&lt;SwitchCase&gt;)</target>
        </trans-unit>
        <trans-unit id="749" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="750" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="751" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="752" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="753" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="754" translate="yes" xml:space="preserve">
          <source>Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])</source>
          <target state="new">Switch(Type, Expression, Expression, MethodInfo, SwitchCase[])</target>
        </trans-unit>
        <trans-unit id="755" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result type of the switch.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="756" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The value to be tested against each case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="757" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The result of the switch if &lt;em&gt;switchValue&lt;/em&gt; does not match any of the cases.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="758" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The equality comparison method to use.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="759" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The set of cases for this switch expression.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="760" translate="yes" xml:space="preserve">
          <source>SwitchCase(Expression, IEnumerable&lt;Expression&gt;)</source>
          <target state="new">SwitchCase(Expression, IEnumerable&lt;Expression&gt;)</target>
        </trans-unit>
        <trans-unit id="761" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="762" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The test values of the case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The test values of the case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="763" translate="yes" xml:space="preserve">
          <source>SwitchCase(Expression, Expression[])</source>
          <target state="new">SwitchCase(Expression, Expression[])</target>
        </trans-unit>
        <trans-unit id="764" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="765" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The test values of the case.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The test values of the case.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="766" translate="yes" xml:space="preserve">
          <source>SymbolDocument(String)</source>
          <target state="new">SymbolDocument(String)</target>
        </trans-unit>
        <trans-unit id="767" translate="yes" xml:space="preserve">
          <source>SymbolDocument(String, Guid)</source>
          <target state="new">SymbolDocument(String, Guid)</target>
        </trans-unit>
        <trans-unit id="768" translate="yes" xml:space="preserve">
          <source>SymbolDocument(String, Guid, Guid)</source>
          <target state="new">SymbolDocument(String, Guid, Guid)</target>
        </trans-unit>
        <trans-unit id="769" translate="yes" xml:space="preserve">
          <source>SymbolDocument(String, Guid, Guid, Guid)</source>
          <target state="new">SymbolDocument(String, Guid, Guid, Guid)</target>
        </trans-unit>
        <trans-unit id="770" translate="yes" xml:space="preserve">
          <source>Throw(Expression)</source>
          <target state="new">Throw(Expression)</target>
        </trans-unit>
        <trans-unit id="771" translate="yes" xml:space="preserve">
          <source>Throw(Expression, Type)</source>
          <target state="new">Throw(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="772" translate="yes" xml:space="preserve">
          <source>ToString()</source>
          <target state="new">ToString()</target>
        </trans-unit>
        <trans-unit id="773" translate="yes" xml:space="preserve">
          <source>TryCatch(Expression, CatchBlock[])</source>
          <target state="new">TryCatch(Expression, CatchBlock[])</target>
        </trans-unit>
        <trans-unit id="774" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="775" translate="yes" xml:space="preserve">
          <source>TryCatchFinally(Expression, Expression, CatchBlock[])</source>
          <target state="new">TryCatchFinally(Expression, Expression, CatchBlock[])</target>
        </trans-unit>
        <trans-unit id="776" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="777" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="778" translate="yes" xml:space="preserve">
          <source>TryFault(Expression, Expression)</source>
          <target state="new">TryFault(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="779" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="780" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the fault block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the fault block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="781" translate="yes" xml:space="preserve">
          <source>TryFinally(Expression, Expression)</source>
          <target state="new">TryFinally(Expression, Expression)</target>
        </trans-unit>
        <trans-unit id="782" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the try block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="783" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The body of the finally block.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="784" translate="yes" xml:space="preserve">
          <source>TryGetActionType(Type[], out Type)</source>
          <target state="new">TryGetActionType(Type[], out Type)</target>
        </trans-unit>
        <trans-unit id="785" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Action delegate type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Action delegate type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="786" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;When this method returns, contains the generic System.Action delegate type that has specific type arguments.</source>
          <target state="new">\n&lt;p&gt;When this method returns, contains the generic System.Action delegate type that has specific type arguments.</target>
        </trans-unit>
        <trans-unit id="787" translate="yes" xml:space="preserve">
          <source>Contains null if there is no generic System.Action delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\n</source>
          <target state="new">Contains null if there is no generic System.Action delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="788" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;true if generic System.Action delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;true if generic System.Action delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="789" translate="yes" xml:space="preserve">
          <source>TryGetFuncType(Type[], out Type)</source>
          <target state="new">TryGetFuncType(Type[], out Type)</target>
        </trans-unit>
        <trans-unit id="790" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Func delegate type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;An array of Type objects that specify the type arguments for the System.Func delegate type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="791" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;When this method returns, contains the generic System.Func delegate type that has specific type arguments.</source>
          <target state="new">\n&lt;p&gt;When this method returns, contains the generic System.Func delegate type that has specific type arguments.</target>
        </trans-unit>
        <trans-unit id="792" translate="yes" xml:space="preserve">
          <source>Contains null if there is no generic System.Func delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\n</source>
          <target state="new">Contains null if there is no generic System.Func delegate that matches the &lt;em&gt;typeArgs&lt;/em&gt;.This parameter is passed uninitialized.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="793" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;true if generic System.Func delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;true if generic System.Func delegate type was created for specific &lt;em&gt;typeArgs&lt;/em&gt;; false otherwise.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="794" translate="yes" xml:space="preserve">
          <source>TypeAs(Expression, Type)</source>
          <target state="new">TypeAs(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="795" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="796" translate="yes" xml:space="preserve">
          <source>TypeEqual(Expression, Type)</source>
          <target state="new">TypeEqual(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="797" translate="yes" xml:space="preserve">
          <source>TypeIs(Expression, Type)</source>
          <target state="new">TypeIs(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="798" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="799" translate="yes" xml:space="preserve">
          <source>UnaryPlus(Expression)</source>
          <target state="new">UnaryPlus(Expression)</target>
        </trans-unit>
        <trans-unit id="800" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="801" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="802" translate="yes" xml:space="preserve">
          <source>UnaryPlus(Expression, MethodInfo)</source>
          <target state="new">UnaryPlus(Expression, MethodInfo)</target>
        </trans-unit>
        <trans-unit id="803" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="804" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is not &lt;strong&gt;null&lt;/strong&gt; and the method it represents returns &lt;strong&gt;void&lt;/strong&gt;, is not &lt;strong&gt;static&lt;/strong&gt; (&lt;strong&gt;Shared&lt;/strong&gt; in Visual Basic), or does not take exactly one argument.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="805" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;\n&lt;em&gt;method&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; and the unary plus operator is not defined for &lt;em&gt;expression&lt;/em&gt;.Type.&lt;/p&gt;\n&lt;p&gt;-or-&lt;/p&gt;\n&lt;p&gt;\n&lt;em&gt;expression&lt;/em&gt;.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="806" translate="yes" xml:space="preserve">
          <source>Unbox(Expression, Type)</source>
          <target state="new">Unbox(Expression, Type)</target>
        </trans-unit>
        <trans-unit id="807" translate="yes" xml:space="preserve">
          <source>Variable(Type)</source>
          <target state="new">Variable(Type)</target>
        </trans-unit>
        <trans-unit id="808" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="809" translate="yes" xml:space="preserve">
          <source>Variable(Type, String)</source>
          <target state="new">Variable(Type, String)</target>
        </trans-unit>
        <trans-unit id="810" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The type of the parameter or variable.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="811" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The name of the parameter or variable.</source>
          <target state="new">\n&lt;p&gt;The name of the parameter or variable.</target>
        </trans-unit>
        <trans-unit id="812" translate="yes" xml:space="preserve">
          <source>This name is used for debugging or printing purpose only.&lt;/p&gt;\n</source>
          <target state="new">This name is used for debugging or printing purpose only.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="813" translate="yes" xml:space="preserve">
          <source>VisitChildren(ExpressionVisitor)</source>
          <target state="new">VisitChildren(ExpressionVisitor)</target>
        </trans-unit>
        <trans-unit id="814" translate="yes" xml:space="preserve">
          <source>\n&lt;p&gt;The expression being visited, or an expression which should replace it in the tree.&lt;/p&gt;\n</source>
          <target state="new">\n&lt;p&gt;The expression being visited, or an expression which should replace it in the tree.&lt;/p&gt;\n</target>
        </trans-unit>
        <trans-unit id="815" translate="yes" xml:space="preserve">
          <source>System.Linq.Expressions</source>
          <target state="new">System.Linq.Expressions</target>
        </trans-unit>
        <trans-unit id="816" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="817" translate="yes" xml:space="preserve">
          <source>Equals(Object)</source>
          <target state="new">Equals(Object)</target>
        </trans-unit>
        <trans-unit id="818" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="new">Equals</target>
        </trans-unit>
        <trans-unit id="819" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="820" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="821" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="822" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="new">Equals</target>
        </trans-unit>
        <trans-unit id="823" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="824" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="825" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="826" translate="yes" xml:space="preserve">
          <source>Equals(Object, Object)</source>
          <target state="new">Equals(Object, Object)</target>
        </trans-unit>
        <trans-unit id="827" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="new">Equals</target>
        </trans-unit>
        <trans-unit id="828" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="829" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="830" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new">,</target>
        </trans-unit>
        <trans-unit id="831" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="832" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="833" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="new">Equals</target>
        </trans-unit>
        <trans-unit id="834" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="835" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="836" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new">,</target>
        </trans-unit>
        <trans-unit id="837" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="838" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="839" translate="yes" xml:space="preserve">
          <source>ReferenceEquals(Object, Object)</source>
          <target state="new">ReferenceEquals(Object, Object)</target>
        </trans-unit>
        <trans-unit id="840" translate="yes" xml:space="preserve">
          <source>ReferenceEquals</source>
          <target state="new">ReferenceEquals</target>
        </trans-unit>
        <trans-unit id="841" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="842" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="843" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new">,</target>
        </trans-unit>
        <trans-unit id="844" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="845" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="846" translate="yes" xml:space="preserve">
          <source>ReferenceEquals</source>
          <target state="new">ReferenceEquals</target>
        </trans-unit>
        <trans-unit id="847" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="848" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="849" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="new">,</target>
        </trans-unit>
        <trans-unit id="850" translate="yes" xml:space="preserve">
          <source>Object</source>
          <target state="new">Object</target>
        </trans-unit>
        <trans-unit id="851" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="852" translate="yes" xml:space="preserve">
          <source>GetHashCode()</source>
          <target state="new">GetHashCode()</target>
        </trans-unit>
        <trans-unit id="853" translate="yes" xml:space="preserve">
          <source>GetHashCode</source>
          <target state="new">GetHashCode</target>
        </trans-unit>
        <trans-unit id="854" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="855" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="856" translate="yes" xml:space="preserve">
          <source>GetHashCode</source>
          <target state="new">GetHashCode</target>
        </trans-unit>
        <trans-unit id="857" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="858" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="859" translate="yes" xml:space="preserve">
          <source>GetType()</source>
          <target state="new">GetType()</target>
        </trans-unit>
        <trans-unit id="860" translate="yes" xml:space="preserve">
          <source>GetType</source>
          <target state="new">GetType</target>
        </trans-unit>
        <trans-unit id="861" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="862" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="863" translate="yes" xml:space="preserve">
          <source>GetType</source>
          <target state="new">GetType</target>
        </trans-unit>
        <trans-unit id="864" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="865" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="866" translate="yes" xml:space="preserve">
          <source>MemberwiseClone()</source>
          <target state="new">MemberwiseClone()</target>
        </trans-unit>
        <trans-unit id="867" translate="yes" xml:space="preserve">
          <source>MemberwiseClone</source>
          <target state="new">MemberwiseClone</target>
        </trans-unit>
        <trans-unit id="868" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="869" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="870" translate="yes" xml:space="preserve">
          <source>MemberwiseClone</source>
          <target state="new">MemberwiseClone</target>
        </trans-unit>
        <trans-unit id="871" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="872" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="873" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="new">System</target>
        </trans-unit>
        <trans-unit id="874" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="new">Boolean</target>
        </trans-unit>
        <trans-unit id="875" translate="yes" xml:space="preserve">
          <source>ExpressionType</source>
          <target state="new">ExpressionType</target>
        </trans-unit>
        <trans-unit id="876" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="877" translate="yes" xml:space="preserve">
          <source>ExpressionVisitor</source>
          <target state="new">ExpressionVisitor</target>
        </trans-unit>
        <trans-unit id="878" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="879" translate="yes" xml:space="preserve">
          <source>BinaryExpression</source>
          <target state="new">BinaryExpression</target>
        </trans-unit>
        <trans-unit id="880" translate="yes" xml:space="preserve">
          <source>MethodInfo</source>
          <target state="new">MethodInfo</target>
        </trans-unit>
        <trans-unit id="881" translate="yes" xml:space="preserve">
          <source>System.Reflection</source>
          <target state="new">System.Reflection</target>
        </trans-unit>
        <trans-unit id="882" translate="yes" xml:space="preserve">
          <source>LambdaExpression</source>
          <target state="new">LambdaExpression</target>
        </trans-unit>
        <trans-unit id="883" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;Expression&gt;</source>
          <target state="new">IEnumerable&lt;Expression&gt;</target>
        </trans-unit>
        <trans-unit id="884" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="885" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="886" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="887" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="888" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="889" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="890" translate="yes" xml:space="preserve">
          <source>IndexExpression</source>
          <target state="new">IndexExpression</target>
        </trans-unit>
        <trans-unit id="891" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;T&gt;</source>
          <target state="new">IEnumerable&lt;T&gt;</target>
        </trans-unit>
        <trans-unit id="892" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="893" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="new">T</target>
        </trans-unit>
        <trans-unit id="894" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="895" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="896" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="new">T</target>
        </trans-unit>
        <trans-unit id="897" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="898" translate="yes" xml:space="preserve">
          <source>System.Collections.Generic</source>
          <target state="new">System.Collections.Generic</target>
        </trans-unit>
        <trans-unit id="899" translate="yes" xml:space="preserve">
          <source>Expression[]</source>
          <target state="new">Expression[]</target>
        </trans-unit>
        <trans-unit id="900" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="901" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="902" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="903" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="904" translate="yes" xml:space="preserve">
          <source>MethodCallExpression</source>
          <target state="new">MethodCallExpression</target>
        </trans-unit>
        <trans-unit id="905" translate="yes" xml:space="preserve">
          <source>UnaryExpression</source>
          <target state="new">UnaryExpression</target>
        </trans-unit>
        <trans-unit id="906" translate="yes" xml:space="preserve">
          <source>MemberInfo</source>
          <target state="new">MemberInfo</target>
        </trans-unit>
        <trans-unit id="907" translate="yes" xml:space="preserve">
          <source>MemberAssignment</source>
          <target state="new">MemberAssignment</target>
        </trans-unit>
        <trans-unit id="908" translate="yes" xml:space="preserve">
          <source>BlockExpression</source>
          <target state="new">BlockExpression</target>
        </trans-unit>
        <trans-unit id="909" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;ParameterExpression&gt;</source>
          <target state="new">IEnumerable&lt;ParameterExpression&gt;</target>
        </trans-unit>
        <trans-unit id="910" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="911" translate="yes" xml:space="preserve">
          <source>ParameterExpression</source>
          <target state="new">ParameterExpression</target>
        </trans-unit>
        <trans-unit id="912" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="913" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="914" translate="yes" xml:space="preserve">
          <source>ParameterExpression</source>
          <target state="new">ParameterExpression</target>
        </trans-unit>
        <trans-unit id="915" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="916" translate="yes" xml:space="preserve">
          <source>LabelTarget</source>
          <target state="new">LabelTarget</target>
        </trans-unit>
        <trans-unit id="917" translate="yes" xml:space="preserve">
          <source>GotoExpression</source>
          <target state="new">GotoExpression</target>
        </trans-unit>
        <trans-unit id="918" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new">String</target>
        </trans-unit>
        <trans-unit id="919" translate="yes" xml:space="preserve">
          <source>Type[]</source>
          <target state="new">Type[]</target>
        </trans-unit>
        <trans-unit id="920" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="921" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="922" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="new">Type</target>
        </trans-unit>
        <trans-unit id="923" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="924" translate="yes" xml:space="preserve">
          <source>ParameterExpression</source>
          <target state="new">ParameterExpression</target>
        </trans-unit>
        <trans-unit id="925" translate="yes" xml:space="preserve">
          <source>CatchBlock</source>
          <target state="new">CatchBlock</target>
        </trans-unit>
        <trans-unit id="926" translate="yes" xml:space="preserve">
          <source>SymbolDocumentInfo</source>
          <target state="new">SymbolDocumentInfo</target>
        </trans-unit>
        <trans-unit id="927" translate="yes" xml:space="preserve">
          <source>DebugInfoExpression</source>
          <target state="new">DebugInfoExpression</target>
        </trans-unit>
        <trans-unit id="928" translate="yes" xml:space="preserve">
          <source>ConditionalExpression</source>
          <target state="new">ConditionalExpression</target>
        </trans-unit>
        <trans-unit id="929" translate="yes" xml:space="preserve">
          <source>ConstantExpression</source>
          <target state="new">ConstantExpression</target>
        </trans-unit>
        <trans-unit id="930" translate="yes" xml:space="preserve">
          <source>Int32</source>
          <target state="new">Int32</target>
        </trans-unit>
        <trans-unit id="931" translate="yes" xml:space="preserve">
          <source>DefaultExpression</source>
          <target state="new">DefaultExpression</target>
        </trans-unit>
        <trans-unit id="932" translate="yes" xml:space="preserve">
          <source>ElementInit</source>
          <target state="new">ElementInit</target>
        </trans-unit>
        <trans-unit id="933" translate="yes" xml:space="preserve">
          <source>FieldInfo</source>
          <target state="new">FieldInfo</target>
        </trans-unit>
        <trans-unit id="934" translate="yes" xml:space="preserve">
          <source>MemberExpression</source>
          <target state="new">MemberExpression</target>
        </trans-unit>
        <trans-unit id="935" translate="yes" xml:space="preserve">
          <source>InvocationExpression</source>
          <target state="new">InvocationExpression</target>
        </trans-unit>
        <trans-unit id="936" translate="yes" xml:space="preserve">
          <source>LabelExpression</source>
          <target state="new">LabelExpression</target>
        </trans-unit>
        <trans-unit id="937" translate="yes" xml:space="preserve">
          <source>ParameterExpression[]</source>
          <target state="new">ParameterExpression[]</target>
        </trans-unit>
        <trans-unit id="938" translate="yes" xml:space="preserve">
          <source>ParameterExpression</source>
          <target state="new">ParameterExpression</target>
        </trans-unit>
        <trans-unit id="939" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="940" translate="yes" xml:space="preserve">
          <source>ParameterExpression</source>
          <target state="new">ParameterExpression</target>
        </trans-unit>
        <trans-unit id="941" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="942" translate="yes" xml:space="preserve">
          <source>Expression&lt;TDelegate&gt;</source>
          <target state="new">Expression&lt;TDelegate&gt;</target>
        </trans-unit>
        <trans-unit id="943" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="944" translate="yes" xml:space="preserve">
          <source>TDelegate</source>
          <target state="new">TDelegate</target>
        </trans-unit>
        <trans-unit id="945" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="946" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="947" translate="yes" xml:space="preserve">
          <source>TDelegate</source>
          <target state="new">TDelegate</target>
        </trans-unit>
        <trans-unit id="948" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="949" translate="yes" xml:space="preserve">
          <source>Expression&lt;TDelegate&gt;</source>
          <target state="new">Expression&lt;TDelegate&gt;</target>
        </trans-unit>
        <trans-unit id="950" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="951" translate="yes" xml:space="preserve">
          <source>TDelegate</source>
          <target state="new">TDelegate</target>
        </trans-unit>
        <trans-unit id="952" translate="yes" xml:space="preserve">
          <source>Expression</source>
          <target state="new">Expression</target>
        </trans-unit>
        <trans-unit id="953" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="954" translate="yes" xml:space="preserve">
          <source>TDelegate</source>
          <target state="new">TDelegate</target>
        </trans-unit>
        <trans-unit id="955" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="956" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;ElementInit&gt;</source>
          <target state="new">IEnumerable&lt;ElementInit&gt;</target>
        </trans-unit>
        <trans-unit id="957" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="958" translate="yes" xml:space="preserve">
          <source>ElementInit</source>
          <target state="new">ElementInit</target>
        </trans-unit>
        <trans-unit id="959" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="960" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="961" translate="yes" xml:space="preserve">
          <source>ElementInit</source>
          <target state="new">ElementInit</target>
        </trans-unit>
        <trans-unit id="962" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="963" translate="yes" xml:space="preserve">
          <source>MemberListBinding</source>
          <target state="new">MemberListBinding</target>
        </trans-unit>
        <trans-unit id="964" translate="yes" xml:space="preserve">
          <source>ElementInit[]</source>
          <target state="new">ElementInit[]</target>
        </trans-unit>
        <trans-unit id="965" translate="yes" xml:space="preserve">
          <source>ElementInit</source>
          <target state="new">ElementInit</target>
        </trans-unit>
        <trans-unit id="966" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="967" translate="yes" xml:space="preserve">
          <source>ElementInit</source>
          <target state="new">ElementInit</target>
        </trans-unit>
        <trans-unit id="968" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="969" translate="yes" xml:space="preserve">
          <source>NewExpression</source>
          <target state="new">NewExpression</target>
        </trans-unit>
        <trans-unit id="970" translate="yes" xml:space="preserve">
          <source>ListInitExpression</source>
          <target state="new">ListInitExpression</target>
        </trans-unit>
        <trans-unit id="971" translate="yes" xml:space="preserve">
          <source>LoopExpression</source>
          <target state="new">LoopExpression</target>
        </trans-unit>
        <trans-unit id="972" translate="yes" xml:space="preserve">
          <source>GotoExpressionKind</source>
          <target state="new">GotoExpressionKind</target>
        </trans-unit>
        <trans-unit id="973" translate="yes" xml:space="preserve">
          <source>PropertyInfo</source>
          <target state="new">PropertyInfo</target>
        </trans-unit>
        <trans-unit id="974" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;CatchBlock&gt;</source>
          <target state="new">IEnumerable&lt;CatchBlock&gt;</target>
        </trans-unit>
        <trans-unit id="975" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="976" translate="yes" xml:space="preserve">
          <source>CatchBlock</source>
          <target state="new">CatchBlock</target>
        </trans-unit>
        <trans-unit id="977" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="978" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="979" translate="yes" xml:space="preserve">
          <source>CatchBlock</source>
          <target state="new">CatchBlock</target>
        </trans-unit>
        <trans-unit id="980" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="981" translate="yes" xml:space="preserve">
          <source>TryExpression</source>
          <target state="new">TryExpression</target>
        </trans-unit>
        <trans-unit id="982" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;MemberBinding&gt;</source>
          <target state="new">IEnumerable&lt;MemberBinding&gt;</target>
        </trans-unit>
        <trans-unit id="983" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="984" translate="yes" xml:space="preserve">
          <source>MemberBinding</source>
          <target state="new">MemberBinding</target>
        </trans-unit>
        <trans-unit id="985" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="986" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="987" translate="yes" xml:space="preserve">
          <source>MemberBinding</source>
          <target state="new">MemberBinding</target>
        </trans-unit>
        <trans-unit id="988" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="989" translate="yes" xml:space="preserve">
          <source>MemberMemberBinding</source>
          <target state="new">MemberMemberBinding</target>
        </trans-unit>
        <trans-unit id="990" translate="yes" xml:space="preserve">
          <source>MemberBinding[]</source>
          <target state="new">MemberBinding[]</target>
        </trans-unit>
        <trans-unit id="991" translate="yes" xml:space="preserve">
          <source>MemberBinding</source>
          <target state="new">MemberBinding</target>
        </trans-unit>
        <trans-unit id="992" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="993" translate="yes" xml:space="preserve">
          <source>MemberBinding</source>
          <target state="new">MemberBinding</target>
        </trans-unit>
        <trans-unit id="994" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="995" translate="yes" xml:space="preserve">
          <source>MemberInitExpression</source>
          <target state="new">MemberInitExpression</target>
        </trans-unit>
        <trans-unit id="996" translate="yes" xml:space="preserve">
          <source>ConstructorInfo</source>
          <target state="new">ConstructorInfo</target>
        </trans-unit>
        <trans-unit id="997" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;MemberInfo&gt;</source>
          <target state="new">IEnumerable&lt;MemberInfo&gt;</target>
        </trans-unit>
        <trans-unit id="998" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="999" translate="yes" xml:space="preserve">
          <source>MemberInfo</source>
          <target state="new">MemberInfo</target>
        </trans-unit>
        <trans-unit id="1000" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="1001" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="1002" translate="yes" xml:space="preserve">
          <source>MemberInfo</source>
          <target state="new">MemberInfo</target>
        </trans-unit>
        <trans-unit id="1003" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="1004" translate="yes" xml:space="preserve">
          <source>MemberInfo[]</source>
          <target state="new">MemberInfo[]</target>
        </trans-unit>
        <trans-unit id="1005" translate="yes" xml:space="preserve">
          <source>MemberInfo</source>
          <target state="new">MemberInfo</target>
        </trans-unit>
        <trans-unit id="1006" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="1007" translate="yes" xml:space="preserve">
          <source>MemberInfo</source>
          <target state="new">MemberInfo</target>
        </trans-unit>
        <trans-unit id="1008" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="1009" translate="yes" xml:space="preserve">
          <source>NewArrayExpression</source>
          <target state="new">NewArrayExpression</target>
        </trans-unit>
        <trans-unit id="1010" translate="yes" xml:space="preserve">
          <source>RuntimeVariablesExpression</source>
          <target state="new">RuntimeVariablesExpression</target>
        </trans-unit>
        <trans-unit id="1011" translate="yes" xml:space="preserve">
          <source>SwitchCase[]</source>
          <target state="new">SwitchCase[]</target>
        </trans-unit>
        <trans-unit id="1012" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="new">SwitchCase</target>
        </trans-unit>
        <trans-unit id="1013" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="1014" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="new">SwitchCase</target>
        </trans-unit>
        <trans-unit id="1015" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="1016" translate="yes" xml:space="preserve">
          <source>SwitchExpression</source>
          <target state="new">SwitchExpression</target>
        </trans-unit>
        <trans-unit id="1017" translate="yes" xml:space="preserve">
          <source>IEnumerable&lt;SwitchCase&gt;</source>
          <target state="new">IEnumerable&lt;SwitchCase&gt;</target>
        </trans-unit>
        <trans-unit id="1018" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="1019" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="new">SwitchCase</target>
        </trans-unit>
        <trans-unit id="1020" translate="yes" xml:space="preserve">
          <source>IEnumerable</source>
          <target state="new">IEnumerable</target>
        </trans-unit>
        <trans-unit id="1021" translate="yes" xml:space="preserve">
          <source>(Of</source>
          <target state="new">(Of</target>
        </trans-unit>
        <trans-unit id="1022" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="new">SwitchCase</target>
        </trans-unit>
        <trans-unit id="1023" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="1024" translate="yes" xml:space="preserve">
          <source>SwitchCase</source>
          <target state="new">SwitchCase</target>
        </trans-unit>
        <trans-unit id="1025" translate="yes" xml:space="preserve">
          <source>Guid</source>
          <target state="new">Guid</target>
        </trans-unit>
        <trans-unit id="1026" translate="yes" xml:space="preserve">
          <source>ToString()</source>
          <target state="new">ToString()</target>
        </trans-unit>
        <trans-unit id="1027" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="new">ToString</target>
        </trans-unit>
        <trans-unit id="1028" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="1029" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="1030" translate="yes" xml:space="preserve">
          <source>ToString</source>
          <target state="new">ToString</target>
        </trans-unit>
        <trans-unit id="1031" translate="yes" xml:space="preserve">
          <source>(</source>
          <target state="new">(</target>
        </trans-unit>
        <trans-unit id="1032" translate="yes" xml:space="preserve">
          <source>)</source>
          <target state="new">)</target>
        </trans-unit>
        <trans-unit id="1033" translate="yes" xml:space="preserve">
          <source>CatchBlock[]</source>
          <target state="new">CatchBlock[]</target>
        </trans-unit>
        <trans-unit id="1034" translate="yes" xml:space="preserve">
          <source>CatchBlock</source>
          <target state="new">CatchBlock</target>
        </trans-unit>
        <trans-unit id="1035" translate="yes" xml:space="preserve">
          <source>[]</source>
          <target state="new">[]</target>
        </trans-unit>
        <trans-unit id="1036" translate="yes" xml:space="preserve">
          <source>CatchBlock</source>
          <target state="new">CatchBlock</target>
        </trans-unit>
        <trans-unit id="1037" translate="yes" xml:space="preserve">
          <source>()</source>
          <target state="new">()</target>
        </trans-unit>
        <trans-unit id="1038" translate="yes" xml:space="preserve">
          <source>TypeBinaryExpression</source>
          <target state="new">TypeBinaryExpression</target>
        </trans-unit>
        <trans-unit id="1039" translate="yes" xml:space="preserve">
          <source>ArgumentNullException</source>
          <target state="new">ArgumentNullException</target>
        </trans-unit>
        <trans-unit id="1040" translate="yes" xml:space="preserve">
          <source>InvalidOperationException</source>
          <target state="new">InvalidOperationException</target>
        </trans-unit>
        <trans-unit id="1041" translate="yes" xml:space="preserve">
          <source>ArgumentException</source>
          <target state="new">ArgumentException</target>
        </trans-unit>
        <trans-unit id="1042" translate="yes" xml:space="preserve">
          <source>AmbiguousMatchException</source>
          <target state="new">AmbiguousMatchException</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>