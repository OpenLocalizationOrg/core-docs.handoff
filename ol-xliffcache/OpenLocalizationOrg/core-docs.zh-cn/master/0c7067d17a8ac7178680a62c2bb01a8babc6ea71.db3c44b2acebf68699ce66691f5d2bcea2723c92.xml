{"nodes":[{"pos":[11,45],"content":".NET Core Command Line Tools (CLI)","needQuote":true,"nodes":[{"content":".NET Core Command Line Tools (CLI)","pos":[0,34]}]},{"pos":[59,93],"content":".NET Core Command Line Tools (CLI)","needQuote":true,"nodes":[{"content":".NET Core Command Line Tools (CLI)","pos":[0,34]}]},{"pos":[104,119],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":".NET Core Command Line Tools","pos":[323,351]},{"content":"What is the .NET Core Command Line Interface (CLI)?","pos":[356,407]},{"content":"The .NET Core CLI is a new foundational cross-platform toolchain for developing .NET Core applications.","pos":[408,512],"source":"The .NET Core CLI is a new foundational cross-platform toolchain for developing \n.NET Core applications."},{"content":"It is \"foundational\" because it is the primary layer on which other, higher-level tools, such as Integrated Development Environments (IDEs), editors and build orchestrators can build on.","pos":[513,701],"source":" It is \"foundational\" because it is the primary layer on which other, \nhigher-level tools, such as Integrated Development Environments (IDEs), editors and \nbuild orchestrators can build on."},{"content":"It is also cross-platform by default and has the same surface area on each of the supported platforms.","pos":[704,806]},{"content":"This means that when you learn how to use the tooling, you can use it the same way from any of the supported platforms.","pos":[807,926],"source":" This means that\nwhen you learn how to use the tooling, you can use it the same way from any of the supported platforms."},{"content":"Installation","pos":[932,944]},{"content":"As with any tooling, the first thing is to get the tools to your machine.","pos":[945,1018]},{"content":"Depending on your scenario, you can either use the native installers to install the CLI or use the installation shell script.","pos":[1019,1145],"source":" Depending on your scenario, you can either \nuse the native installers to install the CLI or use the installation shell script."},{"content":"The native installers are primarily meant for developer's machines.","pos":[1147,1214]},{"content":"The CLI is distributed using each supported platform's native install mechanism, for instance DEB packages on Ubuntu or MSI bundles on Windows.","pos":[1215,1359],"source":" The CLI is distributed using each supported platform's \nnative install mechanism, for instance DEB packages on Ubuntu or MSI bundles on Windows."},{"content":"These installers will install and set up the environment as needed for the user to use the CLI immediately after the install.","pos":[1360,1486],"source":" These installers will install \nand set up the environment as needed for the user to use the CLI immediately after the install."},{"content":"However, they also require administrative privileges on the machine.","pos":[1487,1556],"source":" However, they also \nrequire administrative privileges on the machine."},{"content":"You can view the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core getting started page<ept id=\"p1\">](https://aka.ms/dotnetcoregs)</ept>.","pos":[1557,1669],"source":" You can view the installation instructions on the\n[.NET Core getting started page](https://aka.ms/dotnetcoregs)."},{"content":"Install scripts, on the other hand, do not require administrative privileges.","pos":[1671,1748]},{"content":"However, they will also not install any prerequisites on the machine; you need to install all of the prerequisites manually.","pos":[1749,1874],"source":" However, they will also not install any \nprerequisites on the machine; you need to install all of the prerequisites manually."},{"content":"The scripts are meant mostly for setting up build servers or when you wish to install the tools without administrative privileges (do note the prerequisites caveat above).","pos":[1875,2048],"source":" The scripts are meant mostly for \nsetting up build servers or when you wish to install the tools without administrative privileges (do note the prerequisites \ncaveat above)."},{"content":"You can find more information on the <bpt id=\"p1\">[</bpt>install script reference topic<ept id=\"p1\">](dotnet-install-script.md)</ept>.","pos":[2049,2145],"source":" You can find more information on the [install script reference topic](dotnet-install-script.md)."},{"content":"If you are interested in how to set up CLI on your continuous integration (CI) build server you can take a look at the <bpt id=\"p1\">[</bpt>CLI with CI servers<ept id=\"p1\">](using-ci-with-cli.md)</ept> document.","pos":[2146,2320],"source":" If you are \ninterested in how to set up CLI on your continuous integration (CI) build server you can take a look at the \n[CLI with CI servers](using-ci-with-cli.md) document."},{"content":"By default, the CLI will install in a side-by-side (SxS) manner.","pos":[2323,2387]},{"content":"This means that multiple versions of the CLI tools can coexist at any given time on a single machine.","pos":[2388,2490],"source":" This means that multiple versions of the CLI tools \ncan coexist at any given time on a single machine."},{"content":"How the correct version gets used is explained in more detail in the <bpt id=\"p1\">[</bpt>driver section<ept id=\"p1\">](#driver)</ept> below.","pos":[2491,2593],"source":" How the correct version gets used is explained in more detail in \nthe [driver section](#driver) below."},{"content":"What commands come in the box?","pos":[2600,2630]},{"content":"The following commands are installed by default:","pos":[2631,2679]},{"content":"new","pos":[2684,2687]},{"content":"restore","pos":[2707,2714]},{"content":"run","pos":[2738,2741]},{"content":"build","pos":[2761,2766]},{"content":"test","pos":[2788,2792]},{"content":"publish","pos":[2813,2820]},{"content":"pack","pos":[2844,2848]},{"content":"There is also a way to import more commands on a per-project basis as well as to add your own commands.","pos":[2867,2970]},{"content":"This is explained in greater detail in the <bpt id=\"p1\">[</bpt>extensibility section<ept id=\"p1\">](#extensibility)</ept>.","pos":[2971,3055],"source":" This is \nexplained in greater detail in the [extensibility section](#extensibility)."},{"content":"Working with the CLI","pos":[3061,3081]},{"content":"A short sample","pos":[3087,3101]},{"content":"Before we go into any more details, let's see how working with the CLI looks like from a 10,000-foot view.","pos":[3102,3208]},{"content":"The sample below utilizes several commands from the CLI standard install to initialize a new simple console application, restore the dependencies, build the application and then run it.","pos":[3209,3396],"source":" \nThe sample below utilizes several commands from the CLI standard install to initialize a new simple console application, \nrestore the dependencies, build the application and then run it."},{"content":"How does it work?","pos":[3496,3513]},{"content":"As we saw in the short sample <bpt id=\"p1\">[</bpt>above<ept id=\"p1\">](#a-short-sample)</ept>, there is a pattern in the way you use the CLI tools.","pos":[3514,3622],"source":"As we saw in the short sample [above](#a-short-sample), there is a pattern in the way you use the CLI tools."},{"content":"Within that pattern, we can identify three main pieces of each command:","pos":[3623,3695],"source":" Within that pattern, we can \nidentify three main pieces of each command:"},{"content":"The driver (\"dotnet\")","pos":[3700,3721]},{"content":"The command, or \"verb\"","pos":[3725,3747]},{"content":"Command arguments","pos":[3751,3768]},{"content":"Let's dig into more details on each of the above.","pos":[3770,3819]},{"content":"Driver","pos":[3825,3831]},{"content":"The driver is named <ph id=\"ph1\">`dotnet`</ph>.","pos":[3832,3861],"source":"The driver is named `dotnet`."},{"content":"It is the first part of what you invoke.","pos":[3862,3902]},{"content":"The driver has two responsibilities:","pos":[3903,3939]},{"content":"Executing IL code","pos":[3944,3961]},{"content":"Executing the verb","pos":[3965,3983]},{"content":"Which of the two things it does is dependent on what is specified on the command line.","pos":[3985,4071]},{"content":"In the first case, you would specify an IL assembly that <ph id=\"ph1\">`dotnet`</ph> would run similar to this: <ph id=\"ph2\">`dotnet /path/to/your.dll`</ph>.","pos":[4072,4193],"source":" In the first case, you would \nspecify an IL assembly that `dotnet` would run similar to this: `dotnet /path/to/your.dll`."},{"content":"In the second case, the driver attempts to invoke the specified command.","pos":[4196,4268]},{"content":"This will start the CLI command execution process.","pos":[4269,4320],"source":" This will start the CLI command execution \nprocess."},{"content":"First, the driver will determine the version of the tooling that you want.","pos":[4321,4395]},{"content":"You can specify the version in the <ph id=\"ph1\">`global.json`</ph> file using the <ph id=\"ph2\">`sdkVersion`</ph> property.","pos":[4396,4483],"source":" You can specify the version in the \n`global.json` file using the `sdkVersion` property."},{"content":"If that is not available, the driver will find the latest version of the tools that is installed on disk and will use that version.","pos":[4484,4615],"source":" If that is not available, the driver will find the latest version\nof the tools that is installed on disk and will use that version."},{"content":"Once the version is determined, it will execute the command.","pos":[4616,4677],"source":" Once the version is determined, it will execute the \ncommand."},{"content":"The \"verb\"","pos":[4684,4694]},{"content":"The verb is simply a command that performs an action.","pos":[4695,4748]},{"content":"will build your code.","pos":[4764,4785]},{"content":"will publish your code.","pos":[4803,4827],"source":" will publish \nyour code."},{"content":"The verb is implemented as a console application that is named per convention: <ph id=\"ph1\">`dotnet-{verb}`</ph>.","pos":[4828,4923],"source":" The verb is implemented as a console application that is named per convention: `dotnet-{verb}`."},{"content":"All of the logic is implemented in the console application that represents the verb.","pos":[4924,5009],"source":" All of the \nlogic is implemented in the console application that represents the verb."},{"content":"The arguments","pos":[5016,5029]},{"content":"The arguments that you pass on the command line are the arguments to the actual verb/command being invoked.","pos":[5030,5137]},{"content":"For example, when you type <ph id=\"ph1\">`dotnet publish --output publishedapp`</ph> the <ph id=\"ph2\">`--output`</ph> argument is passed to the <ph id=\"ph3\">`publish`</ph> command.","pos":[5138,5265],"source":" \nFor example, when you type `dotnet publish --output publishedapp` the `--output` argument is passed to the \n`publish` command."},{"content":"Types of application portability","pos":[5271,5303]},{"content":"CLI enables applications to be portable in two main ways:","pos":[5304,5361]},{"content":"Completely portable application that can run anywhere .NET Core is installed","pos":[5366,5442]},{"content":"Self-contained applications","pos":[5446,5473]},{"pos":[5475,5573],"content":"You can learn more about both of these in the <bpt id=\"p1\">[</bpt>application types overview<ept id=\"p1\">](../app-types.md)</ept> topic.","source":"You can learn more about both of these in the [application types overview](../app-types.md) topic."},{"content":"Migration from DNX","pos":[5579,5597]},{"content":"If you used DNX in RC1 of .NET Core, you may be wondering what happened to it and how do these new tools relate to the DNX tools.","pos":[5598,5727],"source":"If you used DNX in RC1 of .NET Core, you may be wondering what happened to it and how do these new tools\nrelate to the DNX tools."},{"content":"In short, the DNX tools have been replaced with the .NET Core CLI tools.","pos":[5728,5800]},{"content":"If you have existing projects or are just wondering how the commands map, you can use the <bpt id=\"p1\">[</bpt>DNX to CLI migration document<ept id=\"p1\">](../migrating-from-dnx.md)</ept> to get all of the details.","pos":[5801,5976],"source":" \nIf you have existing projects or are just wondering how the commands map, you\ncan use the [DNX to CLI migration document](../migrating-from-dnx.md) to get all of the details."},{"content":"Extensibility","pos":[5982,5995]},{"content":"Of course, not every tool that you could use in your workflow will be a part of the core CLI tools.","pos":[5996,6095]},{"content":"However, .NET Core CLI has an extensibility model that allows you to specify additional tools for your projects.","pos":[6096,6209],"source":" However, .NET Core \nCLI has an extensibility model that allows you to specify additional tools for your projects."},{"content":"You can find out more in the <bpt id=\"p1\">[</bpt>extensibility document<ept id=\"p1\">](extensibility.md)</ept>.","pos":[6210,6283],"source":" You can find out more \nin the [extensibility document](extensibility.md)."},{"content":"More resources","pos":[6289,6303]},{"content":"This was a short overview of the most important features of the CLI.","pos":[6304,6372]},{"content":"You can find out more by using the reference and conceptual topics on this site.","pos":[6373,6454],"source":" You can find out more by using the reference and \nconceptual topics on this site."},{"content":"There are also other resources you can use:","pos":[6455,6498]},{"content":"GitHub repo","pos":[6503,6514]},{"content":"Getting Started instructions","pos":[6551,6579]}],"content":"---\ntitle: .NET Core Command Line Tools (CLI)\ndescription: .NET Core Command Line Tools (CLI)\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: b70e9ac0-c8be-49f7-9332-95ab93e0e7bc\n---\n\n# .NET Core Command Line Tools\n\n## What is the .NET Core Command Line Interface (CLI)?\nThe .NET Core CLI is a new foundational cross-platform toolchain for developing \n.NET Core applications. It is \"foundational\" because it is the primary layer on which other, \nhigher-level tools, such as Integrated Development Environments (IDEs), editors and \nbuild orchestrators can build on. \n\nIt is also cross-platform by default and has the same surface area on each of the supported platforms. This means that\nwhen you learn how to use the tooling, you can use it the same way from any of the supported platforms. \n\n## Installation\nAs with any tooling, the first thing is to get the tools to your machine. Depending on your scenario, you can either \nuse the native installers to install the CLI or use the installation shell script.\n\nThe native installers are primarily meant for developer's machines. The CLI is distributed using each supported platform's \nnative install mechanism, for instance DEB packages on Ubuntu or MSI bundles on Windows. These installers will install \nand set up the environment as needed for the user to use the CLI immediately after the install. However, they also \nrequire administrative privileges on the machine. You can view the installation instructions on the\n[.NET Core getting started page](https://aka.ms/dotnetcoregs).\n\nInstall scripts, on the other hand, do not require administrative privileges. However, they will also not install any \nprerequisites on the machine; you need to install all of the prerequisites manually. The scripts are meant mostly for \nsetting up build servers or when you wish to install the tools without administrative privileges (do note the prerequisites \ncaveat above). You can find more information on the [install script reference topic](dotnet-install-script.md). If you are \ninterested in how to set up CLI on your continuous integration (CI) build server you can take a look at the \n[CLI with CI servers](using-ci-with-cli.md) document. \n\nBy default, the CLI will install in a side-by-side (SxS) manner. This means that multiple versions of the CLI tools \ncan coexist at any given time on a single machine. How the correct version gets used is explained in more detail in \nthe [driver section](#driver) below. \n\n### What commands come in the box?\nThe following commands are installed by default:\n\n* [new](dotnet-new.md)\n* [restore](dotnet-restore.md)\n* [run](dotnet-run.md)\n* [build](dotnet-build.md)\n* [test](dotnet-test.md)\n* [publish](dotnet-publish.md)\n* [pack](dotnet-pack.md)\n\nThere is also a way to import more commands on a per-project basis as well as to add your own commands. This is \nexplained in greater detail in the [extensibility section](#extensibility). \n\n## Working with the CLI\n\n### A short sample\nBefore we go into any more details, let's see how working with the CLI looks like from a 10,000-foot view. \nThe sample below utilizes several commands from the CLI standard install to initialize a new simple console application, \nrestore the dependencies, build the application and then run it. \n\n```console\ndotnet new\ndotnet restore\ndotnet build --output /stuff\ndotnet /stuff/new.dll\n```\n\n### How does it work?\nAs we saw in the short sample [above](#a-short-sample), there is a pattern in the way you use the CLI tools. Within that pattern, we can \nidentify three main pieces of each command:\n\n1. The driver (\"dotnet\")\n2. The command, or \"verb\"\n3. Command arguments\n\nLet's dig into more details on each of the above.\n\n### Driver\nThe driver is named `dotnet`. It is the first part of what you invoke. The driver has two responsibilities:\n\n1. Executing IL code\n2. Executing the verb\n\nWhich of the two things it does is dependent on what is specified on the command line. In the first case, you would \nspecify an IL assembly that `dotnet` would run similar to this: `dotnet /path/to/your.dll`. \n\nIn the second case, the driver attempts to invoke the specified command. This will start the CLI command execution \nprocess. First, the driver will determine the version of the tooling that you want. You can specify the version in the \n`global.json` file using the `sdkVersion` property. If that is not available, the driver will find the latest version\nof the tools that is installed on disk and will use that version. Once the version is determined, it will execute the \ncommand. \n\n### The \"verb\"\nThe verb is simply a command that performs an action. `dotnet build` will build your code. `dotnet publish` will publish \nyour code. The verb is implemented as a console application that is named per convention: `dotnet-{verb}`. All of the \nlogic is implemented in the console application that represents the verb. \n\n### The arguments\nThe arguments that you pass on the command line are the arguments to the actual verb/command being invoked. \nFor example, when you type `dotnet publish --output publishedapp` the `--output` argument is passed to the \n`publish` command. \n\n## Types of application portability\nCLI enables applications to be portable in two main ways:\n\n1. Completely portable application that can run anywhere .NET Core is installed\n2. Self-contained applications\n\nYou can learn more about both of these in the [application types overview](../app-types.md) topic. \n\n## Migration from DNX\nIf you used DNX in RC1 of .NET Core, you may be wondering what happened to it and how do these new tools\nrelate to the DNX tools. In short, the DNX tools have been replaced with the .NET Core CLI tools. \nIf you have existing projects or are just wondering how the commands map, you\ncan use the [DNX to CLI migration document](../migrating-from-dnx.md) to get all of the details. \n\n## Extensibility\nOf course, not every tool that you could use in your workflow will be a part of the core CLI tools. However, .NET Core \nCLI has an extensibility model that allows you to specify additional tools for your projects. You can find out more \nin the [extensibility document](extensibility.md). \n\n## More resources\nThis was a short overview of the most important features of the CLI. You can find out more by using the reference and \nconceptual topics on this site. There are also other resources you can use:\n\n* [GitHub repo](https://github.com/dotnet/cli/)\n* [Getting Started instructions](https://aka.ms/dotnetcoregs/)\n\n"}