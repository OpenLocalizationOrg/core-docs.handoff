{"nodes":[{"pos":[11,51],"content":"Comparisons and Sorts Within Collections","needQuote":true,"nodes":[{"content":"Comparisons and Sorts Within Collections","pos":[0,40]}]},{"pos":[65,105],"content":"Comparisons and Sorts Within Collections","needQuote":true,"nodes":[{"content":"Comparisons and Sorts Within Collections","pos":[0,40]}]},{"pos":[116,131],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Comparisons and Sorts Within Collections","pos":[335,375]},{"pos":[377,646],"content":"The <bpt id=\"p1\">[</bpt>System.Collections<ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept> classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair.","source":"The [System.Collections](https://docs.microsoft.com/dotnet/core/api/System.Collections) classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair."},{"content":"Collections typically utilize an equality comparer and/or an ordering comparer.","pos":[648,727]},{"content":"Two constructs are used for comparisons.","pos":[728,768]},{"content":"Checking for equality","pos":[774,795]},{"content":"Methods such as <ph id=\"ph1\">`Contains`</ph>, <ph id=\"ph2\">`IndexOf`</ph>, <ph id=\"ph3\">`LastIndexOf`</ph>, and <ph id=\"ph4\">`Remove`</ph> use an equality comparer for the collection elements.","pos":[797,917],"source":"Methods such as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove` use an equality comparer for the collection elements."},{"content":"If the collection is generic, items are compared for equality according to the following guidelines:","pos":[918,1018]},{"pos":[1024,1222],"content":"If type T implements the <bpt id=\"p1\">[</bpt>IEquatable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1)</ept> generic interface, then the equality comparer is the <ph id=\"ph3\">`Equals`</ph> method of that interface.","source":"If type T implements the [IEquatable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1) generic interface, then the equality comparer is the `Equals` method of that interface."},{"pos":[1228,1298],"content":"If type T does not implement <ph id=\"ph1\">`IEquatable&lt;T&gt;`</ph>, <ph id=\"ph2\">`Object.Equals`</ph> is used.","source":"If type T does not implement `IEquatable<T>`, `Object.Equals` is used."},{"pos":[1300,1556],"content":"In addition, some constructor overloads for dictionary collections accept an <bpt id=\"p1\">[</bpt>IEqualityComparer<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEqualityComparer-1)</ept> implementation, which is used to compare keys for equality.","source":"In addition, some constructor overloads for dictionary collections accept an [IEqualityComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEqualityComparer-1) implementation, which is used to compare keys for equality."},{"content":"Determining sort order","pos":[1561,1583]},{"content":"Methods such as <ph id=\"ph1\">`BinarySearch`</ph> and <ph id=\"ph2\">`Sort`</ph> use an ordering comparer for the collection elements.","pos":[1585,1680],"source":"Methods such as `BinarySearch` and `Sort` use an ordering comparer for the collection elements."},{"content":"The comparisons can be between elements of the collection, or between an element and a specified value.","pos":[1681,1784]},{"content":"For comparing objects, there is the concept of a default comparer and an explicit comparer.","pos":[1785,1876]},{"content":"The default comparer relies on at least one of the objects being compared to implement the <ph id=\"ph1\">`IComparable`</ph> interface.","pos":[1879,1994],"source":"The default comparer relies on at least one of the objects being compared to implement the `IComparable` interface."},{"content":"It is a good practice to implement <ph id=\"ph1\">`IComparable`</ph> on all classes are used as values in a list collection or as keys in a dictionary collection.","pos":[1995,2137],"source":" It is a good practice to implement `IComparable` on all classes are used as values in a list collection or as keys in a dictionary collection."},{"content":"For a generic collection, equality comparison is determined according to the following:","pos":[2138,2225]},{"pos":[2231,2443],"content":"If type T implements the <bpt id=\"p1\">[</bpt>System.IComparable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1)</ept> generic interface, then the default comparer is the <ph id=\"ph3\">`CompareTo(T)`</ph> method of that interface.","source":"If type T implements the [System.IComparable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1) generic interface, then the default comparer is the `CompareTo(T)` method of that interface."},{"pos":[2449,2659],"content":"If type T implements the non-generic <bpt id=\"p1\">[</bpt>System.IComparable<ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.IComparable)</ept> interface, then the default comparer is the <ph id=\"ph1\">`CompareTo`</ph>(Object) method of that interface.","source":"If type T implements the non-generic [System.IComparable](https://docs.microsoft.com/dotnet/core/api/System.IComparable) interface, then the default comparer is the `CompareTo`(Object) method of that interface."},{"content":"If type T doesnâ€™t implement either interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.","pos":[2665,2812]},{"content":"To provide explicit comparisons, some methods accept an <ph id=\"ph1\">`IComparer`</ph> implementation as a parameter.","pos":[2814,2912],"source":"To provide explicit comparisons, some methods accept an `IComparer` implementation as a parameter."},{"content":"For example, the <ph id=\"ph1\">`List&lt;T&gt;.Sort`</ph> method accepts an <bpt id=\"p1\">[</bpt>System.Collections.Generic.IComparer<ph id=\"ph2\">&amp;lt;</ph>T<ph id=\"ph3\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)</ept> implementation.","pos":[2913,3109],"source":" For example, the `List<T>.Sort` method accepts an [System.Collections.Generic.IComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1) implementation."},{"content":"Equality and sort example","pos":[3115,3140]},{"content":"The following code demonstrates an implementation of <bpt id=\"p1\">[</bpt>IEquatable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1)</ept> and <bpt id=\"p2\">[</bpt>IComparable<ph id=\"ph3\">&amp;lt;</ph>T<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1)</ept> on a simple business object.","pos":[3142,3401],"source":"The following code demonstrates an implementation of [IEquatable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1) and [IComparable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1) on a simple business object."},{"content":"In addition, when the object is stored in a list and sorted, you will see that calling the <ph id=\"ph1\">`Sort()`</ph> method results in the use of the default comparer for the 'Part' type, and the <ph id=\"ph2\">`Sort(Comparison&lt;T&gt;)`</ph> method implemented by using an anonymous method.","pos":[3402,3651],"source":" In addition, when the object is stored in a list and sorted, you will see that calling the `Sort()` method results in the use of the default comparer for the 'Part' type, and the `Sort(Comparison<T>)` method implemented by using an anonymous method."},{"content":"C","pos":[3653,3654]},{"content":"See Also","pos":[7566,7574]},{"content":"IComparer","pos":[7577,7586]},{"content":"IEquatable<ph id=\"ph1\">&amp;lt;</ph>T","pos":[7663,7678],"source":"IEquatable&lt;T"},{"content":"IComparer<ph id=\"ph1\">&amp;lt;</ph>T","pos":[7750,7764],"source":"IComparer&lt;T"},{"content":"IComparable","pos":[7855,7866]},{"content":"IComparable<ph id=\"ph1\">&amp;lt;</ph>T","pos":[7933,7949],"source":"IComparable&lt;T"}],"content":"---\ntitle: Comparisons and Sorts Within Collections\ndescription: Comparisons and Sorts Within Collections\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: c7b7c005-628d-427a-91ad-af0c3958c00e\n---\n\n# Comparisons and Sorts Within Collections\n\nThe [System.Collections](https://docs.microsoft.com/dotnet/core/api/System.Collections) classes perform comparisons in almost all the processes involved in managing collections, whether searching for the element to remove or returning the value of a key-and-value pair.\n\nCollections typically utilize an equality comparer and/or an ordering comparer. Two constructs are used for comparisons. \n\n## Checking for equality\n\nMethods such as `Contains`, `IndexOf`, `LastIndexOf`, and `Remove` use an equality comparer for the collection elements. If the collection is generic, items are compared for equality according to the following guidelines:\n\n*   If type T implements the [IEquatable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1) generic interface, then the equality comparer is the `Equals` method of that interface.\n\n*   If type T does not implement `IEquatable<T>`, `Object.Equals` is used.\n\nIn addition, some constructor overloads for dictionary collections accept an [IEqualityComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEqualityComparer-1) implementation, which is used to compare keys for equality.\n\n## Determining sort order\n\nMethods such as `BinarySearch` and `Sort` use an ordering comparer for the collection elements. The comparisons can be between elements of the collection, or between an element and a specified value. For comparing objects, there is the concept of a default comparer and an explicit comparer. \n\nThe default comparer relies on at least one of the objects being compared to implement the `IComparable` interface. It is a good practice to implement `IComparable` on all classes are used as values in a list collection or as keys in a dictionary collection. For a generic collection, equality comparison is determined according to the following:\n\n*   If type T implements the [System.IComparable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1) generic interface, then the default comparer is the `CompareTo(T)` method of that interface.\n\n*   If type T implements the non-generic [System.IComparable](https://docs.microsoft.com/dotnet/core/api/System.IComparable) interface, then the default comparer is the `CompareTo`(Object) method of that interface.\n\n*   If type T doesnâ€™t implement either interface, then there is no default comparer, and a comparer or comparison delegate must be provided explicitly.\n\nTo provide explicit comparisons, some methods accept an `IComparer` implementation as a parameter. For example, the `List<T>.Sort` method accepts an [System.Collections.Generic.IComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1) implementation. \n\n## Equality and sort example\n\nThe following code demonstrates an implementation of [IEquatable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1) and [IComparable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1) on a simple business object. In addition, when the object is stored in a list and sorted, you will see that calling the `Sort()` method results in the use of the default comparer for the 'Part' type, and the `Sort(Comparison<T>)` method implemented by using an anonymous method.\n\nC#\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n// Simple business object. A PartId is used to identify the type of part \n// but the part name can change. \npublic class Part : IEquatable<Part> , IComparable<Part>\n{\n    public string PartName { get; set; }\n\n    public int PartId { get; set; }\n\n    public override string ToString()\n    {\n        return \"ID: \" + PartId + \"   Name: \" + PartName;\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null) return false;\n        Part objAsPart = obj as Part;\n        if (objAsPart == null) return false;\n        else return Equals(objAsPart);\n    }\n    public int SortByNameAscending(string name1, string name2)\n    {\n\n        return name1.CompareTo(name2);\n    }\n\n    // Default comparer for Part type.\n    public int CompareTo(Part comparePart)\n    {\n          // A null value means that this object is greater.\n        if (comparePart == null)\n            return 1;\n\n        else\n            return this.PartId.CompareTo(comparePart.PartId);\n    }\n    public override int GetHashCode()\n    {\n        return PartId;\n    }\n    public bool Equals(Part other)\n    {\n        if (other == null) return false;\n        return (this.PartId.Equals(other.PartId));\n    }\n    // Should also override == and != operators.\n\n}\npublic class Example\n{\n    public static void Main()\n    {\n        // Create a list of parts.\n        List<Part> parts = new List<Part>();\n\n        // Add parts to the list.\n        parts.Add(new Part() { PartName = \"regular seat\", PartId = 1434 });\n        parts.Add(new Part() { PartName= \"crank arm\", PartId = 1234 });\n        parts.Add(new Part() { PartName = \"shift lever\", PartId = 1634 }); ;\n        // Name intentionally left null.\n        parts.Add(new Part() {  PartId = 1334 });\n        parts.Add(new Part() { PartName = \"banana seat\", PartId = 1444 });\n        parts.Add(new Part() { PartName = \"cassette\", PartId = 1534 });\n\n\n        // Write out the parts in the list. This will call the overridden \n        // ToString method in the Part class.\n        Console.WriteLine(\"\\nBefore sort:\");\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n\n        // Call Sort on the list. This will use the \n        // default comparer, which is the Compare method \n        // implemented on Part.\n        parts.Sort();\n\n\n        Console.WriteLine(\"\\nAfter sort by part number:\");\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        // This shows calling the Sort(Comparison(T) overload using \n        // an anonymous method for the Comparison delegate. \n        // This method treats null as the lesser of two values.\n        parts.Sort(delegate(Part x, Part y)\n        {\n            if (x.PartName == null && y.PartName == null) return 0;\n            else if (x.PartName == null) return -1;\n            else if (y.PartName == null) return 1;\n            else return x.PartName.CompareTo(y.PartName);\n        });\n\n        Console.WriteLine(\"\\nAfter sort by name:\");\n        foreach (Part aPart in parts)\n        {\n            Console.WriteLine(aPart);\n        }\n\n        /*\n\n            Before sort:\n        ID: 1434   Name: regular seat\n        ID: 1234   Name: crank arm\n        ID: 1634   Name: shift lever\n        ID: 1334   Name:\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n\n        After sort by part number:\n        ID: 1234   Name: crank arm\n        ID: 1334   Name:\n        ID: 1434   Name: regular seat\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n        ID: 1634   Name: shift lever\n\n        After sort by name:\n        ID: 1334   Name:\n        ID: 1444   Name: banana seat\n        ID: 1534   Name: cassette\n        ID: 1234   Name: crank arm\n        ID: 1434   Name: regular seat\n        ID: 1634   Name: shift lever\n\n         */\n\n    }\n}\n```\n\n## See Also\n\n[IComparer](https://docs.microsoft.com/dotnet/core/api/System.Collections.IComparer)\n\n[IEquatable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IEquatable-1)\n\n[IComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1)\n\n[IComparable](https://docs.microsoft.com/dotnet/core/api/System.IComparable)\n\n[IComparable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.IComparable-1)\n"}