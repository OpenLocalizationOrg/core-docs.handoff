{"nodes":[{"pos":[11,30],"content":".NET Core App Types","needQuote":true,"nodes":[{"content":".NET Core App Types","pos":[0,19]}]},{"pos":[44,63],"content":".NET Core App Types","needQuote":true,"nodes":[{"content":".NET Core App Types","pos":[0,19]}]},{"pos":[74,89],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":".NET Core App Types","pos":[295,314]},{"content":"Introduction","pos":[339,351]},{"content":"There are several ways to think about the \"types\" of applications you can build.","pos":[352,432]},{"content":"Usually, the types describe a certain execution model or are based on what the application can \"do\"; examples of these are \"console application\", \"web application\", etc. All of these types of applications (and more) can be created with .NET Core, since it is a general purpose development platform.","pos":[433,734],"source":" Usually, the types describe \na certain execution model or are based on what the application can \"do\"; examples of these are \"console application\", \n\"web application\", etc. All of these types of applications (and more) can be created with .NET Core, since it is \na general purpose development platform."},{"content":"However, given its unique and cross-platform nature, .NET Core also has another angle through which to observe the type of the application and that is the application's <bpt id=\"p1\">*</bpt>portability<ept id=\"p1\">*</ept>.","pos":[736,920],"source":"However, given its unique and cross-platform nature, .NET Core also has another angle through which to observe the type of the application \nand that is the application's *portability*."},{"content":"Portability essentially means where you can run your application and what prerequisites you need to satisfy in order for your application to run on a given machine.","pos":[921,1086],"source":" Portability essentially means where you can run your application and what \nprerequisites you need to satisfy in order for your application to run on a given machine."},{"content":"This document deals with this angle, portability, and outlines the two main types of portability that .NET Core enables.","pos":[1087,1207],"source":"\nThis document deals with this angle, portability, and outlines the two main types of portability that .NET Core enables."},{"content":"There are two main types that we can observe:","pos":[1210,1255]},{"content":"Portable application","pos":[1261,1281]},{"content":"As a subcategory of this, we have the portable application with native dependencies","pos":[1288,1371]},{"content":"Self-contained application","pos":[1375,1401]},{"content":"Portable applications","pos":[1406,1427]},{"content":"Portable applications are the default type in .NET Core.","pos":[1428,1484]},{"content":"They require .NET Core to be installed on the targeted machine in order for them to run.","pos":[1485,1574],"source":" They require .NET Core to be installed on the targeted machine \nin order for them to run."},{"content":"To you as a developer, this means that your application is portable between installations of .NET Core.","pos":[1575,1679],"source":" To you as a developer, this means that your application is portable between installations of \n.NET Core."},{"content":"This type of application will only carry its own code and dependencies that are outside of .NET Core libraries.","pos":[1682,1793]},{"content":"As an example, let's say you are making a console application that has the ability to invoke a certain REST API and deserialize the returned JSON into a type and then display it.","pos":[1794,1974],"source":" \nAs an example, let's say you are making a console application that has the ability to invoke a certain REST API \nand deserialize the returned JSON into a type and then display it."},{"content":"You have everything you need for this small application except for a good JSON parser; for this, you add a dependency to your <ph id=\"ph1\">`project.json`</ph> to include <bpt id=\"p1\">[</bpt>Json.NET<ept id=\"p1\">](https://www.nuget.org/packages/Newtonsoft.Json/)</ept>.","pos":[1975,2189],"source":" You have everything you need for this small \napplication except for a good JSON parser; for this, you add a dependency to your `project.json` to include \n[Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/)."},{"content":"Once you publish your application using <ph id=\"ph1\">`dotnet publish`</ph>, you will see that only your application's code and JSON.net have been published in the output.","pos":[2190,2343],"source":" Once you publish your application using `dotnet publish`, \nyou will see that only your application's code and JSON.net have been published in the output."},{"content":"The .NET Core libraries remain outside of your application's dependency closure.","pos":[2344,2425],"source":" \nThe .NET Core libraries remain outside of your application's dependency closure."},{"pos":[2428,2609],"content":"In order to create a portable application, all you need to do is to target the .NET Core libraries in your <ph id=\"ph1\">`project.json`</ph> and have your frameworks aligned as the below sample shows.","source":"In order to create a portable application, all you need to do is to target the .NET Core libraries in your `project.json`\nand have your frameworks aligned as the below sample shows."},{"content":"The <ph id=\"ph1\">`Microsoft.NETCore.App`</ph> is a \"metapackage\" that states that you are targeting the .NET Core libraries.","pos":[2782,2888],"source":"The `Microsoft.NETCore.App` is a \"metapackage\" that states that you are targeting the .NET Core libraries."},{"content":"The <ph id=\"ph1\">`type: platform`</ph> property on that dependency means that at publish time, the tooling will skip publishing the assemblies for that dependency to the published output.","pos":[2889,3060],"source":" The `type: platform` \nproperty on that dependency means that at publish time, the tooling will skip publishing the assemblies for that dependency \nto the published output."},{"content":"You don't need these since they will be installed with .NET Core on the targeted machine.","pos":[3061,3150]},{"content":"Portable application with native dependencies","pos":[3157,3202]},{"content":"A subgroup of the above, this type is a portable application that has native dependencies specified somewhere in its dependency chain.","pos":[3203,3338],"source":"A subgroup of the above, this type is a portable application that has native dependencies specified \nsomewhere in its dependency chain."},{"content":"This application is as portable as all of its native dependencies are portable.","pos":[3339,3419],"source":" This application is as portable as all of its native dependencies \nare portable."},{"content":"You will be able to run the application on any platform that your native dependencies can run on.","pos":[3420,3518],"source":" You will be able to run the application on any platform that your native dependencies can \nrun on."},{"content":"Prime example of this is Kestrel, the ASP.NET Core cross-platform web server.","pos":[3519,3596]},{"content":"It is built on top of <bpt id=\"p1\">[</bpt>libuv<ept id=\"p1\">](https://github.com/libuv/libuv)</ept> which is its native dependency.","pos":[3597,3691],"source":" It is built on top of \n[libuv](https://github.com/libuv/libuv) which is its native dependency."},{"content":"When you publish a portable application that has a native dependency, the published output will contain all the same things as the portable application described in the previous section.","pos":[3694,3881],"source":"When you publish a portable application that has a native dependency, the published output will contain \nall the same things as the portable application described in the previous section."},{"content":"For native dependencies, the published output will contain a folder for each <bpt id=\"p1\">[</bpt>Runtime Identifier (RID)<ept id=\"p1\">](rid-catalog.md#what-are-rids)</ept> that the native dependency supports (and that exists in its NuGet package).","pos":[3882,4093],"source":" For native dependencies, \nthe published output will contain a folder for each [Runtime Identifier (RID)](rid-catalog.md#what-are-rids) that the native dependency supports \n(and that exists in its NuGet package)."},{"pos":[4096,4201],"content":"The below <ph id=\"ph1\">`project.json`</ph> sample is showing an example of a portable application with a native dependency.","source":"The below `project.json` sample is showing an example of a portable application with a native dependency."},{"content":"Self-contained application","pos":[4431,4457]},{"content":"Unlike the portable application, a <bpt id=\"p1\">*</bpt>self-contained application<ept id=\"p1\">*</ept> does not rely on any shared component to be present on the machine where you want to deploy the application.","pos":[4458,4631],"source":"Unlike the portable application, a *self-contained application* does not rely on any shared component to \nbe present on the machine where you want to deploy the application."},{"content":"As its name implies, it means that the entire dependency closure, <bpt id=\"p1\">**</bpt>including the runtime<ept id=\"p1\">**</ept> is packaged with the application.","pos":[4632,4758],"source":" As its name implies, it means that \nthe entire dependency closure, **including the runtime** is packaged with the application."},{"content":"This makes it larger, but also makes it capable of running on any .NET Core supported platforms with the correct native dependencies, whether it has .NET Core installed or not.","pos":[4759,4937],"source":" This makes \nit larger, but also makes it capable of running on any .NET Core supported platforms with the correct \nnative dependencies, whether it has .NET Core installed or not."},{"content":"This makes it that much easier to deploy to the target machine, since you only deploy your application.","pos":[4938,5042],"source":" This makes it that much \neasier to deploy to the target machine, since you only deploy your application."},{"content":"Since the application carries the runtime within itself, you need to make an explicit choice which platforms your application needs to run on.","pos":[5045,5188],"source":"Since the application carries the runtime within itself, you need to make an explicit choice which platforms your application \nneeds to run on."},{"content":"For instance, if you publish a self-contained application for Windows 10, that same application will not work on macOS or Linux and vice versa.","pos":[5189,5333],"source":" For instance, if you publish a self-contained application for Windows 10, that same application will \nnot work on macOS or Linux and vice versa."},{"content":"Of course, you can add or remove platforms during development at any given time.","pos":[5334,5414]},{"content":"There are several steps to get to a self-contained application.","pos":[5417,5480]},{"content":"The first is to remove any <ph id=\"ph1\">`\"type\": \"platform\"`</ph> properties off of any dependencies you have.","pos":[5481,5574],"source":" The first is to remove any `\"type\": \"platform\"` properties \noff of any dependencies you have."},{"content":"Second is to leave the dependency on <ph id=\"ph1\">`Microsoft.NETCore.App`</ph> as it will pull in all of the rest of things that are needed.","pos":[5575,5697],"source":" Second is to leave the dependency on `Microsoft.NETCore.App` as it will pull in\nall of the rest of things that are needed."},{"content":"Finally, you need to add a <ph id=\"ph1\">`runtimes`</ph> node in your <ph id=\"ph2\">`project.json`</ph> that will list out the <bpt id=\"p1\">[</bpt>RIDs<ept id=\"p1\">](rid-catalog.md#what-are-rids)</ept> you wish to use.","pos":[5700,5843],"source":"Finally, you need to add a `runtimes` node in your `project.json` that will list out the \n[RIDs](rid-catalog.md#what-are-rids) you wish to use."},{"content":"When restoring a project that has the <ph id=\"ph1\">`runtimes`</ph> node in it, NuGet will restore the needed runtime for all the RIDs specifies.","pos":[5844,5971],"source":" When restoring a project that has the `runtimes` node in it, NuGet \nwill restore the needed runtime for all the RIDs specifies."},{"content":"Then, when you want to publish your application for a given platform, you publish it using the <ph id=\"ph1\">`--runtime &lt;RID&gt;`</ph> argument to <ph id=\"ph2\">`dotnet publish`</ph>.","pos":[5972,6114],"source":" Then, when you want to publish your application for a given platform,\nyou publish it using the `--runtime <RID>` argument to `dotnet publish`."},{"content":"The RID specified in the command invocation <bpt id=\"p1\">**</bpt>has to be<ept id=\"p1\">**</ept> an RID that is specified in your <ph id=\"ph1\">`project.json`</ph>; otherwise, an error is thrown.","pos":[6115,6253],"source":" The RID specified in the \ncommand invocation **has to be** an RID that is specified in your `project.json`; otherwise, an error is thrown."},{"content":"If you want to publish for the RID that represents the operating system you are using the <bpt id=\"p1\">[</bpt>.NET Core SDK<ept id=\"p1\">](sdk.md)</ept> on, you don't have to specify anything to <ph id=\"ph1\">`dotnet publish`</ph>.","pos":[6256,6430],"source":"If you want to publish for the RID that represents the operating system you are using the [.NET Core SDK](sdk.md) \non, you don't have to specify anything to `dotnet publish`."},{"content":"However, you still have to specify that RID in your <ph id=\"ph1\">`project.json`</ph> in order to get a standalone application.","pos":[6431,6540],"source":" However, you still have to specify that RID in your \n`project.json` in order to get a standalone application."},{"pos":[6545,7059],"content":"An important thing to note is that in the .NET Core Tools Preview 2 timeframe, the self-contained application is being published \nfrom the NuGet cache on your machine. This means that all dependencies, including the actual .NET Core runtime and \nlibraries, is not ready-to-run optimized, which means that it will have lower overall performance than portable \napplications. This is due to the fact that portable applications run against the installed .NET Core runtime and \nlibraries which are ready-to-run.","leadings":["","> ","> ","> ","> "],"nodes":[{"content":"An important thing to note is that in the .NET Core Tools Preview 2 timeframe, the self-contained application is being published from the NuGet cache on your machine.","pos":[0,167],"source":"An important thing to note is that in the .NET Core Tools Preview 2 timeframe, the self-contained application is being published \nfrom the NuGet cache on your machine."},{"content":"This means that all dependencies, including the actual .NET Core runtime and libraries, is not ready-to-run optimized, which means that it will have lower overall performance than portable applications.","pos":[168,372],"source":" This means that all dependencies, including the actual .NET Core runtime and \nlibraries, is not ready-to-run optimized, which means that it will have lower overall performance than portable \napplications."},{"content":"This is due to the fact that portable applications run against the installed .NET Core runtime and libraries which are ready-to-run.","pos":[373,506],"source":" This is due to the fact that portable applications run against the installed .NET Core runtime and \nlibraries which are ready-to-run."}]},{"pos":[7062,7146],"content":"The following <ph id=\"ph1\">`project.json`</ph> sample illustrates a simple self-contained application.","source":"The following `project.json` sample illustrates a simple self-contained application."}],"content":"---\ntitle: .NET Core App Types\ndescription: .NET Core App Types\nkeywords: .NET, .NET Core\nauthor: blackdwarf\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 93488a0b-c94c-4ed6-97ea-571bb23a862e\n---\n\n.NET Core App Types\n===================\n\n## Introduction\nThere are several ways to think about the \"types\" of applications you can build. Usually, the types describe \na certain execution model or are based on what the application can \"do\"; examples of these are \"console application\", \n\"web application\", etc. All of these types of applications (and more) can be created with .NET Core, since it is \na general purpose development platform.\n\nHowever, given its unique and cross-platform nature, .NET Core also has another angle through which to observe the type of the application \nand that is the application's *portability*. Portability essentially means where you can run your application and what \nprerequisites you need to satisfy in order for your application to run on a given machine.\nThis document deals with this angle, portability, and outlines the two main types of portability that .NET Core enables. \n\nThere are two main types that we can observe: \n\n1. Portable application\n    * As a subcategory of this, we have the portable application with native dependencies\n2. Self-contained application\n\n## Portable applications\nPortable applications are the default type in .NET Core. They require .NET Core to be installed on the targeted machine \nin order for them to run. To you as a developer, this means that your application is portable between installations of \n.NET Core. \n\nThis type of application will only carry its own code and dependencies that are outside of .NET Core libraries. \nAs an example, let's say you are making a console application that has the ability to invoke a certain REST API \nand deserialize the returned JSON into a type and then display it. You have everything you need for this small \napplication except for a good JSON parser; for this, you add a dependency to your `project.json` to include \n[Json.NET](https://www.nuget.org/packages/Newtonsoft.Json/). Once you publish your application using `dotnet publish`, \nyou will see that only your application's code and JSON.net have been published in the output. \nThe .NET Core libraries remain outside of your application's dependency closure. \n\nIn order to create a portable application, all you need to do is to target the .NET Core libraries in your `project.json`\nand have your frameworks aligned as the below sample shows. \n\n```json\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {  \n        \"version\": \"1.0.0\",\n        \"type\": \"platform\"\n    }\n},\n\"frameworks\": {\n    \"netcoreapp1.0\": {}\n}\n```\n\nThe `Microsoft.NETCore.App` is a \"metapackage\" that states that you are targeting the .NET Core libraries. The `type: platform` \nproperty on that dependency means that at publish time, the tooling will skip publishing the assemblies for that dependency \nto the published output. You don't need these since they will be installed with .NET Core on the targeted machine. \n\n### Portable application with native dependencies\nA subgroup of the above, this type is a portable application that has native dependencies specified \nsomewhere in its dependency chain. This application is as portable as all of its native dependencies \nare portable. You will be able to run the application on any platform that your native dependencies can \nrun on. Prime example of this is Kestrel, the ASP.NET Core cross-platform web server. It is built on top of \n[libuv](https://github.com/libuv/libuv) which is its native dependency. \n\nWhen you publish a portable application that has a native dependency, the published output will contain \nall the same things as the portable application described in the previous section. For native dependencies, \nthe published output will contain a folder for each [Runtime Identifier (RID)](rid-catalog.md#what-are-rids) that the native dependency supports \n(and that exists in its NuGet package). \n\nThe below `project.json` sample is showing an example of a portable application with a native dependency. \n\n```json\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": {  \n        \"version\": \"1.0.0\",\n        \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0-*\"\n},\n\"frameworks\": {\n    \"netcoreapp1.0\": {}\n}\n```\n\n## Self-contained application\nUnlike the portable application, a *self-contained application* does not rely on any shared component to \nbe present on the machine where you want to deploy the application. As its name implies, it means that \nthe entire dependency closure, **including the runtime** is packaged with the application. This makes \nit larger, but also makes it capable of running on any .NET Core supported platforms with the correct \nnative dependencies, whether it has .NET Core installed or not. This makes it that much \neasier to deploy to the target machine, since you only deploy your application. \n\nSince the application carries the runtime within itself, you need to make an explicit choice which platforms your application \nneeds to run on. For instance, if you publish a self-contained application for Windows 10, that same application will \nnot work on macOS or Linux and vice versa. Of course, you can add or remove platforms during development at any given time. \n\nThere are several steps to get to a self-contained application. The first is to remove any `\"type\": \"platform\"` properties \noff of any dependencies you have. Second is to leave the dependency on `Microsoft.NETCore.App` as it will pull in\nall of the rest of things that are needed. \n\nFinally, you need to add a `runtimes` node in your `project.json` that will list out the \n[RIDs](rid-catalog.md#what-are-rids) you wish to use. When restoring a project that has the `runtimes` node in it, NuGet \nwill restore the needed runtime for all the RIDs specifies. Then, when you want to publish your application for a given platform,\nyou publish it using the `--runtime <RID>` argument to `dotnet publish`. The RID specified in the \ncommand invocation **has to be** an RID that is specified in your `project.json`; otherwise, an error is thrown. \n\nIf you want to publish for the RID that represents the operating system you are using the [.NET Core SDK](sdk.md) \non, you don't have to specify anything to `dotnet publish`. However, you still have to specify that RID in your \n`project.json` in order to get a standalone application. \n\n> An important thing to note is that in the .NET Core Tools Preview 2 timeframe, the self-contained application is being published \n> from the NuGet cache on your machine. This means that all dependencies, including the actual .NET Core runtime and \n> libraries, is not ready-to-run optimized, which means that it will have lower overall performance than portable \n> applications. This is due to the fact that portable applications run against the installed .NET Core runtime and \n> libraries which are ready-to-run. \n\nThe following `project.json` sample illustrates a simple self-contained application. \n\n```json\n\"dependencies\": {\n    \"Microsoft.NETCore.App\": \"1.0.0\"\n},\n\"frameworks\": {\n    \"netcoreapp1.0\": {}\n},\n\"runtimes\": {\n    \"win10-x64\": {},\n    \"osx.10.11-x64\": {}\n}\n```\n\n"}