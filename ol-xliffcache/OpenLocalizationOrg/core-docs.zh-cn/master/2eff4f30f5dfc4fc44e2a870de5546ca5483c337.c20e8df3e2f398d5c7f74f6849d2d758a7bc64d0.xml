{"nodes":[{"pos":[11,50],"content":"Getting started with .NET Core on macOS","needQuote":true,"nodes":[{"content":"Getting started with .NET Core on macOS","pos":[0,39]}]},{"pos":[64,129],"content":"Getting started with .NET Core on macOS, using Visual Studio Code","needQuote":true,"nodes":[{"content":"Getting started with .NET Core on macOS, using Visual Studio Code","pos":[0,65]}]},{"pos":[140,155],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Getting started with .NET Core on macOS, using Visual Studio Code","pos":[359,424]},{"pos":[426,567],"content":"by <bpt id=\"p1\">[</bpt>Bertrand Le Roy<ept id=\"p1\">](https://github.com/bleroy)</ept>,  <bpt id=\"p2\">[</bpt>Phillip Carter<ept id=\"p2\">](https://github.com/cartermp)</ept>, <bpt id=\"p3\">[</bpt>Bill Wagner<ept id=\"p3\">](https://github.com/billwagner)</ept>","source":"by [Bertrand Le Roy](https://github.com/bleroy),  [Phillip Carter](https://github.com/cartermp),\n[Bill Wagner](https://github.com/billwagner)"},{"pos":[569,636],"content":"Contributions by <bpt id=\"p1\">[</bpt>Toni Solarin-Sodara<ept id=\"p1\">](https://github.com/tsolarin)</ept>","source":"Contributions by [Toni Solarin-Sodara](https://github.com/tsolarin)"},{"content":"This document provides a tour of the steps and workflow to create a .NET Core Solution using <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](http://code.visualstudio.com)</ept>.","pos":[638,782],"source":"This document provides a tour of the steps and workflow to create a .NET\nCore Solution using [Visual Studio Code](http://code.visualstudio.com)."},{"content":"You'll learn how to create projects, create unit tests, use the debugging tools, and incorporate third-party libraries via <bpt id=\"p1\">[</bpt>NuGet<ept id=\"p1\">](http://nuget.org)</ept>.","pos":[783,932],"source":"\nYou'll learn how to create projects, create unit tests, use the debugging\ntools, and incorporate third-party libraries via [NuGet](http://nuget.org)."},{"content":"This article uses Visual Studio Code on Mac OS.","pos":[934,981]},{"content":"Where there are differences, it points out the differences for the Windows platform.","pos":[982,1066],"source":" Where there are differences,\nit points out the differences for the Windows platform."},{"content":"Prerequisites","pos":[1068,1081]},{"content":"Before starting, you'll need to install the <bpt id=\"p1\">[</bpt>.NET Core SDK<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept>, currently in a preview release.","pos":[1097,1225],"source":"Before starting, you'll need to install the [.NET Core SDK](https://www.microsoft.com/net/core),\ncurrently in a preview release."},{"content":"The .NET Core SDK includes the latest release of the .NET Core framework and runtime.","pos":[1226,1311],"source":" The .NET Core SDK includes the latest release\nof the .NET Core framework and runtime."},{"content":"You'll also need to install <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](http://code.visualstudio.com)</ept>.","pos":[1313,1392],"source":"You'll also need to install [Visual Studio Code](http://code.visualstudio.com)."},{"content":"During the course of this article, you'll also install extensions that will improve the .NET Core development experience.","pos":[1393,1514],"source":"\nDuring the course of this article, you'll also install extensions\nthat will improve the .NET Core development experience."},{"pos":[1516,1595],"content":"You can find the links to all of these at the <bpt id=\"p1\">[</bpt>.NET home page<ept id=\"p1\">](http://dot.net)</ept>.","source":"You can find the links to all of these at the [.NET home page](http://dot.net)."},{"content":"Getting Started","pos":[1597,1612]},{"pos":[1630,1764],"content":"The source for this tutorial is available on <bpt id=\"p1\">[</bpt>GitHub<ept id=\"p1\">](https://github.com/dotnet/core-docs/tree/master/samples/getting-started/golden)</ept>.","source":"The source for this tutorial is available on\n[GitHub](https://github.com/dotnet/core-docs/tree/master/samples/getting-started/golden)."},{"content":"Start Visual Studio Code.","pos":[1766,1791]},{"content":"Press Ctrl + '<ph id=\"ph1\">\\`</ph>' (the back-quote character) to open an embedded terminal in VS Code.","pos":[1792,1877],"source":" Press Ctrl + '\\`' (the back-quote character) to open\nan embedded terminal in VS Code."},{"content":"(Alternatively, you can use a separate terminal window, if you prefer).","pos":[1878,1949],"source":" (Alternatively, you can use a separate\nterminal window, if you prefer)."},{"content":"By the time we're done, you'll create three projects: a library project, tests for that library project, and a console application that makes use of the library.","pos":[1951,2112],"source":"By the time we're done, you'll create three projects: a library project,\ntests for that library project, and a console application that makes\nuse of the library."},{"content":"You'll follow a standard folder structure for the three projects.","pos":[2113,2178],"source":" You'll follow a standard folder structure for\nthe three projects."},{"content":"Following this standard folder structure means that the .NET Core SDK tools understand the relationship between your production code projects and your test code projects.","pos":[2179,2349],"source":" Following this standard folder structure\nmeans that the .NET Core SDK tools understand the relationship between\nyour production code projects and your test code projects."},{"content":"That makes your development experience more productive.","pos":[2350,2405],"source":" That makes\nyour development experience more productive."},{"content":"Let's start by creating those folders.","pos":[2407,2445]},{"content":"In the terminal, create a 'golden' directory.","pos":[2446,2491],"source":" In the terminal, create a 'golden'\ndirectory."},{"content":"Under that directory create <ph id=\"ph1\">`src`</ph> and <ph id=\"ph2\">`test`</ph> directories.","pos":[2492,2549],"source":" Under that directory create `src` and `test`\ndirectories."},{"content":"Under <ph id=\"ph1\">`src`</ph> create <ph id=\"ph2\">`app`</ph> and <ph id=\"ph3\">`library`</ph> directories.","pos":[2550,2601],"source":" Under `src` create `app` and `library` directories."},{"content":"In <ph id=\"ph1\">`test`</ph> create a <ph id=\"ph2\">`test-library`</ph> directory.","pos":[2602,2646],"source":" In `test`\ncreate a `test-library` directory."},{"content":"You can do this either using the terminal in VS code, or by clicking on the parent folder in VS Code and selecting the \"New Folder\" icon.","pos":[2647,2784],"source":" You can do this either using the terminal\nin VS code, or by clicking on the parent folder in VS Code and selecting the\n\"New Folder\" icon."},{"content":"In VS Code, open the 'golden' directory.","pos":[2786,2826]},{"content":"This directory is the root of your solution.","pos":[2827,2871]},{"content":"Next, create a <ph id=\"ph1\">`global.json`</ph> file in the root directory for your solution.","pos":[2873,2947],"source":"Next, create a `global.json` file in the root directory for your solution."},{"content":"The contents of <ph id=\"ph1\">`global.json`</ph> are:","pos":[2948,2982],"source":"\nThe contents of `global.json` are:"},{"content":"At this point, your directory tree should look like this:","pos":[3053,3110]},{"content":"Writing the library","pos":[3212,3231]},{"content":"Your next task is to create the library.","pos":[3233,3273]},{"content":"In the terminal window (either the embedded terminal in VS code, or another terminal), cd to <ph id=\"ph1\">`golden/src/library`</ph> and type the command <ph id=\"ph2\">`dotnet new -t lib`</ph>.","pos":[3274,3429],"source":" In the terminal window\n(either the embedded terminal in VS code, or another terminal),\ncd to `golden/src/library` and type the command `dotnet new -t lib`."},{"content":"This creates a library project, with two files: <ph id=\"ph1\">`project.json`</ph> and <ph id=\"ph2\">`Library.cs`</ph>.","pos":[3430,3510],"source":"\nThis creates a library project, with two files: `project.json` and\n`Library.cs`."},{"pos":[3527,3562],"content":"contains the following information:"},{"content":"This library project will make use of JSON representation of objects, so you'll want to add a reference to the <ph id=\"ph1\">`Newtonsoft.Json`</ph> NuGet package.","pos":[3802,3945],"source":"This library project will make use of JSON representation of objects, so you'll want to\nadd a reference to the `Newtonsoft.Json` NuGet package."},{"content":"In<ph id=\"ph1\">`project.json`</ph> add the latest pre-release version of the package as a dependency:","pos":[3946,4029],"source":" In`project.json`\nadd the latest pre-release version of the package as a dependency:"},{"content":"After you've finished adding those dependencies, you need to install those packages into workspace.","pos":[4100,4199],"source":"After you've finished adding those dependencies, you need to install those\npackages into workspace."},{"content":"Run the <ph id=\"ph1\">`dotnet restore`</ph> command to updates all dependencies, and write a <ph id=\"ph2\">`project.lock.json`</ph> file in the project directory.","pos":[4200,4324],"source":" Run the `dotnet restore` command to updates all dependencies,\nand write a `project.lock.json` file in the project directory."},{"content":"This file contains the full dependency tree of all the dependencies in your project.","pos":[4325,4409],"source":" This\nfile contains the full dependency tree of all the dependencies in your\nproject."},{"content":"You don't need to read this file, it's used by tools in the .NET Core SDK.","pos":[4410,4484],"source":" You don't need to read this file, it's used by tools in the .NET\nCore SDK."},{"content":"Now, let's update the C# code.","pos":[4486,4516]},{"content":"Let's create a <ph id=\"ph1\">`Thing`</ph> class that contains one public method.","pos":[4517,4578],"source":" Let's create a `Thing` class that contains\none public method."},{"content":"This method will return the sum of two numbers, but will do so by converting that number to a JSON string, and then deserializing it.","pos":[4579,4712],"source":" This method will return the sum of two numbers,\nbut will do so by converting that number to a JSON string, and then\ndeserializing it."},{"content":"Rename the file <ph id=\"ph1\">`Library.cs`</ph> to <ph id=\"ph2\">`Thing.cs`</ph>.","pos":[4713,4756],"source":" Rename the file `Library.cs` to `Thing.cs`."},{"content":"Then, replace the existing code (for the template-generated Class1) with the following:","pos":[4757,4844],"source":" Then, replace\nthe existing code (for the template-generated Class1) with the following:"},{"pos":[5059,5260],"content":"This makes use of a number of modern C# features, such as static usings, expression bodied members, and interpolated strings, that you can learn about in the <bpt id=\"p1\">[</bpt>Learn C#<ept id=\"p1\">](../../csharp/index.md)</ept> section.","source":"This makes use of a number of modern C# features, such as \nstatic usings, expression bodied members, and interpolated strings,\nthat you can learn\nabout in the [Learn C#](../../csharp/index.md) section."},{"pos":[5262,5343],"content":"Now that you've updated the code, you can build the library using <ph id=\"ph1\">`dotnet build`</ph>.","source":"Now that you've updated the code, you can build the library using\n`dotnet build`."},{"pos":[5345,5437],"content":"You now have a built <ph id=\"ph1\">`library.dll`</ph> file under <ph id=\"ph2\">`golden/src/library/bin/Debug/netstandard1.6`</ph>.","source":"You now have a built `library.dll` file under `golden/src/library/bin/Debug/netstandard1.6`."},{"content":"Writing the test project","pos":[5443,5467]},{"content":"Let's build a test project for this library that you've build.","pos":[5469,5531]},{"content":"Cd into the <ph id=\"ph1\">`test/test-library`</ph> directory.","pos":[5532,5574],"source":" Cd into the `test/test-library`\ndirectory."},{"content":"Run <ph id=\"ph1\">`dotnet new -t xunittest`</ph> to create a new test project.","pos":[5575,5634],"source":" Run `dotnet new -t xunittest` to create a new test project."},{"content":"You'll need to add a dependency node for the library you wrote in the steps above.","pos":[5637,5719],"source":"You'll need to add a dependency node for the library you wrote in the steps\nabove."},{"content":"Open <ph id=\"ph1\">`project.json`</ph> and update the dependencies section to the following (including the <ph id=\"ph2\">`library`</ph> node, which is the last node below):","pos":[5720,5854],"source":" Open `project.json` and update the dependencies section to the following\n(including the `library` node, which is the last node below):"},{"content":"The <ph id=\"ph1\">`library`</ph> node specifies that this dependency should resolve to a project in the current workspace.","pos":[6050,6153],"source":"The `library` node specifies that this dependency should resolve to a project\nin the current workspace."},{"content":"Without explicitly specifying this, it's possible that the test project would build against a NuGet package of the same name.","pos":[6154,6279],"source":" Without explicitly specifying this, it's possible\nthat the test project would build against a NuGet package of the same name."},{"content":"Now that the dependencies have been properly configured, let's create the tests for your library.","pos":[6281,6378],"source":"Now that the dependencies have been properly configured, let's create\nthe tests for your library."},{"content":"Open <ph id=\"ph1\">`Tests.cs`</ph> and replace its contents with the following code:","pos":[6379,6444],"source":" Open `Tests.cs` and\nreplace its contents with the following code:"},{"content":"Now, run <ph id=\"ph1\">`dotnet restore`</ph>, <ph id=\"ph2\">`dotnet build`</ph> and <ph id=\"ph3\">`dotnet test`</ph>.","pos":[6668,6728],"source":"Now, run `dotnet restore`, `dotnet build` and `dotnet test`."},{"content":"The xUnit console test runner will run the one test, and report that it is passing.","pos":[6729,6812],"source":"\nThe xUnit console test runner will run the one test, and report\nthat it is passing."},{"content":"Writing the console app","pos":[6819,6842]},{"content":"In your terminal, cd to the <ph id=\"ph1\">`golden/src/app`</ph> directory.","pos":[6844,6899],"source":"In your terminal, cd to the `golden/src/app` directory."},{"content":"Run <ph id=\"ph1\">`dotnet new`</ph> to create a new console application.","pos":[6900,6953],"source":" Run `dotnet new`\nto create a new console application."},{"content":"Your console application depends on the library you built and tested in the previous steps.","pos":[6955,7046],"source":"Your console application depends on the library you built and tested\nin the previous steps."},{"content":"You need to indicate that by editing <ph id=\"ph1\">`project.json`</ph> to add this dependency.","pos":[7047,7122],"source":" You need to indicate that by editing `project.json`\nto add this dependency."},{"content":"In the <ph id=\"ph1\">`dependencies`</ph> node, add the <ph id=\"ph2\">`Library`</ph> node below the <ph id=\"ph3\">`Microsoft.NetCore.App`</ph> node as follows:","pos":[7124,7225],"source":"  In the `dependencies` node, add the `Library`\nnode below the `Microsoft.NetCore.App` node as follows:"},{"content":"The <ph id=\"ph1\">`project`</ph> node is important here, as it was in the test library.","pos":[7301,7369],"source":"The `project` node is important here, as it was in the test library."},{"content":"It indicates that this is a project in the current solution, and not a NuGet package.","pos":[7370,7455],"source":" It\nindicates that this is a project in the current solution, and not a\nNuGet package."},{"content":"Run <ph id=\"ph1\">`dotnet restore`</ph> to restore all dependencies.","pos":[7457,7506],"source":"Run `dotnet restore` to restore all dependencies."},{"content":"Open <ph id=\"ph1\">`program.cs`</ph> and replace the contents of the <ph id=\"ph2\">`Main`</ph> method with this line:","pos":[7507,7586],"source":" Open `program.cs`\nand replace the contents of the `Main` method with this line:"},{"content":"You'll need to add a couple using directives to the top of the file:","pos":[7654,7722]},{"content":"Then, run <ph id=\"ph1\">`dotnet build`</ph>.","pos":[7779,7804],"source":"Then, run `dotnet build`."},{"content":"That creates the assemblies, and you can type <ph id=\"ph1\">`dotnet run`</ph> to run the executable.","pos":[7805,7886],"source":" That creates the assemblies, and you\ncan type `dotnet run` to run the executable."},{"content":"Debugging your application","pos":[7892,7918]},{"content":"You can debug your code in VS Code using the C# extension.","pos":[7920,7978]},{"content":"You install this extension by pressing <ph id=\"ph1\">`F1`</ph> to open the VS Code palette.","pos":[7979,8051],"source":"\nYou install this extension by pressing `F1` to open the VS Code\npalette."},{"content":"Type <ph id=\"ph1\">`ext install`</ph> to see the list of extensions.","pos":[8052,8101],"source":" Type `ext install` to see the list of extensions."},{"content":"Select the <ph id=\"ph1\">`C#`</ph> extension.","pos":[8102,8128],"source":" Select the `C#`\nextension."},{"content":"(More details are available on the <bpt id=\"p1\">[</bpt>Visual Studio Code C# Extension documentation<ept id=\"p1\">](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)</ept> page.)","pos":[8129,8289],"source":" (More details are available on the [Visual Studio\nCode C# Extension documentation](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)\npage.)"},{"content":"After you install the extension, VS Code will ask that you restart the application to load the new extension.","pos":[8291,8400],"source":"After you install the extension, VS Code will ask that you restart the application\nto load the new extension."},{"content":"Once the extension is installed, you can open the debugger tab (see figure).","pos":[8401,8477],"source":" Once the extension is installed, you can open the\ndebugger tab (see figure)."},{"content":"VS Code Debugger","pos":[8481,8497]},{"content":"When you start the debugger, VS Code will instruct you to configure the debugger.","pos":[8544,8625],"source":"When you start the debugger, VS Code will instruct you to configure\nthe debugger."},{"content":"When you do, it creates a <ph id=\"ph1\">`.vscode`</ph> directory with two files: <ph id=\"ph2\">`tasks.json`</ph> and <ph id=\"ph3\">`launch.json`</ph>.","pos":[8626,8719],"source":" When you do, it creates a `.vscode` directory\nwith two files: `tasks.json` and `launch.json`."},{"content":"These two files control the debugger configuration.","pos":[8720,8771],"source":" These two files control the debugger\nconfiguration."},{"content":"In most projects, this directory is not included in source control.","pos":[8772,8839]},{"content":"It is included in the sample associated with this walk through so you can see the edits you need to make.","pos":[8840,8945],"source":"\nIt is included in the sample associated with this walk through so you can see\nthe edits you need to make."},{"content":"Your solution contains multiple projects, so you'll want to modify each of these files to perform the correct commands.","pos":[8947,9066],"source":"Your solution contains multiple projects, so you'll want to modify each of these files\nto perform the correct commands."},{"content":"First, open <ph id=\"ph1\">`tasks.json`</ph>.","pos":[9067,9092],"source":" First, open `tasks.json`."},{"content":"The default build task runs <ph id=\"ph1\">`dotnet build`</ph> in the workspace source directory.","pos":[9093,9170],"source":" The default build task\nruns `dotnet build` in the workspace source directory."},{"content":"Instead, you want to run it in the <ph id=\"ph1\">`src/app`</ph> directory.","pos":[9171,9226],"source":" Instead, you want to run it in\nthe `src/app` directory."},{"content":"You need to add a <ph id=\"ph1\">`options`</ph> node to set the current working directory to that:","pos":[9227,9305],"source":" You need to add a `options` node to set the current\nworking directory to that:"},{"content":"Next, you'll need to open <ph id=\"ph1\">`launch.json`</ph> and update the program path.","pos":[9371,9439],"source":"Next, you'll need to open `launch.json` and update the program path."},{"content":"You'll see a node under \"configurations\" that describes the program.","pos":[9440,9508],"source":" You'll see a\nnode under \"configurations\" that describes the program."},{"content":"You'll see:","pos":[9509,9520]},{"content":"You'll change this to:","pos":[9612,9634]},{"content":"If you are running on Windows, you'll need to update the Application's <ph id=\"ph1\">`project.json`</ph> (in the <ph id=\"ph2\">`src/app`</ph> directory) to generate portable PDB files (this happens by default on Mac OSX and Linux).","pos":[9718,9912],"source":"If you are running on Windows, you'll need to update the Application's `project.json` \n(in the `src/app` directory) to\ngenerate portable PDB files (this happens by default on Mac OSX and Linux)."},{"content":"Add the <ph id=\"ph1\">`debugType`</ph> node inside <ph id=\"ph2\">`buildOptions`</ph>.","pos":[9913,9960],"source":"\nAdd the `debugType` node inside `buildOptions`."},{"content":"You'll need to add the <ph id=\"ph1\">`debugType`</ph> node in <ph id=\"ph2\">`project.json`</ph> for both the <ph id=\"ph3\">`src/app`</ph> and <ph id=\"ph4\">`src/library`</ph> folders.","pos":[9961,10068],"source":" You'll need to add the `debugType` node\nin `project.json` for both the `src/app` and `src/library` folders."},{"content":"Set a breakpoint at the <ph id=\"ph1\">`WriteLine`</ph> statement in <ph id=\"ph2\">`Main`</ph>.","pos":[10134,10190],"source":"Set a breakpoint at the `WriteLine` statement in `Main`."},{"content":"You do this by pressing the <ph id=\"ph1\">`F9`</ph> key, or by clicking the mouse in the left margin on the line you want the breakpoint.","pos":[10191,10309],"source":" You do this\nby pressing the `F9` key, or by clicking the mouse in the left margin\non the line you want the breakpoint."},{"content":"Open the debugger by pressing the debug icon on the left of the VS Code screen (see figure).","pos":[10310,10403],"source":" \nOpen the debugger by pressing the debug\nicon on the left of the VS Code screen (see figure)."},{"content":"Then, press the Play button to start the application under the debugger.","pos":[10404,10476],"source":" Then,\npress the Play button to start the application under the debugger."},{"content":"You should hit the breakpoint.","pos":[10478,10508]},{"content":"Step into the <ph id=\"ph1\">`Get`</ph> method and make sure that you have passed in the correct arguments.","pos":[10509,10596],"source":" Step into the `Get` method and make sure that you\nhave passed in the correct arguments."},{"content":"Make sure that the answer is actually 42.","pos":[10597,10638]}],"content":"---\ntitle: Getting started with .NET Core on macOS\ndescription: Getting started with .NET Core on macOS, using Visual Studio Code\nkeywords: .NET, .NET Core\nauthor: bleroy\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 8ad82148-dac8-4b31-9128-b0e9610f4d9b\n---\n\n# Getting started with .NET Core on macOS, using Visual Studio Code\n\nby [Bertrand Le Roy](https://github.com/bleroy),  [Phillip Carter](https://github.com/cartermp),\n[Bill Wagner](https://github.com/billwagner)\n\nContributions by [Toni Solarin-Sodara](https://github.com/tsolarin)\n\nThis document provides a tour of the steps and workflow to create a .NET\nCore Solution using [Visual Studio Code](http://code.visualstudio.com).\nYou'll learn how to create projects, create unit tests, use the debugging\ntools, and incorporate third-party libraries via [NuGet](http://nuget.org).\n\nThis article uses Visual Studio Code on Mac OS. Where there are differences,\nit points out the differences for the Windows platform.\n\nPrerequisites\n-------------\n\nBefore starting, you'll need to install the [.NET Core SDK](https://www.microsoft.com/net/core),\ncurrently in a preview release. The .NET Core SDK includes the latest release\nof the .NET Core framework and runtime.\n\nYou'll also need to install [Visual Studio Code](http://code.visualstudio.com).\nDuring the course of this article, you'll also install extensions\nthat will improve the .NET Core development experience.\n\nYou can find the links to all of these at the [.NET home page](http://dot.net).\n\nGetting Started\n---------------\n\nThe source for this tutorial is available on\n[GitHub](https://github.com/dotnet/core-docs/tree/master/samples/getting-started/golden).\n\nStart Visual Studio Code. Press Ctrl + '\\`' (the back-quote character) to open\nan embedded terminal in VS Code. (Alternatively, you can use a separate\nterminal window, if you prefer).\n\nBy the time we're done, you'll create three projects: a library project,\ntests for that library project, and a console application that makes\nuse of the library. You'll follow a standard folder structure for\nthe three projects. Following this standard folder structure\nmeans that the .NET Core SDK tools understand the relationship between\nyour production code projects and your test code projects. That makes\nyour development experience more productive.\n\nLet's start by creating those folders. In the terminal, create a 'golden'\ndirectory. Under that directory create `src` and `test`\ndirectories. Under `src` create `app` and `library` directories. In `test`\ncreate a `test-library` directory. You can do this either using the terminal\nin VS code, or by clicking on the parent folder in VS Code and selecting the\n\"New Folder\" icon.\n\nIn VS Code, open the 'golden' directory. This directory is the root of your solution.\n\nNext, create a `global.json` file in the root directory for your solution.\nThe contents of `global.json` are:\n\n```js\n{\n    \"projects\": [\n        \"src\",\n        \"test\"\n    ]\n}\n```\n\nAt this point, your directory tree should look like this:\n\n\n```\n/golden\n|__global.json\n|__/src\n   |__/app\n   |__/library\n|__/test\n   |__/test-library\n```\n\n### Writing the library\n\nYour next task is to create the library. In the terminal window\n(either the embedded terminal in VS code, or another terminal),\ncd to `golden/src/library` and type the command `dotnet new -t lib`.\nThis creates a library project, with two files: `project.json` and\n`Library.cs`.\n\n`project.json` contains the following information:\n\n```js\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"debugType\": \"portable\"\n  },\n  \"dependencies\": {},\n  \"frameworks\": {\n    \"netstandard1.6\": {\n      \"dependencies\": {\n        \"NETStandard.Library\": \"1.6.0\"\n      }\n    }\n  }\n}\n```\n\n\nThis library project will make use of JSON representation of objects, so you'll want to\nadd a reference to the `Newtonsoft.Json` NuGet package. In`project.json`\nadd the latest pre-release version of the package as a dependency:\n\n```js\n\"dependencies\": {\n    \"Newtonsoft.Json\": \"9.0.1-beta1\"\n},\n```\n\nAfter you've finished adding those dependencies, you need to install those\npackages into workspace. Run the `dotnet restore` command to updates all dependencies,\nand write a `project.lock.json` file in the project directory. This\nfile contains the full dependency tree of all the dependencies in your\nproject. You don't need to read this file, it's used by tools in the .NET\nCore SDK.\n\nNow, let's update the C# code. Let's create a `Thing` class that contains\none public method. This method will return the sum of two numbers,\nbut will do so by converting that number to a JSON string, and then\ndeserializing it. Rename the file `Library.cs` to `Thing.cs`. Then, replace\nthe existing code (for the template-generated Class1) with the following:\n\n```cs\nusing static Newtonsoft.Json.JsonConvert;\n\nnamespace Library\n{\n    public class Thing\n    {\n        public int Get(int left, int right) =>\n            DeserializeObject<int>($\"{left + right}\");\n    }\n}\n```\n\nThis makes use of a number of modern C# features, such as \nstatic usings, expression bodied members, and interpolated strings,\nthat you can learn\nabout in the [Learn C#](../../csharp/index.md) section.\n\nNow that you've updated the code, you can build the library using\n`dotnet build`.\n\nYou now have a built `library.dll` file under `golden/src/library/bin/Debug/netstandard1.6`.\n\n### Writing the test project\n\nLet's build a test project for this library that you've build. Cd into the `test/test-library`\ndirectory. Run `dotnet new -t xunittest` to create a new test project. \n\nYou'll need to add a dependency node for the library you wrote in the steps\nabove. Open `project.json` and update the dependencies section to the following\n(including the `library` node, which is the last node below):\n\n```js\n\"dependencies\": {\n  \"System.Runtime.Serialization.Primitives\": \"4.1.1\",\n  \"xunit\": \"2.1.0\",\n  \"dotnet-test-xunit\": \"1.0.0-rc2-192208-24\",\n  \"library\": {\n    \"target\": \"project\"\n  }\n}\n```\n\nThe `library` node specifies that this dependency should resolve to a project\nin the current workspace. Without explicitly specifying this, it's possible\nthat the test project would build against a NuGet package of the same name.\n\nNow that the dependencies have been properly configured, let's create\nthe tests for your library. Open `Tests.cs` and\nreplace its contents with the following code:\n\n```csharp\nusing Library;\nusing Xunit;\n\nnamespace TestApp\n{\n    public class LibraryTests\n    {\n        [Fact]\n        public void TestThing() {\n            Assert.Equal(42, new Thing().Get(19, 23));\n        }\n    }\n}\n```\n\nNow, run `dotnet restore`, `dotnet build` and `dotnet test`.\nThe xUnit console test runner will run the one test, and report\nthat it is passing. \n\n### Writing the console app\n\nIn your terminal, cd to the `golden/src/app` directory. Run `dotnet new`\nto create a new console application.\n\nYour console application depends on the library you built and tested\nin the previous steps. You need to indicate that by editing `project.json`\nto add this dependency.  In the `dependencies` node, add the `Library`\nnode below the `Microsoft.NetCore.App` node as follows:\n\n```js\n\"dependencies\": {\n  \"library\": {\n    \"target\": \"project\"\n  }\n}\n```\n\nThe `project` node is important here, as it was in the test library. It\nindicates that this is a project in the current solution, and not a\nNuGet package.\n\nRun `dotnet restore` to restore all dependencies. Open `program.cs`\nand replace the contents of the `Main` method with this line:\n\n```cs\nWriteLine($\"The answer is {new Thing().Get(19, 23)}\");\n```\n\nYou'll need to add a couple using directives to the top of the file:\n\n```cs\nusing static System.Console;\nusing Library;\n```\n\nThen, run `dotnet build`. That creates the assemblies, and you\ncan type `dotnet run` to run the executable.\n\n### Debugging your application\n\nYou can debug your code in VS Code using the C# extension.\nYou install this extension by pressing `F1` to open the VS Code\npalette. Type `ext install` to see the list of extensions. Select the `C#`\nextension. (More details are available on the [Visual Studio\nCode C# Extension documentation](https://github.com/OmniSharp/omnisharp-vscode/blob/master/debugger.md)\npage.)\n\nAfter you install the extension, VS Code will ask that you restart the application\nto load the new extension. Once the extension is installed, you can open the\ndebugger tab (see figure).\n\n![VS Code Debugger](./media/using-on-macos/vscodedebugger.png)\n\n\nWhen you start the debugger, VS Code will instruct you to configure\nthe debugger. When you do, it creates a `.vscode` directory\nwith two files: `tasks.json` and `launch.json`. These two files control the debugger\nconfiguration. In most projects, this directory is not included in source control.\nIt is included in the sample associated with this walk through so you can see\nthe edits you need to make.\n\nYour solution contains multiple projects, so you'll want to modify each of these files\nto perform the correct commands. First, open `tasks.json`. The default build task\nruns `dotnet build` in the workspace source directory. Instead, you want to run it in\nthe `src/app` directory. You need to add a `options` node to set the current\nworking directory to that:\n\n```js\n\"options\": {\n    \"cwd\": \"${workspaceRoot}/src/app\"\n}\n```\n\nNext, you'll need to open `launch.json` and update the program path. You'll see a\nnode under \"configurations\" that describes the program. You'll see:\n\n```js\n\"program\": \"${workspaceRoot}/bin/Debug/<target-framework>/<project-name.dll>\",\n```\n\nYou'll change this to:\n\n```js\n\"program\": \"${workspaceRoot}/src/app/bin/Debug/netcoreapp1.0/app.dll\",\n```\n\nIf you are running on Windows, you'll need to update the Application's `project.json` \n(in the `src/app` directory) to\ngenerate portable PDB files (this happens by default on Mac OSX and Linux).\nAdd the `debugType` node inside `buildOptions`. You'll need to add the `debugType` node\nin `project.json` for both the `src/app` and `src/library` folders.\n\n```js\n  \"buildOptions\": {\n    \"debugType\": \"portable\"\n  },\n```\n\nSet a breakpoint at the `WriteLine` statement in `Main`. You do this\nby pressing the `F9` key, or by clicking the mouse in the left margin\non the line you want the breakpoint. \nOpen the debugger by pressing the debug\nicon on the left of the VS Code screen (see figure). Then,\npress the Play button to start the application under the debugger.\n\nYou should hit the breakpoint. Step into the `Get` method and make sure that you\nhave passed in the correct arguments. Make sure that the answer is actually 42.\n"}