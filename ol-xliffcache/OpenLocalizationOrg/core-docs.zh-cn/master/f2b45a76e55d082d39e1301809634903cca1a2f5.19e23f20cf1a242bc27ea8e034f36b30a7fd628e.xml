{"nodes":[{"pos":[11,54],"content":"Unit Testing in .NET Core using dotnet test","needQuote":true,"nodes":[{"content":"Unit Testing in .NET Core using dotnet test","pos":[0,43]}]},{"pos":[68,111],"content":"Unit Testing in .NET Core using dotnet test","needQuote":true,"nodes":[{"content":"Unit Testing in .NET Core using dotnet test","pos":[0,43]}]},{"pos":[122,137],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Unit Testing in .NET Core using dotnet test","pos":[342,385]},{"pos":[387,472],"content":"By <bpt id=\"p1\">[</bpt>Steve Smith<ept id=\"p1\">](http://ardalis.com)</ept> and <bpt id=\"p2\">[</bpt>Bill Wagner<ept id=\"p2\">](https://github.com/BillWagner)</ept>","source":"By [Steve Smith](http://ardalis.com) and [Bill Wagner](https://github.com/BillWagner)"},{"content":"View or download sample code","pos":[475,503]},{"content":"Creating the Projects","pos":[597,618]},{"content":"<bpt id=\"p1\">[</bpt>Writing Libraries with Cross Platform Tools<ept id=\"p1\">](../tutorials/libraries.md)</ept> has information on organizing multi-project solutions for both the source and the tests.","pos":[620,781],"source":"[Writing Libraries with Cross Platform Tools](../tutorials/libraries.md)\nhas information on organizing multi-project solutions for both the\nsource and the tests."},{"content":"This article follows those conventions.","pos":[782,821]},{"content":"The final project structure will be something like this:","pos":[822,878],"source":" The\nfinal project structure will be something like this:"},{"pos":[1082,1204],"content":"In the root directory, you'll need to create a <ph id=\"ph1\">`global.json`</ph> that contains the names of your <ph id=\"ph2\">`src`</ph> and <ph id=\"ph3\">`test`</ph> directories:","source":"In the root directory, you'll need to create a `global.json` that\ncontains the names of your `src` and `test` directories:"},{"content":"Creating the source project","pos":[1281,1308]},{"content":"Then, in the <ph id=\"ph1\">`src`</ph> directory, create the <ph id=\"ph2\">`PrimeService`</ph> directory.","pos":[1310,1376],"source":"Then, in the `src` directory, create the `PrimeService` directory."},{"content":"CD into that directory, and run <ph id=\"ph1\">`dotnet new`</ph> to create the source project.","pos":[1377,1451],"source":"\nCD into that directory, and run `dotnet new` to create the source\nproject."},{"pos":[1454,1616],"content":"The <ph id=\"ph1\">`dotnet new`</ph> command creates a console application project, so you'll want to make a modification to <ph id=\"ph2\">`project.json`</ph> so that you build a class library project.","source":"The `dotnet new` command creates a console application project, so you'll want to\nmake a modification to `project.json` so that you build a class library\nproject."},{"content":"note: You can track <bpt id=\"p1\">[</bpt>this issue<ept id=\"p1\">](https://github.com/dotnet/cli/issues/2052)</ept> for other project types coming for the .NET Core SDK, including class libraries.","pos":[1621,1777],"source":"note: You can track [this issue](https://github.com/dotnet/cli/issues/2052)\nfor other project types coming for the .NET Core SDK, including class libraries."},{"content":"Once this issue is addressed, you won't need to make these changes.","pos":[1778,1845],"source":"\nOnce this issue is addressed, you won't need to make these changes."},{"pos":[1847,1945],"content":"Simply remove the <ph id=\"ph1\">`buildOptions`</ph> node that instructs the compiler to emit the program entry point:","source":"Simply remove the `buildOptions` node that instructs the compiler\nto emit the program entry point:"},{"content":"You'll also want to remove <ph id=\"ph1\">`program.cs`</ph> and replace it with the class for the <ph id=\"ph2\">`PrimeService`</ph>.","pos":[2008,2101],"source":"You'll also want to remove `program.cs` and replace it with the class for the\n`PrimeService`."},{"content":"To use TDD, you'll create a failing implementation of the <ph id=\"ph1\">`PrimeService`</ph> class:","pos":[2102,2181],"source":" To use TDD, you'll create a failing implementation of the\n`PrimeService` class:"},{"content":"Creating the test project","pos":[2427,2452]},{"content":"Next, cd into the 'test' directory, and create the <ph id=\"ph1\">`PrimeServices.Tests`</ph> directory.","pos":[2454,2537],"source":"Next, cd into the 'test' directory, and create the `PrimeServices.Tests` directory."},{"content":"CD into the <ph id=\"ph1\">`PrimeServices.Tests`</ph> directory and create a new project using <ph id=\"ph2\">`dotnet new -t xunittest`</ph>.","pos":[2538,2639],"source":"\nCD into the `PrimeServices.Tests` directory and create a new project using\n`dotnet new -t xunittest`."},{"content":"creates a test project that uses xunit as the test library.","pos":[2666,2725],"source":" creates a test project\nthat uses xunit as the test library."},{"pos":[2728,2808],"content":"The generated template configured the test runner at the root of <ph id=\"ph1\">`project.json`</ph>:","source":"The generated template configured the test runner\nat the root of `project.json`:"},{"pos":[2885,3028],"content":"The template also sets the framework node to use <ph id=\"ph1\">`netcoreapp1.0`</ph>, and include the required imports to get xUnit.net to work with .NET Core RTM:","source":"The template also sets the framework node to use\n`netcoreapp1.0`, and include the required imports to\nget xUnit.net to work with .NET Core RTM:"},{"content":"The test project requires other packages to create and run unit tests.","pos":[3173,3243]},{"content":"added xunit, and the xunit runner.","pos":[3257,3291]},{"content":"You need to add the PrimeService package as another dependency to the project:","pos":[3292,3370],"source":" You need to add the PrimeService\npackage as another dependency to the project:"},{"content":"Notice that the <ph id=\"ph1\">`PrimeService`</ph> project does not include any directory path information.","pos":[3598,3685],"source":"Notice that the `PrimeService` project does not include\nany directory path information."},{"content":"Because you created the project structure to match the expected organization of <ph id=\"ph1\">`src`</ph> and <ph id=\"ph2\">`test`</ph>, and the <ph id=\"ph3\">`global.json`</ph> file indicates that, the build system will find the correct location for the project.","pos":[3686,3891],"source":" Because you created the\nproject structure to match the expected organization of\n`src` and `test`, and the `global.json` file indicates\nthat, the build system will find the correct location\nfor the project."},{"content":"You add the <ph id=\"ph1\">`\"target\": \"project\"`</ph> element to inform NuGet that it should look in project directories, not in the NuGet feed.","pos":[3892,4016],"source":" You add the `\"target\": \"project\"` element\nto inform NuGet that it should look in project directories,\nnot in the NuGet feed."},{"content":"Without this key, you might download a package with the same name as your internal library.","pos":[4017,4108],"source":" Without this key, you might download\na package with the same name as your internal library."},{"pos":[4110,4301],"content":"You can see the entire file in the <bpt id=\"p1\">[</bpt>samples repository<ept id=\"p1\">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/project.json)</ept> on GitHub.","source":"You can see the entire file in the [samples repository](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/project.json)\non GitHub."},{"content":"After this initial structure is in place, you can write your first test.","pos":[4303,4375]},{"content":"Once you verify that first unit test, everything is configured and should run smoothly as you add features and tests.","pos":[4376,4493],"source":"\nOnce you verify that first unit test, everything is configured and should run smoothly\nas you add features and tests."},{"content":"Creating the first test","pos":[4498,4521]},{"content":"The TDD approach calls for writing one failing test, then making it pass, then repeating the process.","pos":[4523,4624],"source":"The TDD approach calls for writing one failing test, then making it pass,\nthen repeating the process."},{"content":"So, let's write that one failing test.","pos":[4625,4663]},{"content":"Remove <ph id=\"ph1\">`program.cs`</ph> from the <ph id=\"ph2\">`PrimeService.Tests`</ph> directory, and create a new C# file with the following content:","pos":[4664,4777],"source":" Remove\n`program.cs` from the `PrimeService.Tests` directory, and create a new\nC# file with the following content:"},{"pos":[5249,5306],"content":"The <ph id=\"ph1\">`[Fact]`</ph> attribute denotes a method as a single test.","source":"The `[Fact]` attribute denotes a method as a single test."},{"content":"Save this file, then run <ph id=\"ph1\">`dotnet build`</ph> to build the test project.","pos":[5309,5375],"source":"Save this file, then run `dotnet build` to build the test project."},{"content":"If you have not already built the <ph id=\"ph1\">`PrimeService`</ph> project, the build system will detect that and build it because it is a dependency of the test project.","pos":[5376,5528],"source":"\nIf you have not already built the `PrimeService` project, the\nbuild system will detect that and build it because it is a\ndependency of the test project."},{"content":"Now, execute <ph id=\"ph1\">`dotnet test`</ph> to run the tests from the console.","pos":[5530,5591],"source":"Now, execute `dotnet test` to run the tests from the console."},{"content":"The xunit test runner has the program entry point to run your tests from the Console.","pos":[5592,5677],"source":"\nThe xunit test runner has the program entry point to run your\ntests from the Console."},{"content":"starts the test runner, and provides a command line argument to the testrunner indicating the assembly that contains your tests.","pos":[5692,5820],"source":" starts the\ntest runner, and provides a command line argument to the\ntestrunner indicating the assembly that contains your tests."},{"content":"Your test fails.","pos":[5822,5838]},{"content":"You haven't created the implementation yet.","pos":[5839,5882]},{"content":"Write the simplest code to make this one test pass:","pos":[5883,5934],"source":"\nWrite the simplest code to make this one test pass:"},{"content":"Adding More Features","pos":[6121,6141]},{"content":"Now, that you've made one test pass, it's time to write more.","pos":[6143,6204]},{"content":"There are a few other simple cases for prime numbers: 0, -1.","pos":[6205,6265],"source":"\nThere are a few other simple cases for prime numbers: 0, -1."},{"content":"You could add those as new tests, with the <ph id=\"ph1\">`[Fact]`</ph> attribute, but that quickly becomes tedious.","pos":[6266,6362],"source":" You\ncould add those as new tests, with the `[Fact]` attribute, but that\nquickly becomes tedious."},{"content":"There are other xunit attributes that enable you to write a suite of similar tests.","pos":[6363,6446],"source":" There are other xunit attributes that enable\nyou to write a suite of similar tests."},{"content":"A <ph id=\"ph1\">`Theory`</ph> represents a suite of tests that execute the same code, but have different input arguments.","pos":[6448,6550],"source":"  A `Theory` represents a suite\nof tests that execute the same code, but have different input arguments."},{"content":"You can use the <ph id=\"ph1\">`[InlineData]`</ph> attribute to specify values for those inputs.","pos":[6551,6627],"source":"\nYou can use the `[InlineData]` attribute to specify values for those\ninputs."},{"pos":[6632,6790],"content":"Instead of creating new tests, leverage these two attributes to create a single theory that tests some values less than 2, which is the lowest prime number:","source":"Instead of creating new tests, leverage these two attributes\n to create a single theory that tests some values less than 2,\n which is the lowest prime number:"},{"content":"Run <ph id=\"ph1\">`dotnet test`</ph> and you'll see that two of these tests fail.","pos":[7026,7088],"source":"Run `dotnet test` and you'll see that two of these tests fail."},{"content":"You can make them pass by changing the service.","pos":[7089,7136],"source":"\nYou can make them pass by changing the service."},{"content":"You need to change the <ph id=\"ph1\">`if`</ph> clause at the beginning of the method:","pos":[7137,7203],"source":" You need to change\nthe `if` clause at the beginning of the method:"},{"content":"Now, these tests all pass.","pos":[7234,7260]},{"content":"You continue to iterate by adding more tests, more theories, and more code in the main library.","pos":[7262,7357],"source":"You continue to iterate by adding more tests, more theories,\nand more code in the main library."},{"content":"You'll quickly end up with the <bpt id=\"p1\">[</bpt>finished version of the tests<ept id=\"p1\">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)</ept> and the <bpt id=\"p2\">[</bpt>complete implementation of the library<ept id=\"p2\">](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/src/PrimeService/PrimeService.cs)</ept>.","pos":[7358,7732],"source":" You'll quickly end up\nwith the\n[finished version of the tests](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)\nand the\n[complete implementation of the library](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/src/PrimeService/PrimeService.cs)."},{"content":"You've built a small library and a set of unit tests for that library.","pos":[7734,7804]},{"content":"You've structured this solution so that adding new packages and tests will be seamless, and you can concentrate on the problem at hand.","pos":[7805,7940],"source":"\nYou've structured this solution so that adding new packages and tests\nwill be seamless, and you can concentrate on the problem at hand."},{"content":"The tools will run automatically.","pos":[7941,7975],"source":" The \ntools will run automatically."}],"content":"---\ntitle: Unit Testing in .NET Core using dotnet test\ndescription: Unit Testing in .NET Core using dotnet test\nkeywords: .NET, .NET Core\nauthor: ardalis\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: bdcdb812-6f13-4f20-9e90-0c0977937142\n---\n\n# Unit Testing in .NET Core using dotnet test\n\nBy [Steve Smith](http://ardalis.com) and [Bill Wagner](https://github.com/BillWagner)\n\n[View or download sample code](https://github.com/dotnet/core-docs/tree/master/samples/unit-testing/using-dotnet-test)\n\n## Creating the Projects\n\n[Writing Libraries with Cross Platform Tools](../tutorials/libraries.md)\nhas information on organizing multi-project solutions for both the\nsource and the tests. This article follows those conventions. The\nfinal project structure will be something like this:\n\n```\n/unit-testing-using-dotnet-test\n|__global.json\n|__/src\n   |__/PrimeService\n      |__Source Files\n      |__project.json\n/test\n   |__/PrimeService.Tests\n      |__Test Files\n      |__project.json\n```\n\nIn the root directory, you'll need to create a `global.json` that\ncontains the names of your `src` and `test` directories:\n\n```json\n{\n    \"projects\": [\n        \"src\",\n        \"test\"\n    ]\n}\n```\n\n### Creating the source project\n\nThen, in the `src` directory, create the `PrimeService` directory.\nCD into that directory, and run `dotnet new` to create the source\nproject.\n\n\nThe `dotnet new` command creates a console application project, so you'll want to\nmake a modification to `project.json` so that you build a class library\nproject. \n\n* note: You can track [this issue](https://github.com/dotnet/cli/issues/2052)\nfor other project types coming for the .NET Core SDK, including class libraries.\nOnce this issue is addressed, you won't need to make these changes.\n\nSimply remove the `buildOptions` node that instructs the compiler\nto emit the program entry point:\n\n```json\n\"buildOptions\" : {\n    \"emitEntryPoint\": true\n}\n```\n\nYou'll also want to remove `program.cs` and replace it with the class for the\n`PrimeService`. To use TDD, you'll create a failing implementation of the\n`PrimeService` class:\n\n```cs\nusing System;\n\nnamespace Prime.Services\n{\n    public class PrimeService\n    {\n        public bool IsPrime(int candidate) \n        {\n            throw new NotImplementedException(\"Please create a test first\");\n        } \n    }\n}\n\n```\n\n### Creating the test project\n\nNext, cd into the 'test' directory, and create the `PrimeServices.Tests` directory.\nCD into the `PrimeServices.Tests` directory and create a new project using\n`dotnet new -t xunittest`. `dotnet new -t xunittest` creates a test project\nthat uses xunit as the test library. \n\nThe generated template configured the test runner\nat the root of `project.json`:\n\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"testRunner\": \"xunit\",\n  // ...\n}\n```\n\nThe template also sets the framework node to use\n`netcoreapp1.0`, and include the required imports to\nget xUnit.net to work with .NET Core RTM:\n\n```json\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": [\n        \"dotnet54\",\n        \"portable-net45+win8\" \n      ]\n    }\n  }\n```\n\n\nThe test project requires other packages to create and run unit tests.\n`dotnet new` added xunit, and the xunit runner. You need to add the PrimeService\npackage as another dependency to the project:\n\n```json\n\"dependencies\": {\n  \"Microsoft.NETCore.App\": {\n    \"type\":\"platform\",\n    \"version\": \"1.0.0\"\n  },\n  \"xunit\":\"2.1.0\",\n  \"dotnet-test-xunit\": \"1.0.0-rc2-192208-24\",\n  \"PrimeService\": {\n    \"target\": \"project\"\n  }\n}\n```\n\nNotice that the `PrimeService` project does not include\nany directory path information. Because you created the\nproject structure to match the expected organization of\n`src` and `test`, and the `global.json` file indicates\nthat, the build system will find the correct location\nfor the project. You add the `\"target\": \"project\"` element\nto inform NuGet that it should look in project directories,\nnot in the NuGet feed. Without this key, you might download\na package with the same name as your internal library.\n\nYou can see the entire file in the [samples repository](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/project.json)\non GitHub.\n\nAfter this initial structure is in place, you can write your first test.\nOnce you verify that first unit test, everything is configured and should run smoothly\nas you add features and tests.\n\n## Creating the first test\n\nThe TDD approach calls for writing one failing test, then making it pass,\nthen repeating the process. So, let's write that one failing test. Remove\n`program.cs` from the `PrimeService.Tests` directory, and create a new\nC# file with the following content:\n\n```cs\nnamespace Prime.UnitTests.Services\n{\n    public class PrimeService_IsPrimeShould\n    {\n        private readonly PrimeService _primeService;\n         public PrimeService_IsPrimeShould()\n         {\n             _primeService = new PrimeService();\n         }\n\n        [Fact]\n        public void ReturnFalseGivenValueOf1()\n        {\n            var result = _primeService.IsPrime(1);\n\n            Assert.False(result, $\"1 should not be prime\");\n        }\n    }\n}\n```\n\nThe `[Fact]` attribute denotes a method as a single test. \n\nSave this file, then run `dotnet build` to build the test project.\nIf you have not already built the `PrimeService` project, the\nbuild system will detect that and build it because it is a\ndependency of the test project.\n\nNow, execute `dotnet test` to run the tests from the console.\nThe xunit test runner has the program entry point to run your\ntests from the Console. `dotnet test` starts the\ntest runner, and provides a command line argument to the\ntestrunner indicating the assembly that contains your tests.\n\nYour test fails. You haven't created the implementation yet.\nWrite the simplest code to make this one test pass:\n\n```cs\npublic bool IsPrime(int candidate) \n{\n    if(candidate == 1) \n    { \n        return false;\n    } \n    throw new NotImplementedException(\"Please create a test first\");\n} \n```\n\n### Adding More Features\n\nNow, that you've made one test pass, it's time to write more.\nThere are a few other simple cases for prime numbers: 0, -1. You\ncould add those as new tests, with the `[Fact]` attribute, but that\nquickly becomes tedious. There are other xunit attributes that enable\nyou to write a suite of similar tests.  A `Theory` represents a suite\nof tests that execute the same code, but have different input arguments.\nYou can use the `[InlineData]` attribute to specify values for those\ninputs. \n \n Instead of creating new tests, leverage these two attributes\n to create a single theory that tests some values less than 2,\n which is the lowest prime number:\n\n```cs\n[Theory]\n[InlineData(-1)]\n[InlineData(0)]\n[InlineData(1)]\npublic void ReturnFalseGivenValuesLessThan2(int value)\n{\n    var result = _primeService.IsPrime(value);\n\n    Assert.False(result, $\"{value} should not be prime\");\n}\n```\n\nRun `dotnet test` and you'll see that two of these tests fail.\nYou can make them pass by changing the service. You need to change\nthe `if` clause at the beginning of the method:\n\n```cs\nif(candidate < 2)\n```\n\nNow, these tests all pass.\n\nYou continue to iterate by adding more tests, more theories,\nand more code in the main library. You'll quickly end up\nwith the\n[finished version of the tests](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/test/PrimeService.Tests/PrimeServie_IsPrimeShould.cs)\nand the\n[complete implementation of the library](https://github.com/dotnet/core-docs/blob/master/samples/unit-testing/using-dotnet-test/src/PrimeService/PrimeService.cs).\n\nYou've built a small library and a set of unit tests for that library.\nYou've structured this solution so that adding new packages and tests\nwill be seamless, and you can concentrate on the problem at hand. The \ntools will run automatically.\n"}