{"nodes":[{"pos":[11,41],"content":"Microservices hosted in Docker","needQuote":true,"nodes":[{"content":"Microservices hosted in Docker","pos":[0,30]}]},{"pos":[55,85],"content":"Microservices hosted in Docker","needQuote":true,"nodes":[{"content":"Microservices hosted in Docker","pos":[0,30]}]},{"pos":[96,111],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Microservices hosted in Docker","pos":[319,349]},{"content":"Introduction","pos":[353,365]},{"content":"This tutorial details the tasks necessary to build and deploy an ASP.NET Core microservice in a Docker container.","pos":[367,480],"source":"This tutorial details the tasks necessary to build and deploy\nan ASP.NET Core microservice in a Docker container."},{"content":"During the course of this tutorial, you'll learn:","pos":[481,530],"source":" During the course\nof this tutorial, you'll learn:"},{"content":"How to generate an ASP.NET Core application using Yeoman","pos":[534,590]},{"content":"How to create a development Docker environment","pos":[593,639]},{"content":"How to build a Docker image based on an existing image.","pos":[642,697]},{"content":"How to deploy your service into a Docker container.","pos":[700,751]},{"content":"Along the way, you'll also see some C# language features:","pos":[753,810]},{"content":"How to convert C# objects into JSON payloads.","pos":[814,859]},{"content":"How to build immutable Data Transfer Objects","pos":[862,906]},{"content":"How to process incoming HTTP Requests and generate the HTTP Response","pos":[909,977]},{"content":"How to work with nullable value types","pos":[980,1017]},{"content":"Why Docker?","pos":[1023,1034]},{"content":"Docker makes it easy to create standard machine images to host your services in a data center, or the public cloud.","pos":[1036,1151],"source":"Docker makes it easy to create standard machine images to\nhost your services in a data center, or the public cloud."},{"content":"Docker enables you to configure the image, and replicate it as needed to scale the installation of your application.","pos":[1152,1268],"source":" Docker\nenables you to configure the image, and replicate it as needed to\nscale the installation of your application."},{"content":"All the code in this tutorial will work in any .NET Core environment.","pos":[1270,1339]},{"content":"The additional tasks for a Docker installation will work for an ASP.NET Core application.","pos":[1340,1429],"source":"\nThe additional tasks for a Docker installation will work for an ASP.NET\nCore application."},{"content":"Prerequisites","pos":[1435,1448]},{"content":"You’ll need to setup your machine to run .NET core.","pos":[1449,1500]},{"content":"You can find the installation instructions on the <bpt id=\"p1\">[</bpt>.NET Core<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept> page.","pos":[1501,1604],"source":" You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage."},{"content":"You can run this application on Windows, Ubuntu Linux, macOS or in a Docker container.","pos":[1605,1691],"source":"\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container."},{"content":"You’ll need to install your favorite code editor.","pos":[1692,1742],"source":" \nYou’ll need to install your favorite code editor."},{"content":"The descriptions below use <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com/)</ept> which is an open source, cross platform editor.","pos":[1743,1870],"source":" The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor."},{"content":"However, you can use whatever tools you are comfortable with.","pos":[1871,1932],"source":" However, you can use whatever tools you are\ncomfortable with."},{"content":"You'll also need to install the Docker engine.","pos":[1934,1980]},{"content":"See the <bpt id=\"p1\">[</bpt>Docker Installation page<ept id=\"p1\">](https://docs.docker.com/engine/installation/)</ept> for instructions.","pos":[1981,2081],"source":" See the \n[Docker Installation page](https://docs.docker.com/engine/installation/) \nfor instructions."},{"content":"Docker can be installed in many Linux distributions, macOS, or Windows.","pos":[2082,2153],"source":"\nDocker can be installed in many Linux distributions, macOS, or Windows."},{"content":"The page referenced above contains links to each of the available installations.","pos":[2154,2234],"source":" The page\nreferenced above contains links to each of the available installations."},{"content":"You'll also need to install a number of command line tools that support ASP.NET core development.","pos":[2236,2333],"source":"You'll also need to install a number of command line tools that support\nASP.NET core development."},{"content":"The command line templates use Yeoman, Bower, Grunt, and Gulp.","pos":[2334,2396],"source":" The command line templates use Yeoman, Bower,\nGrunt, and Gulp."},{"content":"You may already have many of these tools, but if not, run the following command in your favorite shell:","pos":[2397,2500],"source":" You may already have many of these tools, but if not,\nrun the following command in your favorite shell:"},{"content":"This instructs the node package manager (npm) to install the needed tools.","pos":[2544,2618]},{"content":"The '-g' option indicates that it is a global install, and those tools are available system wide.","pos":[2619,2716],"source":"\nThe '-g' option indicates that it is a global install, and those tools are\navailable system wide."},{"content":"(A local install scopes the package to a single project).","pos":[2717,2774],"source":" (A local install scopes the package to a single\nproject)."},{"content":"Once you've installed those core tools, you need to install the yeoman asp.net template generators:","pos":[2775,2874],"source":" Once you've installed those core tools, you need to install\nthe yeoman asp.net template generators:"},{"content":"Create the Application","pos":[2914,2936]},{"content":"Now that you've installed all the tools, create a new asp.net core application.","pos":[2938,3017],"source":"Now that you've installed all the tools, create a new asp.net core\napplication."},{"content":"To use the command line generator, execute the following yeoman command in your favorite shell:","pos":[3018,3113],"source":" To use the command line generator, execute the following\nyeoman command in your favorite shell:"},{"content":"This command prompts you to select what Type of application you want to create.","pos":[3128,3207],"source":"This command prompts you to select what Type of application you want to\ncreate."},{"content":"For this microservice, you want the simplest, most lightweight web application possible, so select 'Empty Web Application'.","pos":[3208,3331],"source":" For this microservice, you want the simplest, most lightweight\nweb application possible, so select 'Empty Web Application'."},{"content":"The template will prompt you for a name.","pos":[3332,3372],"source":" The template\nwill prompt you for a name."},{"content":"Select 'WeatherMicroservice'.","pos":[3373,3402]},{"content":"The template creates eight files for you:","pos":[3405,3446]},{"content":"A .gitignore, customized for asp.net core applications.","pos":[3450,3505]},{"content":"A Startup.cs file.","pos":[3508,3526]},{"content":"This contains the basis of the application.","pos":[3527,3570]},{"content":"A Program.cs file.","pos":[3573,3591]},{"content":"This contains the entry point of the application.","pos":[3592,3641]},{"content":"A project.json file.","pos":[3644,3664]},{"content":"This is the build file for the application.","pos":[3665,3708]},{"content":"A Dockerfile.","pos":[3711,3724]},{"content":"This script creates a Docker image for the application.","pos":[3725,3780]},{"content":"A README.md.","pos":[3783,3795]},{"content":"This contains links to other asp.net core resources.","pos":[3796,3848]},{"content":"A web.config file.","pos":[3851,3869]},{"content":"This contains basic configuration information.","pos":[3870,3916]},{"content":"A Properties/launchSettings.json file.","pos":[3919,3957]},{"content":"This contains debugging settings used by IDEs.","pos":[3958,4004]},{"content":"Now you can run the template generated application.","pos":[4006,4057]},{"content":"That's done using a series of tools from the command line.","pos":[4058,4116],"source":" That's done using a series\nof tools from the command line."},{"content":"The <ph id=\"ph1\">`dotnet`</ph> command runs the tools necessary for .NET development.","pos":[4117,4184],"source":" The `dotnet` command runs the tools necessary\nfor .NET development."},{"content":"Each verb executes a different command","pos":[4185,4223]},{"content":"The first step is to restore all the dependencies:","pos":[4225,4275]},{"content":"Dotnet restore uses the NuGet package manager to install all the necessary packages into the application directory.","pos":[4295,4410],"source":"Dotnet restore uses the NuGet package manager to install all the necessary packages\ninto the application directory."},{"content":"It also generates a project.json.lock file.","pos":[4411,4454]},{"content":"This file contains information about each package that is referenced.","pos":[4455,4524],"source":" This\nfile contains information about each package that is referenced."},{"content":"After restoring all the dependencies, you build the application:","pos":[4525,4589],"source":" After restoring\nall the dependencies, you build the application:"},{"content":"And once you build the application, you run it from the command line:","pos":[4607,4676]},{"content":"The default configuration listens to http://localhost:5000.","pos":[4692,4751]},{"content":"You can open a browser and navigate to that page and see a \"Hello World!\"","pos":[4752,4825],"source":" You can open a\nbrowser and navigate to that page and see a \"Hello World!\""},{"content":"message.","pos":[4826,4834]},{"content":"Anatomy of an ASP.NET Core application","pos":[4840,4878]},{"content":"Now that you've built the application, let's look at how this functionality is implemented.","pos":[4880,4971],"source":"Now that you've built the application, let's look at how this functionality\nis implemented."},{"content":"There are two of the generated files that are particularly interesting at this point: project.json and Startup.cs.","pos":[4972,5086],"source":" There are two of the generated files that are particularly\ninteresting at this point: project.json and Startup.cs."},{"content":"Project.json contains information about the project.","pos":[5089,5141]},{"content":"The two nodes you'll often work with are 'dependencies' and 'frameworks'.","pos":[5142,5215],"source":" The two nodes you'll\noften work with are 'dependencies' and 'frameworks'."},{"content":"The dependencies node lists all the packages that are needed for this application.","pos":[5216,5298],"source":" The\ndependencies node lists all the packages that are needed for this application."},{"content":"At the moment, this is a small node, needing only the packages that run the web server.","pos":[5299,5386],"source":"\nAt the moment, this is a small node, needing only the packages that run the\nweb server."},{"pos":[5388,5505],"content":"The 'frameworks' node specifies the versions and configurations of the .NET framework that will run this application.","source":"The 'frameworks' node specifies the versions and configurations of the .NET\nframework that will run this application."},{"content":"The application is implemented in Startup.cs.","pos":[5507,5552]},{"content":"This file contains the startup class.","pos":[5553,5590],"source":" This file contains the startup\nclass."},{"content":"The two methods are called by the asp.net core infrastructure to configure and run the application.","pos":[5592,5691],"source":"The two methods are called by the asp.net core infrastructure to configure\nand run the application."},{"content":"The <ph id=\"ph1\">`ConfigureServices`</ph> method describes the services that are necessary for this application.","pos":[5692,5786],"source":" The `ConfigureServices` method describes the services that are\nnecessary for this application."},{"content":"You're building a lean microservice, so it doesn't need to configure any dependencies.","pos":[5787,5873],"source":" You're building a lean microservice, so it doesn't\nneed to configure any dependencies."},{"content":"The <ph id=\"ph1\">`Configure`</ph> method configures the handlers for incoming HTTP Requests.","pos":[5874,5948],"source":" The `Configure` method configures the handlers\nfor incoming HTTP Requests."},{"content":"The template generates a simple handler that responds to any request with the text 'Hello World!'.","pos":[5949,6047],"source":" The template generates a simple handler that responds\nto any request with the text 'Hello World!'."},{"content":"Build a microservice","pos":[6052,6072]},{"content":"The service you're going to build will deliver weather reports from anywhere around the globe.","pos":[6074,6168],"source":"The service you're going to build will deliver weather reports from anywhere\naround the globe."},{"content":"In a production application, you'd call some service to retrieve weather data.","pos":[6169,6247],"source":" In a production application, you'd call some service\nto retrieve weather data."},{"content":"For our sample, we'll generate a random weather forecast.","pos":[6248,6305],"source":" For our sample, we'll generate a random weather\nforecast."},{"pos":[6308,6408],"content":"There are a number of tasks you'll need to perform in order to implement our random weather service:","source":"There are a number of tasks you'll need to perform in order to implement\nour random weather service:"},{"content":"Parse the incoming request to read the latitude and longitude.","pos":[6412,6474]},{"content":"Generate some random forecast data.","pos":[6477,6512]},{"content":"Convert that random forecast data from C# objects into JSON packets.","pos":[6515,6583]},{"content":"Set the response header to indicate that your service sends back JSON.","pos":[6586,6656]},{"content":"Write the response.","pos":[6659,6678]},{"content":"The next sections walk you through each of these steps.","pos":[6680,6735]},{"content":"Parsing the Query String.","pos":[6741,6766]},{"content":"You'll begin by parsing the query string.","pos":[6768,6809]},{"content":"The service will accept 'lat' and 'long' arguments on the query string in this form:","pos":[6810,6895],"source":" The service will accept \n'lat' and 'long' arguments on the query string in this form:"},{"pos":[6948,7069],"content":"All the changes you need to make are in the lambda expression defined as the argument to <ph id=\"ph1\">`app.Run`</ph> in your startup class.","source":"All the changes you need to make are in the lambda expression\ndefined as the argument to `app.Run` in your startup class."},{"content":"The argument on the lambda expression is the <ph id=\"ph1\">`HttpContext`</ph> for the request.","pos":[7071,7146],"source":"The argument on the lambda expression is the `HttpContext` for the\nrequest."},{"content":"One of its properties is the <ph id=\"ph1\">`Request`</ph> object.","pos":[7147,7193],"source":" One of its properties is the `Request` object."},{"content":"The <ph id=\"ph1\">`Request`</ph> object has a <ph id=\"ph2\">`Query`</ph> property that contains a dictionary of all the values on the query string for the request.","pos":[7194,7319],"source":" The `Request`\nobject has a `Query` property that contains a dictionary of all the\nvalues on the query string for the request."},{"content":"The first addition is to find the latitude and longitude values:","pos":[7320,7384],"source":" The first addition is to\nfind the latitude and longitude values:"},{"content":"The Query dictionary values are <ph id=\"ph1\">`StringValue`</ph> type.","pos":[7525,7576],"source":"The Query dictionary values are `StringValue` type."},{"content":"That type can contain a collection of strings.","pos":[7577,7623],"source":" That type can\ncontain a collection of strings."},{"content":"For your weather service, each value is a single string.","pos":[7624,7680],"source":" For your weather service, each\nvalue is a single string."},{"content":"That's why there's the call to <ph id=\"ph1\">`FirstOrDefault()`</ph> in the code above.","pos":[7681,7749],"source":" That's why there's the call to `FirstOrDefault()`\nin the code above."},{"content":"Next, you need to convert the strings to doubles.","pos":[7752,7801]},{"content":"The method you'll use to convert the string to a double is <ph id=\"ph1\">`double.TryParse()`</ph>:","pos":[7802,7881],"source":" The method you'll use\nto convert the string to a double is `double.TryParse()`:"},{"content":"This method leverages C# out parameters to indicate if the input string can be converted to a double.","pos":[7938,8039],"source":"This method leverages C# out parameters to indicate if the input string\ncan be converted to a double."},{"content":"If the string does represent a valid representation for a double, the method returns true, and the <ph id=\"ph1\">`result`</ph> argument contains the value.","pos":[8040,8176],"source":" If the string does represent a valid\nrepresentation for a double, the method returns true, and the `result`\nargument contains the value."},{"content":"If the string does not represent a valid double, the method returns false.","pos":[8177,8251],"source":" If the string does not represent a valid\ndouble, the method returns false."},{"content":"You can adapt that API with the use of an <bpt id=\"p1\">*</bpt>extension method<ept id=\"p1\">*</ept> that returns a <bpt id=\"p2\">*</bpt>nullable double<ept id=\"p2\">*</ept>.","pos":[8253,8347],"source":"You can adapt that API with the use of an *extension method* that returns\na *nullable double*."},{"content":"A <bpt id=\"p1\">*</bpt>nullable value type<ept id=\"p1\">*</ept> is a type that represents some value type, and can also hold a missing, or null value.","pos":[8348,8458],"source":" A *nullable value type* is a type that represents\nsome value type, and can also hold a missing, or null value."},{"content":"A nullable type is represented by appending the <ph id=\"ph1\">`?`</ph> character to the type declaration.","pos":[8459,8545],"source":" A nullable\ntype is represented by appending the `?` character to the type declaration."},{"content":"Extension methods are methods that are defined as static methods, but by adding the <ph id=\"ph1\">`this`</ph> modifier on the first parameter, can be called as though they are members of that class.","pos":[8548,8727],"source":"Extension methods are methods that are defined as static methods, but\nby adding the `this` modifier on the first parameter, can be called as\nthough they are members of that class."},{"content":"Extension methods may only be defined in static classes.","pos":[8728,8784],"source":" Extension methods may only be\ndefined in static classes."},{"content":"Here's the definition of the class containing the extension method for parse:","pos":[8785,8862],"source":" Here's the definition of the class containing\nthe extension method for parse:"},{"content":"The <ph id=\"ph1\">`default(double?)`</ph> expression returns the default value for the <ph id=\"ph2\">`double?`</ph> type.","pos":[9126,9209],"source":"The `default(double?)` expression returns the default value for the\n`double?` type."},{"content":"That default value is the null (or missing) value.","pos":[9210,9260]},{"pos":[9262,9355],"content":"You can use this extension method to convert the query string arguments into the double type:","source":"You can use this extension method to convert the query string arguments\ninto the double type:"},{"pos":[9444,9536],"content":"To easily test the parsing code, update the response to include the values of the arguments:","source":"To easily test the parsing code, update the response to include the values\nof the arguments:"},{"content":"At this point, you can run the web application and see if your parsing code is working.","pos":[9646,9733],"source":"At this point, you can run the web application and see if your parsing\ncode is working."},{"content":"Add values to the web request in a browser, and you should see the updated results.","pos":[9734,9817],"source":" Add values to the web request in a browser, and you should see\nthe updated results."},{"content":"Build a random weather forecast","pos":[9823,9854]},{"content":"Your next task is to build a random weather forecast.","pos":[9856,9909]},{"content":"Let's start with a data container that holds the values you'd want for a weather forecast:","pos":[9910,10000],"source":" Let's start with a data\ncontainer that holds the values you'd want for a weather forecast:"},{"content":"Next, build a constructor that randomly sets those values:","pos":[10414,10472]},{"content":"You can now generate the 5-day forecast in your response method:","pos":[10872,10936]},{"content":"Build the JSON response.","pos":[11182,11206]},{"content":"The final code task on the server is to convert the WeatherReport array into a JSON packet, and send that back to the client.","pos":[11208,11333],"source":"The final code task on the server is to convert the WeatherReport array\ninto a JSON packet, and send that back to the client."},{"content":"Let's start by creating the JSON packet.","pos":[11334,11374],"source":" Let's start by creating\nthe JSON packet."},{"content":"You'll add the NewtonSoft JSON Serializer to the list of dependencies:","pos":[11375,11445],"source":" You'll add the NewtonSoft JSON Serializer to the\nlist of dependencies:"},{"pos":[11776,11850],"content":"Then, you can use the <ph id=\"ph1\">`JsonConvert`</ph> class to write the object to a string:","source":"Then, you can use the `JsonConvert` class to write the object to a string:"},{"content":"The code above converts the forecast object (a list of <ph id=\"ph1\">`WeatherForecast`</ph> objects) into a JSON packet.","pos":[12041,12142],"source":"The code above converts the forecast object (a list of `WeatherForecast`\nobjects) into a JSON packet."},{"content":"After you've constructed the response packet, you set the content type to 'application/json', and write the string.","pos":[12143,12258],"source":" After you've constructed the response packet,\nyou set the content type to 'application/json', and write the string."},{"content":"The application now runs and returns random forecasts.","pos":[12260,12314]},{"content":"Load into Docker","pos":[12319,12335]},{"content":"The Dockerfile created by the asp.net template will serve for our purposes.","pos":[12337,12412],"source":"The Dockerfile created by the asp.net template will serve\nfor our purposes."},{"content":"Let's go over its contents.","pos":[12413,12440]},{"content":"The first line specifies the source image:","pos":[12442,12484]},{"content":"Docker allows you to configure a machine image based on a source template.","pos":[12525,12599],"source":"Docker allows you to configure a machine image based on a\nsource template."},{"content":"That means you don't have to supply all the machine parameters when you start, you only need to supply any changes.","pos":[12600,12715],"source":" That means you don't have to supply all\nthe machine parameters when you start, you only need to\nsupply any changes."},{"content":"The changes here will be to include our application.","pos":[12716,12768],"source":" The changes here will be to include\nour application."},{"content":"In this first sample, we'll use the <ph id=\"ph1\">`onbuild`</ph> version of the RC2 image.","pos":[12770,12841],"source":"In this first sample, we'll use the `onbuild` version of\nthe RC2 image."},{"content":"This is the easiest way to create a working Docker environment.","pos":[12842,12905],"source":" This is the easiest way to create a working Docker\nenvironment."},{"content":"However, the image it creates is larger than necessary.","pos":[12906,12961]},{"content":"This image include the dotnet core runtime, and the dotnet SDK.","pos":[12962,13025],"source":"\nThis image include the dotnet core runtime, and the dotnet SDK."},{"content":"The next two lines load SQLite onto the machine:","pos":[13028,13076]},{"content":"We're not using SQLite, but leave it in place for reference if you need it later.","pos":[13276,13357]},{"content":"The next three lines setup your application:","pos":[13359,13403]},{"pos":[13465,13565],"content":"This will copy the contents of the current directory to the docker VM, and restore all the packages.","source":"This will copy the contents of the current directory to the docker VM, and restore\nall the packages."},{"content":"The final lines of the file set the output port (80) and run the application:","pos":[13567,13644]},{"content":"Notice that this Dockerfile uses the dotnet cli to build and run your docker image.","pos":[13694,13777]},{"content":"That's why the larger image is needed.","pos":[13778,13816],"source":"\nThat's why the larger image is needed."},{"content":"Here are the steps to build the image and deploy it.","pos":[13818,13870]},{"content":"The information below is for the PowerShell CLI.","pos":[13871,13920],"source":" The information below is \nfor the PowerShell CLI."},{"content":"Different shells will have slightly different syntax that will be highlighted below.","pos":[13921,14005],"source":" Different shells will have slightly different syntax\nthat will be highlighted below."},{"content":"First, you have to create a new docker machine called 'weather-service':","pos":[14007,14079]},{"content":"This command creates a new virtual machine in your Docker installation.","pos":[14148,14219]},{"content":"You can see the machine by typing the following command:","pos":[14220,14276],"source":" You can see\nthe machine by typing the following command:"},{"content":"To connect to the machine, you need to retrieve its environment.","pos":[14305,14369]},{"content":"That's done with the env command in docker-machine:","pos":[14370,14421],"source":" That's done with\nthe env command in docker-machine:"},{"content":"Substitute your shell of choice for 'powershell' in the command above.","pos":[14486,14556]},{"content":"This command echoes back a command to configure your shell to communicate with the docker container.","pos":[14557,14657],"source":" This command\nechoes back a command to configure your shell to communicate with the docker container."},{"content":"In PowerShell it is as follows:","pos":[14658,14689],"source":"\nIn PowerShell it is as follows:"},{"content":"If you are using a different shell, the output from the docker-machine command above will show you what command to use in its place.","pos":[14815,14947],"source":"If you are using a different shell, the output from the docker-machine command\nabove will show you what command to use in its place."},{"content":"Execute the command that was generated for you.","pos":[14948,14995],"source":" Execute the command that was generated\nfor you."},{"pos":[15000,15216],"content":"Note: The `docker-machine` command will include the shell's comment character,\n`#` in the case of powershell in the output for the command to run. Make sure\nyou remove this character when you execute the command.","leadings":["","> ","> "],"nodes":[{"content":"Note: The <ph id=\"ph1\">`docker-machine`</ph> command will include the shell's comment character, <ph id=\"ph2\">`#`</ph> in the case of powershell in the output for the command to run.","pos":[0,146],"source":"Note: The `docker-machine` command will include the shell's comment character,\n`#` in the case of powershell in the output for the command to run."},{"content":"Make sure you remove this character when you execute the command.","pos":[147,212],"source":" Make sure\nyou remove this character when you execute the command."}]},{"content":"Finally, build the docker image from your application:","pos":[15218,15272]},{"pos":[15319,15464],"content":"Note: You may need to restart the Docker machine for the `docker build` command\nto work. You do that by executing the `docker restart` command:","leadings":["","> "],"nodes":[{"content":"Note: You may need to restart the Docker machine for the <ph id=\"ph1\">`docker build`</ph> command to work.","pos":[0,88],"source":"Note: You may need to restart the Docker machine for the `docker build` command\nto work."},{"content":"You do that by executing the <ph id=\"ph1\">`docker restart`</ph> command:","pos":[89,143],"source":" You do that by executing the `docker restart` command:"}]},{"pos":[15504,15608],"content":"The build command builds the image using your source, and the configuration settings in your Dockerfile.","source":"The build command builds the image using your source, and the configuration\nsettings in your\nDockerfile."},{"content":"And finally run the application in the docker container:","pos":[15610,15666]},{"content":"You can see if the image is running by checking the command:","pos":[15721,15781]},{"content":"If your container is running, you'll see a line that lists it in the running processes.","pos":[15802,15889],"source":"If your container is running, you'll see a line that lists\nit in the running processes."},{"content":"(It may be the only one).","pos":[15890,15915]},{"content":"To navigate to your service, find the IP address for the machine:","pos":[15917,15982]},{"pos":[16027,16137],"content":"Open a browser on the docker host and navigate to that site, and you should see your weather service running.","source":"Open a browser on the docker host and navigate to that site, and you should see your \nweather service running."},{"content":"Conclusion","pos":[16143,16153]},{"pos":[16156,16239],"content":"In this tutorial, you built an asp.net core microservice, and added a few features.","source":"In this tutorial, you built an asp.net core microservice, and added a few\nfeatures."},{"content":"You built a docker machine, created an image of your new application and ran that application in the docker vm.","pos":[16241,16352],"source":"You built a docker machine, created an image of your new application and\nran that application in the docker vm."},{"content":"Along the way, you saw several features of the C# language in action.","pos":[16353,16422],"source":"\nAlong the way, you saw several features of the C# language in action."}],"content":"---\ntitle: Microservices hosted in Docker\ndescription: Microservices hosted in Docker\nkeywords: .NET, .NET Core\nauthor: BillWagner\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 87e93838-a363-4813-b859-7356023d98ed\n---\n\n# Microservices hosted in Docker\n\n##Introduction\n\nThis tutorial details the tasks necessary to build and deploy\nan ASP.NET Core microservice in a Docker container. During the course\nof this tutorial, you'll learn:\n\n* How to generate an ASP.NET Core application using Yeoman\n* How to create a development Docker environment\n* How to build a Docker image based on an existing image.\n* How to deploy your service into a Docker container.\n\nAlong the way, you'll also see some C# language features:\n\n* How to convert C# objects into JSON payloads.\n* How to build immutable Data Transfer Objects\n* How to process incoming HTTP Requests and generate the HTTP Response\n* How to work with nullable value types\n\n### Why Docker?\n\nDocker makes it easy to create standard machine images to\nhost your services in a data center, or the public cloud. Docker\nenables you to configure the image, and replicate it as needed to\nscale the installation of your application.\n\nAll the code in this tutorial will work in any .NET Core environment.\nThe additional tasks for a Docker installation will work for an ASP.NET\nCore application. \n\n## Prerequisites\nYou’ll need to setup your machine to run .NET core. You can find the\ninstallation instructions on the [.NET Core](https://www.microsoft.com/net/core)\npage.\nYou can run this application on Windows, Ubuntu Linux, macOS or in a Docker container. \nYou’ll need to install your favorite code editor. The descriptions below\nuse [Visual Studio Code](https://code.visualstudio.com/) which is an open\nsource, cross platform editor. However, you can use whatever tools you are\ncomfortable with.\n\nYou'll also need to install the Docker engine. See the \n[Docker Installation page](https://docs.docker.com/engine/installation/) \nfor instructions.\nDocker can be installed in many Linux distributions, macOS, or Windows. The page\nreferenced above contains links to each of the available installations.\n\nYou'll also need to install a number of command line tools that support\nASP.NET core development. The command line templates use Yeoman, Bower,\nGrunt, and Gulp. You may already have many of these tools, but if not,\nrun the following command in your favorite shell:\n\n`npm install -g yo bower grunt-cli gulp`\n\nThis instructs the node package manager (npm) to install the needed tools.\nThe '-g' option indicates that it is a global install, and those tools are\navailable system wide. (A local install scopes the package to a single\nproject). Once you've installed those core tools, you need to install\nthe yeoman asp.net template generators:\n\n`npm install -g generator-aspnet`\n\n## Create the Application\n\nNow that you've installed all the tools, create a new asp.net core\napplication. To use the command line generator, execute the following\nyeoman command in your favorite shell:\n\n`yo aspnet`\n\nThis command prompts you to select what Type of application you want to\ncreate. For this microservice, you want the simplest, most lightweight\nweb application possible, so select 'Empty Web Application'. The template\nwill prompt you for a name. Select 'WeatherMicroservice'. \n\nThe template creates eight files for you:\n\n* A .gitignore, customized for asp.net core applications.\n* A Startup.cs file. This contains the basis of the application.\n* A Program.cs file. This contains the entry point of the application.\n* A project.json file. This is the build file for the application.\n* A Dockerfile. This script creates a Docker image for the application.\n* A README.md. This contains links to other asp.net core resources.\n* A web.config file. This contains basic configuration information.\n* A Properties/launchSettings.json file. This contains debugging settings used by IDEs.\n\nNow you can run the template generated application. That's done using a series\nof tools from the command line. The `dotnet` command runs the tools necessary\nfor .NET development. Each verb executes a different command\n\nThe first step is to restore all the dependencies:\n\n`dotnet restore`\n\nDotnet restore uses the NuGet package manager to install all the necessary packages\ninto the application directory. It also generates a project.json.lock file. This\nfile contains information about each package that is referenced. After restoring\nall the dependencies, you build the application:\n\n`dotnet build`\n\nAnd once you build the application, you run it from the command line:\n\n`dotnet run`\n\nThe default configuration listens to http://localhost:5000. You can open a\nbrowser and navigate to that page and see a \"Hello World!\" message.\n\n### Anatomy of an ASP.NET Core application\n\nNow that you've built the application, let's look at how this functionality\nis implemented. There are two of the generated files that are particularly\ninteresting at this point: project.json and Startup.cs. \n\nProject.json contains information about the project. The two nodes you'll\noften work with are 'dependencies' and 'frameworks'. The\ndependencies node lists all the packages that are needed for this application.\nAt the moment, this is a small node, needing only the packages that run the\nweb server.\n\nThe 'frameworks' node specifies the versions and configurations of the .NET\nframework that will run this application.\n\nThe application is implemented in Startup.cs. This file contains the startup\nclass.\n\nThe two methods are called by the asp.net core infrastructure to configure\nand run the application. The `ConfigureServices` method describes the services that are\nnecessary for this application. You're building a lean microservice, so it doesn't\nneed to configure any dependencies. The `Configure` method configures the handlers\nfor incoming HTTP Requests. The template generates a simple handler that responds\nto any request with the text 'Hello World!'.\n\n## Build a microservice\n\nThe service you're going to build will deliver weather reports from anywhere\naround the globe. In a production application, you'd call some service\nto retrieve weather data. For our sample, we'll generate a random weather\nforecast. \n\nThere are a number of tasks you'll need to perform in order to implement\nour random weather service:\n\n* Parse the incoming request to read the latitude and longitude.\n* Generate some random forecast data.\n* Convert that random forecast data from C# objects into JSON packets.\n* Set the response header to indicate that your service sends back JSON.\n* Write the response.\n\nThe next sections walk you through each of these steps.\n\n### Parsing the Query String.\n\nYou'll begin by parsing the query string. The service will accept \n'lat' and 'long' arguments on the query string in this form:\n\n`http://localhost:5000/?lat=-35.55&long=-12.35`  \n\nAll the changes you need to make are in the lambda expression\ndefined as the argument to `app.Run` in your startup class.\n\nThe argument on the lambda expression is the `HttpContext` for the\nrequest. One of its properties is the `Request` object. The `Request`\nobject has a `Query` property that contains a dictionary of all the\nvalues on the query string for the request. The first addition is to\nfind the latitude and longitude values:\n\n```cs\nvar latString = context.Request.Query[\"lat\"].FirstOrDefault();\nvar longString = context.Request.Query[\"long\"].FirstOrDefault();\n```\n\nThe Query dictionary values are `StringValue` type. That type can\ncontain a collection of strings. For your weather service, each\nvalue is a single string. That's why there's the call to `FirstOrDefault()`\nin the code above. \n\nNext, you need to convert the strings to doubles. The method you'll use\nto convert the string to a double is `double.TryParse()`:\n\n```cs\nbool TryParse(string s, out double result);\n```\n\nThis method leverages C# out parameters to indicate if the input string\ncan be converted to a double. If the string does represent a valid\nrepresentation for a double, the method returns true, and the `result`\nargument contains the value. If the string does not represent a valid\ndouble, the method returns false.\n\nYou can adapt that API with the use of an *extension method* that returns\na *nullable double*. A *nullable value type* is a type that represents\nsome value type, and can also hold a missing, or null value. A nullable\ntype is represented by appending the `?` character to the type declaration. \n\nExtension methods are methods that are defined as static methods, but\nby adding the `this` modifier on the first parameter, can be called as\nthough they are members of that class. Extension methods may only be\ndefined in static classes. Here's the definition of the class containing\nthe extension method for parse:\n\n```cs\npublic static class Extensions\n{\n    public static double? TryParse(this string input)\n    {\n        double result;\n        if (double.TryParse(input, out result))\n            return result;\n        else\n            return default(double?);\n    }\n}\n```  \n\nThe `default(double?)` expression returns the default value for the\n`double?` type. That default value is the null (or missing) value.\n\nYou can use this extension method to convert the query string arguments\ninto the double type:\n\n```cs\nvar latitude = latString.TryParse();\nvar longitude = longString.TryParse();\n```\n\nTo easily test the parsing code, update the response to include the values\nof the arguments:\n\n```cs\nawait context.Response.WriteAsync($\"Retrieving Weather for lat: {latitude}, long: {longitude}\");\n```\n\nAt this point, you can run the web application and see if your parsing\ncode is working. Add values to the web request in a browser, and you should see\nthe updated results.\n\n### Build a random weather forecast\n\nYour next task is to build a random weather forecast. Let's start with a data\ncontainer that holds the values you'd want for a weather forecast:\n\n```cs\npublic class WeatherReport\n{\n    private static readonly string[] PossibleConditions = new string[]\n    {\n        \"Sunny\",\n        \"Mostly Sunny\",\n        \"Partly Sunny\",\n        \"Partly Cloudy\",\n        \"Mostly Cloudy\",\n        \"Rain\"\n    };\n\n    public int HiTemperature { get; }\n    public int LoTemperature { get; }\n    public int AverageWindSpeed { get; }\n    public string Conditions { get; }\n}\n```\n\nNext, build a constructor that randomly sets those values:\n\n```cs\npublic WeatherReport(double latitude, double longitude, int daysInFuture)\n{\n    var generator = new Random((int)(latitude + longitude) + daysInFuture);\n\n    HiTemperature = generator.Next(40, 100);\n    LoTemperature = generator.Next(0, HiTemperature);\n    AverageWindSpeed = generator.Next(0, 45);\n    Conditions = PossibleConditions[generator.Next(0, PossibleConditions.Length - 1)];\n}\n```\n\nYou can now generate the 5-day forecast in your response method:\n\n```cs\nif (latitude.HasValue && longitude.HasValue)\n{\n    var forecast = new List<WeatherReport>();\n    for (var days = 1; days < 6; days++)\n    {\n        forecast.Add(new WeatherReport(latitude.Value, longitude.Value, days));\n    }\n}\n``` \n\n### Build the JSON response.\n\nThe final code task on the server is to convert the WeatherReport array\ninto a JSON packet, and send that back to the client. Let's start by creating\nthe JSON packet. You'll add the NewtonSoft JSON Serializer to the\nlist of dependencies:\n\n```\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.0\",\n      \"type\": \"platform\"\n    },\n    \"Microsoft.AspNetCore.Server.IISIntegration\": \"1.0.0\",\n    \"Microsoft.AspNetCore.Server.Kestrel\": \"1.0.0\",\n    \"Newtonsoft.Json\": \"8.0.4-beta1\",\n    \"Microsoft.NETCore.Portable.Compatibility\": \"1.0.0\"\n  },\n``` \n\nThen, you can use the `JsonConvert` class to write the object to a string:\n\n```cs\nvar json = JsonConvert.SerializeObject(forecast, Formatting.Indented);\ncontext.Response.ContentType = \"application/json; charset=utf-8\";\nawait context.Response.WriteAsync(json);\n```\n\nThe code above converts the forecast object (a list of `WeatherForecast`\nobjects) into a JSON packet. After you've constructed the response packet,\nyou set the content type to 'application/json', and write the string.\n\nThe application now runs and returns random forecasts.\n\n## Load into Docker\n\nThe Dockerfile created by the asp.net template will serve\nfor our purposes. Let's go over its contents.\n\nThe first line specifies the source image:\n\n```\nFROM microsoft/dotnet:onbuild\n```\n\nDocker allows you to configure a machine image based on a\nsource template. That means you don't have to supply all\nthe machine parameters when you start, you only need to\nsupply any changes. The changes here will be to include\nour application.\n\nIn this first sample, we'll use the `onbuild` version of\nthe RC2 image. This is the easiest way to create a working Docker\nenvironment. However, the image it creates is larger than necessary.\nThis image include the dotnet core runtime, and the dotnet SDK. \n\nThe next two lines load SQLite onto the machine:\n\n```\nRUN printf \"deb http://ftp.us.debian.org/debian jessie main\\n\" >> /etc/apt/sources.list\nRUN apt-get -qq update && apt-get install -qqy sqlite3 libsqlite3-dev && rm -rf /var/lib/apt/lists/*\n```\n\nWe're not using SQLite, but leave it in place for reference if you need it later.\n\nThe next three lines setup your application:\n\n```\nCOPY . /app\nWORKDIR /app\nRUN [\"dotnet\", \"restore\"]\n```\n\nThis will copy the contents of the current directory to the docker VM, and restore\nall the packages.\n\nThe final lines of the file set the output port (80) and run the application:\n\n```\nEXPOSE 80\nENTRYPOINT [\"dotnet\", \"run\"]\n```\n\nNotice that this Dockerfile uses the dotnet cli to build and run your docker image.\nThat's why the larger image is needed.\n\nHere are the steps to build the image and deploy it. The information below is \nfor the PowerShell CLI. Different shells will have slightly different syntax\nthat will be highlighted below.\n\nFirst, you have to create a new docker machine called 'weather-service':\n\n```\ndocker-machine create --driver virtualbox weather-service\n```\n\nThis command creates a new virtual machine in your Docker installation. You can see\nthe machine by typing the following command:\n\n```\ndocker-machine ls\n```\n\nTo connect to the machine, you need to retrieve its environment. That's done with\nthe env command in docker-machine:\n\n```\ndocker-machine env --shell powershell weather-service\n```\n\nSubstitute your shell of choice for 'powershell' in the command above. This command\nechoes back a command to configure your shell to communicate with the docker container.\nIn PowerShell it is as follows:\n\n```\n & \"C:\\Program Files\\Docker Toolbox\\docker-machine.exe\" env --shell powershell weather-service | Invoke-Expression\n```\n\nIf you are using a different shell, the output from the docker-machine command\nabove will show you what command to use in its place. Execute the command that was generated\nfor you. \n\n> Note: The `docker-machine` command will include the shell's comment character,\n> `#` in the case of powershell in the output for the command to run. Make sure\n> you remove this character when you execute the command.\n\nFinally, build the docker image from your application:\n\n```\ndocker build -t weather-service .\n```\n\n> Note: You may need to restart the Docker machine for the `docker build` command\n> to work. You do that by executing the `docker restart` command:\n> \n> `docker restart weather-service`\n\nThe build command builds the image using your source, and the configuration\nsettings in your\nDockerfile.\n\nAnd finally run the application in the docker container:\n\n```\ndocker run -t -d -p 80:5000 weather-service\n```\n\nYou can see if the image is running by checking the command:\n\n```\ndocker ps\n```\n\nIf your container is running, you'll see a line that lists\nit in the running processes. (It may be the only one).\n\nTo navigate to your service, find the IP address for the machine:\n\n```\ndocker-machine ip weather-service\n```\n\nOpen a browser on the docker host and navigate to that site, and you should see your \nweather service running. \n\n## Conclusion \n\nIn this tutorial, you built an asp.net core microservice, and added a few\nfeatures.\n\nYou built a docker machine, created an image of your new application and\nran that application in the docker vm.\nAlong the way, you saw several features of the C# language in action.\n"}