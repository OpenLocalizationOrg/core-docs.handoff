{"nodes":[{"pos":[11,52],"content":"Hashtable and Dictionary Collection Types","needQuote":true,"nodes":[{"content":"Hashtable and Dictionary Collection Types","pos":[0,41]}]},{"pos":[66,107],"content":"Hashtable and Dictionary Collection Types","needQuote":true,"nodes":[{"content":"Hashtable and Dictionary Collection Types","pos":[0,41]}]},{"pos":[118,133],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Hashtable and Dictionary Collection Types","pos":[337,378]},{"content":"The <bpt id=\"p1\">[</bpt>System.Collections.Hashtable<ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> class, and the <bpt id=\"p2\">[</bpt>System.Collections.Generic.Dictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> and <bpt id=\"p3\">[</bpt>System.Collections.Concurrent.ConcurrentDictionary<ph id=\"ph3\">&lt;T&gt;</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept> generic classes implement the <bpt id=\"p4\">[</bpt>System.Collections.IDictionary<ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> interface.","pos":[380,952],"source":"The [System.Collections.Hashtable](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) class, and the [System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) and [System.Collections.Concurrent.ConcurrentDictionary<T>](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2) generic classes implement the [System.Collections.IDictionary](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary) interface."},{"content":"The <ph id=\"ph1\">`Dictionary&lt;T&gt;`</ph> generic class also implements the <bpt id=\"p1\">[</bpt>IDictionary<ph id=\"ph2\">&amp;lt;</ph>TKey, TValue<ph id=\"ph3\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)</ept> generic interface.","pos":[953,1144],"source":" The `Dictionary<T>` generic class also implements the [IDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2) generic interface."},{"content":"Therefore, each element in these collections is a key-and-value pair.","pos":[1145,1214]},{"content":"A <ph id=\"ph1\">`Hashtable`</ph> object consists of buckets that contain the elements of the collection.","pos":[1216,1301],"source":"A `Hashtable` object consists of buckets that contain the elements of the collection."},{"content":"A bucket is a virtual subgroup of elements within the <ph id=\"ph1\">`Hashtable`</ph>, which makes searching and retrieving easier and faster than in most collections.","pos":[1302,1449],"source":" A bucket is a virtual subgroup of elements within the `Hashtable`, which makes searching and retrieving easier and faster than in most collections."},{"content":"Each bucket is associated with a hash code, which is generated using a hash function and is based on the key of the element.","pos":[1450,1574]},{"pos":[1576,1752],"content":"The generic <bpt id=\"p1\">[</bpt>HashSet<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.HashSet-1)</ept> class is an unordered collection for containing unique elements.","source":"The generic [HashSet&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.HashSet-1) class is an unordered collection for containing unique elements."},{"content":"A hash function is an algorithm that returns a numeric hash code based on a key.","pos":[1755,1835]},{"content":"The key is the value of some property of the object being stored.","pos":[1836,1901]},{"content":"A hash function must always return the same hash code for the same key.","pos":[1902,1973]},{"content":"It is possible for a hash function to generate the same hash code for two different keys, but a hash function that generates a unique hash code for each unique key results in better performance when retrieving elements from the hash table.","pos":[1974,2213]},{"pos":[2215,2374],"content":"Each object that is used as an element in a <ph id=\"ph1\">`Hashtable`</ph> must be able to generate a hash code for itself by using an implementation of the <ph id=\"ph2\">`GetHashCode`</ph> method.","source":"Each object that is used as an element in a `Hashtable` must be able to generate a hash code for itself by using an implementation of the `GetHashCode` method."},{"content":"When an object is added to a <ph id=\"ph1\">`Hashtable`</ph>, it is stored in the bucket that is associated with the hash code that matches the object's hash code.","pos":[2377,2520],"source":"When an object is added to a `Hashtable`, it is stored in the bucket that is associated with the hash code that matches the object's hash code."},{"content":"When a value is being searched for in the <ph id=\"ph1\">`Hashtable`</ph>, the hash code is generated for that value, and the bucket associated with that hash code is searched.","pos":[2521,2677],"source":" When a value is being searched for in the `Hashtable`, the hash code is generated for that value, and the bucket associated with that hash code is searched."},{"content":"For example, a hash function for a string might take the ASCII codes of each character in the string and add them together to generate a hash code.","pos":[2679,2826]},{"content":"The string \"picnic\" would have a hash code that is different from the hash code for the string \"basket\"; therefore, the strings \"picnic\" and \"basket\" would be in different buckets.","pos":[2827,3007]},{"content":"In contrast, \"stressed\" and \"desserts\" would have the same hash code and would be in the same bucket.","pos":[3008,3109]},{"content":"The <ph id=\"ph1\">`Dictionary&lt;T&gt;`</ph> and <ph id=\"ph2\">`ConcurrentDictionary&lt;T&gt;`</ph> classes have the same functionality as the <ph id=\"ph3\">`Hashtable`</ph> class.","pos":[3111,3222],"source":"The `Dictionary<T>` and `ConcurrentDictionary<T>` classes have the same functionality as the `Hashtable` class."},{"content":"A <ph id=\"ph1\">`Dictionary&lt;T&gt;`</ph> of a specific type (other than <ph id=\"ph2\">`Object`</ph>) provides better performance than a <ph id=\"ph3\">`Hashtable`</ph> for value types.","pos":[3223,3345],"source":" A `Dictionary<T>` of a specific type (other than `Object`) provides better performance than a `Hashtable` for value types."},{"content":"This is because the elements of <ph id=\"ph1\">`Hashtable`</ph> are of type <ph id=\"ph2\">`Object`</ph>; therefore, boxing and unboxing typically occur when you store or retrieve a value type.","pos":[3346,3499],"source":" This is because the elements of `Hashtable` are of type `Object`; therefore, boxing and unboxing typically occur when you store or retrieve a value type."},{"content":"The <ph id=\"ph1\">`ConcurrentDictionary&lt;T&gt;`</ph> class should be used when multiple threads might be accessing the collection simultaneously.","pos":[3500,3622],"source":" The `ConcurrentDictionary<T>` class should be used when multiple threads might be accessing the collection simultaneously."},{"content":"See Also","pos":[3627,3635]},{"content":"Hashtable","pos":[3638,3647]},{"content":"IDictionary","pos":[3724,3735]},{"content":"Dictionary","pos":[3814,3824]},{"content":"System.Collections.Generic.IDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue","pos":[3912,3966],"source":"System.Collections.Generic.IDictionary&lt;TKey, TValue"},{"content":"System.Collections.Concurrent.ConcurrentDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue","pos":[4059,4125],"source":"System.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue"},{"content":"Commonly Used Collection Types","pos":[4230,4260]}],"content":"---\ntitle: Hashtable and Dictionary Collection Types\ndescription: Hashtable and Dictionary Collection Types\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 0f18fac7-fd0d-4f25-a046-1d3d51de062e\n---\n\n# Hashtable and Dictionary Collection Types\n\nThe [System.Collections.Hashtable](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) class, and the [System.Collections.Generic.Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) and [System.Collections.Concurrent.ConcurrentDictionary<T>](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2) generic classes implement the [System.Collections.IDictionary](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary) interface. The `Dictionary<T>` generic class also implements the [IDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2) generic interface. Therefore, each element in these collections is a key-and-value pair.\n\nA `Hashtable` object consists of buckets that contain the elements of the collection. A bucket is a virtual subgroup of elements within the `Hashtable`, which makes searching and retrieving easier and faster than in most collections. Each bucket is associated with a hash code, which is generated using a hash function and is based on the key of the element.\n\nThe generic [HashSet&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.HashSet-1) class is an unordered collection for containing unique elements. \n\nA hash function is an algorithm that returns a numeric hash code based on a key. The key is the value of some property of the object being stored. A hash function must always return the same hash code for the same key. It is possible for a hash function to generate the same hash code for two different keys, but a hash function that generates a unique hash code for each unique key results in better performance when retrieving elements from the hash table.\n\nEach object that is used as an element in a `Hashtable` must be able to generate a hash code for itself by using an implementation of the `GetHashCode` method. \n\nWhen an object is added to a `Hashtable`, it is stored in the bucket that is associated with the hash code that matches the object's hash code. When a value is being searched for in the `Hashtable`, the hash code is generated for that value, and the bucket associated with that hash code is searched.\n\nFor example, a hash function for a string might take the ASCII codes of each character in the string and add them together to generate a hash code. The string \"picnic\" would have a hash code that is different from the hash code for the string \"basket\"; therefore, the strings \"picnic\" and \"basket\" would be in different buckets. In contrast, \"stressed\" and \"desserts\" would have the same hash code and would be in the same bucket.\n\nThe `Dictionary<T>` and `ConcurrentDictionary<T>` classes have the same functionality as the `Hashtable` class. A `Dictionary<T>` of a specific type (other than `Object`) provides better performance than a `Hashtable` for value types. This is because the elements of `Hashtable` are of type `Object`; therefore, boxing and unboxing typically occur when you store or retrieve a value type. The `ConcurrentDictionary<T>` class should be used when multiple threads might be accessing the collection simultaneously.\n\n## See Also\n\n[Hashtable](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)\n\n[IDictionary](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)\n\n[Dictionary](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)\n\n[System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)\n\n[System.Collections.Concurrent.ConcurrentDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)\n\n[Commonly Used Collection Types](commonly-used-collection-types.md)\n\n"}