{"nodes":[{"pos":[11,21],"content":"Properties","needQuote":true,"nodes":[{"content":"Properties","pos":[0,10]}]},{"pos":[35,45],"content":"Properties","needQuote":true,"nodes":[{"content":"Properties","pos":[0,10]}]},{"pos":[56,71],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Properties","pos":[279,289]},{"content":"Properties are first class citizens in C#.","pos":[291,333]},{"content":"The language defines syntax that enables developers to write code that accurately expresses their design intent.","pos":[334,446],"source":" The language\ndefines syntax that enables developers to write code\nthat accurately expresses their design intent."},{"content":"Properties behave like fields when they are accessed.","pos":[448,501]},{"content":"However, unlike fields, properties are implemented with accessors that define the statements executed when a property is accessed or assigned.","pos":[502,644],"source":"\nHowever, unlike fields, properties are implemented\nwith accessors that define the statements executed\nwhen a property is accessed or assigned."},{"content":"Property Syntax","pos":[649,664]},{"content":"The syntax for properties is a natural extension to fields.","pos":[665,724],"source":"The syntax for properties is a natural extension to\nfields."},{"content":"A field defines a storage location:","pos":[725,760]},{"pos":[879,1008],"content":"A property definition contains declarations for a <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessor that retrieves and assigns the value of that property:","source":"A property definition contains declarations for a `get` and\n`set` accessor that retrieves and assigns the value of that\nproperty:"},{"content":"The syntax shown above is the <bpt id=\"p1\">*</bpt>auto property<ept id=\"p1\">*</ept> syntax.","pos":[1164,1217],"source":"The syntax shown above is the *auto property* syntax."},{"content":"The compiler generates the storage location for the field that backs up the property.","pos":[1218,1304],"source":" The compiler\ngenerates the storage location for the field that backs up the \nproperty."},{"content":"The compiler also implements the body of the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors.","pos":[1305,1376],"source":" The compiler also implements the body of the `get` and `set` accessors."},{"content":"You can also define the storage yourself, as shown below:","pos":[1377,1434],"source":"\nYou can also define the storage yourself, as shown below:"},{"content":"The property definition shown above is a read-write property.","pos":[1664,1725]},{"content":"Notice the keyword <ph id=\"ph1\">`value`</ph> in the set accessor.","pos":[1726,1773],"source":" Notice\nthe keyword `value` in the set accessor."},{"content":"The <ph id=\"ph1\">`set`</ph> accessor always has a single parameter named <ph id=\"ph2\">`value`</ph>.","pos":[1774,1837],"source":" The `set` accessor always has\na single parameter named `value`."},{"content":"The <ph id=\"ph1\">`get`</ph> accessor must return a value that is convertible to the type of the property (<ph id=\"ph2\">`string`</ph> in this example).","pos":[1838,1952],"source":" The `get` accessor must return a value\nthat is convertible to the type of the property (`string` in this example)."},{"content":"That's the basics of the syntax.","pos":[1955,1987]},{"content":"There are many different variations that support a variety of different design idioms.","pos":[1988,2074],"source":" There are many different variations that support\na variety of different design idioms."},{"content":"Let's explore those, and learn the syntax options for each.","pos":[2075,2134],"source":" Let's explore those, and learn the syntax\noptions for each."},{"content":"Scenarios","pos":[2140,2149]},{"content":"The examples above showed one of the simplest cases of property definition: a read-write property with no validation.","pos":[2151,2268],"source":"The examples above showed one of the simplest cases of property definition:\na read-write property with no validation."},{"content":"By writing the code you want in the <ph id=\"ph1\">`get`</ph> and <ph id=\"ph2\">`set`</ph> accessors, you can create many different scenarios.","pos":[2269,2372],"source":" By writing the code you want in the\n`get` and `set` accessors, you can create many different scenarios."},{"content":"Validation","pos":[2380,2390]},{"content":"You can write code in the <ph id=\"ph1\">`set`</ph> accessor to ensure that the values represented by a property are always valid.","pos":[2392,2502],"source":"You can write code in the `set` accessor to ensure that the values represented\nby a property are always valid."},{"content":"For example, suppose one rule for the <ph id=\"ph1\">`Person`</ph> class is that the name cannot be blank, or whitespace.","pos":[2503,2604],"source":" For example, suppose one rule for the `Person`\nclass is that the name cannot be blank, or whitespace."},{"content":"You would write that as follows:","pos":[2605,2637],"source":" You would write that as\nfollows:"},{"content":"The example above enforces the rule that the first name must not be blank, or whitespace.","pos":[3021,3110],"source":"The example above enforces the rule that the first name must not be blank,\nor whitespace."},{"content":"If a developer writes","pos":[3111,3132]},{"content":"That assignment throws an <ph id=\"ph1\">`ArgumentException`</ph>.","pos":[3164,3210],"source":"That assignment throws an `ArgumentException`."},{"content":"Because a property set accessor must have a void return type, you report errors in the set accessor by throwing an exception.","pos":[3211,3336],"source":" Because a property set accessor\nmust have a void return type, you report errors in the set accessor by throwing an exception."},{"content":"That is a simple case of validation.","pos":[3338,3374]},{"content":"You can extend this same syntax to anything needed in your scenario.","pos":[3375,3443],"source":" You can extend this same syntax to anything needed\nin your scenario."},{"content":"You can check the relationships between different properties, or validate against any external conditions.","pos":[3444,3550],"source":" You can check the relationships between different properties, or validate\nagainst any external conditions."},{"content":"Any valid C# statements are valid in a property accessor.","pos":[3551,3608]},{"content":"Read-only","pos":[3614,3623]},{"content":"Up to this point, all the property definitions you have seen are read/write properties with public accessors.","pos":[3625,3734],"source":"Up to this point, all the property definitions you have seen are read/write properties\nwith public accessors."},{"content":"That's not the only valid accessibility for properties.","pos":[3735,3790]},{"content":"You can create read-only properties, or give different accessibility to the set and get accessors.","pos":[3791,3889],"source":"\nYou can create read-only properties, or give different accessibility to the set and get\naccessors."},{"content":"Suppose that your <ph id=\"ph1\">`Person`</ph> class should only enable changing the value of the <ph id=\"ph2\">`FirstName`</ph> property from other methods in that class.","pos":[3890,4022],"source":" Suppose that your `Person` class should only enable changing the value of the\n`FirstName` property from other methods in that class."},{"content":"You could give the set accessor <ph id=\"ph1\">`private`</ph> accessibility instead of <ph id=\"ph2\">`public`</ph>:","pos":[4023,4099],"source":" You could give the set accessor\n`private` accessibility instead of `public`:"},{"content":"Now, the <ph id=\"ph1\">`FirstName`</ph> property can be accessed from any code, but it can only be assigned from other code in the <ph id=\"ph2\">`Person`</ph> class.","pos":[4263,4390],"source":"Now, the `FirstName` property can be accessed from any code, but it can only be assigned\nfrom other code in the `Person` class."},{"content":"You can add any restrictive access modifier to either the set or get accessors.","pos":[4391,4470],"source":"\nYou can add any restrictive access modifier to either the set or get accessors."},{"content":"Any access modifier you place on the individual accessor must be more limited than the access modifier on the property definition.","pos":[4471,4601],"source":" Any access modifier\nyou place on the individual accessor must be more limited than the access modifier on the property\ndefinition."},{"content":"The above is legal because the <ph id=\"ph1\">`FirstName`</ph> property is <ph id=\"ph2\">`public`</ph>, but the set accessor is <ph id=\"ph3\">`private`</ph>.","pos":[4602,4701],"source":" The above is legal because the `FirstName` property is `public`, but the set accessor is\n`private`."},{"content":"You could not declare a <ph id=\"ph1\">`private`</ph> property with a <ph id=\"ph2\">`public`</ph> accessor.","pos":[4702,4770],"source":" You could not declare a `private` property with a `public` accessor."},{"content":"Property declarations can also be declared <ph id=\"ph1\">`protected`</ph>, <ph id=\"ph2\">`internal`</ph>, <ph id=\"ph3\">`protected internal`</ph> or even <ph id=\"ph4\">`private`</ph>.","pos":[4771,4878],"source":" Property declarations\ncan also be declared `protected`, `internal`, `protected internal` or even `private`."},{"content":"It is also legal to place the more restrictive modifier on the <ph id=\"ph1\">`get`</ph> accessor.","pos":[4883,4961],"source":"It is also legal to place the more restrictive modifier on the `get` accessor."},{"content":"For example, you could have a <ph id=\"ph1\">`public`</ph> property, but restrict the <ph id=\"ph2\">`get`</ph> accessor to <ph id=\"ph3\">`private`</ph>.","pos":[4962,5056],"source":" For example, you could\nhave a `public` property, but restrict the `get` accessor to `private`."},{"content":"That scenario is rarely done in practice.","pos":[5057,5098],"source":" That scenario is rarely done\nin practice."},{"content":"Computed Properties","pos":[5105,5124]},{"content":"A property does not need to simply return the value of a member field.","pos":[5126,5196]},{"content":"You can create properties that return a computed value.","pos":[5197,5252],"source":" You can create properties\nthat return a computed value."},{"content":"Let's expand the <ph id=\"ph1\">`Person`</ph> object to return the full name, computed by concatenating the first and last names:","pos":[5253,5362],"source":" Let's expand the `Person` object to return the full name, computed\nby concatenating the first and last names:"},{"pos":[5649,5755],"content":"The example above uses the <bpt id=\"p1\">*</bpt>String Interpolation<ept id=\"p1\">*</ept> syntax to create the formatted string for the full name.","source":"The example above uses the *String Interpolation* syntax to create\nthe formatted string for the full name."},{"pos":[5757,5881],"content":"You can also use <bpt id=\"p1\">*</bpt>Expression Bodied Members<ept id=\"p1\">*</ept>, which provides a more succinct way to create the computed <ph id=\"ph1\">`FullName`</ph> property:","source":"You can also use *Expression Bodied Members*, which provides a more\nsuccinct way to create the computed `FullName` property:"},{"content":"<bpt id=\"p1\">*</bpt>Expression Bodied Members<ept id=\"p1\">*</ept> use the <bpt id=\"p2\">*</bpt>lambda expression<ept id=\"p2\">*</ept> syntax to define a method that contain a single expression.","pos":[6110,6225],"source":"*Expression Bodied Members* use the *lambda expression* syntax to\ndefine a method that contain a single expression."},{"content":"Here, that expression returns the full name for the person object.","pos":[6226,6292],"source":" Here, that\nexpression returns the full name for the person object."},{"content":"Lazy Evaluated Properties","pos":[6298,6323]},{"content":"You can mix the concept of a computed property with storage and create a <bpt id=\"p1\">*</bpt>lazy evaluated property<ept id=\"p1\">*</ept>.","pos":[6325,6424],"source":"You can mix the concept of a computed property with storage and create\na *lazy evaluated property*."},{"content":"For example, you could update the <ph id=\"ph1\">`FullName`</ph> property so that the string formatting only happened the first time it was accessed:","pos":[6426,6555],"source":"  For example, you could update the `FullName`\nproperty so that the string formatting only happened the first time it\nwas accessed:"},{"content":"The above code contains a bug though.","pos":[6942,6979]},{"content":"If code updates the value of either the <ph id=\"ph1\">`FirstName`</ph> or <ph id=\"ph2\">`LastName`</ph> property, the previously evaluated <ph id=\"ph3\">`fullName`</ph> field is invalid.","pos":[6980,7109],"source":" If code updates the value of\neither the `FirstName` or `LastName` property, the previously evaluated\n`fullName` field is invalid."},{"content":"You need to update the <ph id=\"ph1\">`set`</ph> accessors of the <ph id=\"ph2\">`FirstName`</ph> and <ph id=\"ph3\">`LastName`</ph> property so that the <ph id=\"ph4\">`fullName`</ph> field is calculated again:","pos":[7110,7241],"source":" You need to update the `set` accessors of the\n`FirstName` and `LastName` property so that the `fullName` field is calculated\nagain:"},{"content":"This final version evaluates the <ph id=\"ph1\">`FullName`</ph> property only when needed.","pos":[7885,7955],"source":"This final version evaluates the `FullName` property only when needed."},{"content":"If the previously calculated version is valid, it's used.","pos":[7956,8013],"source":"\nIf the previously calculated version is valid, it's used."},{"content":"If another state change invalidates the previously calculated version, it will be recalculated.","pos":[8014,8109],"source":" If another\nstate change invalidates the previously calculated version, it will be\nrecalculated."},{"content":"Developers that use this class do not need to know the details of the implementation.","pos":[8110,8195],"source":" Developers that use this class do not need to know the\ndetails of the implementation."},{"content":"None of these internal changes affect the use of the Person object.","pos":[8196,8263],"source":" None of these internal changes affect the\nuse of the Person object."},{"content":"That's the key reason for using Properties to expose data members of an object.","pos":[8264,8343],"source":" That's the key reason for using Properties to\nexpose data members of an object."},{"content":"INotifyPropertyChanged","pos":[8351,8373]},{"content":"A final scenario where you need to write code in a property accessor is to support the <ph id=\"ph1\">`INotifyPropertyChanged`</ph> interface used to notify data binding clients that a value has changed.","pos":[8375,8558],"source":"A final scenario where you need to write code in a property accessor is to\nsupport the `INotifyPropertyChanged` interface used to notify data binding\nclients that a value has changed."},{"content":"When the value of a property changes, the object raises the <ph id=\"ph1\">`PropertyChanged`</ph> event to indicate the change.","pos":[8559,8666],"source":" When the value of a property changes, the object\nraises the `PropertyChanged` event\nto indicate the change."},{"content":"The data binding libraries, in turn, update display elements based on that change.","pos":[8667,8749],"source":" The data binding libraries, in turn, update display elements\nbased on that change."},{"content":"The code below shows how you would implement <ph id=\"ph1\">`INotifyPropertyChanged`</ph> for the <ph id=\"ph2\">`FirstName`</ph> property of this person class.","pos":[8750,8870],"source":" The code below shows how you would implement `INotifyPropertyChanged`\nfor the `FirstName` property of this person class."},{"content":"The <ph id=\"ph1\">`?.`</ph> operator is called the <bpt id=\"p1\">*</bpt>null conditional operator<ept id=\"p1\">*</ept>.","pos":[9523,9583],"source":"The `?.` operator is called\nthe *null conditional operator*."},{"content":"It checks for a null reference before evaluating the right side of the operator.","pos":[9584,9664],"source":" It checks for a null reference before evaluating\nthe right side of the operator."},{"content":"The end result is that if there are no subscribers to the <ph id=\"ph1\">`PropertyChanged`</ph> event, the code to raise the event doesn't execute.","pos":[9665,9792],"source":" The end result is that if there are no subscribers\nto the `PropertyChanged` event, the code to raise the event doesn't execute."},{"content":"It would throw a <ph id=\"ph1\">`NullReferenceException`</ph> without this check in that case.","pos":[9793,9867],"source":" It would\nthrow a `NullReferenceException` without this check in that case."},{"content":"See the page on <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`events`</ph><ept id=\"p1\">](delegates-events.md)</ept> for more details.","pos":[9868,9933],"source":" See the page on\n[`events`](delegates-events.md) for more details."},{"content":"This example also uses the new <ph id=\"ph1\">`nameof`</ph> operator to convert from the property name symbol to its text representation.","pos":[9934,10051],"source":" This example also uses the new\n`nameof` operator to convert from the property name symbol to its text representation."},{"content":"Using <ph id=\"ph1\">`nameof`</ph> can reduce errors where you have mistyped the name of the property.","pos":[10052,10134],"source":"\nUsing `nameof` can reduce errors where you have mistyped the name of the property."},{"pos":[10136,10249],"content":"Again, this is an example of a case where you can write code in your accessors to support the scenarios you need.","source":"Again, this is an example of a case where you can write code in your accessors to\nsupport the scenarios you need."},{"content":"Summing up","pos":[10254,10264]},{"content":"Properties are a form of smart fields in a class or object.","pos":[10267,10326]},{"content":"From outside the object, they appear like fields in the object.","pos":[10327,10390],"source":" From\noutside the object, they appear like fields in the object."},{"content":"However, properties can be implemented using the full palette of C# functionality.","pos":[10391,10473],"source":" However,\nproperties can be implemented using the full palette of C# functionality."},{"content":"You can provide validation, different accessibility, lazy evaluation, or any requirements your scenarios need.","pos":[10474,10584],"source":"\nYou can provide validation, different accessibility, lazy evaluation,\nor any requirements your scenarios need."}],"content":"---\ntitle: Properties\ndescription: Properties\nkeywords: .NET, .NET Core\nauthor: BillWagner\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 6950d25a-bba1-4744-b7c7-a3cc90438c55\n---\n\n# Properties\n\nProperties are first class citizens in C#. The language\ndefines syntax that enables developers to write code\nthat accurately expresses their design intent.\n\nProperties behave like fields when they are accessed.\nHowever, unlike fields, properties are implemented\nwith accessors that define the statements executed\nwhen a property is accessed or assigned.\n\n## Property Syntax\nThe syntax for properties is a natural extension to\nfields. A field defines a storage location:\n\n```cs\npublic class Person\n{\n    public string FirstName;\n    // remaining implementation removed from listing\n}\n```\n\nA property definition contains declarations for a `get` and\n`set` accessor that retrieves and assigns the value of that\nproperty:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get;\n        set;\n    }\n    // remaining implementation removed from listing\n}\n```\n\nThe syntax shown above is the *auto property* syntax. The compiler\ngenerates the storage location for the field that backs up the \nproperty. The compiler also implements the body of the `get` and `set` accessors.\nYou can also define the storage yourself, as shown below:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get { return firstName; }\n        set { firstName = value; }\n    }\n    private string firstName;\n    // remaining implementation removed from listing\n}\n```\n \nThe property definition shown above is a read-write property. Notice\nthe keyword `value` in the set accessor. The `set` accessor always has\na single parameter named `value`. The `get` accessor must return a value\nthat is convertible to the type of the property (`string` in this example).\n \nThat's the basics of the syntax. There are many different variations that support\na variety of different design idioms. Let's explore those, and learn the syntax\noptions for each. \n\n## Scenarios\n\nThe examples above showed one of the simplest cases of property definition:\na read-write property with no validation. By writing the code you want in the\n`get` and `set` accessors, you can create many different scenarios.  \n\n### Validation\n\nYou can write code in the `set` accessor to ensure that the values represented\nby a property are always valid. For example, suppose one rule for the `Person`\nclass is that the name cannot be blank, or whitespace. You would write that as\nfollows:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get { return firstName; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"First name must not be blank\");\n            firstName = value;\n        }\n    }\n    private string firstName;\n    // remaining implementation removed from listing\n}\n```\n\nThe example above enforces the rule that the first name must not be blank,\nor whitespace. If a developer writes\n```cs\nhero.FirstName = \"\";\n```\nThat assignment throws an `ArgumentException`. Because a property set accessor\nmust have a void return type, you report errors in the set accessor by throwing an exception.\n\nThat is a simple case of validation. You can extend this same syntax to anything needed\nin your scenario. You can check the relationships between different properties, or validate\nagainst any external conditions. Any valid C# statements are valid in a property accessor.\n\n### Read-only\n\nUp to this point, all the property definitions you have seen are read/write properties\nwith public accessors. That's not the only valid accessibility for properties.\nYou can create read-only properties, or give different accessibility to the set and get\naccessors. Suppose that your `Person` class should only enable changing the value of the\n`FirstName` property from other methods in that class. You could give the set accessor\n`private` accessibility instead of `public`:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get;\n        private set;\n    }\n    // remaining implementation removed from listing\n}\n```\n\nNow, the `FirstName` property can be accessed from any code, but it can only be assigned\nfrom other code in the `Person` class.\nYou can add any restrictive access modifier to either the set or get accessors. Any access modifier\nyou place on the individual accessor must be more limited than the access modifier on the property\ndefinition. The above is legal because the `FirstName` property is `public`, but the set accessor is\n`private`. You could not declare a `private` property with a `public` accessor. Property declarations\ncan also be declared `protected`, `internal`, `protected internal` or even `private`.   \n\nIt is also legal to place the more restrictive modifier on the `get` accessor. For example, you could\nhave a `public` property, but restrict the `get` accessor to `private`. That scenario is rarely done\nin practice.\n \n### Computed Properties\n\nA property does not need to simply return the value of a member field. You can create properties\nthat return a computed value. Let's expand the `Person` object to return the full name, computed\nby concatenating the first and last names:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get;\n        set;\n    }\n\n    public string LastName\n    {\n        get;\n        set;\n    }\n\n    public string FullName\n    {\n        get\n        {\n            return $\"{FirstName} {LastName}\";\n        }\n    }\n}\n```\n\nThe example above uses the *String Interpolation* syntax to create\nthe formatted string for the full name.\n\nYou can also use *Expression Bodied Members*, which provides a more\nsuccinct way to create the computed `FullName` property:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get;\n        set;\n    }\n\n    public string LastName\n    {\n        get;\n        set;\n    }\n\n    public string FullName =>  $\"{FirstName} {LastName}\";\n}\n```\n \n*Expression Bodied Members* use the *lambda expression* syntax to\ndefine a method that contain a single expression. Here, that\nexpression returns the full name for the person object.\n\n### Lazy Evaluated Properties\n\nYou can mix the concept of a computed property with storage and create\na *lazy evaluated property*.  For example, you could update the `FullName`\nproperty so that the string formatting only happened the first time it\nwas accessed:\n\n```cs\npublic class Person\n{\n    public string FirstName\n    {\n        get;\n        set;\n    }\n\n    public string LastName\n    {\n        get;\n        set;\n    }\n\n    private string fullName;\n    public string FullName\n    {\n        get\n        {\n            if (fullName == null)\n                fullName = $\"{FirstName} {LastName}\";\n            return fullName;\n        }\n    }\n}\n```\n\nThe above code contains a bug though. If code updates the value of\neither the `FirstName` or `LastName` property, the previously evaluated\n`fullName` field is invalid. You need to update the `set` accessors of the\n`FirstName` and `LastName` property so that the `fullName` field is calculated\nagain:\n\n```cs\npublic class Person\n{\n    private string firstName;\n    public string FirstName\n    {\n        get { return firstName; }\n        set\n        {\n            firstName = value;\n            fullName = null;\n        }\n    }\n\n    private string lastName;\n    public string LastName\n    {\n        get { return lastName; }\n        set\n        {\n            lastName = value;\n            fullName = null;\n        }\n    }\n\n    private string fullName;\n    public string FullName\n    {\n        get\n        {\n            if (fullName == null)\n                fullName = $\"{FirstName} {LastName}\";\n            return fullName;\n        }\n    }\n}\n```\n\nThis final version evaluates the `FullName` property only when needed.\nIf the previously calculated version is valid, it's used. If another\nstate change invalidates the previously calculated version, it will be\nrecalculated. Developers that use this class do not need to know the\ndetails of the implementation. None of these internal changes affect the\nuse of the Person object. That's the key reason for using Properties to\nexpose data members of an object. \n \n### INotifyPropertyChanged\n\nA final scenario where you need to write code in a property accessor is to\nsupport the `INotifyPropertyChanged` interface used to notify data binding\nclients that a value has changed. When the value of a property changes, the object\nraises the `PropertyChanged` event\nto indicate the change. The data binding libraries, in turn, update display elements\nbased on that change. The code below shows how you would implement `INotifyPropertyChanged`\nfor the `FirstName` property of this person class.\n\n```cs\npublic class Person : INotifyPropertyChanged\n{\n    public string FirstName\n    {\n        get { return firstName; }\n        set\n        {\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"First name must not be blank\");\n            if (value != firstName)\n            {\n                PropertyChanged?.Invoke(this, \n                    new PropertyChangedEventArgs(nameof(FirstName)));\n            }\n            firstName = value;\n        }\n    }\n    private string firstName;\n\n    public event PropertyChangedEventHandler PropertyChanged;\n    // remaining implementation removed from listing\n}\n```\n\nThe `?.` operator is called\nthe *null conditional operator*. It checks for a null reference before evaluating\nthe right side of the operator. The end result is that if there are no subscribers\nto the `PropertyChanged` event, the code to raise the event doesn't execute. It would\nthrow a `NullReferenceException` without this check in that case. See the page on\n[`events`](delegates-events.md) for more details. This example also uses the new\n`nameof` operator to convert from the property name symbol to its text representation.\nUsing `nameof` can reduce errors where you have mistyped the name of the property.\n\nAgain, this is an example of a case where you can write code in your accessors to\nsupport the scenarios you need.\n\n## Summing up \n\nProperties are a form of smart fields in a class or object. From\noutside the object, they appear like fields in the object. However,\nproperties can be implemented using the full palette of C# functionality.\nYou can provide validation, different accessibility, lazy evaluation,\nor any requirements your scenarios need.\n"}