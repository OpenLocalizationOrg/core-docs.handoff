{"nodes":[{"pos":[11,22],"content":"dotnet-pack","needQuote":true,"nodes":[{"content":"dotnet-pack","pos":[0,11]}]},{"pos":[36,47],"content":"dotnet-pack","needQuote":true,"nodes":[{"content":"dotnet-pack","pos":[0,11]}]},{"pos":[58,73],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"dotnet-pack","pos":[275,286]},{"content":"NAME","pos":[303,307]},{"pos":[323,360],"content":"- Packs the code into a NuGet package"},{"content":"SYNOPSIS","pos":[365,373]},{"content":"DESCRIPTION","pos":[505,516]},{"content":"The <ph id=\"ph1\">`dotnet pack`</ph> command builds the project and creates NuGet packages.","pos":[518,590],"source":"The `dotnet pack` command builds the project and creates NuGet packages."},{"content":"The result of this operation is two packages with the <ph id=\"ph1\">`nupkg`</ph> extension.","pos":[591,663],"source":" The result of this operation is two packages with the `nupkg` extension."},{"content":"One package contains the code and the other contains the debug symbols.","pos":[664,735]},{"content":"NuGet dependencies of the project being packed are added to the nuspec file, so they are able to be resolved when the package is installed.","pos":[738,877]},{"content":"Project-to-project references are not packaged inside the project by default.","pos":[878,956],"source":" \nProject-to-project references are not packaged inside the project by default."},{"content":"If you wish to do this, you need to reference the required project in your dependencies node with a <ph id=\"ph1\">`type`</ph> set to \"build\" like in the following example:","pos":[957,1109],"source":" If you wish to do this, you need to reference the required project in your dependencies node with a `type` set to \"build\" like in the following example:"},{"content":"by default first builds the project.","pos":[1289,1325]},{"content":"If you wish to avoid this, pass the <ph id=\"ph1\">`--no-build`</ph> option.","pos":[1326,1382],"source":" If you wish to avoid this, pass the `--no-build` option."},{"content":"This can be useful in Continuous Integration (CI) build scenarios in which you know the code was just previously built, for example.","pos":[1383,1515]},{"content":"OPTIONS","pos":[1521,1528]},{"content":"The project to pack.","pos":[1548,1568]},{"content":"It can be either a path to a <ph id=\"ph1\">`project.json`</ph> file or to a directory.","pos":[1569,1636],"source":" It can be either a path to a `project.json` file or to a directory."},{"content":"If omitted, it will default to the current directory.","pos":[1637,1690],"source":" If omitted, it will\ndefault to the current directory."},{"pos":[1697,1715],"content":", <ph id=\"ph1\">`--output`</ph> [DIR]","source":", `--output` [DIR]"},{"content":"Places the built packages in the directory specified.","pos":[1717,1770]},{"content":"Skips the building phase of the packing process.","pos":[1787,1835]},{"content":"Places the temporary build artifacts in the specified directory.","pos":[1859,1923]},{"content":"By default, they go to the obj directory in the current directory.","pos":[1924,1990]},{"pos":[1997,1998],"content":","},{"content":"Configuration to use when building the project.","pos":[2034,2081]},{"content":"If not specified, will default to \"Debug\".","pos":[2082,2124]},{"pos":[2146,2218],"content":"Updates the star in <ph id=\"ph1\">`-*`</ph> package version suffix with a specified string.","source":"Updates the star in `-*` package version suffix with a specified string."},{"content":"EXAMPLES","pos":[2223,2231]},{"content":"Packs the current project.","pos":[2248,2274]},{"content":"Packs the app1 project.","pos":[2324,2347]},{"content":"Packs the current project and place the resulting packages into the specified folder.","pos":[2388,2473]},{"content":"Packs the current project into the specified folder and skips the build step.","pos":[2517,2594]},{"content":"Packs the current project and updates the resulting packages version with the given suffix.","pos":[2638,2729]},{"content":"E.g.","pos":[2730,2734]},{"content":"version <ph id=\"ph1\">`1.0.0-*`</ph> will be updated to <ph id=\"ph2\">`1.0.0-ci-1234`</ph>.","pos":[2735,2788],"source":" version `1.0.0-*` will be updated to `1.0.0-ci-1234`."}],"content":"---\ntitle: dotnet-pack\ndescription: dotnet-pack\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 8b4b8cef-f56c-4a10-aa01-fde8bfaae53e\n---\n\ndotnet-pack\n===========\n\n## NAME\n\n`dotnet-pack` - Packs the code into a NuGet package\n\n## SYNOPSIS\n\n`dotnet pack [--output]  \n    [--no-build] [--build-base-path]  \n    [--configuration]  [--version-suffix]\n    [<project>]`  \n\n## DESCRIPTION\n\nThe `dotnet pack` command builds the project and creates NuGet packages. The result of this operation is two packages with the `nupkg` extension. One package contains the code and the other contains the debug symbols. \n\nNuGet dependencies of the project being packed are added to the nuspec file, so they are able to be resolved when the package is installed. \nProject-to-project references are not packaged inside the project by default. If you wish to do this, you need to reference the required project in your dependencies node with a `type` set to \"build\" like in the following example:\n\n```json\n{\n    \"version\": \"1.0.0-*\",\n    \"dependencies\": {\n        \"ProjectA\": {\n            \"target\": \"project\",\n            \"type\": \"build\"\n        }\n    }\n}\n```\n\n`dotnet pack` by default first builds the project. If you wish to avoid this, pass the `--no-build` option. This can be useful in Continuous Integration (CI) build scenarios in which you know the code was just previously built, for example. \n\n## OPTIONS\n\n`[project]` \n    \nThe project to pack. It can be either a path to a `project.json` file or to a directory. If omitted, it will\ndefault to the current directory. \n\n`-o`, `--output` [DIR]\n\nPlaces the built packages in the directory specified. \n\n`--no-build`\n\nSkips the building phase of the packing process. \n\n`--build-base-path`\n\nPlaces the temporary build artifacts in the specified directory. By default, they go to the obj directory in the current directory. \n\n`-c`, `--configuration [Debug|Release]`\n\nConfiguration to use when building the project. If not specified, will default to \"Debug\".\n\n`--version-suffix`\n\nUpdates the star in `-*` package version suffix with a specified string.\n\n## EXAMPLES\n\n`dotnet pack`\n\nPacks the current project.\n\n`dotnet pack ~/projects/app1/project.json`\n    \nPacks the app1 project.\n    \n`dotnet pack --output nupkgs`\n    \nPacks the current project and place the resulting packages into the specified folder.\n\n`dotnet pack --no-build --output nupkgs`\n\nPacks the current project into the specified folder and skips the build step.\n\n`dotnet pack --version-suffix \"ci-1234\"`\n\nPacks the current project and updates the resulting packages version with the given suffix. E.g. version `1.0.0-*` will be updated to `1.0.0-ci-1234`.\n"}