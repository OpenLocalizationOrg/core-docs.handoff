{"nodes":[{"pos":[11,52],"content":"Using MSBuild to build .NET Core projects","needQuote":true,"nodes":[{"content":"Using MSBuild to build .NET Core projects","pos":[0,41]}]},{"pos":[66,107],"content":"Using MSBuild to build .NET Core projects","needQuote":true,"nodes":[{"content":"Using MSBuild to build .NET Core projects","pos":[0,41]}]},{"pos":[118,133],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Using MSBuild to build .NET Core projects","pos":[341,382]},{"content":"The .NET Core tooling is going to <bpt id=\"p1\">[</bpt>move from project.json to MSBuild based projects<ept id=\"p1\">](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)</ept>.","pos":[384,546],"source":"The .NET Core tooling is going to [move from project.json to MSBuild based projects](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/)."},{"content":"We expect the first version of the .NET Core tools that use MSBuild to ship along with the next version of Visual Studio.","pos":[547,668],"source":"\nWe expect the first version of the .NET Core tools that use MSBuild to ship along with the next version of Visual Studio."},{"content":"However, it is possible to use MSBuild for .NET Core projects today, and this page shows how.","pos":[670,763],"source":"  However, it is possible to use MSBuild for .NET Core\nprojects today, and this page shows how."},{"pos":[765,927],"content":"We recommend that most people targeting .NET Core with <bpt id=\"p1\">*</bpt>new<ept id=\"p1\">*</ept> projects today use the default tooling experience with project.json because of the following reasons:","source":"We recommend that most people targeting .NET Core with *new* projects today use the default tooling experience with project.json because of the following\nreasons:"},{"content":"MSBuild doesn't yet support a lot of the benefits of project.json","pos":[931,996]},{"content":"A lot of the ASP.NET based tooling doesn't currently work with MSBuild projects","pos":[999,1078]},{"content":"When we do release the .NET Core tooling that uses MSBuild, it will be able to automatically convert from project.json to MSBuild projects","pos":[1081,1219]},{"pos":[1222,1479],"content":"You may want to use MSBuild to target .NET Core for existing projects that already use MSBuild that you want to port to .NET Core, or if you are using MSBuild's extensibility in your build for scenarios that are not well supported for project.json projects.","source":"You may want to use MSBuild to target .NET Core for existing projects that already use MSBuild that you want to port to .NET Core, or if you are using\nMSBuild's extensibility in your build for scenarios that are not well supported for project.json projects."},{"content":"Prerequisites","pos":[1484,1497]},{"pos":[1501,1623],"content":"<bpt id=\"p1\">[</bpt>Visual Studio 2015 Update 3 RC<ept id=\"p1\">](https://www.visualstudio.com/downloads/visual-studio-prerelease-downloads#sec1)</ept> or higher","source":"[Visual Studio 2015 Update 3 RC](https://www.visualstudio.com/downloads/visual-studio-prerelease-downloads#sec1) or higher"},{"content":".NET Core tools for Visual Studio","pos":[1627,1660]},{"pos":[1730,1858],"content":"NuGet Visual Studio extension <bpt id=\"p1\">[</bpt>v3.5.0-beta<ept id=\"p1\">](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix)</ept> or later","source":"NuGet Visual Studio extension [v3.5.0-beta](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix) or later"},{"content":"Creating a library targeting .NET Core","pos":[1863,1901]},{"pos":[1906,2016],"content":"In the Visual Studio menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> | </ph><bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph2\"> | </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept> and select <bpt id=\"p4\">**</bpt>Class Library (Portable)<ept id=\"p4\">**</ept>","source":"In the Visual Studio menu bar, choose **File** | **New** | **Project** and select **Class Library (Portable)**"},{"content":"New Project","pos":[2022,2033]},{"pos":[2125,2185],"content":"Choose a name and location for your project and click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>","source":"Choose a name and location for your project and click **OK**"},{"content":"The \"Add Portable Class Library\" dialog will appear.","pos":[2190,2242]},{"content":"Select <bpt id=\"p1\">**</bpt>.NET Framework 4.6<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>ASP.NET Core 1.0<ept id=\"p2\">**</ept> as targets and click <bpt id=\"p3\">**</bpt>OK<ept id=\"p3\">**</ept>","pos":[2244,2326],"source":"  Select **.NET Framework 4.6** and **ASP.NET Core 1.0** as targets and click **OK**"},{"content":"Portable targets dialog","pos":[2332,2355]},{"pos":[2443,2518],"content":"In Solution Explorer, right click on your project and choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>","source":"In Solution Explorer, right click on your project and choose **Properties**"},{"pos":[2522,2670],"content":"In the <bpt id=\"p1\">**</bpt>Library<ept id=\"p1\">**</ept> tab of the project properties, click on the <bpt id=\"p2\">**</bpt>Target .NET Platform Standard<ept id=\"p2\">**</ept> link, and click <bpt id=\"p3\">**</bpt>Yes<ept id=\"p3\">**</ept> in the dialog that is shown","source":"In the **Library** tab of the project properties, click on the **Target .NET Platform Standard** link, and click **Yes** in the dialog that is shown"},{"pos":[2674,2751],"content":"Open the <ph id=\"ph1\">`project.json`</ph> file in your project, and make the following changes:","source":"Open the `project.json` file in your project, and make the following changes:"},{"pos":[2758,2882],"content":"Change the version number of the <ph id=\"ph1\">`NETStandard.Library`</ph> package to <ph id=\"ph2\">`1.6.0`</ph> (this is the .NET Core 1.0 version of the package)","source":"Change the version number of the `NETStandard.Library` package to `1.6.0` (this is the .NET Core 1.0 version of the package)"},{"content":"Add the below <ph id=\"ph1\">`imports`</ph> definition inside the <ph id=\"ph2\">`netstandard1.6`</ph> framework definition.","pos":[2889,2973],"source":"Add the below `imports` definition inside the `netstandard1.6` framework definition."},{"content":"This will allow your project to reference .NET Core compatible NuGet packages that haven't been updated to target .NET Standard","pos":[2975,3103],"source":"  This will allow your project to reference .NET Core compatible \nNuGet packages that haven't been updated to target .NET Standard"},{"content":"Creating a .NET Core console application","pos":[3233,3273]},{"content":"Building a console application for .NET Core requires some customization of the MSBuild build process.","pos":[3274,3376]},{"content":"You can find a sample project for a .NET Core console application called <bpt id=\"p1\">[</bpt>CoreApp<ept id=\"p1\">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> in the <bpt id=\"p2\">[</bpt>corefxlab<ept id=\"p2\">](https://github.com/dotnet/corefxlab)</ept> repo.","pos":[3378,3601],"source":"  You can find a sample project for a .NET Core console\napplication called [CoreApp](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp) in the\n[corefxlab](https://github.com/dotnet/corefxlab) repo."},{"content":"Another good option is to start with <bpt id=\"p1\">[</bpt>coretemplate<ept id=\"p1\">](https://github.com/mellinoe/coretemplate)</ept>, which uses separate MSBuild targets files to target .NET Core instead of putting the changes directly in the project file.","pos":[3603,3820],"source":"  Another good option is to start with [coretemplate](https://github.com/mellinoe/coretemplate),\nwhich uses separate MSBuild targets files to target .NET Core instead of putting the changes directly in the project file."},{"content":"It is also possible to start by creating a project in Visual Studio and modifying it to target .NET Core.","pos":[3824,3929]},{"content":"The instructions below show the minimal steps to get this working.","pos":[3931,3997],"source":"  The instructions below show the minimal steps\nto get this working."},{"content":"In contrast to <bpt id=\"p1\">[</bpt>CoreApp<ept id=\"p1\">](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp)</ept> or <bpt id=\"p2\">[</bpt>coretemplate<ept id=\"p2\">](https://github.com/mellinoe/coretemplate)</ept>, a project created this way won't include configurations for targeting Linux and macOS.","pos":[3999,4250],"source":"  In contrast to [CoreApp](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp) or\n[coretemplate](https://github.com/mellinoe/coretemplate), a project created this way won't include configurations for targeting Linux and macOS."},{"pos":[4255,4360],"content":"In the Visual Studio menu bar, choose <bpt id=\"p1\">**</bpt>File<ept id=\"p1\">**</ept><ph id=\"ph1\"> | </ph><bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept><ph id=\"ph2\"> | </ph><bpt id=\"p3\">**</bpt>Project<ept id=\"p3\">**</ept> and select <bpt id=\"p4\">**</bpt>Console Application<ept id=\"p4\">**</ept>","source":"In the Visual Studio menu bar, choose **File** | **New** | **Project** and select **Console Application**"},{"pos":[4364,4424],"content":"Choose a name and location for your project and click <bpt id=\"p1\">**</bpt>OK<ept id=\"p1\">**</ept>","source":"Choose a name and location for your project and click **OK**"},{"pos":[4428,4534],"content":"In Solution Explorer, right click on your project, choose <bpt id=\"p1\">**</bpt>Properties<ept id=\"p1\">**</ept>, and then go to the <bpt id=\"p2\">**</bpt>Build<ept id=\"p2\">**</ept> tab","source":"In Solution Explorer, right click on your project, choose **Properties**, and then go to the **Build** tab"},{"pos":[4538,4690],"content":"In the <bpt id=\"p1\">**</bpt>Configuration<ept id=\"p1\">**</ept> dropdown (at the top of the properties page), select <bpt id=\"p2\">**</bpt>All Configurations<ept id=\"p2\">**</ept>, and then change the <bpt id=\"p3\">**</bpt>Platform Target<ept id=\"p3\">**</ept> to <bpt id=\"p4\">**</bpt>x64<ept id=\"p4\">**</ept>","source":"In the **Configuration** dropdown (at the top of the properties page), select **All Configurations**, and then change the **Platform Target** to **x64**"},{"pos":[4694,4739],"content":"Delete the <ph id=\"ph1\">`app.config`</ph> file from the project","source":"Delete the `app.config` file from the project"},{"pos":[4743,4812],"content":"Add a <ph id=\"ph1\">`project.json`</ph> file to the project with the following contents:","source":"Add a `project.json` file to the project with the following contents:"},{"pos":[5217,5384],"content":"In Solution Explorer, right click on the project, choose <bpt id=\"p1\">**</bpt>Unload Project<ept id=\"p1\">**</ept>, then right click again and choose <bpt id=\"p2\">**</bpt>Edit <bpt id=\"p3\">_</bpt>MyProj.csproj<ept id=\"p3\">_</ept><ept id=\"p2\">**</ept>, and make the following changes","source":"In Solution Explorer, right click on the project, choose **Unload Project**, then right click again and choose\n**Edit _MyProj.csproj_**, and make the following changes"},{"pos":[5391,5466],"content":"Remove all the default <ph id=\"ph1\">`Reference`</ph> items (to <ph id=\"ph2\">`System`</ph>, <ph id=\"ph3\">`System.Core`</ph>, etc.)","source":"Remove all the default `Reference` items (to `System`, `System.Core`, etc.)"},{"pos":[5473,5546],"content":"Add the following properties to the first <ph id=\"ph1\">`PropertyGroup`</ph> in the project:","source":"Add the following properties to the first `PropertyGroup` in the project:"},{"pos":[5863,5953],"content":"Add the following at the end of the file (after the import of <ph id=\"ph1\">`Microsoft.CSharp.Targets`</ph>):","source":"Add the following at the end of the file (after the import of `Microsoft.CSharp.Targets`):"},{"content":"Close the .csproj file, and reload the project in Visual Studio","pos":[7169,7232]},{"pos":[7237,7352],"content":"You should be able to run your program with F5 in Visual Studio, or from the command line in the output folder with"}],"content":"---\ntitle: Using MSBuild to build .NET Core projects\ndescription: Using MSBuild to build .NET Core projects\nkeywords: .NET, .NET Core\nauthor: dsplaisted\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 13c66464-4f14-4db6-aa8b-06f25e7ba894\n---\n\n# Using MSBuild to build .NET Core projects\n\nThe .NET Core tooling is going to [move from project.json to MSBuild based projects](https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/).\nWe expect the first version of the .NET Core tools that use MSBuild to ship along with the next version of Visual Studio.  However, it is possible to use MSBuild for .NET Core\nprojects today, and this page shows how.\n\nWe recommend that most people targeting .NET Core with *new* projects today use the default tooling experience with project.json because of the following\nreasons:\n\n- MSBuild doesn't yet support a lot of the benefits of project.json\n- A lot of the ASP.NET based tooling doesn't currently work with MSBuild projects\n- When we do release the .NET Core tooling that uses MSBuild, it will be able to automatically convert from project.json to MSBuild projects \n\nYou may want to use MSBuild to target .NET Core for existing projects that already use MSBuild that you want to port to .NET Core, or if you are using\nMSBuild's extensibility in your build for scenarios that are not well supported for project.json projects.\n\n## Prerequisites\n\n- [Visual Studio 2015 Update 3 RC](https://www.visualstudio.com/downloads/visual-studio-prerelease-downloads#sec1) or higher\n- [.NET Core tools for Visual Studio](https://www.visualstudio.com/downloads/download-visual-studio-vs)\n- NuGet Visual Studio extension [v3.5.0-beta](https://dist.nuget.org/visualstudio-2015-vsix/v3.5.0-beta/NuGet.Tools.vsix) or later\n\n## Creating a library targeting .NET Core\n\n1. In the Visual Studio menu bar, choose **File** | **New** | **Project** and select **Class Library (Portable)**\n\n  ![New Project](./media/target-dotnetcore-with-msbuild/new-project-dialog-class-library-portable.png)\n\n2. Choose a name and location for your project and click **OK**\n\n3. The \"Add Portable Class Library\" dialog will appear.  Select **.NET Framework 4.6** and **ASP.NET Core 1.0** as targets and click **OK**\n\n  ![Portable targets dialog](./media/target-dotnetcore-with-msbuild/pcl-targets-dialog-net46-aspnetcore10.png)\n\n4. In Solution Explorer, right click on your project and choose **Properties**\n5. In the **Library** tab of the project properties, click on the **Target .NET Platform Standard** link, and click **Yes** in the dialog that is shown\n6. Open the `project.json` file in your project, and make the following changes:\n    - Change the version number of the `NETStandard.Library` package to `1.6.0` (this is the .NET Core 1.0 version of the package)\n    - Add the below `imports` definition inside the `netstandard1.6` framework definition.  This will allow your project to reference .NET Core compatible \nNuGet packages that haven't been updated to target .NET Standard\n\n        ```json\n        \"netstandard1.6\": {\n            \"imports\": [ \"dnxcore50\", \"portable-net452\" ]\n        }\n        ```\n\n## Creating a .NET Core console application\nBuilding a console application for .NET Core requires some customization of the MSBuild build process.  You can find a sample project for a .NET Core console\napplication called [CoreApp](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp) in the\n[corefxlab](https://github.com/dotnet/corefxlab) repo.  Another good option is to start with [coretemplate](https://github.com/mellinoe/coretemplate),\nwhich uses separate MSBuild targets files to target .NET Core instead of putting the changes directly in the project file.  \n\nIt is also possible to start by creating a project in Visual Studio and modifying it to target .NET Core.  The instructions below show the minimal steps\nto get this working.  In contrast to [CoreApp](https://github.com/dotnet/corefxlab/tree/master/samples/NetCoreSample/CoreApp) or\n[coretemplate](https://github.com/mellinoe/coretemplate), a project created this way won't include configurations for targeting Linux and macOS.\n\n1. In the Visual Studio menu bar, choose **File** | **New** | **Project** and select **Console Application**\n2. Choose a name and location for your project and click **OK**\n3. In Solution Explorer, right click on your project, choose **Properties**, and then go to the **Build** tab\n4. In the **Configuration** dropdown (at the top of the properties page), select **All Configurations**, and then change the **Platform Target** to **x64**\n5. Delete the `app.config` file from the project\n6. Add a `project.json` file to the project with the following contents:\n\n    ```json\n    {\n        \"dependencies\": {\n            \"Microsoft.NETCore.App\": \"1.0.0-rc2-3002702\"\n        },\n        \"runtimes\": {\n            \"win7-x64\": { },\n            \"ubuntu.14.04-x64\": { },\n            \"osx.10.10-x64\": { }\n        },\n        \"frameworks\": {\n            \"netcoreapp1.0\": {\n                \"imports\": [ \"dnxcore50\", \"portable-net452\" ]\n            }\n        }\n    }\n    ```\n\n7. In Solution Explorer, right click on the project, choose **Unload Project**, then right click again and choose\n**Edit _MyProj.csproj_**, and make the following changes\n    - Remove all the default `Reference` items (to `System`, `System.Core`, etc.)\n    - Add the following properties to the first `PropertyGroup` in the project:\n\n        ```xml\n        <TargetFrameworkIdentifier>.NETCoreApp</TargetFrameworkIdentifier>\n        <TargetFrameworkVersion>v1.0</TargetFrameworkVersion>\n        <BaseNuGetRuntimeIdentifier>win7</BaseNuGetRuntimeIdentifier>\n        <NoStdLib>true</NoStdLib>\n        <NoWarn>$(NoWarn);1701</NoWarn>\n        ```\n\n    - Add the following at the end of the file (after the import of `Microsoft.CSharp.Targets`):\n\n        ```xml\n        <PropertyGroup>\n            <!-- We don't use any of MSBuild's resolution logic for resolving the framework, so just set these two\n                    properties to any folder that exists to skip the GetReferenceAssemblyPaths task (not target) and\n                    to prevent it from outputting a warning (MSB3644).\n                -->\n            <_TargetFrameworkDirectories>$(MSBuildThisFileDirectory)</_TargetFrameworkDirectories>\n            <_FullFrameworkReferenceAssemblyPaths>$(MSBuildThisFileDirectory)</_FullFrameworkReferenceAssemblyPaths>\n\n            <!-- MSBuild thinks all EXEs need binding redirects, not so for CoreCLR! -->\n            <AutoUnifyAssemblyReferences>true</AutoUnifyAssemblyReferences>\n            <AutoGenerateBindingRedirects>false</AutoGenerateBindingRedirects>\n\n            <!-- Set up debug options to run with host, and to use the CoreCLR debug engine -->\n            <StartAction>Program</StartAction>\n            <StartProgram>$(TargetDir)dotnet.exe</StartProgram>\n            <StartArguments>$(TargetPath)</StartArguments>\n            <DebugEngines>{2E36F1D4-B23C-435D-AB41-18E608940038}</DebugEngines>\n        </PropertyGroup>\n        ```\n\n    - Close the .csproj file, and reload the project in Visual Studio\n\n8. You should be able to run your program with F5 in Visual Studio, or from the command line in the output folder with `dotnet MyApp.exe` \n"}