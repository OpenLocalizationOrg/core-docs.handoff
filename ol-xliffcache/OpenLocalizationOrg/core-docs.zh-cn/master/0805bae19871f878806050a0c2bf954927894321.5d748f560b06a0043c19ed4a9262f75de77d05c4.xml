{"nodes":[{"pos":[11,42],"content":"When to Use Generic Collections","needQuote":true,"nodes":[{"content":"When to Use Generic Collections","pos":[0,31]}]},{"pos":[56,87],"content":"When to Use Generic Collections","needQuote":true,"nodes":[{"content":"When to Use Generic Collections","pos":[0,31]}]},{"pos":[98,113],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"When to Use Generic Collections","pos":[317,348]},{"content":"Using generic collections is generally recommended, because you gain the immediate benefit of type safety without having to derive from a base collection type and implement type-specific members.","pos":[350,545]},{"content":"Generic collection types also generally perform better than the corresponding nongeneric collection types (and better than types that are derived from nongeneric base collection types) when the collection elements are value types, because with generics there is no need to box the elements.","pos":[546,836]},{"pos":[839,1098],"content":"You should use the generic collection classes in the <bpt id=\"p1\">[</bpt>System.Collections.Concurrent<ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent )</ept> namespace when multiple threads might be adding or removing items from the collection concurrently.","source":"You should use the generic collection classes in the [System.Collections.Concurrent](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent ) namespace when multiple threads might be adding or removing items from the collection concurrently."},{"content":"The following generic types correspond to existing collection types:","pos":[1100,1168]},{"pos":[1175,1397],"content":"<bpt id=\"p1\">[</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 )</ept> is the generic class that corresponds to <bpt id=\"p2\">[</bpt>ArrayList<ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList )</ept>.","source":"[List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) is the generic class that corresponds to [ArrayList](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList )."},{"pos":[1403,1795],"content":"<bpt id=\"p1\">[</bpt>Dictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 )</ept> and <bpt id=\"p2\">[</bpt>ConcurrentDictionary<ph id=\"ph3\">&amp;lt;</ph>TKey, TValue<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2 )</ept> are the generic classes that correspond to <bpt id=\"p3\">[</bpt>Hashtable<ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable )</ept>.","source":"[Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 ) and [ConcurrentDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2 ) are the generic classes that correspond to [Hashtable](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable )."},{"content":"<bpt id=\"p1\">[</bpt>Collection<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.Collection-1 )</ept> is the generic class that corresponds to <bpt id=\"p2\">[</bpt>CollectionBase<ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase )</ept>.","pos":[1802,2050],"source":"[Collection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.Collection-1 ) is the generic class that corresponds to [CollectionBase](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase )."},{"content":"can be used as a base class, but unlike <ph id=\"ph1\">`CollectionBase`</ph>, it is not abstract.","pos":[2067,2144],"source":" can be used as a base class, but unlike `CollectionBase`, it is not abstract."},{"content":"This makes it much easier to use.","pos":[2145,2178]},{"content":"<bpt id=\"p1\">[</bpt>ReadOnlyCollection<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.ReadOnlyCollection-1 )</ept> is the generic class that corresponds to <bpt id=\"p2\">[</bpt>ReadOnlyCollectionBase<ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase )</ept>.","pos":[2184,2464],"source":"[ReadOnlyCollection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.ReadOnlyCollection-1 ) is the generic class that corresponds to [ReadOnlyCollectionBase](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase )."},{"content":"is not abstract, and has a constructor that makes it easy to expose an existing <bpt id=\"p1\">[</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 )</ept> as a read-only collection.","pos":[2489,2690],"source":" is not abstract, and has a constructor that makes it easy to expose an existing [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) as a read-only collection."},{"pos":[2696,3344],"content":"The <bpt id=\"p1\">[</bpt>Queue<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1 )</ept>, <bpt id=\"p2\">[</bpt>ConcurrentQueue<ph id=\"ph3\">&amp;lt;</ph>T<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1 )</ept>, <bpt id=\"p3\">[</bpt>Stack<ph id=\"ph5\">&amp;lt;</ph>T<ph id=\"ph6\">&amp;gt;</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1 )</ept>, <bpt id=\"p4\">[</bpt>ConcurrentStack<ph id=\"ph7\">&amp;lt;</ph>T<ph id=\"ph8\">&amp;gt;</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1 )</ept>, and <bpt id=\"p5\">[</bpt>SortedList<ph id=\"ph9\">&amp;lt;</ph>TKey, TValue<ph id=\"ph10\">&amp;gt;</ph><ept id=\"p5\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 )</ept> generic classes correspond to the respective nongeneric classes with the same names.","source":"The [Queue&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1 ), [ConcurrentQueue&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1 ), [Stack&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1 ), [ConcurrentStack&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1 ), and [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 ) generic classes correspond to the respective nongeneric classes with the same names."},{"content":"Additional Types","pos":[3349,3365]},{"content":"Several generic collection types do not have nongeneric counterparts.","pos":[3367,3436]},{"content":"They include the following:","pos":[3437,3464]},{"pos":[3471,3663],"content":"<bpt id=\"p1\">[</bpt>LinkedList<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1 )</ept> is a general-purpose linked list that provides O(1) insertion and removal operations.","source":"[LinkedList&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1 ) is a general-purpose linked list that provides O(1) insertion and removal operations."},{"pos":[3669,4029],"content":"<bpt id=\"p1\">[</bpt>SortedDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 )</ept> is a sorted dictionary with O(log n) insertion and retrieval operations, which makes it a useful alternative to <bpt id=\"p2\">[</bpt>SortedList<ph id=\"ph3\">&amp;lt;</ph>TKey, TValue<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 )</ept>.","source":"[SortedDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 ) is a sorted dictionary with O(log n) insertion and retrieval operations, which makes it a useful alternative to [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 )."},{"pos":[4036,4278],"content":"<bpt id=\"p1\">[</bpt>KeyedCollection<ph id=\"ph1\">&amp;lt;</ph>TKey, TItem<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 )</ept> is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys.","source":"[KeyedCollection&lt;TKey, TItem&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 ) is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys."},{"pos":[4284,4481],"content":"<bpt id=\"p1\">[</bpt>BlockingCollection<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1 )</ept> implements a collection class with bounding and blocking functionality.","source":"[BlockingCollection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1 ) implements a collection class with bounding and blocking functionality."},{"pos":[4487,4661],"content":"<bpt id=\"p1\">[</bpt>ConcurrentBag<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentBag-1 )</ept> provides fast insertion and removal of unordered elements.","source":"[ConcurrentBag&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentBag-1 ) provides fast insertion and removal of unordered elements."},{"content":"LINQ to Objects","pos":[4666,4681]},{"content":"The LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the <bpt id=\"p1\">[</bpt>System.Collections.IEnumerable<ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable )</ept> or <bpt id=\"p2\">[</bpt>System.Collections.Generic.IEnumerable<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1 )</ept> interface.","pos":[4683,5071],"source":"The LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the [System.Collections.IEnumerable](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable ) or [System.Collections.Generic.IEnumerable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1 ) interface."},{"content":"LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard <ph id=\"ph1\">`foreach`</ph> loops; and provide filtering, ordering and grouping capabilities.","pos":[5072,5259],"source":" LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities."},{"content":"LINQ queries can also improve performance.","pos":[5260,5302]},{"content":"Additional Functionality","pos":[5307,5331]},{"content":"Some of the generic types have functionality that is not found in the nongeneric collection types.","pos":[5333,5431]},{"content":"For example, the <bpt id=\"p1\">[</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 )</ept> class, which corresponds to the nongeneric <bpt id=\"p2\">[</bpt>ArrayList<ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList )</ept> class, has a number of methods that accept generic delegates, such as the <bpt id=\"p3\">[</bpt>Predicate<ph id=\"ph3\">&amp;lt;</ph>T<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Predicate-1 )</ept> delegate that allows you to specify methods for searching the list, and the <bpt id=\"p4\">[</bpt>Action<ph id=\"ph5\">&amp;lt;</ph>T<ph id=\"ph6\">&amp;gt;</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Action-1 )</ept> delegate that represents methods that act on each element of the list.","pos":[5432,6057],"source":" For example, the [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) class, which corresponds to the nongeneric [ArrayList](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList ) class, has a number of methods that accept generic delegates, such as the [Predicate&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Predicate-1 ) delegate that allows you to specify methods for searching the list, and the [Action&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Action-1 ) delegate that represents methods that act on each element of the list."},{"content":"The <bpt id=\"p1\">[</bpt>List<ph id=\"ph1\">&amp;lt;</ph>T<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 )</ept> class allows you to specify your own <bpt id=\"p2\">[</bpt>IComparer<ph id=\"ph3\">&amp;lt;</ph>T<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1 )</ept> generic interface implementations for sorting and searching the list.","pos":[6059,6369],"source":"The [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) class allows you to specify your own [IComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1 ) generic interface implementations for sorting and searching the list."},{"content":"The <bpt id=\"p1\">[</bpt>SortedDictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 )</ept> and <bpt id=\"p2\">[</bpt>SortedList<ph id=\"ph3\">&amp;lt;</ph>TKey, TValue<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 )</ept> classes also have this capability.","pos":[6370,6660],"source":" The [SortedDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 ) and [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 ) classes also have this capability."},{"content":"In addition, these classes let you specify comparers when the collection is created.","pos":[6661,6745]},{"content":"In similar fashion, the <bpt id=\"p1\">[</bpt>Dictionary<ph id=\"ph1\">&amp;lt;</ph>TKey, TValue<ph id=\"ph2\">&amp;gt;</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 )</ept> and <bpt id=\"p2\">[</bpt>KeyedCollection<ph id=\"ph3\">&amp;lt;</ph>TKey, TItem<ph id=\"ph4\">&amp;gt;</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 )</ept> classes let you specify your own equality comparers.","pos":[6746,7075],"source":" In similar fashion, the [Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 ) and [KeyedCollection&lt;TKey, TItem&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 ) classes let you specify your own equality comparers."},{"content":"See Also","pos":[7080,7088]},{"content":"Collections and Data Structures","pos":[7091,7122]},{"content":"Commonly Used Collection Types","pos":[7137,7167]}],"content":"---\ntitle: When to Use Generic Collections\ndescription: When to Use Generic Collections\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 971e08bd-b63f-4832-9e61-9f65cbedd352\n---\n\n# When to Use Generic Collections\n\nUsing generic collections is generally recommended, because you gain the immediate benefit of type safety without having to derive from a base collection type and implement type-specific members. Generic collection types also generally perform better than the corresponding nongeneric collection types (and better than types that are derived from nongeneric base collection types) when the collection elements are value types, because with generics there is no need to box the elements. \n\nYou should use the generic collection classes in the [System.Collections.Concurrent](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent ) namespace when multiple threads might be adding or removing items from the collection concurrently.\n\nThe following generic types correspond to existing collection types: \n\n*   [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) is the generic class that corresponds to [ArrayList](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList ).\n\n*   [Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 ) and [ConcurrentDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2 ) are the generic classes that correspond to [Hashtable](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable ). \n\n*   [Collection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.Collection-1 ) is the generic class that corresponds to [CollectionBase](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase ). `Collection<T>` can be used as a base class, but unlike `CollectionBase`, it is not abstract. This makes it much easier to use.\n\n*   [ReadOnlyCollection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.ReadOnlyCollection-1 ) is the generic class that corresponds to [ReadOnlyCollectionBase](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase ). `ReadOnlyCollection<T>` is not abstract, and has a constructor that makes it easy to expose an existing [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) as a read-only collection.\n\n*   The [Queue&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1 ), [ConcurrentQueue&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1 ), [Stack&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1 ), [ConcurrentStack&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1 ), and [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 ) generic classes correspond to the respective nongeneric classes with the same names.\n\n## Additional Types\n\nSeveral generic collection types do not have nongeneric counterparts. They include the following: \n\n*   [LinkedList&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1 ) is a general-purpose linked list that provides O(1) insertion and removal operations.\n\n*   [SortedDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 ) is a sorted dictionary with O(log n) insertion and retrieval operations, which makes it a useful alternative to [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 ). \n\n*   [KeyedCollection&lt;TKey, TItem&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 ) is a hybrid between a list and a dictionary, which provides a way to store objects that contain their own keys.\n\n*   [BlockingCollection&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.BlockingCollection-1 ) implements a collection class with bounding and blocking functionality.\n\n*   [ConcurrentBag&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentBag-1 ) provides fast insertion and removal of unordered elements.\n\n## LINQ to Objects\n\nThe LINQ to Objects feature enables you to use LINQ queries to access in-memory objects as long as the object type implements the [System.Collections.IEnumerable](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable ) or [System.Collections.Generic.IEnumerable&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1 ) interface. LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard `foreach` loops; and provide filtering, ordering and grouping capabilities. LINQ queries can also improve performance.\n\n## Additional Functionality\n\nSome of the generic types have functionality that is not found in the nongeneric collection types. For example, the [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) class, which corresponds to the nongeneric [ArrayList](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList ) class, has a number of methods that accept generic delegates, such as the [Predicate&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Predicate-1 ) delegate that allows you to specify methods for searching the list, and the [Action&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Action-1 ) delegate that represents methods that act on each element of the list.\n\nThe [List&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1 ) class allows you to specify your own [IComparer&lt;T&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IComparer-1 ) generic interface implementations for sorting and searching the list. The [SortedDictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedDictionary-2 ) and [SortedList&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2 ) classes also have this capability. In addition, these classes let you specify comparers when the collection is created. In similar fashion, the [Dictionary&lt;TKey, TValue&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2 ) and [KeyedCollection&lt;TKey, TItem&gt;](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2 ) classes let you specify your own equality comparers.\n\n## See Also\n\n[Collections and Data Structures](index.md) \n\n[Commonly Used Collection Types](commonly-used-collection-types.md)\n"}