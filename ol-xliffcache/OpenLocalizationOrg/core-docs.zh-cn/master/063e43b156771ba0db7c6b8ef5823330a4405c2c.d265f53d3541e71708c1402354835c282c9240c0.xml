{"nodes":[{"pos":[11,41],"content":"Commonly Used Collection Types","needQuote":true,"nodes":[{"content":"Commonly Used Collection Types","pos":[0,30]}]},{"pos":[55,85],"content":"Commonly Used Collection Types","needQuote":true,"nodes":[{"content":"Commonly Used Collection Types","pos":[0,30]}]},{"pos":[96,111],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Commonly Used Collection Types","pos":[315,345]},{"content":"Collection types are the common variations of data collections, such as hash tables, queues, stacks, bags, dictionaries, and lists.","pos":[347,478]},{"content":"Collections are based on the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`ICollection`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection)</ept> interface, the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`IList`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)</ept> interface, the <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`IDictionary`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)</ept> interface, or their generic counterparts.","pos":[480,841],"source":"Collections are based on the [`ICollection`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection) interface, the [`IList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList) interface, the [`IDictionary`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary) interface, or their generic counterparts."},{"content":"The <ph id=\"ph1\">`IList`</ph> interface and the <ph id=\"ph2\">`IDictionary`</ph> interface are both derived from the <ph id=\"ph3\">`ICollection`</ph> interface; therefore, all collections are based on the <ph id=\"ph4\">`ICollection`</ph> interface either directly or indirectly.","pos":[842,1045],"source":" The `IList` interface and the `IDictionary` interface are both derived from the `ICollection` interface; therefore, all collections are based on the `ICollection` interface either directly or indirectly."},{"content":"In collections based on the <ph id=\"ph1\">`IList`</ph> interface (such as <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`Array`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, <bpt id=\"p2\">[</bpt><ph id=\"ph3\">`ArrayList`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList)</ept>, or <bpt id=\"p3\">[</bpt><ph id=\"ph4\">`List&lt;T&gt;)`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1)</ept> or directly on the <ph id=\"ph5\">`ICollection`</ph> interface (such as <bpt id=\"p4\">[</bpt><ph id=\"ph6\">`Queue`</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept>, <bpt id=\"p5\">[</bpt><ph id=\"ph7\">`ConcurrentQueue&lt;T&gt;`</ph><ept id=\"p5\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1)</ept>, <bpt id=\"p6\">[</bpt><ph id=\"ph8\">`Stack`</ph><ept id=\"p6\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept>, <bpt id=\"p7\">[</bpt><ph id=\"ph9\">`ConcurrentStack&lt;T&gt;`</ph><ept id=\"p7\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1)</ept> or <bpt id=\"p8\">[</bpt><ph id=\"ph10\">`LinkedList&lt;T&gt;`</ph><ept id=\"p8\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)</ept>), every element contains only a value.","pos":[1046,1937],"source":" In collections based on the `IList` interface (such as [`Array`](https://docs.microsoft.com/dotnet/core/api/System.Array), [`ArrayList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList), or [`List<T>)`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1) or directly on the `ICollection` interface (such as [`Queue`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue), [`ConcurrentQueue<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1), [`Stack`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack), [`ConcurrentStack<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1) or [`LinkedList<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)), every element contains only a value."},{"content":"In collections based on the <ph id=\"ph1\">`IDictionary`</ph> interface (such as the <bpt id=\"p1\">[</bpt><ph id=\"ph2\">`Hashtable`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> and <bpt id=\"p2\">[</bpt><ph id=\"ph3\">`SortedList`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> classes, the <bpt id=\"p3\">[</bpt><ph id=\"ph4\">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> and <bpt id=\"p4\">[</bpt><ph id=\"ph5\">`SortedList&lt;TKey, TValue&gt;`</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic classes), or the <bpt id=\"p5\">[</bpt><ph id=\"ph6\">`ConcurrentDictionary&lt;TKey, TValue&gt;`</ph><ept id=\"p5\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2)</ept> classes, every element contains both a key and a value.","pos":[1938,2642],"source":" In collections based on the `IDictionary` interface (such as the [`Hashtable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) and [`SortedList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList) classes, the [`Dictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) and [`SortedList<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2) generic classes), or the [`ConcurrentDictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2) classes, every element contains both a key and a value."},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary.","pos":[2643,2918],"source":" The [`KeyedCollection<TKey, TItem>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2) class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary."},{"content":"Generic collections are the best solution to strong typing.","pos":[2920,2979]},{"content":"However, if your language does not support generics, the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`System.Collections`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections)</ept> namespace includes base collections, such as <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`CollectionBase`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase)</ept>, <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`ReadOnlyCollectionBase`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase)</ept>, and <bpt id=\"p4\">[</bpt><ph id=\"ph4\">`DictionaryBase`</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryBase)</ept>, which are abstract base classes that can be extended to create collection classes that are strongly typed.","pos":[2980,3588],"source":" However, if your language does not support generics, the [`System.Collections`](https://docs.microsoft.com/dotnet/core/api/System.Collections) namespace includes base collections, such as [`CollectionBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase), [`ReadOnlyCollectionBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase), and [`DictionaryBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryBase), which are abstract base classes that can be extended to create collection classes that are strongly typed."},{"content":"When efficient multi-threaded collection access is required, use the generic collections in the <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`System.Collections.Concurrent`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent)</ept> namespace.","pos":[3589,3803],"source":" When efficient multi-threaded collection access is required, use the generic collections in the [`System.Collections.Concurrent`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent) namespace."},{"content":"Collections can vary, depending on how the elements are stored, how they are sorted, how searches are performed, and how comparisons are made.","pos":[3805,3947]},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Queue`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue)</ept> class and the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`Queue&lt;T&gt;`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1)</ept> generic class provide first-in-first-out lists, while the <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`Stack`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack)</ept> class and the <bpt id=\"p4\">[</bpt><ph id=\"ph4\">`Stack&lt;T&gt;`</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1)</ept> generic class provide last-in-first-out lists.","pos":[3948,4426],"source":" The [`Queue`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue) class and the [`Queue<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1) generic class provide first-in-first-out lists, while the [`Stack`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack) class and the [`Stack<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1) generic class provide last-in-first-out lists."},{"content":"The <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`SortedList`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList)</ept> class and the <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`SortedList&lt;TKey, TValue&gt;`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2)</ept> generic class provide sorted versions of the <bpt id=\"p3\">[</bpt><ph id=\"ph3\">`Hashtable`</ph><ept id=\"p3\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable)</ept> class and the <bpt id=\"p4\">[</bpt><ph id=\"ph4\">`Dictionary&lt;TKey, TValue&gt;`</ph><ept id=\"p4\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2)</ept> generic class.","pos":[4427,4920],"source":" The [`SortedList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList) class and the [`SortedList<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2) generic class provide sorted versions of the [`Hashtable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) class and the [`Dictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) generic class."},{"content":"The elements of a <ph id=\"ph1\">`Hashtable`</ph> or a <ph id=\"ph2\">`Dictionary&lt;TKey, TValue&gt;`</ph> are accessible only by the key of the element, but the elements of a <ph id=\"ph3\">`SortedList`</ph> or a <bpt id=\"p1\">[</bpt><ph id=\"ph4\">`KeyedCollection&lt;TKey, TItem&gt;`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2)</ept> are accessible either by the key or by the index of the element.","pos":[4921,5260],"source":" The elements of a `Hashtable` or a `Dictionary<TKey, TValue>` are accessible only by the key of the element, but the elements of a `SortedList` or a [`KeyedCollection<TKey, TItem>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2) are accessible either by the key or by the index of the element."},{"content":"The indexes in all collections are zero-based, except <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`Array`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Array)</ept>, which allows arrays that are not zero-based.","pos":[5261,5427],"source":" The indexes in all collections are zero-based, except [`Array`](https://docs.microsoft.com/dotnet/core/api/System.Array), which allows arrays that are not zero-based."},{"content":"The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements <bpt id=\"p1\">[</bpt><ph id=\"ph1\">`IEnumerable`</ph><ept id=\"p1\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable)</ept> or <bpt id=\"p2\">[</bpt><ph id=\"ph2\">`IEnumerable&lt;T&gt;`</ph><ept id=\"p2\">](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)</ept>.","pos":[5429,5752],"source":"The LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements [`IEnumerable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable) or [`IEnumerable<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1)."},{"content":"LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard foreach loops; and provide filtering, ordering and grouping capabilities.","pos":[5753,5938]},{"content":"LINQ queries can also improve performance.","pos":[5939,5981]},{"content":"Related Topics","pos":[5986,6000]},{"content":"Title","pos":[6002,6007]},{"content":"Description","pos":[6010,6021]},{"content":"Discusses the various collection types available in the .NET Framework, including stacks, queues, lists, arrays, and dictionaries.","pos":[6090,6220]},{"content":"Describes the features of generic and non-generic hash-based dictionary types.","pos":[6315,6393]},{"content":"Describes sorted collections performance and characteristics.","pos":[6452,6513]},{"content":"Reference","pos":[6518,6527]}],"content":"---\ntitle: Commonly Used Collection Types\ndescription: Commonly Used Collection Types\nkeywords: .NET, .NET Core\nauthor: mairaw\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 55861611-1e40-4cc2-9ec5-0b2df4ba6c0c\n---\n\n# Commonly Used Collection Types\n\nCollection types are the common variations of data collections, such as hash tables, queues, stacks, bags, dictionaries, and lists.\n\nCollections are based on the [`ICollection`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection) interface, the [`IList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList) interface, the [`IDictionary`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary) interface, or their generic counterparts. The `IList` interface and the `IDictionary` interface are both derived from the `ICollection` interface; therefore, all collections are based on the `ICollection` interface either directly or indirectly. In collections based on the `IList` interface (such as [`Array`](https://docs.microsoft.com/dotnet/core/api/System.Array), [`ArrayList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ArrayList), or [`List<T>)`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.List-1) or directly on the `ICollection` interface (such as [`Queue`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue), [`ConcurrentQueue<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentQueue-1), [`Stack`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack), [`ConcurrentStack<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentStack-1) or [`LinkedList<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.LinkedList-1)), every element contains only a value. In collections based on the `IDictionary` interface (such as the [`Hashtable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) and [`SortedList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList) classes, the [`Dictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) and [`SortedList<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2) generic classes), or the [`ConcurrentDictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent.ConcurrentDictionary-2) classes, every element contains both a key and a value. The [`KeyedCollection<TKey, TItem>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2) class is unique because it is a list of values with keys embedded within the values and, therefore, it behaves like a list and like a dictionary.\n\nGeneric collections are the best solution to strong typing. However, if your language does not support generics, the [`System.Collections`](https://docs.microsoft.com/dotnet/core/api/System.Collections) namespace includes base collections, such as [`CollectionBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.CollectionBase), [`ReadOnlyCollectionBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ReadOnlyCollectionBase), and [`DictionaryBase`](https://docs.microsoft.com/dotnet/core/api/System.Collections.DictionaryBase), which are abstract base classes that can be extended to create collection classes that are strongly typed. When efficient multi-threaded collection access is required, use the generic collections in the [`System.Collections.Concurrent`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Concurrent) namespace.\n\nCollections can vary, depending on how the elements are stored, how they are sorted, how searches are performed, and how comparisons are made. The [`Queue`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Queue) class and the [`Queue<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Queue-1) generic class provide first-in-first-out lists, while the [`Stack`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Stack) class and the [`Stack<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Stack-1) generic class provide last-in-first-out lists. The [`SortedList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.SortedList) class and the [`SortedList<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.SortedList-2) generic class provide sorted versions of the [`Hashtable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Hashtable) class and the [`Dictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.Dictionary-2) generic class. The elements of a `Hashtable` or a `Dictionary<TKey, TValue>` are accessible only by the key of the element, but the elements of a `SortedList` or a [`KeyedCollection<TKey, TItem>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ObjectModel.KeyedCollection-2) are accessible either by the key or by the index of the element. The indexes in all collections are zero-based, except [`Array`](https://docs.microsoft.com/dotnet/core/api/System.Array), which allows arrays that are not zero-based.\n\nThe LINQ to Objects feature allows you to use LINQ queries to access in-memory objects as long as the object type implements [`IEnumerable`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IEnumerable) or [`IEnumerable<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IEnumerable-1). LINQ queries provide a common pattern for accessing data; are typically more concise and readable than standard foreach loops; and provide filtering, ordering and grouping capabilities. LINQ queries can also improve performance.\n\n## Related Topics\n\nTitle | Description\n----- | -----------\n[`Collections and Data Structures`](index.md) | Discusses the various collection types available in the .NET Framework, including stacks, queues, lists, arrays, and dictionaries.\n[`Hashtable and Dictionary Collection Types`](hashtable-and-dictionary-collection-types.md) | Describes the features of generic and non-generic hash-based dictionary types.\n[`Sorted Collection Types`](sorted-collection-types.md) | Describes sorted collections performance and characteristics.\n\n## Reference\n\n[`System.Collections`](https://docs.microsoft.com/dotnet/core/api/System.Collections)\n\n[`System.Collections.Generic`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic)\n\n[`System.Collections.ICollection`](https://docs.microsoft.com/dotnet/core/api/System.Collections.ICollection)\n\n[`System.Collections.Generic.ICollection<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.ICollection-1)\n\n[`System.Collections.IList`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IList)\n\n[`System.Collections.Generic.IList<T>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IList-1)\n\n[`System.Collections.IDictionary`](https://docs.microsoft.com/dotnet/core/api/System.Collections.IDictionary)\n\n[`System.Collections.Generic.IDictionary<TKey, TValue>`](https://docs.microsoft.com/dotnet/core/api/System.Collections.Generic.IDictionary-2)\n\n[`System.Linq`](https://docs.microsoft.com/dotnet/core/api/System.Linq)\n"}