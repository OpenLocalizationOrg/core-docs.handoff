{"nodes":[{"pos":[11,61],"content":"Creating a NuGet Package with Cross Platform Tools","needQuote":true,"nodes":[{"content":"Creating a NuGet Package with Cross Platform Tools","pos":[0,50]}]},{"pos":[75,125],"content":"Creating a NuGet Package with Cross Platform Tools","needQuote":true,"nodes":[{"content":"Creating a NuGet Package with Cross Platform Tools","pos":[0,50]}]},{"pos":[136,158],"content":".NET, .NET Core, NuGet","needQuote":true,"nodes":[{"content":".NET, .NET Core, NuGet","pos":[0,22]}]},{"content":"How to Create a NuGet Package with Cross Platform Tools","pos":[364,419]},{"content":"<bpt id=\"p1\">**</bpt>Note:<ept id=\"p1\">**</ept> The following shows command-line samples using unix.","pos":[423,485],"source":"**Note:** The following shows command-line samples using unix."},{"content":"The <ph id=\"ph1\">`dotnet pack`</ph> command as shown here works the same way on Windows.","pos":[487,557],"source":"  The `dotnet pack` command as shown here works the same way on Windows."},{"content":"For .NET Core 1.0, libraries are expected to be distributed as NuGet packages.","pos":[559,637]},{"content":"This is in fact how all of the .NET Standard libraries are distributed and consumed.","pos":[639,723]},{"content":"This is most easily done with the <ph id=\"ph1\">`dotnet pack`</ph> command.","pos":[725,781],"source":"  This is most easily done with the `dotnet pack` command."},{"content":"Imagine that you just wrote an awesome new library that you would like to distribute over NuGet.","pos":[783,879]},{"content":"You can create a NuGet package with cross platform tools to do exactly that!","pos":[881,957]},{"content":"The following example assumes a library called <bpt id=\"p1\">**</bpt>SuperAwesomeLibrary<ept id=\"p1\">**</ept> which targets <ph id=\"ph1\">`netstandard1.0`</ph>.","pos":[959,1061],"source":"  The following example assumes a library called **SuperAwesomeLibrary** which targets `netstandard1.0`."},{"content":"If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the <ph id=\"ph1\">`dotnet restore`</ph> command before creating a NuGet package.","pos":[1063,1289],"source":"If you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the `dotnet restore` command before creating a NuGet package."},{"content":"Failing to do so will result in the <ph id=\"ph1\">`dotnet pack`</ph> command to not work properly.","pos":[1291,1370],"source":"  Failing to do so will result in the `dotnet pack` command to not work properly."},{"content":"After ensuring packages are restored, you can navigate to the directory where a library lives:","pos":[1372,1466]},{"content":"Then it's just a single command from the command line:","pos":[1500,1554]},{"pos":[1577,1626],"content":"Your <ph id=\"ph1\">`/bin/Debug`</ph> folder will now look like this:","source":"Your `/bin/Debug` folder will now look like this:"},{"content":"Note that this will produce a package which is capable of being debugged.","pos":[1741,1814]},{"content":"If you want to build a NuGet package with release binaries, all you need to do is add the <ph id=\"ph1\">`-c`/`--configuration`</ph> switch and use <ph id=\"ph2\">`release`</ph> as the argument.","pos":[1816,1970],"source":"  If you want to build a NuGet package with release binaries, all you need to do is add the `-c`/`--configuration` switch and use `release` as the argument."},{"pos":[2013,2117],"content":"Your <ph id=\"ph1\">`/bin`</ph> folder will now have a <ph id=\"ph2\">`release`</ph> folder containing your NuGet package with release binaries:","source":"Your `/bin` folder will now have a `release` folder containing your NuGet package with release binaries:"},{"content":"And now you have the necessary files to publish a NuGet package!","pos":[2234,2298]},{"pos":[2303,2335],"content":"Don't confuse <ph id=\"ph1\">`dotnet pack`</ph> with","source":"Don't confuse `dotnet pack` with "},{"content":"It is important to note that at no point is the <ph id=\"ph1\">`dotnet publish`</ph> command involved.","pos":[2354,2436],"source":"It is important to note that at no point is the `dotnet publish` command involved."},{"content":"The <ph id=\"ph1\">`dotnet publish`</ph> command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.","pos":[2438,2626],"source":"  The `dotnet publish` command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet."}],"content":"---\ntitle: Creating a NuGet Package with Cross Platform Tools\ndescription: Creating a NuGet Package with Cross Platform Tools\nkeywords: .NET, .NET Core, NuGet\nauthor: cartermp\nmanager: wpickett\nms.date: 06/20/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 2f0415c1-110b-433d-87c1-ae3d543a8844\n---\n\n# How to Create a NuGet Package with Cross Platform Tools\n\n> **Note:** The following shows command-line samples using unix.  The `dotnet pack` command as shown here works the same way on Windows.\n\nFor .NET Core 1.0, libraries are expected to be distributed as NuGet packages.  This is in fact how all of the .NET Standard libraries are distributed and consumed.  This is most easily done with the `dotnet pack` command.\n\nImagine that you just wrote an awesome new library that you would like to distribute over NuGet.  You can create a NuGet package with cross platform tools to do exactly that!  The following example assumes a library called **SuperAwesomeLibrary** which targets `netstandard1.0`.\n\nIf you have transitive dependencies; that is, a project which depends on another project, you'll need to make sure to restore packages for your entire solution with the `dotnet restore` command before creating a NuGet package.  Failing to do so will result in the `dotnet pack` command to not work properly.\n\nAfter ensuring packages are restored, you can navigate to the directory where a library lives:\n\n`$ cd src/SuperAwesomeLibrary`\n\nThen it's just a single command from the command line:\n    \n`$ dotnet pack`\n\nYour `/bin/Debug` folder will now look like this:\n\n```\n$ ls bin/Debug\n\nnetstandard1.0/\nSuperAwesomeLibrary.1.0.0.nupkg\nSuperAwesomeLibrary.1.0.0.symbols.nupkg\n```\n\nNote that this will produce a package which is capable of being debugged.  If you want to build a NuGet package with release binaries, all you need to do is add the `-c`/`--configuration` switch and use `release` as the argument.\n\n`$ dotnet pack --configuration release`\n\nYour `/bin` folder will now have a `release` folder containing your NuGet package with release binaries:\n\n```\n$ ls bin/release\n\nnetstandard1.0/\nSuperAwesomeLibrary.1.0.0.nupkg\nSuperAwesomeLibrary.1.0.0.symbols.nupkg\n```\n\nAnd now you have the necessary files to publish a NuGet package!\n\n## Don't confuse `dotnet pack` with `dotnet publish`\n\nIt is important to note that at no point is the `dotnet publish` command involved.  The `dotnet publish` command is for deploying applications with all of their dependencies in the same bundle -  not for generating a NuGet package to be distributed and consumed via NuGet.\n"}