{"nodes":[{"pos":[11,47],"content":"Getting started with F# on .NET Core","needQuote":true,"nodes":[{"content":"Getting started with F# on .NET Core","pos":[0,36]}]},{"pos":[61,97],"content":"Getting started with F# on .NET Core","needQuote":true,"nodes":[{"content":"Getting started with F# on .NET Core","pos":[0,36]}]},{"pos":[108,123],"content":".NET, .NET Core","needQuote":true,"nodes":[{"content":".NET, .NET Core","pos":[0,15]}]},{"content":"Getting started with F# on .NET Core","pos":[329,365]},{"content":"This article covers how you can get started with using F# on .NET Core with the ..NET Core SDK 1.0 Preview 2.","pos":[367,476]},{"content":"It will go through building a multi-project solution with a Class Library, a Console App, and an xUnit test project.","pos":[478,594]},{"content":"Prerequisites","pos":[599,612]},{"pos":[614,711],"content":"To begin, you must install the <bpt id=\"p1\">[</bpt>.NET Core SDK 1.0 Preview 2<ept id=\"p1\">](https://www.microsoft.com/net/core)</ept>.","source":"To begin, you must install the [.NET Core SDK 1.0 Preview 2](https://www.microsoft.com/net/core)."},{"content":"This article uses the command line and <bpt id=\"p1\">[</bpt>Visual Studio Code<ept id=\"p1\">](https://code.visualstudio.com)</ept> as the text editor.","pos":[713,823],"source":"This article uses the command line and [Visual Studio Code](https://code.visualstudio.com) as the text editor."},{"content":"You're free to use any editor you like, though.","pos":[825,872]},{"content":"To get awesome features like Intellisense, better syntax highlighting, and more, you can also download the <bpt id=\"p1\">[</bpt>Ionide Extension<ept id=\"p1\">](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp)</ept> and get a lightweight IDE experience in Visual Studio Code.","pos":[874,1133],"source":"  To get awesome features like Intellisense, better syntax highlighting, and more, you can also download the [Ionide Extension](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp) and get a lightweight IDE experience in Visual Studio Code."},{"content":"Building a Simple Multi-project Solution","pos":[1138,1178]},{"content":"Open up a Command Line/Terminal.","pos":[1183,1215]},{"content":"Create a new directory named <ph id=\"ph1\">`FSNetCore`</ph>.","pos":[1219,1260],"source":"Create a new directory named `FSNetCore`."},{"content":"Open Visual Studio code or your preferred editor inside this directory.","pos":[1262,1333]},{"pos":[1338,1393],"content":"Under <ph id=\"ph1\">`FSNetCore`</ph>, create <ph id=\"ph2\">`src`</ph> and <ph id=\"ph3\">`test`</ph> directories.","source":"Under `FSNetCore`, create `src` and `test` directories."},{"content":"Under <ph id=\"ph1\">`FSNetCore`</ph>, create a new file called <ph id=\"ph2\">`global.json`</ph>.","pos":[1397,1455],"source":"Under `FSNetCore`, create a new file called `global.json`."},{"content":"It should have this as its contents:","pos":[1457,1493]},{"content":"Your solutions structure should now look like this:","pos":[1545,1596]},{"content":"Writing a Class library","pos":[1657,1680]},{"pos":[1685,1733],"content":"Create a <ph id=\"ph1\">`Library`</ph> folder under <ph id=\"ph2\">`FSNetCore/src`</ph>.","source":"Create a `Library` folder under `FSNetCore/src`."},{"pos":[1737,1812],"content":"In the command line, execute <ph id=\"ph1\">`dotnet new -l F#`</ph> in <ph id=\"ph2\">`FSNetCore/src/Library`</ph>.","source":"In the command line, execute `dotnet new -l F#` in `FSNetCore/src/Library`."},{"pos":[1816,1847],"content":"Remove the <ph id=\"ph1\">`NuGet.Config`</ph> file.","source":"Remove the `NuGet.Config` file."},{"pos":[1851,1883],"content":"Rename <ph id=\"ph1\">`Program.fs`</ph> to <ph id=\"ph2\">`Lib.fs`</ph>.","source":"Rename `Program.fs` to `Lib.fs`."},{"pos":[1887,1974],"content":"Open the <ph id=\"ph1\">`project.json`</ph> file and remove the <ph id=\"ph2\">`emitEntryPoint`</ph> entry from <ph id=\"ph3\">`buildOptions`</ph>.","source":"Open the `project.json` file and remove the `emitEntryPoint` entry from `buildOptions`."},{"pos":[1978,2056],"content":"Under <ph id=\"ph1\">`buildOptions/compile/includeFiles`</ph>, replace <ph id=\"ph2\">`Program.fs`</ph> with <ph id=\"ph3\">`Lib.fs`</ph>.","source":"Under `buildOptions/compile/includeFiles`, replace `Program.fs` with `Lib.fs`."},{"pos":[2060,2101],"content":"Remove the global <ph id=\"ph1\">`dependencies`</ph> section.","source":"Remove the global `dependencies` section."},{"pos":[2105,2168],"content":"Under <ph id=\"ph1\">`tools/dotnet-compile-fsc`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `tools/dotnet-compile-fsc`, remove the `imports` section."},{"pos":[2172,2235],"content":"Under <ph id=\"ph1\">`frameworks`</ph>, change <ph id=\"ph2\">`netcoreapp1.0`</ph> to <ph id=\"ph3\">`netstandard1.6`</ph>.","source":"Under `frameworks`, change `netcoreapp1.0` to `netstandard1.6`."},{"pos":[2240,2304],"content":"Under <ph id=\"ph1\">`frameworks/netstandard1.6`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `frameworks/netstandard1.6`, remove the `imports` section."},{"content":"Under <ph id=\"ph1\">`frameworks/netstandard1.6/dependencies`</ph>, replace the <ph id=\"ph2\">`Microsoft.NETCore.App`</ph> package with <ph id=\"ph3\">`\"NETStandard.Library\":\"1.6.0\"`</ph>.","pos":[2309,2438],"source":"Under `frameworks/netstandard1.6/dependencies`, replace the `Microsoft.NETCore.App` package with `\"NETStandard.Library\":\"1.6.0\"`."},{"content":"Add <ph id=\"ph1\">`\"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\"`</ph> and <ph id=\"ph2\">`\"Newtonsoft.Json\": \"9.0.1\"`</ph>.","pos":[2440,2533],"source":"  Add `\"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\"` and `\"Newtonsoft.Json\": \"9.0.1\"`."},{"pos":[2538,2598],"content":"Open <ph id=\"ph1\">`Lib.fs`</ph> and change the contents to the following code:","source":"Open `Lib.fs` and change the contents to the following code:"},{"content":"Run <ph id=\"ph1\">`dotnet restore`</ph> and <ph id=\"ph2\">`dotnet build`</ph>.","pos":[2799,2839],"source":"Run `dotnet restore` and `dotnet build`."},{"content":"These should succeed.","pos":[2841,2862]},{"pos":[2864,2911],"content":"Your <ph id=\"ph1\">`project.json`</ph> file should look like this:","source":"Your `project.json` file should look like this:"},{"pos":[3365,3410],"content":"And your <ph id=\"ph1\">`Lib.fs`</ph> file should look like this:","source":"And your `Lib.fs` file should look like this:"},{"content":"Writing a Console Application which Consumes the Class Library","pos":[3587,3649]},{"pos":[3654,3699],"content":"Create an <ph id=\"ph1\">`App`</ph> folder under <ph id=\"ph2\">`FSNetCore/src`</ph>.","source":"Create an `App` folder under `FSNetCore/src`."},{"pos":[3703,3774],"content":"In the command line, execute <ph id=\"ph1\">`dotnet new -l F#`</ph> in <ph id=\"ph2\">`FSNetCore/src/App`</ph>.","source":"In the command line, execute `dotnet new -l F#` in `FSNetCore/src/App`."},{"pos":[3778,3809],"content":"Remove the <ph id=\"ph1\">`NuGet.Config`</ph> file.","source":"Remove the `NuGet.Config` file."},{"pos":[3813,3842],"content":"Open the <ph id=\"ph1\">`project.json`</ph> file.","source":"Open the `project.json` file."},{"pos":[3846,3887],"content":"Remove the global <ph id=\"ph1\">`dependencies`</ph> section.","source":"Remove the global `dependencies` section."},{"pos":[3891,3954],"content":"Under <ph id=\"ph1\">`tools/dotnet-compile-fsc`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `tools/dotnet-compile-fsc`, remove the `imports` section."},{"pos":[3958,4022],"content":"Under <ph id=\"ph1\">`frameworks/netcoreapp1.0/`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `frameworks/netcoreapp1.0/`, remove the `imports` section."},{"pos":[4026,4121],"content":"Under <ph id=\"ph1\">`frameworks/netcoreapp1.0/dependencies`</ph>, add the following after <ph id=\"ph2\">`Microsoft.NETCore.App`</ph>:","source":"Under `frameworks/netcoreapp1.0/dependencies`, add the following after `Microsoft.NETCore.App`:"},{"pos":[4279,4302],"content":"Change <ph id=\"ph1\">`Program.fs`</ph> to:","source":"Change `Program.fs` to:"},{"content":"Enter <ph id=\"ph1\">`dotnet restore`</ph> and <ph id=\"ph2\">`dotnet build`</ph> into the command line.","pos":[4623,4687],"source":"Enter `dotnet restore` and `dotnet build` into the command line."},{"content":"These should succeed.","pos":[4689,4710]},{"content":"Enter <ph id=\"ph1\">`dotnet run Hello World`</ph> into the command line.","pos":[4715,4768],"source":"Enter `dotnet run Hello World` into the command line."},{"content":"You should see results like this:","pos":[4770,4803]},{"pos":[4973,5020],"content":"Your <ph id=\"ph1\">`project.json`</ph> file should look like this:","source":"Your `project.json` file should look like this:"},{"pos":[5621,5670],"content":"And your <ph id=\"ph1\">`Program.fs`</ph> file should look like this:","source":"And your `Program.fs` file should look like this:"},{"content":"Testing the Class Library with xUnit.net","pos":[5951,5991]},{"pos":[5996,6049],"content":"Create a <ph id=\"ph1\">`TestLibrary`</ph> folder under <ph id=\"ph2\">`NETCoreFS/test`</ph>.","source":"Create a `TestLibrary` folder under `NETCoreFS/test`."},{"pos":[6053,6126],"content":"In the command line, execute <ph id=\"ph1\">`dotnet new -l F#`</ph> in <ph id=\"ph2\">`FSNetCore/src/Tests`</ph>.","source":"In the command line, execute `dotnet new -l F#` in `FSNetCore/src/Tests`."},{"pos":[6130,6156],"content":"Remove the <ph id=\"ph1\">`NuGet.Config`</ph>.","source":"Remove the `NuGet.Config`."},{"pos":[6160,6194],"content":"Rename <ph id=\"ph1\">`Program.fs`</ph> to <ph id=\"ph2\">`Tests.fs`</ph>.","source":"Rename `Program.fs` to `Tests.fs`."},{"pos":[6198,6227],"content":"Open the <ph id=\"ph1\">`project.json`</ph> file.","source":"Open the `project.json` file."},{"pos":[6231,6286],"content":"Remove the <ph id=\"ph1\">`emitEntryPoint`</ph> entry under <ph id=\"ph2\">`buildOptions`</ph>.","source":"Remove the `emitEntryPoint` entry under `buildOptions`."},{"pos":[6290,6370],"content":"Under <ph id=\"ph1\">`buildOptions/compile/includeFiles`</ph>, replace <ph id=\"ph2\">`Program.fs`</ph> with <ph id=\"ph3\">`Tests.fs`</ph>.","source":"Under `buildOptions/compile/includeFiles`, replace `Program.fs` with `Tests.fs`."},{"pos":[6374,6415],"content":"Remove the global <ph id=\"ph1\">`dependencies`</ph> section.","source":"Remove the global `dependencies` section."},{"pos":[6420,6483],"content":"Under <ph id=\"ph1\">`tools/dotnet-compile-fsc`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `tools/dotnet-compile-fsc`, remove the `imports` section."},{"pos":[6487,6551],"content":"Under <ph id=\"ph1\">`frameworks/netcoreapp1.0/`</ph>, remove the <ph id=\"ph2\">`imports`</ph> section.","source":"Under `frameworks/netcoreapp1.0/`, remove the `imports` section."},{"pos":[6556,6651],"content":"Under <ph id=\"ph1\">`frameworks/netcoreapp1.0/dependencies`</ph>, add the following after <ph id=\"ph2\">`Microsoft.NETCore.App`</ph>:","source":"Under `frameworks/netcoreapp1.0/dependencies`, add the following after `Microsoft.NETCore.App`:"},{"content":"After the <ph id=\"ph1\">`frameworks`</ph> section, add <ph id=\"ph2\">`\"testRunner\":\"xunit\"`</ph>.","pos":[6901,6960],"source":"After the `frameworks` section, add `\"testRunner\":\"xunit\"`."},{"content":"Note that you can add this section anywhere in the <ph id=\"ph1\">`project.json`</ph> file.","pos":[6962,7033],"source":"  Note that you can add this section anywhere in the `project.json` file."},{"pos":[7038,7077],"content":"In <ph id=\"ph1\">`test.fs`</ph>, paste the following code:","source":"In `test.fs`, paste the following code:"},{"pos":[7377,7417],"content":"Run <ph id=\"ph1\">`dotnet restore`</ph> and <ph id=\"ph2\">`dotnet build`</ph>.","source":"Run `dotnet restore` and `dotnet build`."},{"pos":[7419,7502],"content":"You should now be able to run the test and verify it passes by doing <ph id=\"ph1\">`dotnet test`</ph>.","source":"You should now be able to run the test and verify it passes by doing `dotnet test`."},{"pos":[7506,7635],"content":"[!NOTE]\nThis will temporarily fail on macOS. [There is an issue here to track this](https://github.com/xunit/xunit/issues/859).","leadings":["","> "],"nodes":[{"content":"This will temporarily fail on macOS. [There is an issue here to track this](https://github.com/xunit/xunit/issues/859).","pos":[8,127],"nodes":[{"content":"This will temporarily fail on macOS.","pos":[0,36]},{"content":"<bpt id=\"p1\">[</bpt>There is an issue here to track this<ept id=\"p1\">](https://github.com/xunit/xunit/issues/859)</ept>.","pos":[37,119],"source":"[There is an issue here to track this](https://github.com/xunit/xunit/issues/859)."}]}]},{"pos":[7637,7684],"content":"Your <ph id=\"ph1\">`project.json`</ph> file should look like this:","source":"Your `project.json` file should look like this:"},{"pos":[8379,8426],"content":"And your <ph id=\"ph1\">`Tests.fs`</ph> file should look like this:","source":"And your `Tests.fs` file should look like this:"}],"content":"---\ntitle: Getting started with F# on .NET Core\ndescription: Getting started with F# on .NET Core\nkeywords: .NET, .NET Core\nauthor: cartermp\nmanager: wpickett\nms.date: 07/01/2016\nms.topic: article\nms.prod: .net-core\nms.technology: .net-core-technologies\nms.devlang: dotnet\nms.assetid: 615db1ec-6ef3-4de2-bae6-4586affa9771\n---\n\n# Getting started with F# on .NET Core\n\nThis article covers how you can get started with using F# on .NET Core with the ..NET Core SDK 1.0 Preview 2.  It will go through building a multi-project solution with a Class Library, a Console App, and an xUnit test project.\n\n## Prerequisites\n\nTo begin, you must install the [.NET Core SDK 1.0 Preview 2](https://www.microsoft.com/net/core).\n\nThis article uses the command line and [Visual Studio Code](https://code.visualstudio.com) as the text editor.  You're free to use any editor you like, though.  To get awesome features like Intellisense, better syntax highlighting, and more, you can also download the [Ionide Extension](https://marketplace.visualstudio.com/items?itemName=Ionide.Ionide-fsharp) and get a lightweight IDE experience in Visual Studio Code.\n\n## Building a Simple Multi-project Solution\n\n1. Open up a Command Line/Terminal.\n2. Create a new directory named `FSNetCore`.  Open Visual Studio code or your preferred editor inside this directory. \n3. Under `FSNetCore`, create `src` and `test` directories.\n4. Under `FSNetCore`, create a new file called `global.json`.  It should have this as its contents:\n\n```json\n{\n    \"projects\":[ \"src\", \"test\" ]\n}\n```\n\nYour solutions structure should now look like this:\n\n```\nFSNetCore/\n|---src/\n|---test/\n|---global.json\n```\n\n### Writing a Class library\n\n1. Create a `Library` folder under `FSNetCore/src`.\n2. In the command line, execute `dotnet new -l F#` in `FSNetCore/src/Library`.\n3. Remove the `NuGet.Config` file.\n4. Rename `Program.fs` to `Lib.fs`.\n5. Open the `project.json` file and remove the `emitEntryPoint` entry from `buildOptions`.\n6. Under `buildOptions/compile/includeFiles`, replace `Program.fs` with `Lib.fs`.\n7. Remove the global `dependencies` section.\n8. Under `tools/dotnet-compile-fsc`, remove the `imports` section.\n9. Under `frameworks`, change `netcoreapp1.0` to `netstandard1.6`.\n11. Under `frameworks/netstandard1.6`, remove the `imports` section.\n12. Under `frameworks/netstandard1.6/dependencies`, replace the `Microsoft.NETCore.App` package with `\"NETStandard.Library\":\"1.6.0\"`.  Add `\"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\"` and `\"Newtonsoft.Json\": \"9.0.1\"`.\n13. Open `Lib.fs` and change the contents to the following code:\n\n    ```fsharp\n    module Library\n\n    open Newtonsoft.Json\n\n    let getJsonNetJson value = \n        sprintf \"I used to be %s but now I'm %s!\" value  (JsonConvert.SerializeObject(value))\n    ```\n\n14. Run `dotnet restore` and `dotnet build`.  These should succeed.\n\nYour `project.json` file should look like this:\n\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"compilerName\": \"fsc\",\n    \"compile\": {\n      \"includeFiles\": [\n        \"Lib.fs\"\n      ]\n    }\n  },\n  \"tools\": {\n    \"dotnet-compile-fsc\":\"1.0.0-preview2-*\"\n  },\n  \"frameworks\": {\n    \"netstandard1.6\": {\n      \"dependencies\": {\n        \"NETStandard.Library\":\"1.6.0\",\n        \"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\",\n        \"Newtonsoft.Json\": \"9.0.1\"    \n      }\n    }\n  }\n}\n```\n\nAnd your `Lib.fs` file should look like this:\n\n```fsharp\nmodule Library\n\nopen Newtonsoft.Json\n\nlet getJsonNetJson value = \n    sprintf \"I used to be %s but now I'm %s!\" value  (JsonConvert.SerializeObject(value))\n```\n\n### Writing a Console Application which Consumes the Class Library\n\n1. Create an `App` folder under `FSNetCore/src`.\n2. In the command line, execute `dotnet new -l F#` in `FSNetCore/src/App`.\n3. Remove the `NuGet.Config` file.\n4. Open the `project.json` file.\n5. Remove the global `dependencies` section.\n6. Under `tools/dotnet-compile-fsc`, remove the `imports` section.\n7. Under `frameworks/netcoreapp1.0/`, remove the `imports` section.\n8. Under `frameworks/netcoreapp1.0/dependencies`, add the following after `Microsoft.NETCore.App`:\n\n    ```json\n    \"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\",\n    \"Library\":{\n      \"version\":\"1.0.0\",\n      \"target\": \"project\"\n    }\n    ```\n\n9. Change `Program.fs` to:\n\n    ```fs\n    open System\n    open Library\n\n    [<EntryPoint>]\n    let main argv = \n        printfn \"Nice command line arguments!.  Here's what JSON.NET has to say about them:\"\n\n        argv\n        |> Array.map getJsonNetJson\n        |> Array.iter (printfn \"%s\")\n\n        0 // return an integer exit code\n    ```\n\n10. Enter `dotnet restore` and `dotnet build` into the command line.  These should succeed.\n11. Enter `dotnet run Hello World` into the command line.  You should see results like this:\n\n```\nNice command line arguments!  Here's what JSON.NET has to say about them:\n\nI used to be Hello but now I'm \"\"Hello\"\"!\nI used to be World but now I'm \"\"World\"\"!\n```\n\nYour `project.json` file should look like this:\n\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true,\n    \"compilerName\": \"fsc\",\n    \"compile\": {\n      \"includeFiles\": [\n        \"Program.fs\"\n      ]\n    }\n  },\n  \"tools\": {\n    \"dotnet-compile-fsc\":\"1.0.0-preview2-*\"\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"dependencies\": {\n        \"Microsoft.NETCore.App\": {\n          \"type\": \"platform\",\n          \"version\": \"1.0.0\"\n        },\n        \"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\",\n        \"Library\":{\n          \"version\":\"1.0.0\",\n          \"target\": \"project\"\n        }\n      }\n    }\n  }\n}\n```\n\nAnd your `Program.fs` file should look like this:\n\n```fsharp\nopen System\nopen Library\n\n[<EntryPoint>]\nlet main argv = \n    printfn \"Nice command line arguments!.  Here's what JSON.NET has to say about them:\"\n\n    argv\n    |> Array.map getJsonNetJson\n    |> Array.iter (printfn \"%s\")\n\n    0 // return an integer exit code\n```\n\n### Testing the Class Library with xUnit.net\n\n1. Create a `TestLibrary` folder under `NETCoreFS/test`.\n2. In the command line, execute `dotnet new -l F#` in `FSNetCore/src/Tests`.\n3. Remove the `NuGet.Config`.\n4. Rename `Program.fs` to `Tests.fs`.\n5. Open the `project.json` file.\n6. Remove the `emitEntryPoint` entry under `buildOptions`.\n7. Under `buildOptions/compile/includeFiles`, replace `Program.fs` with `Tests.fs`.\n8. Remove the global `dependencies` section. \n9. Under `tools/dotnet-compile-fsc`, remove the `imports` section.\n9. Under `frameworks/netcoreapp1.0/`, remove the `imports` section.\n10. Under `frameworks/netcoreapp1.0/dependencies`, add the following after `Microsoft.NETCore.App`:\n\n    ```json\n    \"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\",\n    \"xunit\":\"2.2.0-beta2-build3300\",\n    \"dotnet-test-xunit\":\"2.2.0-preview2-build1029\",\n    \"Library\":{\n      \"version\": \"1.0.0\",\n      \"target\": \"project\"\n    },\n    ```\n\n11. After the `frameworks` section, add `\"testRunner\":\"xunit\"`.  Note that you can add this section anywhere in the `project.json` file.\n12. In `test.fs`, paste the following code:\n\n    ```fs\n    module Test\n\n    open Xunit\n    open Library\n\n    [<Fact>]    \n    let ``Library converts \"Banana\" correctly``() =\n        let expected = \"\"\"I used to be Banana but now I'm \"Banana\"!\"\"\"\n        let actual =  getJsonNetJson \"Banana\"\n        Assert.Equal(expected, actual)\n    ```\n\n10. Run `dotnet restore` and `dotnet build`.\n\nYou should now be able to run the test and verify it passes by doing `dotnet test`.\n\n> [!NOTE]\n> This will temporarily fail on macOS. [There is an issue here to track this](https://github.com/xunit/xunit/issues/859).\n\nYour `project.json` file should look like this:\n\n```json\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"compilerName\": \"fsc\",\n    \"compile\": {\n      \"includeFiles\": [\n        \"Tests.fs\"\n      ]\n    }\n  },\n  \"tools\": {\n    \"dotnet-compile-fsc\":\"1.0.0-preview2-*\"\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"dependencies\": {\n        \"Microsoft.NETCore.App\": {\n          \"type\": \"platform\",\n          \"version\": \"1.0.0\"\n        },\n        \"Microsoft.FSharp.Core.netcore\": \"1.0.0-alpha-160629\",\n        \"xunit\":\"2.2.0-beta2-build3300\",\n        \"dotnet-test-xunit\":\"2.2.0-preview2-build1029\",\n        \"Library\":{\n          \"version\": \"1.0.0\",\n          \"target\": \"project\"\n        },\n      }\n    }\n  },\n  \"testRunner\": \"xunit\"\n}\n```\n\nAnd your `Tests.fs` file should look like this:\n\n```fsharp\nmodule Test\n\nopen Xunit\nopen Library\n\n[<Fact>]    \nlet ``Library converts \"Banana\" correctly``() =\n    let expected = \"\"\"I used to be Banana but now I'm \"Banana\"!\"\"\"\n    let actual =  getJsonNetJson \"Banana\"\n    Assert.Equal(expected, actual)\n```"}