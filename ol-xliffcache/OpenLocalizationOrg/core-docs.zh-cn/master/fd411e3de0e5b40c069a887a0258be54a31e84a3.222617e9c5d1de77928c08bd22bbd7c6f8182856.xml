{"nodes":[{"content":"101 C# LINQ Samples","pos":[0,19]},{"pos":[38,205],"content":"Learn how to use LINQ in your applications with these code samples, covering the entire range of LINQ functionality and demonstrating LINQ to objects, and LINQ to XML.","source":"Learn how to use LINQ in your applications with these code samples, covering the entire range of LINQ functionality and demonstrating LINQ\nto objects, and LINQ to XML."},{"content":"aggregate","pos":[207,216]},{"content":"Learn how to generate a single value from a sequence","pos":[228,280]},{"content":"concatenation","pos":[282,295]},{"content":"Combine multiple sequences into a single source sequence.","pos":[307,364]},{"content":"conversion","pos":[366,376]},{"content":"Convert sequences of one type into another.","pos":[388,431]},{"content":"customsequence","pos":[433,447]},{"content":"Learn how to build seqeunces from multiple inputs.","pos":[459,509]},{"content":"element","pos":[511,518]},{"content":"Use the index of items in a sequence during a query.","pos":[530,582]},{"content":"equality","pos":[584,592]},{"content":"Compare sequences for equality.","pos":[604,635]},{"content":"generation","pos":[637,647]},{"content":"Generate sequences by running a query.","pos":[659,697]},{"content":"grouping","pos":[699,707]},{"content":"Group items into sub-sequences.","pos":[719,750]},{"content":"join","pos":[752,756]},{"pos":[768,851],"content":"Combine multiple sequences into a single sequence by matching values on properties.","source":"Combine multiple sequences into a single sequence\nby matching values on properties."},{"content":"ordering","pos":[854,862]},{"content":"Sort sequences.","pos":[874,889]},{"content":"projection","pos":[891,901]},{"content":"Transform sequences into new types.","pos":[913,948]},{"content":"quantifer","pos":[950,959]},{"content":"Test for all or any elements matching a condition.","pos":[971,1021]},{"content":"queryexecution","pos":[1023,1037]},{"content":"Learn about deferred and immediate query execution.","pos":[1049,1100]},{"content":"restriction","pos":[1102,1113]},{"pos":[1125,1156],"content":"Filter sequences using <ph id=\"ph1\">`Where`</ph>.","source":"Filter sequences using `Where`."},{"content":"setoperators","pos":[1158,1170]},{"pos":[1182,1264],"content":"Learn about set operations such as <ph id=\"ph1\">`Distinct`</ph>, <ph id=\"ph2\">`Except`</ph>, <ph id=\"ph3\">`Intersect`</ph>, and <ph id=\"ph4\">`Union`</ph>.","source":"Learn about set operations such as `Distinct`, `Except`, `Intersect`,\nand `Union`."},{"content":"Build and Run","pos":[1267,1280]},{"content":"To build and run the sample, type the following three commands in any of the subdirectories:","pos":[1296,1388]},{"content":"installs all the dependencies for this sample into the current directory.","pos":[1453,1526]},{"content":"creates the output assembly (or assemblies).","pos":[1542,1586]},{"content":"runs the output assembly.","pos":[1600,1625]}],"content":"101 C# LINQ Samples\n================\n\nLearn how to use LINQ in your applications with these code samples, covering the entire range of LINQ functionality and demonstrating LINQ\nto objects, and LINQ to XML.\n\naggregate\n---------\n\nLearn how to generate a single value from a sequence\n\nconcatenation\n---------\n\nCombine multiple sequences into a single source sequence.\n\nconversion\n---------\n\nConvert sequences of one type into another.\n\ncustomsequence\n---------\n\nLearn how to build seqeunces from multiple inputs.\n\nelement\n---------\n\nUse the index of items in a sequence during a query.\n\nequality\n---------\n\nCompare sequences for equality.\n\ngeneration\n---------\n\nGenerate sequences by running a query.\n\ngrouping\n---------\n\nGroup items into sub-sequences.\n\njoin\n---------\n\nCombine multiple sequences into a single sequence\nby matching values on properties.\n\n\nordering\n---------\n\nSort sequences.\n\nprojection\n---------\n\nTransform sequences into new types.\n\nquantifer\n---------\n\nTest for all or any elements matching a condition.\n\nqueryexecution\n---------\n\nLearn about deferred and immediate query execution.\n\nrestriction\n---------\n\nFilter sequences using `Where`.\n\nsetoperators\n---------\n\nLearn about set operations such as `Distinct`, `Except`, `Intersect`,\nand `Union`. \n\nBuild and Run\n=============\n\nTo build and run the sample, type the following three commands in any of the subdirectories:\n\n`dotnet restore`\n`dotnet build`\n`dotnet run`\n\n`dotnet restore` installs all the dependencies for this sample into the current directory.\n`dotnet build` creates the output assembly (or assemblies).\n`dotnet run` runs the output assembly.\n"}