{"nodes":[{"pos":[800,822],"content":"PropertyInfoExtensions","needQuote":true,"nodes":[{"content":"PropertyInfoExtensions","pos":[0,22]}]},{"pos":[2201,2227],"content":"GetAccessors(PropertyInfo)","needQuote":true,"nodes":[{"content":"GetAccessors(PropertyInfo)","pos":[0,26]}]},{"pos":[3633,3668],"content":"GetAccessors(PropertyInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetAccessors(PropertyInfo, Boolean)","pos":[0,35]}]},{"pos":[5139,5165],"content":"GetGetMethod(PropertyInfo)","needQuote":true,"nodes":[{"content":"GetGetMethod(PropertyInfo)","pos":[0,26]}]},{"pos":[6565,6600],"content":"GetGetMethod(PropertyInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetGetMethod(PropertyInfo, Boolean)","pos":[0,35]}]},{"pos":[8065,8091],"content":"GetSetMethod(PropertyInfo)","needQuote":true,"nodes":[{"content":"GetSetMethod(PropertyInfo)","pos":[0,26]}]},{"pos":[9491,9526],"content":"GetSetMethod(PropertyInfo, Boolean)","needQuote":true,"nodes":[{"content":"GetSetMethod(PropertyInfo, Boolean)","pos":[0,35]}]},{"pos":[10732,10749],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[10909,10915],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11084,11094],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11223,11231],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11334,11335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11382,11383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11473,11481],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11584,11585],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11632,11633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11815,11829],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11986,11992],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12091,12092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12162,12168],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12253,12254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12357,12363],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12462,12463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12533,12539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12624,12625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12835,12857],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13051,13057],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13156,13157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13227,13233],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13319,13320]},{"pos":[13398,13404],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13489,13490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13607,13613],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13712,13713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13783,13789],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13875,13876]},{"pos":[13954,13960],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14045,14046],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14274,14305],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14526,14541],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14658,14659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14729,14735],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14821,14822]},{"pos":[14900,14906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14991,14992],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15118,15133],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15250,15251],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15321,15327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15413,15414]},{"pos":[15492,15498],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15583,15584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15746,15759],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15897,15908],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16017,16018],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16065,16066],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16159,16170],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16279,16280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16327,16328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16482,16491],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[16617,16624],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16725,16726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16773,16774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16863,16870],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16971,16972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17019,17020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17190,17207],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[17357,17372],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17489,17490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17537,17538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17635,17650],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17767,17768],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17815,17816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17917,17923],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[18106,18118],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[18237,18249],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[18487,18497],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[18581,18583]},{"pos":[18686,18696],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[18779,18781],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[18917,18924],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[19112,19122],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]}],"content":"items:\n- uid: System.Reflection.PropertyInfoExtensions\n  commentId: T:System.Reflection.PropertyInfoExtensions\n  id: PropertyInfoExtensions\n  parent: System.Reflection\n  children:\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  - System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: PropertyInfoExtensions\n  nameWithType: PropertyInfoExtensions\n  fullName: System.Reflection.PropertyInfoExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropertyInfoExtensions\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 40\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public class PropertyInfoExtensions\n    content.vb: Public Class PropertyInfoExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  id: GetAccessors(System.Reflection.PropertyInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAccessors(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo)\n  fullName: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAccessors\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 42\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo[] GetAccessors(this PropertyInfo property)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAccessors(property As PropertyInfo) As MethodInfo()\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  id: GetAccessors(System.Reflection.PropertyInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetAccessors(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetAccessors(PropertyInfo, Boolean)\n  fullName: System.Reflection.PropertyInfoExtensions.GetAccessors(System.Reflection.PropertyInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAccessors\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 43\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo[] GetAccessors(this PropertyInfo property, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetAccessors(property As PropertyInfo, nonPublic As Boolean) As MethodInfo()\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  id: GetGetMethod(System.Reflection.PropertyInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetGetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo)\n  fullName: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 44\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetGetMethod(this PropertyInfo property)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetGetMethod(property As PropertyInfo) As MethodInfo\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  id: GetGetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetGetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetGetMethod(PropertyInfo, Boolean)\n  fullName: System.Reflection.PropertyInfoExtensions.GetGetMethod(System.Reflection.PropertyInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetGetMethod(this PropertyInfo property, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetGetMethod(property As PropertyInfo, nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  id: GetSetMethod(System.Reflection.PropertyInfo)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetSetMethod(PropertyInfo)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo)\n  fullName: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 46\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetSetMethod(this PropertyInfo property)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetSetMethod(property As PropertyInfo) As MethodInfo\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  commentId: M:System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  id: GetSetMethod(System.Reflection.PropertyInfo,System.Boolean)\n  isExtensionMethod: true\n  parent: System.Reflection.PropertyInfoExtensions\n  langs:\n  - csharp\n  - vb\n  name: GetSetMethod(PropertyInfo, Boolean)\n  nameWithType: PropertyInfoExtensions.GetSetMethod(PropertyInfo, Boolean)\n  fullName: System.Reflection.PropertyInfoExtensions.GetSetMethod(System.Reflection.PropertyInfo, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSetMethod\n    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs\n    startLine: 47\n  assemblies:\n  - System.Reflection.TypeExtensions\n  namespace: System.Reflection\n  syntax:\n    content: public static MethodInfo GetSetMethod(this PropertyInfo property, bool nonPublic)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function GetSetMethod(property As PropertyInfo, nonPublic As Boolean) As MethodInfo\n    parameters:\n    - id: property\n      type: System.Reflection.PropertyInfo\n    - id: nonPublic\n      type: System.Boolean\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Reflection\n  commentId: N:System.Reflection\n  isExternal: false\n  name: System.Reflection\n  nameWithType: System.Reflection\n  fullName: System.Reflection\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Reflection.PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  nameWithType: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  nameWithType: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  nameWithType.vb: MethodInfo()\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    nameWithType: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  nameWithType: MethodInfo\n  fullName: System.Reflection.MethodInfo\n"}