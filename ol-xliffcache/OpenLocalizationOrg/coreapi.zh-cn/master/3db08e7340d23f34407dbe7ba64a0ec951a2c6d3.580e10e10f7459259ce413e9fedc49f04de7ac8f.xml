{"nodes":[{"pos":[929,951],"content":"EventRegistrationToken","needQuote":true,"nodes":[{"content":"EventRegistrationToken","pos":[0,22]}]},{"pos":[2750,2764],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare.&lt;/p&gt;\\n","pos":[3663,3696],"source":"\\n<p>The object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt;  if the current object is equal to &lt;em&gt;obj&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3757,3875],"source":"\\n<p>\\n<strong>true</strong>  if the current object is equal to <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4385,4398],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for this instance.","pos":[5208,5245],"source":"\\n<p>The hash code for this instance."},{"content":"&lt;/p&gt;\\n","pos":[5246,5252],"source":" </p>\\n"},{"pos":[6168,6224],"content":"Equality(EventRegistrationToken, EventRegistrationToken)","needQuote":true,"nodes":[{"content":"Equality(EventRegistrationToken, EventRegistrationToken)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The first instance to compare.","pos":[7485,7520],"source":"\\n<p>The first instance to compare."},{"content":"&lt;/p&gt;\\n","pos":[7521,7527],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second instance to compare.","pos":[7646,7682],"source":"\\n<p>The second instance to compare."},{"content":"&lt;/p&gt;\\n","pos":[7683,7689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two objects are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[7750,7843],"source":"\\n<p>\\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7844,7850],"source":" </p>\\n"},{"pos":[8767,8825],"content":"Inequality(EventRegistrationToken, EventRegistrationToken)","needQuote":true,"nodes":[{"content":"Inequality(EventRegistrationToken, EventRegistrationToken)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The first instance to compare.","pos":[10094,10129],"source":"\\n<p>The first instance to compare."},{"content":"&lt;/p&gt;\\n","pos":[10130,10136],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second instance to compare.","pos":[10255,10291],"source":"\\n<p>The second instance to compare."},{"content":"&lt;/p&gt;\\n","pos":[10292,10298],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two instances are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10359,10458],"source":"\\n<p>\\n<strong>true</strong> if the two instances are not equal; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10459,10465],"source":" </p>\\n"},{"pos":[10738,10783],"content":"System.Runtime.InteropServices.WindowsRuntime","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices.WindowsRuntime","pos":[0,45]}]},{"pos":[11053,11063],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11164,11172],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11223,11224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11251,11252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11325,11333],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11384,11385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11412,11413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11616,11638],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11786,11792],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11859,11860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11910,11916],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11977,11978]},{"pos":[12033,12039],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12099,12100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12197,12203],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12270,12271],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12321,12327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12388,12389]},{"pos":[12444,12450],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12510,12511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12756,12787],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12953,12968],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13044,13045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13095,13101],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13162,13163]},{"pos":[13218,13224],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13284,13285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13391,13406],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13482,13483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13533,13539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13600,13601]},{"pos":[13656,13662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13722,13723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13949,13958],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14051,14058],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14126,14127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14154,14155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14224,14231],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14299,14300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14327,14328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14484,14493],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[14647,14653],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14774,14780],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14945,14959],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15084,15090],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15139,15140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15190,15196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15256,15257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15343,15349],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15398,15399],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15449,15455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15515,15516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15695,15702],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[15875,15888],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15995,16006],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16060,16061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16088,16089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16165,16176],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16230,16231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16258,16259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16425,16430],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[16666,16688],"content":"EventRegistrationToken","needQuote":true,"nodes":[{"content":"EventRegistrationToken","pos":[0,22]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  id: EventRegistrationToken\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  children:\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equals(System.Object)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.GetHashCode\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  - System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  langs:\n  - csharp\n  - vb\n  name: EventRegistrationToken\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EventRegistrationToken\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n    startLine: 13\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>A token that is returned when an event handler is added to a Windows Runtime event. The token is used to remove the event handler from the event at a later time. </p>\\n\"\n  syntax:\n    content: public struct EventRegistrationToken\n    content.vb: Public Structure EventRegistrationToken\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: EventRegistrationToken\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equals(System.Object)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n    startLine: 37\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Returns a value that indicates whether the current object is equal to the specified object. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>  if the current object is equal to <em>obj</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EventRegistrationToken.Equals(Object)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.GetHashCode\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.GetHashCode\n  id: GetHashCode\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n    startLine: 47\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Returns the hash code for this instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this instance. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: EventRegistrationToken.GetHashCode()\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  id: op_Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  langs:\n  - csharp\n  - vb\n  name: Equality(EventRegistrationToken, EventRegistrationToken)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Equality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n    startLine: 27\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(EventRegistrationToken left, EventRegistrationToken right)\n    content.vb: Public Shared Operator =(left As EventRegistrationToken, right As EventRegistrationToken) As Boolean\n    parameters:\n    - id: left\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>The first instance to compare. </p>\\n\"\n    - id: right\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>The second instance to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventRegistrationToken.Equality(EventRegistrationToken, EventRegistrationToken)\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  commentId: M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.op_Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  id: op_Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken,System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  parent: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  langs:\n  - csharp\n  - vb\n  name: Inequality(EventRegistrationToken, EventRegistrationToken)\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken.Inequality(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken, System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Runtime/InteropServices/WindowsRuntime/EventRegistrationToken.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime.InteropServices.WindowsRuntime\n  namespace: System.Runtime.InteropServices.WindowsRuntime\n  summary: \"\\n<p>Indicates whether two <xref href=\\\"System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(EventRegistrationToken left, EventRegistrationToken right)\n    content.vb: Public Shared Operator <>(left As EventRegistrationToken, right As EventRegistrationToken) As Boolean\n    parameters:\n    - id: left\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>The first instance to compare. </p>\\n\"\n    - id: right\n      type: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n      description: \"\\n<p>The second instance to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two instances are not equal; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: EventRegistrationToken.Inequality(EventRegistrationToken, EventRegistrationToken)\nreferences:\n- uid: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: System.Runtime.InteropServices.WindowsRuntime\n  fullName: System.Runtime.InteropServices.WindowsRuntime\n  nameWithType: System.Runtime.InteropServices.WindowsRuntime\n  commentId: N:System.Runtime.InteropServices.WindowsRuntime\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  parent: System.Runtime.InteropServices.WindowsRuntime\n  isExternal: false\n  name: EventRegistrationToken\n  fullName: System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n  nameWithType: EventRegistrationToken\n  commentId: T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken\n"}