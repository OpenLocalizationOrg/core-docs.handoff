{"nodes":[{"pos":[492,504],"content":"SourceSwitch","needQuote":true,"nodes":[{"content":"SourceSwitch","pos":[0,12]}]},{"pos":[2116,2136],"content":"SourceSwitch(String)","needQuote":true,"nodes":[{"content":"SourceSwitch(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the source.&lt;/p&gt;\\n","pos":[2976,3010],"source":"\\n<p>The name of the source.</p>\\n"},{"pos":[3396,3424],"content":"SourceSwitch(String, String)","needQuote":true,"nodes":[{"content":"SourceSwitch(String, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The name of the source switch.","pos":[4395,4430],"source":"\\n<p>The name of the source switch."},{"content":"&lt;/p&gt;\\n","pos":[4431,4437],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The default value for the switch.","pos":[4514,4552],"source":"\\n<p>The default value for the switch."},{"content":"&lt;/p&gt;\\n","pos":[4553,4559],"source":" </p>\\n"},{"pos":[4864,4869],"content":"Level","needQuote":true,"nodes":[{"content":"Level","pos":[0,5]}]},{"pos":[6206,6222],"content":"OnValueChanged()","needQuote":true,"nodes":[{"content":"OnValueChanged()","pos":[0,16]}]},{"pos":[7816,7843],"content":"ShouldTrace(TraceEventType)","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventType)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; if the trace listeners should be called; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8877,8987],"source":"\\n<p>\\n<strong>True</strong> if the trace listeners should be called; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9170,9188],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[9355,9361],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9530,9536],"content":"Switch","needQuote":true,"nodes":[{"content":"Switch","pos":[0,6]}]},{"pos":[9748,9759],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[10007,10018],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"pos":[10268,10281],"content":"SwitchSetting","needQuote":true,"nodes":[{"content":"SwitchSetting","pos":[0,13]}]},{"pos":[10529,10534],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[10775,10799],"content":"OnSwitchSettingChanged()","needQuote":true,"nodes":[{"content":"OnSwitchSettingChanged()","pos":[0,24]}]},{"pos":[10946,10968],"content":"OnSwitchSettingChanged","needQuote":true,"nodes":[{"content":"OnSwitchSettingChanged","pos":[0,22]}]},{"pos":[11042,11043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11070,11071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11167,11189],"content":"OnSwitchSettingChanged","needQuote":true,"nodes":[{"content":"OnSwitchSettingChanged","pos":[0,22]}]},{"pos":[11263,11264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11291,11292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11502,11512],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11607,11615],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11684,11685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11712,11713],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11783,11791],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11860,11861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11888,11889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12072,12086],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12205,12211],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12278,12279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12329,12335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12395,12396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12479,12485],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12552,12553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12603,12609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12669,12670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12884,12906],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13054,13060],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13127,13128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13178,13184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13245,13246]},{"pos":[13301,13307],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13367,13368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13465,13471],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13538,13539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13589,13595],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13656,13657]},{"pos":[13712,13718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13778,13779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14024,14055],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14221,14236],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14312,14313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14363,14369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14430,14431]},{"pos":[14486,14492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14552,14553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14659,14674],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14750,14751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14801,14807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14868,14869]},{"pos":[14924,14930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14990,14991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15221,15234],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15335,15346],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15418,15419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15446,15447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15520,15531],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15603,15604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15631,15632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15807,15816],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15909,15916],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15984,15985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16012,16013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16082,16089],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16157,16158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16185,16186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16361,16378],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16487,16502],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16578,16579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16606,16607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16684,16699],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16775,16776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16803,16804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16949,16955],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17086,17092],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[17267,17279],"content":"SourceLevels","needQuote":true,"nodes":[{"content":"SourceLevels","pos":[0,12]}]},{"pos":[17512,17528],"content":"OnValueChanged()","needQuote":true,"nodes":[{"content":"OnValueChanged()","pos":[0,16]}]},{"pos":[17659,17673],"content":"OnValueChanged","needQuote":true,"nodes":[{"content":"OnValueChanged","pos":[0,14]}]},{"pos":[17739,17740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17767,17768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17856,17870],"content":"OnValueChanged","needQuote":true,"nodes":[{"content":"OnValueChanged","pos":[0,14]}]},{"pos":[17936,17937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17964,17965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18176,18190],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[18384,18391],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18550,18567],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Diagnostics.SourceSwitch\n  commentId: T:System.Diagnostics.SourceSwitch\n  id: SourceSwitch\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.SourceSwitch.#ctor(System.String)\n  - System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)\n  - System.Diagnostics.SourceSwitch.Level\n  - System.Diagnostics.SourceSwitch.OnValueChanged\n  - System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)\n  langs:\n  - csharp\n  - vb\n  name: SourceSwitch\n  fullName: System.Diagnostics.SourceSwitch\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SourceSwitch\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 9\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a multilevel switch to control tracing and debug output without recompiling your code.</p>\\n\"\n  syntax:\n    content: 'public class SourceSwitch : Switch'\n    content.vb: >-\n      Public Class SourceSwitch\n          Inherits Switch\n  inheritance:\n  - System.Object\n  - System.Diagnostics.Switch\n  inheritedMembers:\n  - System.Diagnostics.Switch.Description\n  - System.Diagnostics.Switch.DisplayName\n  - System.Diagnostics.Switch.SwitchSetting\n  - System.Diagnostics.Switch.Value\n  - System.Diagnostics.Switch.OnSwitchSettingChanged\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SourceSwitch\n- uid: System.Diagnostics.SourceSwitch.#ctor(System.String)\n  commentId: M:System.Diagnostics.SourceSwitch.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Diagnostics.SourceSwitch\n  langs:\n  - csharp\n  - vb\n  name: SourceSwitch(String)\n  fullName: System.Diagnostics.SourceSwitch.SourceSwitch(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 11\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.SourceSwitch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the name of the source.</p>\\n\"\n  syntax:\n    content: public SourceSwitch(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the source.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SourceSwitch.SourceSwitch(String)\n- uid: System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)\n  commentId: M:System.Diagnostics.SourceSwitch.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Diagnostics.SourceSwitch\n  langs:\n  - csharp\n  - vb\n  name: SourceSwitch(String, String)\n  fullName: System.Diagnostics.SourceSwitch.SourceSwitch(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 13\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.SourceSwitch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the display name and the default value for the source switch.</p>\\n\"\n  syntax:\n    content: public SourceSwitch(string displayName, string defaultSwitchValue)\n    content.vb: Public Sub New(displayName As String, defaultSwitchValue As String)\n    parameters:\n    - id: displayName\n      type: System.String\n      description: \"\\n<p>The name of the source switch. </p>\\n\"\n    - id: defaultSwitchValue\n      type: System.String\n      description: \"\\n<p>The default value for the switch. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SourceSwitch.SourceSwitch(String, String)\n- uid: System.Diagnostics.SourceSwitch.Level\n  commentId: P:System.Diagnostics.SourceSwitch.Level\n  id: Level\n  parent: System.Diagnostics.SourceSwitch\n  langs:\n  - csharp\n  - vb\n  name: Level\n  fullName: System.Diagnostics.SourceSwitch.Level\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Level\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 17\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the level of the switch.</p>\\n\"\n  syntax:\n    content: public SourceLevels Level { get; set; }\n    content.vb: Public Property Level As SourceLevels\n    parameters: []\n    return:\n      type: System.Diagnostics.SourceLevels\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.SourceLevels\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that represents the event level of the switch.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SourceSwitch.Level\n- uid: System.Diagnostics.SourceSwitch.OnValueChanged\n  commentId: M:System.Diagnostics.SourceSwitch.OnValueChanged\n  id: OnValueChanged\n  parent: System.Diagnostics.SourceSwitch\n  langs:\n  - csharp\n  - vb\n  name: OnValueChanged()\n  fullName: System.Diagnostics.SourceSwitch.OnValueChanged()\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnValueChanged\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Invoked when the value of the <xref href=\\\"System.Diagnostics.Switch.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property changes.</p>\\n\"\n  syntax:\n    content: protected override void OnValueChanged()\n    content.vb: Protected Overrides Sub OnValueChanged\n  overridden: System.Diagnostics.Switch.OnValueChanged\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The new value of <xref href=\\\"System.Diagnostics.Switch.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not one of the <xref href=\\\"System.Diagnostics.SourceLevels\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: SourceSwitch.OnValueChanged()\n- uid: System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)\n  commentId: M:System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)\n  id: ShouldTrace(System.Diagnostics.TraceEventType)\n  parent: System.Diagnostics.SourceSwitch\n  langs:\n  - csharp\n  - vb\n  name: ShouldTrace(TraceEventType)\n  fullName: System.Diagnostics.SourceSwitch.ShouldTrace(System.Diagnostics.TraceEventType)\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldTrace\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SourceSwitch.cs\n    startLine: 29\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines if trace listeners should be called, based on the trace event type.</p>\\n\"\n  syntax:\n    content: public bool ShouldTrace(TraceEventType eventType)\n    content.vb: Public Function ShouldTrace(eventType As TraceEventType) As Boolean\n    parameters:\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>True</strong> if the trace listeners should be called; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SourceSwitch.ShouldTrace(TraceEventType)\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Diagnostics.Switch\n  parent: System.Diagnostics\n  isExternal: false\n  name: Switch\n  fullName: System.Diagnostics.Switch\n  nameWithType: Switch\n  commentId: T:System.Diagnostics.Switch\n- uid: System.Diagnostics.Switch.Description\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: Description\n  fullName: System.Diagnostics.Switch.Description\n  nameWithType: Switch.Description\n  commentId: P:System.Diagnostics.Switch.Description\n- uid: System.Diagnostics.Switch.DisplayName\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: DisplayName\n  fullName: System.Diagnostics.Switch.DisplayName\n  nameWithType: Switch.DisplayName\n  commentId: P:System.Diagnostics.Switch.DisplayName\n- uid: System.Diagnostics.Switch.SwitchSetting\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: SwitchSetting\n  fullName: System.Diagnostics.Switch.SwitchSetting\n  nameWithType: Switch.SwitchSetting\n  commentId: P:System.Diagnostics.Switch.SwitchSetting\n- uid: System.Diagnostics.Switch.Value\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: Value\n  fullName: System.Diagnostics.Switch.Value\n  nameWithType: Switch.Value\n  commentId: P:System.Diagnostics.Switch.Value\n- uid: System.Diagnostics.Switch.OnSwitchSettingChanged\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: OnSwitchSettingChanged()\n  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()\n  spec.csharp:\n  - uid: System.Diagnostics.Switch.OnSwitchSettingChanged\n    name: OnSwitchSettingChanged\n    fullName: System.Diagnostics.Switch.OnSwitchSettingChanged\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.Switch.OnSwitchSettingChanged\n    name: OnSwitchSettingChanged\n    fullName: System.Diagnostics.Switch.OnSwitchSettingChanged\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Switch.OnSwitchSettingChanged()\n  commentId: M:System.Diagnostics.Switch.OnSwitchSettingChanged\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.SourceLevels\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceLevels\n  fullName: System.Diagnostics.SourceLevels\n  nameWithType: SourceLevels\n  commentId: T:System.Diagnostics.SourceLevels\n- uid: System.Diagnostics.Switch.OnValueChanged\n  parent: System.Diagnostics.Switch\n  isExternal: false\n  name: OnValueChanged()\n  fullName: System.Diagnostics.Switch.OnValueChanged()\n  spec.csharp:\n  - uid: System.Diagnostics.Switch.OnValueChanged\n    name: OnValueChanged\n    fullName: System.Diagnostics.Switch.OnValueChanged\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.Switch.OnValueChanged\n    name: OnValueChanged\n    fullName: System.Diagnostics.Switch.OnValueChanged\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Switch.OnValueChanged()\n  commentId: M:System.Diagnostics.Switch.OnValueChanged\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}