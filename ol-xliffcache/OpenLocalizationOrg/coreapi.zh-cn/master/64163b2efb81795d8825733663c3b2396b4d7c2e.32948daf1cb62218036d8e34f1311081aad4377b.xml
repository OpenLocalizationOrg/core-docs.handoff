{"nodes":[{"pos":[406,414],"content":"Comparer","needQuote":true,"nodes":[{"content":"Comparer","pos":[0,8]}]},{"pos":[2550,2557],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[3988,4004],"content":"DefaultInvariant","needQuote":true,"nodes":[{"content":"DefaultInvariant","pos":[0,16]}]},{"pos":[5558,5579],"content":"Comparer(CultureInfo)","needQuote":true,"nodes":[{"content":"Comparer(CultureInfo)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;culture&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6821,6870],"source":"\\n<p>\\n<em>culture</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[6871,6877],"source":" </p>\\n"},{"pos":[7449,7472],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[8291,8324],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[8325,8331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[8391,8425],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[8426,8432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; is less than &lt;em&gt;b&lt;/em&gt;.","pos":[8491,8747],"source":"\\n<p>A signed integer that indicates the relative values of <em>a</em> and <em>b</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is less than <em>b</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; equals &lt;em&gt;b&lt;/em&gt;.","pos":[8748,8833],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>a</em> equals <em>b</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;a&lt;/em&gt; is greater than &lt;em&gt;b&lt;/em&gt;.","pos":[8834,8941],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is greater than <em>b</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[8942,8976],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[9991,10009],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[10176,10182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10354,10363],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[10556,10566],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10661,10669],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10738,10739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10766,10767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10837,10845],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10914,10915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10942,10943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11126,11140],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11259,11265],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11332,11333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11383,11389],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11449,11450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11533,11539],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11606,11607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11657,11663],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11723,11724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11938,11960],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12108,12114],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12181,12182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12232,12238],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12299,12300]},{"pos":[12355,12361],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12421,12422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12519,12525],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12592,12593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12643,12649],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12710,12711]},{"pos":[12766,12772],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12832,12833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13078,13109],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13275,13290],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13366,13367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13417,13423],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13484,13485]},{"pos":[13540,13546],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13606,13607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13713,13728],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13804,13805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13855,13861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13922,13923]},{"pos":[13978,13984],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14044,14045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14275,14288],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14389,14400],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14472,14473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14500,14501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14574,14585],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14657,14658],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14685,14686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14861,14870],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14963,14970],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15038,15039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15066,15067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15136,15143],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15211,15212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15239,15240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15415,15432],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15541,15556],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15632,15633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15660,15661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15738,15753],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15829,15830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15857,15858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16003,16009],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16166,16174],"content":"Comparer","needQuote":true,"nodes":[{"content":"Comparer","pos":[0,8]}]},{"pos":[16382,16393],"content":"CultureInfo","needQuote":true,"nodes":[{"content":"CultureInfo","pos":[0,11]}]},{"pos":[16571,16591],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[16837,16860],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"pos":[17040,17047],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[17130,17131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17181,17187],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17248,17249]},{"pos":[17304,17310],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17370,17371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17484,17491],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[17574,17575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17625,17631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17692,17693]},{"pos":[17748,17754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17814,17815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18028,18033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18173,18194],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[18395,18412],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Comparer\n  commentId: T:System.Collections.Comparer\n  id: Comparer\n  parent: System.Collections\n  children:\n  - System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)\n  - System.Collections.Comparer.Compare(System.Object,System.Object)\n  - System.Collections.Comparer.Default\n  - System.Collections.Comparer.DefaultInvariant\n  langs:\n  - csharp\n  - vb\n  name: Comparer\n  fullName: System.Collections.Comparer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Comparer\n    path: src/mscorlib/src/System/Collections/Comparer.cs\n    startLine: 22\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Compares two objects for equivalence, where string comparisons are case-sensitive.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class Comparer : IComparer, ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class Comparer\n          Implements IComparer, ISerializable\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  - type: System.Collections.Generic.Comparer`1\n    commentId: T:System.Collections.Generic.Comparer`1\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Comparer\n- uid: System.Collections.Comparer.Default\n  commentId: F:System.Collections.Comparer.Default\n  id: Default\n  parent: System.Collections.Comparer\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Collections.Comparer.Default\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Default\n    path: src/mscorlib/src/System/Collections/Comparer.cs\n    startLine: 27\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents an instance of <xref href=\\\"System.Collections.Comparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with the <xref href=\\\"System.Threading.Thread.CurrentCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current thread. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly Comparer Default\n    content.vb: Public Shared ReadOnly Default As Comparer\n    return:\n      type: System.Collections.Comparer\n  seealso:\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Comparer.Default\n- uid: System.Collections.Comparer.DefaultInvariant\n  commentId: F:System.Collections.Comparer.DefaultInvariant\n  id: DefaultInvariant\n  parent: System.Collections.Comparer\n  langs:\n  - csharp\n  - vb\n  name: DefaultInvariant\n  fullName: System.Collections.Comparer.DefaultInvariant\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DefaultInvariant\n    path: src/mscorlib/src/System/Collections/Comparer.cs\n    startLine: 28\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents an instance of <xref href=\\\"System.Collections.Comparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is associated with <xref href=\\\"System.Globalization.CultureInfo.InvariantCulture\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly Comparer DefaultInvariant\n    content.vb: Public Shared ReadOnly DefaultInvariant As Comparer\n    return:\n      type: System.Collections.Comparer\n  seealso:\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Comparer.DefaultInvariant\n- uid: System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)\n  commentId: M:System.Collections.Comparer.#ctor(System.Globalization.CultureInfo)\n  id: '#ctor(System.Globalization.CultureInfo)'\n  parent: System.Collections.Comparer\n  langs:\n  - csharp\n  - vb\n  name: Comparer(CultureInfo)\n  fullName: System.Collections.Comparer.Comparer(System.Globalization.CultureInfo)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/Comparer.cs\n    startLine: 36\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Comparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Comparer(CultureInfo culture)\n    content.vb: Public Sub New(culture As CultureInfo)\n    parameters:\n    - id: culture\n      type: System.Globalization.CultureInfo\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.CultureInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use for the new <xref href=\\\"System.Collections.Comparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>culture</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Comparer.Comparer(CultureInfo)\n- uid: System.Collections.Comparer.Compare(System.Object,System.Object)\n  commentId: M:System.Collections.Comparer.Compare(System.Object,System.Object)\n  id: Compare(System.Object,System.Object)\n  parent: System.Collections.Comparer\n  langs:\n  - csharp\n  - vb\n  name: Compare(Object, Object)\n  fullName: System.Collections.Comparer.Compare(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Collections/Comparer.cs\n    startLine: 63\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs a case-sensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\\n\"\n  syntax:\n    content: public int Compare(object a, object b)\n    content.vb: Public Function Compare(a As Object, b As Object) As Integer\n    parameters:\n    - id: a\n      type: System.Object\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: b\n      type: System.Object\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>a</em> and <em>b</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is less than <em>b</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>a</em> equals <em>b</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>a</em> is greater than <em>b</em>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Neither <em>a</em> nor <em>b</em> implements the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n<p>-or- </p>\\n<p>\\n<em>a</em> and <em>b</em> are of different types and neither one can handle comparisons with the other. </p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Globalization.CompareInfo\n    commentId: T:System.Globalization.CompareInfo\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.Collections.IComparer.Compare(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Comparer.Compare(Object, Object)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Comparer\n  parent: System.Collections\n  isExternal: false\n  name: Comparer\n  fullName: System.Collections.Comparer\n  nameWithType: Comparer\n  commentId: T:System.Collections.Comparer\n- uid: System.Globalization.CultureInfo\n  parent: System.Globalization\n  isExternal: false\n  name: CultureInfo\n  fullName: System.Globalization.CultureInfo\n  nameWithType: CultureInfo\n  commentId: T:System.Globalization.CultureInfo\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n  parent: System.Collections.IComparer\n  isExternal: true\n  name: Compare(Object, Object)\n  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer.Compare(Object, Object)\n  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}