{"nodes":[{"pos":[10028,10035],"content":"OpCodes","needQuote":true,"nodes":[{"content":"OpCodes","pos":[0,7]}]},{"pos":[11571,11574],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[12545,12552],"content":"Add_Ovf","needQuote":true,"nodes":[{"content":"Add_Ovf","pos":[0,7]}]},{"pos":[13583,13593],"content":"Add_Ovf_Un","needQuote":true,"nodes":[{"content":"Add_Ovf_Un","pos":[0,10]}]},{"pos":[14633,14636],"content":"And","needQuote":true,"nodes":[{"content":"And","pos":[0,3]}]},{"pos":[15630,15637],"content":"Arglist","needQuote":true,"nodes":[{"content":"Arglist","pos":[0,7]}]},{"pos":[16624,16627],"content":"Beq","needQuote":true,"nodes":[{"content":"Beq","pos":[0,3]}]},{"pos":[17593,17598],"content":"Beq_S","needQuote":true,"nodes":[{"content":"Beq_S","pos":[0,5]}]},{"pos":[18581,18584],"content":"Bge","needQuote":true,"nodes":[{"content":"Bge","pos":[0,3]}]},{"pos":[19590,19595],"content":"Bge_S","needQuote":true,"nodes":[{"content":"Bge_S","pos":[0,5]}]},{"pos":[20627,20633],"content":"Bge_Un","needQuote":true,"nodes":[{"content":"Bge_Un","pos":[0,6]}]},{"pos":[21717,21725],"content":"Bge_Un_S","needQuote":true,"nodes":[{"content":"Bge_Un_S","pos":[0,8]}]},{"pos":[22817,22820],"content":"Bgt","needQuote":true,"nodes":[{"content":"Bgt","pos":[0,3]}]},{"pos":[23814,23819],"content":"Bgt_S","needQuote":true,"nodes":[{"content":"Bgt_S","pos":[0,5]}]},{"pos":[24839,24845],"content":"Bgt_Un","needQuote":true,"nodes":[{"content":"Bgt_Un","pos":[0,6]}]},{"pos":[25929,25937],"content":"Bgt_Un_S","needQuote":true,"nodes":[{"content":"Bgt_Un_S","pos":[0,8]}]},{"pos":[27029,27032],"content":"Ble","needQuote":true,"nodes":[{"content":"Ble","pos":[0,3]}]},{"pos":[28035,28040],"content":"Ble_S","needQuote":true,"nodes":[{"content":"Ble_S","pos":[0,5]}]},{"pos":[29069,29075],"content":"Ble_Un","needQuote":true,"nodes":[{"content":"Ble_Un","pos":[0,6]}]},{"pos":[30168,30176],"content":"Ble_Un_S","needQuote":true,"nodes":[{"content":"Ble_Un_S","pos":[0,8]}]},{"pos":[31277,31280],"content":"Blt","needQuote":true,"nodes":[{"content":"Blt","pos":[0,3]}]},{"pos":[32271,32276],"content":"Blt_S","needQuote":true,"nodes":[{"content":"Blt_S","pos":[0,5]}]},{"pos":[33293,33299],"content":"Blt_Un","needQuote":true,"nodes":[{"content":"Blt_Un","pos":[0,6]}]},{"pos":[34380,34388],"content":"Blt_Un_S","needQuote":true,"nodes":[{"content":"Blt_Un_S","pos":[0,8]}]},{"pos":[35486,35492],"content":"Bne_Un","needQuote":true,"nodes":[{"content":"Bne_Un","pos":[0,6]}]},{"pos":[36531,36539],"content":"Bne_Un_S","needQuote":true,"nodes":[{"content":"Bne_Un_S","pos":[0,8]}]},{"pos":[37586,37589],"content":"Box","needQuote":true,"nodes":[{"content":"Box","pos":[0,3]}]},{"pos":[38552,38554],"content":"Br","needQuote":true,"nodes":[{"content":"Br","pos":[0,2]}]},{"pos":[39504,39508],"content":"Br_S","needQuote":true,"nodes":[{"content":"Br_S","pos":[0,4]}]},{"pos":[40484,40489],"content":"Break","needQuote":true,"nodes":[{"content":"Break","pos":[0,5]}]},{"pos":[41513,41520],"content":"Brfalse","needQuote":true,"nodes":[{"content":"Brfalse","pos":[0,7]}]},{"pos":[42608,42617],"content":"Brfalse_S","needQuote":true,"nodes":[{"content":"Brfalse_S","pos":[0,9]}]},{"pos":[43663,43669],"content":"Brtrue","needQuote":true,"nodes":[{"content":"Brtrue","pos":[0,6]}]},{"pos":[44701,44709],"content":"Brtrue_S","needQuote":true,"nodes":[{"content":"Brtrue_S","pos":[0,8]}]},{"pos":[45752,45756],"content":"Call","needQuote":true,"nodes":[{"content":"Call","pos":[0,4]}]},{"pos":[46720,46725],"content":"Calli","needQuote":true,"nodes":[{"content":"Calli","pos":[0,5]}]},{"pos":[47777,47785],"content":"Callvirt","needQuote":true,"nodes":[{"content":"Callvirt","pos":[0,8]}]},{"pos":[48814,48823],"content":"Castclass","needQuote":true,"nodes":[{"content":"Castclass","pos":[0,9]}]},{"pos":[49888,49891],"content":"Ceq","needQuote":true,"nodes":[{"content":"Ceq","pos":[0,3]}]},{"pos":[50981,50984],"content":"Cgt","needQuote":true,"nodes":[{"content":"Cgt","pos":[0,3]}]},{"pos":[52111,52117],"content":"Cgt_Un","needQuote":true,"nodes":[{"content":"Cgt_Un","pos":[0,6]}]},{"pos":[53287,53295],"content":"Ckfinite","needQuote":true,"nodes":[{"content":"Ckfinite","pos":[0,8]}]},{"pos":[54341,54344],"content":"Clt","needQuote":true,"nodes":[{"content":"Clt","pos":[0,3]}]},{"pos":[55468,55474],"content":"Clt_Un","needQuote":true,"nodes":[{"content":"Clt_Un","pos":[0,6]}]},{"pos":[56696,56707],"content":"Constrained","needQuote":true,"nodes":[{"content":"Constrained","pos":[0,11]}]},{"pos":[57710,57716],"content":"Conv_I","needQuote":true,"nodes":[{"content":"Conv_I","pos":[0,6]}]},{"pos":[58719,58726],"content":"Conv_I1","needQuote":true,"nodes":[{"content":"Conv_I1","pos":[0,7]}]},{"pos":[59778,59785],"content":"Conv_I2","needQuote":true,"nodes":[{"content":"Conv_I2","pos":[0,7]}]},{"pos":[60838,60845],"content":"Conv_I4","needQuote":true,"nodes":[{"content":"Conv_I4","pos":[0,7]}]},{"pos":[61848,61855],"content":"Conv_I8","needQuote":true,"nodes":[{"content":"Conv_I8","pos":[0,7]}]},{"pos":[62867,62877],"content":"Conv_Ovf_I","needQuote":true,"nodes":[{"content":"Conv_Ovf_I","pos":[0,10]}]},{"pos":[64039,64052],"content":"Conv_Ovf_I_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_I_Un","pos":[0,13]}]},{"pos":[65225,65236],"content":"Conv_Ovf_I1","needQuote":true,"nodes":[{"content":"Conv_Ovf_I1","pos":[0,11]}]},{"pos":[66441,66455],"content":"Conv_Ovf_I1_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_I1_Un","pos":[0,14]}]},{"pos":[67668,67679],"content":"Conv_Ovf_I2","needQuote":true,"nodes":[{"content":"Conv_Ovf_I2","pos":[0,11]}]},{"pos":[68887,68901],"content":"Conv_Ovf_I2_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_I2_Un","pos":[0,14]}]},{"pos":[70115,70126],"content":"Conv_Ovf_I4","needQuote":true,"nodes":[{"content":"Conv_Ovf_I4","pos":[0,11]}]},{"pos":[71291,71305],"content":"Conv_Ovf_I4_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_I4_Un","pos":[0,14]}]},{"pos":[72478,72489],"content":"Conv_Ovf_I8","needQuote":true,"nodes":[{"content":"Conv_Ovf_I8","pos":[0,11]}]},{"pos":[73654,73668],"content":"Conv_Ovf_I8_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_I8_Un","pos":[0,14]}]},{"pos":[74838,74848],"content":"Conv_Ovf_U","needQuote":true,"nodes":[{"content":"Conv_Ovf_U","pos":[0,10]}]},{"pos":[76012,76025],"content":"Conv_Ovf_U_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_U_Un","pos":[0,13]}]},{"pos":[77200,77211],"content":"Conv_Ovf_U1","needQuote":true,"nodes":[{"content":"Conv_Ovf_U1","pos":[0,11]}]},{"pos":[78418,78432],"content":"Conv_Ovf_U1_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_U1_Un","pos":[0,14]}]},{"pos":[79647,79658],"content":"Conv_Ovf_U2","needQuote":true,"nodes":[{"content":"Conv_Ovf_U2","pos":[0,11]}]},{"pos":[80866,80880],"content":"Conv_Ovf_U2_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_U2_Un","pos":[0,14]}]},{"pos":[82096,82107],"content":"Conv_Ovf_U4","needQuote":true,"nodes":[{"content":"Conv_Ovf_U4","pos":[0,11]}]},{"pos":[83274,83288],"content":"Conv_Ovf_U4_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_U4_Un","pos":[0,14]}]},{"pos":[84463,84474],"content":"Conv_Ovf_U8","needQuote":true,"nodes":[{"content":"Conv_Ovf_U8","pos":[0,11]}]},{"pos":[85641,85655],"content":"Conv_Ovf_U8_Un","needQuote":true,"nodes":[{"content":"Conv_Ovf_U8_Un","pos":[0,14]}]},{"pos":[86824,86833],"content":"Conv_R_Un","needQuote":true,"nodes":[{"content":"Conv_R_Un","pos":[0,9]}]},{"pos":[87865,87872],"content":"Conv_R4","needQuote":true,"nodes":[{"content":"Conv_R4","pos":[0,7]}]},{"pos":[88877,88884],"content":"Conv_R8","needQuote":true,"nodes":[{"content":"Conv_R8","pos":[0,7]}]},{"pos":[89886,89892],"content":"Conv_U","needQuote":true,"nodes":[{"content":"Conv_U","pos":[0,6]}]},{"pos":[90951,90958],"content":"Conv_U1","needQuote":true,"nodes":[{"content":"Conv_U1","pos":[0,7]}]},{"pos":[92011,92018],"content":"Conv_U2","needQuote":true,"nodes":[{"content":"Conv_U2","pos":[0,7]}]},{"pos":[93072,93079],"content":"Conv_U4","needQuote":true,"nodes":[{"content":"Conv_U4","pos":[0,7]}]},{"pos":[94133,94140],"content":"Conv_U8","needQuote":true,"nodes":[{"content":"Conv_U8","pos":[0,7]}]},{"pos":[95188,95193],"content":"Cpblk","needQuote":true,"nodes":[{"content":"Cpblk","pos":[0,5]}]},{"pos":[96183,96188],"content":"Cpobj","needQuote":true,"nodes":[{"content":"Cpobj","pos":[0,5]}]},{"pos":[97346,97349],"content":"Div","needQuote":true,"nodes":[{"content":"Div","pos":[0,3]}]},{"pos":[98408,98414],"content":"Div_Un","needQuote":true,"nodes":[{"content":"Div_Un","pos":[0,6]}]},{"pos":[99433,99436],"content":"Dup","needQuote":true,"nodes":[{"content":"Dup","pos":[0,3]}]},{"pos":[100457,100466],"content":"Endfilter","needQuote":true,"nodes":[{"content":"Endfilter","pos":[0,9]}]},{"pos":[101553,101563],"content":"Endfinally","needQuote":true,"nodes":[{"content":"Endfinally","pos":[0,10]}]},{"pos":[102679,102686],"content":"Initblk","needQuote":true,"nodes":[{"content":"Initblk","pos":[0,7]}]},{"pos":[103709,103716],"content":"Initobj","needQuote":true,"nodes":[{"content":"Initobj","pos":[0,7]}]},{"pos":[104765,104771],"content":"Isinst","needQuote":true,"nodes":[{"content":"Isinst","pos":[0,6]}]},{"pos":[105778,105781],"content":"Jmp","needQuote":true,"nodes":[{"content":"Jmp","pos":[0,3]}]},{"pos":[106732,106737],"content":"Ldarg","needQuote":true,"nodes":[{"content":"Ldarg","pos":[0,5]}]},{"pos":[107727,107734],"content":"Ldarg_0","needQuote":true,"nodes":[{"content":"Ldarg_0","pos":[0,7]}]},{"pos":[108716,108723],"content":"Ldarg_1","needQuote":true,"nodes":[{"content":"Ldarg_1","pos":[0,7]}]},{"pos":[109705,109712],"content":"Ldarg_2","needQuote":true,"nodes":[{"content":"Ldarg_2","pos":[0,7]}]},{"pos":[110694,110701],"content":"Ldarg_3","needQuote":true,"nodes":[{"content":"Ldarg_3","pos":[0,7]}]},{"pos":[111683,111690],"content":"Ldarg_S","needQuote":true,"nodes":[{"content":"Ldarg_S","pos":[0,7]}]},{"pos":[112703,112709],"content":"Ldarga","needQuote":true,"nodes":[{"content":"Ldarga","pos":[0,6]}]},{"pos":[113685,113693],"content":"Ldarga_S","needQuote":true,"nodes":[{"content":"Ldarga_S","pos":[0,8]}]},{"pos":[114688,114694],"content":"Ldc_I4","needQuote":true,"nodes":[{"content":"Ldc_I4","pos":[0,6]}]},{"pos":[115728,115736],"content":"Ldc_I4_0","needQuote":true,"nodes":[{"content":"Ldc_I4_0","pos":[0,8]}]},{"pos":[116755,116763],"content":"Ldc_I4_1","needQuote":true,"nodes":[{"content":"Ldc_I4_1","pos":[0,8]}]},{"pos":[117782,117790],"content":"Ldc_I4_2","needQuote":true,"nodes":[{"content":"Ldc_I4_2","pos":[0,8]}]},{"pos":[118809,118817],"content":"Ldc_I4_3","needQuote":true,"nodes":[{"content":"Ldc_I4_3","pos":[0,8]}]},{"pos":[119836,119844],"content":"Ldc_I4_4","needQuote":true,"nodes":[{"content":"Ldc_I4_4","pos":[0,8]}]},{"pos":[120863,120871],"content":"Ldc_I4_5","needQuote":true,"nodes":[{"content":"Ldc_I4_5","pos":[0,8]}]},{"pos":[121890,121898],"content":"Ldc_I4_6","needQuote":true,"nodes":[{"content":"Ldc_I4_6","pos":[0,8]}]},{"pos":[122917,122925],"content":"Ldc_I4_7","needQuote":true,"nodes":[{"content":"Ldc_I4_7","pos":[0,8]}]},{"pos":[123944,123952],"content":"Ldc_I4_8","needQuote":true,"nodes":[{"content":"Ldc_I4_8","pos":[0,8]}]},{"pos":[124974,124983],"content":"Ldc_I4_M1","needQuote":true,"nodes":[{"content":"Ldc_I4_M1","pos":[0,9]}]},{"pos":[126008,126016],"content":"Ldc_I4_S","needQuote":true,"nodes":[{"content":"Ldc_I4_S","pos":[0,8]}]},{"pos":[127059,127065],"content":"Ldc_I8","needQuote":true,"nodes":[{"content":"Ldc_I8","pos":[0,6]}]},{"pos":[128093,128099],"content":"Ldc_R4","needQuote":true,"nodes":[{"content":"Ldc_R4","pos":[0,6]}]},{"pos":[129135,129141],"content":"Ldc_R8","needQuote":true,"nodes":[{"content":"Ldc_R8","pos":[0,6]}]},{"pos":[130177,130183],"content":"Ldelem","needQuote":true,"nodes":[{"content":"Ldelem","pos":[0,6]}]},{"pos":[131232,131240],"content":"Ldelem_I","needQuote":true,"nodes":[{"content":"Ldelem_I","pos":[0,8]}]},{"pos":[132331,132340],"content":"Ldelem_I1","needQuote":true,"nodes":[{"content":"Ldelem_I1","pos":[0,9]}]},{"pos":[133426,133435],"content":"Ldelem_I2","needQuote":true,"nodes":[{"content":"Ldelem_I2","pos":[0,9]}]},{"pos":[134522,134531],"content":"Ldelem_I4","needQuote":true,"nodes":[{"content":"Ldelem_I4","pos":[0,9]}]},{"pos":[135618,135627],"content":"Ldelem_I8","needQuote":true,"nodes":[{"content":"Ldelem_I8","pos":[0,9]}]},{"pos":[136714,136723],"content":"Ldelem_R4","needQuote":true,"nodes":[{"content":"Ldelem_R4","pos":[0,9]}]},{"pos":[137818,137827],"content":"Ldelem_R8","needQuote":true,"nodes":[{"content":"Ldelem_R8","pos":[0,9]}]},{"pos":[138925,138935],"content":"Ldelem_Ref","needQuote":true,"nodes":[{"content":"Ldelem_Ref","pos":[0,10]}]},{"pos":[140042,140051],"content":"Ldelem_U1","needQuote":true,"nodes":[{"content":"Ldelem_U1","pos":[0,9]}]},{"pos":[141146,141155],"content":"Ldelem_U2","needQuote":true,"nodes":[{"content":"Ldelem_U2","pos":[0,9]}]},{"pos":[142251,142260],"content":"Ldelem_U4","needQuote":true,"nodes":[{"content":"Ldelem_U4","pos":[0,9]}]},{"pos":[143350,143357],"content":"Ldelema","needQuote":true,"nodes":[{"content":"Ldelema","pos":[0,7]}]},{"pos":[144426,144431],"content":"Ldfld","needQuote":true,"nodes":[{"content":"Ldfld","pos":[0,5]}]},{"pos":[145439,145445],"content":"Ldflda","needQuote":true,"nodes":[{"content":"Ldflda","pos":[0,6]}]},{"pos":[146457,146462],"content":"Ldftn","needQuote":true,"nodes":[{"content":"Ldftn","pos":[0,5]}]},{"pos":[147518,147525],"content":"Ldind_I","needQuote":true,"nodes":[{"content":"Ldind_I","pos":[0,7]}]},{"pos":[148575,148583],"content":"Ldind_I1","needQuote":true,"nodes":[{"content":"Ldind_I1","pos":[0,8]}]},{"pos":[149627,149635],"content":"Ldind_I2","needQuote":true,"nodes":[{"content":"Ldind_I2","pos":[0,8]}]},{"pos":[150680,150688],"content":"Ldind_I4","needQuote":true,"nodes":[{"content":"Ldind_I4","pos":[0,8]}]},{"pos":[151734,151742],"content":"Ldind_I8","needQuote":true,"nodes":[{"content":"Ldind_I8","pos":[0,8]}]},{"pos":[152788,152796],"content":"Ldind_R4","needQuote":true,"nodes":[{"content":"Ldind_R4","pos":[0,8]}]},{"pos":[153852,153860],"content":"Ldind_R8","needQuote":true,"nodes":[{"content":"Ldind_R8","pos":[0,8]}]},{"pos":[154919,154928],"content":"Ldind_Ref","needQuote":true,"nodes":[{"content":"Ldind_Ref","pos":[0,9]}]},{"pos":[155979,155987],"content":"Ldind_U1","needQuote":true,"nodes":[{"content":"Ldind_U1","pos":[0,8]}]},{"pos":[157040,157048],"content":"Ldind_U2","needQuote":true,"nodes":[{"content":"Ldind_U2","pos":[0,8]}]},{"pos":[158102,158110],"content":"Ldind_U4","needQuote":true,"nodes":[{"content":"Ldind_U4","pos":[0,8]}]},{"pos":[159156,159161],"content":"Ldlen","needQuote":true,"nodes":[{"content":"Ldlen","pos":[0,5]}]},{"pos":[160167,160172],"content":"Ldloc","needQuote":true,"nodes":[{"content":"Ldloc","pos":[0,5]}]},{"pos":[161160,161167],"content":"Ldloc_0","needQuote":true,"nodes":[{"content":"Ldloc_0","pos":[0,7]}]},{"pos":[162155,162162],"content":"Ldloc_1","needQuote":true,"nodes":[{"content":"Ldloc_1","pos":[0,7]}]},{"pos":[163150,163157],"content":"Ldloc_2","needQuote":true,"nodes":[{"content":"Ldloc_2","pos":[0,7]}]},{"pos":[164145,164152],"content":"Ldloc_3","needQuote":true,"nodes":[{"content":"Ldloc_3","pos":[0,7]}]},{"pos":[165140,165147],"content":"Ldloc_S","needQuote":true,"nodes":[{"content":"Ldloc_S","pos":[0,7]}]},{"pos":[166153,166159],"content":"Ldloca","needQuote":true,"nodes":[{"content":"Ldloca","pos":[0,6]}]},{"pos":[167170,167178],"content":"Ldloca_S","needQuote":true,"nodes":[{"content":"Ldloca_S","pos":[0,8]}]},{"pos":[168204,168210],"content":"Ldnull","needQuote":true,"nodes":[{"content":"Ldnull","pos":[0,6]}]},{"pos":[169201,169206],"content":"Ldobj","needQuote":true,"nodes":[{"content":"Ldobj","pos":[0,5]}]},{"pos":[170209,170215],"content":"Ldsfld","needQuote":true,"nodes":[{"content":"Ldsfld","pos":[0,6]}]},{"pos":[171198,171205],"content":"Ldsflda","needQuote":true,"nodes":[{"content":"Ldsflda","pos":[0,7]}]},{"pos":[172189,172194],"content":"Ldstr","needQuote":true,"nodes":[{"content":"Ldstr","pos":[0,5]}]},{"pos":[173184,173191],"content":"Ldtoken","needQuote":true,"nodes":[{"content":"Ldtoken","pos":[0,7]}]},{"pos":[174218,174227],"content":"Ldvirtftn","needQuote":true,"nodes":[{"content":"Ldvirtftn","pos":[0,9]}]},{"pos":[175342,175347],"content":"Leave","needQuote":true,"nodes":[{"content":"Leave","pos":[0,5]}]},{"pos":[176368,176375],"content":"Leave_S","needQuote":true,"nodes":[{"content":"Leave_S","pos":[0,7]}]},{"pos":[177413,177421],"content":"Localloc","needQuote":true,"nodes":[{"content":"Localloc","pos":[0,8]}]},{"pos":[178551,178559],"content":"Mkrefany","needQuote":true,"nodes":[{"content":"Mkrefany","pos":[0,8]}]},{"pos":[179564,179567],"content":"Mul","needQuote":true,"nodes":[{"content":"Mul","pos":[0,3]}]},{"pos":[180542,180549],"content":"Mul_Ovf","needQuote":true,"nodes":[{"content":"Mul_Ovf","pos":[0,7]}]},{"pos":[181592,181602],"content":"Mul_Ovf_Un","needQuote":true,"nodes":[{"content":"Mul_Ovf_Un","pos":[0,10]}]},{"pos":[182648,182651],"content":"Neg","needQuote":true,"nodes":[{"content":"Neg","pos":[0,3]}]},{"pos":[183619,183625],"content":"Newarr","needQuote":true,"nodes":[{"content":"Newarr","pos":[0,6]}]},{"pos":[184678,184684],"content":"Newobj","needQuote":true,"nodes":[{"content":"Newobj","pos":[0,6]}]},{"pos":[185730,185733],"content":"Nop","needQuote":true,"nodes":[{"content":"Nop","pos":[0,3]}]},{"pos":[186744,186747],"content":"Not","needQuote":true,"nodes":[{"content":"Not","pos":[0,3]}]},{"pos":[187777,187779],"content":"Or","needQuote":true,"nodes":[{"content":"Or","pos":[0,2]}]},{"pos":[188794,188797],"content":"Pop","needQuote":true,"nodes":[{"content":"Pop","pos":[0,3]}]},{"pos":[189762,189769],"content":"Prefix1","needQuote":true,"nodes":[{"content":"Prefix1","pos":[0,7]}]},{"pos":[190727,190734],"content":"Prefix2","needQuote":true,"nodes":[{"content":"Prefix2","pos":[0,7]}]},{"pos":[191692,191699],"content":"Prefix3","needQuote":true,"nodes":[{"content":"Prefix3","pos":[0,7]}]},{"pos":[192657,192664],"content":"Prefix4","needQuote":true,"nodes":[{"content":"Prefix4","pos":[0,7]}]},{"pos":[193622,193629],"content":"Prefix5","needQuote":true,"nodes":[{"content":"Prefix5","pos":[0,7]}]},{"pos":[194587,194594],"content":"Prefix6","needQuote":true,"nodes":[{"content":"Prefix6","pos":[0,7]}]},{"pos":[195552,195559],"content":"Prefix7","needQuote":true,"nodes":[{"content":"Prefix7","pos":[0,7]}]},{"pos":[196523,196532],"content":"Prefixref","needQuote":true,"nodes":[{"content":"Prefixref","pos":[0,9]}]},{"pos":[197503,197511],"content":"Readonly","needQuote":true,"nodes":[{"content":"Readonly","pos":[0,8]}]},{"pos":[198611,198621],"content":"Refanytype","needQuote":true,"nodes":[{"content":"Refanytype","pos":[0,10]}]},{"pos":[199624,199633],"content":"Refanyval","needQuote":true,"nodes":[{"content":"Refanyval","pos":[0,9]}]},{"pos":[200636,200639],"content":"Rem","needQuote":true,"nodes":[{"content":"Rem","pos":[0,3]}]},{"pos":[201613,201619],"content":"Rem_Un","needQuote":true,"nodes":[{"content":"Rem_Un","pos":[0,6]}]},{"pos":[202608,202611],"content":"Ret","needQuote":true,"nodes":[{"content":"Ret","pos":[0,3]}]},{"pos":[203656,203663],"content":"Rethrow","needQuote":true,"nodes":[{"content":"Rethrow","pos":[0,7]}]},{"pos":[204609,204612],"content":"Shl","needQuote":true,"nodes":[{"content":"Shl","pos":[0,3]}]},{"pos":[205631,205634],"content":"Shr","needQuote":true,"nodes":[{"content":"Shr","pos":[0,3]}]},{"pos":[206661,206667],"content":"Shr_Un","needQuote":true,"nodes":[{"content":"Shr_Un","pos":[0,6]}]},{"pos":[207720,207726],"content":"Sizeof","needQuote":true,"nodes":[{"content":"Sizeof","pos":[0,6]}]},{"pos":[208880,208885],"content":"Starg","needQuote":true,"nodes":[{"content":"Starg","pos":[0,5]}]},{"pos":[209892,209899],"content":"Starg_S","needQuote":true,"nodes":[{"content":"Starg_S","pos":[0,7]}]},{"pos":[210924,210930],"content":"Stelem","needQuote":true,"nodes":[{"content":"Stelem","pos":[0,6]}]},{"pos":[211982,211990],"content":"Stelem_I","needQuote":true,"nodes":[{"content":"Stelem_I","pos":[0,8]}]},{"pos":[213039,213048],"content":"Stelem_I1","needQuote":true,"nodes":[{"content":"Stelem_I1","pos":[0,9]}]},{"pos":[214096,214105],"content":"Stelem_I2","needQuote":true,"nodes":[{"content":"Stelem_I2","pos":[0,9]}]},{"pos":[215154,215163],"content":"Stelem_I4","needQuote":true,"nodes":[{"content":"Stelem_I4","pos":[0,9]}]},{"pos":[216212,216221],"content":"Stelem_I8","needQuote":true,"nodes":[{"content":"Stelem_I8","pos":[0,9]}]},{"pos":[217270,217279],"content":"Stelem_R4","needQuote":true,"nodes":[{"content":"Stelem_R4","pos":[0,9]}]},{"pos":[218330,218339],"content":"Stelem_R8","needQuote":true,"nodes":[{"content":"Stelem_R8","pos":[0,9]}]},{"pos":[219393,219403],"content":"Stelem_Ref","needQuote":true,"nodes":[{"content":"Stelem_Ref","pos":[0,10]}]},{"pos":[220459,220464],"content":"Stfld","needQuote":true,"nodes":[{"content":"Stfld","pos":[0,5]}]},{"pos":[221471,221478],"content":"Stind_I","needQuote":true,"nodes":[{"content":"Stind_I","pos":[0,7]}]},{"pos":[222481,222489],"content":"Stind_I1","needQuote":true,"nodes":[{"content":"Stind_I1","pos":[0,8]}]},{"pos":[223491,223499],"content":"Stind_I2","needQuote":true,"nodes":[{"content":"Stind_I2","pos":[0,8]}]},{"pos":[224502,224510],"content":"Stind_I4","needQuote":true,"nodes":[{"content":"Stind_I4","pos":[0,8]}]},{"pos":[225513,225521],"content":"Stind_I8","needQuote":true,"nodes":[{"content":"Stind_I8","pos":[0,8]}]},{"pos":[226524,226532],"content":"Stind_R4","needQuote":true,"nodes":[{"content":"Stind_R4","pos":[0,8]}]},{"pos":[227537,227545],"content":"Stind_R8","needQuote":true,"nodes":[{"content":"Stind_R8","pos":[0,8]}]},{"pos":[228553,228562],"content":"Stind_Ref","needQuote":true,"nodes":[{"content":"Stind_Ref","pos":[0,9]}]},{"pos":[229547,229552],"content":"Stloc","needQuote":true,"nodes":[{"content":"Stloc","pos":[0,5]}]},{"pos":[230593,230600],"content":"Stloc_0","needQuote":true,"nodes":[{"content":"Stloc_0","pos":[0,7]}]},{"pos":[231640,231647],"content":"Stloc_1","needQuote":true,"nodes":[{"content":"Stloc_1","pos":[0,7]}]},{"pos":[232687,232694],"content":"Stloc_2","needQuote":true,"nodes":[{"content":"Stloc_2","pos":[0,7]}]},{"pos":[233734,233741],"content":"Stloc_3","needQuote":true,"nodes":[{"content":"Stloc_3","pos":[0,7]}]},{"pos":[234781,234788],"content":"Stloc_S","needQuote":true,"nodes":[{"content":"Stloc_S","pos":[0,7]}]},{"pos":[235842,235847],"content":"Stobj","needQuote":true,"nodes":[{"content":"Stobj","pos":[0,5]}]},{"pos":[236853,236859],"content":"Stsfld","needQuote":true,"nodes":[{"content":"Stsfld","pos":[0,6]}]},{"pos":[237845,237848],"content":"Sub","needQuote":true,"nodes":[{"content":"Sub","pos":[0,3]}]},{"pos":[238836,238843],"content":"Sub_Ovf","needQuote":true,"nodes":[{"content":"Sub_Ovf","pos":[0,7]}]},{"pos":[239897,239907],"content":"Sub_Ovf_Un","needQuote":true,"nodes":[{"content":"Sub_Ovf_Un","pos":[0,10]}]},{"pos":[240973,240979],"content":"Switch","needQuote":true,"nodes":[{"content":"Switch","pos":[0,6]}]},{"pos":[241927,241935],"content":"Tailcall","needQuote":true,"nodes":[{"content":"Tailcall","pos":[0,8]}]},{"pos":[243007,243012],"content":"Throw","needQuote":true,"nodes":[{"content":"Throw","pos":[0,5]}]},{"pos":[243997,244006],"content":"Unaligned","needQuote":true,"nodes":[{"content":"Unaligned","pos":[0,9]}]},{"pos":[245277,245282],"content":"Unbox","needQuote":true,"nodes":[{"content":"Unbox","pos":[0,5]}]},{"pos":[246275,246284],"content":"Unbox_Any","needQuote":true,"nodes":[{"content":"Unbox_Any","pos":[0,9]}]},{"pos":[247318,247326],"content":"Volatile","needQuote":true,"nodes":[{"content":"Volatile","pos":[0,8]}]},{"pos":[248447,248450],"content":"Xor","needQuote":true,"nodes":[{"content":"Xor","pos":[0,3]}]},{"pos":[249615,249646],"content":"TakesSingleByteArgument(OpCode)","needQuote":true,"nodes":[{"content":"TakesSingleByteArgument(OpCode)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An instance of an Opcode object.","pos":[250473,250510],"source":"\\n<p>An instance of an Opcode object."},{"content":"&lt;/p&gt;\\n","pos":[250511,250517],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;True&lt;/strong&gt; or &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[250578,250639],"source":"\\n<p>\\n<strong>True</strong> or <strong>false</strong>.</p>\\n"},{"pos":[250847,250869],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[251048,251054],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[251214,251224],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[251319,251327],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[251396,251397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[251424,251425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251495,251503],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[251572,251573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[251600,251601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251784,251798],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[251917,251923],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[251990,251991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252041,252047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[252107,252108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252191,252197],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[252264,252265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252315,252321],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[252381,252382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252596,252618],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[252766,252772],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[252839,252840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[252890,252896],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[252957,252958]},{"pos":[253013,253019],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[253079,253080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[253177,253183],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[253250,253251],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[253301,253307],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[253368,253369]},{"pos":[253424,253430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[253490,253491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[253736,253767],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[253933,253948],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[254024,254025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[254075,254081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[254142,254143]},{"pos":[254198,254204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[254264,254265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254371,254386],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[254462,254463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[254513,254519],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[254580,254581]},{"pos":[254636,254642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[254702,254703],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254933,254946],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[255047,255058],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[255130,255131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255158,255159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255232,255243],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[255315,255316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255343,255344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255519,255528],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[255621,255628],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[255696,255697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255724,255725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[255794,255801],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[255869,255870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[255897,255898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256073,256090],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[256199,256214],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[256290,256291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256318,256319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256396,256411],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[256487,256488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[256515,256516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[256661,256667],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[256830,256836],"content":"OpCode","needQuote":true,"nodes":[{"content":"OpCode","pos":[0,6]}]},{"pos":[257014,257021],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Reflection.Emit.OpCodes\n  commentId: T:System.Reflection.Emit.OpCodes\n  id: OpCodes\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.OpCodes.Add\n  - System.Reflection.Emit.OpCodes.Add_Ovf\n  - System.Reflection.Emit.OpCodes.Add_Ovf_Un\n  - System.Reflection.Emit.OpCodes.And\n  - System.Reflection.Emit.OpCodes.Arglist\n  - System.Reflection.Emit.OpCodes.Beq\n  - System.Reflection.Emit.OpCodes.Beq_S\n  - System.Reflection.Emit.OpCodes.Bge\n  - System.Reflection.Emit.OpCodes.Bge_S\n  - System.Reflection.Emit.OpCodes.Bge_Un\n  - System.Reflection.Emit.OpCodes.Bge_Un_S\n  - System.Reflection.Emit.OpCodes.Bgt\n  - System.Reflection.Emit.OpCodes.Bgt_S\n  - System.Reflection.Emit.OpCodes.Bgt_Un\n  - System.Reflection.Emit.OpCodes.Bgt_Un_S\n  - System.Reflection.Emit.OpCodes.Ble\n  - System.Reflection.Emit.OpCodes.Ble_S\n  - System.Reflection.Emit.OpCodes.Ble_Un\n  - System.Reflection.Emit.OpCodes.Ble_Un_S\n  - System.Reflection.Emit.OpCodes.Blt\n  - System.Reflection.Emit.OpCodes.Blt_S\n  - System.Reflection.Emit.OpCodes.Blt_Un\n  - System.Reflection.Emit.OpCodes.Blt_Un_S\n  - System.Reflection.Emit.OpCodes.Bne_Un\n  - System.Reflection.Emit.OpCodes.Bne_Un_S\n  - System.Reflection.Emit.OpCodes.Box\n  - System.Reflection.Emit.OpCodes.Br\n  - System.Reflection.Emit.OpCodes.Br_S\n  - System.Reflection.Emit.OpCodes.Break\n  - System.Reflection.Emit.OpCodes.Brfalse\n  - System.Reflection.Emit.OpCodes.Brfalse_S\n  - System.Reflection.Emit.OpCodes.Brtrue\n  - System.Reflection.Emit.OpCodes.Brtrue_S\n  - System.Reflection.Emit.OpCodes.Call\n  - System.Reflection.Emit.OpCodes.Calli\n  - System.Reflection.Emit.OpCodes.Callvirt\n  - System.Reflection.Emit.OpCodes.Castclass\n  - System.Reflection.Emit.OpCodes.Ceq\n  - System.Reflection.Emit.OpCodes.Cgt\n  - System.Reflection.Emit.OpCodes.Cgt_Un\n  - System.Reflection.Emit.OpCodes.Ckfinite\n  - System.Reflection.Emit.OpCodes.Clt\n  - System.Reflection.Emit.OpCodes.Clt_Un\n  - System.Reflection.Emit.OpCodes.Constrained\n  - System.Reflection.Emit.OpCodes.Conv_I\n  - System.Reflection.Emit.OpCodes.Conv_I1\n  - System.Reflection.Emit.OpCodes.Conv_I2\n  - System.Reflection.Emit.OpCodes.Conv_I4\n  - System.Reflection.Emit.OpCodes.Conv_I8\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I1\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I2\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I4\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I8\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U1\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U2\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U4\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U8\n  - System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un\n  - System.Reflection.Emit.OpCodes.Conv_R_Un\n  - System.Reflection.Emit.OpCodes.Conv_R4\n  - System.Reflection.Emit.OpCodes.Conv_R8\n  - System.Reflection.Emit.OpCodes.Conv_U\n  - System.Reflection.Emit.OpCodes.Conv_U1\n  - System.Reflection.Emit.OpCodes.Conv_U2\n  - System.Reflection.Emit.OpCodes.Conv_U4\n  - System.Reflection.Emit.OpCodes.Conv_U8\n  - System.Reflection.Emit.OpCodes.Cpblk\n  - System.Reflection.Emit.OpCodes.Cpobj\n  - System.Reflection.Emit.OpCodes.Div\n  - System.Reflection.Emit.OpCodes.Div_Un\n  - System.Reflection.Emit.OpCodes.Dup\n  - System.Reflection.Emit.OpCodes.Endfilter\n  - System.Reflection.Emit.OpCodes.Endfinally\n  - System.Reflection.Emit.OpCodes.Initblk\n  - System.Reflection.Emit.OpCodes.Initobj\n  - System.Reflection.Emit.OpCodes.Isinst\n  - System.Reflection.Emit.OpCodes.Jmp\n  - System.Reflection.Emit.OpCodes.Ldarg\n  - System.Reflection.Emit.OpCodes.Ldarg_0\n  - System.Reflection.Emit.OpCodes.Ldarg_1\n  - System.Reflection.Emit.OpCodes.Ldarg_2\n  - System.Reflection.Emit.OpCodes.Ldarg_3\n  - System.Reflection.Emit.OpCodes.Ldarg_S\n  - System.Reflection.Emit.OpCodes.Ldarga\n  - System.Reflection.Emit.OpCodes.Ldarga_S\n  - System.Reflection.Emit.OpCodes.Ldc_I4\n  - System.Reflection.Emit.OpCodes.Ldc_I4_0\n  - System.Reflection.Emit.OpCodes.Ldc_I4_1\n  - System.Reflection.Emit.OpCodes.Ldc_I4_2\n  - System.Reflection.Emit.OpCodes.Ldc_I4_3\n  - System.Reflection.Emit.OpCodes.Ldc_I4_4\n  - System.Reflection.Emit.OpCodes.Ldc_I4_5\n  - System.Reflection.Emit.OpCodes.Ldc_I4_6\n  - System.Reflection.Emit.OpCodes.Ldc_I4_7\n  - System.Reflection.Emit.OpCodes.Ldc_I4_8\n  - System.Reflection.Emit.OpCodes.Ldc_I4_M1\n  - System.Reflection.Emit.OpCodes.Ldc_I4_S\n  - System.Reflection.Emit.OpCodes.Ldc_I8\n  - System.Reflection.Emit.OpCodes.Ldc_R4\n  - System.Reflection.Emit.OpCodes.Ldc_R8\n  - System.Reflection.Emit.OpCodes.Ldelem\n  - System.Reflection.Emit.OpCodes.Ldelem_I\n  - System.Reflection.Emit.OpCodes.Ldelem_I1\n  - System.Reflection.Emit.OpCodes.Ldelem_I2\n  - System.Reflection.Emit.OpCodes.Ldelem_I4\n  - System.Reflection.Emit.OpCodes.Ldelem_I8\n  - System.Reflection.Emit.OpCodes.Ldelem_R4\n  - System.Reflection.Emit.OpCodes.Ldelem_R8\n  - System.Reflection.Emit.OpCodes.Ldelem_Ref\n  - System.Reflection.Emit.OpCodes.Ldelem_U1\n  - System.Reflection.Emit.OpCodes.Ldelem_U2\n  - System.Reflection.Emit.OpCodes.Ldelem_U4\n  - System.Reflection.Emit.OpCodes.Ldelema\n  - System.Reflection.Emit.OpCodes.Ldfld\n  - System.Reflection.Emit.OpCodes.Ldflda\n  - System.Reflection.Emit.OpCodes.Ldftn\n  - System.Reflection.Emit.OpCodes.Ldind_I\n  - System.Reflection.Emit.OpCodes.Ldind_I1\n  - System.Reflection.Emit.OpCodes.Ldind_I2\n  - System.Reflection.Emit.OpCodes.Ldind_I4\n  - System.Reflection.Emit.OpCodes.Ldind_I8\n  - System.Reflection.Emit.OpCodes.Ldind_R4\n  - System.Reflection.Emit.OpCodes.Ldind_R8\n  - System.Reflection.Emit.OpCodes.Ldind_Ref\n  - System.Reflection.Emit.OpCodes.Ldind_U1\n  - System.Reflection.Emit.OpCodes.Ldind_U2\n  - System.Reflection.Emit.OpCodes.Ldind_U4\n  - System.Reflection.Emit.OpCodes.Ldlen\n  - System.Reflection.Emit.OpCodes.Ldloc\n  - System.Reflection.Emit.OpCodes.Ldloc_0\n  - System.Reflection.Emit.OpCodes.Ldloc_1\n  - System.Reflection.Emit.OpCodes.Ldloc_2\n  - System.Reflection.Emit.OpCodes.Ldloc_3\n  - System.Reflection.Emit.OpCodes.Ldloc_S\n  - System.Reflection.Emit.OpCodes.Ldloca\n  - System.Reflection.Emit.OpCodes.Ldloca_S\n  - System.Reflection.Emit.OpCodes.Ldnull\n  - System.Reflection.Emit.OpCodes.Ldobj\n  - System.Reflection.Emit.OpCodes.Ldsfld\n  - System.Reflection.Emit.OpCodes.Ldsflda\n  - System.Reflection.Emit.OpCodes.Ldstr\n  - System.Reflection.Emit.OpCodes.Ldtoken\n  - System.Reflection.Emit.OpCodes.Ldvirtftn\n  - System.Reflection.Emit.OpCodes.Leave\n  - System.Reflection.Emit.OpCodes.Leave_S\n  - System.Reflection.Emit.OpCodes.Localloc\n  - System.Reflection.Emit.OpCodes.Mkrefany\n  - System.Reflection.Emit.OpCodes.Mul\n  - System.Reflection.Emit.OpCodes.Mul_Ovf\n  - System.Reflection.Emit.OpCodes.Mul_Ovf_Un\n  - System.Reflection.Emit.OpCodes.Neg\n  - System.Reflection.Emit.OpCodes.Newarr\n  - System.Reflection.Emit.OpCodes.Newobj\n  - System.Reflection.Emit.OpCodes.Nop\n  - System.Reflection.Emit.OpCodes.Not\n  - System.Reflection.Emit.OpCodes.Or\n  - System.Reflection.Emit.OpCodes.Pop\n  - System.Reflection.Emit.OpCodes.Prefix1\n  - System.Reflection.Emit.OpCodes.Prefix2\n  - System.Reflection.Emit.OpCodes.Prefix3\n  - System.Reflection.Emit.OpCodes.Prefix4\n  - System.Reflection.Emit.OpCodes.Prefix5\n  - System.Reflection.Emit.OpCodes.Prefix6\n  - System.Reflection.Emit.OpCodes.Prefix7\n  - System.Reflection.Emit.OpCodes.Prefixref\n  - System.Reflection.Emit.OpCodes.Readonly\n  - System.Reflection.Emit.OpCodes.Refanytype\n  - System.Reflection.Emit.OpCodes.Refanyval\n  - System.Reflection.Emit.OpCodes.Rem\n  - System.Reflection.Emit.OpCodes.Rem_Un\n  - System.Reflection.Emit.OpCodes.Ret\n  - System.Reflection.Emit.OpCodes.Rethrow\n  - System.Reflection.Emit.OpCodes.Shl\n  - System.Reflection.Emit.OpCodes.Shr\n  - System.Reflection.Emit.OpCodes.Shr_Un\n  - System.Reflection.Emit.OpCodes.Sizeof\n  - System.Reflection.Emit.OpCodes.Starg\n  - System.Reflection.Emit.OpCodes.Starg_S\n  - System.Reflection.Emit.OpCodes.Stelem\n  - System.Reflection.Emit.OpCodes.Stelem_I\n  - System.Reflection.Emit.OpCodes.Stelem_I1\n  - System.Reflection.Emit.OpCodes.Stelem_I2\n  - System.Reflection.Emit.OpCodes.Stelem_I4\n  - System.Reflection.Emit.OpCodes.Stelem_I8\n  - System.Reflection.Emit.OpCodes.Stelem_R4\n  - System.Reflection.Emit.OpCodes.Stelem_R8\n  - System.Reflection.Emit.OpCodes.Stelem_Ref\n  - System.Reflection.Emit.OpCodes.Stfld\n  - System.Reflection.Emit.OpCodes.Stind_I\n  - System.Reflection.Emit.OpCodes.Stind_I1\n  - System.Reflection.Emit.OpCodes.Stind_I2\n  - System.Reflection.Emit.OpCodes.Stind_I4\n  - System.Reflection.Emit.OpCodes.Stind_I8\n  - System.Reflection.Emit.OpCodes.Stind_R4\n  - System.Reflection.Emit.OpCodes.Stind_R8\n  - System.Reflection.Emit.OpCodes.Stind_Ref\n  - System.Reflection.Emit.OpCodes.Stloc\n  - System.Reflection.Emit.OpCodes.Stloc_0\n  - System.Reflection.Emit.OpCodes.Stloc_1\n  - System.Reflection.Emit.OpCodes.Stloc_2\n  - System.Reflection.Emit.OpCodes.Stloc_3\n  - System.Reflection.Emit.OpCodes.Stloc_S\n  - System.Reflection.Emit.OpCodes.Stobj\n  - System.Reflection.Emit.OpCodes.Stsfld\n  - System.Reflection.Emit.OpCodes.Sub\n  - System.Reflection.Emit.OpCodes.Sub_Ovf\n  - System.Reflection.Emit.OpCodes.Sub_Ovf_Un\n  - System.Reflection.Emit.OpCodes.Switch\n  - System.Reflection.Emit.OpCodes.Tailcall\n  - System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.OpCodes.Throw\n  - System.Reflection.Emit.OpCodes.Unaligned\n  - System.Reflection.Emit.OpCodes.Unbox\n  - System.Reflection.Emit.OpCodes.Unbox_Any\n  - System.Reflection.Emit.OpCodes.Volatile\n  - System.Reflection.Emit.OpCodes.Xor\n  langs:\n  - csharp\n  - vb\n  name: OpCodes\n  fullName: System.Reflection.Emit.OpCodes\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpCodes\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 252\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Provides field representations of the Microsoft Intermediate Language (MSIL) instructions for emission by the <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class members (such as <xref href=\\\"System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class OpCodes\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class OpCodes\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: OpCodes\n- uid: System.Reflection.Emit.OpCodes.Add\n  commentId: F:System.Reflection.Emit.OpCodes.Add\n  id: Add\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Add\n  fullName: System.Reflection.Emit.OpCodes.Add\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1141\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds two values and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Add\n    content.vb: Public Shared ReadOnly Add As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Add\n- uid: System.Reflection.Emit.OpCodes.Add_Ovf\n  commentId: F:System.Reflection.Emit.OpCodes.Add_Ovf\n  id: Add_Ovf\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Add_Ovf\n  fullName: System.Reflection.Emit.OpCodes.Add_Ovf\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add_Ovf\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2073\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Add_Ovf\n    content.vb: Public Shared ReadOnly Add_Ovf As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Add_Ovf\n- uid: System.Reflection.Emit.OpCodes.Add_Ovf_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Add_Ovf_Un\n  id: Add_Ovf_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Add_Ovf_Un\n  fullName: System.Reflection.Emit.OpCodes.Add_Ovf_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add_Ovf_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2083\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Add_Ovf_Un\n    content.vb: Public Shared ReadOnly Add_Ovf_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Add_Ovf_Un\n- uid: System.Reflection.Emit.OpCodes.And\n  commentId: F:System.Reflection.Emit.OpCodes.And\n  id: And\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: And\n  fullName: System.Reflection.Emit.OpCodes.And\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: And\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1211\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Computes the bitwise AND of two values and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode And\n    content.vb: Public Shared ReadOnly And As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.And\n- uid: System.Reflection.Emit.OpCodes.Arglist\n  commentId: F:System.Reflection.Emit.OpCodes.Arglist\n  id: Arglist\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Arglist\n  fullName: System.Reflection.Emit.OpCodes.Arglist\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Arglist\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2266\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns an unmanaged pointer to the argument list of the current method.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Arglist\n    content.vb: Public Shared ReadOnly Arglist As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Arglist\n- uid: System.Reflection.Emit.OpCodes.Beq\n  commentId: F:System.Reflection.Emit.OpCodes.Beq\n  id: Beq\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Beq\n  fullName: System.Reflection.Emit.OpCodes.Beq\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Beq\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 851\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if two values are equal.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Beq\n    content.vb: Public Shared ReadOnly Beq As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Beq\n- uid: System.Reflection.Emit.OpCodes.Beq_S\n  commentId: F:System.Reflection.Emit.OpCodes.Beq_S\n  id: Beq_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Beq_S\n  fullName: System.Reflection.Emit.OpCodes.Beq_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Beq_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 720\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if two values are equal.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Beq_S\n    content.vb: Public Shared ReadOnly Beq_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Beq_S\n- uid: System.Reflection.Emit.OpCodes.Bge\n  commentId: F:System.Reflection.Emit.OpCodes.Bge\n  id: Bge\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bge\n  fullName: System.Reflection.Emit.OpCodes.Bge\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bge\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 861\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is greater than or equal to the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bge\n    content.vb: Public Shared ReadOnly Bge As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bge\n- uid: System.Reflection.Emit.OpCodes.Bge_S\n  commentId: F:System.Reflection.Emit.OpCodes.Bge_S\n  id: Bge_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bge_S\n  fullName: System.Reflection.Emit.OpCodes.Bge_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bge_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 730\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bge_S\n    content.vb: Public Shared ReadOnly Bge_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bge_S\n- uid: System.Reflection.Emit.OpCodes.Bge_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Bge_Un\n  id: Bge_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bge_Un\n  fullName: System.Reflection.Emit.OpCodes.Bge_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bge_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 911\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bge_Un\n    content.vb: Public Shared ReadOnly Bge_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bge_Un\n- uid: System.Reflection.Emit.OpCodes.Bge_Un_S\n  commentId: F:System.Reflection.Emit.OpCodes.Bge_Un_S\n  id: Bge_Un_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bge_Un_S\n  fullName: System.Reflection.Emit.OpCodes.Bge_Un_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bge_Un_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 780\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bge_Un_S\n    content.vb: Public Shared ReadOnly Bge_Un_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bge_Un_S\n- uid: System.Reflection.Emit.OpCodes.Bgt\n  commentId: F:System.Reflection.Emit.OpCodes.Bgt\n  id: Bgt\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bgt\n  fullName: System.Reflection.Emit.OpCodes.Bgt\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bgt\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 871\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is greater than the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bgt\n    content.vb: Public Shared ReadOnly Bgt As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bgt\n- uid: System.Reflection.Emit.OpCodes.Bgt_S\n  commentId: F:System.Reflection.Emit.OpCodes.Bgt_S\n  id: Bgt_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bgt_S\n  fullName: System.Reflection.Emit.OpCodes.Bgt_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bgt_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 740\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is greater than the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bgt_S\n    content.vb: Public Shared ReadOnly Bgt_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bgt_S\n- uid: System.Reflection.Emit.OpCodes.Bgt_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Bgt_Un\n  id: Bgt_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bgt_Un\n  fullName: System.Reflection.Emit.OpCodes.Bgt_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bgt_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 921\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bgt_Un\n    content.vb: Public Shared ReadOnly Bgt_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bgt_Un\n- uid: System.Reflection.Emit.OpCodes.Bgt_Un_S\n  commentId: F:System.Reflection.Emit.OpCodes.Bgt_Un_S\n  id: Bgt_Un_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bgt_Un_S\n  fullName: System.Reflection.Emit.OpCodes.Bgt_Un_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bgt_Un_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 790\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bgt_Un_S\n    content.vb: Public Shared ReadOnly Bgt_Un_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bgt_Un_S\n- uid: System.Reflection.Emit.OpCodes.Ble\n  commentId: F:System.Reflection.Emit.OpCodes.Ble\n  id: Ble\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ble\n  fullName: System.Reflection.Emit.OpCodes.Ble\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ble\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 881\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is less than or equal to the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ble\n    content.vb: Public Shared ReadOnly Ble As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ble\n- uid: System.Reflection.Emit.OpCodes.Ble_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ble_S\n  id: Ble_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ble_S\n  fullName: System.Reflection.Emit.OpCodes.Ble_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ble_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 750\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ble_S\n    content.vb: Public Shared ReadOnly Ble_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ble_S\n- uid: System.Reflection.Emit.OpCodes.Ble_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Ble_Un\n  id: Ble_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ble_Un\n  fullName: System.Reflection.Emit.OpCodes.Ble_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ble_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 931\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ble_Un\n    content.vb: Public Shared ReadOnly Ble_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ble_Un\n- uid: System.Reflection.Emit.OpCodes.Ble_Un_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ble_Un_S\n  id: Ble_Un_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ble_Un_S\n  fullName: System.Reflection.Emit.OpCodes.Ble_Un_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ble_Un_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 800\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ble_Un_S\n    content.vb: Public Shared ReadOnly Ble_Un_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ble_Un_S\n- uid: System.Reflection.Emit.OpCodes.Blt\n  commentId: F:System.Reflection.Emit.OpCodes.Blt\n  id: Blt\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Blt\n  fullName: System.Reflection.Emit.OpCodes.Blt\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Blt\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 891\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is less than the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Blt\n    content.vb: Public Shared ReadOnly Blt As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Blt\n- uid: System.Reflection.Emit.OpCodes.Blt_S\n  commentId: F:System.Reflection.Emit.OpCodes.Blt_S\n  id: Blt_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Blt_S\n  fullName: System.Reflection.Emit.OpCodes.Blt_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Blt_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 760\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is less than the second value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Blt_S\n    content.vb: Public Shared ReadOnly Blt_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Blt_S\n- uid: System.Reflection.Emit.OpCodes.Blt_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Blt_Un\n  id: Blt_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Blt_Un\n  fullName: System.Reflection.Emit.OpCodes.Blt_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Blt_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 941\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Blt_Un\n    content.vb: Public Shared ReadOnly Blt_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Blt_Un\n- uid: System.Reflection.Emit.OpCodes.Blt_Un_S\n  commentId: F:System.Reflection.Emit.OpCodes.Blt_Un_S\n  id: Blt_Un_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Blt_Un_S\n  fullName: System.Reflection.Emit.OpCodes.Blt_Un_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Blt_Un_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 810\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Blt_Un_S\n    content.vb: Public Shared ReadOnly Blt_Un_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Blt_Un_S\n- uid: System.Reflection.Emit.OpCodes.Bne_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Bne_Un\n  id: Bne_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bne_Un\n  fullName: System.Reflection.Emit.OpCodes.Bne_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bne_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 901\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bne_Un\n    content.vb: Public Shared ReadOnly Bne_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bne_Un\n- uid: System.Reflection.Emit.OpCodes.Bne_Un_S\n  commentId: F:System.Reflection.Emit.OpCodes.Bne_Un_S\n  id: Bne_Un_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Bne_Un_S\n  fullName: System.Reflection.Emit.OpCodes.Bne_Un_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Bne_Un_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 770\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Bne_Un_S\n    content.vb: Public Shared ReadOnly Bne_Un_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Bne_Un_S\n- uid: System.Reflection.Emit.OpCodes.Box\n  commentId: F:System.Reflection.Emit.OpCodes.Box\n  id: Box\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Box\n  fullName: System.Reflection.Emit.OpCodes.Box\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Box\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1643\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts a value type to an object reference (type <strong>O</strong>).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Box\n    content.vb: Public Shared ReadOnly Box As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Box\n- uid: System.Reflection.Emit.OpCodes.Br\n  commentId: F:System.Reflection.Emit.OpCodes.Br\n  id: Br\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Br\n  fullName: System.Reflection.Emit.OpCodes.Br\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Br\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 820\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Unconditionally transfers control to a target instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Br\n    content.vb: Public Shared ReadOnly Br As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Br\n- uid: System.Reflection.Emit.OpCodes.Br_S\n  commentId: F:System.Reflection.Emit.OpCodes.Br_S\n  id: Br_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Br_S\n  fullName: System.Reflection.Emit.OpCodes.Br_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Br_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 689\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Unconditionally transfers control to a target instruction (short form).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Br_S\n    content.vb: Public Shared ReadOnly Br_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Br_S\n- uid: System.Reflection.Emit.OpCodes.Break\n  commentId: F:System.Reflection.Emit.OpCodes.Break\n  id: Break\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Break\n  fullName: System.Reflection.Emit.OpCodes.Break\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Break\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 277\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Break\n    content.vb: Public Shared ReadOnly Break As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Break\n- uid: System.Reflection.Emit.OpCodes.Brfalse\n  commentId: F:System.Reflection.Emit.OpCodes.Brfalse\n  id: Brfalse\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Brfalse\n  fullName: System.Reflection.Emit.OpCodes.Brfalse\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Brfalse\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 831\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if <em>value</em> is <strong>false</strong>, a null reference (<strong>Nothing</strong> in Visual Basic), or zero.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Brfalse\n    content.vb: Public Shared ReadOnly Brfalse As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Brfalse\n- uid: System.Reflection.Emit.OpCodes.Brfalse_S\n  commentId: F:System.Reflection.Emit.OpCodes.Brfalse_S\n  id: Brfalse_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Brfalse_S\n  fullName: System.Reflection.Emit.OpCodes.Brfalse_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Brfalse_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 700\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if <em>value</em> is <strong>false</strong>, a null reference, or zero.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Brfalse_S\n    content.vb: Public Shared ReadOnly Brfalse_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Brfalse_S\n- uid: System.Reflection.Emit.OpCodes.Brtrue\n  commentId: F:System.Reflection.Emit.OpCodes.Brtrue\n  id: Brtrue\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Brtrue\n  fullName: System.Reflection.Emit.OpCodes.Brtrue\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Brtrue\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 841\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction if <em>value</em> is <strong>true</strong>, not null, or non-zero.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Brtrue\n    content.vb: Public Shared ReadOnly Brtrue As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Brtrue\n- uid: System.Reflection.Emit.OpCodes.Brtrue_S\n  commentId: F:System.Reflection.Emit.OpCodes.Brtrue_S\n  id: Brtrue_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Brtrue_S\n  fullName: System.Reflection.Emit.OpCodes.Brtrue_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Brtrue_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 710\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control to a target instruction (short form) if <em>value</em> is <strong>true</strong>, not null, or non-zero.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Brtrue_S\n    content.vb: Public Shared ReadOnly Brtrue_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Brtrue_S\n- uid: System.Reflection.Emit.OpCodes.Call\n  commentId: F:System.Reflection.Emit.OpCodes.Call\n  id: Call\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Call\n  fullName: System.Reflection.Emit.OpCodes.Call\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Call\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 658\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Calls the method indicated by the passed method descriptor.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Call\n    content.vb: Public Shared ReadOnly Call As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Call\n- uid: System.Reflection.Emit.OpCodes.Calli\n  commentId: F:System.Reflection.Emit.OpCodes.Calli\n  id: Calli\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Calli\n  fullName: System.Reflection.Emit.OpCodes.Calli\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Calli\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 668\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Calli\n    content.vb: Public Shared ReadOnly Calli As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Calli\n- uid: System.Reflection.Emit.OpCodes.Callvirt\n  commentId: F:System.Reflection.Emit.OpCodes.Callvirt\n  id: Callvirt\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Callvirt\n  fullName: System.Reflection.Emit.OpCodes.Callvirt\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Callvirt\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1371\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Calls a late-bound method on an object, pushing the return value onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Callvirt\n    content.vb: Public Shared ReadOnly Callvirt As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Callvirt\n- uid: System.Reflection.Emit.OpCodes.Castclass\n  commentId: F:System.Reflection.Emit.OpCodes.Castclass\n  id: Castclass\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Castclass\n  fullName: System.Reflection.Emit.OpCodes.Castclass\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Castclass\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1422\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Attempts to cast an object passed by reference to the specified class.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static readonly OpCode Castclass\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared ReadOnly Castclass As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Castclass\n- uid: System.Reflection.Emit.OpCodes.Ceq\n  commentId: F:System.Reflection.Emit.OpCodes.Ceq\n  id: Ceq\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ceq\n  fullName: System.Reflection.Emit.OpCodes.Ceq\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ceq\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2276\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compares two values. If they are equal, the integer value 1 <strong>(int32</strong>) is pushed onto the evaluation stack; otherwise 0 (<strong>int32</strong>) is pushed onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ceq\n    content.vb: Public Shared ReadOnly Ceq As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ceq\n- uid: System.Reflection.Emit.OpCodes.Cgt\n  commentId: F:System.Reflection.Emit.OpCodes.Cgt\n  id: Cgt\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Cgt\n  fullName: System.Reflection.Emit.OpCodes.Cgt\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cgt\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2286\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compares two values. If the first value is greater than the second, the integer value 1 <strong>(int32</strong>) is pushed onto the evaluation stack; otherwise 0 (<strong>int32</strong>) is pushed onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Cgt\n    content.vb: Public Shared ReadOnly Cgt As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Cgt\n- uid: System.Reflection.Emit.OpCodes.Cgt_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Cgt_Un\n  id: Cgt_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Cgt_Un\n  fullName: System.Reflection.Emit.OpCodes.Cgt_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cgt_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2296\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 <strong>(int32</strong>) is pushed onto the evaluation stack; otherwise 0 (<strong>int32</strong>) is pushed onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Cgt_Un\n    content.vb: Public Shared ReadOnly Cgt_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Cgt_Un\n- uid: System.Reflection.Emit.OpCodes.Ckfinite\n  commentId: F:System.Reflection.Emit.OpCodes.Ckfinite\n  id: Ckfinite\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ckfinite\n  fullName: System.Reflection.Emit.OpCodes.Ckfinite\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ckfinite\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1993\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Throws <xref href=\\\"System.ArithmeticException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if value is not a finite number.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ckfinite\n    content.vb: Public Shared ReadOnly Ckfinite As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ckfinite\n- uid: System.Reflection.Emit.OpCodes.Clt\n  commentId: F:System.Reflection.Emit.OpCodes.Clt\n  id: Clt\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Clt\n  fullName: System.Reflection.Emit.OpCodes.Clt\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clt\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2306\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compares two values. If the first value is less than the second, the integer value 1 <strong>(int32</strong>) is pushed onto the evaluation stack; otherwise 0 (<strong>int32</strong>) is pushed onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Clt\n    content.vb: Public Shared ReadOnly Clt As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Clt\n- uid: System.Reflection.Emit.OpCodes.Clt_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Clt_Un\n  id: Clt_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Clt_Un\n  fullName: System.Reflection.Emit.OpCodes.Clt_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clt_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2316\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compares the unsigned or unordered values <em>value1</em> and <em>value2</em>. If <em>value1</em> is less than <em>value2</em>, then the integer value 1 <strong>(int32</strong>) is pushed onto the evaluation stack; otherwise 0 (<strong>int32</strong>) is pushed onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Clt_Un\n    content.vb: Public Shared ReadOnly Clt_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Clt_Un\n- uid: System.Reflection.Emit.OpCodes.Constrained\n  commentId: F:System.Reflection.Emit.OpCodes.Constrained\n  id: Constrained\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Constrained\n  fullName: System.Reflection.Emit.OpCodes.Constrained\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Constrained\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2467\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Constrains the type on which a virtual method call is made.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Constrained\n    content.vb: Public Shared ReadOnly Constrained As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Constrained\n- uid: System.Reflection.Emit.OpCodes.Conv_I\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_I\n  id: Conv_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_I\n  fullName: System.Reflection.Emit.OpCodes.Conv_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2043\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>native int</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_I\n    content.vb: Public Shared ReadOnly Conv_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_I\n- uid: System.Reflection.Emit.OpCodes.Conv_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_I1\n  id: Conv_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_I1\n  fullName: System.Reflection.Emit.OpCodes.Conv_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1291\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>int8</strong>, then extends (pads) it to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_I1\n    content.vb: Public Shared ReadOnly Conv_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_I1\n- uid: System.Reflection.Emit.OpCodes.Conv_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_I2\n  id: Conv_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_I2\n  fullName: System.Reflection.Emit.OpCodes.Conv_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1301\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>int16</strong>, then extends (pads) it to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_I2\n    content.vb: Public Shared ReadOnly Conv_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_I2\n- uid: System.Reflection.Emit.OpCodes.Conv_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_I4\n  id: Conv_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_I4\n  fullName: System.Reflection.Emit.OpCodes.Conv_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1311\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_I4\n    content.vb: Public Shared ReadOnly Conv_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_I4\n- uid: System.Reflection.Emit.OpCodes.Conv_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_I8\n  id: Conv_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_I8\n  fullName: System.Reflection.Emit.OpCodes.Conv_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1321\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>int64</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_I8\n    content.vb: Public Shared ReadOnly Conv_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_I8\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I\n  id: Conv_Ovf_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2053\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to signed <strong>native int</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I\n    content.vb: Public Shared ReadOnly Conv_Ovf_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un\n  id: Conv_Ovf_I_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1623\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to signed <strong>native int</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_I_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1\n  id: Conv_Ovf_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I1\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1903\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to signed <strong>int8</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I1\n    content.vb: Public Shared ReadOnly Conv_Ovf_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I1\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un\n  id: Conv_Ovf_I1_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I1_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I1_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1543\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to signed <strong>int8</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I1_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_I1_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I1_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2\n  id: Conv_Ovf_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I2\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1923\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to signed <strong>int16</strong> and extending it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I2\n    content.vb: Public Shared ReadOnly Conv_Ovf_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I2\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un\n  id: Conv_Ovf_I2_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I2_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I2_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1553\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to signed <strong>int16</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I2_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_I2_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I2_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4\n  id: Conv_Ovf_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I4\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1943\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to signed <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I4\n    content.vb: Public Shared ReadOnly Conv_Ovf_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I4\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un\n  id: Conv_Ovf_I4_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I4_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I4_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1563\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to signed <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I4_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_I4_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I4_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8\n  id: Conv_Ovf_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I8\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1963\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to signed <strong>int64</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I8\n    content.vb: Public Shared ReadOnly Conv_Ovf_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I8\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un\n  id: Conv_Ovf_I8_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_I8_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_I8_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1573\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to signed <strong>int64</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_I8_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_I8_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_I8_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U\n  id: Conv_Ovf_U\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2063\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to <strong>unsigned native int</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U\n    content.vb: Public Shared ReadOnly Conv_Ovf_U As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un\n  id: Conv_Ovf_U_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1633\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to <strong>unsigned native int</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_U_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U1\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1\n  id: Conv_Ovf_U1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U1\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1913\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to <strong>unsigned int8</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U1\n    content.vb: Public Shared ReadOnly Conv_Ovf_U1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U1\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un\n  id: Conv_Ovf_U1_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U1_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U1_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1583\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to <strong>unsigned int8</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U1_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_U1_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U1_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U2\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2\n  id: Conv_Ovf_U2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U2\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1933\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to <strong>unsigned int16</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U2\n    content.vb: Public Shared ReadOnly Conv_Ovf_U2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U2\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un\n  id: Conv_Ovf_U2_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U2_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U2_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1593\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to <strong>unsigned int16</strong> and extends it to <strong>int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U2_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_U2_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U2_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U4\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4\n  id: Conv_Ovf_U4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U4\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1953\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to <strong>unsigned int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U4\n    content.vb: Public Shared ReadOnly Conv_Ovf_U4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U4\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un\n  id: Conv_Ovf_U4_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U4_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U4_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1603\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to <strong>unsigned int32</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U4_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_U4_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U4_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U8\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8\n  id: Conv_Ovf_U8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U8\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1973\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the signed value on top of the evaluation stack to <strong>unsigned int64</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U8\n    content.vb: Public Shared ReadOnly Conv_Ovf_U8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U8\n- uid: System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un\n  id: Conv_Ovf_U8_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_Ovf_U8_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_Ovf_U8_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1613\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned value on top of the evaluation stack to <strong>unsigned int64</strong>, throwing <xref href=\\\"System.OverflowException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on overflow.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_Ovf_U8_Un\n    content.vb: Public Shared ReadOnly Conv_Ovf_U8_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_Ovf_U8_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_R_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_R_Un\n  id: Conv_R_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_R_Un\n  fullName: System.Reflection.Emit.OpCodes.Conv_R_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_R_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1442\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the unsigned integer value on top of the evaluation stack to <strong>float32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_R_Un\n    content.vb: Public Shared ReadOnly Conv_R_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_R_Un\n- uid: System.Reflection.Emit.OpCodes.Conv_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_R4\n  id: Conv_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_R4\n  fullName: System.Reflection.Emit.OpCodes.Conv_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1331\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>float32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_R4\n    content.vb: Public Shared ReadOnly Conv_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_R4\n- uid: System.Reflection.Emit.OpCodes.Conv_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_R8\n  id: Conv_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_R8\n  fullName: System.Reflection.Emit.OpCodes.Conv_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1341\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>float64</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_R8\n    content.vb: Public Shared ReadOnly Conv_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_R8\n- uid: System.Reflection.Emit.OpCodes.Conv_U\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_U\n  id: Conv_U\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_U\n  fullName: System.Reflection.Emit.OpCodes.Conv_U\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_U\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2176\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>unsigned native int</strong>, and extends it to <strong>native int</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_U\n    content.vb: Public Shared ReadOnly Conv_U As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_U\n- uid: System.Reflection.Emit.OpCodes.Conv_U1\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_U1\n  id: Conv_U1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_U1\n  fullName: System.Reflection.Emit.OpCodes.Conv_U1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_U1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2033\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>unsigned int8</strong>, and extends it to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_U1\n    content.vb: Public Shared ReadOnly Conv_U1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_U1\n- uid: System.Reflection.Emit.OpCodes.Conv_U2\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_U2\n  id: Conv_U2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_U2\n  fullName: System.Reflection.Emit.OpCodes.Conv_U2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_U2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2023\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>unsigned int16</strong>, and extends it to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_U2\n    content.vb: Public Shared ReadOnly Conv_U2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_U2\n- uid: System.Reflection.Emit.OpCodes.Conv_U4\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_U4\n  id: Conv_U4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_U4\n  fullName: System.Reflection.Emit.OpCodes.Conv_U4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_U4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1351\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>unsigned int32</strong>, and extends it to <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_U4\n    content.vb: Public Shared ReadOnly Conv_U4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_U4\n- uid: System.Reflection.Emit.OpCodes.Conv_U8\n  commentId: F:System.Reflection.Emit.OpCodes.Conv_U8\n  id: Conv_U8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Conv_U8\n  fullName: System.Reflection.Emit.OpCodes.Conv_U8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Conv_U8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1361\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the value on top of the evaluation stack to <strong>unsigned int64</strong>, and extends it to <strong>int64</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Conv_U8\n    content.vb: Public Shared ReadOnly Conv_U8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Conv_U8\n- uid: System.Reflection.Emit.OpCodes.Cpblk\n  commentId: F:System.Reflection.Emit.OpCodes.Cpblk\n  id: Cpblk\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Cpblk\n  fullName: System.Reflection.Emit.OpCodes.Cpblk\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cpblk\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2477\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Copies a specified number bytes from a source address to a destination address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Cpblk\n    content.vb: Public Shared ReadOnly Cpblk As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Cpblk\n- uid: System.Reflection.Emit.OpCodes.Cpobj\n  commentId: F:System.Reflection.Emit.OpCodes.Cpobj\n  id: Cpobj\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Cpobj\n  fullName: System.Reflection.Emit.OpCodes.Cpobj\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cpobj\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1381\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Copies the value type located at the address of an object (type <strong>&</strong>, <strong>*</strong> or <strong>native int</strong>) to the address of the destination object (type <strong>&</strong>, <strong>*</strong> or <strong>native int</strong>).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Cpobj\n    content.vb: Public Shared ReadOnly Cpobj As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Cpobj\n- uid: System.Reflection.Emit.OpCodes.Div\n  commentId: F:System.Reflection.Emit.OpCodes.Div\n  id: Div\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Div\n  fullName: System.Reflection.Emit.OpCodes.Div\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Div\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1171\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Divides two values and pushes the result as a floating-point (type <strong>F</strong>) or quotient (type <strong>int32</strong>) onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Div\n    content.vb: Public Shared ReadOnly Div As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Div\n- uid: System.Reflection.Emit.OpCodes.Div_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Div_Un\n  id: Div_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Div_Un\n  fullName: System.Reflection.Emit.OpCodes.Div_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Div_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1181\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Divides two unsigned integer values and pushes the result (<strong>int32</strong>) onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Div_Un\n    content.vb: Public Shared ReadOnly Div_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Div_Un\n- uid: System.Reflection.Emit.OpCodes.Dup\n  commentId: F:System.Reflection.Emit.OpCodes.Dup\n  id: Dup\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Dup\n  fullName: System.Reflection.Emit.OpCodes.Dup\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dup\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 627\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Dup\n    content.vb: Public Shared ReadOnly Dup As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Dup\n- uid: System.Reflection.Emit.OpCodes.Endfilter\n  commentId: F:System.Reflection.Emit.OpCodes.Endfilter\n  id: Endfilter\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Endfilter\n  fullName: System.Reflection.Emit.OpCodes.Endfilter\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Endfilter\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2416\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control from the <strong>filter</strong> clause of an exception back to the Common Language Infrastructure (CLI) exception handler.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Endfilter\n    content.vb: Public Shared ReadOnly Endfilter As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Endfilter\n- uid: System.Reflection.Emit.OpCodes.Endfinally\n  commentId: F:System.Reflection.Emit.OpCodes.Endfinally\n  id: Endfinally\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Endfinally\n  fullName: System.Reflection.Emit.OpCodes.Endfinally\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Endfinally\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2133\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Transfers control from the <strong>fault</strong> or <strong>finally</strong> clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Endfinally\n    content.vb: Public Shared ReadOnly Endfinally As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Endfinally\n- uid: System.Reflection.Emit.OpCodes.Initblk\n  commentId: F:System.Reflection.Emit.OpCodes.Initblk\n  id: Initblk\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Initblk\n  fullName: System.Reflection.Emit.OpCodes.Initblk\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Initblk\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2487\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Initializes a specified block of memory at a specific address to a given size and initial value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Initblk\n    content.vb: Public Shared ReadOnly Initblk As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Initblk\n- uid: System.Reflection.Emit.OpCodes.Initobj\n  commentId: F:System.Reflection.Emit.OpCodes.Initobj\n  id: Initobj\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Initobj\n  fullName: System.Reflection.Emit.OpCodes.Initobj\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Initobj\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2457\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Initobj\n    content.vb: Public Shared ReadOnly Initobj As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Initobj\n- uid: System.Reflection.Emit.OpCodes.Isinst\n  commentId: F:System.Reflection.Emit.OpCodes.Isinst\n  id: Isinst\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Isinst\n  fullName: System.Reflection.Emit.OpCodes.Isinst\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Isinst\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1432\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Tests whether an object reference (type <strong>O</strong>) is an instance of a particular class.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Isinst\n    content.vb: Public Shared ReadOnly Isinst As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Isinst\n- uid: System.Reflection.Emit.OpCodes.Jmp\n  commentId: F:System.Reflection.Emit.OpCodes.Jmp\n  id: Jmp\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Jmp\n  fullName: System.Reflection.Emit.OpCodes.Jmp\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Jmp\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 647\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Exits current method and jumps to specified method.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Jmp\n    content.vb: Public Shared ReadOnly Jmp As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Jmp\n- uid: System.Reflection.Emit.OpCodes.Ldarg\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg\n  id: Ldarg\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg\n  fullName: System.Reflection.Emit.OpCodes.Ldarg\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2346\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads an argument (referenced by a specified index value) onto the stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg\n    content.vb: Public Shared ReadOnly Ldarg As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg\n- uid: System.Reflection.Emit.OpCodes.Ldarg_0\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg_0\n  id: Ldarg_0\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg_0\n  fullName: System.Reflection.Emit.OpCodes.Ldarg_0\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg_0\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 287\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the argument at index 0 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg_0\n    content.vb: Public Shared ReadOnly Ldarg_0 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg_0\n- uid: System.Reflection.Emit.OpCodes.Ldarg_1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg_1\n  id: Ldarg_1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg_1\n  fullName: System.Reflection.Emit.OpCodes.Ldarg_1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg_1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 297\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the argument at index 1 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg_1\n    content.vb: Public Shared ReadOnly Ldarg_1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg_1\n- uid: System.Reflection.Emit.OpCodes.Ldarg_2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg_2\n  id: Ldarg_2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg_2\n  fullName: System.Reflection.Emit.OpCodes.Ldarg_2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg_2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 307\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the argument at index 2 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg_2\n    content.vb: Public Shared ReadOnly Ldarg_2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg_2\n- uid: System.Reflection.Emit.OpCodes.Ldarg_3\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg_3\n  id: Ldarg_3\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg_3\n  fullName: System.Reflection.Emit.OpCodes.Ldarg_3\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg_3\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 317\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the argument at index 3 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg_3\n    content.vb: Public Shared ReadOnly Ldarg_3 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg_3\n- uid: System.Reflection.Emit.OpCodes.Ldarg_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarg_S\n  id: Ldarg_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarg_S\n  fullName: System.Reflection.Emit.OpCodes.Ldarg_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarg_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 407\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the argument (referenced by a specified short form index) onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarg_S\n    content.vb: Public Shared ReadOnly Ldarg_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarg_S\n- uid: System.Reflection.Emit.OpCodes.Ldarga\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarga\n  id: Ldarga\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarga\n  fullName: System.Reflection.Emit.OpCodes.Ldarga\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarga\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2356\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Load an argument address onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarga\n    content.vb: Public Shared ReadOnly Ldarga As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarga\n- uid: System.Reflection.Emit.OpCodes.Ldarga_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ldarga_S\n  id: Ldarga_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldarga_S\n  fullName: System.Reflection.Emit.OpCodes.Ldarga_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldarga_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 417\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Load an argument address, in short form, onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldarga_S\n    content.vb: Public Shared ReadOnly Ldarga_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldarga_S\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4\n  id: Ldc_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 587\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a supplied value of type <strong>int32</strong> onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4\n    content.vb: Public Shared ReadOnly Ldc_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_0\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_0\n  id: Ldc_I4_0\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_0\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_0\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_0\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 487\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 0 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_0\n    content.vb: Public Shared ReadOnly Ldc_I4_0 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_0\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_1\n  id: Ldc_I4_1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_1\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 497\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 1 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_1\n    content.vb: Public Shared ReadOnly Ldc_I4_1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_1\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_2\n  id: Ldc_I4_2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_2\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 507\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 2 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_2\n    content.vb: Public Shared ReadOnly Ldc_I4_2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_2\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_3\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_3\n  id: Ldc_I4_3\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_3\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_3\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_3\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 517\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 3 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_3\n    content.vb: Public Shared ReadOnly Ldc_I4_3 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_3\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_4\n  id: Ldc_I4_4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_4\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 527\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 4 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_4\n    content.vb: Public Shared ReadOnly Ldc_I4_4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_4\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_5\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_5\n  id: Ldc_I4_5\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_5\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_5\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_5\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 537\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 5 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_5\n    content.vb: Public Shared ReadOnly Ldc_I4_5 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_5\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_6\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_6\n  id: Ldc_I4_6\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_6\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_6\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_6\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 547\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 6 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_6\n    content.vb: Public Shared ReadOnly Ldc_I4_6 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_6\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_7\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_7\n  id: Ldc_I4_7\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_7\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_7\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_7\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 557\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 7 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_7\n    content.vb: Public Shared ReadOnly Ldc_I4_7 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_7\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_8\n  id: Ldc_I4_8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_8\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 567\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of 8 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_8\n    content.vb: Public Shared ReadOnly Ldc_I4_8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_8\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_M1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_M1\n  id: Ldc_I4_M1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_M1\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_M1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_M1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 477\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the integer value of -1 onto the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_M1\n    content.vb: Public Shared ReadOnly Ldc_I4_M1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_M1\n- uid: System.Reflection.Emit.OpCodes.Ldc_I4_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I4_S\n  id: Ldc_I4_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I4_S\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I4_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I4_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 577\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the supplied <strong>int8</strong> value onto the evaluation stack as an <strong>int32</strong>, short form.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I4_S\n    content.vb: Public Shared ReadOnly Ldc_I4_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I4_S\n- uid: System.Reflection.Emit.OpCodes.Ldc_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_I8\n  id: Ldc_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_I8\n  fullName: System.Reflection.Emit.OpCodes.Ldc_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 597\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a supplied value of type <strong>int64</strong> onto the evaluation stack as an <strong>int64</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_I8\n    content.vb: Public Shared ReadOnly Ldc_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_I8\n- uid: System.Reflection.Emit.OpCodes.Ldc_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_R4\n  id: Ldc_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_R4\n  fullName: System.Reflection.Emit.OpCodes.Ldc_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 607\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a supplied value of type <strong>float32</strong> onto the evaluation stack as type <strong>F</strong> (float).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_R4\n    content.vb: Public Shared ReadOnly Ldc_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_R4\n- uid: System.Reflection.Emit.OpCodes.Ldc_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldc_R8\n  id: Ldc_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldc_R8\n  fullName: System.Reflection.Emit.OpCodes.Ldc_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldc_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 617\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a supplied value of type <strong>float64</strong> onto the evaluation stack as type <strong>F</strong> (float).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldc_R8\n    content.vb: Public Shared ReadOnly Ldc_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldc_R8\n- uid: System.Reflection.Emit.OpCodes.Ldelem\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem\n  id: Ldelem\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem\n  fullName: System.Reflection.Emit.OpCodes.Ldelem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1873\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction. </p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem\n    content.vb: Public Shared ReadOnly Ldelem As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem\n- uid: System.Reflection.Emit.OpCodes.Ldelem_I\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_I\n  id: Ldelem_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_I\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1753\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>native int</strong> at a specified array index onto the top of the evaluation stack as a <strong>native int</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_I\n    content.vb: Public Shared ReadOnly Ldelem_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_I\n- uid: System.Reflection.Emit.OpCodes.Ldelem_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_I1\n  id: Ldelem_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_I1\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1683\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>int8</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_I1\n    content.vb: Public Shared ReadOnly Ldelem_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_I1\n- uid: System.Reflection.Emit.OpCodes.Ldelem_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_I2\n  id: Ldelem_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_I2\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1703\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>int16</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_I2\n    content.vb: Public Shared ReadOnly Ldelem_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_I2\n- uid: System.Reflection.Emit.OpCodes.Ldelem_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_I4\n  id: Ldelem_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_I4\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1723\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>int32</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_I4\n    content.vb: Public Shared ReadOnly Ldelem_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_I4\n- uid: System.Reflection.Emit.OpCodes.Ldelem_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_I8\n  id: Ldelem_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_I8\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1743\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>int64</strong> at a specified array index onto the top of the evaluation stack as an <strong>int64</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_I8\n    content.vb: Public Shared ReadOnly Ldelem_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_I8\n- uid: System.Reflection.Emit.OpCodes.Ldelem_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_R4\n  id: Ldelem_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_R4\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1763\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>float32</strong> at a specified array index onto the top of the evaluation stack as type <strong>F</strong> (float).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_R4\n    content.vb: Public Shared ReadOnly Ldelem_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_R4\n- uid: System.Reflection.Emit.OpCodes.Ldelem_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_R8\n  id: Ldelem_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_R8\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1773\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>float64</strong> at a specified array index onto the top of the evaluation stack as type <strong>F</strong> (float).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_R8\n    content.vb: Public Shared ReadOnly Ldelem_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_R8\n- uid: System.Reflection.Emit.OpCodes.Ldelem_Ref\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_Ref\n  id: Ldelem_Ref\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_Ref\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_Ref\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_Ref\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1783\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type <strong>O</strong> (object reference).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_Ref\n    content.vb: Public Shared ReadOnly Ldelem_Ref As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_Ref\n- uid: System.Reflection.Emit.OpCodes.Ldelem_U1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_U1\n  id: Ldelem_U1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_U1\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_U1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_U1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1693\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>unsigned int8</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_U1\n    content.vb: Public Shared ReadOnly Ldelem_U1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_U1\n- uid: System.Reflection.Emit.OpCodes.Ldelem_U2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_U2\n  id: Ldelem_U2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_U2\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_U2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_U2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1713\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>unsigned int16</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_U2\n    content.vb: Public Shared ReadOnly Ldelem_U2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_U2\n- uid: System.Reflection.Emit.OpCodes.Ldelem_U4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelem_U4\n  id: Ldelem_U4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelem_U4\n  fullName: System.Reflection.Emit.OpCodes.Ldelem_U4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelem_U4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1733\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the element with type <strong>unsigned int32</strong> at a specified array index onto the top of the evaluation stack as an <strong>int32</strong>.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelem_U4\n    content.vb: Public Shared ReadOnly Ldelem_U4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelem_U4\n- uid: System.Reflection.Emit.OpCodes.Ldelema\n  commentId: F:System.Reflection.Emit.OpCodes.Ldelema\n  id: Ldelema\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldelema\n  fullName: System.Reflection.Emit.OpCodes.Ldelema\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldelema\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1673\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the address of the array element at a specified array index onto the top of the evaluation stack as type <strong>&</strong> (managed pointer).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldelema\n    content.vb: Public Shared ReadOnly Ldelema As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldelema\n- uid: System.Reflection.Emit.OpCodes.Ldfld\n  commentId: F:System.Reflection.Emit.OpCodes.Ldfld\n  id: Ldfld\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldfld\n  fullName: System.Reflection.Emit.OpCodes.Ldfld\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldfld\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1473\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Finds the value of a field in the object whose reference is currently on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldfld\n    content.vb: Public Shared ReadOnly Ldfld As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldfld\n- uid: System.Reflection.Emit.OpCodes.Ldflda\n  commentId: F:System.Reflection.Emit.OpCodes.Ldflda\n  id: Ldflda\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldflda\n  fullName: System.Reflection.Emit.OpCodes.Ldflda\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldflda\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1483\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Finds the address of a field in the object whose reference is currently on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldflda\n    content.vb: Public Shared ReadOnly Ldflda As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldflda\n- uid: System.Reflection.Emit.OpCodes.Ldftn\n  commentId: F:System.Reflection.Emit.OpCodes.Ldftn\n  id: Ldftn\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldftn\n  fullName: System.Reflection.Emit.OpCodes.Ldftn\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldftn\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2326\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes an unmanaged pointer (type <strong>native int</strong>) to the native code implementing a specific method onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldftn\n    content.vb: Public Shared ReadOnly Ldftn As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldftn\n- uid: System.Reflection.Emit.OpCodes.Ldind_I\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_I\n  id: Ldind_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_I\n  fullName: System.Reflection.Emit.OpCodes.Ldind_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1031\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>native int</strong> as a <strong>native int</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_I\n    content.vb: Public Shared ReadOnly Ldind_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_I\n- uid: System.Reflection.Emit.OpCodes.Ldind_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_I1\n  id: Ldind_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_I1\n  fullName: System.Reflection.Emit.OpCodes.Ldind_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 961\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>int8</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_I1\n    content.vb: Public Shared ReadOnly Ldind_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_I1\n- uid: System.Reflection.Emit.OpCodes.Ldind_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_I2\n  id: Ldind_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_I2\n  fullName: System.Reflection.Emit.OpCodes.Ldind_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 981\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>int16</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_I2\n    content.vb: Public Shared ReadOnly Ldind_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_I2\n- uid: System.Reflection.Emit.OpCodes.Ldind_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_I4\n  id: Ldind_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_I4\n  fullName: System.Reflection.Emit.OpCodes.Ldind_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1001\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>int32</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_I4\n    content.vb: Public Shared ReadOnly Ldind_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_I4\n- uid: System.Reflection.Emit.OpCodes.Ldind_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_I8\n  id: Ldind_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_I8\n  fullName: System.Reflection.Emit.OpCodes.Ldind_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1021\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>int64</strong> as an <strong>int64</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_I8\n    content.vb: Public Shared ReadOnly Ldind_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_I8\n- uid: System.Reflection.Emit.OpCodes.Ldind_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_R4\n  id: Ldind_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_R4\n  fullName: System.Reflection.Emit.OpCodes.Ldind_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1041\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>float32</strong> as a type <strong>F</strong> (float) onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_R4\n    content.vb: Public Shared ReadOnly Ldind_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_R4\n- uid: System.Reflection.Emit.OpCodes.Ldind_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_R8\n  id: Ldind_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_R8\n  fullName: System.Reflection.Emit.OpCodes.Ldind_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1051\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>float64</strong> as a type <strong>F</strong> (float) onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_R8\n    content.vb: Public Shared ReadOnly Ldind_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_R8\n- uid: System.Reflection.Emit.OpCodes.Ldind_Ref\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_Ref\n  id: Ldind_Ref\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_Ref\n  fullName: System.Reflection.Emit.OpCodes.Ldind_Ref\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_Ref\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1061\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads an object reference as a type <strong>O</strong> (object reference) onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_Ref\n    content.vb: Public Shared ReadOnly Ldind_Ref As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_Ref\n- uid: System.Reflection.Emit.OpCodes.Ldind_U1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_U1\n  id: Ldind_U1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_U1\n  fullName: System.Reflection.Emit.OpCodes.Ldind_U1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_U1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 971\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>unsigned int8</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_U1\n    content.vb: Public Shared ReadOnly Ldind_U1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_U1\n- uid: System.Reflection.Emit.OpCodes.Ldind_U2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_U2\n  id: Ldind_U2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_U2\n  fullName: System.Reflection.Emit.OpCodes.Ldind_U2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_U2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 991\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>unsigned int16</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_U2\n    content.vb: Public Shared ReadOnly Ldind_U2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_U2\n- uid: System.Reflection.Emit.OpCodes.Ldind_U4\n  commentId: F:System.Reflection.Emit.OpCodes.Ldind_U4\n  id: Ldind_U4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldind_U4\n  fullName: System.Reflection.Emit.OpCodes.Ldind_U4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldind_U4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1011\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads a value of type <strong>unsigned int32</strong> as an <strong>int32</strong> onto the evaluation stack indirectly.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldind_U4\n    content.vb: Public Shared ReadOnly Ldind_U4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldind_U4\n- uid: System.Reflection.Emit.OpCodes.Ldlen\n  commentId: F:System.Reflection.Emit.OpCodes.Ldlen\n  id: Ldlen\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldlen\n  fullName: System.Reflection.Emit.OpCodes.Ldlen\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldlen\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1663\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldlen\n    content.vb: Public Shared ReadOnly Ldlen As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldlen\n- uid: System.Reflection.Emit.OpCodes.Ldloc\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc\n  id: Ldloc\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc\n  fullName: System.Reflection.Emit.OpCodes.Ldloc\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2376\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at a specific index onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc\n    content.vb: Public Shared ReadOnly Ldloc As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc\n- uid: System.Reflection.Emit.OpCodes.Ldloc_0\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc_0\n  id: Ldloc_0\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc_0\n  fullName: System.Reflection.Emit.OpCodes.Ldloc_0\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc_0\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 327\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at index 0 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc_0\n    content.vb: Public Shared ReadOnly Ldloc_0 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc_0\n- uid: System.Reflection.Emit.OpCodes.Ldloc_1\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc_1\n  id: Ldloc_1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc_1\n  fullName: System.Reflection.Emit.OpCodes.Ldloc_1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc_1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 337\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at index 1 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc_1\n    content.vb: Public Shared ReadOnly Ldloc_1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc_1\n- uid: System.Reflection.Emit.OpCodes.Ldloc_2\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc_2\n  id: Ldloc_2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc_2\n  fullName: System.Reflection.Emit.OpCodes.Ldloc_2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc_2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 347\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at index 2 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc_2\n    content.vb: Public Shared ReadOnly Ldloc_2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc_2\n- uid: System.Reflection.Emit.OpCodes.Ldloc_3\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc_3\n  id: Ldloc_3\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc_3\n  fullName: System.Reflection.Emit.OpCodes.Ldloc_3\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc_3\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 357\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at index 3 onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc_3\n    content.vb: Public Shared ReadOnly Ldloc_3 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc_3\n- uid: System.Reflection.Emit.OpCodes.Ldloc_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloc_S\n  id: Ldloc_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloc_S\n  fullName: System.Reflection.Emit.OpCodes.Ldloc_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloc_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 437\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the local variable at a specific index onto the evaluation stack, short form.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloc_S\n    content.vb: Public Shared ReadOnly Ldloc_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloc_S\n- uid: System.Reflection.Emit.OpCodes.Ldloca\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloca\n  id: Ldloca\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloca\n  fullName: System.Reflection.Emit.OpCodes.Ldloca\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloca\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2386\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the address of the local variable at a specific index onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloca\n    content.vb: Public Shared ReadOnly Ldloca As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloca\n- uid: System.Reflection.Emit.OpCodes.Ldloca_S\n  commentId: F:System.Reflection.Emit.OpCodes.Ldloca_S\n  id: Ldloca_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldloca_S\n  fullName: System.Reflection.Emit.OpCodes.Ldloca_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldloca_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 447\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Loads the address of the local variable at a specific index onto the evaluation stack, short form.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldloca_S\n    content.vb: Public Shared ReadOnly Ldloca_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldloca_S\n- uid: System.Reflection.Emit.OpCodes.Ldnull\n  commentId: F:System.Reflection.Emit.OpCodes.Ldnull\n  id: Ldnull\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldnull\n  fullName: System.Reflection.Emit.OpCodes.Ldnull\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldnull\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 467\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a null reference (type <strong>O</strong>) onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldnull\n    content.vb: Public Shared ReadOnly Ldnull As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldnull\n- uid: System.Reflection.Emit.OpCodes.Ldobj\n  commentId: F:System.Reflection.Emit.OpCodes.Ldobj\n  id: Ldobj\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldobj\n  fullName: System.Reflection.Emit.OpCodes.Ldobj\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldobj\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1391\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Copies the value type object pointed to by an address to the top of the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldobj\n    content.vb: Public Shared ReadOnly Ldobj As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldobj\n- uid: System.Reflection.Emit.OpCodes.Ldsfld\n  commentId: F:System.Reflection.Emit.OpCodes.Ldsfld\n  id: Ldsfld\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldsfld\n  fullName: System.Reflection.Emit.OpCodes.Ldsfld\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldsfld\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1503\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the value of a static field onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldsfld\n    content.vb: Public Shared ReadOnly Ldsfld As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldsfld\n- uid: System.Reflection.Emit.OpCodes.Ldsflda\n  commentId: F:System.Reflection.Emit.OpCodes.Ldsflda\n  id: Ldsflda\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldsflda\n  fullName: System.Reflection.Emit.OpCodes.Ldsflda\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldsflda\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1513\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the address of a static field onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldsflda\n    content.vb: Public Shared ReadOnly Ldsflda As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldsflda\n- uid: System.Reflection.Emit.OpCodes.Ldstr\n  commentId: F:System.Reflection.Emit.OpCodes.Ldstr\n  id: Ldstr\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldstr\n  fullName: System.Reflection.Emit.OpCodes.Ldstr\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldstr\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1401\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a new object reference to a string literal stored in the metadata.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldstr\n    content.vb: Public Shared ReadOnly Ldstr As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldstr\n- uid: System.Reflection.Emit.OpCodes.Ldtoken\n  commentId: F:System.Reflection.Emit.OpCodes.Ldtoken\n  id: Ldtoken\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldtoken\n  fullName: System.Reflection.Emit.OpCodes.Ldtoken\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldtoken\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2013\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldtoken\n    content.vb: Public Shared ReadOnly Ldtoken As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldtoken\n- uid: System.Reflection.Emit.OpCodes.Ldvirtftn\n  commentId: F:System.Reflection.Emit.OpCodes.Ldvirtftn\n  id: Ldvirtftn\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ldvirtftn\n  fullName: System.Reflection.Emit.OpCodes.Ldvirtftn\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ldvirtftn\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2336\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes an unmanaged pointer (type <strong>native int</strong>) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ldvirtftn\n    content.vb: Public Shared ReadOnly Ldvirtftn As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ldvirtftn\n- uid: System.Reflection.Emit.OpCodes.Leave\n  commentId: F:System.Reflection.Emit.OpCodes.Leave\n  id: Leave\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Leave\n  fullName: System.Reflection.Emit.OpCodes.Leave\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Leave\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2144\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Exits a protected region of code, unconditionally transferring control to a specific target instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Leave\n    content.vb: Public Shared ReadOnly Leave As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Leave\n- uid: System.Reflection.Emit.OpCodes.Leave_S\n  commentId: F:System.Reflection.Emit.OpCodes.Leave_S\n  id: Leave_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Leave_S\n  fullName: System.Reflection.Emit.OpCodes.Leave_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Leave_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2155\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Exits a protected region of code, unconditionally transferring control to a target instruction (short form).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Leave_S\n    content.vb: Public Shared ReadOnly Leave_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Leave_S\n- uid: System.Reflection.Emit.OpCodes.Localloc\n  commentId: F:System.Reflection.Emit.OpCodes.Localloc\n  id: Localloc\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Localloc\n  fullName: System.Reflection.Emit.OpCodes.Localloc\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Localloc\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2406\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type <strong>*</strong>) of the first allocated byte onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Localloc\n    content.vb: Public Shared ReadOnly Localloc As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Localloc\n- uid: System.Reflection.Emit.OpCodes.Mkrefany\n  commentId: F:System.Reflection.Emit.OpCodes.Mkrefany\n  id: Mkrefany\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Mkrefany\n  fullName: System.Reflection.Emit.OpCodes.Mkrefany\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Mkrefany\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2003\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes a typed reference to an instance of a specific type onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Mkrefany\n    content.vb: Public Shared ReadOnly Mkrefany As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Mkrefany\n- uid: System.Reflection.Emit.OpCodes.Mul\n  commentId: F:System.Reflection.Emit.OpCodes.Mul\n  id: Mul\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Mul\n  fullName: System.Reflection.Emit.OpCodes.Mul\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Mul\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1161\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Multiplies two values and pushes the result on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Mul\n    content.vb: Public Shared ReadOnly Mul As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Mul\n- uid: System.Reflection.Emit.OpCodes.Mul_Ovf\n  commentId: F:System.Reflection.Emit.OpCodes.Mul_Ovf\n  id: Mul_Ovf\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Mul_Ovf\n  fullName: System.Reflection.Emit.OpCodes.Mul_Ovf\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Mul_Ovf\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2093\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Mul_Ovf\n    content.vb: Public Shared ReadOnly Mul_Ovf As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Mul_Ovf\n- uid: System.Reflection.Emit.OpCodes.Mul_Ovf_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Mul_Ovf_Un\n  id: Mul_Ovf_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Mul_Ovf_Un\n  fullName: System.Reflection.Emit.OpCodes.Mul_Ovf_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Mul_Ovf_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2103\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Mul_Ovf_Un\n    content.vb: Public Shared ReadOnly Mul_Ovf_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Mul_Ovf_Un\n- uid: System.Reflection.Emit.OpCodes.Neg\n  commentId: F:System.Reflection.Emit.OpCodes.Neg\n  id: Neg\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Neg\n  fullName: System.Reflection.Emit.OpCodes.Neg\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Neg\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1271\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Negates a value and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Neg\n    content.vb: Public Shared ReadOnly Neg As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Neg\n- uid: System.Reflection.Emit.OpCodes.Newarr\n  commentId: F:System.Reflection.Emit.OpCodes.Newarr\n  id: Newarr\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Newarr\n  fullName: System.Reflection.Emit.OpCodes.Newarr\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Newarr\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1653\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Newarr\n    content.vb: Public Shared ReadOnly Newarr As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Newarr\n- uid: System.Reflection.Emit.OpCodes.Newobj\n  commentId: F:System.Reflection.Emit.OpCodes.Newobj\n  id: Newobj\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Newobj\n  fullName: System.Reflection.Emit.OpCodes.Newobj\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Newobj\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1411\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Creates a new object or a new instance of a value type, pushing an object reference (type <strong>O</strong>) onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Newobj\n    content.vb: Public Shared ReadOnly Newobj As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Newobj\n- uid: System.Reflection.Emit.OpCodes.Nop\n  commentId: F:System.Reflection.Emit.OpCodes.Nop\n  id: Nop\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Nop\n  fullName: System.Reflection.Emit.OpCodes.Nop\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Nop\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 267\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Nop\n    content.vb: Public Shared ReadOnly Nop As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Nop\n- uid: System.Reflection.Emit.OpCodes.Not\n  commentId: F:System.Reflection.Emit.OpCodes.Not\n  id: Not\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Not\n  fullName: System.Reflection.Emit.OpCodes.Not\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Not\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1281\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Not\n    content.vb: Public Shared ReadOnly Not As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Not\n- uid: System.Reflection.Emit.OpCodes.Or\n  commentId: F:System.Reflection.Emit.OpCodes.Or\n  id: Or\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Or\n  fullName: System.Reflection.Emit.OpCodes.Or\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Or\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1221\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Or\n    content.vb: Public Shared ReadOnly Or As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Or\n- uid: System.Reflection.Emit.OpCodes.Pop\n  commentId: F:System.Reflection.Emit.OpCodes.Pop\n  id: Pop\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Pop\n  fullName: System.Reflection.Emit.OpCodes.Pop\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Pop\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 637\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Removes the value currently on top of the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Pop\n    content.vb: Public Shared ReadOnly Pop As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Pop\n- uid: System.Reflection.Emit.OpCodes.Prefix1\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix1\n  id: Prefix1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix1\n  fullName: System.Reflection.Emit.OpCodes.Prefix1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2246\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix1\n    content.vb: Public Shared ReadOnly Prefix1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix1\n- uid: System.Reflection.Emit.OpCodes.Prefix2\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix2\n  id: Prefix2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix2\n  fullName: System.Reflection.Emit.OpCodes.Prefix2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2236\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix2\n    content.vb: Public Shared ReadOnly Prefix2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix2\n- uid: System.Reflection.Emit.OpCodes.Prefix3\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix3\n  id: Prefix3\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix3\n  fullName: System.Reflection.Emit.OpCodes.Prefix3\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix3\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2226\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix3\n    content.vb: Public Shared ReadOnly Prefix3 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix3\n- uid: System.Reflection.Emit.OpCodes.Prefix4\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix4\n  id: Prefix4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix4\n  fullName: System.Reflection.Emit.OpCodes.Prefix4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2216\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix4\n    content.vb: Public Shared ReadOnly Prefix4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix4\n- uid: System.Reflection.Emit.OpCodes.Prefix5\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix5\n  id: Prefix5\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix5\n  fullName: System.Reflection.Emit.OpCodes.Prefix5\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix5\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2206\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix5\n    content.vb: Public Shared ReadOnly Prefix5 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix5\n- uid: System.Reflection.Emit.OpCodes.Prefix6\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix6\n  id: Prefix6\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix6\n  fullName: System.Reflection.Emit.OpCodes.Prefix6\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix6\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2196\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix6\n    content.vb: Public Shared ReadOnly Prefix6 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix6\n- uid: System.Reflection.Emit.OpCodes.Prefix7\n  commentId: F:System.Reflection.Emit.OpCodes.Prefix7\n  id: Prefix7\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefix7\n  fullName: System.Reflection.Emit.OpCodes.Prefix7\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefix7\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2186\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefix7\n    content.vb: Public Shared ReadOnly Prefix7 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefix7\n- uid: System.Reflection.Emit.OpCodes.Prefixref\n  commentId: F:System.Reflection.Emit.OpCodes.Prefixref\n  id: Prefixref\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Prefixref\n  fullName: System.Reflection.Emit.OpCodes.Prefixref\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Prefixref\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2256\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>This is a reserved instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Prefixref\n    content.vb: Public Shared ReadOnly Prefixref As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Prefixref\n- uid: System.Reflection.Emit.OpCodes.Readonly\n  commentId: F:System.Reflection.Emit.OpCodes.Readonly\n  id: Readonly\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Readonly\n  fullName: System.Reflection.Emit.OpCodes.Readonly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Readonly\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2528\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Readonly\n    content.vb: Public Shared ReadOnly Readonly As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Readonly\n- uid: System.Reflection.Emit.OpCodes.Refanytype\n  commentId: F:System.Reflection.Emit.OpCodes.Refanytype\n  id: Refanytype\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Refanytype\n  fullName: System.Reflection.Emit.OpCodes.Refanytype\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Refanytype\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2518\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Retrieves the type token embedded in a typed reference.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Refanytype\n    content.vb: Public Shared ReadOnly Refanytype As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Refanytype\n- uid: System.Reflection.Emit.OpCodes.Refanyval\n  commentId: F:System.Reflection.Emit.OpCodes.Refanyval\n  id: Refanyval\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Refanyval\n  fullName: System.Reflection.Emit.OpCodes.Refanyval\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Refanyval\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1983\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Retrieves the address (type <strong>&</strong>) embedded in a typed reference.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Refanyval\n    content.vb: Public Shared ReadOnly Refanyval As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Refanyval\n- uid: System.Reflection.Emit.OpCodes.Rem\n  commentId: F:System.Reflection.Emit.OpCodes.Rem\n  id: Rem\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Rem\n  fullName: System.Reflection.Emit.OpCodes.Rem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Rem\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1191\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Divides two values and pushes the remainder onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Rem\n    content.vb: Public Shared ReadOnly Rem As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Rem\n- uid: System.Reflection.Emit.OpCodes.Rem_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Rem_Un\n  id: Rem_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Rem_Un\n  fullName: System.Reflection.Emit.OpCodes.Rem_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Rem_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1201\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Divides two unsigned values and pushes the remainder onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Rem_Un\n    content.vb: Public Shared ReadOnly Rem_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Rem_Un\n- uid: System.Reflection.Emit.OpCodes.Ret\n  commentId: F:System.Reflection.Emit.OpCodes.Ret\n  id: Ret\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Ret\n  fullName: System.Reflection.Emit.OpCodes.Ret\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ret\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 678\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Ret\n    content.vb: Public Shared ReadOnly Ret As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Ret\n- uid: System.Reflection.Emit.OpCodes.Rethrow\n  commentId: F:System.Reflection.Emit.OpCodes.Rethrow\n  id: Rethrow\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Rethrow\n  fullName: System.Reflection.Emit.OpCodes.Rethrow\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Rethrow\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2497\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Rethrows the current exception.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Rethrow\n    content.vb: Public Shared ReadOnly Rethrow As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Rethrow\n- uid: System.Reflection.Emit.OpCodes.Shl\n  commentId: F:System.Reflection.Emit.OpCodes.Shl\n  id: Shl\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Shl\n  fullName: System.Reflection.Emit.OpCodes.Shl\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Shl\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1241\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Shl\n    content.vb: Public Shared ReadOnly Shl As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Shl\n- uid: System.Reflection.Emit.OpCodes.Shr\n  commentId: F:System.Reflection.Emit.OpCodes.Shr\n  id: Shr\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Shr\n  fullName: System.Reflection.Emit.OpCodes.Shr\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Shr\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1251\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Shr\n    content.vb: Public Shared ReadOnly Shr As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Shr\n- uid: System.Reflection.Emit.OpCodes.Shr_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Shr_Un\n  id: Shr_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Shr_Un\n  fullName: System.Reflection.Emit.OpCodes.Shr_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Shr_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1261\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Shr_Un\n    content.vb: Public Shared ReadOnly Shr_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Shr_Un\n- uid: System.Reflection.Emit.OpCodes.Sizeof\n  commentId: F:System.Reflection.Emit.OpCodes.Sizeof\n  id: Sizeof\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Sizeof\n  fullName: System.Reflection.Emit.OpCodes.Sizeof\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sizeof\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2508\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pushes the size, in bytes, of a supplied value type onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Sizeof\n    content.vb: Public Shared ReadOnly Sizeof As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  seealso:\n  - type: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n    commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Sizeof\n- uid: System.Reflection.Emit.OpCodes.Starg\n  commentId: F:System.Reflection.Emit.OpCodes.Starg\n  id: Starg\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Starg\n  fullName: System.Reflection.Emit.OpCodes.Starg\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Starg\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2366\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores the value on top of the evaluation stack in the argument slot at a specified index.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Starg\n    content.vb: Public Shared ReadOnly Starg As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Starg\n- uid: System.Reflection.Emit.OpCodes.Starg_S\n  commentId: F:System.Reflection.Emit.OpCodes.Starg_S\n  id: Starg_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Starg_S\n  fullName: System.Reflection.Emit.OpCodes.Starg_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Starg_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 427\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Starg_S\n    content.vb: Public Shared ReadOnly Starg_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Starg_S\n- uid: System.Reflection.Emit.OpCodes.Stelem\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem\n  id: Stelem\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem\n  fullName: System.Reflection.Emit.OpCodes.Stelem\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1883\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem\n    content.vb: Public Shared ReadOnly Stelem As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem\n- uid: System.Reflection.Emit.OpCodes.Stelem_I\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_I\n  id: Stelem_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_I\n  fullName: System.Reflection.Emit.OpCodes.Stelem_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1793\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>native int</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_I\n    content.vb: Public Shared ReadOnly Stelem_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_I\n- uid: System.Reflection.Emit.OpCodes.Stelem_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_I1\n  id: Stelem_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_I1\n  fullName: System.Reflection.Emit.OpCodes.Stelem_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1803\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>int8</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_I1\n    content.vb: Public Shared ReadOnly Stelem_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_I1\n- uid: System.Reflection.Emit.OpCodes.Stelem_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_I2\n  id: Stelem_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_I2\n  fullName: System.Reflection.Emit.OpCodes.Stelem_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1813\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>int16</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_I2\n    content.vb: Public Shared ReadOnly Stelem_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_I2\n- uid: System.Reflection.Emit.OpCodes.Stelem_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_I4\n  id: Stelem_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_I4\n  fullName: System.Reflection.Emit.OpCodes.Stelem_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1823\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>int32</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_I4\n    content.vb: Public Shared ReadOnly Stelem_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_I4\n- uid: System.Reflection.Emit.OpCodes.Stelem_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_I8\n  id: Stelem_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_I8\n  fullName: System.Reflection.Emit.OpCodes.Stelem_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1833\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>int64</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_I8\n    content.vb: Public Shared ReadOnly Stelem_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_I8\n- uid: System.Reflection.Emit.OpCodes.Stelem_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_R4\n  id: Stelem_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_R4\n  fullName: System.Reflection.Emit.OpCodes.Stelem_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1843\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>float32</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_R4\n    content.vb: Public Shared ReadOnly Stelem_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_R4\n- uid: System.Reflection.Emit.OpCodes.Stelem_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_R8\n  id: Stelem_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_R8\n  fullName: System.Reflection.Emit.OpCodes.Stelem_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1853\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the <strong>float64</strong> value on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_R8\n    content.vb: Public Shared ReadOnly Stelem_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_R8\n- uid: System.Reflection.Emit.OpCodes.Stelem_Ref\n  commentId: F:System.Reflection.Emit.OpCodes.Stelem_Ref\n  id: Stelem_Ref\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stelem_Ref\n  fullName: System.Reflection.Emit.OpCodes.Stelem_Ref\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stelem_Ref\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1863\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the array element at a given index with the object ref value (type <strong>O</strong>) on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stelem_Ref\n    content.vb: Public Shared ReadOnly Stelem_Ref As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stelem_Ref\n- uid: System.Reflection.Emit.OpCodes.Stfld\n  commentId: F:System.Reflection.Emit.OpCodes.Stfld\n  id: Stfld\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stfld\n  fullName: System.Reflection.Emit.OpCodes.Stfld\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stfld\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1493\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the value stored in the field of an object reference or pointer with a new value.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stfld\n    content.vb: Public Shared ReadOnly Stfld As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stfld\n- uid: System.Reflection.Emit.OpCodes.Stind_I\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_I\n  id: Stind_I\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_I\n  fullName: System.Reflection.Emit.OpCodes.Stind_I\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_I\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2166\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>native int</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_I\n    content.vb: Public Shared ReadOnly Stind_I As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_I\n- uid: System.Reflection.Emit.OpCodes.Stind_I1\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_I1\n  id: Stind_I1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_I1\n  fullName: System.Reflection.Emit.OpCodes.Stind_I1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_I1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1081\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>int8</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_I1\n    content.vb: Public Shared ReadOnly Stind_I1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_I1\n- uid: System.Reflection.Emit.OpCodes.Stind_I2\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_I2\n  id: Stind_I2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_I2\n  fullName: System.Reflection.Emit.OpCodes.Stind_I2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_I2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1091\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>int16</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_I2\n    content.vb: Public Shared ReadOnly Stind_I2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_I2\n- uid: System.Reflection.Emit.OpCodes.Stind_I4\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_I4\n  id: Stind_I4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_I4\n  fullName: System.Reflection.Emit.OpCodes.Stind_I4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_I4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1101\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>int32</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_I4\n    content.vb: Public Shared ReadOnly Stind_I4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_I4\n- uid: System.Reflection.Emit.OpCodes.Stind_I8\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_I8\n  id: Stind_I8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_I8\n  fullName: System.Reflection.Emit.OpCodes.Stind_I8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_I8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1111\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>int64</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_I8\n    content.vb: Public Shared ReadOnly Stind_I8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_I8\n- uid: System.Reflection.Emit.OpCodes.Stind_R4\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_R4\n  id: Stind_R4\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_R4\n  fullName: System.Reflection.Emit.OpCodes.Stind_R4\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_R4\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1121\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>float32</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_R4\n    content.vb: Public Shared ReadOnly Stind_R4 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_R4\n- uid: System.Reflection.Emit.OpCodes.Stind_R8\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_R8\n  id: Stind_R8\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_R8\n  fullName: System.Reflection.Emit.OpCodes.Stind_R8\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_R8\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1131\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a value of type <strong>float64</strong> at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_R8\n    content.vb: Public Shared ReadOnly Stind_R8 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_R8\n- uid: System.Reflection.Emit.OpCodes.Stind_Ref\n  commentId: F:System.Reflection.Emit.OpCodes.Stind_Ref\n  id: Stind_Ref\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stind_Ref\n  fullName: System.Reflection.Emit.OpCodes.Stind_Ref\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stind_Ref\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1071\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Stores a object reference value at a supplied address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stind_Ref\n    content.vb: Public Shared ReadOnly Stind_Ref As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stind_Ref\n- uid: System.Reflection.Emit.OpCodes.Stloc\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc\n  id: Stloc\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc\n  fullName: System.Reflection.Emit.OpCodes.Stloc\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2396\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc\n    content.vb: Public Shared ReadOnly Stloc As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc\n- uid: System.Reflection.Emit.OpCodes.Stloc_0\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc_0\n  id: Stloc_0\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc_0\n  fullName: System.Reflection.Emit.OpCodes.Stloc_0\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc_0\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 367\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc_0\n    content.vb: Public Shared ReadOnly Stloc_0 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc_0\n- uid: System.Reflection.Emit.OpCodes.Stloc_1\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc_1\n  id: Stloc_1\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc_1\n  fullName: System.Reflection.Emit.OpCodes.Stloc_1\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc_1\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 377\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc_1\n    content.vb: Public Shared ReadOnly Stloc_1 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc_1\n- uid: System.Reflection.Emit.OpCodes.Stloc_2\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc_2\n  id: Stloc_2\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc_2\n  fullName: System.Reflection.Emit.OpCodes.Stloc_2\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc_2\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 387\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc_2\n    content.vb: Public Shared ReadOnly Stloc_2 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc_2\n- uid: System.Reflection.Emit.OpCodes.Stloc_3\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc_3\n  id: Stloc_3\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc_3\n  fullName: System.Reflection.Emit.OpCodes.Stloc_3\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc_3\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 397\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc_3\n    content.vb: Public Shared ReadOnly Stloc_3 As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc_3\n- uid: System.Reflection.Emit.OpCodes.Stloc_S\n  commentId: F:System.Reflection.Emit.OpCodes.Stloc_S\n  id: Stloc_S\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stloc_S\n  fullName: System.Reflection.Emit.OpCodes.Stloc_S\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stloc_S\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 457\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Pops the current value from the top of the evaluation stack and stores it in a the local variable list at <em>index</em> (short form).</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stloc_S\n    content.vb: Public Shared ReadOnly Stloc_S As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stloc_S\n- uid: System.Reflection.Emit.OpCodes.Stobj\n  commentId: F:System.Reflection.Emit.OpCodes.Stobj\n  id: Stobj\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stobj\n  fullName: System.Reflection.Emit.OpCodes.Stobj\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stobj\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1533\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Copies a value of a specified type from the evaluation stack into a supplied memory address.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stobj\n    content.vb: Public Shared ReadOnly Stobj As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stobj\n- uid: System.Reflection.Emit.OpCodes.Stsfld\n  commentId: F:System.Reflection.Emit.OpCodes.Stsfld\n  id: Stsfld\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Stsfld\n  fullName: System.Reflection.Emit.OpCodes.Stsfld\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Stsfld\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1523\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Replaces the value of a static field with a value from the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Stsfld\n    content.vb: Public Shared ReadOnly Stsfld As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Stsfld\n- uid: System.Reflection.Emit.OpCodes.Sub\n  commentId: F:System.Reflection.Emit.OpCodes.Sub\n  id: Sub\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Sub\n  fullName: System.Reflection.Emit.OpCodes.Sub\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sub\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1151\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Subtracts one value from another and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Sub\n    content.vb: Public Shared ReadOnly Sub As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Sub\n- uid: System.Reflection.Emit.OpCodes.Sub_Ovf\n  commentId: F:System.Reflection.Emit.OpCodes.Sub_Ovf\n  id: Sub_Ovf\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Sub_Ovf\n  fullName: System.Reflection.Emit.OpCodes.Sub_Ovf\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sub_Ovf\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2113\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Sub_Ovf\n    content.vb: Public Shared ReadOnly Sub_Ovf As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Sub_Ovf\n- uid: System.Reflection.Emit.OpCodes.Sub_Ovf_Un\n  commentId: F:System.Reflection.Emit.OpCodes.Sub_Ovf_Un\n  id: Sub_Ovf_Un\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Sub_Ovf_Un\n  fullName: System.Reflection.Emit.OpCodes.Sub_Ovf_Un\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sub_Ovf_Un\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2123\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Sub_Ovf_Un\n    content.vb: Public Shared ReadOnly Sub_Ovf_Un As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Sub_Ovf_Un\n- uid: System.Reflection.Emit.OpCodes.Switch\n  commentId: F:System.Reflection.Emit.OpCodes.Switch\n  id: Switch\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Switch\n  fullName: System.Reflection.Emit.OpCodes.Switch\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Switch\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 951\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Implements a jump table.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Switch\n    content.vb: Public Shared ReadOnly Switch As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Switch\n- uid: System.Reflection.Emit.OpCodes.Tailcall\n  commentId: F:System.Reflection.Emit.OpCodes.Tailcall\n  id: Tailcall\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Tailcall\n  fullName: System.Reflection.Emit.OpCodes.Tailcall\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Tailcall\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2447\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Tailcall\n    content.vb: Public Shared ReadOnly Tailcall As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Tailcall\n- uid: System.Reflection.Emit.OpCodes.Throw\n  commentId: F:System.Reflection.Emit.OpCodes.Throw\n  id: Throw\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Throw\n  fullName: System.Reflection.Emit.OpCodes.Throw\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Throw\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1462\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Throws the exception object currently on the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Throw\n    content.vb: Public Shared ReadOnly Throw As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Throw\n- uid: System.Reflection.Emit.OpCodes.Unaligned\n  commentId: F:System.Reflection.Emit.OpCodes.Unaligned\n  id: Unaligned\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Unaligned\n  fullName: System.Reflection.Emit.OpCodes.Unaligned\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Unaligned\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2427\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following <strong>ldind</strong>, <strong>stind</strong>, <strong>ldfld</strong>, <strong>stfld</strong>, <strong>ldobj</strong>, <strong>stobj</strong>, <strong>initblk</strong>, or <strong>cpblk</strong> instruction.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Unaligned\n    content.vb: Public Shared ReadOnly Unaligned As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Unaligned\n- uid: System.Reflection.Emit.OpCodes.Unbox\n  commentId: F:System.Reflection.Emit.OpCodes.Unbox\n  id: Unbox\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Unbox\n  fullName: System.Reflection.Emit.OpCodes.Unbox\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Unbox\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1452\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the boxed representation of a value type to its unboxed form.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Unbox\n    content.vb: Public Shared ReadOnly Unbox As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Unbox\n- uid: System.Reflection.Emit.OpCodes.Unbox_Any\n  commentId: F:System.Reflection.Emit.OpCodes.Unbox_Any\n  id: Unbox_Any\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Unbox_Any\n  fullName: System.Reflection.Emit.OpCodes.Unbox_Any\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Unbox_Any\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1893\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Converts the boxed representation of a type specified in the instruction to its unboxed form. </p>\\n\"\n  syntax:\n    content: public static readonly OpCode Unbox_Any\n    content.vb: Public Shared ReadOnly Unbox_Any As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Unbox_Any\n- uid: System.Reflection.Emit.OpCodes.Volatile\n  commentId: F:System.Reflection.Emit.OpCodes.Volatile\n  id: Volatile\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Volatile\n  fullName: System.Reflection.Emit.OpCodes.Volatile\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Volatile\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2437\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Volatile\n    content.vb: Public Shared ReadOnly Volatile As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Volatile\n- uid: System.Reflection.Emit.OpCodes.Xor\n  commentId: F:System.Reflection.Emit.OpCodes.Xor\n  id: Xor\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: Xor\n  fullName: System.Reflection.Emit.OpCodes.Xor\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Xor\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 1231\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.</p>\\n\"\n  syntax:\n    content: public static readonly OpCode Xor\n    content.vb: Public Shared ReadOnly Xor As OpCode\n    return:\n      type: System.Reflection.Emit.OpCode\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: OpCodes.Xor\n- uid: System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)\n  id: TakesSingleByteArgument(System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.OpCodes\n  langs:\n  - csharp\n  - vb\n  name: TakesSingleByteArgument(OpCode)\n  fullName: System.Reflection.Emit.OpCodes.TakesSingleByteArgument(System.Reflection.Emit.OpCode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TakesSingleByteArgument\n    path: src/mscorlib/src/System/Reflection/Emit/OpCodes.cs\n    startLine: 2539\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Returns true or false if the supplied opcode takes a single byte argument.</p>\\n\"\n  syntax:\n    content: public static bool TakesSingleByteArgument(OpCode inst)\n    content.vb: Public Shared Function TakesSingleByteArgument(inst As OpCode) As Boolean\n    parameters:\n    - id: inst\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>An instance of an Opcode object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>True</strong> or <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: OpCodes.TakesSingleByteArgument(OpCode)\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.Emit.OpCode\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OpCode\n  fullName: System.Reflection.Emit.OpCode\n  nameWithType: OpCode\n  commentId: T:System.Reflection.Emit.OpCode\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}