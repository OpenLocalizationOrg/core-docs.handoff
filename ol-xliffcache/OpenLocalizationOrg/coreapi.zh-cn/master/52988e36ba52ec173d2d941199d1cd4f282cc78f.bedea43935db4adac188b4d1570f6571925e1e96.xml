{"nodes":[{"pos":[541,552],"content":"Comparer<T>","needQuote":true,"nodes":[{"content":"Comparer&lt;T&gt;","pos":[0,11],"source":"Comparer<T>"}]},{"content":"\\n&lt;p&gt;The type of objects to compare.&lt;/p&gt;\\n","pos":[1591,1633],"source":"\\n<p>The type of objects to compare.</p>\\n"},{"pos":[2863,2873],"content":"Comparer()","needQuote":true,"nodes":[{"content":"Comparer()","pos":[0,10]}]},{"pos":[3945,3952],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[5656,5669],"content":"Compare(T, T)","needQuote":true,"nodes":[{"content":"Compare(T, T)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[6511,6550],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[6602,6642],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is less than &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; equals &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is greater than &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[6701,7183],"source":"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>x</em> is less than <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>x</em> equals <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>x</em> is greater than <em>y</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[8515,8536],"content":"Create(Comparison<T>)","needQuote":true,"nodes":[{"content":"Create(Comparison&lt;T&gt;)","pos":[0,21],"source":"Create(Comparison<T>)"}]},{"content":"\\n&lt;p&gt;The comparison to use.&lt;/p&gt;\\n","pos":[9317,9350],"source":"\\n<p>The comparison to use.</p>\\n"},{"content":"\\n&lt;p&gt;The new comparer.&lt;/p&gt;\\n","pos":[9434,9462],"source":"\\n<p>The new comparer.</p>\\n"},{"pos":[10177,10210],"content":"IComparer.Compare(Object, Object)","needQuote":true,"nodes":[{"content":"IComparer.Compare(Object, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The first object to compare.&lt;/p&gt;\\n","pos":[11118,11157],"source":"\\n<p>The first object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.&lt;/p&gt;\\n","pos":[11217,11257],"source":"\\n<p>The second object to compare.</p>\\n"},{"content":"\\n&lt;p&gt;A signed integer that indicates the relative values of &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is less than &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; equals &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero&lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;x&lt;/em&gt; is greater than &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[11316,11795],"source":"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is less than <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>x</em> equals <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is greater than <em>y</em>.</p>\\n</td></tr></tbody></table>\\n"},{"pos":[13196,13222],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[13413,13419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13645,13657],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[13868,13877],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[13939,13940],"content":"<","needQuote":true,"nodes":[]},{"pos":[13967,13968],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14086,14095],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[14158,14161]},{"pos":[14195,14196],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[14223,14224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14455,14464],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[14657,14667],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14762,14770],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14839,14840],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14867,14868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14938,14946],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15015,15016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15043,15044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15227,15241],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15360,15366],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15433,15434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15484,15490],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15550,15551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15634,15640],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15707,15708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15758,15764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15824,15825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16039,16061],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16209,16215],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16282,16283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16333,16339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16400,16401]},{"pos":[16456,16462],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16522,16523],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16620,16626],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16693,16694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16744,16750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16811,16812]},{"pos":[16867,16873],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16933,16934],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17179,17210],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17376,17391],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17467,17468],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17518,17524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17585,17586]},{"pos":[17641,17647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17707,17708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17814,17829],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17905,17906],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17956,17962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18023,18024]},{"pos":[18079,18085],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18145,18146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18376,18389],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18490,18501],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18573,18574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18601,18602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18675,18686],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18758,18759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18786,18787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18962,18971],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19064,19071],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19139,19140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19167,19168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19237,19244],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19312,19313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19340,19341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19516,19533],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19642,19657],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19733,19734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19761,19762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19839,19854],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19930,19931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19958,19959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20104,20110],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20249,20261],"content":"IComparer<T>","needQuote":true,"nodes":[{"content":"IComparer&lt;T&gt;","pos":[0,12],"source":"IComparer<T>"}]},{"pos":[20472,20481],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[20543,20544],"content":"<","needQuote":true,"nodes":[]},{"pos":[20571,20572],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20690,20699],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"content":"(Of","pos":[20762,20765]},{"pos":[20799,20800],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[20827,20828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21017,21035],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[21246,21257],"content":"Comparer<T>","needQuote":true,"nodes":[{"content":"Comparer&lt;T&gt;","pos":[0,11],"source":"Comparer<T>"}]},{"pos":[21464,21472],"content":"Comparer","needQuote":true,"nodes":[{"content":"Comparer","pos":[0,8]}]},{"pos":[21533,21534],"content":"<","needQuote":true,"nodes":[]},{"pos":[21561,21562],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21679,21687],"content":"Comparer","needQuote":true,"nodes":[{"content":"Comparer","pos":[0,8]}]},{"content":"(Of","pos":[21749,21752]},{"pos":[21786,21787],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[21814,21815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22141,22154],"content":"Compare(T, T)","needQuote":true,"nodes":[{"content":"Compare(T, T)","pos":[0,13]}]},{"pos":[22381,22388],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[22482,22483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22510,22511],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[22539,22540]},{"pos":[22572,22573],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22600,22601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22702,22709],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[22806,22807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22834,22835],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[22863,22864]},{"pos":[22896,22897],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22924,22925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23142,23143],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23260,23265],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23429,23442],"content":"Compare(T, T)","needQuote":true,"nodes":[{"content":"Compare(T, T)","pos":[0,13]}]},{"pos":[23669,23676],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[23770,23771],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23798,23799],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[23827,23828]},{"pos":[23860,23861],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23888,23889],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23990,23997],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[24094,24095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24122,24123],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[24151,24152]},{"pos":[24184,24185],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24212,24213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24428,24429],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24551,24564],"content":"Comparison<T>","needQuote":true,"nodes":[{"content":"Comparison&lt;T&gt;","pos":[0,13],"source":"Comparison<T>"}]},{"pos":[24719,24729],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"pos":[24772,24773],"content":"<","needQuote":true,"nodes":[]},{"pos":[24800,24801],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24900,24910],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"(Of","pos":[24954,24957]},{"pos":[24991,24992],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25019,25020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25196,25209],"content":"Comparison<T>","needQuote":true,"nodes":[{"content":"Comparison&lt;T&gt;","pos":[0,13],"source":"Comparison<T>"}]},{"pos":[25364,25374],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"pos":[25417,25418],"content":"<","needQuote":true,"nodes":[]},{"pos":[25445,25446],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25545,25555],"content":"Comparison","needQuote":true,"nodes":[{"content":"Comparison","pos":[0,10]}]},{"content":"(Of","pos":[25599,25602]},{"pos":[25636,25637],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[25664,25665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25922,25945],"content":"Compare(Object, Object)","needQuote":true,"nodes":[{"content":"Compare(Object, Object)","pos":[0,23]}]},{"pos":[26125,26132],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[26215,26216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26266,26272],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26333,26334]},{"pos":[26389,26395],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26455,26456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26569,26576],"content":"Compare","needQuote":true,"nodes":[{"content":"Compare","pos":[0,7]}]},{"pos":[26659,26660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26710,26716],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26777,26778]},{"pos":[26833,26839],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26899,26900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27125,27142],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.Generic.Comparer`1\n  commentId: T:System.Collections.Generic.Comparer`1\n  id: Comparer`1\n  parent: System.Collections.Generic\n  children:\n  - System.Collections.Generic.Comparer`1.#ctor\n  - System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  - System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  - System.Collections.Generic.Comparer`1.Default\n  - System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  langs:\n  - csharp\n  - vb\n  name: Comparer<T>\n  fullName: System.Collections.Generic.Comparer<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Comparer\n    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n    startLine: 17\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Provides a base class for implementations of the <xref href=\\\"System.Collections.Generic.IComparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [TypeDependency(\"System.Collections.Generic.ObjectComparer`1\")]\n\n      public abstract class Comparer<T> : IComparer, IComparer<T>\n    content.vb: >-\n      <Serializable>\n\n      <TypeDependency(\"System.Collections.Generic.ObjectComparer`1\")>\n\n      Public MustInherit Class Comparer(Of T)\n          Implements IComparer, IComparer(Of T)\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of objects to compare.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IComparer`1\n    commentId: T:System.Collections.Generic.IComparer`1\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.StringComparer\n    commentId: T:System.StringComparer\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IComparer{{T}}\n  - System.Collections.IComparer\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  fullName.vb: System.Collections.Generic.Comparer(Of T)\n  name.vb: Comparer(Of T)\n  nameWithType: Comparer<T>\n  nameWithType.vb: Comparer(Of T)\n- uid: System.Collections.Generic.Comparer`1.#ctor\n  commentId: M:System.Collections.Generic.Comparer`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  - vb\n  name: Comparer()\n  fullName: System.Collections.Generic.Comparer<T>.Comparer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections/ref/System.Collections.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections/ref/System.Collections.cs\n    startLine: 43\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Generic.Comparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Comparer()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.Collections.Generic.Comparer(Of T).Comparer()\n  nameWithType: Comparer<T>.Comparer()\n  nameWithType.vb: Comparer(Of T).Comparer()\n- uid: System.Collections.Generic.Comparer`1.Default\n  commentId: P:System.Collections.Generic.Comparer`1.Default\n  id: Default\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Collections.Generic.Comparer<T>.Default\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Default\n    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n    startLine: 23\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Returns a default sort order comparer for the type specified by the generic argument.</p>\\n\"\n  syntax:\n    content: public static Comparer<T> Default { get; }\n    content.vb: Public Shared ReadOnly Property Default As Comparer(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.Comparer`1\n      description: \"\\n<p>An object that inherits <xref href=\\\"System.Collections.Generic.Comparer`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and serves as a sort order comparer for type <em>T</em>.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.StringComparer\n    commentId: T:System.StringComparer\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  fullName.vb: System.Collections.Generic.Comparer(Of T).Default\n  nameWithType: Comparer<T>.Default\n  nameWithType.vb: Comparer(Of T).Default\n- uid: System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  commentId: M:System.Collections.Generic.Comparer`1.Compare(`0,`0)\n  id: Compare(`0,`0)\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  - vb\n  name: Compare(T, T)\n  fullName: System.Collections.Generic.Comparer<T>.Compare(T, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Compare\n    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n    startLine: 101\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</p>\\n\"\n  syntax:\n    content: public abstract int Compare(T x, T y)\n    content.vb: Public MustOverride Function Compare(x As T, y As T) As Integer\n    parameters:\n    - id: x\n      type: '{T}'\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: y\n      type: '{T}'\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>\\n<em>x</em> is less than <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<em>x</em> equals <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>\\n<em>x</em> is greater than <em>y</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Type <em>T</em> does not implement either the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface or the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.IComparable`1\n    commentId: T:System.IComparable`1\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.StringComparer\n    commentId: T:System.StringComparer\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.Collections.Generic.IComparer{{T}}.Compare({T},{T})\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Collections.Generic.Comparer(Of T).Compare(T, T)\n  nameWithType: Comparer<T>.Compare(T, T)\n  nameWithType.vb: Comparer(Of T).Compare(T, T)\n- uid: System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  commentId: M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})\n  id: Create(System.Comparison{`0})\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  - vb\n  name: Create(Comparison<T>)\n  fullName: System.Collections.Generic.Comparer<T>.Create(System.Comparison<T>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Create\n    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n    startLine: 30\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Creates a comparer by using the specified comparison.</p>\\n\"\n  syntax:\n    content: public static Comparer<T> Create(Comparison<T> comparison)\n    content.vb: Public Shared Function Create(comparison As Comparison(Of T)) As Comparer(Of T)\n    parameters:\n    - id: comparison\n      type: System.Comparison{{T}}\n      description: \"\\n<p>The comparison to use.</p>\\n\"\n    return:\n      type: System.Collections.Generic.Comparer`1\n      description: \"\\n<p>The new comparer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Collections.Generic.Comparer(Of T).Create(System.Comparison(Of T))\n  name.vb: Create(Comparison(Of T))\n  nameWithType: Comparer<T>.Create(Comparison<T>)\n  nameWithType.vb: Comparer(Of T).Create(Comparison(Of T))\n- uid: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  commentId: M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)\n  id: System#Collections#IComparer#Compare(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.Generic.Comparer`1\n  langs:\n  - csharp\n  - vb\n  name: IComparer.Compare(Object, Object)\n  fullName: System.Collections.Generic.Comparer<T>.System.Collections.IComparer.Compare(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IComparer.Compare\n    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs\n    startLine: 103\n  assemblies:\n  - System.Collections\n  namespace: System.Collections.Generic\n  summary: \"\\n<p>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\\n\"\n  syntax:\n    content: int IComparer.Compare(object x, object y)\n    content.vb: Function System.Collections.IComparer.Compare(x As Object, y As Object) As Integer Implements IComparer.Compare\n    parameters:\n    - id: x\n      type: System.Object\n      description: \"\\n<p>The first object to compare.</p>\\n\"\n    - id: y\n      type: System.Object\n      description: \"\\n<p>The second object to compare.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is less than <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Zero</p>\\n</td><td>\\n<p>\\n<em>x</em> equals <em>y</em>.</p>\\n</td></tr><tr><td>\\n<p>Greater than zero</p>\\n</td><td>\\n<p>\\n<em>x</em> is greater than <em>y</em>.</p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>x</em> or <em>y</em> is of a type that cannot be cast to type <em>T</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>x</em> and <em>y</em> do not implement either the <xref href=\\\"System.IComparable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> generic interface or the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  seealso:\n  - type: System.StringComparer\n    commentId: T:System.StringComparer\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Threading.Thread.CurrentCulture\n    commentId: P:System.Threading.Thread.CurrentCulture\n  - type: System.Globalization.CultureInfo\n    commentId: T:System.Globalization.CultureInfo\n  implements:\n  - System.Collections.IComparer.Compare(System.Object,System.Object)\n  fullName.vb: System.Collections.Generic.Comparer(Of T).System.Collections.IComparer.Compare(System.Object, System.Object)\n  name.vb: System.Collections.IComparer.Compare(Object, Object)\n  nameWithType: Comparer<T>.IComparer.Compare(Object, Object)\n  nameWithType.vb: Comparer(Of T).System.Collections.IComparer.Compare(Object, Object)\nreferences:\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IComparer{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IComparer`1\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n  commentId: T:System.Collections.Generic.IComparer{``0}\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IComparer`1\n  isExternal: false\n  name: IComparer<T>\n  fullName: System.Collections.Generic.IComparer<T>\n  fullname.vb: System.Collections.Generic.IComparer(Of T)\n  name.vb: IComparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1\n    name: IComparer\n    fullName: System.Collections.Generic.IComparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>\n  nameWithType.vb: IComparer(Of T)\n  commentId: T:System.Collections.Generic.IComparer`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.Generic.Comparer`1\n  parent: System.Collections.Generic\n  isExternal: false\n  name: Comparer<T>\n  fullName: System.Collections.Generic.Comparer<T>\n  fullname.vb: System.Collections.Generic.Comparer(Of T)\n  name.vb: Comparer(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.Comparer`1\n    name: Comparer\n    fullName: System.Collections.Generic.Comparer\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.Comparer`1\n    name: Comparer\n    fullName: System.Collections.Generic.Comparer\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Comparer<T>\n  nameWithType.vb: Comparer(Of T)\n  commentId: T:System.Collections.Generic.Comparer`1\n- uid: System.Collections.Generic.IComparer{{T}}.Compare({T},{T})\n  parent: System.Collections.Generic.IComparer{{T}}\n  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  name: Compare(T, T)\n  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)\n  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<T>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of T).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>.Compare(T, T)\n  nameWithType.vb: IComparer(Of T).Compare(T, T)\n  commentId: M:System.Collections.Generic.IComparer{`0}.Compare(`0,`0)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n  isExternal: true\n  name: Compare(T, T)\n  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)\n  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer<T>.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)\n    name: Compare\n    fullName: System.Collections.Generic.IComparer(Of T).Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IComparer<T>.Compare(T, T)\n  nameWithType.vb: IComparer(Of T).Compare(T, T)\n  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Comparison{{T}}\n  parent: System\n  definition: System.Comparison`1\n  name: Comparison<T>\n  fullName: System.Comparison<T>\n  fullname.vb: System.Comparison(Of T)\n  name.vb: Comparison(Of T)\n  spec.csharp:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Comparison<T>\n  nameWithType.vb: Comparison(Of T)\n  commentId: T:System.Comparison{``0}\n- uid: System.Comparison`1\n  isExternal: false\n  name: Comparison<T>\n  fullName: System.Comparison<T>\n  fullname.vb: System.Comparison(Of T)\n  name.vb: Comparison(Of T)\n  spec.csharp:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Comparison`1\n    name: Comparison\n    fullName: System.Comparison\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Comparison<T>\n  nameWithType.vb: Comparison(Of T)\n  commentId: T:System.Comparison`1\n- uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n  parent: System.Collections.IComparer\n  isExternal: true\n  name: Compare(Object, Object)\n  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)\n    name: Compare\n    fullName: System.Collections.IComparer.Compare\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparer.Compare(Object, Object)\n  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}