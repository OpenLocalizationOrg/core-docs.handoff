{"nodes":[{"pos":[2168,2172],"content":"Enum","needQuote":true,"nodes":[{"content":"Enum","pos":[0,4]}]},{"pos":[3629,3635],"content":"Enum()","needQuote":true,"nodes":[{"content":"Enum()","pos":[0,6]}]},{"pos":[4457,4474],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An object to compare, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[5216,5268],"source":"\\n<p>An object to compare, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5269,5275],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A signed number that indicates the relative values of this instance and &lt;em&gt;target&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;Value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Less than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The value of this instance is less than the value of &lt;em&gt;target&lt;/em&gt;.","pos":[5334,5596],"source":"\\n<p>A signed number that indicates the relative values of this instance and <em>target</em>.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The value of this instance is less than the value of <em>target</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The value of this instance is equal to the value of &lt;em&gt;target&lt;/em&gt;.","pos":[5597,5719],"source":" </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The value of this instance is equal to the value of <em>target</em>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;Greater than zero &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;The value of this instance is greater than the value of &lt;em&gt;target&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;target&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5720,5925],"source":" </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The value of this instance is greater than the value of <em>target</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>target</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[5926,5960],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;target&lt;/em&gt; and this instance are not the same type.","pos":[6071,6134],"source":"\\n<p>\\n<em>target</em> and this instance are not the same type."},{"content":"&lt;/p&gt;\\n","pos":[6135,6141],"source":" </p>\\n"},{"pos":[7330,7344],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[8024,8095],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8096,8102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; is an enumeration value of the same type and with the same underlying value as this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8163,8342],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8883,8911],"content":"Format(Type, Object, String)","needQuote":true,"nodes":[{"content":"Format(Type, Object, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The enumeration type of the value to convert.","pos":[9779,9829],"source":"\\n<p>The enumeration type of the value to convert."},{"content":"&lt;/p&gt;\\n","pos":[9830,9836],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to convert.","pos":[9900,9926],"source":"\\n<p>The value to convert."},{"content":"&lt;/p&gt;\\n","pos":[9927,9933],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The output format to use.","pos":[9998,10028],"source":"\\n<p>The output format to use."},{"content":"&lt;/p&gt;\\n","pos":[10029,10035],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string representation of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[10095,10148],"source":"\\n<p>A string representation of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;enumType&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;, or &lt;em&gt;format&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10267,10365],"source":"\\n<p>The <em>enumType</em>, <em>value</em>, or <em>format</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10366,10372],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;format&lt;/em&gt; parameter contains an invalid value.","pos":[10899,10960],"source":"\\n<p>The <em>format</em> parameter contains an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[10961,10967],"source":" </p>\\n"},{"pos":[11546,11559],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[12219,12264],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[12643,12664],"content":"GetName(Type, Object)","needQuote":true,"nodes":[{"content":"GetName(Type, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[13447,13472],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[13473,13479],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of a particular enumerated constant in terms of its underlying type.","pos":[13543,13626],"source":"\\n<p>The value of a particular enumerated constant in terms of its underlying type."},{"content":"&lt;/p&gt;\\n","pos":[13627,13633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string containing the name of the enumerated constant in &lt;em&gt;enumType&lt;/em&gt; whose value is &lt;em&gt;value&lt;/em&gt;; or &lt;strong&gt;null&lt;/strong&gt; if no such constant is found.&lt;/p&gt;\\n","pos":[13693,13866],"source":"\\n<p>A string containing the name of the enumerated constant in <em>enumType</em> whose value is <em>value</em>; or <strong>null</strong> if no such constant is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13985,14053],"source":"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14054,14060],"source":" </p>\\n"},{"pos":[14711,14725],"content":"GetNames(Type)","needQuote":true,"nodes":[{"content":"GetNames(Type)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[15453,15478],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[15479,15485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string array of the names of the constants in &lt;em&gt;enumType&lt;/em&gt;.","pos":[15547,15618],"source":"\\n<p>A string array of the names of the constants in <em>enumType</em>."},{"content":"&lt;/p&gt;\\n","pos":[15619,15625],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15744,15794],"source":"\\n<p>\\n<em>enumType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15795,15801],"source":" </p>\\n"},{"pos":[16342,16365],"content":"GetUnderlyingType(Type)","needQuote":true,"nodes":[{"content":"GetUnderlyingType(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The enumeration whose underlying type will be retrieved.&lt;/p&gt;\\n","pos":[17102,17169],"source":"\\n<p>The enumeration whose underlying type will be retrieved.</p>\\n"},{"content":"\\n&lt;p&gt;The underlying type of &lt;em&gt;enumType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[17227,17279],"source":"\\n<p>The underlying type of <em>enumType</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17398,17448],"source":"\\n<p>\\n<em>enumType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17449,17455],"source":" </p>\\n"},{"pos":[18057,18072],"content":"GetValues(Type)","needQuote":true,"nodes":[{"content":"GetValues(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[18799,18824],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[18825,18831],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array that contains the values of the constants in &lt;em&gt;enumType&lt;/em&gt;.","pos":[18890,18967],"source":"\\n<p>An array that contains the values of the constants in <em>enumType</em>."},{"content":"&lt;/p&gt;\\n","pos":[18968,18974],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19093,19143],"source":"\\n<p>\\n<em>enumType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19144,19150],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The method is invoked by reflection in a reflection-only context, &lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; is a type from an assembly loaded in a reflection-only context.&lt;/p&gt;\\n","pos":[19474,19656],"source":"\\n<p>The method is invoked by reflection in a reflection-only context, </p>\\n<p>-or-</p>\\n<p>\\n<em>enumType</em> is a type from an assembly loaded in a reflection-only context.</p>\\n"},{"pos":[19947,19960],"content":"HasFlag(Enum)","needQuote":true,"nodes":[{"content":"HasFlag(Enum)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An enumeration value.&lt;/p&gt;\\n","pos":[20660,20692],"source":"\\n<p>An enumeration value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the bit field or bit fields that are set in &lt;em&gt;flag&lt;/em&gt; are also set in the current instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20753,20921],"source":"\\n<p>\\n<strong>true</strong> if the bit field or bit fields that are set in <em>flag</em> are also set in the current instance; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;flag&lt;/em&gt; is a different type than the current instance.&lt;/p&gt;\\n","pos":[21032,21105],"source":"\\n<p>\\n<em>flag</em> is a different type than the current instance.</p>\\n"},{"pos":[21597,21620],"content":"IsDefined(Type, Object)","needQuote":true,"nodes":[{"content":"IsDefined(Type, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[22415,22440],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[22441,22447],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value or name of a constant in &lt;em&gt;enumType&lt;/em&gt;.","pos":[22511,22569],"source":"\\n<p>The value or name of a constant in <em>enumType</em>."},{"content":"&lt;/p&gt;\\n","pos":[22570,22576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a constant in &lt;em&gt;enumType&lt;/em&gt; has a value equal to &lt;em&gt;value&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22637,22778],"source":"\\n<p>\\n<strong>true</strong> if a constant in <em>enumType</em> has a value equal to <em>value</em>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22897,22965],"source":"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22966,22972],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; is not an &lt;strong&gt;Enum&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The type of &lt;em&gt;value&lt;/em&gt; is an enumeration, but it is not an enumeration of type &lt;em&gt;enumType&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The type of &lt;em&gt;value&lt;/em&gt; is not an underlying type of &lt;em&gt;enumType&lt;/em&gt;.","pos":[23069,23347],"source":"\\n<p>\\n<em>enumType</em> is not an <strong>Enum</strong>.</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> is an enumeration, but it is not an enumeration of type <em>enumType</em>.</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>."},{"content":"&lt;/p&gt;\\n","pos":[23348,23354],"source":" </p>\\n"},{"pos":[24934,24953],"content":"Parse(Type, String)","needQuote":true,"nodes":[{"content":"Parse(Type, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[25770,25795],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[25796,25802],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string containing the name or value to convert.","pos":[25866,25920],"source":"\\n<p>A string containing the name or value to convert."},{"content":"&lt;/p&gt;\\n","pos":[25921,25927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object of type &lt;em&gt;enumType&lt;/em&gt; whose value is represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25987,26079],"source":"\\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[26198,26266],"source":"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26267,26273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is outside the range of the underlying type of &lt;em&gt;enumType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26790,26883],"source":"\\n<p>\\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\\n"},{"pos":[27395,27423],"content":"Parse(Type, String, Boolean)","needQuote":true,"nodes":[{"content":"Parse(Type, String, Boolean)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;An enumeration type.","pos":[28361,28386],"source":"\\n<p>An enumeration type."},{"content":"&lt;/p&gt;\\n","pos":[28387,28393],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string containing the name or value to convert.","pos":[28457,28511],"source":"\\n<p>A string containing the name or value to convert."},{"content":"&lt;/p&gt;\\n","pos":[28512,28518],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore case; &lt;strong&gt;false&lt;/strong&gt; to regard case.","pos":[28588,28671],"source":"\\n<p>\\n<strong>true</strong> to ignore case; <strong>false</strong> to regard case."},{"content":"&lt;/p&gt;\\n","pos":[28672,28678],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object of type &lt;em&gt;enumType&lt;/em&gt; whose value is represented by &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[28738,28830],"source":"\\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28949,29017],"source":"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[29018,29024],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is outside the range of the underlying type of &lt;em&gt;enumType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29548,29641],"source":"\\n<p>\\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\\n"},{"pos":[30128,30154],"content":"IConvertible.GetTypeCode()","needQuote":true,"nodes":[{"content":"IConvertible.GetTypeCode()","pos":[0,26]}]},{"pos":[31226,31265],"content":"IConvertible.ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToBoolean(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[32044,32119],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[32180,32230],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[32347,32365],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[32366,32372],"source":" </p>\\n"},{"pos":[32912,32948],"content":"IConvertible.ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToByte(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[33719,33794],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[33852,33883],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[34411,34447],"content":"IConvertible.ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToChar(IFormatProvider)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[35212,35287],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[35345,35395],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[35512,35530],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[35531,35537],"source":" </p>\\n"},{"pos":[36077,36117],"content":"IConvertible.ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDateTime(IFormatProvider)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[36965,37040],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[37102,37152],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[37269,37287],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[37288,37294],"source":" </p>\\n"},{"pos":[37847,37886],"content":"IConvertible.ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDecimal(IFormatProvider)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[38730,38805],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[38866,38916],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[39033,39051],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[39052,39058],"source":" </p>\\n"},{"pos":[39604,39642],"content":"IConvertible.ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToDouble(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[40443,40518],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[40578,40628],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[40745,40763],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[40764,40770],"source":" </p>\\n"},{"pos":[41309,41346],"content":"IConvertible.ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt16(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[42122,42197],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[42256,42287],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[42822,42859],"content":"IConvertible.ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt32(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[43635,43710],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[43769,43800],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[44335,44372],"content":"IConvertible.ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToInt64(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[45146,45221],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[45280,45311],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[45846,45883],"content":"IConvertible.ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSByte(IFormatProvider)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[46659,46734],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[46793,46824],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[47362,47400],"content":"IConvertible.ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToSingle(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[48200,48275],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;This member always throws an exception.&lt;/p&gt;\\n","pos":[48335,48385],"source":"\\n<p>This member always throws an exception.</p>\\n"},{"content":"\\n&lt;p&gt;In all cases.","pos":[48502,48520],"source":"\\n<p>In all cases."},{"content":"&lt;/p&gt;\\n","pos":[48521,48527],"source":" </p>\\n"},{"pos":[49069,49107],"content":"IConvertible.ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToString(IFormatProvider)","pos":[0,38]}]},{"pos":[50780,50822],"content":"IConvertible.ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToType(Type, IFormatProvider)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The type to convert to.","pos":[51612,51640],"source":"\\n<p>The type to convert to."},{"content":"&lt;/p&gt;\\n","pos":[51641,51647],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[51723,51798],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[51858,51889],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[52453,52491],"content":"IConvertible.ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt16(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[53276,53351],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[53411,53442],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[53984,54022],"content":"IConvertible.ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt32(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[54807,54882],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[54942,54973],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[55515,55553],"content":"IConvertible.ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"IConvertible.ToUInt64(IFormatProvider)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[56337,56412],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The converted value.&lt;/p&gt;\\n","pos":[56472,56503],"source":"\\n<p>The converted value.</p>\\n"},{"pos":[57087,57133],"content":"IFormattable.ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"IFormattable.ToString(String, IFormatProvider)","pos":[0,46]}]},{"pos":[58858,58880],"content":"ToObject(Type, Object)","needQuote":true,"nodes":[{"content":"ToObject(Type, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The enumeration type to return.","pos":[59651,59687],"source":"\\n<p>The enumeration type to return."},{"content":"&lt;/p&gt;\\n","pos":[59688,59694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value convert to an enumeration member.","pos":[59758,59806],"source":"\\n<p>The value convert to an enumeration member."},{"content":"&lt;/p&gt;\\n","pos":[59807,59813],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An enumeration object whose value is &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[59873,59936],"source":"\\n<p>An enumeration object whose value is <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;enumType&lt;/em&gt; or &lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[60055,60123],"source":"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[60124,60130],"source":" </p>\\n"},{"pos":[61387,61397],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[61993,62060],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[62675,62691],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A format string.","pos":[63360,63381],"source":"\\n<p>A format string."},{"content":"&lt;/p&gt;\\n","pos":[63382,63388],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the value of this instance as specified by &lt;em&gt;format&lt;/em&gt;.&lt;/p&gt;\\n","pos":[63448,63547],"source":"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; contains an invalid specification.","pos":[63654,63711],"source":"\\n<p>\\n<em>format</em> contains an invalid specification."},{"content":"&lt;/p&gt;\\n","pos":[63712,63718],"source":" </p>\\n"},{"pos":[64649,64683],"content":"TryParse<TEnum>(String, out TEnum)","needQuote":true,"nodes":[{"content":"TryParse&lt;TEnum&gt;(String, out TEnum)","pos":[0,34],"source":"TryParse<TEnum>(String, out TEnum)"}]},{"content":"\\n&lt;p&gt;The string representation of the enumeration name or underlying value to convert.&lt;/p&gt;\\n","pos":[65566,65658],"source":"\\n<p>The string representation of the enumeration name or underlying value to convert.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, &lt;em&gt;result&lt;/em&gt; contains an object of type &lt;em&gt;TEnum&lt;/em&gt; whose value is represented by &lt;em&gt;value&lt;/em&gt; if the parse operation succeeds.","pos":[65719,65885],"source":"\\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds."},{"content":"If the parse operation fails, &lt;em&gt;result&lt;/em&gt; contains the default value of the underlying type of &lt;em&gt;TEnum&lt;/em&gt;.","pos":[65886,66000],"source":" If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>."},{"content":"Note that this value need not be a member of the &lt;em&gt;TEnum&lt;/em&gt; enumeration.","pos":[66001,66077],"source":" Note that this value need not be a member of the <em>TEnum</em> enumeration."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[66078,66123],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;The enumeration type to which to convert &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[66181,66248],"source":"\\n<p>The enumeration type to which to convert <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;value&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66309,66438],"source":"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;TEnum&lt;/em&gt; is not an enumeration type.&lt;/p&gt;\\n","pos":[66549,66604],"source":"\\n<p>\\n<em>TEnum</em> is not an enumeration type.</p>\\n"},{"pos":[67309,67352],"content":"TryParse<TEnum>(String, Boolean, out TEnum)","needQuote":true,"nodes":[{"content":"TryParse&lt;TEnum&gt;(String, Boolean, out TEnum)","pos":[0,43],"source":"TryParse<TEnum>(String, Boolean, out TEnum)"}]},{"content":"\\n&lt;p&gt;The string representation of the enumeration name or underlying value to convert.&lt;/p&gt;\\n","pos":[68354,68446],"source":"\\n<p>The string representation of the enumeration name or underlying value to convert.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to ignore case; &lt;strong&gt;false&lt;/strong&gt; to consider case.&lt;/p&gt;\\n","pos":[68516,68607],"source":"\\n<p>\\n<strong>true</strong> to ignore case; <strong>false</strong> to consider case.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, &lt;em&gt;result&lt;/em&gt; contains an object of type &lt;em&gt;TEnum&lt;/em&gt; whose value is represented by &lt;em&gt;value&lt;/em&gt; if the parse operation succeeds.","pos":[68668,68834],"source":"\\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds."},{"content":"If the parse operation fails, &lt;em&gt;result&lt;/em&gt; contains the default value of the underlying type of &lt;em&gt;TEnum&lt;/em&gt;.","pos":[68835,68949],"source":" If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>."},{"content":"Note that this value need not be a member of the &lt;em&gt;TEnum&lt;/em&gt; enumeration.","pos":[68950,69026],"source":" Note that this value need not be a member of the <em>TEnum</em> enumeration."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[69027,69072],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;The enumeration type to which to convert &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69130,69197],"source":"\\n<p>The enumeration type to which to convert <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;value&lt;/em&gt; parameter was converted successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69258,69387],"source":"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;TEnum&lt;/em&gt; is not an enumeration type.&lt;/p&gt;\\n","pos":[69498,69553],"source":"\\n<p>\\n<em>TEnum</em> is not an enumeration type.</p>\\n"},{"pos":[70135,70141],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[70272,70278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70426,70435],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[70594,70605],"content":"IComparable","needQuote":true,"nodes":[{"content":"IComparable","pos":[0,11]}]},{"pos":[70771,70783],"content":"IConvertible","needQuote":true,"nodes":[{"content":"IConvertible","pos":[0,12]}]},{"pos":[70952,70964],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[71169,71191],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[71339,71345],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[71412,71413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71463,71469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71530,71531]},{"pos":[71586,71592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71652,71653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71750,71756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[71823,71824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71874,71880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71941,71942]},{"pos":[71997,72003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72063,72064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72309,72340],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[72506,72521],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[72597,72598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72648,72654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[72715,72716]},{"pos":[72771,72777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72837,72838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72944,72959],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[73035,73036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73086,73092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73153,73154]},{"pos":[73209,73215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73275,73276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73502,73511],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[73604,73611],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[73679,73680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73707,73708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73777,73784],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[73852,73853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73880,73881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74056,74073],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[74182,74197],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[74273,74274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74301,74302],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74379,74394],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[74470,74471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74498,74499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74709,74726],"content":"CompareTo(Object)","needQuote":true,"nodes":[{"content":"CompareTo(Object)","pos":[0,17]}]},{"pos":[74861,74870],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[74924,74925],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74975,74981],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75041,75042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75133,75142],"content":"CompareTo","needQuote":true,"nodes":[{"content":"CompareTo","pos":[0,9]}]},{"pos":[75196,75197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75247,75253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75313,75314],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75501,75506],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75682,75696],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75821,75827],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75876,75877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75927,75933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75993,75994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76080,76086],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76135,76136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76186,76192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76252,76253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76432,76439],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[76585,76589],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[76728,76734],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[76904,76917],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[77024,77035],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[77089,77090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77117,77118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77194,77205],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[77259,77260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77287,77288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77420,77428],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[77556,77562],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[77623,77625]},{"pos":[77690,77696],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[77756,77758],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[77894,77899],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[78039,78043],"content":"Enum","needQuote":true,"nodes":[{"content":"Enum","pos":[0,4]}]},{"pos":[78213,78226],"content":"GetTypeCode()","needQuote":true,"nodes":[{"content":"GetTypeCode()","pos":[0,13]}]},{"pos":[78339,78350],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[78407,78408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78435,78436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78515,78526],"content":"GetTypeCode","needQuote":true,"nodes":[{"content":"GetTypeCode","pos":[0,11]}]},{"pos":[78583,78584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78611,78612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78787,78795],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[78999,79025],"content":"ToBoolean(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToBoolean(IFormatProvider)","pos":[0,26]}]},{"pos":[79180,79189],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[79244,79245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79304,79319],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[79367,79368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79469,79478],"content":"ToBoolean","needQuote":true,"nodes":[{"content":"ToBoolean","pos":[0,9]}]},{"pos":[79533,79534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79593,79608],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[79656,79657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79874,79889],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[80111,80134],"content":"ToByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToByte(IFormatProvider)","pos":[0,23]}]},{"pos":[80283,80289],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[80341,80342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80401,80416],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[80464,80465],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80563,80569],"content":"ToByte","needQuote":true,"nodes":[{"content":"ToByte","pos":[0,6]}]},{"pos":[80621,80622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80681,80696],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[80744,80745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80945,80949],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[81138,81161],"content":"ToChar(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToChar(IFormatProvider)","pos":[0,23]}]},{"pos":[81310,81316],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[81368,81369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81428,81443],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[81491,81492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81590,81596],"content":"ToChar","needQuote":true,"nodes":[{"content":"ToChar","pos":[0,6]}]},{"pos":[81648,81649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81708,81723],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[81771,81772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81972,81976],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[82169,82196],"content":"ToDateTime(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDateTime(IFormatProvider)","pos":[0,27]}]},{"pos":[82353,82363],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[82419,82420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82479,82494],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[82542,82543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82645,82655],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[82711,82712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82771,82786],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[82834,82835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83047,83055],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[83259,83285],"content":"ToDecimal(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDecimal(IFormatProvider)","pos":[0,26]}]},{"pos":[83440,83449],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[83504,83505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83564,83579],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[83627,83628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83729,83738],"content":"ToDecimal","needQuote":true,"nodes":[{"content":"ToDecimal","pos":[0,9]}]},{"pos":[83793,83794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83853,83868],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[83916,83917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84126,84133],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[84333,84358],"content":"ToDouble(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToDouble(IFormatProvider)","pos":[0,25]}]},{"pos":[84511,84519],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[84573,84574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84633,84648],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[84696,84697],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84797,84805],"content":"ToDouble","needQuote":true,"nodes":[{"content":"ToDouble","pos":[0,8]}]},{"pos":[84859,84860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84919,84934],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[84982,84983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85189,85195],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[85391,85415],"content":"ToInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt16(IFormatProvider)","pos":[0,24]}]},{"pos":[85566,85573],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[85626,85627],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85686,85701],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[85749,85750],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85849,85856],"content":"ToInt16","needQuote":true,"nodes":[{"content":"ToInt16","pos":[0,7]}]},{"pos":[85909,85910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85969,85984],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[86032,86033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86236,86241],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[86434,86458],"content":"ToInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt32(IFormatProvider)","pos":[0,24]}]},{"pos":[86609,86616],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[86669,86670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86729,86744],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[86792,86793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86892,86899],"content":"ToInt32","needQuote":true,"nodes":[{"content":"ToInt32","pos":[0,7]}]},{"pos":[86952,86953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87012,87027],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[87075,87076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87331,87355],"content":"ToInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToInt64(IFormatProvider)","pos":[0,24]}]},{"pos":[87506,87513],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[87566,87567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87626,87641],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[87689,87690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87789,87796],"content":"ToInt64","needQuote":true,"nodes":[{"content":"ToInt64","pos":[0,7]}]},{"pos":[87849,87850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87909,87924],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[87972,87973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88176,88181],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[88374,88398],"content":"ToSByte(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSByte(IFormatProvider)","pos":[0,24]}]},{"pos":[88549,88556],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[88609,88610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88669,88684],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[88732,88733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88832,88839],"content":"ToSByte","needQuote":true,"nodes":[{"content":"ToSByte","pos":[0,7]}]},{"pos":[88892,88893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88952,88967],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[89015,89016],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89219,89224],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[89418,89443],"content":"ToSingle(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToSingle(IFormatProvider)","pos":[0,25]}]},{"pos":[89596,89604],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[89658,89659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89718,89733],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[89781,89782],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89882,89890],"content":"ToSingle","needQuote":true,"nodes":[{"content":"ToSingle","pos":[0,8]}]},{"pos":[89944,89945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90004,90019],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[90067,90068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90274,90280],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[90477,90502],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"pos":[90655,90663],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[90717,90718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90777,90792],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[90840,90841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90941,90949],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[91003,91004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91063,91078],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[91126,91127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91395,91424],"content":"ToType(Type, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToType(Type, IFormatProvider)","pos":[0,29]}]},{"pos":[91598,91604],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[91656,91657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91705,91709],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[91747,91748]},{"pos":[91812,91827],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[91875,91876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91986,91992],"content":"ToType","needQuote":true,"nodes":[{"content":"ToType","pos":[0,6]}]},{"pos":[92044,92045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92093,92097],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[92135,92136]},{"pos":[92200,92215],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[92263,92264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92536,92561],"content":"ToUInt16(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt16(IFormatProvider)","pos":[0,25]}]},{"pos":[92714,92722],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[92776,92777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92836,92851],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[92899,92900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93000,93008],"content":"ToUInt16","needQuote":true,"nodes":[{"content":"ToUInt16","pos":[0,8]}]},{"pos":[93062,93063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93122,93137],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[93185,93186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93392,93398],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[93595,93620],"content":"ToUInt32(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt32(IFormatProvider)","pos":[0,25]}]},{"pos":[93773,93781],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[93835,93836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93895,93910],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[93958,93959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94059,94067],"content":"ToUInt32","needQuote":true,"nodes":[{"content":"ToUInt32","pos":[0,8]}]},{"pos":[94121,94122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94181,94196],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[94244,94245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94451,94457],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[94654,94679],"content":"ToUInt64(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToUInt64(IFormatProvider)","pos":[0,25]}]},{"pos":[94832,94840],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[94894,94895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94954,94969],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[95017,95018],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95118,95126],"content":"ToUInt64","needQuote":true,"nodes":[{"content":"ToUInt64","pos":[0,8]}]},{"pos":[95180,95181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95240,95255],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[95303,95304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95510,95516],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[95726,95759],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[95941,95949],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[96003,96004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96054,96060],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[96121,96122]},{"pos":[96186,96201],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[96249,96250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96364,96372],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[96426,96427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96477,96483],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[96544,96545]},{"pos":[96609,96624],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[96672,96673],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96923,96933],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[97034,97042],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[97093,97094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97121,97122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97195,97203],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[97254,97255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97282,97283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97423,97428],"content":"TEnum","needQuote":true,"nodes":[{"content":"TEnum","pos":[0,5]}]},{"pos":[97533,97538],"content":"TEnum","needQuote":true,"nodes":[{"content":"TEnum","pos":[0,5]}]},{"pos":[97656,97673],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[97870,97895],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[98095,98116],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[98315,98330],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[98496,98513],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[98688,98708],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Enum\n  commentId: T:System.Enum\n  id: Enum\n  parent: System\n  children:\n  - System.Enum.#ctor\n  - System.Enum.CompareTo(System.Object)\n  - System.Enum.Equals(System.Object)\n  - System.Enum.Format(System.Type,System.Object,System.String)\n  - System.Enum.GetHashCode\n  - System.Enum.GetName(System.Type,System.Object)\n  - System.Enum.GetNames(System.Type)\n  - System.Enum.GetUnderlyingType(System.Type)\n  - System.Enum.GetValues(System.Type)\n  - System.Enum.HasFlag(System.Enum)\n  - System.Enum.IsDefined(System.Type,System.Object)\n  - System.Enum.Parse(System.Type,System.String)\n  - System.Enum.Parse(System.Type,System.String,System.Boolean)\n  - System.Enum.System#IConvertible#GetTypeCode\n  - System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToByte(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToChar(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToString(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)\n  - System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)\n  - System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  - System.Enum.ToObject(System.Type,System.Object)\n  - System.Enum.ToString\n  - System.Enum.ToString(System.String)\n  - System.Enum.TryParse``1(System.String,``0@)\n  - System.Enum.TryParse``1(System.String,System.Boolean,``0@)\n  langs:\n  - csharp\n  - vb\n  name: Enum\n  fullName: System.Enum\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enum\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 15\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Provides the base class for enumerations.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class Enum : ValueType, IComparable, IFormattable, IConvertible\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Enum\n          Inherits ValueType\n          Implements IComparable, IFormattable, IConvertible\n  seealso:\n  - type: System.ValueType\n    commentId: T:System.ValueType\n  - type: System.FlagsAttribute\n    commentId: T:System.FlagsAttribute\n  inheritance:\n  - System.Object\n  - System.ValueType\n  implements:\n  - System.IComparable\n  - System.IConvertible\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Enum\n- uid: System.Enum.#ctor\n  commentId: M:System.Enum.#ctor\n  id: '#ctor'\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: Enum()\n  fullName: System.Enum.Enum()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 790\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected Enum()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Enum.Enum()\n- uid: System.Enum.CompareTo(System.Object)\n  commentId: M:System.Enum.CompareTo(System.Object)\n  id: CompareTo(System.Object)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: CompareTo(Object)\n  fullName: System.Enum.CompareTo(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompareTo\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 809\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Compares this instance to a specified object and returns an indication of their relative values.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int CompareTo(object target)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function CompareTo(target As Object) As Integer\n    parameters:\n    - id: target\n      type: System.Object\n      description: \"\\n<p>An object to compare, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A signed number that indicates the relative values of this instance and <em>target</em>.</p>\\n<p>Value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>Less than zero </p>\\n</td><td>\\n<p>The value of this instance is less than the value of <em>target</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>The value of this instance is equal to the value of <em>target</em>. </p>\\n</td></tr><tr><td>\\n<p>Greater than zero </p>\\n</td><td>\\n<p>The value of this instance is greater than the value of <em>target</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>target</em> is <strong>null</strong>. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>target</em> and this instance are not the same type. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>This instance is not type <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Enum.Equals(System.Object)\n    commentId: M:System.Enum.Equals(System.Object)\n  implements:\n  - System.IComparable.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Enum.CompareTo(Object)\n- uid: System.Enum.Equals(System.Object)\n  commentId: M:System.Enum.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Enum.Equals(System.Object)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an enumeration value of the same type and with the same underlying value as this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  seealso:\n  - type: System.Enum.CompareTo(System.Object)\n    commentId: M:System.Enum.CompareTo(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Enum.Equals(Object)\n- uid: System.Enum.Format(System.Type,System.Object,System.String)\n  commentId: M:System.Enum.Format(System.Type,System.Object,System.String)\n  id: Format(System.Type,System.Object,System.String)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: Format(Type, Object, String)\n  fullName: System.Enum.Format(System.Type, System.Object, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Format\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 602\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified value of a specified enumerated type to its equivalent string representation according to the specified format.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static string Format(Type enumType, object value, string format)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function Format(enumType As Type, value As Object, format As String) As String\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>The enumeration type of the value to convert. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to convert. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>The output format to use. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string representation of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>enumType</em>, <em>value</em>, or <em>format</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>enumType</em> parameter is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n<p>-or- </p>\\n<p>The <em>value</em> is from an enumeration that differs in type from <em>enumType</em>.</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>The <em>format</em> parameter contains an invalid value. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>format</em> equals \\\"X\\\", but the enumeration type is unknown.</p>\\n\"\n  seealso:\n  - type: System.Enum.ToString(System.String)\n    commentId: M:System.Enum.ToString(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.Format(Type, Object, String)\n- uid: System.Enum.GetHashCode\n  commentId: M:System.Enum.GetHashCode\n  id: GetHashCode\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Enum.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 744\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for the value of this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Enum.GetHashCode()\n- uid: System.Enum.GetName(System.Type,System.Object)\n  commentId: M:System.Enum.GetName(System.Type,System.Object)\n  id: GetName(System.Type,System.Object)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: GetName(Type, Object)\n  fullName: System.Enum.GetName(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetName\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 516\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves the name of the constant in the specified enumeration that has the specified value.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static string GetName(Type enumType, object value)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function GetName(enumType As Type, value As Object) As String\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of a particular enumerated constant in terms of its underlying type. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the name of the enumerated constant in <em>enumType</em> whose value is <em>value</em>; or <strong>null</strong> if no such constant is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is neither of type <em>enumType</em> nor does it have the same underlying type as <em>enumType</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.GetName(Type, Object)\n- uid: System.Enum.GetNames(System.Type)\n  commentId: M:System.Enum.GetNames(System.Type)\n  id: GetNames(System.Type)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: GetNames(Type)\n  fullName: System.Enum.GetNames(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNames\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 526\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves an array of the names of the constants in a specified enumeration.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static string[] GetNames(Type enumType)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function GetNames(enumType As Type) As String()\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array of the names of the constants in <em>enumType</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> parameter is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.GetNames(Type)\n- uid: System.Enum.GetUnderlyingType(System.Type)\n  commentId: M:System.Enum.GetUnderlyingType(System.Type)\n  id: GetUnderlyingType(System.Type)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: GetUnderlyingType(Type)\n  fullName: System.Enum.GetUnderlyingType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetUnderlyingType\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 488\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the underlying type of the specified enumeration.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static Type GetUnderlyingType(Type enumType)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function GetUnderlyingType(enumType As Type) As Type\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>The enumeration whose underlying type will be retrieved.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The underlying type of <em>enumType</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Enum.GetTypeCode\n    commentId: M:System.Enum.GetTypeCode\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.GetUnderlyingType(Type)\n- uid: System.Enum.GetValues(System.Type)\n  commentId: M:System.Enum.GetValues(System.Type)\n  id: GetValues(System.Type)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Type)\n  fullName: System.Enum.GetValues(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValues\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 499\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Retrieves an array of the values of the constants in a specified enumeration.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static Array GetValues(Type enumType)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function GetValues(enumType As Type) As Array\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    return:\n      type: System.Array\n      description: \"\\n<p>An array that contains the values of the constants in <em>enumType</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The method is invoked by reflection in a reflection-only context, </p>\\n<p>-or-</p>\\n<p>\\n<em>enumType</em> is a type from an assembly loaded in a reflection-only context.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.GetValues(Type)\n- uid: System.Enum.HasFlag(System.Enum)\n  commentId: M:System.Enum.HasFlag(System.Enum)\n  id: HasFlag(System.Enum)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: HasFlag(Enum)\n  fullName: System.Enum.HasFlag(System.Enum)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasFlag\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 870\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether one or more bit fields are set in the current instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public bool HasFlag(Enum flag)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function HasFlag(flag As  Enum) As Boolean\n    parameters:\n    - id: flag\n      type: System.Enum\n      description: \"\\n<p>An enumeration value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the bit field or bit fields that are set in <em>flag</em> are also set in the current instance; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>flag</em> is a different type than the current instance.</p>\\n\"\n  seealso:\n  - type: System.FlagsAttribute\n    commentId: T:System.FlagsAttribute\n  - type: System.Enum.Equals(System.Object)\n    commentId: M:System.Enum.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Enum.HasFlag(Enum)\n- uid: System.Enum.IsDefined(System.Type,System.Object)\n  commentId: M:System.Enum.IsDefined(System.Type,System.Object)\n  id: IsDefined(System.Type,System.Object)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IsDefined(Type, Object)\n  fullName: System.Enum.IsDefined(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsDefined\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 591\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns an indication whether a constant with a specified value exists in a specified enumeration.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static bool IsDefined(Type enumType, object value)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function IsDefined(enumType As Type, value As Object) As Boolean\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value or name of a constant in <em>enumType</em>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a constant in <em>enumType</em> has a value equal to <em>value</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <strong>Enum</strong>.</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> is an enumeration, but it is not an enumeration of type <em>enumType</em>.</p>\\n<p>-or- </p>\\n<p>The type of <em>value</em> is not an underlying type of <em>enumType</em>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>value</em> is not type <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Enum.GetName(System.Type,System.Object)\n    commentId: M:System.Enum.GetName(System.Type,System.Object)\n  - type: System.Enum.GetNames(System.Type)\n    commentId: M:System.Enum.GetNames(System.Type)\n  - type: System.Enum.GetValues(System.Type)\n    commentId: M:System.Enum.GetValues(System.Type)\n  - type: System.Enum.HasFlag(System.Enum)\n    commentId: M:System.Enum.HasFlag(System.Enum)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.IsDefined(Type, Object)\n- uid: System.Enum.Parse(System.Type,System.String)\n  commentId: M:System.Enum.Parse(System.Type,System.String)\n  id: Parse(System.Type,System.String)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: Parse(Type, String)\n  fullName: System.Enum.Parse(System.Type, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 338\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static object Parse(Type enumType, string value)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function Parse(enumType As Type, value As String) As Object\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string containing the name or value to convert. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is either an empty string or only contains white space.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\\n\"\n  seealso:\n  - type: System.Enum.IsDefined(System.Type,System.Object)\n    commentId: M:System.Enum.IsDefined(System.Type,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.Parse(Type, String)\n- uid: System.Enum.Parse(System.Type,System.String,System.Boolean)\n  commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)\n  id: Parse(System.Type,System.String,System.Boolean)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: Parse(Type, String, Boolean)\n  fullName: System.Enum.Parse(System.Type, System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Parse\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 344\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-insensitive.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static object Parse(Type enumType, string value, bool ignoreCase)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function Parse(enumType As Type, value As String, ignoreCase As Boolean) As Object\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>An enumeration type. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string containing the name or value to convert. </p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore case; <strong>false</strong> to regard case. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object of type <em>enumType</em> whose value is represented by <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is either an empty string (\\\"\\\") or only contains white space.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is a name, but not one of the named constants defined for the enumeration. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> is outside the range of the underlying type of <em>enumType</em>.</p>\\n\"\n  seealso:\n  - type: System.Enum.IsDefined(System.Type,System.Object)\n    commentId: M:System.Enum.IsDefined(System.Type,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.Parse(Type, String, Boolean)\n- uid: System.Enum.System#IConvertible#GetTypeCode\n  commentId: M:System.Enum.System#IConvertible#GetTypeCode\n  id: System#IConvertible#GetTypeCode\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.GetTypeCode()\n  fullName: System.Enum.System.IConvertible.GetTypeCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.GetTypeCode\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 803\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: TypeCode IConvertible.GetTypeCode()\n    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode\n    return:\n      type: System.TypeCode\n  implements:\n  - System.IConvertible.GetTypeCode\n  name.vb: System.IConvertible.GetTypeCode()\n  nameWithType: Enum.IConvertible.GetTypeCode()\n  nameWithType.vb: Enum.System.IConvertible.GetTypeCode()\n- uid: System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToBoolean(System.IFormatProvider)\n  id: System#IConvertible#ToBoolean(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToBoolean(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToBoolean(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToBoolean\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 946\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a Boolean value based on the underlying type.</p>\\n\"\n  syntax:\n    content: bool IConvertible.ToBoolean(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToBoolean(System.IFormatProvider)\n  name.vb: System.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToBoolean(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToBoolean(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToByte(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToByte(System.IFormatProvider)\n  id: System#IConvertible#ToByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToByte(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToByte\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 964\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to an 8-bit unsigned integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: byte IConvertible.ToByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToByte(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToByte(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToByte(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToChar(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToChar(System.IFormatProvider)\n  id: System#IConvertible#ToChar(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToChar(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToChar(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToChar\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 952\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a Unicode character based on the underlying type.</p>\\n\"\n  syntax:\n    content: char IConvertible.ToChar(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToChar(System.IFormatProvider)\n  name.vb: System.IConvertible.ToChar(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToChar(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToChar(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToDateTime(System.IFormatProvider)\n  id: System#IConvertible#ToDateTime(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDateTime(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToDateTime(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDateTime\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1024\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on the underlying type.</p>\\n\"\n  syntax:\n    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToDateTime(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToDateTime(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToDateTime(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToDecimal(System.IFormatProvider)\n  id: System#IConvertible#ToDecimal(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDecimal(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToDecimal(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDecimal\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1018\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> based on the underlying type.</p>\\n\"\n  syntax:\n    content: decimal IConvertible.ToDecimal(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToDecimal(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToDecimal(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToDecimal(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToDouble(System.IFormatProvider)\n  id: System#IConvertible#ToDouble(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToDouble(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToDouble(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToDouble\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1012\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a double-precision floating point number based on the underlying type.</p>\\n\"\n  syntax:\n    content: double IConvertible.ToDouble(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToDouble(System.IFormatProvider)\n  name.vb: System.IConvertible.ToDouble(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToDouble(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToDouble(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToInt16(System.IFormatProvider)\n  id: System#IConvertible#ToInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt16(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt16\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 970\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 16-bit signed integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: short IConvertible.ToInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt16(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToInt16(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToInt16(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToInt32(System.IFormatProvider)\n  id: System#IConvertible#ToInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt32(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt32\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 982\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 32-bit signed integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: int IConvertible.ToInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt32(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToInt32(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToInt32(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToInt64(System.IFormatProvider)\n  id: System#IConvertible#ToInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToInt64(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToInt64\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 994\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 64-bit signed integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: long IConvertible.ToInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToInt64(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToInt64(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToInt64(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToSByte(System.IFormatProvider)\n  id: System#IConvertible#ToSByte(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSByte(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToSByte(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSByte\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 958\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to an 8-bit signed integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: sbyte IConvertible.ToSByte(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToSByte(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSByte(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToSByte(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToSByte(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToSingle(System.IFormatProvider)\n  id: System#IConvertible#ToSingle(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToSingle(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToSingle(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToSingle\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1006\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a single-precision floating-point number based on the underlying type.</p>\\n\"\n  syntax:\n    content: float IConvertible.ToSingle(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>This member always throws an exception.</p>\\n\"\n  exceptions:\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>In all cases. </p>\\n\"\n  implements:\n  - System.IConvertible.ToSingle(System.IFormatProvider)\n  name.vb: System.IConvertible.ToSingle(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToSingle(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToSingle(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToString(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToString(System.IFormatProvider)\n  id: System#IConvertible#ToString(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToString(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IConvertible.ToString\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 815\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: >-\n      [Obsolete(\"The provider argument is not used. Please use ToString().\")]\n\n      string IConvertible.ToString(IFormatProvider provider)\n    content.vb: >-\n      <Obsolete(\"The provider argument is not used. Please use ToString().\")>\n\n      Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IConvertible.ToString(System.IFormatProvider)\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The provider argument is not used. Please use ToString().\n  name.vb: System.IConvertible.ToString(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToString(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToString(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToType(Type, IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToType\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1030\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a specified type based on the underlying type.</p>\\n\"\n  syntax:\n    content: object IConvertible.ToType(Type type, IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to convert to. </p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  name.vb: System.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType: Enum.IConvertible.ToType(Type, IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToType(Type, IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToUInt16(System.IFormatProvider)\n  id: System#IConvertible#ToUInt16(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt16(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToUInt16(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt16\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 976\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 16-bit unsigned integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: ushort IConvertible.ToUInt16(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt16(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToUInt16(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToUInt16(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToUInt32(System.IFormatProvider)\n  id: System#IConvertible#ToUInt32(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt32(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToUInt32(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt32\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 988\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 32-bit unsigned integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: uint IConvertible.ToUInt32(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt32(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToUInt32(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToUInt32(IFormatProvider)\n- uid: System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)\n  commentId: M:System.Enum.System#IConvertible#ToUInt64(System.IFormatProvider)\n  id: System#IConvertible#ToUInt64(System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IConvertible.ToUInt64(IFormatProvider)\n  fullName: System.Enum.System.IConvertible.ToUInt64(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IConvertible.ToUInt64\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 1000\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the current value to a 64-bit unsigned integer based on the underlying type.</p>\\n\"\n  syntax:\n    content: ulong IConvertible.ToUInt64(IFormatProvider provider)\n    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The converted value.</p>\\n\"\n  implements:\n  - System.IConvertible.ToUInt64(System.IFormatProvider)\n  name.vb: System.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType: Enum.IConvertible.ToUInt64(IFormatProvider)\n  nameWithType.vb: Enum.System.IConvertible.ToUInt64(IFormatProvider)\n- uid: System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Enum.System#IFormattable#ToString(System.String,System.IFormatProvider)\n  id: System#IFormattable#ToString(System.String,System.IFormatProvider)\n  isEii: true\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: IFormattable.ToString(String, IFormatProvider)\n  fullName: System.Enum.System.IFormattable.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.IFormattable.ToString\n    path: src/System.Runtime/ref/System.Runtime.cs\n    startLine: 821\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: >-\n      [Obsolete(\"The provider argument is not used. Please use ToString(String).\")]\n\n      string IFormattable.ToString(string format, IFormatProvider provider)\n    content.vb: >-\n      <Obsolete(\"The provider argument is not used. Please use ToString(String).\")>\n\n      Function System.IFormattable.ToString(format As String, provider As IFormatProvider) As String Implements IFormattable.ToString\n    parameters:\n    - id: format\n      type: System.String\n    - id: provider\n      type: System.IFormatProvider\n    return:\n      type: System.String\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: The provider argument is not used. Please use ToString(String).\n  name.vb: System.IFormattable.ToString(String, IFormatProvider)\n  nameWithType: Enum.IFormattable.ToString(String, IFormatProvider)\n  nameWithType.vb: Enum.System.IFormattable.ToString(String, IFormatProvider)\n- uid: System.Enum.ToObject(System.Type,System.Object)\n  commentId: M:System.Enum.ToObject(System.Type,System.Object)\n  id: ToObject(System.Type,System.Object)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: ToObject(Type, Object)\n  fullName: System.Enum.ToObject(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToObject\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 543\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified object with an integer value to an enumeration member.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public static object ToObject(Type enumType, object value)\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Shared Function ToObject(enumType As Type, value As Object) As Object\n    parameters:\n    - id: enumType\n      type: System.Type\n      description: \"\\n<p>The enumeration type to return. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value convert to an enumeration member. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An enumeration object whose value is <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>enumType</em> or <em>value</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>enumType</em> is not an <xref href=\\\"System.Enum\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>value</em> is not type <xref href=\\\"System.SByte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.UInt32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.UInt64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Enum.IsDefined(System.Type,System.Object)\n    commentId: M:System.Enum.IsDefined(System.Type,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Enum.ToObject(Type, Object)\n- uid: System.Enum.ToString\n  commentId: M:System.Enum.ToString\n  id: ToString\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Enum.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 789\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  seealso:\n  - type: System.Enum.Format(System.Type,System.Object,System.String)\n    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)\n  - type: System.Enum.Parse(System.Type,System.String)\n    commentId: M:System.Enum.Parse(System.Type,System.String)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Enum.ToString()\n- uid: System.Enum.ToString(System.String)\n  commentId: M:System.Enum.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Enum.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 845\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to its equivalent string representation using the specified format.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> contains an invalid specification. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>format</em> equals \\\"X\\\", but the enumeration type is unknown.</p>\\n\"\n  seealso:\n  - type: System.Enum.Format(System.Type,System.Object,System.String)\n    commentId: M:System.Enum.Format(System.Type,System.Object,System.String)\n  - type: System.Enum.Parse(System.Type,System.String)\n    commentId: M:System.Enum.Parse(System.Type,System.String)\n  - type: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Enum.ToString(String)\n- uid: System.Enum.TryParse``1(System.String,``0@)\n  commentId: M:System.Enum.TryParse``1(System.String,``0@)\n  id: TryParse``1(System.String,``0@)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: TryParse<TEnum>(String, out TEnum)\n  fullName: System.Enum.TryParse<TEnum>(System.String, out TEnum)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 322\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. The return value indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: 'public static bool TryParse<TEnum>(string value, out TEnum result)where TEnum : struct'\n    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ByRef result As TEnum) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string representation of the enumeration name or underlying value to convert.</p>\\n\"\n    - id: result\n      type: '{TEnum}'\n      description: \"\\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds. If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>. Note that this value need not be a member of the <em>TEnum</em> enumeration. This parameter is passed uninitialized.</p>\\n\"\n    typeParameters:\n    - id: TEnum\n      description: \"\\n<p>The enumeration type to which to convert <em>value</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>TEnum</em> is not an enumeration type.</p>\\n\"\n  seealso:\n  - type: System.Enum.Parse(System.Type,System.String)\n    commentId: M:System.Enum.Parse(System.Type,System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, ByRef TEnum)\n  name.vb: TryParse(Of TEnum)(String, ByRef TEnum)\n  nameWithType: Enum.TryParse<TEnum>(String, out TEnum)\n  nameWithType.vb: Enum.TryParse(Of TEnum)(String, ByRef TEnum)\n- uid: System.Enum.TryParse``1(System.String,System.Boolean,``0@)\n  commentId: M:System.Enum.TryParse``1(System.String,System.Boolean,``0@)\n  id: TryParse``1(System.String,System.Boolean,``0@)\n  parent: System.Enum\n  langs:\n  - csharp\n  - vb\n  name: TryParse<TEnum>(String, Boolean, out TEnum)\n  fullName: System.Enum.TryParse<TEnum>(System.String, System.Boolean, out TEnum)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Enum.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryParse\n    path: src/mscorlib/src/System/Enum.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the string representation of the name or numeric value of one or more enumerated constants to an equivalent enumerated object. A parameter specifies whether the operation is case-sensitive. The return value indicates whether the conversion succeeded.</p>\\n\"\n  syntax:\n    content: 'public static bool TryParse<TEnum>(string value, bool ignoreCase, out TEnum result)where TEnum : struct'\n    content.vb: Public Shared Function TryParse(Of TEnum As Structure)(value As String, ignoreCase As Boolean, ByRef result As TEnum) As Boolean\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string representation of the enumeration name or underlying value to convert.</p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to ignore case; <strong>false</strong> to consider case.</p>\\n\"\n    - id: result\n      type: '{TEnum}'\n      description: \"\\n<p>When this method returns, <em>result</em> contains an object of type <em>TEnum</em> whose value is represented by <em>value</em> if the parse operation succeeds. If the parse operation fails, <em>result</em> contains the default value of the underlying type of <em>TEnum</em>. Note that this value need not be a member of the <em>TEnum</em> enumeration. This parameter is passed uninitialized.</p>\\n\"\n    typeParameters:\n    - id: TEnum\n      description: \"\\n<p>The enumeration type to which to convert <em>value</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>TEnum</em> is not an enumeration type.</p>\\n\"\n  seealso:\n  - type: System.Enum.Parse(System.Type,System.String,System.Boolean)\n    commentId: M:System.Enum.Parse(System.Type,System.String,System.Boolean)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Enum.TryParse(Of TEnum)(System.String, System.Boolean, ByRef TEnum)\n  name.vb: TryParse(Of TEnum)(String, Boolean, ByRef TEnum)\n  nameWithType: Enum.TryParse<TEnum>(String, Boolean, out TEnum)\n  nameWithType.vb: Enum.TryParse(Of TEnum)(String, Boolean, ByRef TEnum)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.IComparable\n  parent: System\n  isExternal: false\n  name: IComparable\n  fullName: System.IComparable\n  nameWithType: IComparable\n  commentId: T:System.IComparable\n- uid: System.IConvertible\n  parent: System\n  isExternal: false\n  name: IConvertible\n  fullName: System.IConvertible\n  nameWithType: IConvertible\n  commentId: T:System.IConvertible\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  nameWithType: IFormattable\n  commentId: T:System.IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.IComparable.CompareTo(System.Object)\n  parent: System.IComparable\n  isExternal: true\n  name: CompareTo(Object)\n  fullName: System.IComparable.CompareTo(System.Object)\n  spec.csharp:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IComparable.CompareTo(System.Object)\n    name: CompareTo\n    fullName: System.IComparable.CompareTo\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IComparable.CompareTo(Object)\n  commentId: M:System.IComparable.CompareTo(System.Object)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Enum\n  parent: System\n  isExternal: false\n  name: Enum\n  fullName: System.Enum\n  nameWithType: Enum\n  commentId: T:System.Enum\n- uid: System.IConvertible.GetTypeCode\n  parent: System.IConvertible\n  isExternal: false\n  name: GetTypeCode()\n  fullName: System.IConvertible.GetTypeCode()\n  spec.csharp:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.GetTypeCode\n    name: GetTypeCode\n    fullName: System.IConvertible.GetTypeCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.GetTypeCode()\n  commentId: M:System.IConvertible.GetTypeCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToBoolean(IFormatProvider)\n  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)\n    name: ToBoolean\n    fullName: System.IConvertible.ToBoolean\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToBoolean(IFormatProvider)\n  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.IConvertible.ToByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToByte(IFormatProvider)\n  fullName: System.IConvertible.ToByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToByte(System.IFormatProvider)\n    name: ToByte\n    fullName: System.IConvertible.ToByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.IConvertible.ToChar(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToChar(IFormatProvider)\n  fullName: System.IConvertible.ToChar(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToChar(System.IFormatProvider)\n    name: ToChar\n    fullName: System.IConvertible.ToChar\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToChar(IFormatProvider)\n  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDateTime(IFormatProvider)\n  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)\n    name: ToDateTime\n    fullName: System.IConvertible.ToDateTime\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDateTime(IFormatProvider)\n  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDecimal(IFormatProvider)\n  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)\n    name: ToDecimal\n    fullName: System.IConvertible.ToDecimal\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDecimal(IFormatProvider)\n  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.IConvertible.ToDouble(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToDouble(IFormatProvider)\n  fullName: System.IConvertible.ToDouble(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToDouble(System.IFormatProvider)\n    name: ToDouble\n    fullName: System.IConvertible.ToDouble\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToDouble(IFormatProvider)\n  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.IConvertible.ToInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt16(IFormatProvider)\n  fullName: System.IConvertible.ToInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt16(System.IFormatProvider)\n    name: ToInt16\n    fullName: System.IConvertible.ToInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.IConvertible.ToInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt32(IFormatProvider)\n  fullName: System.IConvertible.ToInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt32(System.IFormatProvider)\n    name: ToInt32\n    fullName: System.IConvertible.ToInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)\n- uid: System.IConvertible.ToInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToInt64(IFormatProvider)\n  fullName: System.IConvertible.ToInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToInt64(System.IFormatProvider)\n    name: ToInt64\n    fullName: System.IConvertible.ToInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.IConvertible.ToSByte(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSByte(IFormatProvider)\n  fullName: System.IConvertible.ToSByte(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSByte(System.IFormatProvider)\n    name: ToSByte\n    fullName: System.IConvertible.ToSByte\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSByte(IFormatProvider)\n  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.IConvertible.ToSingle(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToSingle(IFormatProvider)\n  fullName: System.IConvertible.ToSingle(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToSingle(System.IFormatProvider)\n    name: ToSingle\n    fullName: System.IConvertible.ToSingle\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToSingle(IFormatProvider)\n  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.IConvertible.ToString(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToString(IFormatProvider)\n  fullName: System.IConvertible.ToString(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToString(System.IFormatProvider)\n    name: ToString\n    fullName: System.IConvertible.ToString\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToString(IFormatProvider)\n  commentId: M:System.IConvertible.ToString(System.IFormatProvider)\n- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToType(Type, IFormatProvider)\n  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)\n    name: ToType\n    fullName: System.IConvertible.ToType\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToType(Type, IFormatProvider)\n  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)\n- uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt16(IFormatProvider)\n  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)\n    name: ToUInt16\n    fullName: System.IConvertible.ToUInt16\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt16(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt32(IFormatProvider)\n  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)\n    name: ToUInt32\n    fullName: System.IConvertible.ToUInt32\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt32(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n  parent: System.IConvertible\n  isExternal: false\n  name: ToUInt64(IFormatProvider)\n  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)\n    name: ToUInt64\n    fullName: System.IConvertible.ToUInt64\n  - name: (\n    fullName: (\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IConvertible.ToUInt64(IFormatProvider)\n  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: '{TEnum}'\n  definition: TEnum\n  name: TEnum\n  fullName: TEnum\n  nameWithType: TEnum\n  commentId: '!:TEnum'\n- uid: TEnum\n  isExternal: false\n  name: TEnum\n  fullName: TEnum\n  nameWithType: TEnum\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}