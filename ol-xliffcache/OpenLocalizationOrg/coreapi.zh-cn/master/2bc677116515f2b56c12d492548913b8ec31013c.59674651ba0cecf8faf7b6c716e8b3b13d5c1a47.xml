{"nodes":[{"pos":[654,671],"content":"NetworkCredential","needQuote":true,"nodes":[{"content":"NetworkCredential","pos":[0,17]}]},{"pos":[2101,2120],"content":"NetworkCredential()","needQuote":true,"nodes":[{"content":"NetworkCredential()","pos":[0,19]}]},{"pos":[3137,3170],"content":"NetworkCredential(String, String)","needQuote":true,"nodes":[{"content":"NetworkCredential(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The user name associated with the credentials.","pos":[4031,4082],"source":"\\n<p>The user name associated with the credentials."},{"content":"&lt;/p&gt;\\n","pos":[4083,4089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password for the user name associated with the credentials.","pos":[4156,4224],"source":"\\n<p>The password for the user name associated with the credentials."},{"content":"&lt;/p&gt;\\n","pos":[4225,4231],"source":" </p>\\n"},{"pos":[4668,4709],"content":"NetworkCredential(String, String, String)","needQuote":true,"nodes":[{"content":"NetworkCredential(String, String, String)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The user name associated with the credentials.","pos":[5627,5678],"source":"\\n<p>The user name associated with the credentials."},{"content":"&lt;/p&gt;\\n","pos":[5679,5685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password for the user name associated with the credentials.","pos":[5752,5820],"source":"\\n<p>The password for the user name associated with the credentials."},{"content":"&lt;/p&gt;\\n","pos":[5821,5827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The domain associated with these credentials.","pos":[5892,5942],"source":"\\n<p>The domain associated with these credentials."},{"content":"&lt;/p&gt;\\n","pos":[5943,5949],"source":" </p>\\n"},{"pos":[6266,6272],"content":"Domain","needQuote":true,"nodes":[{"content":"Domain","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The name of the domain associated with the credentials.&lt;/p&gt;\\n","pos":[6940,7006],"source":"\\n<p>The name of the domain associated with the credentials.</p>\\n"},{"pos":[7444,7452],"content":"Password","needQuote":true,"nodes":[{"content":"Password","pos":[0,8]}]},{"pos":[8957,8965],"content":"UserName","needQuote":true,"nodes":[{"content":"UserName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The user name associated with the credentials.&lt;/p&gt;\\n","pos":[9629,9686],"source":"\\n<p>The user name associated with the credentials.</p>\\n"},{"pos":[10267,10303],"content":"GetCredential(String, Int32, String)","needQuote":true,"nodes":[{"content":"GetCredential(String, Int32, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The host computer that authenticates the client.&lt;/p&gt;\\n","pos":[11267,11326],"source":"\\n<p>The host computer that authenticates the client.</p>\\n"},{"content":"\\n&lt;p&gt;The port on the &lt;em&gt;host&lt;/em&gt; that the client communicates with.&lt;/p&gt;\\n","pos":[11388,11463],"source":"\\n<p>The port on the <em>host</em> that the client communicates with.</p>\\n"},{"pos":[12601,12627],"content":"GetCredential(Uri, String)","needQuote":true,"nodes":[{"content":"GetCredential(Uri, String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The URI that the client provides authentication for.","pos":[13537,13594],"source":"\\n<p>The URI that the client provides authentication for."},{"content":"&lt;/p&gt;\\n","pos":[13595,13601],"source":" </p>\\n"},{"pos":[14302,14312],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[14455,14461],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14620,14632],"content":"ICredentials","needQuote":true,"nodes":[{"content":"ICredentials","pos":[0,12]}]},{"pos":[14823,14841],"content":"ICredentialsByHost","needQuote":true,"nodes":[{"content":"ICredentialsByHost","pos":[0,18]}]},{"pos":[15045,15055],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15150,15158],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15227,15228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15255,15256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15326,15334],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15403,15404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15431,15432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15615,15629],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15748,15754],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15821,15822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15872,15878],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15938,15939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16022,16028],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16095,16096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16146,16152],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16212,16213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16427,16449],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16597,16603],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16670,16671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16721,16727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16788,16789]},{"pos":[16844,16850],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16910,16911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17008,17014],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17081,17082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17132,17138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17199,17200]},{"pos":[17255,17261],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17321,17322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17567,17598],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17764,17779],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17855,17856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17906,17912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17973,17974]},{"pos":[18029,18035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18095,18096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18202,18217],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18293,18294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18344,18350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18411,18412]},{"pos":[18467,18473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18533,18534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18764,18777],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18878,18889],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18961,18962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18989,18990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19063,19074],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[19146,19147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19174,19175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19350,19359],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19452,19459],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19527,19528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19555,19556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19625,19632],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19700,19701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19728,19729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19904,19921],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[20030,20045],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20121,20122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20149,20150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20227,20242],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20318,20319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20346,20347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20492,20498],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20629,20635],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[20874,20910],"content":"GetCredential(String, Int32, String)","needQuote":true,"nodes":[{"content":"GetCredential(String, Int32, String)","pos":[0,36]}]},{"pos":[21131,21144],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[21213,21214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21264,21270],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[21331,21332]},{"pos":[21386,21391],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[21451,21452]},{"pos":[21507,21513],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21573,21574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21707,21720],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[21789,21790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21840,21846],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[21907,21908]},{"pos":[21962,21967],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[22027,22028]},{"pos":[22083,22089],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22149,22150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22405,22410],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22571,22588],"content":"NetworkCredential","needQuote":true,"nodes":[{"content":"NetworkCredential","pos":[0,17]}]},{"pos":[22840,22866],"content":"GetCredential(Uri, String)","needQuote":true,"nodes":[{"content":"GetCredential(Uri, String)","pos":[0,26]}]},{"pos":[23042,23055],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[23118,23119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23166,23169],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"content":",","pos":[23227,23228]},{"pos":[23283,23289],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23349,23350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23461,23474],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[23537,23538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23585,23588],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"content":",","pos":[23646,23647]},{"pos":[23702,23708],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[23768,23769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23984,23987],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]}],"content":"items:\n- uid: System.Net.NetworkCredential\n  commentId: T:System.Net.NetworkCredential\n  id: NetworkCredential\n  parent: System.Net\n  children:\n  - System.Net.NetworkCredential.#ctor\n  - System.Net.NetworkCredential.#ctor(System.String,System.String)\n  - System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)\n  - System.Net.NetworkCredential.Domain\n  - System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)\n  - System.Net.NetworkCredential.GetCredential(System.Uri,System.String)\n  - System.Net.NetworkCredential.Password\n  - System.Net.NetworkCredential.UserName\n  langs:\n  - csharp\n  - vb\n  name: NetworkCredential\n  fullName: System.Net.NetworkCredential\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkCredential\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 229\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides credentials for password-based authentication schemes such as basic, digest, NTLM, and Kerberos authentication.</p>\\n\"\n  syntax:\n    content: 'public class NetworkCredential : ICredentials, ICredentialsByHost'\n    content.vb: >-\n      Public Class NetworkCredential\n          Implements ICredentials, ICredentialsByHost\n  inheritance:\n  - System.Object\n  implements:\n  - System.Net.ICredentials\n  - System.Net.ICredentialsByHost\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: NetworkCredential\n- uid: System.Net.NetworkCredential.#ctor\n  commentId: M:System.Net.NetworkCredential.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: NetworkCredential()\n  fullName: System.Net.NetworkCredential.NetworkCredential()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 231\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public NetworkCredential()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.NetworkCredential()\n- uid: System.Net.NetworkCredential.#ctor(System.String,System.String)\n  commentId: M:System.Net.NetworkCredential.#ctor(System.String,System.String)\n  id: '#ctor(System.String,System.String)'\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: NetworkCredential(String, String)\n  fullName: System.Net.NetworkCredential.NetworkCredential(System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 232\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified user name and password.</p>\\n\"\n  syntax:\n    content: public NetworkCredential(string userName, string password)\n    content.vb: Public Sub New(userName As String, password As String)\n    parameters:\n    - id: userName\n      type: System.String\n      description: \"\\n<p>The user name associated with the credentials. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password for the user name associated with the credentials. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.NetworkCredential(String, String)\n- uid: System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)\n  commentId: M:System.Net.NetworkCredential.#ctor(System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String)'\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: NetworkCredential(String, String, String)\n  fullName: System.Net.NetworkCredential.NetworkCredential(System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 233\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified user name, password, and domain.</p>\\n\"\n  syntax:\n    content: public NetworkCredential(string userName, string password, string domain)\n    content.vb: Public Sub New(userName As String, password As String, domain As String)\n    parameters:\n    - id: userName\n      type: System.String\n      description: \"\\n<p>The user name associated with the credentials. </p>\\n\"\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password for the user name associated with the credentials. </p>\\n\"\n    - id: domain\n      type: System.String\n      description: \"\\n<p>The domain associated with these credentials. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.NetworkCredential(String, String, String)\n- uid: System.Net.NetworkCredential.Domain\n  commentId: P:System.Net.NetworkCredential.Domain\n  id: Domain\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: Domain\n  fullName: System.Net.NetworkCredential.Domain\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Domain\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 234\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the domain or computer name that verifies the credentials.</p>\\n\"\n  syntax:\n    content: public string Domain { get; set; }\n    content.vb: Public Property Domain As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the domain associated with the credentials.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.Domain\n- uid: System.Net.NetworkCredential.Password\n  commentId: P:System.Net.NetworkCredential.Password\n  id: Password\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: Password\n  fullName: System.Net.NetworkCredential.Password\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Password\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 235\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the password for the user name associated with the credentials.</p>\\n\"\n  syntax:\n    content: public string Password { get; set; }\n    content.vb: Public Property Password As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The password associated with the credentials. If this <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance was initialized with the <em>password</em> parameter set to <strong>null</strong>, then the <xref href=\\\"System.Net.NetworkCredential.Password\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property will return an empty string.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.Password\n- uid: System.Net.NetworkCredential.UserName\n  commentId: P:System.Net.NetworkCredential.UserName\n  id: UserName\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: UserName\n  fullName: System.Net.NetworkCredential.UserName\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserName\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 236\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the user name associated with the credentials.</p>\\n\"\n  syntax:\n    content: public string UserName { get; set; }\n    content.vb: Public Property UserName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The user name associated with the credentials.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.UserName\n- uid: System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)\n  commentId: M:System.Net.NetworkCredential.GetCredential(System.String,System.Int32,System.String)\n  id: GetCredential(System.String,System.Int32,System.String)\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: GetCredential(String, Int32, String)\n  fullName: System.Net.NetworkCredential.GetCredential(System.String, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCredential\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 237\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns an instance of the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified host, port, and authentication type.</p>\\n\"\n  syntax:\n    content: public NetworkCredential GetCredential(string host, int port, string authenticationType)\n    content.vb: Public Function GetCredential(host As String, port As Integer, authenticationType As String) As NetworkCredential\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>The host computer that authenticates the client.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port on the <em>host</em> that the client communicates with.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication requested, as defined in the <xref href=\\\"System.Net.IAuthenticationModule.AuthenticationType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. </p>\\n\"\n    return:\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified host, port, and authentication protocol, or <strong>null</strong> if there are no credentials available for the specified host, port, and authentication protocol.</p>\\n\"\n  implements:\n  - System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.GetCredential(String, Int32, String)\n- uid: System.Net.NetworkCredential.GetCredential(System.Uri,System.String)\n  commentId: M:System.Net.NetworkCredential.GetCredential(System.Uri,System.String)\n  id: GetCredential(System.Uri,System.String)\n  parent: System.Net.NetworkCredential\n  langs:\n  - csharp\n  - vb\n  name: GetCredential(Uri, String)\n  fullName: System.Net.NetworkCredential.GetCredential(System.Uri, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCredential\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 238\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns an instance of the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified Uniform Resource Identifier (URI) and authentication type.</p>\\n\"\n  syntax:\n    content: public NetworkCredential GetCredential(Uri uri, string authType)\n    content.vb: Public Function GetCredential(uri As Uri, authType As String) As NetworkCredential\n    parameters:\n    - id: uri\n      type: System.Uri\n      description: \"\\n<p>The URI that the client provides authentication for. </p>\\n\"\n    - id: authType\n      type: System.String\n      description: \"\\n<p>The type of authentication requested, as defined in the <xref href=\\\"System.Net.IAuthenticationModule.AuthenticationType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. </p>\\n\"\n    return:\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: NetworkCredential.GetCredential(Uri, String)\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.ICredentials\n  parent: System.Net\n  isExternal: false\n  name: ICredentials\n  fullName: System.Net.ICredentials\n  commentId: T:System.Net.ICredentials\n  nameWithType: ICredentials\n- uid: System.Net.ICredentialsByHost\n  parent: System.Net\n  isExternal: false\n  name: ICredentialsByHost\n  fullName: System.Net.ICredentialsByHost\n  commentId: T:System.Net.ICredentialsByHost\n  nameWithType: ICredentialsByHost\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  parent: System.Net.ICredentialsByHost\n  isExternal: true\n  name: GetCredential(String, Int32, String)\n  fullName: System.Net.ICredentialsByHost.GetCredential(System.String, System.Int32, System.String)\n  spec.csharp:\n  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentialsByHost.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentialsByHost.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  nameWithType: ICredentialsByHost.GetCredential(String, Int32, String)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net.NetworkCredential\n  parent: System.Net\n  isExternal: false\n  name: NetworkCredential\n  fullName: System.Net.NetworkCredential\n  commentId: T:System.Net.NetworkCredential\n  nameWithType: NetworkCredential\n- uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  parent: System.Net.ICredentials\n  isExternal: true\n  name: GetCredential(Uri, String)\n  fullName: System.Net.ICredentials.GetCredential(System.Uri, System.String)\n  spec.csharp:\n  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentials.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.Uri\n    name: Uri\n    fullName: System.Uri\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentials.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.Uri\n    name: Uri\n    fullName: System.Uri\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  nameWithType: ICredentials.GetCredential(Uri, String)\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  fullName: System.Uri\n  commentId: T:System.Uri\n  nameWithType: Uri\n"}