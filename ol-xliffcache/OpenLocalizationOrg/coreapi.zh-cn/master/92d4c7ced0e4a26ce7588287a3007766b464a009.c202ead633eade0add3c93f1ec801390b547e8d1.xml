{"nodes":[{"pos":[1880,1892],"content":"DbDataRecord","needQuote":true,"nodes":[{"content":"DbDataRecord","pos":[0,12]}]},{"pos":[3519,3533],"content":"DbDataRecord()","needQuote":true,"nodes":[{"content":"DbDataRecord()","pos":[0,14]}]},{"pos":[4500,4510],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The number of fields within the current record.&lt;/p&gt;\\n","pos":[5252,5310],"source":"\\n<p>The number of fields within the current record.</p>\\n"},{"content":"\\n&lt;p&gt;Not connected to a data source to read from.","pos":[5429,5478],"source":"\\n<p>Not connected to a data source to read from."},{"content":"&lt;/p&gt;\\n","pos":[5479,5485],"source":" </p>\\n"},{"pos":[5915,5926],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[6713,6737],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[6738,6744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value at the specified column in its native format.&lt;/p&gt;\\n","pos":[6804,6870],"source":"\\n<p>The value at the specified column in its native format.</p>\\n"},{"pos":[7445,7457],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The column name.","pos":[8254,8275],"source":"\\n<p>The column name."},{"content":"&lt;/p&gt;\\n","pos":[8276,8282],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value at the specified column in its native format.&lt;/p&gt;\\n","pos":[8342,8408],"source":"\\n<p>The value at the specified column in its native format.</p>\\n"},{"pos":[9003,9020],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[9745,9769],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[9770,9776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the Boolean is &lt;strong&gt;true&lt;/strong&gt;; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9837,9946],"source":"\\n<p>\\n<strong>true</strong> if the Boolean is <strong>true</strong>; otherwise <strong>false</strong>.</p>\\n"},{"pos":[10385,10399],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[11106,11130],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[11131,11137],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[11195,11240],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[11835,11879],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[12793,12834],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"content":"\\n&lt;p&gt;The index within the field from which to start the read operation.&lt;/p&gt;\\n","pos":[12901,12978],"source":"\\n<p>The index within the field from which to start the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to read the stream of bytes.&lt;/p&gt;\\n","pos":[13043,13104],"source":"\\n<p>The buffer into which to read the stream of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The index for &lt;em&gt;buffer&lt;/em&gt; to start the read operation.&lt;/p&gt;\\n","pos":[13173,13242],"source":"\\n<p>The index for <em>buffer</em> to start the read operation.</p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to read.&lt;/p&gt;\\n","pos":[13306,13345],"source":"\\n<p>The number of bytes to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[13404,13449],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[14226,14240],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[14952,14976],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[14977,14983],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[15041,15086],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[15681,15725],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;Column ordinal.","pos":[16644,16664],"source":"\\n<p>Column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[16665,16671],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Buffer to copy data into.","pos":[16738,16768],"source":"\\n<p>Buffer to copy data into."},{"content":"&lt;/p&gt;\\n","pos":[16769,16775],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Maximum length to copy into the buffer.","pos":[16840,16884],"source":"\\n<p>Maximum length to copy into the buffer."},{"content":"&lt;/p&gt;\\n","pos":[16885,16891],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Point to start from within the buffer.","pos":[16960,17003],"source":"\\n<p>Point to start from within the buffer."},{"content":"&lt;/p&gt;\\n","pos":[17004,17010],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Point to start from within the source data.","pos":[17074,17122],"source":"\\n<p>Point to start from within the source data."},{"content":"&lt;/p&gt;\\n","pos":[17123,17129],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[17188,17233],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[18010,18024],"content":"GetData(Int32)","needQuote":true,"nodes":[{"content":"GetData(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;Not currently supported.&lt;/p&gt;\\n","pos":[18695,18730],"source":"\\n<p>Not currently supported.</p>\\n"},{"content":"\\n&lt;p&gt;Not currently supported.&lt;/p&gt;\\n","pos":[18800,18835],"source":"\\n<p>Not currently supported.</p>\\n"},{"pos":[19262,19284],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[20018,20042],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[20043,20049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the back-end data type.&lt;/p&gt;\\n","pos":[20109,20155],"source":"\\n<p>The name of the back-end data type.</p>\\n"},{"pos":[20616,20634],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[21439,21463],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[21464,21470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[21532,21577],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[22042,22064],"content":"GetDbDataReader(Int32)","needQuote":true,"nodes":[{"content":"GetDbDataReader(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.&lt;/p&gt;\\n","pos":[22976,23017],"source":"\\n<p>The zero-based column ordinal.</p>\\n"},{"pos":[23597,23614],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[24416,24440],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[24441,24447],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[24508,24553],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[24998,25014],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[25767,25791],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[25792,25798],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[25858,25903],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[26355,26374],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[27169,27193],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[27194,27200],"source":" </p>\\n"},{"pos":[27827,27842],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[28590,28614],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[28615,28621],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[28681,28726],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[29161,29175],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The index of the field to return.","pos":[29876,29914],"source":"\\n<p>The index of the field to return."},{"content":"&lt;/p&gt;\\n","pos":[29915,29921],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The GUID value of the specified field.&lt;/p&gt;\\n","pos":[29979,30028],"source":"\\n<p>The GUID value of the specified field.</p>\\n"},{"pos":[30748,30763],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[31493,31517],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[31518,31524],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[31583,31628],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[32066,32081],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[32811,32835],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[32836,32842],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[32901,32946],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[33384,33399],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[34127,34151],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[34152,34158],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[34217,34262],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[34697,34711],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[35411,35435],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[35436,35442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the specified column.&lt;/p&gt;\\n","pos":[35502,35546],"source":"\\n<p>The name of the specified column.</p>\\n"},{"pos":[35991,36009],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name of the column.","pos":[36748,36776],"source":"\\n<p>The name of the column."},{"content":"&lt;/p&gt;\\n","pos":[36777,36783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The column ordinal.&lt;/p&gt;\\n","pos":[36842,36872],"source":"\\n<p>The column ordinal.</p>\\n"},{"pos":[37319,37335],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[38056,38080],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[38081,38087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the specified column.&lt;/p&gt;\\n","pos":[38147,38192],"source":"\\n<p>The value of the specified column.</p>\\n"},{"pos":[38632,38647],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[39373,39397],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[39398,39404],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to return.&lt;/p&gt;\\n","pos":[39464,39495],"source":"\\n<p>The value to return.</p>\\n"},{"pos":[39945,39964],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[41650,41665],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The column ordinal.","pos":[42363,42387],"source":"\\n<p>The column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[42388,42394],"source":" </p>\\n"},{"pos":[42905,42923],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[43090,43096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43256,43267],"content":"IDataRecord","needQuote":true,"nodes":[{"content":"IDataRecord","pos":[0,11]}]},{"pos":[43452,43462],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[43557,43565],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43634,43635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43662,43663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43733,43741],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[43810,43811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43838,43839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44022,44036],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[44155,44161],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44228,44229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44279,44285],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44345,44346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44429,44435],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44502,44503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44553,44559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44619,44620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44834,44856],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[45004,45010],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45077,45078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45128,45134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45195,45196]},{"pos":[45251,45257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45317,45318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45415,45421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45488,45489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45539,45545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45606,45607]},{"pos":[45662,45668],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45728,45729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45974,46005],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[46171,46186],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[46262,46263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46313,46319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46380,46381]},{"pos":[46436,46442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46502,46503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46609,46624],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[46700,46701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46751,46757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46818,46819]},{"pos":[46874,46880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46940,46941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47171,47184],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[47285,47296],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[47368,47369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47396,47397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47470,47481],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[47553,47554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47581,47582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47757,47766],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[47859,47866],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47934,47935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47962,47963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48032,48039],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[48107,48108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48135,48136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48311,48328],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[48437,48452],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48528,48529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48556,48557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48634,48649],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48725,48726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48753,48754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48899,48905],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[49017,49028],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[49212,49222],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"pos":[49424,49429],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[49616,49627],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[49841,49845],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[49900,49901]},{"pos":[49953,49958],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[50018,50019]},{"pos":[50112,50116],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[50170,50171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50220,50225],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[50284,50285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50555,50567],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"pos":[50785,50789],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[50844,50845]},{"pos":[50898,50904],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"]","pos":[50965,50966]},{"pos":[51060,51064],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[51118,51119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51169,51175],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[51235,51236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51463,51469],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[51665,51682],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"pos":[51827,51837],"content":"GetBoolean","needQuote":true,"nodes":[{"content":"GetBoolean","pos":[0,10]}]},{"pos":[51897,51898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51947,51952],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52011,52012],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52108,52118],"content":"GetBoolean","needQuote":true,"nodes":[{"content":"GetBoolean","pos":[0,10]}]},{"pos":[52178,52179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52228,52233],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52292,52293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52487,52494],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52690,52704],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"pos":[52843,52850],"content":"GetByte","needQuote":true,"nodes":[{"content":"GetByte","pos":[0,7]}]},{"pos":[52907,52908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52957,52962],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[53021,53022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53115,53122],"content":"GetByte","needQuote":true,"nodes":[{"content":"GetByte","pos":[0,7]}]},{"pos":[53179,53180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53229,53234],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[53293,53294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53479,53483],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[53724,53768],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"pos":[54194,54202],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[54260,54261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54310,54315],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[54375,54376]},{"pos":[54430,54435],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[54495,54496]},{"pos":[54549,54553],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[54612,54614]},{"content":",","pos":[54646,54647]},{"pos":[54701,54706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[54766,54767]},{"pos":[54821,54826],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[54885,54886],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55033,55041],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[55099,55100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55149,55154],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[55214,55215]},{"pos":[55269,55274],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[55334,55335]},{"pos":[55388,55392],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[55450,55452],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[55481,55482]},{"pos":[55536,55541],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[55601,55602]},{"pos":[55656,55661],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[55720,55721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56067,56072],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[56177,56183],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[56303,56307],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[56366,56368]},{"pos":[56431,56435],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[56493,56495],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[56676,56690],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"pos":[56829,56836],"content":"GetChar","needQuote":true,"nodes":[{"content":"GetChar","pos":[0,7]}]},{"pos":[56893,56894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56943,56948],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57007,57008],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57101,57108],"content":"GetChar","needQuote":true,"nodes":[{"content":"GetChar","pos":[0,7]}]},{"pos":[57165,57166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57215,57220],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[57279,57280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57465,57469],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[57710,57754],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"pos":[58180,58188],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[58246,58247],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58296,58301],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[58361,58362]},{"pos":[58416,58421],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[58481,58482]},{"pos":[58535,58539],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[58598,58600]},{"content":",","pos":[58632,58633]},{"pos":[58687,58692],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[58752,58753]},{"pos":[58807,58812],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[58871,58872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59019,59027],"content":"GetChars","needQuote":true,"nodes":[{"content":"GetChars","pos":[0,8]}]},{"pos":[59085,59086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59135,59140],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[59200,59201]},{"pos":[59255,59260],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":",","pos":[59320,59321]},{"pos":[59374,59378],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[59436,59438],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[59467,59468]},{"pos":[59522,59527],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[59587,59588]},{"pos":[59642,59647],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[59706,59707],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60017,60023],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[60143,60147],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[60206,60208]},{"pos":[60271,60275],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[60333,60335],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[60516,60530],"content":"GetData(Int32)","needQuote":true,"nodes":[{"content":"GetData(Int32)","pos":[0,14]}]},{"pos":[60669,60676],"content":"GetData","needQuote":true,"nodes":[{"content":"GetData","pos":[0,7]}]},{"pos":[60733,60734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60783,60788],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60847,60848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60941,60948],"content":"GetData","needQuote":true,"nodes":[{"content":"GetData","pos":[0,7]}]},{"pos":[61005,61006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61055,61060],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61119,61120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61322,61333],"content":"IDataReader","needQuote":true,"nodes":[{"content":"IDataReader","pos":[0,11]}]},{"pos":[61559,61581],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"pos":[61736,61751],"content":"GetDataTypeName","needQuote":true,"nodes":[{"content":"GetDataTypeName","pos":[0,15]}]},{"pos":[61816,61817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61866,61871],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61930,61931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62032,62047],"content":"GetDataTypeName","needQuote":true,"nodes":[{"content":"GetDataTypeName","pos":[0,15]}]},{"pos":[62112,62113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62162,62167],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62226,62227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62482,62500],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"pos":[62647,62658],"content":"GetDateTime","needQuote":true,"nodes":[{"content":"GetDateTime","pos":[0,11]}]},{"pos":[62719,62720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62769,62774],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62833,62834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62931,62942],"content":"GetDateTime","needQuote":true,"nodes":[{"content":"GetDateTime","pos":[0,11]}]},{"pos":[63003,63004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63053,63058],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[63117,63118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63315,63323],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[63504,63516],"content":"DbDataReader","needQuote":true,"nodes":[{"content":"DbDataReader","pos":[0,12]}]},{"pos":[63754,63771],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"pos":[63916,63926],"content":"GetDecimal","needQuote":true,"nodes":[{"content":"GetDecimal","pos":[0,10]}]},{"pos":[63986,63987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64036,64041],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64100,64101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64197,64207],"content":"GetDecimal","needQuote":true,"nodes":[{"content":"GetDecimal","pos":[0,10]}]},{"pos":[64267,64268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64317,64322],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[64381,64382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64576,64583],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[64781,64797],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"pos":[64940,64949],"content":"GetDouble","needQuote":true,"nodes":[{"content":"GetDouble","pos":[0,9]}]},{"pos":[65008,65009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65058,65063],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65122,65123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65218,65227],"content":"GetDouble","needQuote":true,"nodes":[{"content":"GetDouble","pos":[0,9]}]},{"pos":[65286,65287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65336,65341],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[65400,65401],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65592,65598],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[65796,65815],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"pos":[65964,65976],"content":"GetFieldType","needQuote":true,"nodes":[{"content":"GetFieldType","pos":[0,12]}]},{"pos":[66038,66039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66088,66093],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66152,66153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66251,66263],"content":"GetFieldType","needQuote":true,"nodes":[{"content":"GetFieldType","pos":[0,12]}]},{"pos":[66325,66326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66375,66380],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66439,66440],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66635,66639],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[66827,66842],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"pos":[66983,66991],"content":"GetFloat","needQuote":true,"nodes":[{"content":"GetFloat","pos":[0,8]}]},{"pos":[67049,67050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67099,67104],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67163,67164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67258,67266],"content":"GetFloat","needQuote":true,"nodes":[{"content":"GetFloat","pos":[0,8]}]},{"pos":[67324,67325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67374,67379],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67438,67439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67628,67634],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[67827,67841],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"pos":[67980,67987],"content":"GetGuid","needQuote":true,"nodes":[{"content":"GetGuid","pos":[0,7]}]},{"pos":[68044,68045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68094,68099],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68158,68159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68252,68259],"content":"GetGuid","needQuote":true,"nodes":[{"content":"GetGuid","pos":[0,7]}]},{"pos":[68316,68317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68366,68371],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68430,68431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68616,68620],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[68808,68823],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"pos":[68964,68972],"content":"GetInt16","needQuote":true,"nodes":[{"content":"GetInt16","pos":[0,8]}]},{"pos":[69030,69031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69080,69085],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69144,69145],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69239,69247],"content":"GetInt16","needQuote":true,"nodes":[{"content":"GetInt16","pos":[0,8]}]},{"pos":[69305,69306],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69355,69360],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69419,69420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69608,69613],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[69804,69819],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"pos":[69960,69968],"content":"GetInt32","needQuote":true,"nodes":[{"content":"GetInt32","pos":[0,8]}]},{"pos":[70026,70027],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70076,70081],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70140,70141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70235,70243],"content":"GetInt32","needQuote":true,"nodes":[{"content":"GetInt32","pos":[0,8]}]},{"pos":[70301,70302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70351,70356],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70415,70416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70654,70669],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"pos":[70810,70818],"content":"GetInt64","needQuote":true,"nodes":[{"content":"GetInt64","pos":[0,8]}]},{"pos":[70876,70877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70926,70931],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70990,70991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71085,71093],"content":"GetInt64","needQuote":true,"nodes":[{"content":"GetInt64","pos":[0,8]}]},{"pos":[71151,71152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71201,71206],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71265,71266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71503,71517],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"pos":[71656,71663],"content":"GetName","needQuote":true,"nodes":[{"content":"GetName","pos":[0,7]}]},{"pos":[71720,71721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71770,71775],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71834,71835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71928,71935],"content":"GetName","needQuote":true,"nodes":[{"content":"GetName","pos":[0,7]}]},{"pos":[71992,71993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72042,72047],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72106,72107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72346,72364],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"pos":[72511,72521],"content":"GetOrdinal","needQuote":true,"nodes":[{"content":"GetOrdinal","pos":[0,10]}]},{"pos":[72581,72582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72632,72638],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72698,72699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72796,72806],"content":"GetOrdinal","needQuote":true,"nodes":[{"content":"GetOrdinal","pos":[0,10]}]},{"pos":[72866,72867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72917,72923],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72983,72984],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73229,73245],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"pos":[73388,73397],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[73456,73457],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73506,73511],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73570,73571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73666,73675],"content":"GetString","needQuote":true,"nodes":[{"content":"GetString","pos":[0,9]}]},{"pos":[73734,73735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73784,73789],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[73848,73849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74089,74104],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"pos":[74245,74253],"content":"GetValue","needQuote":true,"nodes":[{"content":"GetValue","pos":[0,8]}]},{"pos":[74311,74312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74361,74366],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74425,74426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74520,74528],"content":"GetValue","needQuote":true,"nodes":[{"content":"GetValue","pos":[0,8]}]},{"pos":[74586,74587],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74636,74641],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74700,74701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74943,74962],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[75208,75217],"content":"GetValues","needQuote":true,"nodes":[{"content":"GetValues","pos":[0,9]}]},{"pos":[75276,75277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75327,75333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[75394,75396]},{"pos":[75427,75428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75526,75535],"content":"GetValues","needQuote":true,"nodes":[{"content":"GetValues","pos":[0,9]}]},{"pos":[75594,75595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75645,75651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75711,75713],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[75741,75742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75955,75963],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[76091,76097],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[76158,76160]},{"pos":[76225,76231],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76291,76293],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[76479,76494],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"pos":[76635,76643],"content":"IsDBNull","needQuote":true,"nodes":[{"content":"IsDBNull","pos":[0,8]}]},{"pos":[76701,76702],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76751,76756],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76815,76816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76910,76918],"content":"IsDBNull","needQuote":true,"nodes":[{"content":"IsDBNull","pos":[0,8]}]},{"pos":[76976,76977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77026,77031],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77090,77091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77295,77316],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[77507,77531],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.Data.Common.DbDataRecord\n  commentId: T:System.Data.Common.DbDataRecord\n  id: DbDataRecord\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbDataRecord.#ctor\n  - System.Data.Common.DbDataRecord.FieldCount\n  - System.Data.Common.DbDataRecord.GetBoolean(System.Int32)\n  - System.Data.Common.DbDataRecord.GetByte(System.Int32)\n  - System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  - System.Data.Common.DbDataRecord.GetChar(System.Int32)\n  - System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  - System.Data.Common.DbDataRecord.GetData(System.Int32)\n  - System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)\n  - System.Data.Common.DbDataRecord.GetDateTime(System.Int32)\n  - System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)\n  - System.Data.Common.DbDataRecord.GetDecimal(System.Int32)\n  - System.Data.Common.DbDataRecord.GetDouble(System.Int32)\n  - System.Data.Common.DbDataRecord.GetFieldType(System.Int32)\n  - System.Data.Common.DbDataRecord.GetFloat(System.Int32)\n  - System.Data.Common.DbDataRecord.GetGuid(System.Int32)\n  - System.Data.Common.DbDataRecord.GetInt16(System.Int32)\n  - System.Data.Common.DbDataRecord.GetInt32(System.Int32)\n  - System.Data.Common.DbDataRecord.GetInt64(System.Int32)\n  - System.Data.Common.DbDataRecord.GetName(System.Int32)\n  - System.Data.Common.DbDataRecord.GetOrdinal(System.String)\n  - System.Data.Common.DbDataRecord.GetString(System.Int32)\n  - System.Data.Common.DbDataRecord.GetValue(System.Int32)\n  - System.Data.Common.DbDataRecord.GetValues(System.Object[])\n  - System.Data.Common.DbDataRecord.IsDBNull(System.Int32)\n  - System.Data.Common.DbDataRecord.Item(System.Int32)\n  - System.Data.Common.DbDataRecord.Item(System.String)\n  langs:\n  - csharp\n  - vb\n  name: DbDataRecord\n  fullName: System.Data.Common.DbDataRecord\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbDataRecord\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 7\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Implements <xref href=\\\"System.Data.IDataRecord\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.ComponentModel.ICustomTypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and provides data binding support for <xref href=\\\"System.Data.Common.DbEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: 'public abstract class DbDataRecord : IDataRecord'\n    content.vb: >-\n      Public MustInherit Class DbDataRecord\n          Implements IDataRecord\n  inheritance:\n  - System.Object\n  implements:\n  - System.Data.IDataRecord\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DbDataRecord\n- uid: System.Data.Common.DbDataRecord.#ctor\n  commentId: M:System.Data.Common.DbDataRecord.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: DbDataRecord()\n  fullName: System.Data.Common.DbDataRecord.DbDataRecord()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 9\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.Common.DbDataRecord\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected DbDataRecord()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DbDataRecord.DbDataRecord()\n- uid: System.Data.Common.DbDataRecord.FieldCount\n  commentId: P:System.Data.Common.DbDataRecord.FieldCount\n  id: FieldCount\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: FieldCount\n  fullName: System.Data.Common.DbDataRecord.FieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FieldCount\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 13\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates the number of fields within the current record. This property is read-only.</p>\\n\"\n  syntax:\n    content: public abstract int FieldCount { get; }\n    content.vb: Public MustOverride ReadOnly Property FieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of fields within the current record.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Not connected to a data source to read from. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.FieldCount\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DbDataRecord.FieldCount\n- uid: System.Data.Common.DbDataRecord.Item(System.Int32)\n  commentId: P:System.Data.Common.DbDataRecord.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.Common.DbDataRecord.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 18\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates the value at the specified column in its native format given the column ordinal. This property is read-only.</p>\\n\"\n  syntax:\n    content: public abstract object this[int i] { get; }\n    content.vb: Public MustOverride ReadOnly Property Item(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value at the specified column in its native format.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  fullName.vb: System.Data.Common.DbDataRecord.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: DbDataRecord.Item[Int32]\n  nameWithType.vb: DbDataRecord.Item(Int32)\n- uid: System.Data.Common.DbDataRecord.Item(System.String)\n  commentId: P:System.Data.Common.DbDataRecord.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.Common.DbDataRecord.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 23\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates the value at the specified column in its native format given the column name. This property is read-only.</p>\\n\"\n  syntax:\n    content: public abstract object this[string name] { get; }\n    content.vb: Public MustOverride ReadOnly Property Item(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The column name. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value at the specified column in its native format.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.Item(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  fullName.vb: System.Data.Common.DbDataRecord.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: DbDataRecord.Item[String]\n  nameWithType.vb: DbDataRecord.Item(String)\n- uid: System.Data.Common.DbDataRecord.GetBoolean(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)\n  id: GetBoolean(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetBoolean(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBoolean\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 28\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a Boolean.</p>\\n\"\n  syntax:\n    content: public abstract bool GetBoolean(int i)\n    content.vb: Public MustOverride Function GetBoolean(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the Boolean is <strong>true</strong>; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetBoolean(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetBoolean(Int32)\n- uid: System.Data.Common.DbDataRecord.GetByte(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetByte(System.Int32)\n  id: GetByte(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetByte(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByte\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 30\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a byte.</p>\\n\"\n  syntax:\n    content: public abstract byte GetByte(int i)\n    content.vb: Public MustOverride Function GetByte(i As Integer) As Byte\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetByte(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetByte(Int32)\n- uid: System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.Common.DbDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBytes\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 32\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a byte array.</p>\\n\"\n  syntax:\n    content: public abstract long GetBytes(int i, long dataIndex, byte[] buffer, int bufferIndex, int length)\n    content.vb: Public MustOverride Function GetBytes(i As Integer, dataIndex As Long, buffer As Byte(), bufferIndex As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    - id: dataIndex\n      type: System.Int64\n      description: \"\\n<p>The index within the field from which to start the read operation.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer into which to read the stream of bytes.</p>\\n\"\n    - id: bufferIndex\n      type: System.Int32\n      description: \"\\n<p>The index for <em>buffer</em> to start the read operation.</p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to read.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  nameWithType: DbDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: DbDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n- uid: System.Data.Common.DbDataRecord.GetChar(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetChar(System.Int32)\n  id: GetChar(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetChar(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetChar(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChar\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 34\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a character.</p>\\n\"\n  syntax:\n    content: public abstract char GetChar(int i)\n    content.vb: Public MustOverride Function GetChar(i As Integer) As Char\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetChar(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetChar(Int32)\n- uid: System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.Common.DbDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChars\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 36\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a character array.</p>\\n\"\n  syntax:\n    content: public abstract long GetChars(int i, long dataIndex, char[] buffer, int bufferIndex, int length)\n    content.vb: Public MustOverride Function GetChars(i As Integer, dataIndex As Long, buffer As Char(), bufferIndex As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>Column ordinal. </p>\\n\"\n    - id: dataIndex\n      type: System.Int64\n      description: \"\\n<p>Buffer to copy data into. </p>\\n\"\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>Maximum length to copy into the buffer. </p>\\n\"\n    - id: bufferIndex\n      type: System.Int32\n      description: \"\\n<p>Point to start from within the buffer. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>Point to start from within the source data. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  nameWithType: DbDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: DbDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)\n- uid: System.Data.Common.DbDataRecord.GetData(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetData(System.Int32)\n  id: GetData(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetData(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetData(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetData\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 79\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Not currently supported.</p>\\n\"\n  syntax:\n    content: public IDataReader GetData(int i)\n    content.vb: Public Function GetData(i As Integer) As IDataReader\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>Not currently supported.</p>\\n\"\n    return:\n      type: System.Data.IDataReader\n      description: \"\\n<p>Not currently supported.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetData(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbDataRecord.GetData(Int32)\n- uid: System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)\n  id: GetDataTypeName(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDataTypeName\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 47\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the name of the back-end data type.</p>\\n\"\n  syntax:\n    content: public abstract string GetDataTypeName(int i)\n    content.vb: Public MustOverride Function GetDataTypeName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the back-end data type.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetDataTypeName(Int32)\n- uid: System.Data.Common.DbDataRecord.GetDateTime(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)\n  id: GetDateTime(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDateTime(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetDateTime(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDateTime\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 49\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract DateTime GetDateTime(int i)\n    content.vb: Public MustOverride Function GetDateTime(i As Integer) As Date\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDateTime(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetDateTime(Int32)\n- uid: System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)\n  id: GetDbDataReader(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDbDataReader(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDbDataReader\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 39\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the requested column ordinal that can be overridden with a provider-specific implementation.</p>\\n\"\n  syntax:\n    content: protected virtual DbDataReader GetDbDataReader(int i)\n    content.vb: Protected Overridable Function GetDbDataReader(i As Integer) As DbDataReader\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal.</p>\\n\"\n    return:\n      type: System.Data.Common.DbDataReader\n      description: \"\\n<p>A <xref href=\\\"System.Data.Common.DbDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DbDataRecord.GetDbDataReader(Int32)\n- uid: System.Data.Common.DbDataRecord.GetDecimal(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)\n  id: GetDecimal(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDecimal(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDecimal\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 51\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract decimal GetDecimal(int i)\n    content.vb: Public MustOverride Function GetDecimal(i As Integer) As Decimal\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDecimal(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetDecimal(Int32)\n- uid: System.Data.Common.DbDataRecord.GetDouble(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)\n  id: GetDouble(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDouble(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDouble\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 53\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public abstract double GetDouble(int i)\n    content.vb: Public MustOverride Function GetDouble(i As Integer) As Double\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetDouble(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetDouble(Int32)\n- uid: System.Data.Common.DbDataRecord.GetFieldType(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)\n  id: GetFieldType(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetFieldType(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldType\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 55\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the data type of the object.</p>\\n\"\n  syntax:\n    content: public abstract Type GetFieldType(int i)\n    content.vb: Public MustOverride Function GetFieldType(i As Integer) As Type\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the data type of the object.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetFieldType(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetFieldType(Int32)\n- uid: System.Data.Common.DbDataRecord.GetFloat(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)\n  id: GetFloat(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetFloat(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetFloat(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFloat\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 57\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public abstract float GetFloat(int i)\n    content.vb: Public MustOverride Function GetFloat(i As Integer) As Single\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetFloat(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetFloat(Int32)\n- uid: System.Data.Common.DbDataRecord.GetGuid(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)\n  id: GetGuid(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetGuid(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetGuid(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGuid\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 59\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the GUID value of the specified field.</p>\\n\"\n  syntax:\n    content: public abstract Guid GetGuid(int i)\n    content.vb: Public MustOverride Function GetGuid(i As Integer) As Guid\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to return. </p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>The GUID value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetGuid(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetGuid(Int32)\n- uid: System.Data.Common.DbDataRecord.GetInt16(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)\n  id: GetInt16(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt16(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt16\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 61\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract short GetInt16(int i)\n    content.vb: Public MustOverride Function GetInt16(i As Integer) As Short\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt16(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetInt16(Int32)\n- uid: System.Data.Common.DbDataRecord.GetInt32(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)\n  id: GetInt32(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt32(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt32\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 63\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract int GetInt32(int i)\n    content.vb: Public MustOverride Function GetInt32(i As Integer) As Integer\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt32(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetInt32(Int32)\n- uid: System.Data.Common.DbDataRecord.GetInt64(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)\n  id: GetInt64(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt64(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt64\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 65\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public abstract long GetInt64(int i)\n    content.vb: Public MustOverride Function GetInt64(i As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetInt64(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetInt64(Int32)\n- uid: System.Data.Common.DbDataRecord.GetName(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetName(System.Int32)\n  id: GetName(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetName(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetName\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 67\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the name of the specified column.</p>\\n\"\n  syntax:\n    content: public abstract string GetName(int i)\n    content.vb: Public MustOverride Function GetName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetName(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetName(Int32)\n- uid: System.Data.Common.DbDataRecord.GetOrdinal(System.String)\n  commentId: M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)\n  id: GetOrdinal(System.String)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetOrdinal(String)\n  fullName: System.Data.Common.DbDataRecord.GetOrdinal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOrdinal\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 69\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the column ordinal, given the name of the column.</p>\\n\"\n  syntax:\n    content: public abstract int GetOrdinal(string name)\n    content.vb: Public MustOverride Function GetOrdinal(name As String) As Integer\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the column. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The column ordinal.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetOrdinal(System.String)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetOrdinal(String)\n- uid: System.Data.Common.DbDataRecord.GetString(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetString(System.Int32)\n  id: GetString(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetString(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetString\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 71\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value of the specified column as a string.</p>\\n\"\n  syntax:\n    content: public abstract string GetString(int i)\n    content.vb: Public MustOverride Function GetString(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the specified column.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetString(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetString(Int32)\n- uid: System.Data.Common.DbDataRecord.GetValue(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32)\n  fullName: System.Data.Common.DbDataRecord.GetValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 73\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the value at the specified column in its native format.</p>\\n\"\n  syntax:\n    content: public abstract object GetValue(int i)\n    content.vb: Public MustOverride Function GetValue(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value to return.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetValue(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.GetValue(Int32)\n- uid: System.Data.Common.DbDataRecord.GetValues(System.Object[])\n  commentId: M:System.Data.Common.DbDataRecord.GetValues(System.Object[])\n  id: GetValues(System.Object[])\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Object[])\n  fullName: System.Data.Common.DbDataRecord.GetValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 75\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Populates an array of objects with the column values of the current record.</p>\\n\"\n  syntax:\n    content: public abstract int GetValues(object[] values)\n    content.vb: Public MustOverride Function GetValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy the attribute fields into. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of instances of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the array.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.GetValues(System.Object[])\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Data.Common.DbDataRecord.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  nameWithType: DbDataRecord.GetValues(Object[])\n  nameWithType.vb: DbDataRecord.GetValues(Object())\n- uid: System.Data.Common.DbDataRecord.IsDBNull(System.Int32)\n  commentId: M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)\n  id: IsDBNull(System.Int32)\n  parent: System.Data.Common.DbDataRecord\n  langs:\n  - csharp\n  - vb\n  name: IsDBNull(Int32)\n  fullName: System.Data.Common.DbDataRecord.IsDBNull(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNull\n    path: src/System.Data.Common/src/System/Data/Common/DbDataRecord.cs\n    startLine: 77\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Used to indicate nonexistent values.</p>\\n\"\n  syntax:\n    content: public abstract bool IsDBNull(int i)\n    content.vb: Public MustOverride Function IsDBNull(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The column ordinal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified column is equivalent to <xref href=\\\"System.DBNull\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Data.IDataRecord.IsDBNull(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DbDataRecord.IsDBNull(Int32)\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Data.IDataRecord\n  parent: System.Data\n  isExternal: false\n  name: IDataRecord\n  fullName: System.Data.IDataRecord\n  nameWithType: IDataRecord\n  commentId: T:System.Data.IDataRecord\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Data.IDataRecord.FieldCount\n  parent: System.Data.IDataRecord\n  isExternal: false\n  name: FieldCount\n  fullName: System.Data.IDataRecord.FieldCount\n  nameWithType: IDataRecord.FieldCount\n  commentId: P:System.Data.IDataRecord.FieldCount\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Data.IDataRecord.Item(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Data.IDataRecord.Item[System.Int32]\n  fullname.vb: System.Data.IDataRecord.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.Item(System.Int32)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Data.IDataRecord.Item(System.Int32)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.Item[Int32]\n  nameWithType.vb: IDataRecord.Item(Int32)\n  commentId: P:System.Data.IDataRecord.Item(System.Int32)\n- uid: System.Data.IDataRecord.Item(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: Item[String]\n  fullName: System.Data.IDataRecord.Item[System.String]\n  fullname.vb: System.Data.IDataRecord.Item(System.String)\n  name.vb: Item(String)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: '['\n    fullName: '['\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Data.IDataRecord.Item(System.String)\n    name: Item\n    fullName: System.Data.IDataRecord.Item\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.Item[String]\n  nameWithType.vb: IDataRecord.Item(String)\n  commentId: P:System.Data.IDataRecord.Item(System.String)\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetBoolean(Int32)\n  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n    name: GetBoolean\n    fullName: System.Data.IDataRecord.GetBoolean\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n    name: GetBoolean\n    fullName: System.Data.IDataRecord.GetBoolean\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetBoolean(Int32)\n  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Data.IDataRecord.GetByte(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetByte(Int32)\n  fullName: System.Data.IDataRecord.GetByte(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetByte(System.Int32)\n    name: GetByte\n    fullName: System.Data.IDataRecord.GetByte\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetByte(System.Int32)\n    name: GetByte\n    fullName: System.Data.IDataRecord.GetByte\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetByte(Int32)\n  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Data.IDataRecord.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n    name: GetBytes\n    fullName: System.Data.IDataRecord.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Data.IDataRecord.GetChar(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetChar(Int32)\n  fullName: System.Data.IDataRecord.GetChar(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetChar(System.Int32)\n    name: GetChar\n    fullName: System.Data.IDataRecord.GetChar\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetChar(System.Int32)\n    name: GetChar\n    fullName: System.Data.IDataRecord.GetChar\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetChar(Int32)\n  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  fullname.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Data.IDataRecord.GetChars\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n    name: GetChars\n    fullName: System.Data.IDataRecord.GetChars\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)\n  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Data.IDataRecord.GetData(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetData(Int32)\n  fullName: System.Data.IDataRecord.GetData(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetData(System.Int32)\n    name: GetData\n    fullName: System.Data.IDataRecord.GetData\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetData(System.Int32)\n    name: GetData\n    fullName: System.Data.IDataRecord.GetData\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetData(Int32)\n  commentId: M:System.Data.IDataRecord.GetData(System.Int32)\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  fullName: System.Data.IDataReader\n  nameWithType: IDataReader\n  commentId: T:System.Data.IDataReader\n- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n    name: GetDataTypeName\n    fullName: System.Data.IDataRecord.GetDataTypeName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n    name: GetDataTypeName\n    fullName: System.Data.IDataRecord.GetDataTypeName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDataTypeName(Int32)\n  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)\n- uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDateTime(Int32)\n  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n    name: GetDateTime\n    fullName: System.Data.IDataRecord.GetDateTime\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n    name: GetDateTime\n    fullName: System.Data.IDataRecord.GetDateTime\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDateTime(Int32)\n  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Data.Common.DbDataReader\n  parent: System.Data.Common\n  isExternal: false\n  name: DbDataReader\n  fullName: System.Data.Common.DbDataReader\n  nameWithType: DbDataReader\n  commentId: T:System.Data.Common.DbDataReader\n- uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDecimal(Int32)\n  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n    name: GetDecimal\n    fullName: System.Data.IDataRecord.GetDecimal\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n    name: GetDecimal\n    fullName: System.Data.IDataRecord.GetDecimal\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDecimal(Int32)\n  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Data.IDataRecord.GetDouble(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetDouble(Int32)\n  fullName: System.Data.IDataRecord.GetDouble(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetDouble(System.Int32)\n    name: GetDouble\n    fullName: System.Data.IDataRecord.GetDouble\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetDouble(System.Int32)\n    name: GetDouble\n    fullName: System.Data.IDataRecord.GetDouble\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetDouble(Int32)\n  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetFieldType(Int32)\n  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n    name: GetFieldType\n    fullName: System.Data.IDataRecord.GetFieldType\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n    name: GetFieldType\n    fullName: System.Data.IDataRecord.GetFieldType\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetFieldType(Int32)\n  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Data.IDataRecord.GetFloat(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetFloat(Int32)\n  fullName: System.Data.IDataRecord.GetFloat(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetFloat(System.Int32)\n    name: GetFloat\n    fullName: System.Data.IDataRecord.GetFloat\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetFloat(System.Int32)\n    name: GetFloat\n    fullName: System.Data.IDataRecord.GetFloat\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetFloat(Int32)\n  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Data.IDataRecord.GetGuid(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetGuid(Int32)\n  fullName: System.Data.IDataRecord.GetGuid(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetGuid(System.Int32)\n    name: GetGuid\n    fullName: System.Data.IDataRecord.GetGuid\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetGuid(System.Int32)\n    name: GetGuid\n    fullName: System.Data.IDataRecord.GetGuid\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetGuid(Int32)\n  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Data.IDataRecord.GetInt16(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt16(Int32)\n  fullName: System.Data.IDataRecord.GetInt16(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt16(System.Int32)\n    name: GetInt16\n    fullName: System.Data.IDataRecord.GetInt16\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt16(System.Int32)\n    name: GetInt16\n    fullName: System.Data.IDataRecord.GetInt16\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt16(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Data.IDataRecord.GetInt32(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt32(Int32)\n  fullName: System.Data.IDataRecord.GetInt32(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt32(System.Int32)\n    name: GetInt32\n    fullName: System.Data.IDataRecord.GetInt32\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt32(System.Int32)\n    name: GetInt32\n    fullName: System.Data.IDataRecord.GetInt32\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt32(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)\n- uid: System.Data.IDataRecord.GetInt64(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetInt64(Int32)\n  fullName: System.Data.IDataRecord.GetInt64(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetInt64(System.Int32)\n    name: GetInt64\n    fullName: System.Data.IDataRecord.GetInt64\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetInt64(System.Int32)\n    name: GetInt64\n    fullName: System.Data.IDataRecord.GetInt64\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetInt64(Int32)\n  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)\n- uid: System.Data.IDataRecord.GetName(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetName(Int32)\n  fullName: System.Data.IDataRecord.GetName(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetName(System.Int32)\n    name: GetName\n    fullName: System.Data.IDataRecord.GetName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetName(System.Int32)\n    name: GetName\n    fullName: System.Data.IDataRecord.GetName\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetName(Int32)\n  commentId: M:System.Data.IDataRecord.GetName(System.Int32)\n- uid: System.Data.IDataRecord.GetOrdinal(System.String)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetOrdinal(String)\n  fullName: System.Data.IDataRecord.GetOrdinal(System.String)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetOrdinal(System.String)\n    name: GetOrdinal\n    fullName: System.Data.IDataRecord.GetOrdinal\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetOrdinal(System.String)\n    name: GetOrdinal\n    fullName: System.Data.IDataRecord.GetOrdinal\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetOrdinal(String)\n  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)\n- uid: System.Data.IDataRecord.GetString(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetString(Int32)\n  fullName: System.Data.IDataRecord.GetString(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetString(System.Int32)\n    name: GetString\n    fullName: System.Data.IDataRecord.GetString\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetString(System.Int32)\n    name: GetString\n    fullName: System.Data.IDataRecord.GetString\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetString(Int32)\n  commentId: M:System.Data.IDataRecord.GetString(System.Int32)\n- uid: System.Data.IDataRecord.GetValue(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetValue(Int32)\n  fullName: System.Data.IDataRecord.GetValue(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetValue(System.Int32)\n    name: GetValue\n    fullName: System.Data.IDataRecord.GetValue\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetValue(System.Int32)\n    name: GetValue\n    fullName: System.Data.IDataRecord.GetValue\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetValue(Int32)\n  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)\n- uid: System.Data.IDataRecord.GetValues(System.Object[])\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: GetValues(Object[])\n  fullName: System.Data.IDataRecord.GetValues(System.Object[])\n  fullname.vb: System.Data.IDataRecord.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  spec.csharp:\n  - uid: System.Data.IDataRecord.GetValues(System.Object[])\n    name: GetValues\n    fullName: System.Data.IDataRecord.GetValues\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.GetValues(System.Object[])\n    name: GetValues\n    fullName: System.Data.IDataRecord.GetValues\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.GetValues(Object[])\n  nameWithType.vb: IDataRecord.GetValues(Object())\n  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n  parent: System.Data.IDataRecord\n  isExternal: true\n  name: IsDBNull(Int32)\n  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)\n  spec.csharp:\n  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n    name: IsDBNull\n    fullName: System.Data.IDataRecord.IsDBNull\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n    name: IsDBNull\n    fullName: System.Data.IDataRecord.IsDBNull\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDataRecord.IsDBNull(Int32)\n  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}