{"nodes":[{"pos":[2097,2114],"content":"GregorianCalendar","needQuote":true,"nodes":[{"content":"GregorianCalendar","pos":[0,17]}]},{"pos":[5706,5725],"content":"GregorianCalendar()","needQuote":true,"nodes":[{"content":"GregorianCalendar()","pos":[0,19]}]},{"pos":[7122,7163],"content":"GregorianCalendar(GregorianCalendarTypes)","needQuote":true,"nodes":[{"content":"GregorianCalendar(GregorianCalendarTypes)","pos":[0,41]}]},{"pos":[9164,9176],"content":"CalendarType","needQuote":true,"nodes":[{"content":"CalendarType","pos":[0,12]}]},{"content":"\\n&lt;p&gt;In a set operation, the current instance is read-only.&lt;/p&gt;\\n","pos":[10896,10961],"source":"\\n<p>In a set operation, the current instance is read-only.</p>\\n"},{"pos":[11443,11447],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[13077,13097],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[14831,14851],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[16573,16588],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The last year of a 100-year range that can be represented by a 2-digit year.&lt;/p&gt;\\n","pos":[17364,17451],"source":"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n"},{"content":"\\n&lt;p&gt;The value specified in a set operation is less than 99.","pos":[17642,17702],"source":"\\n<p>The value specified in a set operation is less than 99."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The value specified in a set operation is greater than &lt;strong&gt;MaxSupportedDateTime.Year&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17703,17830],"source":" </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than <strong>MaxSupportedDateTime.Year</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;In a set operation, the current instance is read-only.&lt;/p&gt;\\n","pos":[17943,18008],"source":"\\n<p>In a set operation, the current instance is read-only.</p>\\n"},{"pos":[18647,18673],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of months to add.","pos":[19820,19853],"source":"\\n<p>The number of months to add."},{"content":"&lt;/p&gt;\\n","pos":[19854,19860],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is less than -120000.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is greater than 120000.","pos":[20607,20715],"source":"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000."},{"content":"&lt;/p&gt;\\n","pos":[20716,20722],"source":" </p>\\n"},{"pos":[22277,22302],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of years to add.","pos":[23440,23472],"source":"\\n<p>The number of years to add."},{"content":"&lt;/p&gt;\\n","pos":[23473,23479],"source":" </p>\\n"},{"pos":[25639,25662],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day of the month in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26655,26744],"source":"\\n<p>An integer from 1 to 31 that represents the day of the month in <em>time</em>.</p>\\n"},{"pos":[28376,28398],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[31252,31274],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer from 1 to 366 that represents the day of the year in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32262,32351],"source":"\\n<p>An integer from 1 to 366 that represents the day of the year in <em>time</em>.</p>\\n"},{"pos":[34070,34105],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[34988,35029],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[35030,35036],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[35099,35154],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[35155,35161],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[35222,35262],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[35263,35269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month in the specified year in the specified era.&lt;/p&gt;\\n","pos":[35328,35424],"source":"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.","pos":[35654,35894],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[35895,35901],"source":" </p>\\n"},{"pos":[37101,37128],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[37941,37982],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[37983,37989],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[38050,38090],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[38091,38097],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year in the specified era.&lt;/p&gt;\\n","pos":[38156,38229],"source":"\\n<p>The number of days in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n","pos":[38445,38604],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n"},{"pos":[39773,39789],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An integer that represents the era in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40741,40804],"source":"\\n<p>An integer that represents the era in <em>time</em>.</p>\\n"},{"pos":[43371,43397],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A year.&lt;/p&gt;\\n","pos":[44263,44281],"source":"\\n<p>A year.</p>\\n"},{"content":"\\n&lt;p&gt;Always 0 because the Gregorian calendar does not recognize leap months.&lt;/p&gt;\\n","pos":[44604,44686],"source":"\\n<p>Always 0 because the Gregorian calendar does not recognize leap months.</p>\\n"},{"pos":[45649,45667],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[46629,46707],"source":"\\n<p>An integer from 1 to 12 that represents the month in <em>time</em>.</p>\\n"},{"pos":[48954,48983],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[49806,49847],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[49848,49854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[49915,49955],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[49956,49962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of months in the specified year in the specified era.&lt;/p&gt;\\n","pos":[50021,50096],"source":"\\n<p>The number of months in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[50314,50467],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[50468,50474],"source":" </p>\\n"},{"pos":[51644,51661],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An integer that represents the year in &lt;em&gt;time&lt;/em&gt;.&lt;/p&gt;\\n","pos":[52618,52682],"source":"\\n<p>An integer that represents the year in <em>time</em>.</p>\\n"},{"pos":[54987,55024],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[55907,55948],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[55949,55955],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[56018,56073],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[56074,56080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[56141,56194],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[56195,56201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[56262,56302],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[56303,56309],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56370,56475],"source":"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[56713,56780],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.","pos":[56781,57039],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[57040,57046],"source":" </p>\\n"},{"pos":[58699,58731],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[59608,59649],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[59650,59656],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[59719,59774],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[59775,59781],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[59842,59882],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[59883,59889],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This method always returns &lt;strong&gt;false&lt;/strong&gt;, unless overridden by a derived class.&lt;/p&gt;\\n","pos":[59950,60049],"source":"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.","pos":[60276,60516],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[60517,60523],"source":" </p>\\n"},{"pos":[61936,61960],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[62766,62807],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[62808,62814],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[62875,62915],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[62916,62922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62983,63090],"source":"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[63303,63456],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[63457,63463],"source":" </p>\\n"},{"pos":[64939,65005],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[66156,66197],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[66198,66204],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[66267,66322],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[66323,66329],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[66390,66443],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[66444,66450],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour.","pos":[66512,66566],"source":"\\n<p>An integer from 0 to 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[66567,66573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minute.","pos":[66637,66693],"source":"\\n<p>An integer from 0 to 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[66694,66700],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the second.","pos":[66764,66820],"source":"\\n<p>An integer from 0 to 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[66821,66827],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 999 that represents the millisecond.","pos":[66896,66958],"source":"\\n<p>An integer from 0 to 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[66959,66965],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[67026,67066],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[67067,67073],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than zero or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than zero or greater than 999.","pos":[67579,68220],"source":"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999."},{"content":"&lt;/p&gt;\\n","pos":[68221,68227],"source":" </p>\\n"},{"pos":[69512,69534],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A two-digit or four-digit integer that represents the year to convert.","pos":[70469,70544],"source":"\\n<p>A two-digit or four-digit integer that represents the year to convert."},{"content":"&lt;/p&gt;\\n","pos":[70545,70551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that contains the four-digit representation of &lt;em&gt;year&lt;/em&gt;.&lt;/p&gt;\\n","pos":[70610,70693],"source":"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[70898,70966],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[70967,70973],"source":" </p>\\n"},{"pos":[71333,71353],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[71526,71532],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71707,71715],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[71897,71907],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[72113,72123],"content":"CurrentEra","needQuote":true,"nodes":[{"content":"CurrentEra","pos":[0,10]}]},{"pos":[72379,72386],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[72507,72512],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[72594,72595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72622,72623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72706,72711],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[72793,72794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72821,72822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73067,73085],"content":"ReadOnly(Calendar)","needQuote":true,"nodes":[{"content":"ReadOnly(Calendar)","pos":[0,18]}]},{"pos":[73272,73280],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[73365,73366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73432,73440],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[73516,73517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73634,73642],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[73727,73728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73794,73802],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[73878,73879],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74176,74209],"content":"AddMilliseconds(DateTime, Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(DateTime, Double)","pos":[0,33]}]},{"pos":[74411,74426],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[74518,74519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74571,74579],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[74642,74643]},{"pos":[74698,74704],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[74764,74765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74889,74904],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[74996,74997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75049,75057],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[75120,75121]},{"pos":[75176,75182],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[75242,75243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75553,75577],"content":"AddDays(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddDays(DateTime, Int32)","pos":[0,24]}]},{"pos":[75761,75768],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[75852,75853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75905,75913],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[75976,75977]},{"pos":[76031,76036],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76095,76096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76211,76218],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[76302,76303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76355,76363],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[76426,76427]},{"pos":[76481,76486],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76545,76546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76839,76864],"content":"AddHours(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddHours(DateTime, Int32)","pos":[0,25]}]},{"pos":[77050,77058],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[77143,77144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77196,77204],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[77267,77268]},{"pos":[77322,77327],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77386,77387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77503,77511],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[77596,77597],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77649,77657],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[77720,77721]},{"pos":[77775,77780],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77839,77840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78137,78164],"content":"AddMinutes(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMinutes(DateTime, Int32)","pos":[0,27]}]},{"pos":[78354,78364],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[78451,78452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78504,78512],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[78575,78576]},{"pos":[78630,78635],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78694,78695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78813,78823],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[78910,78911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78963,78971],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[79034,79035]},{"pos":[79089,79094],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79153,79154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79455,79482],"content":"AddSeconds(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddSeconds(DateTime, Int32)","pos":[0,27]}]},{"pos":[79672,79682],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[79769,79770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79822,79830],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[79893,79894]},{"pos":[79948,79953],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80012,80013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80131,80141],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[80228,80229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80281,80289],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[80352,80353]},{"pos":[80407,80412],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80471,80472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80771,80796],"content":"AddWeeks(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddWeeks(DateTime, Int32)","pos":[0,25]}]},{"pos":[80982,80990],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[81075,81076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81128,81136],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[81199,81200]},{"pos":[81254,81259],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81318,81319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81435,81443],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[81528,81529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81581,81589],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[81652,81653]},{"pos":[81707,81712],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81771,81772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82070,82098],"content":"GetDaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32)","pos":[0,28]}]},{"pos":[82290,82304],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[82395,82396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82445,82450],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[82510,82511]},{"pos":[82565,82570],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82629,82630],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82749,82763],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[82854,82855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82904,82909],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[82969,82970]},{"pos":[83024,83029],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83088,83089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83379,83399],"content":"GetDaysInYear(Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32)","pos":[0,20]}]},{"pos":[83562,83575],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[83665,83666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83715,83720],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[83779,83780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83885,83898],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[83988,83989],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84038,84043],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[84102,84103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84368,84385],"content":"GetHour(DateTime)","needQuote":true,"nodes":[{"content":"GetHour(DateTime)","pos":[0,17]}]},{"pos":[84542,84549],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[84633,84634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84686,84694],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[84756,84757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84859,84866],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[84950,84951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85003,85011],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[85073,85074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85341,85366],"content":"GetMilliseconds(DateTime)","needQuote":true,"nodes":[{"content":"GetMilliseconds(DateTime)","pos":[0,25]}]},{"pos":[85539,85554],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[85646,85647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85699,85707],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[85769,85770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85880,85895],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[85987,85988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86040,86048],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[86110,86111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86388,86407],"content":"GetMinute(DateTime)","needQuote":true,"nodes":[{"content":"GetMinute(DateTime)","pos":[0,19]}]},{"pos":[86568,86577],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[86663,86664],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86716,86724],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[86786,86787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86891,86900],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[86986,86987],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87039,87047],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[87109,87110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87378,87400],"content":"GetMonthsInYear(Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32)","pos":[0,22]}]},{"pos":[87567,87582],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[87674,87675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87724,87729],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87788,87789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87896,87911],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[88003,88004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88053,88058],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88117,88118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88389,88408],"content":"GetSecond(DateTime)","needQuote":true,"nodes":[{"content":"GetSecond(DateTime)","pos":[0,19]}]},{"pos":[88569,88578],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[88664,88665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88717,88725],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[88787,88788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88892,88901],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[88987,88988],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89040,89048],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[89110,89111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89435,89487],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"pos":[89768,89781],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[89871,89872],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89924,89932],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[89995,89996]},{"pos":[90075,90091],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[90176,90177]},{"pos":[90235,90244],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[90307,90308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90471,90484],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[90574,90575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90627,90635],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[90698,90699]},{"pos":[90778,90794],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[90879,90880]},{"pos":[90938,90947],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[91010,91011],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91391,91421],"content":"IsLeapDay(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32)","pos":[0,30]}]},{"pos":[91630,91639],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[91725,91726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91775,91780],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91840,91841]},{"pos":[91895,91900],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91960,91961]},{"pos":[92015,92020],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92079,92080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92207,92216],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[92302,92303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92352,92357],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[92417,92418]},{"pos":[92472,92477],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[92537,92538]},{"pos":[92592,92597],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92656,92657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92968,92993],"content":"IsLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32)","pos":[0,25]}]},{"pos":[93179,93190],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[93278,93279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93328,93333],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93393,93394]},{"pos":[93448,93453],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93512,93513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93629,93640],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[93728,93729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93778,93783],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93843,93844]},{"pos":[93898,93903],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93962,93963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94246,94265],"content":"GetLeapMonth(Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32)","pos":[0,19]}]},{"pos":[94426,94438],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[94527,94528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94577,94582],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94641,94642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94746,94758],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[94847,94848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94897,94902],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94961,94962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95225,95242],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"pos":[95399,95409],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[95496,95497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95546,95551],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95610,95611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95713,95723],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[95810,95811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95860,95865],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95924,95925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96262,96321],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,59]}]},{"pos":[96640,96650],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[96737,96738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96787,96792],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[96852,96853]},{"pos":[96907,96912],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[96972,96973]},{"pos":[97027,97032],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97092,97093]},{"pos":[97147,97152],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97212,97213]},{"pos":[97267,97272],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97332,97333]},{"pos":[97387,97392],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97452,97453]},{"pos":[97507,97512],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[97571,97572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97752,97762],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[97849,97850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97899,97904],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[97964,97965]},{"pos":[98019,98024],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98084,98085]},{"pos":[98139,98144],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98204,98205]},{"pos":[98259,98264],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98324,98325]},{"pos":[98379,98384],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98444,98445]},{"pos":[98499,98504],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[98564,98565]},{"pos":[98619,98624],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98683,98684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99052,99065],"content":"AlgorithmType","needQuote":true,"nodes":[{"content":"AlgorithmType","pos":[0,13]}]},{"pos":[99335,99345],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[99628,99660],"content":"DaysInYearBeforeMinSupportedYear","needQuote":true,"nodes":[{"content":"DaysInYearBeforeMinSupportedYear","pos":[0,32]}]},{"pos":[99953,99963],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[100058,100066],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[100135,100136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100163,100164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100234,100242],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[100311,100312],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100339,100340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100523,100537],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[100656,100662],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[100729,100730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100780,100786],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100846,100847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100930,100936],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101003,101004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101054,101060],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101120,101121],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101335,101357],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[101505,101511],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101578,101579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101629,101635],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[101696,101697]},{"pos":[101752,101758],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101818,101819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101916,101922],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[101989,101990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102040,102046],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102107,102108]},{"pos":[102163,102169],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102229,102230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102475,102506],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[102672,102687],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[102763,102764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102814,102820],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[102881,102882]},{"pos":[102937,102943],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103003,103004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103110,103125],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[103201,103202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103252,103258],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[103319,103320]},{"pos":[103375,103381],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[103441,103442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103672,103685],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[103786,103797],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[103869,103870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103897,103898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103971,103982],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[104054,104055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104082,104083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104258,104267],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[104360,104367],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[104435,104436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104463,104464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104533,104540],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[104608,104609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104636,104637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104812,104829],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[104938,104953],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[105029,105030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105057,105058],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105135,105150],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[105226,105227],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105254,105255],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105400,105406],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[105581,105603],"content":"GregorianCalendarTypes","needQuote":true,"nodes":[{"content":"GregorianCalendarTypes","pos":[0,22]}]},{"pos":[105867,105871],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[106029,106036],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[106160,106165],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[106225,106227]},{"pos":[106291,106296],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106355,106357],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[106551,106571],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[106815,106823],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[107033,107053],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[107349,107364],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"pos":[107590,107595],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[107815,107841],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"pos":[108029,108038],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[108124,108125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108177,108185],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[108248,108249]},{"pos":[108303,108308],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[108367,108368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108485,108494],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[108580,108581],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108633,108641],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[108704,108705]},{"pos":[108759,108764],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[108823,108824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109121,109146],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"pos":[109332,109340],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[109425,109426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109478,109486],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[109549,109550]},{"pos":[109604,109609],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[109668,109669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109785,109793],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[109878,109879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109931,109939],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[110002,110003]},{"pos":[110057,110062],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[110121,110122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110409,110432],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[110601,110614],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[110704,110705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110757,110765],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[110827,110828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110936,110949],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[111039,111040],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111092,111100],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[111162,111163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111439,111461],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[111628,111640],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[111729,111730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111782,111790],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[111852,111853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111960,111972],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[112061,112062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112114,112122],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[112184,112185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112394,112403],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[112625,112647],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[112814,112826],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[112915,112916],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112968,112976],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[113038,113039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113146,113158],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[113247,113248],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113300,113308],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[113370,113371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113670,113705],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"pos":[113924,113938],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[114029,114030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114079,114084],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114144,114145]},{"pos":[114199,114204],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114264,114265]},{"pos":[114319,114324],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114383,114384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114516,114530],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[114621,114622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114671,114676],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114736,114737]},{"pos":[114791,114796],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114856,114857]},{"pos":[114911,114916],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114975,114976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115299,115326],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"pos":[115516,115529],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[115619,115620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115669,115674],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[115734,115735]},{"pos":[115789,115794],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115853,115854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115972,115985],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[116075,116076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116125,116130],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116190,116191]},{"pos":[116245,116250],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116309,116310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116594,116610],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[116765,116771],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[116854,116855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116907,116915],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[116977,116978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117079,117085],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[117168,117169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117221,117229],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[117291,117292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117564,117590],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"pos":[117778,117790],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[117879,117880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117929,117934],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[117994,117995]},{"pos":[118049,118054],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118113,118114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118231,118243],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[118332,118333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118382,118387],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[118447,118448]},{"pos":[118502,118507],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118566,118567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118851,118869],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[119028,119036],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[119121,119122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119174,119182],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[119244,119245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119348,119356],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[119441,119442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119494,119502],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[119564,119565],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119844,119873],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"pos":[120067,120082],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[120174,120175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120224,120229],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120289,120290]},{"pos":[120344,120349],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120408,120409],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120529,120544],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[120636,120637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120686,120691],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120751,120752]},{"pos":[120806,120811],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[120870,120871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121160,121177],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[121334,121341],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[121425,121426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121478,121486],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[121548,121549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121651,121658],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[121742,121743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121795,121803],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[121865,121866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122163,122200],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"pos":[122436,122445],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[122531,122532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122581,122586],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122646,122647]},{"pos":[122701,122706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122766,122767]},{"pos":[122821,122826],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122886,122887]},{"pos":[122941,122946],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123005,123006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123146,123155],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[123241,123242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123291,123296],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123356,123357]},{"pos":[123411,123416],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123476,123477]},{"pos":[123531,123536],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123596,123597]},{"pos":[123651,123656],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123715,123716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123971,123978],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[124216,124248],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"pos":[124461,124472],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[124560,124561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124610,124615],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[124675,124676]},{"pos":[124730,124735],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[124795,124796]},{"pos":[124850,124855],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124914,124915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125044,125055],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[125143,125144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125193,125198],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125258,125259]},{"pos":[125313,125318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125378,125379]},{"pos":[125433,125438],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125497,125498],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125812,125836],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"pos":[126020,126030],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[126117,126118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126167,126172],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126232,126233]},{"pos":[126287,126292],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126351,126352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126467,126477],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[126564,126565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126614,126619],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126679,126680]},{"pos":[126734,126739],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[126798,126799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127169,127235],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"pos":[127581,127591],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[127678,127679],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127728,127733],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127793,127794]},{"pos":[127848,127853],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127913,127914]},{"pos":[127968,127973],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128033,128034]},{"pos":[128088,128093],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128153,128154]},{"pos":[128208,128213],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128273,128274]},{"pos":[128328,128333],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128393,128394]},{"pos":[128448,128453],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128513,128514]},{"pos":[128568,128573],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128632,128633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128826,128836],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[128923,128924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128973,128978],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129038,129039]},{"pos":[129093,129098],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129158,129159]},{"pos":[129213,129218],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129278,129279]},{"pos":[129333,129338],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129398,129399]},{"pos":[129453,129458],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129518,129519]},{"pos":[129573,129578],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129638,129639]},{"pos":[129693,129698],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[129758,129759]},{"pos":[129813,129818],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129877,129878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130282,130304],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"pos":[130471,130486],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[130578,130579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130628,130633],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[130692,130693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[130800,130815],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[130907,130908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[130957,130962],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[131021,131022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131232,131259],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[131486,131511],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[131724,131741],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Globalization.GregorianCalendar\n  commentId: T:System.Globalization.GregorianCalendar\n  id: GregorianCalendar\n  parent: System.Globalization\n  children:\n  - System.Globalization.GregorianCalendar.#ctor\n  - System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  - System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.GregorianCalendar.CalendarType\n  - System.Globalization.GregorianCalendar.Eras\n  - System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  - System.Globalization.GregorianCalendar.MinSupportedDateTime\n  - System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.GregorianCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  - vb\n  name: GregorianCalendar\n  fullName: System.Globalization.GregorianCalendar\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GregorianCalendar\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 24\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Represents the Gregorian calendar.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public class GregorianCalendar : Calendar, ICloneable\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Class GregorianCalendar\n          Inherits Calendar\n          Implements ICloneable\n  seealso:\n  - type: System.Globalization.Calendar\n    commentId: T:System.Globalization.Calendar\n  - type: System.Globalization.CultureInfo.Calendar\n    commentId: P:System.Globalization.CultureInfo.Calendar\n  - type: System.Globalization.CultureInfo.OptionalCalendars\n    commentId: P:System.Globalization.CultureInfo.OptionalCalendars\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.AlgorithmType\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: GregorianCalendar\n- uid: System.Globalization.GregorianCalendar.#ctor\n  commentId: M:System.Globalization.GregorianCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GregorianCalendar()\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 126\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the default <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public GregorianCalendar()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Globalization.GregorianCalendarTypes\n    commentId: T:System.Globalization.GregorianCalendarTypes\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GregorianCalendar.GregorianCalendar()\n- uid: System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  commentId: M:System.Globalization.GregorianCalendar.#ctor(System.Globalization.GregorianCalendarTypes)\n  id: '#ctor(System.Globalization.GregorianCalendarTypes)'\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GregorianCalendar(GregorianCalendarTypes)\n  fullName: System.Globalization.GregorianCalendar.GregorianCalendar(System.Globalization.GregorianCalendarTypes)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 131\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public GregorianCalendar(GregorianCalendarTypes type)\n    content.vb: Public Sub New(type As GregorianCalendarTypes)\n    parameters:\n    - id: type\n      type: System.Globalization.GregorianCalendarTypes\n      description: \"\\n<p>The <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that denotes which language version of the calendar to create. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>type</em> is not a member of the <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration.</p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendarTypes\n    commentId: T:System.Globalization.GregorianCalendarTypes\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GregorianCalendar.GregorianCalendar(GregorianCalendarTypes)\n- uid: System.Globalization.GregorianCalendar.CalendarType\n  commentId: P:System.Globalization.GregorianCalendar.CalendarType\n  id: CalendarType\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: CalendarType\n  fullName: System.Globalization.GregorianCalendar.CalendarType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CalendarType\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 142\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that denotes the language version of the current <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual GregorianCalendarTypes CalendarType { get; set; }\n    content.vb: Public Overridable Property CalendarType As GregorianCalendarTypes\n    parameters: []\n    return:\n      type: System.Globalization.GregorianCalendarTypes\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that denotes the language version of the current <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified in a set operation is not a member of the <xref href=\\\"System.Globalization.GregorianCalendarTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In a set operation, the current instance is read-only.</p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendarTypes\n    commentId: T:System.Globalization.GregorianCalendarTypes\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: GregorianCalendar.CalendarType\n- uid: System.Globalization.GregorianCalendar.Eras\n  commentId: P:System.Globalization.GregorianCalendar.Eras\n  id: Eras\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: Eras\n  fullName: System.Globalization.GregorianCalendar.Eras\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Eras\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 413\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the list of eras in the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int[] Eras { get; }\n    content.vb: Public Overrides ReadOnly Property Eras As Integer()\n    parameters: []\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers that represents the eras in the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.Eras\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: GregorianCalendar.Eras\n- uid: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MaxSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 88\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the latest date and time supported by the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MaxSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MaxSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The latest date and time supported by the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type, which is the last moment of December 31, 9999 C.E. and is equivalent to <xref href=\\\"System.DateTime.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.MaxSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: GregorianCalendar.MaxSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.MinSupportedDateTime\n  commentId: P:System.Globalization.GregorianCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: MinSupportedDateTime\n  fullName: System.Globalization.GregorianCalendar.MinSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 79\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the earliest date and time supported by the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MinSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MinSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The earliest date and time supported by the <xref href=\\\"System.Globalization.GregorianCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type, which is the first moment of January 1, 0001 C.E. and is equivalent to <xref href=\\\"System.DateTime.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.MinSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: GregorianCalendar.MinSupportedDateTime\n- uid: System.Globalization.GregorianCalendar.TwoDigitYearMax\n  commentId: P:System.Globalization.GregorianCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: TwoDigitYearMax\n  fullName: System.Globalization.GregorianCalendar.TwoDigitYearMax\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoDigitYearMax\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 583\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    content.vb: Public Overrides Property TwoDigitYearMax As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  overridden: System.Globalization.Calendar.TwoDigitYearMax\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified in a set operation is less than 99. </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than <strong>MaxSupportedDateTime.Year</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In a set operation, the current instance is read-only.</p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.TwoDigitYearMax\n- uid: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.GregorianCalendar.AddMonths(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 283\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of months away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddMonths(DateTime time, int months)\n    content.vb: Public Overrides Function AddMonths(time As Date, months As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add months. </p>\\n\"\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>The number of months to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of months to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.GregorianCalendar.AddYears(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 332\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of years away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddYears(DateTime time, int years)\n    content.vb: Public Overrides Function AddYears(time As Date, years As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add years. </p>\\n\"\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>The number of years to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of years to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfMonth\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 341\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfMonth(DateTime time)\n    content.vb: Public Overrides Function GetDayOfMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day of the month in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Day\n    commentId: P:System.DateTime.Day\n  - type: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfWeek\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 352\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek(DateTime time)\n    content.vb: Public Overrides Function GetDayOfWeek(time As Date) As DayOfWeek\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>A <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the day of the week in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfWeek\n    commentId: P:System.DateTime.DayOfWeek\n  - type: System.DayOfWeek\n    commentId: T:System.DayOfWeek\n  - type: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 361\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfYear(DateTime time)\n    content.vb: Public Overrides Function GetDayOfYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 366 that represents the day of the year in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfYear\n    commentId: P:System.DateTime.DayOfYear\n  - type: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 370\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInMonth(int year, int month, int era)\n    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 388\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInYear(int year, int era)\n    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetEra(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEra\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 407\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetEra(DateTime time)\n    content.vb: Public Overrides Function GetEra(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetEra(System.DateTime)\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetEra(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.GetLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLeapMonth\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 497\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the leap month for a specified year and era.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override int GetLeapMonth(int year, int era)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A year.</p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An era. Specify either <xref href=\\\"System.Globalization.GregorianCalendar.ADEra\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <strong>GregorianCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Always 0 because the Gregorian calendar does not recognize leap months.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is less than the Gregorian calendar year 1 or greater than the Gregorian calendar year 9999.</p>\\n<p>-or-</p>\\n<p>\\n<em>era</em> is not <xref href=\\\"System.Globalization.GregorianCalendar.ADEra\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <strong>GregorianCalendar.Eras[Calendar.CurrentEra]</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonth\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 424\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetMonth(DateTime time)\n    content.vb: Public Overrides Function GetMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Month\n    commentId: P:System.DateTime.Month\n  - type: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetMonth(DateTime)\n- uid: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 431\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of months in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetMonthsInYear(int year, int era)\n    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of months in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetYear(DateTime)\n  fullName: System.Globalization.GregorianCalendar.GetYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 453\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetYear(DateTime time)\n    content.vb: Public Overrides Function GetYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year in <em>time</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.Year\n    commentId: P:System.DateTime.Year\n  - type: System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.GregorianCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.GetYear(DateTime)\n- uid: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 462\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified date in the specified era is a leap day.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapDay(int year, int month, int day, int era)\n    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 519\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapMonth(int year, int month, int era)\n    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.IsLeapYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 546\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified year in the specified era is a leap year.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapYear(int year, int era)\n    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.GregorianCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 564\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the specified era.</p>\\n\"\n  syntax:\n    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)\n    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 999 that represents the millisecond. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>era</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.GregorianCalendar.ADEra\n    commentId: F:System.Globalization.GregorianCalendar.ADEra\n  - type: System.Globalization.GregorianCalendar.Eras\n    commentId: P:System.Globalization.GregorianCalendar.Eras\n  - type: System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.GregorianCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.GregorianCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.GregorianCalendar.ToFourDigitYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFourDigitYear\n    path: src/mscorlib/src/System/Globalization/GregorianCalendar.cs\n    startLine: 609\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified year to a four-digit year by using the <xref href=\\\"System.Globalization.GregorianCalendar.TwoDigitYearMax\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to determine the appropriate century.</p>\\n\"\n  syntax:\n    content: public override int ToFourDigitYear(int year)\n    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A two-digit or four-digit integer that represents the year to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.GregorianCalendar.TwoDigitYearMax\n    commentId: P:System.Globalization.GregorianCalendar.TwoDigitYearMax\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: GregorianCalendar.ToFourDigitYear(Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Globalization.Calendar\n  parent: System.Globalization\n  isExternal: false\n  name: Calendar\n  fullName: System.Globalization.Calendar\n  nameWithType: Calendar\n  commentId: T:System.Globalization.Calendar\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: CurrentEra\n  fullName: System.Globalization.Calendar.CurrentEra\n  nameWithType: Calendar.CurrentEra\n  commentId: F:System.Globalization.Calendar.CurrentEra\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Clone()\n  fullName: System.Globalization.Calendar.Clone()\n  spec.csharp:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Calendar.Clone()\n  commentId: M:System.Globalization.Calendar.Clone\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ReadOnly(Calendar)\n  fullName: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ReadOnly(Calendar)\n  commentId: M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMilliseconds(DateTime, Double)\n  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddDays(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddHours(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMinutes(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddSeconds(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddWeeks(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetHour(DateTime)\n  fullName: System.Globalization.Calendar.GetHour(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetHour(DateTime)\n  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMilliseconds(DateTime)\n  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMinute(DateTime)\n  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMinute(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetSecond(DateTime)\n  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetSecond(DateTime)\n  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.AlgorithmType\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AlgorithmType\n  fullName: System.Globalization.Calendar.AlgorithmType\n  nameWithType: Calendar.AlgorithmType\n  commentId: P:System.Globalization.Calendar.AlgorithmType\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Globalization.Calendar.IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  commentId: P:System.Globalization.Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear\n  commentId: P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Globalization.GregorianCalendarTypes\n  parent: System.Globalization\n  isExternal: false\n  name: GregorianCalendarTypes\n  fullName: System.Globalization.GregorianCalendarTypes\n  nameWithType: GregorianCalendarTypes\n  commentId: T:System.Globalization.GregorianCalendarTypes\n- uid: System.Globalization.Calendar.Eras\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Eras\n  fullName: System.Globalization.Calendar.Eras\n  nameWithType: Calendar.Eras\n  commentId: P:System.Globalization.Calendar.Eras\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Globalization.Calendar.MaxSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.Calendar.MaxSupportedDateTime\n  nameWithType: Calendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Globalization.Calendar.MinSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MinSupportedDateTime\n  fullName: System.Globalization.Calendar.MinSupportedDateTime\n  nameWithType: Calendar.MinSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n- uid: System.Globalization.Calendar.TwoDigitYearMax\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: TwoDigitYearMax\n  fullName: System.Globalization.Calendar.TwoDigitYearMax\n  nameWithType: Calendar.TwoDigitYearMax\n  commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMonths(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddYears(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfWeek(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetEra(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetEra(DateTime)\n  fullName: System.Globalization.Calendar.GetEra(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetEra(DateTime)\n  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetYear(DateTime)\n  fullName: System.Globalization.Calendar.GetYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToFourDigitYear(Int32)\n  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}