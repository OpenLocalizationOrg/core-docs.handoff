{"nodes":[{"pos":[3096,3104],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[4313,4323],"content":"Encoding()","needQuote":true,"nodes":[{"content":"Encoding()","pos":[0,10]}]},{"pos":[5423,5438],"content":"Encoding(Int32)","needQuote":true,"nodes":[{"content":"Encoding(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The code page identifier of the preferred encoding.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;0, to use the default encoding.","pos":[6190,6300],"source":"\\n<p>The code page identifier of the preferred encoding.</p>\\n<p>-or- </p>\\n<p>0, to use the default encoding."},{"content":"&lt;/p&gt;\\n","pos":[6301,6307],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codePage&lt;/em&gt; is less than zero.","pos":[6438,6481],"source":"\\n<p>\\n<em>codePage</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[6482,6488],"source":" </p>\\n"},{"pos":[7180,7229],"content":"Encoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"Encoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The encoding code page identifier.","pos":[8237,8276],"source":"\\n<p>The encoding code page identifier."},{"content":"&lt;/p&gt;\\n","pos":[8277,8283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.","pos":[8371,8489],"source":"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[8490,8496],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.","pos":[8584,8706],"source":"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[8707,8713],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codePage&lt;/em&gt; is less than zero.","pos":[8844,8887],"source":"\\n<p>\\n<em>codePage</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[8888,8894],"source":" </p>\\n"},{"pos":[9189,9194],"content":"ASCII","needQuote":true,"nodes":[{"content":"ASCII","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An  encoding for the ASCII (7-bit) character set.&lt;/p&gt;\\n","pos":[9834,9894],"source":"\\n<p>An  encoding for the ASCII (7-bit) character set.</p>\\n"},{"pos":[10590,10606],"content":"BigEndianUnicode","needQuote":true,"nodes":[{"content":"BigEndianUnicode","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An encoding object for the UTF-16 format that uses the big endian byte order.&lt;/p&gt;\\n","pos":[11313,11401],"source":"\\n<p>An encoding object for the UTF-16 format that uses the big endian byte order.</p>\\n"},{"pos":[12009,12017],"content":"CodePage","needQuote":true,"nodes":[{"content":"CodePage","pos":[0,8]}]},{"pos":[13437,13452],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value in a set operation is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14633,14698],"source":"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n"},{"pos":[15484,15499],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value in a set operation is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16680,16745],"source":"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n"},{"pos":[17522,17534],"content":"EncodingName","needQuote":true,"nodes":[{"content":"EncodingName","pos":[0,12]}]},{"pos":[19075,19087],"content":"IsSingleByte","needQuote":true,"nodes":[{"content":"IsSingleByte","pos":[0,12]}]},{"pos":[20389,20396],"content":"Unicode","needQuote":true,"nodes":[{"content":"Unicode","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An encoding for the UTF-16 format using the little endian byte order.&lt;/p&gt;\\n","pos":[21066,21146],"source":"\\n<p>An encoding for the UTF-16 format using the little endian byte order.</p>\\n"},{"pos":[21754,21759],"content":"UTF32","needQuote":true,"nodes":[{"content":"UTF32","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An  encoding object for the UTF-32 format using the little endian byte order.&lt;/p&gt;\\n","pos":[22421,22509],"source":"\\n<p>An  encoding object for the UTF-32 format using the little endian byte order.</p>\\n"},{"pos":[23151,23155],"content":"UTF7","needQuote":true,"nodes":[{"content":"UTF7","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An encoding for the UTF-7 format.&lt;/p&gt;\\n","pos":[23777,23821],"source":"\\n<p>An encoding for the UTF-7 format.</p>\\n"},{"pos":[24272,24276],"content":"UTF8","needQuote":true,"nodes":[{"content":"UTF8","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An encoding for the UTF-8 format.&lt;/p&gt;\\n","pos":[24898,24942],"source":"\\n<p>An encoding for the UTF-8 format.</p>\\n"},{"pos":[25444,25451],"content":"WebName","needQuote":true,"nodes":[{"content":"WebName","pos":[0,7]}]},{"pos":[26968,26975],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[28329,28364],"content":"Convert(Encoding, Encoding, Byte[])","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[])","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The encoding format of &lt;em&gt;bytes&lt;/em&gt;.","pos":[29185,29228],"source":"\\n<p>The encoding format of <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[29229,29235],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The target encoding format.","pos":[29312,29344],"source":"\\n<p>The target encoding format."},{"content":"&lt;/p&gt;\\n","pos":[29345,29351],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The bytes to convert.","pos":[29415,29441],"source":"\\n<p>The bytes to convert."},{"content":"&lt;/p&gt;\\n","pos":[29442,29448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;srcEncoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;dstEncoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[29829,30018],"source":"\\n<p>\\n<em>srcEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>dstEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30019,30025],"source":" </p>\\n"},{"pos":[31757,31806],"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Convert(Encoding, Encoding, Byte[], Int32, Int32)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The encoding of the source array, &lt;em&gt;bytes&lt;/em&gt;.","pos":[32725,32779],"source":"\\n<p>The encoding of the source array, <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[32780,32786],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encoding of the output array.","pos":[32863,32901],"source":"\\n<p>The encoding of the output array."},{"content":"&lt;/p&gt;\\n","pos":[32902,32908],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array of bytes to convert.","pos":[32972,33007],"source":"\\n<p>The array of bytes to convert."},{"content":"&lt;/p&gt;\\n","pos":[33008,33014],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first element of &lt;em&gt;bytes&lt;/em&gt; to convert.","pos":[33077,33142],"source":"\\n<p>The index of the first element of <em>bytes</em> to convert."},{"content":"&lt;/p&gt;\\n","pos":[33143,33149],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to convert.","pos":[33212,33248],"source":"\\n<p>The number of bytes to convert."},{"content":"&lt;/p&gt;\\n","pos":[33249,33255],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;srcEncoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;dstEncoding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33655,33844],"source":"\\n<p>\\n<em>srcEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>dstEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33845,33851],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not specify a valid range in the byte array.","pos":[33968,34056],"source":"\\n<p>\\n<em>index</em> and <em>count</em> do not specify a valid range in the byte array."},{"content":"&lt;/p&gt;\\n","pos":[34057,34063],"source":" </p>\\n"},{"pos":[35658,35672],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[37461,37487],"content":"GetByteCount(Char*, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[38496,38544],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[38545,38551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[38614,38654],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[38655,38661],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[38720,38797],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[38916,38963],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38964,38970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[39087,39127],"source":"\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[39128,39134],"source":" </p>\\n"},{"pos":[40715,40735],"content":"GetByteCount(Char[])","needQuote":true,"nodes":[{"content":"GetByteCount(Char[])","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The character array containing the characters to encode.","pos":[41510,41571],"source":"\\n<p>The character array containing the characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[41572,41578],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding all the characters in the specified character array.&lt;/p&gt;\\n","pos":[41637,41741],"source":"\\n<p>The number of bytes produced by encoding all the characters in the specified character array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41860,41907],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41908,41914],"source":" </p>\\n"},{"pos":[43291,43325],"content":"GetByteCount(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[44191,44259],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[44260,44266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[44329,44377],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[44378,44384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[44447,44487],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[44488,44494],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[44553,44630],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[44749,44796],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[44797,44803],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.","pos":[44920,45083],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[45084,45090],"source":" </p>\\n"},{"pos":[46461,46481],"content":"GetByteCount(String)","needQuote":true,"nodes":[{"content":"GetByteCount(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The string containing the set of characters to encode.","pos":[47231,47290],"source":"\\n<p>The string containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[47291,47297],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters.&lt;/p&gt;\\n","pos":[47356,47433],"source":"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47552,47595],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47596,47602],"source":" </p>\\n"},{"pos":[48858,48894],"content":"GetBytes(Char*, Int32, Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char*, Int32, Byte*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first character to encode.","pos":[50027,50075],"source":"\\n<p>A pointer to the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[50076,50082],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[50149,50189],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[50190,50196],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting sequence of bytes.","pos":[50259,50348],"source":"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[50349,50355],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes to write.","pos":[50422,50464],"source":"\\n<p>The maximum number of bytes to write."},{"content":"&lt;/p&gt;\\n","pos":[50465,50471],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written at the location indicated by the &lt;em&gt;bytes&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[50530,50634],"source":"\\n<p>The actual number of bytes written at the location indicated by the <em>bytes</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50753,50865],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50866,50872],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[50989,51055],"source":"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[51056,51062],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than the resulting number of bytes.","pos":[51159,51228],"source":"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes."},{"content":"&lt;/p&gt;\\n","pos":[51229,51235],"source":" </p>\\n"},{"pos":[52822,52838],"content":"GetBytes(Char[])","needQuote":true,"nodes":[{"content":"GetBytes(Char[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The character array containing the characters to encode.","pos":[53580,53641],"source":"\\n<p>The character array containing the characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[53642,53648],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array containing the results of encoding the specified set of characters.&lt;/p&gt;\\n","pos":[53708,53799],"source":"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[53918,53965],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53966,53972],"source":" </p>\\n"},{"pos":[55329,55359],"content":"GetBytes(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[56191,56259],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[56260,56266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[56329,56377],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[56378,56384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[56447,56487],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[56488,56494],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array containing the results of encoding the specified set of characters.&lt;/p&gt;\\n","pos":[56554,56645],"source":"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[56764,56811],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[56812,56818],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.","pos":[56935,57098],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[57099,57105],"source":" </p>\\n"},{"pos":[58613,58658],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[59608,59676],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[59677,59683],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[59750,59798],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[59799,59805],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[59872,59912],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[59913,59919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[59983,60046],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[60047,60053],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[60120,60193],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[60194,60200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60259,60325],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[60444,60556],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[60557,60563],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[60680,60964],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[60965,60971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[61068,61203],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[61204,61210],"source":" </p>\\n"},{"pos":[62635,62651],"content":"GetBytes(String)","needQuote":true,"nodes":[{"content":"GetBytes(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The string containing the characters to encode.","pos":[63373,63425],"source":"\\n<p>The string containing the characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[63426,63432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array containing the results of encoding the specified set of characters.&lt;/p&gt;\\n","pos":[63492,63583],"source":"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[63702,63745],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63746,63752],"source":" </p>\\n"},{"pos":[65057,65102],"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBytes(String, Int32, Int32, Byte[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string containing the set of characters to encode.","pos":[66029,66088],"source":"\\n<p>The string containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[66089,66095],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[66162,66210],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[66211,66217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[66284,66324],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[66325,66331],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[66395,66458],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[66459,66465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[66532,66605],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[66606,66612],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[66671,66737],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;s&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[66856,66964],"source":"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[66965,66971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[67088,67372],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[67373,67379],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[67476,67611],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[67612,67618],"source":" </p>\\n"},{"pos":[69089,69115],"content":"GetCharCount(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte*, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[70125,70168],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[70169,70175],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[70238,70273],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[70274,70280],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[70339,70428],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70547,70594],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70595,70601],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[70718,70758],"source":"\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[70759,70765],"source":" </p>\\n"},{"pos":[72422,72442],"content":"GetCharCount(Byte[])","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[])","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[73213,73276],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[73277,73283],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[73342,73431],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[73550,73597],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[73598,73604],"source":" </p>\\n"},{"pos":[75057,75091],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[75958,76021],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[76022,76028],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[76091,76134],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[76135,76141],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[76204,76239],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[76240,76246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[76305,76394],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[76513,76560],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[76561,76567],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[76684,76847],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[76848,76854],"source":" </p>\\n"},{"pos":[78403,78439],"content":"GetChars(Byte*, Int32, Char*, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte*, Int32, Char*, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A pointer to the first byte to decode.","pos":[79572,79615],"source":"\\n<p>A pointer to the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[79616,79622],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[79689,79724],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[79725,79731],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A pointer to the location at which to start writing the resulting set of characters.","pos":[79794,79883],"source":"\\n<p>A pointer to the location at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[79884,79890],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters to write.","pos":[79957,80004],"source":"\\n<p>The maximum number of characters to write."},{"content":"&lt;/p&gt;\\n","pos":[80005,80011],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written at the location indicated by the &lt;em&gt;chars&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[80070,80179],"source":"\\n<p>The actual number of characters written at the location indicated by the <em>chars</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[80298,80410],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[80411,80417],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[80534,80600],"source":"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[80601,80607],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than the resulting number of characters.","pos":[80704,80778],"source":"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters."},{"content":"&lt;/p&gt;\\n","pos":[80779,80785],"source":" </p>\\n"},{"pos":[82491,82507],"content":"GetChars(Byte[])","needQuote":true,"nodes":[{"content":"GetChars(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[83240,83303],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[83304,83310],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A character array containing the results of decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[83370,83466],"source":"\\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[83585,83632],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[83633,83639],"source":" </p>\\n"},{"pos":[85115,85145],"content":"GetChars(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[85972,86035],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[86036,86042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[86105,86148],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[86149,86155],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[86218,86253],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[86254,86260],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A character array containing the results of decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[86320,86416],"source":"\\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[86535,86582],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[86583,86589],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[86706,86869],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[86870,86876],"source":" </p>\\n"},{"pos":[88503,88548],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[89498,89561],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[89562,89568],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[89635,89678],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[89679,89685],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[89752,89787],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[89788,89794],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[89858,89926],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[89927,89933],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[90000,90073],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[90074,90080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90139,90210],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[90329,90441],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[90442,90448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[90565,90849],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[90850,90856],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[90953,91093],"source":"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[91094,91100],"source":" </p>\\n"},{"pos":[92605,92617],"content":"GetDecoder()","needQuote":true,"nodes":[{"content":"GetDecoder()","pos":[0,12]}]},{"pos":[94311,94323],"content":"GetEncoder()","needQuote":true,"nodes":[{"content":"GetEncoder()","pos":[0,12]}]},{"pos":[95960,95978],"content":"GetEncoding(Int32)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The encoding that is associated with the specified code page.&lt;/p&gt;\\n","pos":[97055,97127],"source":"\\n<p>The encoding that is associated with the specified code page.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is less than zero or greater than 65535.","pos":[97258,97323],"source":"\\n<p>\\n<em>codepage</em> is less than zero or greater than 65535."},{"content":"&lt;/p&gt;\\n","pos":[97324,97330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is not supported by the underlying platform.","pos":[97427,97496],"source":"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[97497,97503],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is not supported by the underlying platform.","pos":[97608,97677],"source":"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[97678,97684],"source":" </p>\\n"},{"pos":[98569,98621],"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(Int32, EncoderFallback, DecoderFallback)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.","pos":[100032,100150],"source":"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[100151,100157],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.","pos":[100245,100367],"source":"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[100368,100374],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encoding that is associated with the specified code page.&lt;/p&gt;\\n","pos":[100441,100513],"source":"\\n<p>The encoding that is associated with the specified code page.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is less than zero or greater than 65535.","pos":[100644,100709],"source":"\\n<p>\\n<em>codepage</em> is less than zero or greater than 65535."},{"content":"&lt;/p&gt;\\n","pos":[100710,100716],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is not supported by the underlying platform.","pos":[100813,100882],"source":"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[100883,100889],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;codepage&lt;/em&gt; is not supported by the underlying platform.","pos":[100994,101063],"source":"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[101064,101070],"source":" </p>\\n"},{"pos":[101824,101843],"content":"GetEncoding(String)","needQuote":true,"nodes":[{"content":"GetEncoding(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The encoding  associated with the specified code page.&lt;/p&gt;\\n","pos":[102967,103032],"source":"\\n<p>The encoding  associated with the specified code page.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid code page name.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The code page indicated by &lt;em&gt;name&lt;/em&gt; is not supported by the underlying platform.","pos":[103143,103302],"source":"\\n<p>\\n<em>name</em> is not a valid code page name.</p>\\n<p>-or- </p>\\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[103303,103309],"source":" </p>\\n"},{"pos":[104111,104164],"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","needQuote":true,"nodes":[{"content":"GetEncoding(String, EncoderFallback, DecoderFallback)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a character cannot be encoded with the current encoding.","pos":[105622,105740],"source":"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[105741,105747],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding.","pos":[105835,105957],"source":"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding."},{"content":"&lt;/p&gt;\\n","pos":[105958,105964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The encoding that is associated with the specified code page.&lt;/p&gt;\\n","pos":[106031,106103],"source":"\\n<p>The encoding that is associated with the specified code page.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is not a valid code page name.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The code page indicated by &lt;em&gt;name&lt;/em&gt; is not supported by the underlying platform.","pos":[106214,106373],"source":"\\n<p>\\n<em>name</em> is not a valid code page name.</p>\\n<p>-or- </p>\\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform."},{"content":"&lt;/p&gt;\\n","pos":[106374,106380],"source":" </p>\\n"},{"pos":[107003,107016],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for the current instance.&lt;/p&gt;\\n","pos":[107631,107681],"source":"\\n<p>The hash code for the current instance.</p>\\n"},{"pos":[108163,108185],"content":"GetMaxByteCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxByteCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[108974,109014],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[109015,109021],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of bytes produced by encoding the specified number of characters.&lt;/p&gt;\\n","pos":[109080,109175],"source":"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charCount&lt;/em&gt; is less than zero.","pos":[109306,109350],"source":"\\n<p>\\n<em>charCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[109351,109357],"source":" </p>\\n"},{"pos":[110517,110539],"content":"GetMaxCharCount(Int32)","needQuote":true,"nodes":[{"content":"GetMaxCharCount(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[111328,111363],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[111364,111370],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of characters produced by decoding the specified number of bytes.&lt;/p&gt;\\n","pos":[111429,111524],"source":"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[111655,111699],"source":"\\n<p>\\n<em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[111700,111706],"source":" </p>\\n"},{"pos":[112931,112944],"content":"GetPreamble()","needQuote":true,"nodes":[{"content":"GetPreamble()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A byte array containing a sequence of bytes that specifies the encoding used.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;A byte array of length zero, if a preamble is not required.&lt;/p&gt;\\n","pos":[113612,113782],"source":"\\n<p>A byte array containing a sequence of bytes that specifies the encoding used.</p>\\n<p>-or- </p>\\n<p>A byte array of length zero, if a preamble is not required.</p>\\n"},{"pos":[114156,114179],"content":"GetString(Byte*, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte*, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A pointer to a byte array.","pos":[115134,115165],"source":"\\n<p>A pointer to a byte array."},{"content":"&lt;/p&gt;\\n","pos":[115166,115172],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[115239,115274],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[115275,115281],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that contains the results of decoding the specified sequence of bytes.","pos":[115341,115425],"source":"\\n<p>A string that contains the results of decoding the specified sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[115426,115432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is a null pointer.","pos":[115551,115591],"source":"\\n<p>\\n<em>bytes</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[115592,115598],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteCount&lt;/em&gt; is less than zero.","pos":[115715,115759],"source":"\\n<p>\\n<em>byteCount</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[115760,115766],"source":" </p>\\n"},{"pos":[117319,117336],"content":"GetString(Byte[])","needQuote":true,"nodes":[{"content":"GetString(Byte[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[118062,118125],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[118126,118132],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that contains the results of decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[118192,118282],"source":"\\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The byte array contains invalid Unicode code points.&lt;/p&gt;\\n","pos":[118393,118456],"source":"\\n<p>The byte array contains invalid Unicode code points.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[118561,118608],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[118609,118615],"source":" </p>\\n"},{"pos":[120096,120127],"content":"GetString(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetString(Byte[], Int32, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[120947,121010],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[121011,121017],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[121080,121123],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[121124,121130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[121193,121228],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[121229,121235],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string that contains the results of decoding the specified sequence of bytes.&lt;/p&gt;\\n","pos":[121295,121385],"source":"\\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The byte array contains invalid Unicode code points.&lt;/p&gt;\\n","pos":[121496,121559],"source":"\\n<p>The byte array contains invalid Unicode code points.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[121664,121711],"source":"\\n<p>\\n<em>bytes</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[121712,121718],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[121835,121998],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[121999,122005],"source":" </p>\\n"},{"pos":[123544,123578],"content":"RegisterProvider(EncodingProvider)","needQuote":true,"nodes":[{"content":"RegisterProvider(EncodingProvider)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[124588,124638],"source":"\\n<p>\\n<em>provider</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[124639,124645],"source":" </p>\\n"},{"pos":[125187,125198],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[125344,125350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125510,125520],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[125615,125623],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125692,125693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125720,125721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125791,125799],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[125868,125869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125896,125897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126094,126116],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[126264,126270],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126337,126338],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126388,126394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[126455,126456]},{"pos":[126511,126517],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126577,126578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126675,126681],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[126748,126749],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126799,126805],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[126866,126867]},{"pos":[126922,126928],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[126988,126989],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127234,127265],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[127431,127446],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[127522,127523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127573,127579],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[127640,127641]},{"pos":[127696,127702],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[127762,127763],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127869,127884],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[127960,127961],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128011,128017],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[128078,128079]},{"pos":[128134,128140],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[128200,128201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128427,128436],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[128529,128536],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[128604,128605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128632,128633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128702,128709],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[128777,128778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128805,128806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128981,128998],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[129107,129122],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[129198,129199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129226,129227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129304,129319],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[129395,129396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129423,129424],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129569,129575],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[129705,129710],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129871,129886],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[130087,130102],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[130296,130304],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[130465,130471],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[130617,130624],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[130735,130741],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[130861,130865],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[130924,130926]},{"pos":[130989,130993],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[131051,131053],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[131214,131228],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[131347,131353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[131420,131421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131471,131477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131537,131538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131621,131627],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[131694,131695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[131745,131751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[131811,131812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[131946,131951],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[132023,132027],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[132149,132153],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[132284,132290],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[132410,132414],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[132473,132475]},{"pos":[132538,132542],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[132600,132602],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[132697,132702],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[132774,132778],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[132900,132904],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[133083,133090],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[133259,133266],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[133442,133455],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[133556,133567],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[133639,133640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133667,133668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[133741,133752],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[133824,133825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[133852,133853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[134034,134050],"content":"EncodingProvider","needQuote":true,"nodes":[{"content":"EncodingProvider","pos":[0,16]}]},{"pos":[134239,134266],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[134472,134493],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[134702,134727],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[134935,134959],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]},{"pos":[135174,135198],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[135418,135435],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[135628,135649],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Text.Encoding\n  commentId: T:System.Text.Encoding\n  id: Encoding\n  parent: System.Text\n  children:\n  - System.Text.Encoding.#ctor\n  - System.Text.Encoding.#ctor(System.Int32)\n  - System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.ASCII\n  - System.Text.Encoding.BigEndianUnicode\n  - System.Text.Encoding.Clone\n  - System.Text.Encoding.CodePage\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.DecoderFallback\n  - System.Text.Encoding.EncoderFallback\n  - System.Text.Encoding.EncodingName\n  - System.Text.Encoding.Equals(System.Object)\n  - System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  - System.Text.Encoding.GetByteCount(System.Char[])\n  - System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetByteCount(System.String)\n  - System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[])\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.Encoding.GetBytes(System.String)\n  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetCharCount(System.Byte[])\n  - System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - System.Text.Encoding.GetChars(System.Byte[])\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.Encoding.GetDecoder\n  - System.Text.Encoding.GetEncoder\n  - System.Text.Encoding.GetEncoding(System.Int32)\n  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetEncoding(System.String)\n  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  - System.Text.Encoding.GetHashCode\n  - System.Text.Encoding.GetMaxByteCount(System.Int32)\n  - System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - System.Text.Encoding.GetPreamble\n  - System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  - System.Text.Encoding.GetString(System.Byte[])\n  - System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Encoding.IsSingleByte\n  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  - System.Text.Encoding.Unicode\n  - System.Text.Encoding.UTF32\n  - System.Text.Encoding.UTF7\n  - System.Text.Encoding.UTF8\n  - System.Text.Encoding.WebName\n  langs:\n  - csharp\n  - vb\n  name: Encoding\n  fullName: System.Text.Encoding\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Encoding\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 84\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Represents a character encoding.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public abstract class Encoding : ICloneable\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public MustInherit Class Encoding\n          Implements ICloneable\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Encoding\n- uid: System.Text.Encoding.#ctor\n  commentId: M:System.Text.Encoding.#ctor\n  id: '#ctor'\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Encoding()\n  fullName: System.Text.Encoding.Encoding()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 190\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Encoding()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Text.Encoding.CodePage\n    commentId: P:System.Text.Encoding.CodePage\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Encoding.Encoding()\n- uid: System.Text.Encoding.#ctor(System.Int32)\n  commentId: M:System.Text.Encoding.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Encoding(Int32)\n  fullName: System.Text.Encoding.Encoding(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 195\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that corresponds to the specified code page.</p>\\n\"\n  syntax:\n    content: protected Encoding(int codePage)\n    content.vb: Protected Sub New(codePage As Integer)\n    parameters:\n    - id: codePage\n      type: System.Int32\n      description: \"\\n<p>The code page identifier of the preferred encoding.</p>\\n<p>-or- </p>\\n<p>0, to use the default encoding. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>codePage</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.CodePage\n    commentId: P:System.Text.Encoding.CodePage\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Encoding.Encoding(Int32)\n- uid: System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  commentId: M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  id: '#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)'\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Encoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.Encoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 214\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies. </p>\\n\"\n  syntax:\n    content: protected Encoding(int codePage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)\n    content.vb: Protected Sub New(codePage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback)\n    parameters:\n    - id: codePage\n      type: System.Int32\n      description: \"\\n<p>The encoding code page identifier. </p>\\n\"\n    - id: encoderFallback\n      type: System.Text.EncoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\\n\"\n    - id: decoderFallback\n      type: System.Text.DecoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>codePage</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.ASCII\n  commentId: P:System.Text.Encoding.ASCII\n  id: ASCII\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: ASCII\n  fullName: System.Text.Encoding.ASCII\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ASCII\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 897\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the ASCII (7-bit) character set.</p>\\n\"\n  syntax:\n    content: public static Encoding ASCII { get; }\n    content.vb: Public Shared ReadOnly Property ASCII As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An  encoding for the ASCII (7-bit) character set.</p>\\n\"\n  seealso:\n  - type: System.Text.ASCIIEncoding\n    commentId: T:System.Text.ASCIIEncoding\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  - type: System.Text.Encoding.UTF8\n    commentId: P:System.Text.Encoding.UTF8\n  - type: System.Text.Encoding.Unicode\n    commentId: P:System.Text.Encoding.Unicode\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.ASCII\n- uid: System.Text.Encoding.BigEndianUnicode\n  commentId: P:System.Text.Encoding.BigEndianUnicode\n  id: BigEndianUnicode\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: BigEndianUnicode\n  fullName: System.Text.Encoding.BigEndianUnicode\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BigEndianUnicode\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1497\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the UTF-16 format that uses the big endian byte order.</p>\\n\"\n  syntax:\n    content: public static Encoding BigEndianUnicode { get; }\n    content.vb: Public Shared ReadOnly Property BigEndianUnicode As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An encoding object for the UTF-16 format that uses the big endian byte order.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding\n    commentId: T:System.Text.UnicodeEncoding\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  - type: System.Text.Encoding.Unicode\n    commentId: P:System.Text.Encoding.Unicode\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.BigEndianUnicode\n- uid: System.Text.Encoding.CodePage\n  commentId: P:System.Text.Encoding.CodePage\n  id: CodePage\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: CodePage\n  fullName: System.Text.Encoding.CodePage\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CodePage\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1320\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets the code page identifier of the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int CodePage { get; }\n    content.vb: Public Overridable ReadOnly Property CodePage As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The code page identifier of the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.EncodingInfo.CodePage\n    commentId: P:System.Text.EncodingInfo.CodePage\n  - type: System.Text.Encoding.WindowsCodePage\n    commentId: P:System.Text.Encoding.WindowsCodePage\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Encoding.CodePage\n- uid: System.Text.Encoding.DecoderFallback\n  commentId: P:System.Text.Encoding.DecoderFallback\n  id: DecoderFallback\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: DecoderFallback\n  fullName: System.Text.Encoding.DecoderFallback\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DecoderFallback\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 850\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Text.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public DecoderFallback DecoderFallback { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property DecoderFallback As DecoderFallback\n    parameters: []\n    return:\n      type: System.Text.DecoderFallback\n      description: \"\\n<p>The decoder fallback object for the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A value cannot be assigned in a set operation because the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  seealso:\n  - type: System.Text.DecoderFallback\n    commentId: T:System.Text.DecoderFallback\n  - type: System.Text.DecoderFallbackBuffer\n    commentId: T:System.Text.DecoderFallbackBuffer\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Encoding.DecoderFallback\n- uid: System.Text.Encoding.EncoderFallback\n  commentId: P:System.Text.Encoding.EncoderFallback\n  id: EncoderFallback\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: EncoderFallback\n  fullName: System.Text.Encoding.EncoderFallback\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EncoderFallback\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 828\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Text.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public EncoderFallback EncoderFallback { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property EncoderFallback As EncoderFallback\n    parameters: []\n    return:\n      type: System.Text.EncoderFallback\n      description: \"\\n<p>The encoder fallback object for the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A value cannot be assigned in a set operation because the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.EncoderFallbackBuffer\n    commentId: T:System.Text.EncoderFallbackBuffer\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Encoding.EncoderFallback\n- uid: System.Text.Encoding.EncodingName\n  commentId: P:System.Text.Encoding.EncodingName\n  id: EncodingName\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: EncodingName\n  fullName: System.Text.Encoding.EncodingName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EncodingName\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 720\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets the human-readable description of the current encoding.</p>\\n\"\n  syntax:\n    content: public virtual string EncodingName { get; }\n    content.vb: Public Overridable ReadOnly Property EncodingName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The human-readable description of the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.EncodingInfo.DisplayName\n    commentId: P:System.Text.EncodingInfo.DisplayName\n  - type: System.Text.Encoding.BodyName\n    commentId: P:System.Text.Encoding.BodyName\n  - type: System.Text.Encoding.HeaderName\n    commentId: P:System.Text.Encoding.HeaderName\n  - type: System.Text.Encoding.WebName\n    commentId: P:System.Text.Encoding.WebName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Encoding.EncodingName\n- uid: System.Text.Encoding.IsSingleByte\n  commentId: P:System.Text.Encoding.IsSingleByte\n  id: IsSingleByte\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: IsSingleByte\n  fullName: System.Text.Encoding.IsSingleByte\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSingleByte\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 818\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual bool IsSingleByte { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable ReadOnly Property IsSingleByte As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> uses single-byte code points; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Encoding.IsSingleByte\n- uid: System.Text.Encoding.Unicode\n  commentId: P:System.Text.Encoding.Unicode\n  id: Unicode\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Unicode\n  fullName: System.Text.Encoding.Unicode\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Unicode\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1483\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the UTF-16 format using the little endian byte order.</p>\\n\"\n  syntax:\n    content: public static Encoding Unicode { get; }\n    content.vb: Public Shared ReadOnly Property Unicode As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An encoding for the UTF-16 format using the little endian byte order.</p>\\n\"\n  seealso:\n  - type: System.Text.UnicodeEncoding\n    commentId: T:System.Text.UnicodeEncoding\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  - type: System.Text.Encoding.BigEndianUnicode\n    commentId: P:System.Text.Encoding.BigEndianUnicode\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.Unicode\n- uid: System.Text.Encoding.UTF32\n  commentId: P:System.Text.Encoding.UTF32\n  id: UTF32\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF32\n  fullName: System.Text.Encoding.UTF32\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF32\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1528\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the UTF-32 format using the little endian byte order.</p>\\n\"\n  syntax:\n    content: public static Encoding UTF32 { get; }\n    content.vb: Public Shared ReadOnly Property UTF32 As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An  encoding object for the UTF-32 format using the little endian byte order.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF32Encoding\n    commentId: T:System.Text.UTF32Encoding\n  - type: System.Text.Encoding.UTF8\n    commentId: P:System.Text.Encoding.UTF8\n  - type: System.Text.Encoding.Unicode\n    commentId: P:System.Text.Encoding.Unicode\n  - type: System.Text.Encoding.BigEndianUnicode\n    commentId: P:System.Text.Encoding.BigEndianUnicode\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.UTF32\n- uid: System.Text.Encoding.UTF7\n  commentId: P:System.Text.Encoding.UTF7\n  id: UTF7\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF7\n  fullName: System.Text.Encoding.UTF7\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF7\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1507\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the UTF-7 format.</p>\\n\"\n  syntax:\n    content: public static Encoding UTF7 { get; }\n    content.vb: Public Shared ReadOnly Property UTF7 As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An encoding for the UTF-7 format.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF7Encoding\n    commentId: T:System.Text.UTF7Encoding\n  - type: System.Text.Encoding.UTF8\n    commentId: P:System.Text.Encoding.UTF8\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.UTF7\n- uid: System.Text.Encoding.UTF8\n  commentId: P:System.Text.Encoding.UTF8\n  id: UTF8\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: UTF8\n  fullName: System.Text.Encoding.UTF8\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UTF8\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1518\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets an encoding for the UTF-8 format.</p>\\n\"\n  syntax:\n    content: public static Encoding UTF8 { get; }\n    content.vb: Public Shared ReadOnly Property UTF8 As Encoding\n    parameters: []\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>An encoding for the UTF-8 format.</p>\\n\"\n  seealso:\n  - type: System.Text.UTF8Encoding\n    commentId: T:System.Text.UTF8Encoding\n  - type: System.Text.Encoding.GetEncoding(System.Int32)\n    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Encoding.UTF8\n- uid: System.Text.Encoding.WebName\n  commentId: P:System.Text.Encoding.WebName\n  id: WebName\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: WebName\n  fullName: System.Text.Encoding.WebName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WebName\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 745\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</p>\\n\"\n  syntax:\n    content: public virtual string WebName { get; }\n    content.vb: Public Overridable ReadOnly Property WebName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The IANA name for the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.EncodingInfo.Name\n    commentId: P:System.Text.EncodingInfo.Name\n  - type: System.Text.Encoding.BodyName\n    commentId: P:System.Text.Encoding.BodyName\n  - type: System.Text.Encoding.EncodingName\n    commentId: P:System.Text.Encoding.EncodingName\n  - type: System.Text.Encoding.HeaderName\n    commentId: P:System.Text.Encoding.HeaderName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Encoding.WebName\n- uid: System.Text.Encoding.Clone\n  commentId: M:System.Text.Encoding.Clone\n  id: Clone\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Text.Encoding.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 872\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, creates a shallow copy of the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual object Clone()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A copy of the current <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.Clone()\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Convert(Encoding, Encoding, Byte[])\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Convert\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 351\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts an entire byte array from one encoding to another.</p>\\n\"\n  syntax:\n    content: public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes)\n    content.vb: Public Shared Function Convert(srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()\n    parameters:\n    - id: srcEncoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding format of <em>bytes</em>. </p>\\n\"\n    - id: dstEncoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The target encoding format. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The bytes to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the results of converting <em>bytes</em> from <em>srcEncoding</em> to <em>dstEncoding</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>srcEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>dstEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<strong>srcEncoding.</strong>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<strong>dstEncoding.</strong>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())\n  name.vb: Convert(Encoding, Encoding, Byte())\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())\n- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Convert\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 366\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts a range of bytes in a byte array from one encoding to another.</p>\\n\"\n  syntax:\n    content: public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count)\n    content.vb: Public Shared Function Convert(srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()\n    parameters:\n    - id: srcEncoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding of the source array, <em>bytes</em>. </p>\\n\"\n    - id: dstEncoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding of the output array. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The array of bytes to convert. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first element of <em>bytes</em> to convert. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to convert. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the result of converting a range of bytes in <em>bytes</em> from <em>srcEncoding</em> to <em>dstEncoding</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>srcEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>dstEncoding</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> and <em>count</em> do not specify a valid range in the byte array. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<strong>srcEncoding.</strong>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<strong>dstEncoding.</strong>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)\n  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)\n  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)\n- uid: System.Text.Encoding.Equals(System.Object)\n  commentId: M:System.Text.Encoding.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Text.Encoding.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1535\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current instance.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object value)\n    content.vb: Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and is equal to the current instance; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Text.Encoding.#ctor\n    commentId: M:System.Text.Encoding.#ctor\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Encoding.Equals(Object)\n- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)\n  id: GetByteCount(System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char*, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 957\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public virtual int GetByteCount(char *chars, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function GetByteCount(chars As Char *, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetByteCount(Char*, Int32)\n- uid: System.Text.Encoding.GetByteCount(System.Char[])\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  id: GetByteCount(System.Char[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[])\n  fullName: System.Text.Encoding.GetByteCount(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 922\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</p>\\n\"\n  syntax:\n    content: public virtual int GetByteCount(char[] chars)\n    content.vb: Public Overridable Function GetByteCount(chars As Char()) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding all the characters in the specified character array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetByteCount(System.Char())\n  name.vb: GetByteCount(Char())\n  nameWithType: Encoding.GetByteCount(Char[])\n  nameWithType.vb: Encoding.GetByteCount(Char())\n- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 950\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\\n\"\n  syntax:\n    content: public abstract int GetByteCount(char[] chars, int index, int count)\n    content.vb: Public MustOverride Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)\n  name.vb: GetByteCount(Char(), Int32, Int32)\n  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)\n- uid: System.Text.Encoding.GetByteCount(System.String)\n  commentId: M:System.Text.Encoding.GetByteCount(System.String)\n  id: GetByteCount(System.String)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(String)\n  fullName: System.Text.Encoding.GetByteCount(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 935\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</p>\\n\"\n  syntax:\n    content: public virtual int GetByteCount(string s)\n    content.vb: Public Overridable Function GetByteCount(s As String) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string containing the set of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetByteCount(String)\n- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char*, Int32, Byte*, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1084\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public virtual int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting sequence of bytes. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written at the location indicated by the <em>bytes</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than the resulting number of bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)\n- uid: System.Text.Encoding.GetBytes(System.Char[])\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  id: GetBytes(System.Char[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[])\n  fullName: System.Text.Encoding.GetBytes(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 996\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetBytes(char[] chars)\n    content.vb: Public Overridable Function GetBytes(chars As Char()) As Byte()\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the characters to encode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetBytes(System.Char())\n  name.vb: GetBytes(Char())\n  nameWithType: Encoding.GetBytes(Char[])\n  nameWithType.vb: Encoding.GetBytes(Char())\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1011\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetBytes(char[] chars, int index, int count)\n    content.vb: Public Overridable Function GetBytes(chars As Char(), index As Integer, count As Integer) As Byte()\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32)\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)\n- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1028\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</p>\\n\"\n  syntax:\n    content: public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: Public MustOverride Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)\n  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)\n- uid: System.Text.Encoding.GetBytes(System.String)\n  commentId: M:System.Text.Encoding.GetBytes(System.String)\n  id: GetBytes(System.String)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String)\n  fullName: System.Text.Encoding.GetBytes(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1034\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetBytes(string s)\n    content.vb: Public Overridable Function GetBytes(s As String) As Byte()\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string containing the characters to encode. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing the results of encoding the specified set of characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetBytes(String)\n- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(String, Int32, Int32, Byte[], Int32)\n  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1049\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</p>\\n\"\n  syntax:\n    content: public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)\n    content.vb: Public Overridable Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer\n    parameters:\n    - id: s\n      type: System.String\n      description: \"\\n<p>The string containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>s</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetMaxByteCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)\n  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)\n  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)\n  id: GetCharCount(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte*, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1153\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public virtual int GetCharCount(byte *bytes, int count)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function GetCharCount(bytes As Byte *, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetCharCount(Byte*, Int32)\n- uid: System.Text.Encoding.GetCharCount(System.Byte[])\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  id: GetCharCount(System.Byte[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[])\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1133\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</p>\\n\"\n  syntax:\n    content: public virtual int GetCharCount(byte[] bytes)\n    content.vb: Public Overridable Function GetCharCount(bytes As Byte()) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetCharCount(System.Byte())\n  name.vb: GetCharCount(Byte())\n  nameWithType: Encoding.GetCharCount(Byte[])\n  nameWithType.vb: Encoding.GetCharCount(Byte())\n- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1148\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: public abstract int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: Public MustOverride Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte*, Int32, Char*, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1243\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public virtual int GetChars(byte *bytes, int byteCount, char *chars, int charCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Overridable Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char*\n      description: \"\\n<p>A pointer to the location at which to start writing the resulting set of characters. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters to write. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written at the location indicated by the <em>chars</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>charCount</em> is less than the resulting number of characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[])\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  id: GetChars(System.Byte[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[])\n  fullName: System.Text.Encoding.GetChars(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1189\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</p>\\n\"\n  syntax:\n    content: public virtual char[] GetChars(byte[] bytes)\n    content.vb: Public Overridable Function GetChars(bytes As Byte()) As Char()\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    return:\n      type: System.Char[]\n      description: \"\\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetChars(System.Byte())\n  name.vb: GetChars(Byte())\n  nameWithType: Encoding.GetChars(Byte[])\n  nameWithType.vb: Encoding.GetChars(Byte())\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1204\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</p>\\n\"\n  syntax:\n    content: public virtual char[] GetChars(byte[] bytes, int index, int count)\n    content.vb: Public Overridable Function GetChars(bytes As Byte(), index As Integer, count As Integer) As Char()\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Char[]\n      description: \"\\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32)\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)\n- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1222\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</p>\\n\"\n  syntax:\n    content: public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: Public MustOverride Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.Encoding.GetDecoder\n  commentId: M:System.Text.Encoding.GetDecoder\n  id: GetDecoder\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetDecoder()\n  fullName: System.Text.Encoding.GetDecoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDecoder\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1363\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</p>\\n\"\n  syntax:\n    content: public virtual Decoder GetDecoder()\n    content.vb: Public Overridable Function GetDecoder As Decoder\n    return:\n      type: System.Text.Decoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts an encoded sequence of bytes into a sequence of characters.</p>\\n\"\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.Encoding.GetChars(System.Byte[])\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetDecoder()\n- uid: System.Text.Encoding.GetEncoder\n  commentId: M:System.Text.Encoding.GetEncoder\n  id: GetEncoder\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoder()\n  fullName: System.Text.Encoding.GetEncoder()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoder\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1421\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\\n\"\n  syntax:\n    content: public virtual Encoder GetEncoder()\n    content.vb: Public Overridable Function GetEncoder As Encoder\n    return:\n      type: System.Text.Encoder\n      description: \"\\n<p>A <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetEncoder()\n- uid: System.Text.Encoding.GetEncoding(System.Int32)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)\n  id: GetEncoding(System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoding(Int32)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoding\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 403\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Returns the encoding associated with the specified code page identifier.</p>\\n\"\n  syntax:\n    content: public static Encoding GetEncoding(int codepage)\n    content.vb: Public Shared Function GetEncoding(codepage As Integer) As Encoding\n    parameters:\n    - id: codepage\n      type: System.Int32\n      description: \"\\n<p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class topic.</p>\\n<p>-or- </p>\\n<p>0 (zero), to use the default encoding. </p>\\n\"\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding that is associated with the specified code page.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>codepage</em> is less than zero or greater than 65535. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.CodePage\n    commentId: P:System.Text.Encoding.CodePage\n  - type: System.Text.Encoding.EncoderFallback\n    commentId: P:System.Text.Encoding.EncoderFallback\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoding.GetEncodings\n    commentId: M:System.Text.Encoding.GetEncodings\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Encoding.GetEncoding(Int32)\n- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  id: GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoding\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 534\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\\n\"\n  syntax:\n    content: public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)\n    content.vb: Public Shared Function GetEncoding(codepage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding\n    parameters:\n    - id: codepage\n      type: System.Int32\n      description: \"\\n<p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class topic.</p>\\n<p>-or- </p>\\n<p>0 (zero), to use the default encoding. </p>\\n\"\n    - id: encoderFallback\n      type: System.Text.EncoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\\n\"\n    - id: decoderFallback\n      type: System.Text.DecoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\\n\"\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding that is associated with the specified code page.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>codepage</em> is less than zero or greater than 65535. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>codepage</em> is not supported by the underlying platform. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.CodePage\n    commentId: P:System.Text.Encoding.CodePage\n  - type: System.Text.Encoding.EncoderFallback\n    commentId: P:System.Text.Encoding.EncoderFallback\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoding.GetEncodings\n    commentId: M:System.Text.Encoding.GetEncodings\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetEncoding(System.String)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String)\n  id: GetEncoding(System.String)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoding(String)\n  fullName: System.Text.Encoding.GetEncoding(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoding\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 646\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Returns the encoding associated with the specified code page name.</p>\\n\"\n  syntax:\n    content: public static Encoding GetEncoding(string name)\n    content.vb: Public Shared Function GetEncoding(name As String) As Encoding\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The code page name of the preferred encoding. Any value returned by the <xref href=\\\"System.Text.Encoding.WebName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class topic.</p>\\n\"\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding  associated with the specified code page.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is not a valid code page name.</p>\\n<p>-or- </p>\\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.EncoderFallback\n    commentId: P:System.Text.Encoding.EncoderFallback\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoding.GetEncodings\n    commentId: M:System.Text.Encoding.GetEncodings\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Encoding.GetEncoding(String)\n- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  id: GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetEncoding(String, EncoderFallback, DecoderFallback)\n  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEncoding\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 664\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\\n\"\n  syntax:\n    content: public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback)\n    content.vb: Public Shared Function GetEncoding(name As String, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The code page name of the preferred encoding. Any value returned by the <xref href=\\\"System.Text.Encoding.WebName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href=\\\"System.Text.Encoding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class topic.</p>\\n\"\n    - id: encoderFallback\n      type: System.Text.EncoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\\n\"\n    - id: decoderFallback\n      type: System.Text.DecoderFallback\n      description: \"\\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\\n\"\n    return:\n      type: System.Text.Encoding\n      description: \"\\n<p>The encoding that is associated with the specified code page.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is not a valid code page name.</p>\\n<p>-or- </p>\\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.EncoderFallback\n    commentId: P:System.Text.Encoding.EncoderFallback\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoding.GetEncodings\n    commentId: M:System.Text.Encoding.GetEncodings\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)\n- uid: System.Text.Encoding.GetHashCode\n  commentId: M:System.Text.Encoding.GetHashCode\n  id: GetHashCode\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Text.Encoding.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1545\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Returns the hash code for the current instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current instance.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Encoding.GetHashCode()\n- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)\n  id: GetMaxByteCount(System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxByteCount(Int32)\n  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxByteCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1437\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  syntax:\n    content: public abstract int GetMaxByteCount(int charCount)\n    content.vb: Public MustOverride Function GetMaxByteCount(charCount As Integer) As Integer\n    parameters:\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetBytes(System.Char[])\n    commentId: M:System.Text.Encoding.GetBytes(System.Char[])\n  - type: System.Text.Encoding.GetByteCount(System.Char[])\n    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])\n  - type: System.Text.Encoding.GetEncoder\n    commentId: M:System.Text.Encoding.GetEncoder\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Encoding.GetMaxByteCount(Int32)\n- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  id: GetMaxCharCount(System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetMaxCharCount(Int32)\n  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMaxCharCount\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1448\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  syntax:\n    content: public abstract int GetMaxCharCount(int byteCount)\n    content.vb: Public MustOverride Function GetMaxCharCount(byteCount As Integer) As Integer\n    parameters:\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte[])\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  - type: System.Text.Encoding.GetString(System.Byte[])\n    commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Encoding.GetMaxCharCount(Int32)\n- uid: System.Text.Encoding.GetPreamble\n  commentId: M:System.Text.Encoding.GetPreamble\n  id: GetPreamble\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetPreamble()\n  fullName: System.Text.Encoding.GetPreamble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPreamble\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 688\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</p>\\n\"\n  syntax:\n    content: public virtual byte[] GetPreamble()\n    content.vb: Public Overridable Function GetPreamble As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array containing a sequence of bytes that specifies the encoding used.</p>\\n<p>-or- </p>\\n<p>A byte array of length zero, if a preamble is not required.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoding.GetPreamble()\n- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)\n  id: GetString(System.Byte*,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte*, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1300\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ComVisible(false)]\n\n      public string GetString(byte *bytes, int byteCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ComVisible(False)>\n\n      Public Function GetString(bytes As Byte *, byteCount As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte*\n      description: \"\\n<p>A pointer to a byte array. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the results of decoding the specified sequence of bytes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is a null pointer. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteCount</em> is less than zero. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A   fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetChars(System.Byte[])\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Encoding.GetString(Byte*, Int32)\n- uid: System.Text.Encoding.GetString(System.Byte[])\n  commentId: M:System.Text.Encoding.GetString(System.Byte[])\n  id: GetString(System.Byte[])\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[])\n  fullName: System.Text.Encoding.GetString(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1454\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</p>\\n\"\n  syntax:\n    content: public virtual string GetString(byte[] bytes)\n    content.vb: Public Overridable Function GetString(bytes As Byte()) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The byte array contains invalid Unicode code points.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte[])\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetString(System.Byte())\n  name.vb: GetString(Byte())\n  nameWithType: Encoding.GetString(Byte[])\n  nameWithType.vb: Encoding.GetString(Byte())\n- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)\n  id: GetString(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: GetString(Byte[], Int32, Int32)\n  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetString\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 1470\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</p>\\n\"\n  syntax:\n    content: public virtual string GetString(byte[] bytes, int index, int count)\n    content.vb: Public Overridable Function GetString(bytes As Byte(), index As Integer, count As Integer) As String\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The byte array contains invalid Unicode code points.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoding.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoding.GetChars(System.Byte[])\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[])\n  - type: System.Text.Encoding.GetDecoder\n    commentId: M:System.Text.Encoding.GetDecoder\n  - type: System.Text.Encoding.GetCharCount(System.Byte[])\n    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])\n  - type: System.Text.Encoding.GetMaxCharCount(System.Int32)\n    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetString(Byte(), Int32, Int32)\n  nameWithType: Encoding.GetString(Byte[], Int32, Int32)\n  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)\n- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  id: RegisterProvider(System.Text.EncodingProvider)\n  parent: System.Text.Encoding\n  langs:\n  - csharp\n  - vb\n  name: RegisterProvider(EncodingProvider)\n  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RegisterProvider\n    path: src/mscorlib/src/System/Text/Encoding.cs\n    startLine: 397\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Registers an encoding provider. </p>\\n\"\n  syntax:\n    content: public static void RegisterProvider(EncodingProvider provider)\n    content.vb: Public Shared Sub RegisterProvider(provider As EncodingProvider)\n    parameters:\n    - id: provider\n      type: System.Text.EncodingProvider\n      description: \"\\n<p>A subclass of <xref href=\\\"System.Text.EncodingProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides access to additional character encodings. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>provider</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Text.CodePagesEncodingProvider\n    commentId: T:System.Text.CodePagesEncodingProvider\n  - type: System.Text.EncodingProvider\n    commentId: T:System.Text.EncodingProvider\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Encoding.RegisterProvider(EncodingProvider)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Text.EncoderFallback\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallback\n  fullName: System.Text.EncoderFallback\n  nameWithType: EncoderFallback\n  commentId: T:System.Text.EncoderFallback\n- uid: System.Text.DecoderFallback\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallback\n  fullName: System.Text.DecoderFallback\n  nameWithType: DecoderFallback\n  commentId: T:System.Text.DecoderFallback\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  nameWithType: Encoding\n  commentId: T:System.Text.Encoding\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.Text.Decoder\n  parent: System.Text\n  isExternal: false\n  name: Decoder\n  fullName: System.Text.Decoder\n  nameWithType: Decoder\n  commentId: T:System.Text.Decoder\n- uid: System.Text.Encoder\n  parent: System.Text\n  isExternal: false\n  name: Encoder\n  fullName: System.Text.Encoder\n  nameWithType: Encoder\n  commentId: T:System.Text.Encoder\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Text.EncodingProvider\n  parent: System.Text\n  isExternal: false\n  name: EncodingProvider\n  fullName: System.Text.EncodingProvider\n  nameWithType: EncodingProvider\n  commentId: T:System.Text.EncodingProvider\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}