{"nodes":[{"pos":[8393,8397],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[10224,10236],"content":"Task(Action)","needQuote":true,"nodes":[{"content":"Task(Action)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[11091,11163],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11282,11347],"source":"\\n<p>The <em>action</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[11900,11931],"content":"Task(Action, CancellationToken)","needQuote":true,"nodes":[{"content":"Task(Action, CancellationToken)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[12998,13070],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[13683,13731],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[14300,14352],"content":"Task(Action, CancellationToken, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Action, CancellationToken, TaskCreationOptions)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[15462,15534],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[16468,16516],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[17301,17334],"content":"Task(Action, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Action, TaskCreationOptions)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[18331,18403],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[18782,18830],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[19554,19582],"content":"Task(Action<Object>, Object)","needQuote":true,"nodes":[{"content":"Task(Action&lt;Object&gt;, Object)","pos":[0,28],"source":"Task(Action<Object>, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[20542,20614],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing data to be used by the action.&lt;/p&gt;\\n","pos":[20678,20742],"source":"\\n<p>An object representing data to be used by the action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[20861,20909],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[21842,21889],"content":"Task(Action<Object>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"Task(Action&lt;Object&gt;, Object, CancellationToken)","pos":[0,47],"source":"Task(Action<Object>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[22972,23044],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing data to be used by the action.&lt;/p&gt;\\n","pos":[23108,23172],"source":"\\n<p>An object representing data to be used by the action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[23843,23891],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[24832,24900],"content":"Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Action&lt;Object&gt;, Object, CancellationToken, TaskCreationOptions)","pos":[0,68],"source":"Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[26104,26176],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing data to be used by the action.&lt;/p&gt;\\n","pos":[26240,26304],"source":"\\n<p>An object representing data to be used by the action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[27244,27292],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[28535,28584],"content":"Task(Action<Object>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"Task(Action&lt;Object&gt;, Object, TaskCreationOptions)","pos":[0,49],"source":"Task(Action<Object>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that represents the code to execute in the task.&lt;/p&gt;\\n","pos":[29675,29747],"source":"\\n<p>The delegate that represents the code to execute in the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing data to be used by the action.&lt;/p&gt;\\n","pos":[29811,29875],"source":"\\n<p>An object representing data to be used by the action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[30262,30310],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[31212,31222],"content":"AsyncState","needQuote":true,"nodes":[{"content":"AsyncState","pos":[0,10]}]},{"pos":[32540,32553],"content":"CompletedTask","needQuote":true,"nodes":[{"content":"CompletedTask","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The successfully completed task.","pos":[33259,33296],"source":"\\n<p>The successfully completed task."},{"content":"&lt;/p&gt;\\n","pos":[33297,33303],"source":" </p>\\n"},{"pos":[33778,33793],"content":"CreationOptions","needQuote":true,"nodes":[{"content":"CreationOptions","pos":[0,15]}]},{"pos":[35070,35079],"content":"CurrentId","needQuote":true,"nodes":[{"content":"CurrentId","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An integer that was assigned by the system to the currently-executing task.&lt;/p&gt;\\n","pos":[35853,35939],"source":"\\n<p>An integer that was assigned by the system to the currently-executing task.</p>\\n"},{"pos":[36360,36369],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[37949,37956],"content":"Factory","needQuote":true,"nodes":[{"content":"Factory","pos":[0,7]}]},{"pos":[39516,39518],"content":"Id","needQuote":true,"nodes":[{"content":"Id","pos":[0,2]}]},{"pos":[40789,40799],"content":"IsCanceled","needQuote":true,"nodes":[{"content":"IsCanceled","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the task has completed due to being canceled; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41577,41694],"source":"\\n<p>\\n<strong>true</strong> if the task has completed due to being canceled; otherwise <strong>false</strong>.</p>\\n"},{"pos":[42000,42011],"content":"IsCompleted","needQuote":true,"nodes":[{"content":"IsCompleted","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the task has completed; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42752,42847],"source":"\\n<p>\\n<strong>true</strong> if the task has completed; otherwise <strong>false</strong>.</p>\\n"},{"pos":[43198,43207],"content":"IsFaulted","needQuote":true,"nodes":[{"content":"IsFaulted","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the task has thrown an unhandled exception; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43965,44080],"source":"\\n<p>\\n<strong>true</strong> if the task has thrown an unhandled exception; otherwise <strong>false</strong>.</p>\\n"},{"pos":[44370,44376],"content":"Status","needQuote":true,"nodes":[{"content":"Status","pos":[0,6]}]},{"pos":[45648,45676],"content":"IAsyncResult.AsyncWaitHandle","needQuote":true,"nodes":[{"content":"IAsyncResult.AsyncWaitHandle","pos":[0,28]}]},{"pos":[47554,47589],"content":"IAsyncResult.CompletedSynchronously","needQuote":true,"nodes":[{"content":"IAsyncResult.CompletedSynchronously","pos":[0,35]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation completed synchronously; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48438,48549],"source":"\\n<p>\\n<strong>true</strong> if the operation completed synchronously; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[49097,49120],"content":"ConfigureAwait(Boolean)","needQuote":true,"nodes":[{"content":"ConfigureAwait(Boolean)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to attempt to marshal the continuation back to the original context captured; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50004,50151],"source":"\\n<p>\\n<strong>true</strong> to attempt to marshal the continuation back to the original context captured; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An object used to await this task.&lt;/p&gt;\\n","pos":[50253,50298],"source":"\\n<p>An object used to await this task.</p>\\n"},{"pos":[50815,50857],"content":"ContinueWith(Action<Task, Object>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object)","pos":[0,42],"source":"ContinueWith(Action<Task, Object>, Object)"}]},{"content":"\\n&lt;p&gt;An action to run when the task completes.","pos":[52025,52071],"source":"\\n<p>An action to run when the task completes."},{"content":"When run, the delegate is passed the completed task and a caller-supplied state object as arguments.","pos":[52072,52172]},{"content":"&lt;/p&gt;\\n","pos":[52173,52179],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.","pos":[52243,52314],"source":"\\n<p>An object representing data to be used by the continuation action."},{"content":"&lt;/p&gt;\\n","pos":[52315,52321],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new continuation task.","pos":[52395,52424],"source":"\\n<p>A new continuation task."},{"content":"&lt;/p&gt;\\n","pos":[52425,52431],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52550,52627],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[53528,53589],"content":"ContinueWith(Action<Task, Object>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, CancellationToken)","pos":[0,61],"source":"ContinueWith(Action<Task, Object>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[55221,55298],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55867,55944],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[57444,57545],"content":"ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,101],"source":"ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[59493,59570],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60922,60999],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61412,61480],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[62970,63037],"content":"ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, TaskContinuationOptions)","pos":[0,67],"source":"ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[64720,64797],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65618,65695],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[67033,67090],"content":"ContinueWith(Action<Task, Object>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task, Object&gt;, Object, TaskScheduler)","pos":[0,57],"source":"ContinueWith(Action<Task, Object>, Object, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation action.&lt;/p&gt;\\n","pos":[68718,68795],"source":"\\n<p>An object representing data to be used by the continuation action.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69378,69455],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69560,69628],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[70423,70449],"content":"ContinueWith(Action<Task>)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;)","pos":[0,26],"source":"ContinueWith(Action<Task>)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[72012,72089],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[72828,72873],"content":"ContinueWith(Action<Task>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, CancellationToken)","pos":[0,45],"source":"ContinueWith(Action<Task>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[75134,75194],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[76278,76363],"content":"ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,85],"source":"ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An action to run according to the specified &lt;em&gt;continuationOptions&lt;/em&gt;.","pos":[77867,77945],"source":"\\n<p>An action to run according to the specified <em>continuationOptions</em>."},{"content":"When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[77946,78024],"source":" When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[79667,79789],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[81171,81222],"content":"ContinueWith(Action<Task>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, TaskContinuationOptions)","pos":[0,51],"source":"ContinueWith(Action<Task>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An action to run according to the specified &lt;em&gt;continuationOptions&lt;/em&gt;.","pos":[82443,82521],"source":"\\n<p>An action to run according to the specified <em>continuationOptions</em>."},{"content":"When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[82522,82600],"source":" When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[83421,83481],"source":"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n"},{"pos":[84657,84698],"content":"ContinueWith(Action<Task>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith(Action&lt;Task&gt;, TaskScheduler)","pos":[0,41],"source":"ContinueWith(Action<Task>, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[86900,86971],"source":"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[86972,87040],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[87772,87814],"content":"ContinueWith<TResult>(Func<Task, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;)","pos":[0,42],"source":"ContinueWith<TResult>(Func<Task, TResult>)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[89239,89312],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;A new continuation task.","pos":[89397,89426],"source":"\\n<p>A new continuation task."},{"content":"&lt;/p&gt;\\n","pos":[89427,89433],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[89782,89844],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[90671,90732],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken)","pos":[0,61],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[92589,92662],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[93392,93454],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[94626,94727],"content":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,101],"source":"ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;A function to run according to the specified &lt;em&gt;continuationOptions.&lt;/em&gt; When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[96222,96380],"source":"\\n<p>A function to run according to the specified <em>continuationOptions.</em> When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[97498,97571],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[98301,98425],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[99895,99962],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskContinuationOptions)","pos":[0,67],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;A function to run according to the condition specified in &lt;em&gt;continuationOptions&lt;/em&gt;.","pos":[101173,101265],"source":"\\n<p>A function to run according to the condition specified in <em>continuationOptions</em>."},{"content":"When run, the delegate will be passed the completed task as an argument.&lt;/p&gt;\\n","pos":[101266,101344],"source":" When run, the delegate will be passed the completed task as an argument.</p>\\n"},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[101914,101987],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[102541,102603],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"pos":[103867,103924],"content":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, TResult&gt;, TaskScheduler)","pos":[0,57],"source":"ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)"}]},{"content":"\\n&lt;p&gt; The type of the result produced by the continuation.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[105752,105825],"source":"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[106379,106503],"source":"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"pos":[107392,107450],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object)","pos":[0,58],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[109048,109127],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[109187,109250],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[109574,109653],"source":"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[110642,110719],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken)","pos":[0,77],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[112469,112548],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[112866,112929],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[113253,113332],"source":"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[114920,115037],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,117],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[117086,117165],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[118266,118329],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[118653,118732],"source":"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[119145,119213],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[120791,120874],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskContinuationOptions)","pos":[0,83],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[122641,122720],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[123290,123353],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[123677,123756],"source":"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[125182,125255],"content":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWith&lt;TResult&gt;(Func&lt;Task, Object, TResult&gt;, Object, TaskScheduler)","pos":[0,73],"source":"ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object representing data to be used by the continuation function.&lt;/p&gt;\\n","pos":[126970,127049],"source":"\\n<p>An object representing data to be used by the continuation function.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result produced by the continuation.&lt;/p&gt;\\n","pos":[127381,127444],"source":"\\n<p>The type of the result produced by the continuation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[127768,127847],"source":"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[127952,128020],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[128777,128789],"content":"Delay(Int32)","needQuote":true,"nodes":[{"content":"Delay(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","pos":[129505,129609],"source":"\\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely."},{"content":"&lt;/p&gt;\\n","pos":[129610,129616],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the time delay.","pos":[129690,129733],"source":"\\n<p>A task that represents the time delay."},{"content":"&lt;/p&gt;\\n","pos":[129734,129740],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;millisecondsDelay&lt;/em&gt; argument is less than -1.&lt;/p&gt;\\n","pos":[129871,129938],"source":"\\n<p>The <em>millisecondsDelay</em> argument is less than -1.</p>\\n"},{"pos":[130376,130407],"content":"Delay(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Delay(Int32, CancellationToken)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely.","pos":[131248,131352],"source":"\\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely."},{"content":"&lt;/p&gt;\\n","pos":[131353,131359],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be checked prior to completing the returned task.","pos":[131456,131543],"source":"\\n<p>The cancellation token that will be checked prior to completing the returned task."},{"content":"&lt;/p&gt;\\n","pos":[131544,131550],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the time delay.","pos":[131624,131667],"source":"\\n<p>A task that represents the time delay."},{"content":"&lt;/p&gt;\\n","pos":[131668,131674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;millisecondsDelay&lt;/em&gt; argument is less than -1.","pos":[131805,131866],"source":"\\n<p>The <em>millisecondsDelay</em> argument is less than -1."},{"content":"&lt;/p&gt;\\n","pos":[131867,131873],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.","pos":[132010,132042],"source":"\\n<p>The task has been canceled."},{"content":"&lt;/p&gt;\\n","pos":[132043,132049],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The provided &lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.","pos":[132158,132229],"source":"\\n<p>The provided <em>cancellationToken</em> has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[132230,132236],"source":" </p>\\n"},{"pos":[132597,132612],"content":"Delay(TimeSpan)","needQuote":true,"nodes":[{"content":"Delay(TimeSpan)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The time span to wait before completing the returned task, or &lt;strong&gt;TimeSpan.FromMilliseconds(-1)&lt;/strong&gt; to wait indefinitely.","pos":[133317,133452],"source":"\\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely."},{"content":"&lt;/p&gt;\\n","pos":[133453,133459],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the time delay.","pos":[133533,133576],"source":"\\n<p>A task that represents the time delay."},{"content":"&lt;/p&gt;\\n","pos":[133577,133583],"source":" </p>\\n"},{"pos":[134540,134574],"content":"Delay(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"Delay(TimeSpan, CancellationToken)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The time span to wait before completing the returned task, or &lt;strong&gt;TimeSpan.FromMilliseconds(-1)&lt;/strong&gt; to wait indefinitely.","pos":[135404,135539],"source":"\\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely."},{"content":"&lt;/p&gt;\\n","pos":[135540,135546],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be checked prior to completing the returned task.","pos":[135643,135730],"source":"\\n<p>The cancellation token that will be checked prior to completing the returned task."},{"content":"&lt;/p&gt;\\n","pos":[135731,135737],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the time delay.","pos":[135811,135854],"source":"\\n<p>A task that represents the time delay."},{"content":"&lt;/p&gt;\\n","pos":[135855,135861],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.&lt;/p&gt;\\n","pos":[136505,136543],"source":"\\n<p>The task has been canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The provided &lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.","pos":[136652,136723],"source":"\\n<p>The provided <em>cancellationToken</em> has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[136724,136730],"source":" </p>\\n"},{"pos":[137172,137203],"content":"FromCanceled(CancellationToken)","needQuote":true,"nodes":[{"content":"FromCanceled(CancellationToken)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The cancellation token with which to complete the task.","pos":[138136,138196],"source":"\\n<p>The cancellation token with which to complete the task."},{"content":"&lt;/p&gt;\\n","pos":[138197,138203],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The canceled task.","pos":[138277,138300],"source":"\\n<p>The canceled task."},{"content":"&lt;/p&gt;\\n","pos":[138301,138307],"source":" </p>\\n"},{"pos":[139124,139164],"content":"FromCanceled<TResult>(CancellationToken)","needQuote":true,"nodes":[{"content":"FromCanceled&lt;TResult&gt;(CancellationToken)","pos":[0,40],"source":"FromCanceled<TResult>(CancellationToken)"}]},{"content":"\\n&lt;p&gt;The cancellation token with which to complete the task.","pos":[140150,140210],"source":"\\n<p>The cancellation token with which to complete the task."},{"content":"&lt;/p&gt;\\n","pos":[140211,140217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result returned by the task.","pos":[140277,140326],"source":"\\n<p>The type of the result returned by the task."},{"content":"&lt;/p&gt;\\n","pos":[140327,140333],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The canceled task.","pos":[140418,140441],"source":"\\n<p>The canceled task."},{"content":"&lt;/p&gt;\\n","pos":[140442,140448],"source":" </p>\\n"},{"pos":[141441,141465],"content":"FromException(Exception)","needQuote":true,"nodes":[{"content":"FromException(Exception)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The exception with which to complete the task.","pos":[142300,142351],"source":"\\n<p>The exception with which to complete the task."},{"content":"&lt;/p&gt;\\n","pos":[142352,142358],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The faulted task.","pos":[142432,142454],"source":"\\n<p>The faulted task."},{"content":"&lt;/p&gt;\\n","pos":[142455,142461],"source":" </p>\\n"},{"pos":[142851,142884],"content":"FromException<TResult>(Exception)","needQuote":true,"nodes":[{"content":"FromException&lt;TResult&gt;(Exception)","pos":[0,33],"source":"FromException<TResult>(Exception)"}]},{"content":"\\n&lt;p&gt;The exception with which to complete the task.","pos":[143770,143821],"source":"\\n<p>The exception with which to complete the task."},{"content":"&lt;/p&gt;\\n","pos":[143822,143828],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result returned by the task.","pos":[143888,143937],"source":"\\n<p>The type of the result returned by the task."},{"content":"&lt;/p&gt;\\n","pos":[143938,143944],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The faulted task.","pos":[144029,144051],"source":"\\n<p>The faulted task."},{"content":"&lt;/p&gt;\\n","pos":[144052,144058],"source":" </p>\\n"},{"pos":[144605,144633],"content":"FromResult<TResult>(TResult)","needQuote":true,"nodes":[{"content":"FromResult&lt;TResult&gt;(TResult)","pos":[0,28],"source":"FromResult<TResult>(TResult)"}]},{"content":"\\n&lt;p&gt;The result to store into the completed task.","pos":[145491,145540],"source":"\\n<p>The result to store into the completed task."},{"content":"&lt;/p&gt;\\n","pos":[145541,145547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result returned by the task.","pos":[145607,145656],"source":"\\n<p>The type of the result returned by the task."},{"content":"&lt;/p&gt;\\n","pos":[145657,145663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The successfully completed task.&lt;/p&gt;\\n","pos":[145748,145791],"source":"\\n<p>The successfully completed task.</p>\\n"},{"pos":[146409,146421],"content":"GetAwaiter()","needQuote":true,"nodes":[{"content":"GetAwaiter()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An awaiter instance.&lt;/p&gt;\\n","pos":[147166,147197],"source":"\\n<p>An awaiter instance.</p>\\n"},{"pos":[147505,147516],"content":"Run(Action)","needQuote":true,"nodes":[{"content":"Run(Action)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[148450,148495],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the work queued to execute in the ThreadPool.&lt;/p&gt;\\n","pos":[148569,148648],"source":"\\n<p>A task that represents the work queued to execute in the ThreadPool.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[148767,148834],"source":"\\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\\n"},{"pos":[149268,149298],"content":"Run(Action, CancellationToken)","needQuote":true,"nodes":[{"content":"Run(Action, CancellationToken)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[150399,150444],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used to cancel the work&lt;/p&gt;\\n","pos":[150541,150608],"source":"\\n<p>A cancellation token that can be used to cancel the work</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the work queued to execute in the thread pool.&lt;/p&gt;\\n","pos":[150682,150762],"source":"\\n<p>A task that represents the work queued to execute in the thread pool.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[150881,150948],"source":"\\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.&lt;/p&gt;\\n","pos":[151085,151123],"source":"\\n<p>The task has been canceled.</p>\\n"},{"pos":[151833,151848],"content":"Run(Func<Task>)","needQuote":true,"nodes":[{"content":"Run(Func&lt;Task&gt;)","pos":[0,15],"source":"Run(Func<Task>)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[152664,152709],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents a proxy for the task returned by &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;\\n","pos":[152783,152868],"source":"\\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[152987,153056],"source":"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n"},{"pos":[153740,153774],"content":"Run(Func<Task>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run(Func&lt;Task&gt;, CancellationToken)","pos":[0,34],"source":"Run(Func<Task>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously.","pos":[154702,154742],"source":"\\n<p>The work to execute asynchronously."},{"content":"&lt;/p&gt;\\n","pos":[154743,154749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that should be used to cancel the work.","pos":[154846,154911],"source":"\\n<p>A cancellation token that should be used to cancel the work."},{"content":"&lt;/p&gt;\\n","pos":[154912,154918],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents a proxy for the task returned by &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;\\n","pos":[154992,155077],"source":"\\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[155196,155265],"source":"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.&lt;/p&gt;\\n","pos":[155402,155440],"source":"\\n<p>The task has been canceled.</p>\\n"},{"pos":[156330,156357],"content":"Run<TResult>(Func<TResult>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;)","pos":[0,27],"source":"Run<TResult>(Func<TResult>)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously.","pos":[157384,157424],"source":"\\n<p>The work to execute asynchronously."},{"content":"&lt;/p&gt;\\n","pos":[157425,157431],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The return type of the task.","pos":[157491,157524],"source":"\\n<p>The return type of the task."},{"content":"&lt;/p&gt;\\n","pos":[157525,157531],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task object that represents the work queued to execute in the thread pool.","pos":[157616,157697],"source":"\\n<p>A task object that represents the work queued to execute in the thread pool."},{"content":"&lt;/p&gt;\\n","pos":[157698,157704],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[157823,157885],"source":"\\n<p>The <em>function</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[157886,157892],"source":" </p>\\n"},{"pos":[158547,158593],"content":"Run<TResult>(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;TResult&gt;, CancellationToken)","pos":[0,46],"source":"Run<TResult>(Func<TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[159727,159772],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that should be used to cancel the work&lt;/p&gt;\\n","pos":[159869,159939],"source":"\\n<p>A cancellation token that should be used to cancel the work</p>\\n"},{"content":"\\n&lt;p&gt;The result type of the task.&lt;/p&gt;\\n","pos":[159999,160038],"source":"\\n<p>The result type of the task.</p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Task(TResult)&lt;/strong&gt; that represents the work queued to execute in the thread pool.&lt;/p&gt;\\n","pos":[160123,160229],"source":"\\n<p>A <strong>Task(TResult)</strong> that represents the work queued to execute in the thread pool.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[160348,160416],"source":"\\n<p>The <em>function</em> parameter is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.&lt;/p&gt;\\n","pos":[160553,160591],"source":"\\n<p>The task has been canceled.</p>\\n"},{"pos":[161602,161635],"content":"Run<TResult>(Func<Task<TResult>>)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;)","pos":[0,33],"source":"Run<TResult>(Func<Task<TResult>>)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[162568,162613],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result returned by the proxy task.&lt;/p&gt;\\n","pos":[162673,162734],"source":"\\n<p>The type of the result returned by the proxy task.</p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Task(TResult)&lt;/strong&gt; that represents a proxy for the &lt;strong&gt;Task(TResult)&lt;/strong&gt; returned by &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;\\n","pos":[162819,162956],"source":"\\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[163075,163144],"source":"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n"},{"pos":[163942,163994],"content":"Run<TResult>(Func<Task<TResult>>, CancellationToken)","needQuote":true,"nodes":[{"content":"Run&lt;TResult&gt;(Func&lt;Task&lt;TResult&gt;&gt;, CancellationToken)","pos":[0,52],"source":"Run<TResult>(Func<Task<TResult>>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The work to execute asynchronously&lt;/p&gt;\\n","pos":[165040,165085],"source":"\\n<p>The work to execute asynchronously</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that should be used to cancel the work&lt;/p&gt;\\n","pos":[165182,165252],"source":"\\n<p>A cancellation token that should be used to cancel the work</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result returned by the proxy task.&lt;/p&gt;\\n","pos":[165312,165373],"source":"\\n<p>The type of the result returned by the proxy task.</p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Task(TResult)&lt;/strong&gt; that represents a proxy for the &lt;strong&gt;Task(TResult)&lt;/strong&gt; returned by &lt;em&gt;function&lt;/em&gt;.&lt;/p&gt;\\n","pos":[165458,165595],"source":"\\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; parameter was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[165714,165783],"source":"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The task has been canceled.&lt;/p&gt;\\n","pos":[165920,165958],"source":"\\n<p>The task has been canceled.</p>\\n"},{"pos":[166914,166932],"content":"RunSynchronously()","needQuote":true,"nodes":[{"content":"RunSynchronously()","pos":[0,18]}]},{"pos":[168750,168781],"content":"RunSynchronously(TaskScheduler)","needQuote":true,"nodes":[{"content":"RunSynchronously(TaskScheduler)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The scheduler on which to attempt to run this task inline.&lt;/p&gt;\\n","pos":[169728,169797],"source":"\\n<p>The scheduler on which to attempt to run this task inline.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[170155,170223],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[171014,171021],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"pos":[172768,172788],"content":"Start(TaskScheduler)","needQuote":true,"nodes":[{"content":"Start(TaskScheduler)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[173986,174054],"source":"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The scheduler was unable to queue this task.&lt;/p&gt;\\n","pos":[174823,174878],"source":"\\n<p>The scheduler was unable to queue this task.</p>\\n"},{"pos":[175152,175158],"content":"Wait()","needQuote":true,"nodes":[{"content":"Wait()","pos":[0,6]}]},{"pos":[176936,176947],"content":"Wait(Int32)","needQuote":true,"nodes":[{"content":"Wait(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[178572,178688],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[179727,179757],"content":"Wait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(Int32, CancellationToken)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A cancellation token to observe while waiting for the task to complete.","pos":[181033,181109],"source":"\\n<p>A cancellation token to observe while waiting for the task to complete."},{"content":"&lt;/p&gt;\\n","pos":[181110,181116],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[181516,181571],"source":"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[181918,182034],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"pos":[183053,183076],"content":"Wait(CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(CancellationToken)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A cancellation token to observe while waiting for the task to complete.","pos":[183987,184063],"source":"\\n<p>A cancellation token to observe while waiting for the task to complete."},{"content":"&lt;/p&gt;\\n","pos":[184064,184070],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[184199,184254],"source":"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The task has been disposed.&lt;/p&gt;\\n","pos":[184363,184401],"source":"\\n<p>The task has been disposed.</p>\\n"},{"pos":[185356,185370],"content":"Wait(TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan)","pos":[0,14]}]},{"pos":[188322,188337],"content":"WaitAll(Task[])","needQuote":true,"nodes":[{"content":"WaitAll(Task[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[189818,189882],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is an empty array.&lt;/p&gt;\\n","pos":[189979,190110],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n"},{"pos":[191482,191504],"content":"WaitAll(Task[], Int32)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[193640,193704],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[194593,194709],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is an empty array.&lt;/p&gt;\\n","pos":[194806,194937],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n"},{"pos":[195658,195699],"content":"WaitAll(Task[], Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], Int32, CancellationToken)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[198244,198308],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[199196,199312],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is an empty array.&lt;/p&gt;\\n","pos":[199409,199540],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[199655,199704],"source":"\\n<p>The <em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[199705,199711],"source":" </p>\\n"},{"pos":[200486,200520],"content":"WaitAll(Task[], CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], CancellationToken)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[202139,202188],"source":"\\n<p>The <em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[202189,202195],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[202300,202364],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is an empty array.&lt;/p&gt;\\n","pos":[203232,203363],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n"},{"pos":[204317,204342],"content":"WaitAll(Task[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAll(Task[], TimeSpan)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[206553,206611],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[206612,206618],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is an empty array.&lt;/p&gt;\\n","pos":[207861,207992],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n"},{"pos":[208581,208596],"content":"WaitAny(Task[])","needQuote":true,"nodes":[{"content":"WaitAny(Task[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[210271,210335],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n","pos":[210432,210495],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n"},{"pos":[211076,211098],"content":"WaitAny(Task[], Int32)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The index of the completed task in the &lt;em&gt;tasks&lt;/em&gt; array argument, or -1 if the timeout occurred.&lt;/p&gt;\\n","pos":[212605,212716],"source":"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[213065,213129],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[213246,213362],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n","pos":[213459,213522],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n"},{"pos":[214243,214284],"content":"WaitAny(Task[], Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], Int32, CancellationToken)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The index of the completed task in the &lt;em&gt;tasks&lt;/em&gt; array argument, or -1 if the timeout occurred.&lt;/p&gt;\\n","pos":[216221,216332],"source":"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[216681,216745],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[216862,216978],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n","pos":[217075,217138],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.","pos":[217253,217302],"source":"\\n<p>The <em>cancellationToken</em> was canceled."},{"content":"&lt;/p&gt;\\n","pos":[217303,217309],"source":" </p>\\n"},{"pos":[218084,218118],"content":"WaitAny(Task[], CancellationToken)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], CancellationToken)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The index of the completed task in the &lt;em&gt;tasks&lt;/em&gt; array argument.&lt;/p&gt;\\n","pos":[219680,219760],"source":"\\n<p>The index of the completed task in the <em>tasks</em> array argument.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[220109,220173],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n","pos":[220270,220333],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[220448,220503],"source":"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n"},{"pos":[221186,221211],"content":"WaitAny(Task[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAny(Task[], TimeSpan)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The index of the completed task in the &lt;em&gt;tasks&lt;/em&gt; array argument, or -1 if the timeout occurred.&lt;/p&gt;\\n","pos":[222790,222901],"source":"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[223250,223314],"source":"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument contains a null element.&lt;/p&gt;\\n","pos":[223786,223849],"source":"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n"},{"pos":[224552,224578],"content":"WhenAll(IEnumerable<Task>)","needQuote":true,"nodes":[{"content":"WhenAll(IEnumerable&lt;Task&gt;)","pos":[0,26],"source":"WhenAll(IEnumerable<Task>)"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[225542,225589],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of all of the supplied tasks.","pos":[225663,225735],"source":"\\n<p>A task that represents the completion of all of the supplied tasks."},{"content":"&lt;/p&gt;\\n","pos":[225736,225742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.","pos":[225861,225920],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[225921,225927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; collection contained a &lt;strong&gt;null&lt;/strong&gt; task.&lt;/p&gt;\\n","pos":[226024,226104],"source":"\\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task.</p>\\n"},{"pos":[226726,226741],"content":"WhenAll(Task[])","needQuote":true,"nodes":[{"content":"WhenAll(Task[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[227607,227654],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of all of the supplied tasks.&lt;/p&gt;\\n","pos":[227728,227806],"source":"\\n<p>A task that represents the completion of all of the supplied tasks.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.","pos":[227925,227984],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[227985,227991],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a &lt;strong&gt;null&lt;/strong&gt; task.","pos":[228088,228157],"source":"\\n<p>The <em>tasks</em> array contained a <strong>null</strong> task."},{"content":"&lt;/p&gt;\\n","pos":[228158,228164],"source":" </p>\\n"},{"pos":[228844,228888],"content":"WhenAll<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAll<TResult>(IEnumerable<Task<TResult>>)"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.","pos":[229951,229992],"source":"\\n<p>The tasks to wait on for completion."},{"content":"&lt;/p&gt;\\n","pos":[229993,229999],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the completed task.","pos":[230059,230095],"source":"\\n<p>The type of the completed task."},{"content":"&lt;/p&gt;\\n","pos":[230096,230102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of all of the supplied tasks.","pos":[230189,230261],"source":"\\n<p>A task that represents the completion of all of the supplied tasks."},{"content":"&lt;/p&gt;\\n","pos":[230262,230268],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[230387,230452],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; collection contained a &lt;strong&gt;null&lt;/strong&gt; task.","pos":[230549,230623],"source":"\\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task."},{"content":"&lt;/p&gt;\\n","pos":[230624,230630],"source":" </p>\\n"},{"pos":[231366,231399],"content":"WhenAll<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAll&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAll<TResult>(Task<TResult>[])"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[232363,232410],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the completed task.&lt;/p&gt;\\n","pos":[232470,232512],"source":"\\n<p>The type of the completed task.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of all of the supplied tasks.&lt;/p&gt;\\n","pos":[232599,232677],"source":"\\n<p>A task that represents the completion of all of the supplied tasks.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[232796,232861],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a &lt;strong&gt;null&lt;/strong&gt; task.&lt;/p&gt;\\n","pos":[232958,233033],"source":"\\n<p>The <em>tasks</em> array contained a <strong>null</strong> task.</p>\\n"},{"pos":[233779,233805],"content":"WhenAny(IEnumerable<Task>)","needQuote":true,"nodes":[{"content":"WhenAny(IEnumerable&lt;Task&gt;)","pos":[0,26],"source":"WhenAny(IEnumerable<Task>)"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[234675,234722],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of one of the supplied tasks.","pos":[234825,234897],"source":"\\n<p>A task that represents the completion of one of the supplied tasks."},{"content":"The return task's Result is the task that completed.&lt;/p&gt;\\n","pos":[234899,234957],"source":"  The return task's Result is the task that completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[235076,235141],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a null task, or was empty.&lt;/p&gt;\\n","pos":[235238,235310],"source":"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n"},{"pos":[235932,235947],"content":"WhenAny(Task[])","needQuote":true,"nodes":[{"content":"WhenAny(Task[])","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[236734,236781],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of one of the supplied tasks.","pos":[236884,236956],"source":"\\n<p>A task that represents the completion of one of the supplied tasks."},{"content":"The return task's Result is the task that completed.&lt;/p&gt;\\n","pos":[236958,237016],"source":"  The return task's Result is the task that completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was null.&lt;/p&gt;\\n","pos":[237135,237183],"source":"\\n<p>The <em>tasks</em> argument was null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a null task, or was empty.&lt;/p&gt;\\n","pos":[237280,237352],"source":"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n"},{"pos":[238032,238076],"content":"WhenAny<TResult>(IEnumerable<Task<TResult>>)","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(IEnumerable&lt;Task&lt;TResult&gt;&gt;)","pos":[0,44],"source":"WhenAny<TResult>(IEnumerable<Task<TResult>>)"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[239038,239085],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the completed task.&lt;/p&gt;\\n","pos":[239145,239187],"source":"\\n<p>The type of the completed task.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of one of the supplied tasks.","pos":[239301,239373],"source":"\\n<p>A task that represents the completion of one of the supplied tasks."},{"content":"The return task's Result is the task that completed.&lt;/p&gt;\\n","pos":[239375,239433],"source":"  The return task's Result is the task that completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[239552,239617],"source":"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a null task, or was empty.&lt;/p&gt;\\n","pos":[239714,239786],"source":"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n"},{"pos":[240522,240555],"content":"WhenAny<TResult>(Task<TResult>[])","needQuote":true,"nodes":[{"content":"WhenAny&lt;TResult&gt;(Task&lt;TResult&gt;[])","pos":[0,33],"source":"WhenAny<TResult>(Task<TResult>[])"}]},{"content":"\\n&lt;p&gt;The tasks to wait on for completion.&lt;/p&gt;\\n","pos":[241434,241481],"source":"\\n<p>The tasks to wait on for completion.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the completed task.&lt;/p&gt;\\n","pos":[241541,241583],"source":"\\n<p>The type of the completed task.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the completion of one of the supplied tasks.","pos":[241697,241769],"source":"\\n<p>A task that represents the completion of one of the supplied tasks."},{"content":"The return task's Result is the task that completed.&lt;/p&gt;\\n","pos":[241771,241829],"source":"  The return task's Result is the task that completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; argument was null.&lt;/p&gt;\\n","pos":[241948,241996],"source":"\\n<p>The <em>tasks</em> argument was null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contained a null task, or was empty.&lt;/p&gt;\\n","pos":[242093,242165],"source":"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n"},{"pos":[242698,242705],"content":"Yield()","needQuote":true,"nodes":[{"content":"Yield()","pos":[0,7]}]},{"pos":[244017,244039],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[244218,244224],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[244375,244387],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[244565,244575],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[244670,244678],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[244747,244748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[244775,244776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[244846,244854],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[244923,244924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[244951,244952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[245135,245149],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[245268,245274],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[245341,245342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[245392,245398],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[245458,245459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[245542,245548],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[245615,245616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[245666,245672],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[245732,245733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[245947,245969],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[246117,246123],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[246190,246191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[246241,246247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[246308,246309]},{"pos":[246364,246370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[246430,246431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[246528,246534],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[246601,246602],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[246652,246658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[246719,246720]},{"pos":[246775,246781],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[246841,246842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[247087,247118],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[247284,247299],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[247375,247376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[247426,247432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[247493,247494]},{"pos":[247549,247555],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[247615,247616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[247722,247737],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[247813,247814],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[247864,247870],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[247931,247932]},{"pos":[247987,247993],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[248053,248054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[248284,248297],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[248398,248409],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[248481,248482],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[248509,248510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[248583,248594],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[248666,248667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[248694,248695],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[248870,248879],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[248972,248979],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[249047,249048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249075,249076],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249145,249152],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[249220,249221],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249248,249249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249424,249441],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[249550,249565],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[249641,249642],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249669,249670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[249747,249762],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[249838,249839],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[249866,249867],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[250012,250018],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[250149,250155],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[250331,250348],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[250532,250548],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[250754,250773],"content":"TaskCreationOptions","needQuote":true,"nodes":[{"content":"TaskCreationOptions","pos":[0,19]}]},{"pos":[251014,251028],"content":"Action<Object>","needQuote":true,"nodes":[{"content":"Action&lt;Object&gt;","pos":[0,14],"source":"Action<Object>"}]},{"pos":[251196,251202],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[251262,251263],"content":"<","needQuote":true,"nodes":[]},{"pos":[251313,251319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[251447,251453],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[251514,251517]},{"pos":[251574,251580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[251640,251641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[251821,251830],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[251969,251975],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[252014,252015],"content":"<","needQuote":true,"nodes":[]},{"pos":[252042,252043],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[252138,252144],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[252184,252187]},{"pos":[252221,252222],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[252249,252250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[252451,252461],"content":"AsyncState","needQuote":true,"nodes":[{"content":"AsyncState","pos":[0,10]}]},{"pos":[252687,252691],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[252890,252905],"content":"Nullable<Int32>","needQuote":true,"nodes":[{"content":"Nullable&lt;Int32&gt;","pos":[0,15],"source":"Nullable<Int32>"}]},{"pos":[253078,253086],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[253148,253149],"content":"<","needQuote":true,"nodes":[]},{"pos":[253198,253203],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[253332,253340],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[253403,253406]},{"pos":[253462,253467],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[253526,253527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[253729,253740],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[253887,253895],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[253936,253937],"content":"<","needQuote":true,"nodes":[]},{"pos":[253964,253965],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[254062,254070],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[254112,254115]},{"pos":[254149,254150],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[254177,254178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[254368,254386],"content":"AggregateException","needQuote":true,"nodes":[{"content":"AggregateException","pos":[0,18]}]},{"pos":[254604,254615],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"pos":[254806,254811],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[254954,254961],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[255139,255150],"content":"IsCompleted","needQuote":true,"nodes":[{"content":"IsCompleted","pos":[0,11]}]},{"pos":[255385,255395],"content":"TaskStatus","needQuote":true,"nodes":[{"content":"TaskStatus","pos":[0,10]}]},{"pos":[255618,255633],"content":"AsyncWaitHandle","needQuote":true,"nodes":[{"content":"AsyncWaitHandle","pos":[0,15]}]},{"pos":[255868,255878],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[256096,256118],"content":"CompletedSynchronously","needQuote":true,"nodes":[{"content":"CompletedSynchronously","pos":[0,22]}]},{"pos":[256417,256440],"content":"ConfiguredTaskAwaitable","needQuote":true,"nodes":[{"content":"ConfiguredTaskAwaitable","pos":[0,23]}]},{"pos":[256687,256718],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[256977,256997],"content":"Action<Task, Object>","needQuote":true,"nodes":[{"content":"Action&lt;Task, Object&gt;","pos":[0,20],"source":"Action<Task, Object>"}]},{"pos":[257229,257235],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[257295,257296],"content":"<","needQuote":true,"nodes":[]},{"pos":[257360,257364],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[257418,257419]},{"pos":[257474,257480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[257608,257614],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[257675,257678]},{"pos":[257749,257753],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[257807,257808]},{"pos":[257863,257869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[257929,257930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[258150,258164],"content":"Action<T1, T2>","needQuote":true,"nodes":[{"content":"Action&lt;T1, T2&gt;","pos":[0,14],"source":"Action<T1, T2>"}]},{"pos":[258318,258324],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[258363,258364],"content":"<","needQuote":true,"nodes":[]},{"pos":[258391,258393],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[258422,258423]},{"pos":[258455,258457],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[258553,258559],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[258599,258602]},{"pos":[258636,258638],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[258667,258668]},{"pos":[258700,258702],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"pos":[258730,258731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[258962,258985],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[259252,259265],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[259502,259514],"content":"Action<Task>","needQuote":true,"nodes":[{"content":"Action&lt;Task&gt;","pos":[0,12],"source":"Action<Task>"}]},{"pos":[259708,259714],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[259774,259775],"content":"<","needQuote":true,"nodes":[]},{"pos":[259839,259843],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[259964,259970],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[260031,260034]},{"pos":[260105,260109],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[260162,260163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[260413,260432],"content":"Func<Task, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task, TResult&gt;","pos":[0,19],"source":"Func<Task, TResult>"}]},{"pos":[260645,260649],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[260707,260708],"content":"<","needQuote":true,"nodes":[]},{"pos":[260772,260776],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[260830,260831]},{"pos":[260863,260870],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[260969,260973],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[261032,261035]},{"pos":[261106,261110],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[261164,261165]},{"pos":[261197,261204],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[261237,261238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[261524,261537],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[261734,261738],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[261791,261792],"content":"<","needQuote":true,"nodes":[]},{"pos":[261819,261826],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[261941,261945],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[261999,262002]},{"pos":[262036,262043],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[262076,262077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[262256,262272],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[262430,262434],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[262471,262472],"content":"<","needQuote":true,"nodes":[]},{"pos":[262499,262500],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[262528,262529]},{"pos":[262561,262568],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[262667,262671],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[262709,262712]},{"pos":[262746,262747],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[262775,262776]},{"pos":[262808,262815],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[262848,262849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[263032,263045],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[263242,263246],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[263299,263300],"content":"<","needQuote":true,"nodes":[]},{"pos":[263327,263334],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[263449,263453],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[263507,263510]},{"pos":[263544,263551],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[263584,263585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[263838,263865],"content":"Func<Task, Object, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task, Object, TResult&gt;","pos":[0,27],"source":"Func<Task, Object, TResult>"}]},{"pos":[264116,264120],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[264178,264179],"content":"<","needQuote":true,"nodes":[]},{"pos":[264243,264247],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[264301,264302]},{"pos":[264357,264363],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[264424,264425]},{"pos":[264457,264464],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[264563,264567],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[264626,264629]},{"pos":[264700,264704],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[264758,264759]},{"pos":[264814,264820],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[264881,264882]},{"pos":[264914,264921],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[264954,264955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[265189,265210],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[265383,265387],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[265424,265425],"content":"<","needQuote":true,"nodes":[]},{"pos":[265452,265454],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[265483,265484]},{"pos":[265516,265518],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[265547,265548]},{"pos":[265580,265587],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[265686,265690],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[265728,265731]},{"pos":[265765,265767],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[265796,265797]},{"pos":[265829,265831],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[265860,265861]},{"pos":[265893,265900],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[265933,265934],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[266130,266138],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[266292,266301],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[266438,266445],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[266558,266565],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[266731,266742],"content":"TaskAwaiter","needQuote":true,"nodes":[{"content":"TaskAwaiter","pos":[0,11]}]},{"pos":[266987,266997],"content":"Func<Task>","needQuote":true,"nodes":[{"content":"Func&lt;Task&gt;","pos":[0,10],"source":"Func<Task>"}]},{"pos":[267183,267187],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[267245,267246],"content":"<","needQuote":true,"nodes":[]},{"pos":[267310,267314],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[267433,267437],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[267496,267499]},{"pos":[267570,267574],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[267627,267628],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[267810,267823],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[267972,267976],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[268013,268014],"content":"<","needQuote":true,"nodes":[]},{"pos":[268041,268048],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[268147,268151],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[268189,268192]},{"pos":[268226,268233],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[268266,268267],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[268462,268475],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[268624,268628],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[268686,268687],"content":"<","needQuote":true,"nodes":[]},{"pos":[268714,268721],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[268820,268824],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[268883,268886]},{"pos":[268920,268927],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[268960,268961],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[269188,269207],"content":"Func<Task<TResult>>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TResult&gt;&gt;","pos":[0,19],"source":"Func<Task<TResult>>"}]},{"pos":[269426,269430],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[269488,269489],"content":"<","needQuote":true,"nodes":[]},{"pos":[269555,269559],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[269612,269613],"content":"<","needQuote":true,"nodes":[]},{"pos":[269640,269647],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[269778,269782],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[269841,269844]},{"pos":[269917,269921],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[269975,269978]},{"pos":[270012,270019],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[270052,270053],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270080,270081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[270285,270291],"content":"Task[]","needQuote":true,"nodes":[{"content":"Task[]","pos":[0,6]}]},{"pos":[270459,270463],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[270517,270519]},{"pos":[270598,270602],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[270655,270657],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[270899,270916],"content":"IEnumerable<Task>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Task&gt;","pos":[0,17],"source":"IEnumerable<Task>"}]},{"pos":[271190,271201],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[271286,271287],"content":"<","needQuote":true,"nodes":[]},{"pos":[271351,271355],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[271501,271512],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[271598,271601]},{"pos":[271672,271676],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[271729,271730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[271980,271994],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[272213,272224],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[272288,272289],"content":"<","needQuote":true,"nodes":[]},{"pos":[272316,272317],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[272437,272448],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[272513,272516]},{"pos":[272550,272551],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[272578,272579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[272782,272808],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[273119,273145],"content":"IEnumerable<Task<TResult>>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Task&lt;TResult&gt;&gt;","pos":[0,26],"source":"IEnumerable<Task<TResult>>"}]},{"pos":[273452,273463],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[273548,273549],"content":"<","needQuote":true,"nodes":[]},{"pos":[273615,273619],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[273672,273673],"content":"<","needQuote":true,"nodes":[]},{"pos":[273700,273707],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[273865,273876],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[273962,273965]},{"pos":[274038,274042],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[274096,274099]},{"pos":[274133,274140],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[274173,274174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[274201,274202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[274535,274550],"content":"Task<TResult[]>","needQuote":true,"nodes":[{"content":"Task&lt;TResult[]&gt;","pos":[0,15],"source":"Task<TResult[]>"}]},{"pos":[274753,274757],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[274810,274811],"content":"<","needQuote":true,"nodes":[]},{"pos":[274838,274845],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[274879,274881]},{"pos":[274994,274998],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[275052,275055]},{"pos":[275089,275096],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[275129,275131],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[275159,275160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[275353,275368],"content":"Task<TResult>[]","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;[]","pos":[0,15],"source":"Task<TResult>[]"}]},{"pos":[275571,275575],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[275628,275629],"content":"<","needQuote":true,"nodes":[]},{"pos":[275656,275663],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"content":"[]","pos":[275729,275731]},{"pos":[275812,275816],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[275870,275873]},{"pos":[275907,275914],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[275947,275948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[275975,275977],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[276214,276224],"content":"Task<Task>","needQuote":true,"nodes":[{"content":"Task&lt;Task&gt;","pos":[0,10],"source":"Task<Task>"}]},{"pos":[276458,276462],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[276515,276516],"content":"<","needQuote":true,"nodes":[]},{"pos":[276580,276584],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[276719,276723],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[276777,276780]},{"pos":[276851,276855],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[276908,276909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[277218,277237],"content":"Task<Task<TResult>>","needQuote":true,"nodes":[{"content":"Task&lt;Task&lt;TResult&gt;&gt;","pos":[0,19],"source":"Task<Task<TResult>>"}]},{"pos":[277504,277508],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[277561,277562],"content":"<","needQuote":true,"nodes":[]},{"pos":[277628,277632],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[277685,277686],"content":"<","needQuote":true,"nodes":[]},{"pos":[277713,277720],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[277867,277871],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[277925,277928]},{"pos":[278001,278005],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[278059,278062]},{"pos":[278096,278103],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[278136,278137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[278164,278165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[278464,278478],"content":"YieldAwaitable","needQuote":true,"nodes":[{"content":"YieldAwaitable","pos":[0,14]}]},{"pos":[278695,278716],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[278906,278929],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[279129,279156],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[279378,279399],"content":"TaskCanceledException","needQuote":true,"nodes":[{"content":"TaskCanceledException","pos":[0,21]}]},{"pos":[279640,279665],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[279882,279904],"content":"TaskSchedulerException","needQuote":true,"nodes":[{"content":"TaskSchedulerException","pos":[0,22]}]},{"pos":[280149,280175],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]},{"pos":[280391,280408],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.Tasks.Task\n  commentId: T:System.Threading.Tasks.Task\n  id: Task\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.Task.#ctor(System.Action)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.Task.AsyncState\n  - System.Threading.Tasks.Task.CompletedTask\n  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.CreationOptions\n  - System.Threading.Tasks.Task.CurrentId\n  - System.Threading.Tasks.Task.Delay(System.Int32)\n  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Exception\n  - System.Threading.Tasks.Task.Factory\n  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.FromException(System.Exception)\n  - System.Threading.Tasks.Task.FromException``1(System.Exception)\n  - System.Threading.Tasks.Task.FromResult``1(``0)\n  - System.Threading.Tasks.Task.GetAwaiter\n  - System.Threading.Tasks.Task.Id\n  - System.Threading.Tasks.Task.IsCanceled\n  - System.Threading.Tasks.Task.IsCompleted\n  - System.Threading.Tasks.Task.IsFaulted\n  - System.Threading.Tasks.Task.Run(System.Action)\n  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.RunSynchronously\n  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Start\n  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.Task.Status\n  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  - System.Threading.Tasks.Task.Wait\n  - System.Threading.Tasks.Task.Wait(System.Int32)\n  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  - System.Threading.Tasks.Task.Yield\n  langs:\n  - csharp\n  - vb\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Task\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 139\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Represents an asynchronous operation.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerTypeProxy(typeof (SystemThreadingTasks_TaskDebugView))]\n\n      [DebuggerDisplay(\"Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}\")]\n\n      public class Task : IThreadPoolWorkItem, IAsyncResult, IDisposable\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerTypeProxy(GetType(SystemThreadingTasks_TaskDebugView))>\n\n      <DebuggerDisplay(\"Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}\")>\n\n      Public Class Task\n          Implements IThreadPoolWorkItem, IAsyncResult, IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IAsyncResult\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Task\n- uid: System.Threading.Tasks.Task.#ctor(System.Action)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action)\n  id: '#ctor(System.Action)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action)\n  fullName: System.Threading.Tasks.Task.Task(System.Action)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 368\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action action)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action)\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task.Run(System.Action)\n    commentId: M:System.Threading.Tasks.Task.Run(System.Action)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Task(Action)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)\n  id: '#ctor(System.Action,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 386\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action and <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action action, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action, cancellationToken As CancellationToken)\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the new  task will observe.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Task(Action, CancellationToken)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action, CancellationToken, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 436\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action and creation options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the new task will observe.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Task(Action, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 409\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action and creation options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action action, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Task(Action, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)\n  id: '#ctor(System.Action{System.Object},System.Object)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action<Object>, Object)\n  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 453\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action and state.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action<object> action, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action(Of Object), state As Object)\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the action.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n    commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object)\n  name.vb: Task(Action(Of Object), Object)\n  nameWithType: Task.Task(Action<Object>, Object)\n  nameWithType.vb: Task.Task(Action(Of Object), Object)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action<Object>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 473\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action<object> action, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken)\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that that the new task will observe.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)\n  name.vb: Task(Action(Of Object), Object, CancellationToken)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken)\n  nameWithType.vb: Task.Task(Action(Of Object), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 525\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that that the new task will observe..</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)\n  nameWithType.vb: Task.Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Task(Action<Object>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 497\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified action, state, and options.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task(Action<object> action, object state, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Sub New(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The delegate that represents the code to execute in the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the action.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to customize the task's behavior.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: Task(Action(Of Object), Object, TaskCreationOptions)\n  nameWithType: Task.Task(Action<Object>, Object, TaskCreationOptions)\n  nameWithType.vb: Task.Task(Action(Of Object), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.Task.AsyncState\n  commentId: P:System.Threading.Tasks.Task.AsyncState\n  id: AsyncState\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: AsyncState\n  fullName: System.Threading.Tasks.Task.AsyncState\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsyncState\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1587\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the state object supplied when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was created, or null if none was supplied.</p>\\n\"\n  syntax:\n    content: public object AsyncState { get; }\n    content.vb: Public ReadOnly Property AsyncState As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the state data that was passed in to the task when it was created.</p>\\n\"\n  implements:\n  - System.IAsyncResult.AsyncState\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.AsyncState\n- uid: System.Threading.Tasks.Task.CompletedTask\n  commentId: P:System.Threading.Tasks.Task.CompletedTask\n  id: CompletedTask\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: CompletedTask\n  fullName: System.Threading.Tasks.Task.CompletedTask\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CompletedTask\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1627\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets a task that has already completed successfully. </p>\\n\"\n  syntax:\n    content: public static Task CompletedTask { get; }\n    content.vb: Public Shared ReadOnly Property CompletedTask As Task\n    parameters: []\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The successfully completed task. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task.FromResult``1(``0)\n    commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Task.CompletedTask\n- uid: System.Threading.Tasks.Task.CreationOptions\n  commentId: P:System.Threading.Tasks.Task.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: CreationOptions\n  fullName: System.Threading.Tasks.Task.CreationOptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1551\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to create this task.</p>\\n\"\n  syntax:\n    content: public TaskCreationOptions CreationOptions { get; }\n    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to create this task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.CreationOptions\n- uid: System.Threading.Tasks.Task.CurrentId\n  commentId: P:System.Threading.Tasks.Task.CurrentId\n  id: CurrentId\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: CurrentId\n  fullName: System.Threading.Tasks.Task.CurrentId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentId\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1332\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Returns the ID of the currently executing <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static int ? CurrentId { get; }\n    content.vb: Public Shared ReadOnly Property CurrentId As Integer?\n    parameters: []\n    return:\n      type: System.Nullable{System.Int32}\n      description: \"\\n<p>An integer that was assigned by the system to the currently-executing task.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task.Id\n    commentId: P:System.Threading.Tasks.Task.Id\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Task.CurrentId\n- uid: System.Threading.Tasks.Task.Exception\n  commentId: P:System.Threading.Tasks.Task.Exception\n  id: Exception\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Exception\n  fullName: System.Threading.Tasks.Task.Exception\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exception\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1393\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that caused the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to end prematurely. If the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completed successfully or has not yet thrown any exceptions, this will return <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: public AggregateException Exception { get; }\n    content.vb: Public ReadOnly Property Exception As AggregateException\n    parameters: []\n    return:\n      type: System.AggregateException\n      description: \"\\n<p>The <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that caused the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to end prematurely.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.Exception\n- uid: System.Threading.Tasks.Task.Factory\n  commentId: P:System.Threading.Tasks.Task.Factory\n  id: Factory\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Factory\n  fullName: System.Threading.Tasks.Task.Factory\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Factory\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1620\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides access to factory methods for creating and configuring <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances.</p>\\n\"\n  syntax:\n    content: public static TaskFactory Factory { get; }\n    content.vb: Public Shared ReadOnly Property Factory As TaskFactory\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskFactory\n      description: \"\\n<p>A factory object that can create a variety of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.TaskFactory\n    commentId: T:System.Threading.Tasks.TaskFactory\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Task.Factory\n- uid: System.Threading.Tasks.Task.Id\n  commentId: P:System.Threading.Tasks.Task.Id\n  id: Id\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Id\n  fullName: System.Threading.Tasks.Task.Id\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Id\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1315\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets an ID for this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public int Id { get; }\n    content.vb: Public ReadOnly Property Id As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The identifier that is assigned by the system to this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task.CurrentId\n    commentId: P:System.Threading.Tasks.Task.CurrentId\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.Id\n- uid: System.Threading.Tasks.Task.IsCanceled\n  commentId: P:System.Threading.Tasks.Task.IsCanceled\n  id: IsCanceled\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: IsCanceled\n  fullName: System.Threading.Tasks.Task.IsCanceled\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCanceled\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1449\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has completed execution due to being canceled.</p>\\n\"\n  syntax:\n    content: public bool IsCanceled { get; }\n    content.vb: Public ReadOnly Property IsCanceled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the task has completed due to being canceled; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.IsCanceled\n- uid: System.Threading.Tasks.Task.IsCompleted\n  commentId: P:System.Threading.Tasks.Task.IsCompleted\n  id: IsCompleted\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: IsCompleted\n  fullName: System.Threading.Tasks.Task.IsCompleted\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCompleted\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1525\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has completed.</p>\\n\"\n  syntax:\n    content: public bool IsCompleted { get; }\n    content.vb: Public ReadOnly Property IsCompleted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the task has completed; otherwise <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IAsyncResult.IsCompleted\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.IsCompleted\n- uid: System.Threading.Tasks.Task.IsFaulted\n  commentId: P:System.Threading.Tasks.Task.IsFaulted\n  id: IsFaulted\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: IsFaulted\n  fullName: System.Threading.Tasks.Task.IsFaulted\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFaulted\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1718\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets whether the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completed due to an unhandled exception.</p>\\n\"\n  syntax:\n    content: public bool IsFaulted { get; }\n    content.vb: Public ReadOnly Property IsFaulted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the task has thrown an unhandled exception; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.IsFaulted\n- uid: System.Threading.Tasks.Task.Status\n  commentId: P:System.Threading.Tasks.Task.Status\n  id: Status\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Status\n  fullName: System.Threading.Tasks.Task.Status\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Status\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1414\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.Tasks.TaskStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this task.</p>\\n\"\n  syntax:\n    content: public TaskStatus Status { get; }\n    content.vb: Public ReadOnly Property Status As TaskStatus\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskStatus\n      description: \"\\n<p>The current <xref href=\\\"System.Threading.Tasks.TaskStatus\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this task instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Task.Status\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle\n  id: System#IAsyncResult#AsyncWaitHandle\n  isEii: true\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: IAsyncResult.AsyncWaitHandle\n  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IAsyncResult.AsyncWaitHandle\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1568\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to wait for the task to complete.</p>\\n\"\n  syntax:\n    content: WaitHandle IAsyncResult.AsyncWaitHandle { get; }\n    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.AsyncWaitHandle As WaitHandle Implements IAsyncResult.AsyncWaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>A <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to wait for the task to complete.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  implements:\n  - System.IAsyncResult.AsyncWaitHandle\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.IAsyncResult.AsyncWaitHandle\n  nameWithType: Task.IAsyncResult.AsyncWaitHandle\n  nameWithType.vb: Task.System.IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  commentId: P:System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously\n  id: System#IAsyncResult#CompletedSynchronously\n  isEii: true\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: IAsyncResult.CompletedSynchronously\n  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.IAsyncResult.CompletedSynchronously\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1596\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets an indication of whether the operation completed synchronously.</p>\\n\"\n  syntax:\n    content: bool IAsyncResult.CompletedSynchronously { get; }\n    content.vb: ReadOnly WriteOnly Property System.IAsyncResult.CompletedSynchronously As Boolean Implements IAsyncResult.CompletedSynchronously\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation completed synchronously; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.IAsyncResult.CompletedSynchronously\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.IAsyncResult.CompletedSynchronously\n  nameWithType: Task.IAsyncResult.CompletedSynchronously\n  nameWithType.vb: Task.System.IAsyncResult.CompletedSynchronously\n- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  commentId: M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  id: ConfigureAwait(System.Boolean)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ConfigureAwait(Boolean)\n  fullName: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ConfigureAwait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 2914\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Configures an awaiter used to await this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)\n    content.vb: Public Function ConfigureAwait(continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable\n    parameters:\n    - id: continueOnCapturedContext\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to attempt to marshal the continuation back to the original context captured; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n      description: \"\\n<p>An object used to await this task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.ConfigureAwait(Boolean)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task, Object>, Object)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3928\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task, object> continuationAction, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: \"\\n<p>An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments. </p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation task. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object)\n  name.vb: ContinueWith(Action(Of Task, Object), Object)\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task, Object>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3956\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4068\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its  execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4022\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and executes when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation executes based on a set of specified conditions. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task, Object>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3986\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task,System.Object}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation action.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task, Object>, Object, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task, Object), Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task>)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3730\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task)) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task))\n  name.vb: ContinueWith(Action(Of Task))\n  nameWithType: Task.ContinueWith(Action<Task>)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task))\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3757\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created the token has already been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Action(Of Task), CancellationToken)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3866\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target task competes according to the specified <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The continuation receives a cancellation token and uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created the token has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3821\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes when the target task completes according to the specified <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Action(Of Task), TaskContinuationOptions)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith(Action<Task>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3786\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task\n    parameters:\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>An action to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Action(Of Task), TaskScheduler)\n  nameWithType: Task.ContinueWith(Action<Task>, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Action(Of Task), TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, TResult>)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4133\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation task. </p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult))\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4165\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. The continuation receives a cancellation token. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created the token has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4283\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>A function to run according to the specified <em>continuationOptions.</em> When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created the token has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4235\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes according to the specified continuation options and returns a value. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>A function to run according to the condition specified in <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4197\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. The continuation uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task as an argument.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p> The type of the result produced by the continuation.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4348\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments. </p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4381\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4502\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes based on the specified task continuation options when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its  execution.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4453\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes based on the specified task continuation options when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation receives caller-supplied state information. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as well as execution options, such as <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value for <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)\n- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWith\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4414\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation that executes asynchronously when the target <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n      description: \"\\n<p>A function to run when the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object representing data to be used by the continuation function.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to associate with the continuation task and to use for its execution.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result produced by the continuation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n  nameWithType: Task.ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)\n  nameWithType.vb: Task.ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32)\n  id: Delay(System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Delay(Int32)\n  fullName: System.Threading.Tasks.Task.Delay(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delay\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5825\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that completes after a time delay. </p>\\n\"\n  syntax:\n    content: public static Task Delay(int millisecondsDelay)\n    content.vb: Public Shared Function Delay(millisecondsDelay As Integer) As Task\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the time delay. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>millisecondsDelay</em> argument is less than -1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Delay(Int32)\n- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)\n  id: Delay(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Delay(Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Delay(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delay\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5847\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a cancellable task that completes after a time delay. </p>\\n\"\n  syntax:\n    content: public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken)\n    content.vb: Public Shared Function Delay(millisecondsDelay As Integer, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be checked prior to completing the returned task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the time delay. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>millisecondsDelay</em> argument is less than -1. </p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <em>cancellationToken</em> has already been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Delay(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  id: Delay(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Delay(TimeSpan)\n  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delay\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5781\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that completes after a specified time interval. </p>\\n\"\n  syntax:\n    content: public static Task Delay(TimeSpan delay)\n    content.vb: Public Shared Function Delay(delay As TimeSpan) As Task\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: \"\\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the time delay. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>delay</em> represents a negative time interval other than <strong>TimeSpan.FromMillseconds(-1)</strong>. </p>\\n<p>-or-</p>\\n<p>The <em>delay</em> argument's <xref href=\\\"System.TimeSpan.TotalMilliseconds\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Delay(TimeSpan)\n- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)\n  id: Delay(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Delay(TimeSpan, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delay\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5803\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a cancellable task that completes after a specified time interval. </p>\\n\"\n  syntax:\n    content: public static Task Delay(TimeSpan delay, CancellationToken cancellationToken)\n    content.vb: Public Shared Function Delay(delay As TimeSpan, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: \"\\n<p>The time span to wait before completing the returned task, or <strong>TimeSpan.FromMilliseconds(-1)</strong> to wait indefinitely. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be checked prior to completing the returned task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the time delay. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>delay</em> represents a negative time interval other than <strong>TimeSpan.FromMillseconds(-1)</strong>. </p>\\n<p>-or-</p>\\n<p>The <em>delay</em> argument's <xref href=\\\"System.TimeSpan.TotalMilliseconds\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <em>cancellationToken</em> has already been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Delay(TimeSpan, CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  id: FromCanceled(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: FromCanceled(CancellationToken)\n  fullName: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromCanceled\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5530\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that's completed due to cancellation with a specified cancellation token.</p>\\n\"\n  syntax:\n    content: public static Task FromCanceled(CancellationToken cancellationToken)\n    content.vb: Public Shared Function FromCanceled(cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token with which to complete the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The canceled task. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Cancellation has not been requested for <em>cancellationToken</em>; its <xref href=\\\"System.Threading.CancellationToken.IsCancellationRequested\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.FromCanceled(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)\n  id: FromCanceled``1(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: FromCanceled<TResult>(CancellationToken)\n  fullName: System.Threading.Tasks.Task.FromCanceled<TResult>(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromCanceled\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5542\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that's completed due to cancellation with a specified cancellation token.</p>\\n\"\n  syntax:\n    content: public static Task<TResult> FromCanceled<TResult>(CancellationToken cancellationToken)\n    content.vb: Public Shared Function FromCanceled(Of TResult)(cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token with which to complete the task. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result returned by the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The canceled task. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Cancellation has not been requested for <em>cancellationToken</em>; its <xref href=\\\"System.Threading.CancellationToken.IsCancellationRequested\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.FromCanceled(Of TResult)(System.Threading.CancellationToken)\n  name.vb: FromCanceled(Of TResult)(CancellationToken)\n  nameWithType: Task.FromCanceled<TResult>(CancellationToken)\n  nameWithType.vb: Task.FromCanceled(Of TResult)(CancellationToken)\n- uid: System.Threading.Tasks.Task.FromException(System.Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException(System.Exception)\n  id: FromException(System.Exception)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: FromException(Exception)\n  fullName: System.Threading.Tasks.Task.FromException(System.Exception)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromException\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5507\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has completed with a specified exception. </p>\\n\"\n  syntax:\n    content: public static Task FromException(Exception exception)\n    content.vb: Public Shared Function FromException(exception As Exception) As Task\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: \"\\n<p>The exception with which to complete the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The faulted task. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.FromException(Exception)\n- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)\n  commentId: M:System.Threading.Tasks.Task.FromException``1(System.Exception)\n  id: FromException``1(System.Exception)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: FromException<TResult>(Exception)\n  fullName: System.Threading.Tasks.Task.FromException<TResult>(System.Exception)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromException\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5516\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that's completed with a specified exception. </p>\\n\"\n  syntax:\n    content: public static Task<TResult> FromException<TResult>(Exception exception)\n    content.vb: Public Shared Function FromException(Of TResult)(exception As Exception) As Task(Of TResult)\n    parameters:\n    - id: exception\n      type: System.Exception\n      description: \"\\n<p>The exception with which to complete the task. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result returned by the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The faulted task. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.FromException(Of TResult)(System.Exception)\n  name.vb: FromException(Of TResult)(Exception)\n  nameWithType: Task.FromException<TResult>(Exception)\n  nameWithType.vb: Task.FromException(Of TResult)(Exception)\n- uid: System.Threading.Tasks.Task.FromResult``1(``0)\n  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)\n  id: FromResult``1(``0)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: FromResult<TResult>(TResult)\n  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromResult\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5498\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that's completed successfully with the specified result.</p>\\n\"\n  syntax:\n    content: public static Task<TResult> FromResult<TResult>(TResult result)\n    content.vb: Public Shared Function FromResult(Of TResult)(result As TResult) As Task(Of TResult)\n    parameters:\n    - id: result\n      type: '{TResult}'\n      description: \"\\n<p>The result to store into the completed task. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result returned by the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The successfully completed task.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.Task.CompletedTask\n    commentId: P:System.Threading.Tasks.Task.CompletedTask\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)\n  name.vb: FromResult(Of TResult)(TResult)\n  nameWithType: Task.FromResult<TResult>(TResult)\n  nameWithType.vb: Task.FromResult(Of TResult)(TResult)\n- uid: System.Threading.Tasks.Task.GetAwaiter\n  commentId: M:System.Threading.Tasks.Task.GetAwaiter\n  id: GetAwaiter\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: GetAwaiter()\n  fullName: System.Threading.Tasks.Task.GetAwaiter()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetAwaiter\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 2904\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets an awaiter used to await this <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public TaskAwaiter GetAwaiter()\n    content.vb: Public Function GetAwaiter As TaskAwaiter\n    return:\n      type: System.Runtime.CompilerServices.TaskAwaiter\n      description: \"\\n<p>An awaiter instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.GetAwaiter()\n- uid: System.Threading.Tasks.Task.Run(System.Action)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action)\n  id: Run(System.Action)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run(Action)\n  fullName: System.Threading.Tasks.Task.Run(System.Action)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5597\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents that work.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Task Run(Action action)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function Run(action As Action) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the work queued to execute in the ThreadPool.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Run(Action)\n- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)\n  id: Run(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run(Action, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run(System.Action, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5617\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents that work. A cancellation token allows the work to be cancelled.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Task Run(Action action, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function Run(action As Action, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used to cancel the work</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the work queued to execute in the thread pool.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> parameter was <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Run(Action, CancellationToken)\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})\n  id: Run(System.Func{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run(Func<Task>)\n  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5670\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a proxy for the  task returned by <em>function</em>.</p>\\n\"\n  syntax:\n    content: public static Task Run(Func<Task> function)\n    content.vb: Public Shared Function Run(function As Func(Of Task)) As Task\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task}\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task))\n  name.vb: Run(Func(Of Task))\n  nameWithType: Task.Run(Func<Task>)\n  nameWithType.vb: Task.Run(Func(Of Task))\n- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run(Func<Task>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5689\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a proxy for the task returned by <em>function</em>.</p>\\n\"\n  syntax:\n    content: public static Task Run(Func<Task> function, CancellationToken cancellationToken)\n    content.vb: Public Shared Function Run(function As Func(Of Task), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task}\n      description: \"\\n<p>The work to execute asynchronously. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that should be used to cancel the work. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents a proxy for the task returned by <em>function</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)\n  name.vb: Run(Func(Of Task), CancellationToken)\n  nameWithType: Task.Run(Func<Task>, CancellationToken)\n  nameWithType.vb: Task.Run(Func(Of Task), CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})\n  id: Run``1(System.Func{``0})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run<TResult>(Func<TResult>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5633\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents that work. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Task<TResult> Run<TResult>(Func<TResult> function)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function Run(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The work to execute asynchronously. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The return type of the task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A task object that represents the work queued to execute in the thread pool. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))\n  name.vb: Run(Of TResult)(Func(Of TResult))\n  nameWithType: Task.Run<TResult>(Func<TResult>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult))\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)\n  id: Run``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run<TResult>(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5653\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a <strong>Task(TResult)</strong> object that represents that work. A cancellation token allows the work to be cancelled.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function Run(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that should be used to cancel the work</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The result type of the task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <strong>Task(TResult)</strong> that represents the work queued to execute in the thread pool.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter is <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<TResult>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of TResult), CancellationToken)\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run<TResult>(Func<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5724\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n\"\n  syntax:\n    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function)\n    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult))) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result returned by the proxy task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)))\n- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Run\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5740\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues the specified work to run on the thread pool and returns a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n\"\n  syntax:\n    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken)\n    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>The work to execute asynchronously</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that should be used to cancel the work</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result returned by the proxy task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <strong>Task(TResult)</strong> that represents a proxy for the <strong>Task(TResult)</strong> returned by <em>function</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> parameter was <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.Tasks.TaskCanceledException\n    commentId: T:System.Threading.Tasks.TaskCanceledException\n    description: \"\\n<p>The task has been canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with <em>cancellationToken</em> was disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)\n  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n  nameWithType: Task.Run<TResult>(Func<Task<TResult>>, CancellationToken)\n  nameWithType.vb: Task.Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)\n- uid: System.Threading.Tasks.Task.RunSynchronously\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously\n  id: RunSynchronously\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: RunSynchronously()\n  fullName: System.Threading.Tasks.Task.RunSynchronously()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RunSynchronously\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1121\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Runs the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> synchronously on the current <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void RunSynchronously()\n    content.vb: Public Sub RunSynchronously\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.RunSynchronously()\n- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: RunSynchronously(TaskScheduler)\n  fullName: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RunSynchronously\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1149\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Runs the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> synchronously on the <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> provided.</p>\\n\"\n  syntax:\n    content: public void RunSynchronously(TaskScheduler scheduler)\n    content.vb: Public Sub RunSynchronously(scheduler As TaskScheduler)\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The scheduler on which to attempt to run this task inline.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\\n\"\n  seealso:\n  - type: System.Threading.Tasks.TaskScheduler\n    commentId: T:System.Threading.Tasks.TaskScheduler\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.RunSynchronously(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Start\n  commentId: M:System.Threading.Tasks.Task.Start\n  id: Start\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Start()\n  fullName: System.Threading.Tasks.Task.Start()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Start\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1036\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Starts the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, scheduling it for execution to the current <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Start()\n    content.vb: Public Sub Start\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been disposed.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Start()\n- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  id: Start(System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Start(TaskScheduler)\n  fullName: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Start\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 1061\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Starts the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, scheduling it for execution to the specified <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Start(TaskScheduler scheduler)\n    content.vb: Public Sub Start(scheduler As TaskScheduler)\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with which to associate and execute this task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance has been disposed.</p>\\n\"\n  - type: System.Threading.Tasks.TaskSchedulerException\n    commentId: T:System.Threading.Tasks.TaskSchedulerException\n    description: \"\\n<p>The scheduler was unable to queue this task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Start(TaskScheduler)\n- uid: System.Threading.Tasks.Task.Wait\n  commentId: M:System.Threading.Tasks.Task.Wait\n  id: Wait\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Wait()\n  fullName: System.Threading.Tasks.Task.Wait()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3013\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to complete execution.</p>\\n\"\n  syntax:\n    content: public void Wait()\n    content.vb: Public Sub Wait\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Wait()\n- uid: System.Threading.Tasks.Task.Wait(System.Int32)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32)\n  fullName: System.Threading.Tasks.Task.Wait(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3092\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to complete execution within a specified number of milliseconds.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Wait(Int32)\n- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.Wait(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3122\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes. </p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token to observe while waiting for the task to complete. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Wait(Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Wait(CancellationToken)\n  fullName: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3069\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes. </p>\\n\"\n  syntax:\n    content: public void Wait(CancellationToken cancellationToken)\n    content.vb: Public Sub Wait(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token to observe while waiting for the task to complete. </p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The task has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Wait(CancellationToken)\n- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan)\n  fullName: System.Threading.Tasks.Task.Wait(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3044\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to complete execution within a specified time interval.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout)\n    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>The task was canceled. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains a <xref href=\\\"System.Threading.Tasks.TaskCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of the task. The <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection contains information about the exception or exceptions. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Task.Wait(TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  id: WaitAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(Task[])\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4866\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for all of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static void WaitAll(params Task[] tasks)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Sub WaitAll(ParamArray tasks As Task())\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One or more of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in <em>tasks</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception contains an <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception in its <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task())\n  name.vb: WaitAll(Task())\n  nameWithType: Task.WaitAll(Task[])\n  nameWithType.vb: Task.WaitAll(Task())\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(Task[], Int32)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4947\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for all of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified number of milliseconds.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static bool WaitAll(Task[] tasks, int millisecondsTimeout)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n<p></p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if all of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One or more of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in <em>tasks</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection. </p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32)\n  name.vb: WaitAll(Task(), Int32)\n  nameWithType: Task.WaitAll(Task[], Int32)\n  nameWithType.vb: Task.WaitAll(Task(), Int32)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(Task[], Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5019\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for all of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe while waiting for the tasks to complete.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if all of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One or more of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in <em>tasks</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)\n  name.vb: WaitAll(Task(), Int32, CancellationToken)\n  nameWithType: Task.WaitAll(Task[], Int32, CancellationToken)\n  nameWithType.vb: Task.WaitAll(Task(), Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(Task[], CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4979\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for all of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution unless the wait is cancelled. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static void WaitAll(Task[] tasks, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Sub WaitAll(tasks As Task(), cancellationToken As CancellationToken)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe while waiting for the tasks to complete.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One or more of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in <em>tasks</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Threading.CancellationToken)\n  name.vb: WaitAll(Task(), CancellationToken)\n  nameWithType: Task.WaitAll(Task[], CancellationToken)\n  nameWithType.vb: Task.WaitAll(Task(), CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAll(Task[], TimeSpan)\n  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 4908\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for all of the provided cancellable <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified time interval.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static bool WaitAll(Task[] tasks, TimeSpan timeout)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAll(tasks As Task(), timeout As TimeSpan) As Boolean\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if all of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances completed execution within the allotted time; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One or more of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in <em>tasks</em> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>. </p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>At least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances was canceled. If a task was canceled, the <xref href=\\\"System.AggregateException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an <xref href=\\\"System.OperationCanceledException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in its <xref href=\\\"System.AggregateException.InnerExceptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> collection.</p>\\n<p>-or-</p>\\n<p>An exception was thrown during the execution of at least one of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> argument is an empty array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.TimeSpan)\n  name.vb: WaitAll(Task(), TimeSpan)\n  nameWithType: Task.WaitAll(Task[], TimeSpan)\n  nameWithType.vb: Task.WaitAll(Task(), TimeSpan)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  id: WaitAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(Task[])\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5302\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for any of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static int WaitAny(params Task[] tasks)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAny(ParamArray tasks As Task()) As Integer\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the completed <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object in the <em>tasks</em> array.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task())\n  name.vb: WaitAny(Task())\n  nameWithType: Task.WaitAny(Task[])\n  nameWithType.vb: Task.WaitAny(Task())\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(Task[], Int32)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5398\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for any of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified number of milliseconds.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static int WaitAny(Task[] tasks, int millisecondsTimeout)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer) As Integer\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32)\n  name.vb: WaitAny(Task(), Int32)\n  nameWithType: Task.WaitAny(Task[], Int32)\n  nameWithType.vb: Task.WaitAny(Task(), Int32)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(Task[], Int32, CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5434\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for any of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait. </p>\\n\"\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe while waiting for a task to complete. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)\n  name.vb: WaitAny(Task(), Int32, CancellationToken)\n  nameWithType: Task.WaitAny(Task[], Int32, CancellationToken)\n  nameWithType.vb: Task.WaitAny(Task(), Int32, CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(Task[], CancellationToken)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5368\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for any of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution unless the wait is cancelled.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static int WaitAny(Task[] tasks, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAny(tasks As Task(), cancellationToken As CancellationToken) As Integer\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait. </p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe while waiting for a task to complete. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the completed task in the <em>tasks</em> array argument.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>The <em>cancellationToken</em> was canceled.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Threading.CancellationToken)\n  name.vb: WaitAny(Task(), CancellationToken)\n  nameWithType: Task.WaitAny(Task[], CancellationToken)\n  nameWithType.vb: Task.WaitAny(Task(), CancellationToken)\n- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WaitAny(Task[], TimeSpan)\n  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5335\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Waits for any of the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to complete execution within a specified time interval.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoOptimization)]\n\n      public static int WaitAny(Task[] tasks, TimeSpan timeout)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoOptimization)>\n\n      Public Shared Function WaitAny(tasks As Task(), timeout As TimeSpan) As Integer\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances on which to wait.</p>\\n\"\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>\\n<em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> argument contains a null element.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.TimeSpan)\n  name.vb: WaitAny(Task(), TimeSpan)\n  nameWithType: Task.WaitAny(Task[], TimeSpan)\n  nameWithType.vb: Task.WaitAny(Task(), TimeSpan)\n- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAll(IEnumerable<Task>)\n  fullName: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 5967\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when all of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in an enumerable collection have completed.</p>\\n\"\n  syntax:\n    content: public static Task WhenAll(IEnumerable<Task> tasks)\n    content.vb: Public Shared Function WhenAll(tasks As IEnumerable(Of Task)) As Task\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the completion of all of the supplied tasks. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))\n  name.vb: WhenAll(IEnumerable(Of Task))\n  nameWithType: Task.WhenAll(IEnumerable<Task>)\n  nameWithType.vb: Task.WhenAll(IEnumerable(Of Task))\n- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  id: WhenAll(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAll(Task[])\n  fullName: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6030\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when all of the <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in an array have completed. </p>\\n\"\n  syntax:\n    content: public static Task WhenAll(params Task[] tasks)\n    content.vb: Public Shared Function WhenAll(ParamArray tasks As Task()) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A task that represents the completion of all of the supplied tasks.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a <strong>null</strong> task. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task())\n  name.vb: WhenAll(Task())\n  nameWithType: Task.WhenAll(Task[])\n  nameWithType.vb: Task.WhenAll(Task())\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6218\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when all of the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in an enumerable collection have completed. </p>\\n\"\n  syntax:\n    content: public static Task<TResult[]> WhenAll<TResult>(IEnumerable<Task<TResult>> tasks)\n    content.vb: Public Shared Function WhenAll(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of TResult())\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>The tasks to wait on for completion. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the completed task. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}[]}\n      description: \"\\n<p>A task that represents the completion of all of the supplied tasks. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> collection contained a <strong>null</strong> task. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  nameWithType: Task.WhenAll<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAll(Of TResult)(IEnumerable(Of Task(Of TResult)))\n- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAll<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6284\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when all of the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects in an array have completed. </p>\\n\"\n  syntax:\n    content: public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks)\n    content.vb: Public Shared Function WhenAll(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TResult}}[]\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the completed task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}[]}\n      description: \"\\n<p>A task that represents the completion of all of the supplied tasks.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a <strong>null</strong> task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAll(Of TResult)(Task(Of TResult)())\n  nameWithType: Task.WhenAll<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAll(Of TResult)(Task(Of TResult)())\n- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAny(IEnumerable<Task>)\n  fullName: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6496\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\\n\"\n  syntax:\n    content: public static Task<Task> WhenAny(IEnumerable<Task> tasks)\n    content.vb: Public Shared Function WhenAny(tasks As IEnumerable(Of Task)) As Task(Of Task)\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: \"\\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))\n  name.vb: WhenAny(IEnumerable(Of Task))\n  nameWithType: Task.WhenAny(IEnumerable<Task>)\n  nameWithType.vb: Task.WhenAny(IEnumerable(Of Task))\n- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  id: WhenAny(System.Threading.Tasks.Task[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAny(Task[])\n  fullName: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6457\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\\n\"\n  syntax:\n    content: public static Task<Task> WhenAny(params Task[] tasks)\n    content.vb: Public Shared Function WhenAny(ParamArray tasks As Task()) As Task(Of Task)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n      description: \"\\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task())\n  name.vb: WhenAny(Task())\n  nameWithType: Task.WhenAny(Task[])\n  nameWithType.vb: Task.WhenAny(Task())\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6563\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\\n\"\n  syntax:\n    content: public static Task<Task<TResult>> WhenAny<TResult>(IEnumerable<Task<TResult>> tasks)\n    content.vb: Public Shared Function WhenAny(Of TResult)(tasks As IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))\n    parameters:\n    - id: tasks\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the completed task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))\n  name.vb: WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n  nameWithType: Task.WhenAny<TResult>(IEnumerable<Task<TResult>>)\n  nameWithType.vb: Task.WhenAny(Of TResult)(IEnumerable(Of Task(Of TResult)))\n- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: WhenAny<TResult>(Task<TResult>[])\n  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 6534\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that will complete when any of the supplied tasks have completed.</p>\\n\"\n  syntax:\n    content: public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks)\n    content.vb: Public Shared Function WhenAny(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TResult}}[]\n      description: \"\\n<p>The tasks to wait on for completion.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the completed task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}\n      description: \"\\n<p>A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> argument was null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contained a null task, or was empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())\n  name.vb: WhenAny(Of TResult)(Task(Of TResult)())\n  nameWithType: Task.WhenAny<TResult>(Task<TResult>[])\n  nameWithType.vb: Task.WhenAny(Of TResult)(Task(Of TResult)())\n- uid: System.Threading.Tasks.Task.Yield\n  commentId: M:System.Threading.Tasks.Task.Yield\n  id: Yield\n  parent: System.Threading.Tasks.Task\n  langs:\n  - csharp\n  - vb\n  name: Yield()\n  fullName: System.Threading.Tasks.Task.Yield()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Yield\n    path: src/mscorlib/src/System/Threading/Tasks/Task.cs\n    startLine: 3000\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates an awaitable task that asynchronously yields back to the current context when awaited.</p>\\n\"\n  syntax:\n    content: public static YieldAwaitable Yield()\n    content.vb: Public Shared Function Yield As YieldAwaitable\n    return:\n      type: System.Runtime.CompilerServices.YieldAwaitable\n      description: \"\\n<p>A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href=\\\"System.Threading.SynchronizationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Task.Yield()\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  fullName: System.IAsyncResult\n  nameWithType: IAsyncResult\n  commentId: T:System.IAsyncResult\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  fullName: System.Action\n  nameWithType: Action\n  commentId: T:System.Action\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  commentId: T:System.Threading.Tasks.TaskCreationOptions\n- uid: System.Action{System.Object}\n  parent: System\n  definition: System.Action`1\n  name: Action<Object>\n  fullName: System.Action<System.Object>\n  fullname.vb: System.Action(Of System.Object)\n  name.vb: Action(Of Object)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Object>\n  nameWithType.vb: Action(Of Object)\n  commentId: T:System.Action{System.Object}\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n  commentId: T:System.Action`1\n- uid: System.IAsyncResult.AsyncState\n  parent: System.IAsyncResult\n  isExternal: true\n  name: AsyncState\n  fullName: System.IAsyncResult.AsyncState\n  nameWithType: IAsyncResult.AsyncState\n  commentId: P:System.IAsyncResult.AsyncState\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Nullable{System.Int32}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<Int32>\n  fullName: System.Nullable<System.Int32>\n  fullname.vb: System.Nullable(Of System.Int32)\n  name.vb: Nullable(Of Int32)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Nullable<Int32>\n  nameWithType.vb: Nullable(Of Int32)\n  commentId: T:System.Nullable{System.Int32}\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n  commentId: T:System.Nullable`1\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  fullName: System.AggregateException\n  nameWithType: AggregateException\n  commentId: T:System.AggregateException\n- uid: System.Threading.Tasks.TaskFactory\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskFactory\n  fullName: System.Threading.Tasks.TaskFactory\n  nameWithType: TaskFactory\n  commentId: T:System.Threading.Tasks.TaskFactory\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IAsyncResult.IsCompleted\n  parent: System.IAsyncResult\n  isExternal: true\n  name: IsCompleted\n  fullName: System.IAsyncResult.IsCompleted\n  nameWithType: IAsyncResult.IsCompleted\n  commentId: P:System.IAsyncResult.IsCompleted\n- uid: System.Threading.Tasks.TaskStatus\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskStatus\n  fullName: System.Threading.Tasks.TaskStatus\n  nameWithType: TaskStatus\n  commentId: T:System.Threading.Tasks.TaskStatus\n- uid: System.IAsyncResult.AsyncWaitHandle\n  parent: System.IAsyncResult\n  isExternal: true\n  name: AsyncWaitHandle\n  fullName: System.IAsyncResult.AsyncWaitHandle\n  nameWithType: IAsyncResult.AsyncWaitHandle\n  commentId: P:System.IAsyncResult.AsyncWaitHandle\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IAsyncResult.CompletedSynchronously\n  parent: System.IAsyncResult\n  isExternal: true\n  name: CompletedSynchronously\n  fullName: System.IAsyncResult.CompletedSynchronously\n  nameWithType: IAsyncResult.CompletedSynchronously\n  commentId: P:System.IAsyncResult.CompletedSynchronously\n- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: ConfiguredTaskAwaitable\n  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n  nameWithType: ConfiguredTaskAwaitable\n  commentId: T:System.Runtime.CompilerServices.ConfiguredTaskAwaitable\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Action{System.Threading.Tasks.Task,System.Object}\n  parent: System\n  definition: System.Action`2\n  name: Action<Task, Object>\n  fullName: System.Action<System.Threading.Tasks.Task, System.Object>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task, System.Object)\n  name.vb: Action(Of Task, Object)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Task, Object>\n  nameWithType.vb: Action(Of Task, Object)\n  commentId: T:System.Action{System.Threading.Tasks.Task,System.Object}\n- uid: System.Action`2\n  isExternal: false\n  name: Action<T1, T2>\n  fullName: System.Action<T1, T2>\n  fullname.vb: System.Action(Of T1, T2)\n  name.vb: Action(Of T1, T2)\n  spec.csharp:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`2\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: )\n    fullName: )\n  nameWithType: Action<T1, T2>\n  nameWithType.vb: Action(Of T1, T2)\n  commentId: T:System.Action`2\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Action{System.Threading.Tasks.Task}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task>\n  fullName: System.Action<System.Threading.Tasks.Task>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task)\n  name.vb: Action(Of Task)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: Action<Task>\n  nameWithType.vb: Action(Of Task)\n  commentId: T:System.Action{System.Threading.Tasks.Task}\n- uid: System.Func{System.Threading.Tasks.Task,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)\n  name.vb: Func(Of Task, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task, TResult>\n  nameWithType.vb: Func(Of Task, TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task,``0}\n- uid: System.Threading.Tasks.Task{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task{`0}\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n  commentId: T:System.Func`2\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}\n  parent: System\n  definition: System.Func`3\n  name: Func<Task, Object, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task, System.Object, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task, System.Object, TResult)\n  name.vb: Func(Of Task, Object, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task, Object, TResult>\n  nameWithType.vb: Func(Of Task, Object, TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task,System.Object,``0}\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n  commentId: T:System.Func`3\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n  commentId: '!:TResult'\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n- uid: System.Runtime.CompilerServices.TaskAwaiter\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: TaskAwaiter\n  fullName: System.Runtime.CompilerServices.TaskAwaiter\n  nameWithType: TaskAwaiter\n  commentId: T:System.Runtime.CompilerServices.TaskAwaiter\n- uid: System.Func{System.Threading.Tasks.Task}\n  parent: System\n  definition: System.Func`1\n  name: Func<Task>\n  fullName: System.Func<System.Threading.Tasks.Task>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task)\n  name.vb: Func(Of Task)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: Func<Task>\n  nameWithType.vb: Func(Of Task)\n  commentId: T:System.Func{System.Threading.Tasks.Task}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Func{{TResult}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func{``0}\n- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}\n  parent: System\n  definition: System.Func`1\n  name: Func<Task<TResult>>\n  fullName: System.Func<System.Threading.Tasks.Task<TResult>>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))\n  name.vb: Func(Of Task(Of TResult))\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TResult>>\n  nameWithType.vb: Func(Of Task(Of TResult))\n  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}\n- uid: System.Threading.Tasks.Task[]\n  name: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  fullname.vb: System.Threading.Tasks.Task()\n  name.vb: Task()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  nameWithType: Task[]\n  nameWithType.vb: Task()\n- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Task>\n  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)\n  name.vb: IEnumerable(Of Task)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Task>\n  nameWithType.vb: IEnumerable(Of Task)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Task<TResult>>\n  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult))\n  name.vb: IEnumerable(Of Task(Of TResult))\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Task<TResult>>\n  nameWithType.vb: IEnumerable(Of Task(Of TResult))\n  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}}\n- uid: System.Threading.Tasks.Task{{TResult}[]}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult[]>\n  fullName: System.Threading.Tasks.Task<TResult[]>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult())\n  name.vb: Task(Of TResult())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult[]>\n  nameWithType.vb: Task(Of TResult())\n  commentId: T:System.Threading.Tasks.Task{``0[]}\n- uid: System.Threading.Tasks.Task{{TResult}}[]\n  name: Task<TResult>[]\n  fullName: System.Threading.Tasks.Task<TResult>[]\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)()\n  name.vb: Task(Of TResult)()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  nameWithType: Task<TResult>[]\n  nameWithType.vb: Task(Of TResult)()\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Task>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task)\n  name.vb: Task(Of Task)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: Task<Task>\n  nameWithType.vb: Task(Of Task)\n  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task}\n- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Task<TResult>>\n  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult))\n  name.vb: Task(Of Task(Of TResult))\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Task<Task<TResult>>\n  nameWithType.vb: Task(Of Task(Of TResult))\n  commentId: T:System.Threading.Tasks.Task{System.Threading.Tasks.Task{``0}}\n- uid: System.Runtime.CompilerServices.YieldAwaitable\n  parent: System.Runtime.CompilerServices\n  isExternal: false\n  name: YieldAwaitable\n  fullName: System.Runtime.CompilerServices.YieldAwaitable\n  nameWithType: YieldAwaitable\n  commentId: T:System.Runtime.CompilerServices.YieldAwaitable\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Threading.Tasks.TaskCanceledException\n  isExternal: false\n  name: TaskCanceledException\n  fullName: System.Threading.Tasks.TaskCanceledException\n  nameWithType: TaskCanceledException\n  commentId: T:System.Threading.Tasks.TaskCanceledException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Threading.Tasks.TaskSchedulerException\n  isExternal: false\n  name: TaskSchedulerException\n  fullName: System.Threading.Tasks.TaskSchedulerException\n  nameWithType: TaskSchedulerException\n  commentId: T:System.Threading.Tasks.TaskSchedulerException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}