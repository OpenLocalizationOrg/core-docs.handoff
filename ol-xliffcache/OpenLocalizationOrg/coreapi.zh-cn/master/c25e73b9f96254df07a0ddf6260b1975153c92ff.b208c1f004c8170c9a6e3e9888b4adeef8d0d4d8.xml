{"nodes":[{"pos":[455,473],"content":"SymbolDocumentInfo","needQuote":true,"nodes":[{"content":"SymbolDocumentInfo","pos":[0,18]}]},{"pos":[1853,1865],"content":"DocumentType","needQuote":true,"nodes":[{"content":"DocumentType","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The document type's unique identifier.&lt;/p&gt;\\n","pos":[2633,2682],"source":"\\n<p>The document type's unique identifier.</p>\\n"},{"pos":[3068,3076],"content":"FileName","needQuote":true,"nodes":[{"content":"FileName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The string representing the source file name.&lt;/p&gt;\\n","pos":[3743,3799],"source":"\\n<p>The string representing the source file name.</p>\\n"},{"pos":[4153,4161],"content":"Language","needQuote":true,"nodes":[{"content":"Language","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The language's unique identifier&lt;/p&gt;\\n","pos":[4870,4913],"source":"\\n<p>The language's unique identifier</p>\\n"},{"pos":[5313,5327],"content":"LanguageVendor","needQuote":true,"nodes":[{"content":"LanguageVendor","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The language vendor's unique identifier.&lt;/p&gt;\\n","pos":[6067,6118],"source":"\\n<p>The language vendor's unique identifier.</p>\\n"},{"pos":[6348,6371],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[6553,6559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6719,6729],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6824,6832],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6901,6902],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6929,6930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7000,7008],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7077,7078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7105,7106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7289,7303],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7422,7428],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7495,7496],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7546,7552],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7612,7613],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7696,7702],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7769,7770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7820,7826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7886,7887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8101,8123],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8271,8277],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8344,8345],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8395,8401],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8462,8463]},{"pos":[8518,8524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8584,8585],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8682,8688],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8755,8756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8806,8812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8873,8874]},{"pos":[8929,8935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8995,8996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9241,9272],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9438,9453],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9529,9530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9580,9586],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9647,9648]},{"pos":[9703,9709],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9769,9770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9876,9891],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9967,9968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10018,10024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10085,10086]},{"pos":[10141,10147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10207,10208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10438,10451],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10552,10563],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10635,10636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10663,10664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10737,10748],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10820,10821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10848,10849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11024,11033],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11126,11133],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11201,11202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11229,11230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11299,11306],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11374,11375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11402,11403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11578,11595],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11704,11719],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11795,11796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11823,11824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11901,11916],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11992,11993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12020,12021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12166,12172],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12301,12305],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[12444,12450],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Linq.Expressions.SymbolDocumentInfo\n  commentId: T:System.Linq.Expressions.SymbolDocumentInfo\n  id: SymbolDocumentInfo\n  parent: System.Linq.Expressions\n  children:\n  - System.Linq.Expressions.SymbolDocumentInfo.DocumentType\n  - System.Linq.Expressions.SymbolDocumentInfo.FileName\n  - System.Linq.Expressions.SymbolDocumentInfo.Language\n  - System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\n  langs:\n  - csharp\n  - vb\n  name: SymbolDocumentInfo\n  fullName: System.Linq.Expressions.SymbolDocumentInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SymbolDocumentInfo\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 798\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Stores information necessary to emit debugging symbol information for a source file, in particular the file name and unique language identifier.</p>\\n\"\n  syntax:\n    content: public class SymbolDocumentInfo\n    content.vb: Public Class SymbolDocumentInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SymbolDocumentInfo\n- uid: System.Linq.Expressions.SymbolDocumentInfo.DocumentType\n  commentId: P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType\n  id: DocumentType\n  parent: System.Linq.Expressions.SymbolDocumentInfo\n  langs:\n  - csharp\n  - vb\n  name: DocumentType\n  fullName: System.Linq.Expressions.SymbolDocumentInfo.DocumentType\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DocumentType\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 801\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the document type's unique identifier, if any. Defaults to the GUID for a text file.</p>\\n\"\n  syntax:\n    content: public virtual Guid DocumentType { get; }\n    content.vb: Public Overridable ReadOnly Property DocumentType As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The document type's unique identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SymbolDocumentInfo.DocumentType\n- uid: System.Linq.Expressions.SymbolDocumentInfo.FileName\n  commentId: P:System.Linq.Expressions.SymbolDocumentInfo.FileName\n  id: FileName\n  parent: System.Linq.Expressions.SymbolDocumentInfo\n  langs:\n  - csharp\n  - vb\n  name: FileName\n  fullName: System.Linq.Expressions.SymbolDocumentInfo.FileName\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FileName\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 802\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>The source file name.</p>\\n\"\n  syntax:\n    content: public string FileName { get; }\n    content.vb: Public ReadOnly Property FileName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string representing the source file name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SymbolDocumentInfo.FileName\n- uid: System.Linq.Expressions.SymbolDocumentInfo.Language\n  commentId: P:System.Linq.Expressions.SymbolDocumentInfo.Language\n  id: Language\n  parent: System.Linq.Expressions.SymbolDocumentInfo\n  langs:\n  - csharp\n  - vb\n  name: Language\n  fullName: System.Linq.Expressions.SymbolDocumentInfo.Language\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Language\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 803\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the language's unique identifier, if any.</p>\\n\"\n  syntax:\n    content: public virtual Guid Language { get; }\n    content.vb: Public Overridable ReadOnly Property Language As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The language's unique identifier</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SymbolDocumentInfo.Language\n- uid: System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\n  commentId: P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\n  id: LanguageVendor\n  parent: System.Linq.Expressions.SymbolDocumentInfo\n  langs:\n  - csharp\n  - vb\n  name: LanguageVendor\n  fullName: System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor\n  type: Property\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LanguageVendor\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 804\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq.Expressions\n  summary: \"\\n<p>Returns the language vendor's unique identifier, if any.</p>\\n\"\n  syntax:\n    content: public virtual Guid LanguageVendor { get; }\n    content.vb: Public Overridable ReadOnly Property LanguageVendor As Guid\n    parameters: []\n    return:\n      type: System.Guid\n      description: \"\\n<p>The language vendor's unique identifier.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SymbolDocumentInfo.LanguageVendor\nreferences:\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n"}