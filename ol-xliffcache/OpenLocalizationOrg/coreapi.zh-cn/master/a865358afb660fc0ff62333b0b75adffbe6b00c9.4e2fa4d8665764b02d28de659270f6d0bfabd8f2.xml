{"nodes":[{"pos":[1460,1468],"content":"ECDsaCng","needQuote":true,"nodes":[{"content":"ECDsaCng","pos":[0,8]}]},{"pos":[2597,2607],"content":"ECDsaCng()","needQuote":true,"nodes":[{"content":"ECDsaCng()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) classes are not supported on this system.&lt;/p&gt;\\n","pos":[3474,3561],"source":"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n"},{"pos":[3906,3921],"content":"ECDsaCng(Int32)","needQuote":true,"nodes":[{"content":"ECDsaCng(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The size of the key.","pos":[4807,4832],"source":"\\n<p>The size of the key."},{"content":"Valid key sizes are 256, 384, and 521 bits.&lt;/p&gt;\\n","pos":[4833,4882],"source":" Valid key sizes are 256, 384, and 521 bits.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) classes are not supported on this system.&lt;/p&gt;\\n","pos":[5017,5104],"source":"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySize&lt;/em&gt; specifies an invalid length.","pos":[5255,5307],"source":"\\n<p>\\n<em>keySize</em> specifies an invalid length."},{"content":"&lt;/p&gt;\\n","pos":[5308,5314],"source":" </p>\\n"},{"pos":[5733,5749],"content":"ECDsaCng(CngKey)","needQuote":true,"nodes":[{"content":"ECDsaCng(CngKey)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The key that will be used as input to the cryptographic operations performed by the current object.&lt;/p&gt;\\n","pos":[6744,6854],"source":"\\n<p>The key that will be used as input to the cryptographic operations performed by the current object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.&lt;/p&gt;\\n","pos":[6965,7068],"source":"\\n<p>\\n<em>key</em> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7173,7224],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) classes are not supported on this system.&lt;/p&gt;\\n","pos":[7345,7432],"source":"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n"},{"pos":[7855,7872],"content":"ECDsaCng(ECCurve)","needQuote":true,"nodes":[{"content":"ECDsaCng(ECCurve)","pos":[0,17]}]},{"pos":[8868,8871],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;An object that specifies the key.&lt;/p&gt;\\n","pos":[9624,9668],"source":"\\n<p>An object that specifies the key.</p>\\n"},{"pos":[9989,9996],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[11013,11026],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[12149,12165],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[13298,13331],"content":"ExportExplicitParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportExplicitParameters(Boolean)","pos":[0,33]}]},{"pos":[14653,14678],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[16011,16031],"content":"GenerateKey(ECCurve)","needQuote":true,"nodes":[{"content":"GenerateKey(ECCurve)","pos":[0,20]}]},{"pos":[17375,17424],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[19395,19430],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[20888,20918],"content":"ImportParameters(ECParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(ECParameters)","pos":[0,30]}]},{"pos":[22108,22124],"content":"SignHash(Byte[])","needQuote":true,"nodes":[{"content":"SignHash(Byte[])","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The hash value of the data to be signed.&lt;/p&gt;\\n","pos":[22909,22960],"source":"\\n<p>The hash value of the data to be signed.</p>\\n"},{"content":"\\n&lt;p&gt;A digital signature for the specified hash value.&lt;/p&gt;\\n","pos":[23020,23080],"source":"\\n<p>A digital signature for the specified hash value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23199,23251],"source":"\\n<p>\\n<em>hash</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The key information that is associated with the instance does not have a private key.&lt;/p&gt;\\n","pos":[23402,23498],"source":"\\n<p>The key information that is associated with the instance does not have a private key.</p>\\n"},{"pos":[24220,24246],"content":"VerifyHash(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[])","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The hash value of the data to be verified.&lt;/p&gt;\\n","pos":[25113,25166],"source":"\\n<p>The hash value of the data to be verified.</p>\\n"},{"content":"\\n&lt;p&gt;The digital signature of the data to be verified against the hash value.&lt;/p&gt;\\n","pos":[25234,25317],"source":"\\n<p>The digital signature of the data to be verified against the hash value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature is valid; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25378,25474],"source":"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; or &lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25593,25667],"source":"\\n<p>\\n<em>hash</em> or <em>signature</em> is <strong>null</strong>.</p>\\n"},{"pos":[26069,26097],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[26294,26300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26421,26427],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26557,26562],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26748,26754],"content":"CngKey","needQuote":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[26988,26995],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[27176,27186],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[27388,27396],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[27460,27462]},{"pos":[27551,27559],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[27622,27624],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[27766,27773],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27971,27983],"content":"ECParameters","needQuote":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[28153,28159],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[28279,28283],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[28342,28344]},{"pos":[28407,28411],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[28469,28471],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[28659,28676],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[28904,28910],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[29040,29049],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[29195,29224],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[29459,29481],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[29729,29746],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[29922,29943],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.ECDsaCng\n  commentId: T:System.Security.Cryptography.ECDsaCng\n  id: ECDsaCng\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ECDsaCng.#ctor\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsaCng.Key\n  - System.Security.Cryptography.ECDsaCng.KeySize\n  - System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCng\n  fullName: System.Security.Cryptography.ECDsaCng\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaCng\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 254\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides a Cryptography Next Generation (CNG) implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA). </p>\\n\"\n  syntax:\n    content: 'public sealed class ECDsaCng : ECDsa'\n    content.vb: >-\n      Public NotInheritable Class ECDsaCng\n          Inherits ECDsa\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ECDsaCng\n- uid: System.Security.Cryptography.ECDsaCng.#ctor\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCng()\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 256\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.ECDsaCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a random key pair.</p>\\n\"\n  syntax:\n    content: public ECDsaCng()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ECDsaCng.ECDsaCng()\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCng(Int32)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 257\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.ECDsaCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a random key pair, using the specified key size.</p>\\n\"\n  syntax:\n    content: public ECDsaCng(int keySize)\n    content.vb: Public Sub New(keySize As Integer)\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: \"\\n<p>The size of the key. Valid key sizes are 256, 384, and 521 bits.</p>\\n\"\n  exceptions:\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>keySize</em> specifies an invalid length. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ECDsaCng.ECDsaCng(Int32)\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCng(CngKey)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(System.Security.Cryptography.CngKey)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 258\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.ECDsaCng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public ECDsaCng(CngKey key)\n    content.vb: Public Sub New(key As CngKey)\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>The key that will be used as input to the cryptographic operations performed by the current object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>key</em> does not specify an Elliptic Curve Digital Signature Algorithm (ECDSA) group.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) classes are not supported on this system.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ECDsaCng.ECDsaCng(CngKey)\n- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.ECCurve)\n  id: '#ctor(System.Security.Cryptography.ECCurve)'\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ECDsaCng(ECCurve)\n  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(System.Security.Cryptography.ECCurve)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 259\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaCng(ECCurve curve)\n    content.vb: Public Sub New(curve As ECCurve)\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ECDsaCng.ECDsaCng(ECCurve)\n- uid: System.Security.Cryptography.ECDsaCng.Key\n  commentId: P:System.Security.Cryptography.ECDsaCng.Key\n  id: Key\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.ECDsaCng.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 260\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the key to use when signing and verifying data.</p>\\n\"\n  syntax:\n    content: public CngKey Key { get; }\n    content.vb: Public ReadOnly Property Key As CngKey\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An object that specifies the key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ECDsaCng.Key\n- uid: System.Security.Cryptography.ECDsaCng.KeySize\n  commentId: P:System.Security.Cryptography.ECDsaCng.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.ECDsaCng.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 261\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int KeySize { get; set; }\n    content.vb: Public Overrides Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ECDsaCng.KeySize\n- uid: System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  commentId: P:System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.ECDsaCng.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 262\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: ECDsaCng.LegalKeySizes\n- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 263\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: ECDsaCng.Dispose(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ExportExplicitParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.ExportExplicitParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportExplicitParameters\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 264\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override ECParameters ExportExplicitParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportExplicitParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ECDsaCng.ExportExplicitParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsaCng.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 265\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override ECParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ECDsaCng.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey(ECCurve)\n  fullName: System.Security.Cryptography.ECDsaCng.GenerateKey(System.Security.Cryptography.ECCurve)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 266\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void GenerateKey(ECCurve curve)\n    content.vb: Public Overrides Sub GenerateKey(curve As ECCurve)\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ECDsaCng.GenerateKey(ECCurve)\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 267\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaCng.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsaCng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: ECDsaCng.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 268\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: ECDsaCng.HashData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(ECParameters)\n  fullName: System.Security.Cryptography.ECDsaCng.ImportParameters(System.Security.Cryptography.ECParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 269\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void ImportParameters(ECParameters parameters)\n    content.vb: Public Overrides Sub ImportParameters(parameters As ECParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: ECDsaCng.ImportParameters(ECParameters)\n- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 270\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Generates a signature for the specified hash value.</p>\\n\"\n  syntax:\n    content: public override byte[] SignHash(byte[] hash)\n    content.vb: Public Overrides Function SignHash(hash As Byte()) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data to be signed.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A digital signature for the specified hash value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The key information that is associated with the instance does not have a private key.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte())\n  name.vb: SignHash(Byte())\n  nameWithType: ECDsaCng.SignHash(Byte[])\n  nameWithType.vb: ECDsaCng.SignHash(Byte())\n- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaCng\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[])\n  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 271\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies the specified digital signature against a specified hash value.</p>\\n\"\n  syntax:\n    content: public override bool VerifyHash(byte[] hash, byte[] signature)\n    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte()) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash value of the data to be verified.</p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The digital signature of the data to be verified against the hash value.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> or <em>signature</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte(), System.Byte())\n  name.vb: VerifyHash(Byte(), Byte())\n  nameWithType: ECDsaCng.VerifyHash(Byte[], Byte[])\n  nameWithType.vb: ECDsaCng.VerifyHash(Byte(), Byte())\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  commentId: T:System.Security.Cryptography.CngKey\n  nameWithType: CngKey\n- uid: System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  nameWithType: ECCurve\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n  commentId: T:System.Security.Cryptography.ECParameters\n  nameWithType: ECParameters\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}