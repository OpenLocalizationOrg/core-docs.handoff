{"nodes":[{"pos":[388,411],"content":"AttributeUsageAttribute","needQuote":true,"nodes":[{"content":"AttributeUsageAttribute","pos":[0,23]}]},{"pos":[2084,2093],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"pos":[2548,2589],"content":"AttributeUsageAttribute(AttributeTargets)","needQuote":true,"nodes":[{"content":"AttributeUsageAttribute(AttributeTargets)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The set of values combined using a bitwise OR operation to indicate which program elements are valid.","pos":[3733,3839],"source":"\\n<p>The set of values combined using a bitwise OR operation to indicate which program elements are valid."},{"content":"&lt;/p&gt;\\n","pos":[3840,3846],"source":" </p>\\n"},{"pos":[4282,4295],"content":"AllowMultiple","needQuote":true,"nodes":[{"content":"AllowMultiple","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if more than one instance is allowed to be specified; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[5047,5164],"source":"\\n<p>\\n<strong>true</strong> if more than one instance is allowed to be specified; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5165,5209],"source":" The default is <strong>false</strong>.</p>\\n"},{"pos":[5607,5616],"content":"Inherited","needQuote":true,"nodes":[{"content":"Inherited","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the attribute can be inherited by derived classes and overriding members; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[6407,6547],"source":"\\n<p>\\n<strong>true</strong> if the attribute can be inherited by derived classes and overriding members; otherwise, <strong>false</strong>."},{"content":"The default is &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6548,6591],"source":" The default is <strong>true</strong>.</p>\\n"},{"pos":[6979,6986],"content":"ValidOn","needQuote":true,"nodes":[{"content":"ValidOn","pos":[0,7]}]},{"pos":[8130,8136],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[8267,8273],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8421,8430],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[8618,8632],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8757,8763],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8812,8813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8863,8869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8929,8930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9016,9022],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9071,9072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9122,9128],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9188,9189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9392,9405],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9512,9523],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9577,9578],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9605,9606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9682,9693],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9747,9748],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9775,9776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9958,9968],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10063,10071],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10140,10141],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10168,10169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10239,10247],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10316,10317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10344,10345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10542,10564],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10712,10718],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10785,10786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10836,10842],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10903,10904]},{"pos":[10959,10965],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11025,11026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11123,11129],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11196,11197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11247,11253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11314,11315]},{"pos":[11370,11376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11436,11437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11682,11713],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11879,11894],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11970,11971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12021,12027],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12088,12089]},{"pos":[12144,12150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12210,12211],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12317,12332],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12408,12409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12459,12465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12526,12527]},{"pos":[12582,12588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12648,12649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12875,12884],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12977,12984],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13052,13053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13080,13081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13150,13157],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13225,13226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13253,13254],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13429,13446],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[13555,13570],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13646,13647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13674,13675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13752,13767],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13843,13844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13871,13872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14051,14067],"content":"AttributeTargets","needQuote":true,"nodes":[{"content":"AttributeTargets","pos":[0,16]}]},{"pos":[14243,14250],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.AttributeUsageAttribute\n  commentId: T:System.AttributeUsageAttribute\n  id: AttributeUsageAttribute\n  parent: System\n  children:\n  - System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n  - System.AttributeUsageAttribute.AllowMultiple\n  - System.AttributeUsageAttribute.Inherited\n  - System.AttributeUsageAttribute.ValidOn\n  langs:\n  - csharp\n  - vb\n  name: AttributeUsageAttribute\n  fullName: System.AttributeUsageAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AttributeUsageAttribute\n    path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n    startLine: 16\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Specifies the usage of another attribute class. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [AttributeUsage(AttributeTargets.Class, Inherited = true)]\n\n      [ComVisible(true)]\n\n      public sealed class AttributeUsageAttribute : Attribute, _Attribute\n    content.vb: >-\n      <Serializable>\n\n      <AttributeUsage(AttributeTargets.Class, Inherited:=True)>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class AttributeUsageAttribute\n          Inherits Attribute\n          Implements _Attribute\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  - type: System.AttributeTargets\n    commentId: T:System.AttributeTargets\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 4\n    namedArguments:\n    - name: Inherited\n      type: System.Boolean\n      value: true\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: AttributeUsageAttribute\n- uid: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n  commentId: M:System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n  id: '#ctor(System.AttributeTargets)'\n  parent: System.AttributeUsageAttribute\n  langs:\n  - csharp\n  - vb\n  name: AttributeUsageAttribute(AttributeTargets)\n  fullName: System.AttributeUsageAttribute.AttributeUsageAttribute(System.AttributeTargets)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.AttributeUsageAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified list of <xref href=\\\"System.AttributeTargets\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the <xref href=\\\"System.AttributeUsageAttribute.AllowMultiple\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value, and the <xref href=\\\"System.AttributeUsageAttribute.Inherited\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public AttributeUsageAttribute(AttributeTargets validOn)\n    content.vb: Public Sub New(validOn As AttributeTargets)\n    parameters:\n    - id: validOn\n      type: System.AttributeTargets\n      description: \"\\n<p>The set of values combined using a bitwise OR operation to indicate which program elements are valid. </p>\\n\"\n  seealso:\n  - type: System.AttributeTargets\n    commentId: T:System.AttributeTargets\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeUsageAttribute.AttributeUsageAttribute(AttributeTargets)\n- uid: System.AttributeUsageAttribute.AllowMultiple\n  commentId: P:System.AttributeUsageAttribute.AllowMultiple\n  id: AllowMultiple\n  parent: System.AttributeUsageAttribute\n  langs:\n  - csharp\n  - vb\n  name: AllowMultiple\n  fullName: System.AttributeUsageAttribute.AllowMultiple\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AllowMultiple\n    path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets or sets a Boolean value indicating whether more than one instance of the indicated attribute can be specified for a single program element.</p>\\n\"\n  syntax:\n    content: public bool AllowMultiple { get; set; }\n    content.vb: Public Property AllowMultiple As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if more than one instance is allowed to be specified; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeUsageAttribute.AllowMultiple\n- uid: System.AttributeUsageAttribute.Inherited\n  commentId: P:System.AttributeUsageAttribute.Inherited\n  id: Inherited\n  parent: System.AttributeUsageAttribute\n  langs:\n  - csharp\n  - vb\n  name: Inherited\n  fullName: System.AttributeUsageAttribute.Inherited\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Inherited\n    path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that determines whether the indicated attribute is inherited by derived classes and overriding members.</p>\\n\"\n  syntax:\n    content: public bool Inherited { get; set; }\n    content.vb: Public Property Inherited As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the attribute can be inherited by derived classes and overriding members; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: AttributeUsageAttribute.Inherited\n- uid: System.AttributeUsageAttribute.ValidOn\n  commentId: P:System.AttributeUsageAttribute.ValidOn\n  id: ValidOn\n  parent: System.AttributeUsageAttribute\n  langs:\n  - csharp\n  - vb\n  name: ValidOn\n  fullName: System.AttributeUsageAttribute.ValidOn\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ValidOn\n    path: src/mscorlib/src/System/AttributeUsageAttribute.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a set of values identifying which program elements that the indicated attribute can be applied to.</p>\\n\"\n  syntax:\n    content: public AttributeTargets ValidOn { get; }\n    content.vb: Public ReadOnly Property ValidOn As AttributeTargets\n    parameters: []\n    return:\n      type: System.AttributeTargets\n      description: \"\\n<p>One or several <xref href=\\\"System.AttributeTargets\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. The default is <strong>All</strong>.</p>\\n\"\n  seealso:\n  - type: System.AttributeTargets\n    commentId: T:System.AttributeTargets\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: AttributeUsageAttribute.ValidOn\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.AttributeTargets\n  parent: System\n  isExternal: false\n  name: AttributeTargets\n  fullName: System.AttributeTargets\n  nameWithType: AttributeTargets\n  commentId: T:System.AttributeTargets\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}