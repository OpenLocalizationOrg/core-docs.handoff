{"nodes":[{"pos":[1584,1597],"content":"DynamicObject","needQuote":true,"nodes":[{"content":"DynamicObject","pos":[0,13]}]},{"pos":[3020,3035],"content":"DynamicObject()","needQuote":true,"nodes":[{"content":"DynamicObject()","pos":[0,15]}]},{"pos":[4050,4073],"content":"GetDynamicMemberNames()","needQuote":true,"nodes":[{"content":"GetDynamicMemberNames()","pos":[0,23]}]},{"content":"\\n&lt;p&gt;A sequence that contains dynamic member names.&lt;/p&gt;\\n","pos":[5050,5107],"source":"\\n<p>A sequence that contains dynamic member names.</p>\\n"},{"pos":[5559,5584],"content":"GetMetaObject(Expression)","needQuote":true,"nodes":[{"content":"GetMetaObject(Expression)","pos":[0,25]}]},{"pos":[7899,7960],"content":"TryBinaryOperation(BinaryOperationBinder, Object, out Object)","needQuote":true,"nodes":[{"content":"TryBinaryOperation(BinaryOperationBinder, Object, out Object)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;The right operand for the binary operation.","pos":[9841,9889],"source":"\\n<p>The right operand for the binary operation."},{"content":"For example, for the &lt;code&gt;sum = first + second&lt;/code&gt; statement, where &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; are derived from the &lt;strong&gt;DynamicObject&lt;/strong&gt; class, &lt;em&gt;arg&lt;/em&gt; is equal to &lt;code&gt;second&lt;/code&gt;.&lt;/p&gt;\\n","pos":[9890,10115],"source":" For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <strong>DynamicObject</strong> class, <em>arg</em> is equal to <code>second</code>.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the binary operation.&lt;/p&gt;\\n","pos":[10180,10226],"source":"\\n<p>The result of the binary operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10287,10382],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[10383,10490],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[10491,10563],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[11380,11417],"content":"TryConvert(ConvertBinder, out Object)","needQuote":true,"nodes":[{"content":"TryConvert(ConvertBinder, out Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The result of the type conversion operation.&lt;/p&gt;\\n","pos":[13541,13596],"source":"\\n<p>The result of the type conversion operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[13657,13752],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[13753,13860],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[13861,13933],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[14737,14798],"content":"TryCreateInstance(CreateInstanceBinder, Object[], out Object)","needQuote":true,"nodes":[{"content":"TryCreateInstance(CreateInstanceBinder, Object[], out Object)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;Provides information about the initialization operation.&lt;/p&gt;\\n","pos":[16034,16101],"source":"\\n<p>Provides information about the initialization operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the initialization.&lt;/p&gt;\\n","pos":[16562,16606],"source":"\\n<p>The result of the initialization.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[16667,16762],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[16763,16870],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[16871,16943],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[17787,17830],"content":"TryDeleteIndex(DeleteIndexBinder, Object[])","needQuote":true,"nodes":[{"content":"TryDeleteIndex(DeleteIndexBinder, Object[])","pos":[0,43]}]},{"content":"\\n&lt;p&gt;Provides information about the deletion.&lt;/p&gt;\\n","pos":[18782,18833],"source":"\\n<p>Provides information about the deletion.</p>\\n"},{"content":"\\n&lt;p&gt;The indexes to be deleted.&lt;/p&gt;\\n","pos":[18901,18938],"source":"\\n<p>The indexes to be deleted.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[18999,19094],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[19095,19202],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[19203,19275],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[19992,20027],"content":"TryDeleteMember(DeleteMemberBinder)","needQuote":true,"nodes":[{"content":"TryDeleteMember(DeleteMemberBinder)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;Provides information about the deletion.&lt;/p&gt;\\n","pos":[20928,20979],"source":"\\n<p>Provides information about the deletion.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[21040,21135],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[21136,21243],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[21244,21316],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[21852,21901],"content":"TryGetIndex(GetIndexBinder, Object[], out Object)","needQuote":true,"nodes":[{"content":"TryGetIndex(GetIndexBinder, Object[], out Object)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;Provides information about the operation.","pos":[23209,23255],"source":"\\n<p>Provides information about the operation."},{"content":"&lt;/p&gt;\\n","pos":[23256,23262],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The indexes that are used in the operation.","pos":[23330,23378],"source":"\\n<p>The indexes that are used in the operation."},{"content":"For example, for the &lt;code&gt;sampleObject[3]&lt;/code&gt; operation in C# (&lt;code&gt;sampleObject(3)&lt;/code&gt; in Visual Basic), where &lt;code&gt;sampleObject&lt;/code&gt; is derived from the &lt;strong&gt;DynamicObject&lt;/strong&gt; class, &lt;em&gt;indexes[0]&lt;/em&gt; is equal to 3.&lt;/p&gt;\\n","pos":[23379,23623],"source":" For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the <strong>DynamicObject</strong> class, <em>indexes[0]</em> is equal to 3.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the index operation.&lt;/p&gt;\\n","pos":[23688,23733],"source":"\\n<p>The result of the index operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[23794,23889],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[23890,23997],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a run-time exception is thrown.)&lt;/p&gt;\\n","pos":[23998,24052],"source":" (In most cases, a run-time exception is thrown.)</p>\\n"},{"pos":[24833,24874],"content":"TryGetMember(GetMemberBinder, out Object)","needQuote":true,"nodes":[{"content":"TryGetMember(GetMemberBinder, out Object)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The result of the get operation.","pos":[26838,26875],"source":"\\n<p>The result of the get operation."},{"content":"For example, if the method is called for a property, you can assign the property value to &lt;em&gt;result&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26876,26988],"source":" For example, if the method is called for a property, you can assign the property value to <em>result</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[27049,27144],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[27145,27252],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a run-time exception is thrown.)&lt;/p&gt;\\n","pos":[27253,27307],"source":" (In most cases, a run-time exception is thrown.)</p>\\n"},{"pos":[28079,28124],"content":"TryInvoke(InvokeBinder, Object[], out Object)","needQuote":true,"nodes":[{"content":"TryInvoke(InvokeBinder, Object[], out Object)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;Provides information about the invoke operation.&lt;/p&gt;\\n","pos":[29438,29497],"source":"\\n<p>Provides information about the invoke operation.</p>\\n"},{"content":"\\n&lt;p&gt;The result of the object invocation.&lt;/p&gt;\\n","pos":[29955,30002],"source":"\\n<p>The result of the object invocation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[30063,30158],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[30159,30266],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.&lt;/p&gt;\\n","pos":[30267,30338],"source":" (In most cases, a language-specific run-time exception is thrown.</p>\\n"},{"pos":[31169,31226],"content":"TryInvokeMember(InvokeMemberBinder, Object[], out Object)","needQuote":true,"nodes":[{"content":"TryInvokeMember(InvokeMemberBinder, Object[], out Object)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The result of the member invocation.&lt;/p&gt;\\n","pos":[33620,33667],"source":"\\n<p>The result of the member invocation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[33728,33823],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[33824,33931],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[33932,34004],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[34856,34901],"content":"TrySetIndex(SetIndexBinder, Object[], Object)","needQuote":true,"nodes":[{"content":"TrySetIndex(SetIndexBinder, Object[], Object)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;Provides information about the operation.","pos":[36225,36271],"source":"\\n<p>Provides information about the operation."},{"content":"&lt;/p&gt;\\n","pos":[36272,36278],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[37206,37301],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[37302,37409],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.&lt;/p&gt;\\n","pos":[37410,37481],"source":" (In most cases, a language-specific run-time exception is thrown.</p>\\n"},{"pos":[38237,38274],"content":"TrySetMember(SetMemberBinder, Object)","needQuote":true,"nodes":[{"content":"TrySetMember(SetMemberBinder, Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[40400,40495],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[40496,40603],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[40604,40676],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[41202,41253],"content":"TryUnaryOperation(UnaryOperationBinder, out Object)","needQuote":true,"nodes":[{"content":"TryUnaryOperation(UnaryOperationBinder, out Object)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The result of the unary operation.&lt;/p&gt;\\n","pos":[43050,43095],"source":"\\n<p>The result of the unary operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the operation is successful; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[43156,43251],"source":"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>."},{"content":"If this method returns &lt;strong&gt;false&lt;/strong&gt;, the run-time binder of the language determines the behavior.","pos":[43252,43359],"source":" If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior."},{"content":"(In most cases, a language-specific run-time exception is thrown.)&lt;/p&gt;\\n","pos":[43360,43432],"source":" (In most cases, a language-specific run-time exception is thrown.)</p>\\n"},{"pos":[43936,43950],"content":"System.Dynamic","needQuote":true,"nodes":[{"content":"System.Dynamic","pos":[0,14]}]},{"pos":[44105,44111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44292,44318],"content":"IDynamicMetaObjectProvider","needQuote":true,"nodes":[{"content":"IDynamicMetaObjectProvider","pos":[0,26]}]},{"pos":[44554,44564],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[44659,44667],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[44736,44737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44764,44765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44835,44843],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[44912,44913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44940,44941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45124,45138],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[45257,45263],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45330,45331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45381,45387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45447,45448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45531,45537],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45604,45605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45655,45661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45721,45722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45936,45958],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[46106,46112],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46179,46180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46230,46236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46297,46298]},{"pos":[46353,46359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46419,46420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46517,46523],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46590,46591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46641,46647],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46708,46709]},{"pos":[46764,46770],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46830,46831],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47076,47107],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[47273,47288],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47364,47365],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47415,47421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47482,47483]},{"pos":[47538,47544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47604,47605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47711,47726],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47802,47803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47853,47859],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47920,47921]},{"pos":[47976,47982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[48042,48043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48273,48286],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[48387,48398],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48470,48471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48498,48499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48572,48583],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[48655,48656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48683,48684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48859,48868],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[48961,48968],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[49036,49037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49064,49065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49134,49141],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[49209,49210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49237,49238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49413,49430],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[49539,49554],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[49630,49631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49658,49659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49736,49751],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[49827,49828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49855,49856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50001,50007],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[50233,50252],"content":"IEnumerable<String>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;String&gt;","pos":[0,19],"source":"IEnumerable<String>"}]},{"pos":[50500,50511],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[50575,50576],"content":"<","needQuote":true,"nodes":[]},{"pos":[50626,50632],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[50785,50796],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[50861,50864]},{"pos":[50921,50927],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[50987,50988],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51228,51242],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[51461,51472],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[51536,51537],"content":"<","needQuote":true,"nodes":[]},{"pos":[51564,51565],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[51685,51696],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[51761,51764]},{"pos":[51798,51799],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[51826,51827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52030,52056],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[52359,52384],"content":"GetMetaObject(Expression)","needQuote":true,"nodes":[{"content":"GetMetaObject(Expression)","pos":[0,25]}]},{"pos":[52615,52628],"content":"GetMetaObject","needQuote":true,"nodes":[{"content":"GetMetaObject","pos":[0,13]}]},{"pos":[52709,52710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52781,52791],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[52872,52873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53012,53025],"content":"GetMetaObject","needQuote":true,"nodes":[{"content":"GetMetaObject","pos":[0,13]}]},{"pos":[53106,53107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53178,53188],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[53269,53270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53567,53577],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[53795,53812],"content":"DynamicMetaObject","needQuote":true,"nodes":[{"content":"DynamicMetaObject","pos":[0,17]}]},{"pos":[53999,54022],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[54235,54256],"content":"BinaryOperationBinder","needQuote":true,"nodes":[{"content":"BinaryOperationBinder","pos":[0,21]}]},{"pos":[54463,54470],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54641,54654],"content":"ConvertBinder","needQuote":true,"nodes":[{"content":"ConvertBinder","pos":[0,13]}]},{"pos":[54866,54886],"content":"CreateInstanceBinder","needQuote":true,"nodes":[{"content":"CreateInstanceBinder","pos":[0,20]}]},{"pos":[55054,55062],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[55190,55196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[55257,55259]},{"pos":[55324,55330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55390,55392],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[55556,55573],"content":"DeleteIndexBinder","needQuote":true,"nodes":[{"content":"DeleteIndexBinder","pos":[0,17]}]},{"pos":[55795,55813],"content":"DeleteMemberBinder","needQuote":true,"nodes":[{"content":"DeleteMemberBinder","pos":[0,18]}]},{"pos":[56034,56048],"content":"GetIndexBinder","needQuote":true,"nodes":[{"content":"GetIndexBinder","pos":[0,14]}]},{"pos":[56258,56273],"content":"GetMemberBinder","needQuote":true,"nodes":[{"content":"GetMemberBinder","pos":[0,15]}]},{"pos":[56483,56495],"content":"InvokeBinder","needQuote":true,"nodes":[{"content":"InvokeBinder","pos":[0,12]}]},{"pos":[56702,56720],"content":"InvokeMemberBinder","needQuote":true,"nodes":[{"content":"InvokeMemberBinder","pos":[0,18]}]},{"pos":[56941,56955],"content":"SetIndexBinder","needQuote":true,"nodes":[{"content":"SetIndexBinder","pos":[0,14]}]},{"pos":[57165,57180],"content":"SetMemberBinder","needQuote":true,"nodes":[{"content":"SetMemberBinder","pos":[0,15]}]},{"pos":[57398,57418],"content":"UnaryOperationBinder","needQuote":true,"nodes":[{"content":"UnaryOperationBinder","pos":[0,20]}]}],"content":"items:\n- uid: System.Dynamic.DynamicObject\n  commentId: T:System.Dynamic.DynamicObject\n  id: DynamicObject\n  parent: System.Dynamic\n  children:\n  - System.Dynamic.DynamicObject.#ctor\n  - System.Dynamic.DynamicObject.GetDynamicMemberNames\n  - System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  - System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  - System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  - System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  - System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  - System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  - System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  - System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  - System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  - System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  langs:\n  - csharp\n  - vb\n  name: DynamicObject\n  fullName: System.Dynamic.DynamicObject\n  type: Class\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DynamicObject\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 21\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</p>\\n\"\n  syntax:\n    content: 'public class DynamicObject : IDynamicMetaObjectProvider'\n    content.vb: >-\n      Public Class DynamicObject\n          Implements IDynamicMetaObjectProvider\n  inheritance:\n  - System.Object\n  implements:\n  - System.Dynamic.IDynamicMetaObjectProvider\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DynamicObject\n- uid: System.Dynamic.DynamicObject.#ctor\n  commentId: M:System.Dynamic.DynamicObject.#ctor\n  id: '#ctor'\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: DynamicObject()\n  fullName: System.Dynamic.DynamicObject.DynamicObject()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 27\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Enables derived types to initialize a new instance of the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  syntax:\n    content: protected DynamicObject()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DynamicObject.DynamicObject()\n- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames\n  commentId: M:System.Dynamic.DynamicObject.GetDynamicMemberNames\n  id: GetDynamicMemberNames\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: GetDynamicMemberNames()\n  fullName: System.Dynamic.DynamicObject.GetDynamicMemberNames()\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDynamicMemberNames\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 215\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Returns the enumeration of all dynamic member names. </p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")]\n\n      public virtual IEnumerable<string> GetDynamicMemberNames()\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1024:UsePropertiesWhereAppropriate\")>\n\n      Public Overridable Function GetDynamicMemberNames As IEnumerable(Of String)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.String}\n      description: \"\\n<p>A sequence that contains dynamic member names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicObject.GetDynamicMemberNames()\n- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  commentId: M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  id: GetMetaObject(System.Linq.Expressions.Expression)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: GetMetaObject(Expression)\n  fullName: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMetaObject\n    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs\n    startLine: 117\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides a <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\\n\"\n  syntax:\n    content: public virtual DynamicMetaObject GetMetaObject(Expression parameter)\n    content.vb: Public Overridable Function GetMetaObject(parameter As Expression) As DynamicMetaObject\n    parameters:\n    - id: parameter\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>The expression that represents <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to dispatch to the dynamic virtual methods.</p>\\n\"\n    return:\n      type: System.Dynamic.DynamicMetaObject\n      description: \"\\n<p>An object of the <xref href=\\\"System.Dynamic.DynamicMetaObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  implements:\n  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicObject.GetMetaObject(Expression)\n- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  id: TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryBinaryOperation(BinaryOperationBinder, Object, out Object)\n  fullName: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryBinaryOperation\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 145\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides implementation for binary operations. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryBinaryOperation(binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.BinaryOperationBinder\n      description: \"\\n<p>Provides information about the binary operation. The <code>binder.Operation</code> property returns an <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <strong>DynamicObject</strong> class, <code>binder.Operation</code> returns <code>ExpressionType.Add</code>.</p>\\n\"\n    - id: arg\n      type: System.Object\n      description: \"\\n<p>The right operand for the binary operation. For example, for the <code>sum = first + second</code> statement, where <code>first</code> and <code>second</code> are derived from the <strong>DynamicObject</strong> class, <em>arg</em> is equal to <code>second</code>.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the binary operation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, ByRef System.Object)\n  name.vb: TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)\n  nameWithType: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, out Object)\n  nameWithType.vb: DynamicObject.TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  id: TryConvert(System.Dynamic.ConvertBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryConvert(ConvertBinder, out Object)\n  fullName: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryConvert\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 97\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides implementation for type conversion operations. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryConvert(ConvertBinder binder, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryConvert(binder As ConvertBinder, ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.ConvertBinder\n      description: \"\\n<p>Provides information about the conversion operation. The <code>binder.Type</code> property provides the type to which the object must be converted. For example, for the statement <code>(String)sampleObject</code> in C# (<code>CType(sampleObject, Type)</code> in Visual Basic), where <code>sampleObject</code> is an instance of the class derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <code>binder.Type</code> returns the <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type. The <code>binder.Explicit</code> property provides information about the kind of conversion that occurs. It returns <strong>true</strong> for explicit conversion and <strong>false</strong> for implicit conversion.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the type conversion operation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, ByRef System.Object)\n  name.vb: TryConvert(ConvertBinder, ByRef Object)\n  nameWithType: DynamicObject.TryConvert(ConvertBinder, out Object)\n  nameWithType.vb: DynamicObject.TryConvert(ConvertBinder, ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  id: TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryCreateInstance(CreateInstanceBinder, Object[], out Object)\n  fullName: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryCreateInstance\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 113\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryCreateInstance(binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.CreateInstanceBinder\n      description: \"\\n<p>Provides information about the initialization operation.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>The arguments that are passed to the object during initialization. For example, for the <code>new SampleType(100)</code> operation, where <code>SampleType</code> is the type derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <em>args[0]</em> is equal to 100.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the initialization.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object(), ByRef System.Object)\n  name.vb: TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)\n  nameWithType: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object[], out Object)\n  nameWithType.vb: DynamicObject.TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  commentId: M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  id: TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryDeleteIndex(DeleteIndexBinder, Object[])\n  fullName: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryDeleteIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 206\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\\n\"\n  syntax:\n    content: public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes)\n    content.vb: Public Overridable Function TryDeleteIndex(binder As DeleteIndexBinder, indexes As Object()) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteIndexBinder\n      description: \"\\n<p>Provides information about the deletion.</p>\\n\"\n    - id: indexes\n      type: System.Object[]\n      description: \"\\n<p>The indexes to be deleted.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object())\n  name.vb: TryDeleteIndex(DeleteIndexBinder, Object())\n  nameWithType: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object[])\n  nameWithType.vb: DynamicObject.TryDeleteIndex(DeleteIndexBinder, Object())\n- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  commentId: M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  id: TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryDeleteMember(DeleteMemberBinder)\n  fullName: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryDeleteMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 68\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\\n\"\n  syntax:\n    content: public virtual bool TryDeleteMember(DeleteMemberBinder binder)\n    content.vb: Public Overridable Function TryDeleteMember(binder As DeleteMemberBinder) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.DeleteMemberBinder\n      description: \"\\n<p>Provides information about the deletion.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicObject.TryDeleteMember(DeleteMemberBinder)\n- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  id: TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryGetIndex(GetIndexBinder, Object[], out Object)\n  fullName: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 176\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for indexing operations.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryGetIndex(binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetIndexBinder\n      description: \"\\n<p>Provides information about the operation. </p>\\n\"\n    - id: indexes\n      type: System.Object[]\n      description: \"\\n<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3]</code> operation in C# (<code>sampleObject(3)</code> in Visual Basic), where <code>sampleObject</code> is derived from the <strong>DynamicObject</strong> class, <em>indexes[0]</em> is equal to 3.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the index operation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object(), ByRef System.Object)\n  name.vb: TryGetIndex(GetIndexBinder, Object(), ByRef Object)\n  nameWithType: DynamicObject.TryGetIndex(GetIndexBinder, Object[], out Object)\n  nameWithType.vb: DynamicObject.TryGetIndex(GetIndexBinder, Object(), ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  id: TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryGetMember(GetMemberBinder, out Object)\n  fullName: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 41\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that get member values. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryGetMember(GetMemberBinder binder, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryGetMember(binder As GetMemberBinder, ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.GetMemberBinder\n      description: \"\\n<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the <code>Console.WriteLine(sampleObject.SampleProperty)</code> statement, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <code>binder.Name</code> returns \\\"SampleProperty\\\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the get operation. For example, if the method is called for a property, you can assign the property value to <em>result</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, ByRef System.Object)\n  name.vb: TryGetMember(GetMemberBinder, ByRef Object)\n  nameWithType: DynamicObject.TryGetMember(GetMemberBinder, out Object)\n  nameWithType.vb: DynamicObject.TryGetMember(GetMemberBinder, ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  id: TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryInvoke(InvokeBinder, Object[], out Object)\n  fullName: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryInvoke\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 129\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryInvoke(binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeBinder\n      description: \"\\n<p>Provides information about the invoke operation.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>The arguments that are passed to the object during the invoke operation. For example, for the <code>sampleObject(100)</code> operation, where <code>sampleObject</code> is derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <em>args[0]</em> is equal to 100.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the object invocation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object(), ByRef System.Object)\n  name.vb: TryInvoke(InvokeBinder, Object(), ByRef Object)\n  nameWithType: DynamicObject.TryInvoke(InvokeBinder, Object[], out Object)\n  nameWithType.vb: DynamicObject.TryInvoke(InvokeBinder, Object(), ByRef Object)\n- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  id: TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryInvokeMember(InvokeMemberBinder, Object[], out Object)\n  fullName: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryInvokeMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 82\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryInvokeMember(binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.InvokeMemberBinder\n      description: \"\\n<p>Provides information about the dynamic operation. The <code>binder.Name</code> property provides the name of the member on which the dynamic operation is performed. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <code>binder.Name</code> returns \\\"SampleMethod\\\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>The arguments that are passed to the object member during the invoke operation. For example, for the statement <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <em>args[0]</em> is equal to 100.</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the member invocation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object(), ByRef System.Object)\n  name.vb: TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)\n  nameWithType: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object[], out Object)\n  nameWithType.vb: DynamicObject.TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)\n- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  commentId: M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  id: TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TrySetIndex(SetIndexBinder, Object[], Object)\n  fullName: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TrySetIndex\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 192\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TrySetIndex(binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetIndexBinder\n      description: \"\\n<p>Provides information about the operation. </p>\\n\"\n    - id: indexes\n      type: System.Object[]\n      description: \"\\n<p>The indexes that are used in the operation. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <em>indexes[0]</em> is equal to 3.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to set to the object that has the specified index. For example, for the <code>sampleObject[3] = 10</code> operation in C# (<code>sampleObject(3) = 10</code> in Visual Basic), where <code>sampleObject</code> is derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <em>value</em> is equal to 10.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object(), System.Object)\n  name.vb: TrySetIndex(SetIndexBinder, Object(), Object)\n  nameWithType: DynamicObject.TrySetIndex(SetIndexBinder, Object[], Object)\n  nameWithType.vb: DynamicObject.TrySetIndex(SetIndexBinder, Object(), Object)\n- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  commentId: M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  id: TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TrySetMember(SetMemberBinder, Object)\n  fullName: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TrySetMember\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 56\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides the implementation for operations that set member values. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\\n\"\n  syntax:\n    content: public virtual bool TrySetMember(SetMemberBinder binder, object value)\n    content.vb: Public Overridable Function TrySetMember(binder As SetMemberBinder, value As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.SetMemberBinder\n      description: \"\\n<p>Provides information about the object that called the dynamic operation. The <code>binder.Name</code> property provides the name of the member to which the value is being assigned. For example, for the statement <code>sampleObject.SampleProperty = \\\"Test\\\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, <code>binder.Name</code> returns \\\"SampleProperty\\\". The <code>binder.IgnoreCase</code> property specifies whether the member name is case-sensitive.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to set to the member. For example, for <code>sampleObject.SampleProperty = \\\"Test\\\"</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, the <em>value</em> is \\\"Test\\\".</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DynamicObject.TrySetMember(SetMemberBinder, Object)\n- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  commentId: M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  id: TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\n  parent: System.Dynamic.DynamicObject\n  langs:\n  - csharp\n  - vb\n  name: TryUnaryOperation(UnaryOperationBinder, out Object)\n  fullName: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryUnaryOperation\n    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs\n    startLine: 160\n  assemblies:\n  - System.Dynamic.Runtime\n  namespace: System.Dynamic\n  summary: \"\\n<p>Provides implementation for unary operations. Classes derived from the <xref href=\\\"System.Dynamic.DynamicObject\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")]\n\n      public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Design\", \"CA1007:UseGenericsWhereAppropriate\")>\n\n      Public Overridable Function TryUnaryOperation(binder As UnaryOperationBinder, ByRef result As Object) As Boolean\n    parameters:\n    - id: binder\n      type: System.Dynamic.UnaryOperationBinder\n      description: \"\\n<p>Provides information about the unary operation. The <code>binder.Operation</code> property returns an <xref href=\\\"System.Linq.Expressions.ExpressionType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. For example, for the <code>negativeNumber = -number</code> statement, where <code>number</code> is derived from the <strong>DynamicObject</strong> class, <code>binder.Operation</code> returns \\\"Negate\\\".</p>\\n\"\n    - id: result\n      type: System.Object\n      description: \"\\n<p>The result of the unary operation.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. If this method returns <strong>false</strong>, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, ByRef System.Object)\n  name.vb: TryUnaryOperation(UnaryOperationBinder, ByRef Object)\n  nameWithType: DynamicObject.TryUnaryOperation(UnaryOperationBinder, out Object)\n  nameWithType.vb: DynamicObject.TryUnaryOperation(UnaryOperationBinder, ByRef Object)\nreferences:\n- uid: System.Dynamic\n  isExternal: false\n  name: System.Dynamic\n  fullName: System.Dynamic\n  nameWithType: System.Dynamic\n  commentId: N:System.Dynamic\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Dynamic.IDynamicMetaObjectProvider\n  parent: System.Dynamic\n  isExternal: false\n  name: IDynamicMetaObjectProvider\n  fullName: System.Dynamic.IDynamicMetaObjectProvider\n  nameWithType: IDynamicMetaObjectProvider\n  commentId: T:System.Dynamic.IDynamicMetaObjectProvider\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IEnumerable{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<String>\n  fullName: System.Collections.Generic.IEnumerable<System.String>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)\n  name.vb: IEnumerable(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<String>\n  nameWithType.vb: IEnumerable(Of String)\n  commentId: T:System.Collections.Generic.IEnumerable{System.String}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n  parent: System.Dynamic.IDynamicMetaObjectProvider\n  isExternal: true\n  name: GetMetaObject(Expression)\n  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n  spec.csharp:\n  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n    name: GetMetaObject\n    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject\n  - name: (\n    fullName: (\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n    name: GetMetaObject\n    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject\n  - name: (\n    fullName: (\n  - uid: System.Linq.Expressions.Expression\n    name: Expression\n    fullName: System.Linq.Expressions.Expression\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDynamicMetaObjectProvider.GetMetaObject(Expression)\n  commentId: M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  nameWithType: Expression\n  commentId: T:System.Linq.Expressions.Expression\n- uid: System.Dynamic.DynamicMetaObject\n  parent: System.Dynamic\n  isExternal: false\n  name: DynamicMetaObject\n  fullName: System.Dynamic.DynamicMetaObject\n  nameWithType: DynamicMetaObject\n  commentId: T:System.Dynamic.DynamicMetaObject\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n- uid: System.Dynamic.BinaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: BinaryOperationBinder\n  fullName: System.Dynamic.BinaryOperationBinder\n  nameWithType: BinaryOperationBinder\n  commentId: T:System.Dynamic.BinaryOperationBinder\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Dynamic.ConvertBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: ConvertBinder\n  fullName: System.Dynamic.ConvertBinder\n  nameWithType: ConvertBinder\n  commentId: T:System.Dynamic.ConvertBinder\n- uid: System.Dynamic.CreateInstanceBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: CreateInstanceBinder\n  fullName: System.Dynamic.CreateInstanceBinder\n  nameWithType: CreateInstanceBinder\n  commentId: T:System.Dynamic.CreateInstanceBinder\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Dynamic.DeleteIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteIndexBinder\n  fullName: System.Dynamic.DeleteIndexBinder\n  nameWithType: DeleteIndexBinder\n  commentId: T:System.Dynamic.DeleteIndexBinder\n- uid: System.Dynamic.DeleteMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: DeleteMemberBinder\n  fullName: System.Dynamic.DeleteMemberBinder\n  nameWithType: DeleteMemberBinder\n  commentId: T:System.Dynamic.DeleteMemberBinder\n- uid: System.Dynamic.GetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetIndexBinder\n  fullName: System.Dynamic.GetIndexBinder\n  nameWithType: GetIndexBinder\n  commentId: T:System.Dynamic.GetIndexBinder\n- uid: System.Dynamic.GetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: GetMemberBinder\n  fullName: System.Dynamic.GetMemberBinder\n  nameWithType: GetMemberBinder\n  commentId: T:System.Dynamic.GetMemberBinder\n- uid: System.Dynamic.InvokeBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeBinder\n  fullName: System.Dynamic.InvokeBinder\n  nameWithType: InvokeBinder\n  commentId: T:System.Dynamic.InvokeBinder\n- uid: System.Dynamic.InvokeMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: InvokeMemberBinder\n  fullName: System.Dynamic.InvokeMemberBinder\n  nameWithType: InvokeMemberBinder\n  commentId: T:System.Dynamic.InvokeMemberBinder\n- uid: System.Dynamic.SetIndexBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetIndexBinder\n  fullName: System.Dynamic.SetIndexBinder\n  nameWithType: SetIndexBinder\n  commentId: T:System.Dynamic.SetIndexBinder\n- uid: System.Dynamic.SetMemberBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: SetMemberBinder\n  fullName: System.Dynamic.SetMemberBinder\n  nameWithType: SetMemberBinder\n  commentId: T:System.Dynamic.SetMemberBinder\n- uid: System.Dynamic.UnaryOperationBinder\n  parent: System.Dynamic\n  isExternal: false\n  name: UnaryOperationBinder\n  fullName: System.Dynamic.UnaryOperationBinder\n  nameWithType: UnaryOperationBinder\n  commentId: T:System.Dynamic.UnaryOperationBinder\n"}