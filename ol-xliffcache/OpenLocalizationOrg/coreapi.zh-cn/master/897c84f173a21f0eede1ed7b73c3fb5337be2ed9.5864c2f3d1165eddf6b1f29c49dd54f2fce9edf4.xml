{"nodes":[{"pos":[7390,7398],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[9771,9779],"content":"AsType()","needQuote":true,"nodes":[{"content":"AsType()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The current type.&lt;/p&gt;\\n","pos":[10453,10481],"source":"\\n<p>The current type.</p>\\n"},{"pos":[10820,10840],"content":"DeclaredConstructors","needQuote":true,"nodes":[{"content":"DeclaredConstructors","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A collection of the constructors declared by the current type.&lt;/p&gt;\\n","pos":[11677,11750],"source":"\\n<p>A collection of the constructors declared by the current type.</p>\\n"},{"pos":[12104,12118],"content":"DeclaredEvents","needQuote":true,"nodes":[{"content":"DeclaredEvents","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A collection of the events defined by the current type.&lt;/p&gt;\\n","pos":[12906,12972],"source":"\\n<p>A collection of the events defined by the current type.</p>\\n"},{"pos":[13320,13334],"content":"DeclaredFields","needQuote":true,"nodes":[{"content":"DeclaredFields","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A collection of the fields defined by the current type.&lt;/p&gt;\\n","pos":[14122,14188],"source":"\\n<p>A collection of the fields defined by the current type.</p>\\n"},{"pos":[14539,14554],"content":"DeclaredMembers","needQuote":true,"nodes":[{"content":"DeclaredMembers","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A collection of the members defined by the current type.&lt;/p&gt;\\n","pos":[15350,15417],"source":"\\n<p>A collection of the members defined by the current type.</p>\\n"},{"pos":[15769,15784],"content":"DeclaredMethods","needQuote":true,"nodes":[{"content":"DeclaredMethods","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A collection of the methods defined by the current type.&lt;/p&gt;\\n","pos":[16580,16647],"source":"\\n<p>A collection of the methods defined by the current type.</p>\\n"},{"pos":[17011,17030],"content":"DeclaredNestedTypes","needQuote":true,"nodes":[{"content":"DeclaredNestedTypes","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A collection of nested types defined by the current type.&lt;/p&gt;\\n","pos":[17841,17909],"source":"\\n<p>A collection of nested types defined by the current type.</p>\\n"},{"pos":[18274,18292],"content":"DeclaredProperties","needQuote":true,"nodes":[{"content":"DeclaredProperties","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A collection of the properties defined by the current type.&lt;/p&gt;\\n","pos":[19110,19180],"source":"\\n<p>A collection of the properties defined by the current type.</p>\\n"},{"pos":[19664,19698],"content":"FindInterfaces(TypeFilter, Object)","needQuote":true,"nodes":[{"content":"FindInterfaces(TypeFilter, Object)","pos":[0,34]}]},{"pos":[21169,21229],"content":"FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)","needQuote":true,"nodes":[{"content":"FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)","pos":[0,60]}]},{"pos":[22757,22778],"content":"GenericTypeParameters","needQuote":true,"nodes":[{"content":"GenericTypeParameters","pos":[0,21]}]},{"pos":[24152,24174],"content":"GetConstructor(Type[])","needQuote":true,"nodes":[{"content":"GetConstructor(Type[])","pos":[0,22]}]},{"pos":[25315,25332],"content":"GetConstructors()","needQuote":true,"nodes":[{"content":"GetConstructors()","pos":[0,17]}]},{"pos":[26317,26346],"content":"GetConstructors(BindingFlags)","needQuote":true,"nodes":[{"content":"GetConstructors(BindingFlags)","pos":[0,29]}]},{"pos":[27507,27531],"content":"GetDeclaredEvent(String)","needQuote":true,"nodes":[{"content":"GetDeclaredEvent(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the event.&lt;/p&gt;\\n","pos":[28297,28330],"source":"\\n<p>The name of the event.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified event, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28404,28505],"source":"\\n<p>An object that represents the specified event, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28624,28670],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28671,28677],"source":" </p>\\n"},{"pos":[29065,29089],"content":"GetDeclaredField(String)","needQuote":true,"nodes":[{"content":"GetDeclaredField(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the field.&lt;/p&gt;\\n","pos":[29855,29888],"source":"\\n<p>The name of the field.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified field, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29962,30063],"source":"\\n<p>An object that represents the specified field, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[30182,30228],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[30229,30235],"source":" </p>\\n"},{"pos":[30626,30651],"content":"GetDeclaredMethod(String)","needQuote":true,"nodes":[{"content":"GetDeclaredMethod(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name of the method.&lt;/p&gt;\\n","pos":[31424,31458],"source":"\\n<p>The name of the method.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified method, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[31533,31635],"source":"\\n<p>An object that represents the specified method, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31754,31800],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[31801,31807],"source":" </p>\\n"},{"pos":[32202,32228],"content":"GetDeclaredMethods(String)","needQuote":true,"nodes":[{"content":"GetDeclaredMethods(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The method name to search for.&lt;/p&gt;\\n","pos":[33056,33097],"source":"\\n<p>The method name to search for.</p>\\n"},{"content":"\\n&lt;p&gt;A collection that contains methods that match &lt;em&gt;name&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33212,33283],"source":"\\n<p>A collection that contains methods that match <em>name</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[33402,33448],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[33449,33455],"source":" </p>\\n"},{"pos":[33860,33889],"content":"GetDeclaredNestedType(String)","needQuote":true,"nodes":[{"content":"GetDeclaredNestedType(String)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The name of the nested type.&lt;/p&gt;\\n","pos":[34680,34719],"source":"\\n<p>The name of the nested type.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified nested type, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34792,34899],"source":"\\n<p>An object that represents the specified nested type, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35018,35064],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35065,35071],"source":" </p>\\n"},{"pos":[35473,35500],"content":"GetDeclaredProperty(String)","needQuote":true,"nodes":[{"content":"GetDeclaredProperty(String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The name of the property.&lt;/p&gt;\\n","pos":[36288,36324],"source":"\\n<p>The name of the property.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the specified property, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36401,36505],"source":"\\n<p>An object that represents the specified property, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36624,36670],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36671,36677],"source":" </p>\\n"},{"pos":[37026,37045],"content":"GetDefaultMembers()","needQuote":true,"nodes":[{"content":"GetDefaultMembers()","pos":[0,19]}]},{"pos":[38010,38029],"content":"GetEnumName(Object)","needQuote":true,"nodes":[{"content":"GetEnumName(Object)","pos":[0,19]}]},{"pos":[38999,39013],"content":"GetEnumNames()","needQuote":true,"nodes":[{"content":"GetEnumNames()","pos":[0,14]}]},{"pos":[39915,39938],"content":"GetEnumUnderlyingType()","needQuote":true,"nodes":[{"content":"GetEnumUnderlyingType()","pos":[0,23]}]},{"pos":[40849,40864],"content":"GetEnumValues()","needQuote":true,"nodes":[{"content":"GetEnumValues()","pos":[0,15]}]},{"pos":[41768,41784],"content":"GetEvent(String)","needQuote":true,"nodes":[{"content":"GetEvent(String)","pos":[0,16]}]},{"pos":[42834,42864],"content":"GetEvent(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetEvent(String, BindingFlags)","pos":[0,30]}]},{"pos":[43993,44004],"content":"GetEvents()","needQuote":true,"nodes":[{"content":"GetEvents()","pos":[0,11]}]},{"pos":[44971,44994],"content":"GetEvents(BindingFlags)","needQuote":true,"nodes":[{"content":"GetEvents(BindingFlags)","pos":[0,23]}]},{"pos":[46083,46099],"content":"GetField(String)","needQuote":true,"nodes":[{"content":"GetField(String)","pos":[0,16]}]},{"pos":[47149,47179],"content":"GetField(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetField(String, BindingFlags)","pos":[0,30]}]},{"pos":[48308,48319],"content":"GetFields()","needQuote":true,"nodes":[{"content":"GetFields()","pos":[0,11]}]},{"pos":[49238,49261],"content":"GetFields(BindingFlags)","needQuote":true,"nodes":[{"content":"GetFields(BindingFlags)","pos":[0,23]}]},{"pos":[50338,50359],"content":"GetGenericArguments()","needQuote":true,"nodes":[{"content":"GetGenericArguments()","pos":[0,21]}]},{"pos":[51308,51328],"content":"GetInterface(String)","needQuote":true,"nodes":[{"content":"GetInterface(String)","pos":[0,20]}]},{"pos":[52336,52365],"content":"GetInterface(String, Boolean)","needQuote":true,"nodes":[{"content":"GetInterface(String, Boolean)","pos":[0,29]}]},{"pos":[53447,53462],"content":"GetInterfaces()","needQuote":true,"nodes":[{"content":"GetInterfaces()","pos":[0,15]}]},{"pos":[54372,54389],"content":"GetMember(String)","needQuote":true,"nodes":[{"content":"GetMember(String)","pos":[0,17]}]},{"pos":[55456,55487],"content":"GetMember(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMember(String, BindingFlags)","pos":[0,31]}]},{"pos":[56858,56902],"content":"GetMember(String, MemberTypes, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMember(String, MemberTypes, BindingFlags)","pos":[0,44]}]},{"pos":[58188,58200],"content":"GetMembers()","needQuote":true,"nodes":[{"content":"GetMembers()","pos":[0,12]}]},{"pos":[59130,59154],"content":"GetMembers(BindingFlags)","needQuote":true,"nodes":[{"content":"GetMembers(BindingFlags)","pos":[0,24]}]},{"pos":[60254,60271],"content":"GetMethod(String)","needQuote":true,"nodes":[{"content":"GetMethod(String)","pos":[0,17]}]},{"pos":[61332,61363],"content":"GetMethod(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetMethod(String, BindingFlags)","pos":[0,31]}]},{"pos":[62539,62564],"content":"GetMethod(String, Type[])","needQuote":true,"nodes":[{"content":"GetMethod(String, Type[])","pos":[0,25]}]},{"pos":[63957,64003],"content":"GetMethod(String, Type[], ParameterModifier[])","needQuote":true,"nodes":[{"content":"GetMethod(String, Type[], ParameterModifier[])","pos":[0,46]}]},{"pos":[65474,65486],"content":"GetMethods()","needQuote":true,"nodes":[{"content":"GetMethods()","pos":[0,12]}]},{"pos":[66416,66440],"content":"GetMethods(BindingFlags)","needQuote":true,"nodes":[{"content":"GetMethods(BindingFlags)","pos":[0,24]}]},{"pos":[67552,67573],"content":"GetNestedType(String)","needQuote":true,"nodes":[{"content":"GetNestedType(String)","pos":[0,21]}]},{"pos":[68637,68672],"content":"GetNestedType(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetNestedType(String, BindingFlags)","pos":[0,35]}]},{"pos":[69815,69831],"content":"GetNestedTypes()","needQuote":true,"nodes":[{"content":"GetNestedTypes()","pos":[0,16]}]},{"pos":[70764,70792],"content":"GetNestedTypes(BindingFlags)","needQuote":true,"nodes":[{"content":"GetNestedTypes(BindingFlags)","pos":[0,28]}]},{"pos":[71850,71865],"content":"GetProperties()","needQuote":true,"nodes":[{"content":"GetProperties()","pos":[0,15]}]},{"pos":[72825,72852],"content":"GetProperties(BindingFlags)","needQuote":true,"nodes":[{"content":"GetProperties(BindingFlags)","pos":[0,27]}]},{"pos":[73979,73998],"content":"GetProperty(String)","needQuote":true,"nodes":[{"content":"GetProperty(String)","pos":[0,19]}]},{"pos":[75081,75114],"content":"GetProperty(String, BindingFlags)","needQuote":true,"nodes":[{"content":"GetProperty(String, BindingFlags)","pos":[0,33]}]},{"pos":[76306,76331],"content":"GetProperty(String, Type)","needQuote":true,"nodes":[{"content":"GetProperty(String, Type)","pos":[0,25]}]},{"pos":[77500,77533],"content":"GetProperty(String, Type, Type[])","needQuote":true,"nodes":[{"content":"GetProperty(String, Type, Type[])","pos":[0,33]}]},{"pos":[79116,79170],"content":"GetProperty(String, Type, Type[], ParameterModifier[])","needQuote":true,"nodes":[{"content":"GetProperty(String, Type, Type[], ParameterModifier[])","pos":[0,54]}]},{"pos":[80879,80906],"content":"GetProperty(String, Type[])","needQuote":true,"nodes":[{"content":"GetProperty(String, Type[])","pos":[0,27]}]},{"pos":[82245,82275],"content":"IReflectableType.GetTypeInfo()","needQuote":true,"nodes":[{"content":"IReflectableType.GetTypeInfo()","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A reference to the current type.&lt;/p&gt;\\n","pos":[83155,83198],"source":"\\n<p>A reference to the current type.</p>\\n"},{"pos":[83678,83699],"content":"ImplementedInterfaces","needQuote":true,"nodes":[{"content":"ImplementedInterfaces","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A collection of the interfaces implemented by the current type.&lt;/p&gt;\\n","pos":[84497,84571],"source":"\\n<p>A collection of the interfaces implemented by the current type.</p>\\n"},{"pos":[84971,84993],"content":"IsAssignableFrom(Type)","needQuote":true,"nodes":[{"content":"IsAssignableFrom(Type)","pos":[0,22]}]},{"pos":[86062,86088],"content":"IsAssignableFrom(TypeInfo)","needQuote":true,"nodes":[{"content":"IsAssignableFrom(TypeInfo)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The type to check.&lt;/p&gt;\\n","pos":[86893,86922],"source":"\\n<p>The type to check.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified type can be assigned to this type; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86983,87104],"source":"\\n<p>\\n<strong>true</strong> if the specified type can be assigned to this type; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[87485,87506],"content":"IsEnumDefined(Object)","needQuote":true,"nodes":[{"content":"IsEnumDefined(Object)","pos":[0,21]}]},{"pos":[88543,88567],"content":"IsInstanceOfType(Object)","needQuote":true,"nodes":[{"content":"IsInstanceOfType(Object)","pos":[0,24]}]},{"pos":[89577,89598],"content":"StructLayoutAttribute","needQuote":true,"nodes":[{"content":"StructLayoutAttribute","pos":[0,21]}]},{"pos":[90644,90659],"content":"TypeInitializer","needQuote":true,"nodes":[{"content":"TypeInitializer","pos":[0,15]}]},{"pos":[91611,91631],"content":"UnderlyingSystemType","needQuote":true,"nodes":[{"content":"UnderlyingSystemType","pos":[0,20]}]},{"pos":[92582,92592],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[93577,93587],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[94552,94566],"content":"GetArrayRank()","needQuote":true,"nodes":[{"content":"GetArrayRank()","pos":[0,14]}]},{"pos":[95455,95471],"content":"GetElementType()","needQuote":true,"nodes":[{"content":"GetElementType()","pos":[0,16]}]},{"pos":[96415,96447],"content":"GetGenericParameterConstraints()","needQuote":true,"nodes":[{"content":"GetGenericParameterConstraints()","pos":[0,32]}]},{"pos":[97462,97480],"content":"IsSubclassOf(Type)","needQuote":true,"nodes":[{"content":"IsSubclassOf(Type)","pos":[0,18]}]},{"pos":[98491,98511],"content":"IsEquivalentTo(Type)","needQuote":true,"nodes":[{"content":"IsEquivalentTo(Type)","pos":[0,20]}]},{"pos":[99523,99543],"content":"GenericTypeArguments","needQuote":true,"nodes":[{"content":"GenericTypeArguments","pos":[0,20]}]},{"pos":[100559,100585],"content":"GetGenericTypeDefinition()","needQuote":true,"nodes":[{"content":"GetGenericTypeDefinition()","pos":[0,26]}]},{"pos":[101513,101521],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[102446,102454],"content":"BaseType","needQuote":true,"nodes":[{"content":"BaseType","pos":[0,8]}]},{"pos":[103407,103432],"content":"ContainsGenericParameters","needQuote":true,"nodes":[{"content":"ContainsGenericParameters","pos":[0,25]}]},{"pos":[104446,104461],"content":"DeclaringMethod","needQuote":true,"nodes":[{"content":"DeclaringMethod","pos":[0,15]}]},{"pos":[105427,105435],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"pos":[106397,106423],"content":"GenericParameterAttributes","needQuote":true,"nodes":[{"content":"GenericParameterAttributes","pos":[0,26]}]},{"pos":[107540,107564],"content":"GenericParameterPosition","needQuote":true,"nodes":[{"content":"GenericParameterPosition","pos":[0,24]}]},{"pos":[108537,108541],"content":"GUID","needQuote":true,"nodes":[{"content":"GUID","pos":[0,4]}]},{"pos":[109441,109455],"content":"HasElementType","needQuote":true,"nodes":[{"content":"HasElementType","pos":[0,14]}]},{"pos":[110347,110357],"content":"IsAbstract","needQuote":true,"nodes":[{"content":"IsAbstract","pos":[0,10]}]},{"pos":[111232,111243],"content":"IsAnsiClass","needQuote":true,"nodes":[{"content":"IsAnsiClass","pos":[0,11]}]},{"pos":[112111,112118],"content":"IsArray","needQuote":true,"nodes":[{"content":"IsArray","pos":[0,7]}]},{"pos":[112978,112989],"content":"IsAutoClass","needQuote":true,"nodes":[{"content":"IsAutoClass","pos":[0,11]}]},{"pos":[113872,113884],"content":"IsAutoLayout","needQuote":true,"nodes":[{"content":"IsAutoLayout","pos":[0,12]}]},{"pos":[114757,114764],"content":"IsByRef","needQuote":true,"nodes":[{"content":"IsByRef","pos":[0,7]}]},{"pos":[115612,115619],"content":"IsClass","needQuote":true,"nodes":[{"content":"IsClass","pos":[0,7]}]},{"pos":[116479,116490],"content":"IsCOMObject","needQuote":true,"nodes":[{"content":"IsCOMObject","pos":[0,11]}]},{"pos":[117403,117409],"content":"IsEnum","needQuote":true,"nodes":[{"content":"IsEnum","pos":[0,6]}]},{"pos":[118331,118347],"content":"IsExplicitLayout","needQuote":true,"nodes":[{"content":"IsExplicitLayout","pos":[0,16]}]},{"pos":[119273,119291],"content":"IsGenericParameter","needQuote":true,"nodes":[{"content":"IsGenericParameter","pos":[0,18]}]},{"pos":[120264,120277],"content":"IsGenericType","needQuote":true,"nodes":[{"content":"IsGenericType","pos":[0,13]}]},{"pos":[121255,121278],"content":"IsGenericTypeDefinition","needQuote":true,"nodes":[{"content":"IsGenericTypeDefinition","pos":[0,23]}]},{"pos":[122261,122269],"content":"IsImport","needQuote":true,"nodes":[{"content":"IsImport","pos":[0,8]}]},{"pos":[123134,123145],"content":"IsInterface","needQuote":true,"nodes":[{"content":"IsInterface","pos":[0,11]}]},{"pos":[124046,124064],"content":"IsLayoutSequential","needQuote":true,"nodes":[{"content":"IsLayoutSequential","pos":[0,18]}]},{"pos":[124988,125002],"content":"IsMarshalByRef","needQuote":true,"nodes":[{"content":"IsMarshalByRef","pos":[0,14]}]},{"pos":[125888,125896],"content":"IsNested","needQuote":true,"nodes":[{"content":"IsNested","pos":[0,8]}]},{"pos":[126776,126792],"content":"IsNestedAssembly","needQuote":true,"nodes":[{"content":"IsNestedAssembly","pos":[0,16]}]},{"pos":[127721,127740],"content":"IsNestedFamANDAssem","needQuote":true,"nodes":[{"content":"IsNestedFamANDAssem","pos":[0,19]}]},{"pos":[128669,128683],"content":"IsNestedFamily","needQuote":true,"nodes":[{"content":"IsNestedFamily","pos":[0,14]}]},{"pos":[129599,129617],"content":"IsNestedFamORAssem","needQuote":true,"nodes":[{"content":"IsNestedFamORAssem","pos":[0,18]}]},{"pos":[130544,130559],"content":"IsNestedPrivate","needQuote":true,"nodes":[{"content":"IsNestedPrivate","pos":[0,15]}]},{"pos":[131468,131482],"content":"IsNestedPublic","needQuote":true,"nodes":[{"content":"IsNestedPublic","pos":[0,14]}]},{"pos":[132377,132388],"content":"IsNotPublic","needQuote":true,"nodes":[{"content":"IsNotPublic","pos":[0,11]}]},{"pos":[133262,133271],"content":"IsPointer","needQuote":true,"nodes":[{"content":"IsPointer","pos":[0,9]}]},{"pos":[134141,134152],"content":"IsPrimitive","needQuote":true,"nodes":[{"content":"IsPrimitive","pos":[0,11]}]},{"pos":[135071,135079],"content":"IsPublic","needQuote":true,"nodes":[{"content":"IsPublic","pos":[0,8]}]},{"pos":[135935,135943],"content":"IsSealed","needQuote":true,"nodes":[{"content":"IsSealed","pos":[0,8]}]},{"pos":[136802,136811],"content":"IsVisible","needQuote":true,"nodes":[{"content":"IsVisible","pos":[0,9]}]},{"pos":[137690,137704],"content":"IsSerializable","needQuote":true,"nodes":[{"content":"IsSerializable","pos":[0,14]}]},{"pos":[138657,138670],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"pos":[139569,139583],"content":"IsUnicodeClass","needQuote":true,"nodes":[{"content":"IsUnicodeClass","pos":[0,14]}]},{"pos":[140478,140489],"content":"IsValueType","needQuote":true,"nodes":[{"content":"IsValueType","pos":[0,11]}]},{"pos":[141411,141420],"content":"Namespace","needQuote":true,"nodes":[{"content":"Namespace","pos":[0,9]}]},{"pos":[142372,142393],"content":"AssemblyQualifiedName","needQuote":true,"nodes":[{"content":"AssemblyQualifiedName","pos":[0,21]}]},{"pos":[143381,143396],"content":"MakeArrayType()","needQuote":true,"nodes":[{"content":"MakeArrayType()","pos":[0,15]}]},{"pos":[144326,144346],"content":"MakeArrayType(Int32)","needQuote":true,"nodes":[{"content":"MakeArrayType(Int32)","pos":[0,20]}]},{"pos":[145332,145347],"content":"MakeByRefType()","needQuote":true,"nodes":[{"content":"MakeByRefType()","pos":[0,15]}]},{"pos":[146286,146309],"content":"MakeGenericType(Type[])","needQuote":true,"nodes":[{"content":"MakeGenericType(Type[])","pos":[0,23]}]},{"pos":[147521,147538],"content":"MakePointerType()","needQuote":true,"nodes":[{"content":"MakePointerType()","pos":[0,17]}]},{"pos":[148305,148322],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[148486,148492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[148663,148673],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[148892,148916],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[149169,149185],"content":"IReflectableType","needQuote":true,"nodes":[{"content":"IReflectableType","pos":[0,16]}]},{"pos":[149436,149452],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[149733,149746],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[150018,150031],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[150296,150302],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[150544,150548],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[150800,150814],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[150963,150969],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[151030,151031],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151081,151087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[151147,151148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151246,151252],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[151313,151314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151364,151370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[151430,151431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151671,151684],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[151815,151826],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[151892,151893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151920,151921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[152009,152020],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[152086,152087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[152114,152115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[152410,152463],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[152809,152853],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[152970,152971],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153022,153029],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[153090,153091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[153246,153308],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[153425,153426],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[153477,153484],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[153545,153546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[154062,154121],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[154498,154542],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[154659,154660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[154708,154712],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[154771,154772]},{"pos":[154828,154835],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[154896,154897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155064,155126],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[155243,155244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155292,155296],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[155355,155356]},{"pos":[155412,155419],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[155480,155481],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156011,156060],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[156407,156441],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[156548,156549],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[156597,156601],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[156660,156661]},{"pos":[156717,156724],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[156785,156786],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[156943,156995],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[157102,157103],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[157151,157155],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[157214,157215]},{"pos":[157271,157278],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[157339,157340],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[157738,157748],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[157843,157851],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[157920,157921],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[157948,157949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158019,158027],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[158096,158097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[158124,158125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158322,158344],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[158492,158498],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[158565,158566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[158616,158622],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[158683,158684]},{"pos":[158739,158745],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[158805,158806],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[158903,158909],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[158976,158977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[159027,159033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[159094,159095]},{"pos":[159150,159156],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[159216,159217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[159462,159493],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[159659,159674],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[159750,159751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[159801,159807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[159868,159869]},{"pos":[159924,159930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[159990,159991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160097,160112],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[160188,160189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160239,160245],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[160306,160307]},{"pos":[160362,160368],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[160428,160429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160655,160664],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[160757,160764],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[160832,160833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[160860,160861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[160930,160937],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[161005,161006],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[161033,161034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[161209,161226],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[161335,161350],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[161426,161427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[161454,161455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[161532,161547],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[161623,161624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[161651,161652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[161797,161803],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[161932,161936],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[162190,162218],"content":"IEnumerable<ConstructorInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;ConstructorInfo&gt;","pos":[0,28],"source":"IEnumerable<ConstructorInfo>"}]},{"pos":[162515,162526],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[162611,162612],"content":"<","needQuote":true,"nodes":[]},{"pos":[162682,162697],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[162849,162860],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[162946,162949]},{"pos":[163026,163041],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[163100,163101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[163379,163393],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[163612,163623],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[163687,163688],"content":"<","needQuote":true,"nodes":[]},{"pos":[163715,163716],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[163836,163847],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[163912,163915]},{"pos":[163949,163950],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[163977,163978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[164181,164207],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[164507,164529],"content":"IEnumerable<EventInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;EventInfo&gt;","pos":[0,22],"source":"IEnumerable<EventInfo>"}]},{"pos":[164808,164819],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[164904,164905],"content":"<","needQuote":true,"nodes":[]},{"pos":[164969,164978],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[165124,165135],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[165221,165224]},{"pos":[165295,165304],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[165357,165358],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[165717,165739],"content":"IEnumerable<FieldInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;FieldInfo&gt;","pos":[0,22],"source":"IEnumerable<FieldInfo>"}]},{"pos":[166018,166029],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[166114,166115],"content":"<","needQuote":true,"nodes":[]},{"pos":[166179,166188],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[166334,166345],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[166431,166434]},{"pos":[166505,166514],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[166567,166568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[166928,166951],"content":"IEnumerable<MemberInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;MemberInfo&gt;","pos":[0,23],"source":"IEnumerable<MemberInfo>"}]},{"pos":[167233,167244],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[167329,167330],"content":"<","needQuote":true,"nodes":[]},{"pos":[167395,167405],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[167552,167563],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[167649,167652]},{"pos":[167724,167734],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[167788,167789],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168152,168175],"content":"IEnumerable<MethodInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;MethodInfo&gt;","pos":[0,23],"source":"IEnumerable<MethodInfo>"}]},{"pos":[168457,168468],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[168553,168554],"content":"<","needQuote":true,"nodes":[]},{"pos":[168619,168629],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[168776,168787],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[168873,168876]},{"pos":[168948,168958],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[169012,169013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[169374,169395],"content":"IEnumerable<TypeInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;TypeInfo&gt;","pos":[0,21],"source":"IEnumerable<TypeInfo>"}]},{"pos":[169671,169682],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[169767,169768],"content":"<","needQuote":true,"nodes":[]},{"pos":[169831,169839],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[169984,169995],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[170081,170084]},{"pos":[170154,170162],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[170214,170215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170574,170599],"content":"IEnumerable<PropertyInfo>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;PropertyInfo&gt;","pos":[0,25],"source":"IEnumerable<PropertyInfo>"}]},{"pos":[170887,170898],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[170983,170984],"content":"<","needQuote":true,"nodes":[]},{"pos":[171051,171063],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[171212,171223],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[171309,171312]},{"pos":[171386,171398],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[171454,171455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171740,171750],"content":"TypeFilter","needQuote":true,"nodes":[{"content":"TypeFilter","pos":[0,10]}]},{"pos":[171892,171898],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[172018,172022],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[172060,172062]},{"pos":[172125,172129],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[172166,172168],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[172328,172339],"content":"MemberTypes","needQuote":true,"nodes":[{"content":"MemberTypes","pos":[0,11]}]},{"pos":[172549,172561],"content":"BindingFlags","needQuote":true,"nodes":[{"content":"BindingFlags","pos":[0,12]}]},{"pos":[172774,172786],"content":"MemberFilter","needQuote":true,"nodes":[{"content":"MemberFilter","pos":[0,12]}]},{"pos":[172951,172963],"content":"MemberInfo[]","needQuote":true,"nodes":[{"content":"MemberInfo[]","pos":[0,12]}]},{"pos":[173140,173150],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"content":"[]","pos":[173205,173207]},{"pos":[173287,173297],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[173351,173353],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[173529,173544],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[173723,173740],"content":"ConstructorInfo[]","needQuote":true,"nodes":[{"content":"ConstructorInfo[]","pos":[0,17]}]},{"pos":[173937,173952],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"content":"[]","pos":[174012,174014]},{"pos":[174099,174114],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[174173,174175],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[174330,174336],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[174506,174515],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[174716,174725],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[174927,174937],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[175140,175148],"content":"TypeInfo","needQuote":true,"nodes":[{"content":"TypeInfo","pos":[0,8]}]},{"pos":[175349,175361],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[175511,175519],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[175647,175653],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[175714,175716]},{"pos":[175781,175787],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[175847,175849],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[175985,175990],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[176111,176122],"content":"EventInfo[]","needQuote":true,"nodes":[{"content":"EventInfo[]","pos":[0,11]}]},{"pos":[176295,176304],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"content":"[]","pos":[176358,176360]},{"pos":[176439,176448],"content":"EventInfo","needQuote":true,"nodes":[{"content":"EventInfo","pos":[0,9]}]},{"pos":[176501,176503],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[176625,176636],"content":"FieldInfo[]","needQuote":true,"nodes":[{"content":"FieldInfo[]","pos":[0,11]}]},{"pos":[176809,176818],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"content":"[]","pos":[176872,176874]},{"pos":[176953,176962],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[177015,177017],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[177161,177168],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[177303,177322],"content":"ParameterModifier[]","needQuote":true,"nodes":[{"content":"ParameterModifier[]","pos":[0,19]}]},{"pos":[177527,177544],"content":"ParameterModifier","needQuote":true,"nodes":[{"content":"ParameterModifier","pos":[0,17]}]},{"content":"[]","pos":[177606,177608]},{"pos":[177695,177712],"content":"ParameterModifier","needQuote":true,"nodes":[{"content":"ParameterModifier","pos":[0,17]}]},{"pos":[177773,177775],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[177914,177926],"content":"MethodInfo[]","needQuote":true,"nodes":[{"content":"MethodInfo[]","pos":[0,12]}]},{"pos":[178103,178113],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"content":"[]","pos":[178168,178170]},{"pos":[178250,178260],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[178314,178316],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[178443,178457],"content":"PropertyInfo[]","needQuote":true,"nodes":[{"content":"PropertyInfo[]","pos":[0,14]}]},{"pos":[178642,178654],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"content":"[]","pos":[178711,178713]},{"pos":[178795,178807],"content":"PropertyInfo","needQuote":true,"nodes":[{"content":"PropertyInfo","pos":[0,12]}]},{"pos":[178863,178865],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[179075,179088],"content":"GetTypeInfo()","needQuote":true,"nodes":[{"content":"GetTypeInfo()","pos":[0,13]}]},{"pos":[179231,179242],"content":"GetTypeInfo","needQuote":true,"nodes":[{"content":"GetTypeInfo","pos":[0,11]}]},{"pos":[179314,179315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[179342,179343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179437,179448],"content":"GetTypeInfo","needQuote":true,"nodes":[{"content":"GetTypeInfo","pos":[0,11]}]},{"pos":[179520,179521],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[179548,179549],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179834,179851],"content":"IEnumerable<Type>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Type&gt;","pos":[0,17],"source":"IEnumerable<Type>"}]},{"pos":[180093,180104],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[180189,180190],"content":"<","needQuote":true,"nodes":[]},{"pos":[180238,180242],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[180393,180404],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[180490,180493]},{"pos":[180548,180552],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[180610,180611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180898,180919],"content":"StructLayoutAttribute","needQuote":true,"nodes":[{"content":"StructLayoutAttribute","pos":[0,21]}]},{"pos":[181157,181187],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[181438,181448],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[181690,181704],"content":"TypeAttributes","needQuote":true,"nodes":[{"content":"TypeAttributes","pos":[0,14]}]},{"pos":[181894,181899],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[182065,182073],"content":"Assembly","needQuote":true,"nodes":[{"content":"Assembly","pos":[0,8]}]},{"pos":[182272,182282],"content":"MethodBase","needQuote":true,"nodes":[{"content":"MethodBase","pos":[0,10]}]},{"pos":[182503,182529],"content":"GenericParameterAttributes","needQuote":true,"nodes":[{"content":"GenericParameterAttributes","pos":[0,26]}]},{"pos":[182754,182758],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[182895,182916],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Reflection.TypeInfo\n  commentId: T:System.Reflection.TypeInfo\n  id: TypeInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.TypeInfo.Assembly\n  - System.Reflection.TypeInfo.AssemblyQualifiedName\n  - System.Reflection.TypeInfo.AsType\n  - System.Reflection.TypeInfo.Attributes\n  - System.Reflection.TypeInfo.BaseType\n  - System.Reflection.TypeInfo.ContainsGenericParameters\n  - System.Reflection.TypeInfo.DeclaredConstructors\n  - System.Reflection.TypeInfo.DeclaredEvents\n  - System.Reflection.TypeInfo.DeclaredFields\n  - System.Reflection.TypeInfo.DeclaredMembers\n  - System.Reflection.TypeInfo.DeclaredMethods\n  - System.Reflection.TypeInfo.DeclaredNestedTypes\n  - System.Reflection.TypeInfo.DeclaredProperties\n  - System.Reflection.TypeInfo.DeclaringMethod\n  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  - System.Reflection.TypeInfo.FullName\n  - System.Reflection.TypeInfo.GenericParameterAttributes\n  - System.Reflection.TypeInfo.GenericParameterPosition\n  - System.Reflection.TypeInfo.GenericTypeArguments\n  - System.Reflection.TypeInfo.GenericTypeParameters\n  - System.Reflection.TypeInfo.GetArrayRank\n  - System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  - System.Reflection.TypeInfo.GetConstructors\n  - System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  - System.Reflection.TypeInfo.GetDefaultMembers\n  - System.Reflection.TypeInfo.GetElementType\n  - System.Reflection.TypeInfo.GetEnumName(System.Object)\n  - System.Reflection.TypeInfo.GetEnumNames\n  - System.Reflection.TypeInfo.GetEnumUnderlyingType\n  - System.Reflection.TypeInfo.GetEnumValues\n  - System.Reflection.TypeInfo.GetEvent(System.String)\n  - System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetEvents\n  - System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetField(System.String)\n  - System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetFields\n  - System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetGenericArguments\n  - System.Reflection.TypeInfo.GetGenericParameterConstraints\n  - System.Reflection.TypeInfo.GetGenericTypeDefinition\n  - System.Reflection.TypeInfo.GetInterface(System.String)\n  - System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)\n  - System.Reflection.TypeInfo.GetInterfaces\n  - System.Reflection.TypeInfo.GetMember(System.String)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMembers\n  - System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetMethods\n  - System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetNestedType(System.String)\n  - System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetNestedTypes\n  - System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperties\n  - System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  - System.Reflection.TypeInfo.GUID\n  - System.Reflection.TypeInfo.HasElementType\n  - System.Reflection.TypeInfo.ImplementedInterfaces\n  - System.Reflection.TypeInfo.IsAbstract\n  - System.Reflection.TypeInfo.IsAnsiClass\n  - System.Reflection.TypeInfo.IsArray\n  - System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)\n  - System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  - System.Reflection.TypeInfo.IsAutoClass\n  - System.Reflection.TypeInfo.IsAutoLayout\n  - System.Reflection.TypeInfo.IsByRef\n  - System.Reflection.TypeInfo.IsClass\n  - System.Reflection.TypeInfo.IsCOMObject\n  - System.Reflection.TypeInfo.IsEnum\n  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  - System.Reflection.TypeInfo.IsExplicitLayout\n  - System.Reflection.TypeInfo.IsGenericParameter\n  - System.Reflection.TypeInfo.IsGenericType\n  - System.Reflection.TypeInfo.IsGenericTypeDefinition\n  - System.Reflection.TypeInfo.IsImport\n  - System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  - System.Reflection.TypeInfo.IsInterface\n  - System.Reflection.TypeInfo.IsLayoutSequential\n  - System.Reflection.TypeInfo.IsMarshalByRef\n  - System.Reflection.TypeInfo.IsNested\n  - System.Reflection.TypeInfo.IsNestedAssembly\n  - System.Reflection.TypeInfo.IsNestedFamANDAssem\n  - System.Reflection.TypeInfo.IsNestedFamily\n  - System.Reflection.TypeInfo.IsNestedFamORAssem\n  - System.Reflection.TypeInfo.IsNestedPrivate\n  - System.Reflection.TypeInfo.IsNestedPublic\n  - System.Reflection.TypeInfo.IsNotPublic\n  - System.Reflection.TypeInfo.IsPointer\n  - System.Reflection.TypeInfo.IsPrimitive\n  - System.Reflection.TypeInfo.IsPublic\n  - System.Reflection.TypeInfo.IsSealed\n  - System.Reflection.TypeInfo.IsSerializable\n  - System.Reflection.TypeInfo.IsSpecialName\n  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  - System.Reflection.TypeInfo.IsUnicodeClass\n  - System.Reflection.TypeInfo.IsValueType\n  - System.Reflection.TypeInfo.IsVisible\n  - System.Reflection.TypeInfo.MakeArrayType\n  - System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  - System.Reflection.TypeInfo.MakeByRefType\n  - System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  - System.Reflection.TypeInfo.MakePointerType\n  - System.Reflection.TypeInfo.MemberType\n  - System.Reflection.TypeInfo.Namespace\n  - System.Reflection.TypeInfo.StructLayoutAttribute\n  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  - System.Reflection.TypeInfo.TypeInitializer\n  - System.Reflection.TypeInfo.UnderlyingSystemType\n  langs:\n  - csharp\n  - vb\n  name: TypeInfo\n  fullName: System.Reflection.TypeInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TypeInfo\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 24\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. </p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public abstract class TypeInfo : Type, ICustomAttributeProvider, _MemberInfo, _Type, IReflect, IReflectableType\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public MustInherit Class TypeInfo\n          Inherits Type\n          Implements ICustomAttributeProvider, _MemberInfo, _Type, IReflect, IReflectableType\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  - System.Reflection.IReflectableType\n  inheritedMembers:\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.Equals(System.Object)\n  - System.Reflection.MemberInfo.GetHashCode\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TypeInfo\n- uid: System.Reflection.TypeInfo.AsType\n  commentId: M:System.Reflection.TypeInfo.AsType\n  id: AsType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: AsType()\n  fullName: System.Reflection.TypeInfo.AsType()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AsType\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 34\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the current type as a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual Type AsType()\n    content.vb: Public Overridable Function AsType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>The current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.AsType()\n- uid: System.Reflection.TypeInfo.DeclaredConstructors\n  commentId: P:System.Reflection.TypeInfo.DeclaredConstructors\n  id: DeclaredConstructors\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredConstructors\n  fullName: System.Reflection.TypeInfo.DeclaredConstructors\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredConstructors\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 123\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the constructors declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<ConstructorInfo> DeclaredConstructors { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredConstructors As IEnumerable(Of ConstructorInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}\n      description: \"\\n<p>A collection of the constructors declared by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredConstructors\n- uid: System.Reflection.TypeInfo.DeclaredEvents\n  commentId: P:System.Reflection.TypeInfo.DeclaredEvents\n  id: DeclaredEvents\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredEvents\n  fullName: System.Reflection.TypeInfo.DeclaredEvents\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredEvents\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 131\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the events defined by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<EventInfo> DeclaredEvents { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredEvents As IEnumerable(Of EventInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n      description: \"\\n<p>A collection of the events defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredEvents\n- uid: System.Reflection.TypeInfo.DeclaredFields\n  commentId: P:System.Reflection.TypeInfo.DeclaredFields\n  id: DeclaredFields\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredFields\n  fullName: System.Reflection.TypeInfo.DeclaredFields\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredFields\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 139\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the fields defined by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<FieldInfo> DeclaredFields { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredFields As IEnumerable(Of FieldInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n      description: \"\\n<p>A collection of the fields defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredFields\n- uid: System.Reflection.TypeInfo.DeclaredMembers\n  commentId: P:System.Reflection.TypeInfo.DeclaredMembers\n  id: DeclaredMembers\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredMembers\n  fullName: System.Reflection.TypeInfo.DeclaredMembers\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredMembers\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 147\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the members defined by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<MemberInfo> DeclaredMembers { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredMembers As IEnumerable(Of MemberInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n      description: \"\\n<p>A collection of the members defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredMembers\n- uid: System.Reflection.TypeInfo.DeclaredMethods\n  commentId: P:System.Reflection.TypeInfo.DeclaredMethods\n  id: DeclaredMethods\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredMethods\n  fullName: System.Reflection.TypeInfo.DeclaredMethods\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredMethods\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 155\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the methods defined by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<MethodInfo> DeclaredMethods { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredMethods As IEnumerable(Of MethodInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n      description: \"\\n<p>A collection of the methods defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredMethods\n- uid: System.Reflection.TypeInfo.DeclaredNestedTypes\n  commentId: P:System.Reflection.TypeInfo.DeclaredNestedTypes\n  id: DeclaredNestedTypes\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredNestedTypes\n  fullName: System.Reflection.TypeInfo.DeclaredNestedTypes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredNestedTypes\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 162\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the nested types defined by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<TypeInfo> DeclaredNestedTypes { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredNestedTypes As IEnumerable(Of TypeInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n      description: \"\\n<p>A collection of nested types defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredNestedTypes\n- uid: System.Reflection.TypeInfo.DeclaredProperties\n  commentId: P:System.Reflection.TypeInfo.DeclaredProperties\n  id: DeclaredProperties\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaredProperties\n  fullName: System.Reflection.TypeInfo.DeclaredProperties\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredProperties\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 172\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the properties defined by the current type. </p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<PropertyInfo> DeclaredProperties { get; }\n    content.vb: Public Overridable ReadOnly Property DeclaredProperties As IEnumerable(Of PropertyInfo)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n      description: \"\\n<p>A collection of the properties defined by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaredProperties\n- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  commentId: M:System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  id: FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: FindInterfaces(TypeFilter, Object)\n  fullName: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindInterfaces\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 437\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria)\n    content.vb: Public Overridable Function FindInterfaces(filter As TypeFilter, filterCriteria As Object) As Type()\n    parameters:\n    - id: filter\n      type: System.Reflection.TypeFilter\n    - id: filterCriteria\n      type: System.Object\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)\n- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  commentId: M:System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  id: FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n  fullName: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes, System.Reflection.BindingFlags, System.Reflection.MemberFilter, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindMembers\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 438\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria)\n    content.vb: Public Overridable Function FindMembers(memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()\n    parameters:\n    - id: memberType\n      type: System.Reflection.MemberTypes\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    - id: filter\n      type: System.Reflection.MemberFilter\n    - id: filterCriteria\n      type: System.Object\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)\n- uid: System.Reflection.TypeInfo.GenericTypeParameters\n  commentId: P:System.Reflection.TypeInfo.GenericTypeParameters\n  id: GenericTypeParameters\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GenericTypeParameters\n  fullName: System.Reflection.TypeInfo.GenericTypeParameters\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenericTypeParameters\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets an array of the generic type parameters of the current instance. </p>\\n\"\n  syntax:\n    content: public virtual Type[] GenericTypeParameters { get; }\n    content.vb: Public Overridable ReadOnly Property GenericTypeParameters As Type()\n    parameters: []\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array that contains the current instance's generic type parameters, or an array of <xref href=\\\"System.Array.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> zero if the current instance has no generic type parameters. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.GenericTypeParameters\n- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  commentId: M:System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  id: GetConstructor(System.Type[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetConstructor(Type[])\n  fullName: System.Reflection.TypeInfo.GetConstructor(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructor\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 440\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public ConstructorInfo GetConstructor(Type[] types)\n    content.vb: Public Function GetConstructor(types As Type()) As ConstructorInfo\n    parameters:\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.ConstructorInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetConstructor(System.Type())\n  name.vb: GetConstructor(Type())\n  nameWithType: TypeInfo.GetConstructor(Type[])\n  nameWithType.vb: TypeInfo.GetConstructor(Type())\n- uid: System.Reflection.TypeInfo.GetConstructors\n  commentId: M:System.Reflection.TypeInfo.GetConstructors\n  id: GetConstructors\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetConstructors()\n  fullName: System.Reflection.TypeInfo.GetConstructors()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructors\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 441\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public ConstructorInfo[] GetConstructors()\n    content.vb: Public Function GetConstructors As ConstructorInfo()\n    return:\n      type: System.Reflection.ConstructorInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetConstructors()\n- uid: System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)\n  id: GetConstructors(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetConstructors(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetConstructors\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 442\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetConstructors(bindingAttr As BindingFlags) As ConstructorInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.ConstructorInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetConstructors(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  id: GetDeclaredEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredEvent(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredEvent\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 82\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an object that represents the specified public event declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual EventInfo GetDeclaredEvent(string name)\n    content.vb: Public Overridable Function GetDeclaredEvent(name As String) As EventInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the event.</p>\\n\"\n    return:\n      type: System.Reflection.EventInfo\n      description: \"\\n<p>An object that represents the specified event, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredEvent(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  id: GetDeclaredField(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredField(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredField(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredField\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 86\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an object that represents the specified public field declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual FieldInfo GetDeclaredField(string name)\n    content.vb: Public Overridable Function GetDeclaredField(name As String) As FieldInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the field.</p>\\n\"\n    return:\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>An object that represents the specified field, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredField(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  id: GetDeclaredMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredMethod(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredMethod\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 90\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an object that represents the specified public method declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo GetDeclaredMethod(string name)\n    content.vb: Public Overridable Function GetDeclaredMethod(name As String) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the method.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>An object that represents the specified method, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredMethod(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  id: GetDeclaredMethods(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredMethods(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredMethods\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 95\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a collection that contains all public methods declared on the current type that match the specified name.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<MethodInfo> GetDeclaredMethods(string name)\n    content.vb: Public Overridable Function GetDeclaredMethods(name As String) As IEnumerable(Of MethodInfo)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The method name to search for.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n      description: \"\\n<p>A collection that contains methods that match <em>name</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredMethods(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  id: GetDeclaredNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredNestedType(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredNestedType\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 103\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an object that represents the specified public nested type declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual TypeInfo GetDeclaredNestedType(string name)\n    content.vb: Public Overridable Function GetDeclaredNestedType(name As String) As TypeInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the nested type.</p>\\n\"\n    return:\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>An object that represents the specified nested type, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredNestedType(String)\n- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  id: GetDeclaredProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDeclaredProperty(String)\n  fullName: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDeclaredProperty\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 112\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an object that represents the specified public property declared by the current type.</p>\\n\"\n  syntax:\n    content: public virtual PropertyInfo GetDeclaredProperty(string name)\n    content.vb: Public Overridable Function GetDeclaredProperty(name As String) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the property.</p>\\n\"\n    return:\n      type: System.Reflection.PropertyInfo\n      description: \"\\n<p>An object that represents the specified property, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDeclaredProperty(String)\n- uid: System.Reflection.TypeInfo.GetDefaultMembers\n  commentId: M:System.Reflection.TypeInfo.GetDefaultMembers\n  id: GetDefaultMembers\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetDefaultMembers()\n  fullName: System.Reflection.TypeInfo.GetDefaultMembers()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDefaultMembers\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 449\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MemberInfo[] GetDefaultMembers()\n    content.vb: Public Overridable Function GetDefaultMembers As MemberInfo()\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetDefaultMembers()\n- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  commentId: M:System.Reflection.TypeInfo.GetEnumName(System.Object)\n  id: GetEnumName(System.Object)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEnumName(Object)\n  fullName: System.Reflection.TypeInfo.GetEnumName(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumName\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 450\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual string GetEnumName(object value)\n    content.vb: Public Overridable Function GetEnumName(value As Object) As String\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEnumName(Object)\n- uid: System.Reflection.TypeInfo.GetEnumNames\n  commentId: M:System.Reflection.TypeInfo.GetEnumNames\n  id: GetEnumNames\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEnumNames()\n  fullName: System.Reflection.TypeInfo.GetEnumNames()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumNames\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 451\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual string[] GetEnumNames()\n    content.vb: Public Overridable Function GetEnumNames As String()\n    return:\n      type: System.String[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEnumNames()\n- uid: System.Reflection.TypeInfo.GetEnumUnderlyingType\n  commentId: M:System.Reflection.TypeInfo.GetEnumUnderlyingType\n  id: GetEnumUnderlyingType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEnumUnderlyingType()\n  fullName: System.Reflection.TypeInfo.GetEnumUnderlyingType()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumUnderlyingType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 452\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type GetEnumUnderlyingType()\n    content.vb: Public Overridable Function GetEnumUnderlyingType As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEnumUnderlyingType()\n- uid: System.Reflection.TypeInfo.GetEnumValues\n  commentId: M:System.Reflection.TypeInfo.GetEnumValues\n  id: GetEnumValues\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEnumValues()\n  fullName: System.Reflection.TypeInfo.GetEnumValues()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumValues\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 453\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Array GetEnumValues()\n    content.vb: Public Overridable Function GetEnumValues As Array\n    return:\n      type: System.Array\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEnumValues()\n- uid: System.Reflection.TypeInfo.GetEvent(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetEvent(System.String)\n  id: GetEvent(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEvent(String)\n  fullName: System.Reflection.TypeInfo.GetEvent(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvent\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 454\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public EventInfo GetEvent(string name)\n    content.vb: Public Function GetEvent(name As String) As EventInfo\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.EventInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetEvent(String)\n- uid: System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)\n  id: GetEvent(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEvent(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetEvent(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvent\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 455\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetEvent(name As String, bindingAttr As BindingFlags) As EventInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.EventInfo\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEvent(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetEvents\n  commentId: M:System.Reflection.TypeInfo.GetEvents\n  id: GetEvents\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEvents()\n  fullName: System.Reflection.TypeInfo.GetEvents()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvents\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 456\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual EventInfo[] GetEvents()\n    content.vb: Public Overridable Function GetEvents As EventInfo()\n    return:\n      type: System.Reflection.EventInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEvents()\n- uid: System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)\n  id: GetEvents(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetEvents(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEvents\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 457\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual EventInfo[] GetEvents(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetEvents(bindingAttr As BindingFlags) As EventInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.EventInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetEvents(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetField(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetField(System.String)\n  id: GetField(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetField(String)\n  fullName: System.Reflection.TypeInfo.GetField(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetField\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 458\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public FieldInfo GetField(string name)\n    content.vb: Public Function GetField(name As String) As FieldInfo\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.FieldInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetField(String)\n- uid: System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)\n  id: GetField(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetField(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetField(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetField\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 459\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual FieldInfo GetField(string name, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetField(name As String, bindingAttr As BindingFlags) As FieldInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.FieldInfo\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetField(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetFields\n  commentId: M:System.Reflection.TypeInfo.GetFields\n  id: GetFields\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFields()\n  fullName: System.Reflection.TypeInfo.GetFields()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFields\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 460\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public FieldInfo[] GetFields()\n    content.vb: Public Function GetFields As FieldInfo()\n    return:\n      type: System.Reflection.FieldInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetFields()\n- uid: System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)\n  id: GetFields(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetFields(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFields\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 461\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual FieldInfo[] GetFields(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetFields(bindingAttr As BindingFlags) As FieldInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.FieldInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetFields(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetGenericArguments\n  commentId: M:System.Reflection.TypeInfo.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGenericArguments()\n  fullName: System.Reflection.TypeInfo.GetGenericArguments()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGenericArguments\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 462\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type[] GetGenericArguments()\n    content.vb: Public Overridable Function GetGenericArguments As Type()\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetGenericArguments()\n- uid: System.Reflection.TypeInfo.GetInterface(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetInterface(System.String)\n  id: GetInterface(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetInterface(String)\n  fullName: System.Reflection.TypeInfo.GetInterface(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInterface\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 463\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public Type GetInterface(string name)\n    content.vb: Public Function GetInterface(name As String) As Type\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetInterface(String)\n- uid: System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)\n  commentId: M:System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)\n  id: GetInterface(System.String,System.Boolean)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetInterface(String, Boolean)\n  fullName: System.Reflection.TypeInfo.GetInterface(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInterface\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 464\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type GetInterface(string name, bool ignoreCase)\n    content.vb: Public Overridable Function GetInterface(name As String, ignoreCase As Boolean) As Type\n    parameters:\n    - id: name\n      type: System.String\n    - id: ignoreCase\n      type: System.Boolean\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetInterface(String, Boolean)\n- uid: System.Reflection.TypeInfo.GetInterfaces\n  commentId: M:System.Reflection.TypeInfo.GetInterfaces\n  id: GetInterfaces\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetInterfaces()\n  fullName: System.Reflection.TypeInfo.GetInterfaces()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInterfaces\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 465\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type[] GetInterfaces()\n    content.vb: Public Overridable Function GetInterfaces As Type()\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetInterfaces()\n- uid: System.Reflection.TypeInfo.GetMember(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetMember(System.String)\n  id: GetMember(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMember(String)\n  fullName: System.Reflection.TypeInfo.GetMember(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 466\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MemberInfo[] GetMember(string name)\n    content.vb: Public Function GetMember(name As String) As MemberInfo()\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetMember(String)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMember(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetMember(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 467\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetMember(name As String, bindingAttr As BindingFlags) As MemberInfo()\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetMember(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMember(String, MemberTypes, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMember\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 468\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetMember(name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()\n    parameters:\n    - id: name\n      type: System.String\n    - id: type\n      type: System.Reflection.MemberTypes\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetMember(String, MemberTypes, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMembers\n  commentId: M:System.Reflection.TypeInfo.GetMembers\n  id: GetMembers\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMembers()\n  fullName: System.Reflection.TypeInfo.GetMembers()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMembers\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 469\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MemberInfo[] GetMembers()\n    content.vb: Public Function GetMembers As MemberInfo()\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetMembers()\n- uid: System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)\n  id: GetMembers(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMembers(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMembers\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 470\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetMembers(bindingAttr As BindingFlags) As MemberInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MemberInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetMembers(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String)\n  id: GetMethod(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String)\n  fullName: System.Reflection.TypeInfo.GetMethod(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 471\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MethodInfo GetMethod(string name)\n    content.vb: Public Function GetMethod(name As String) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetMethod(String)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)\n  id: GetMethod(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 472\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MethodInfo GetMethod(string name, BindingFlags bindingAttr)\n    content.vb: Public Function GetMethod(name As String, bindingAttr As BindingFlags) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetMethod(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])\n  id: GetMethod(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String, Type[])\n  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 473\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MethodInfo GetMethod(string name, Type[] types)\n    content.vb: Public Function GetMethod(name As String, types As Type()) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetMethod(System.String, System.Type())\n  name.vb: GetMethod(String, Type())\n  nameWithType: TypeInfo.GetMethod(String, Type[])\n  nameWithType.vb: TypeInfo.GetMethod(String, Type())\n- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethod(String, Type[], ParameterModifier[])\n  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Type[], System.Reflection.ParameterModifier[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethod\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 474\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers)\n    content.vb: Public Function GetMethod(name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: types\n      type: System.Type[]\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n    return:\n      type: System.Reflection.MethodInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetMethod(System.String, System.Type(), System.Reflection.ParameterModifier())\n  name.vb: GetMethod(String, Type(), ParameterModifier())\n  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])\n  nameWithType.vb: TypeInfo.GetMethod(String, Type(), ParameterModifier())\n- uid: System.Reflection.TypeInfo.GetMethods\n  commentId: M:System.Reflection.TypeInfo.GetMethods\n  id: GetMethods\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethods()\n  fullName: System.Reflection.TypeInfo.GetMethods()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethods\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 475\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public MethodInfo[] GetMethods()\n    content.vb: Public Function GetMethods As MethodInfo()\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetMethods()\n- uid: System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)\n  id: GetMethods(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetMethods(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetMethods\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 476\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetMethods(bindingAttr As BindingFlags) As MethodInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.MethodInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetMethods(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetNestedType(System.String)\n  id: GetNestedType(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNestedType(String)\n  fullName: System.Reflection.TypeInfo.GetNestedType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 477\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public Type GetNestedType(string name)\n    content.vb: Public Function GetNestedType(name As String) As Type\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetNestedType(String)\n- uid: System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)\n  id: GetNestedType(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNestedType(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetNestedType(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 478\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type GetNestedType(string name, BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetNestedType(name As String, bindingAttr As BindingFlags) As Type\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetNestedType(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetNestedTypes\n  commentId: M:System.Reflection.TypeInfo.GetNestedTypes\n  id: GetNestedTypes\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNestedTypes()\n  fullName: System.Reflection.TypeInfo.GetNestedTypes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedTypes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 479\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public Type[] GetNestedTypes()\n    content.vb: Public Function GetNestedTypes As Type()\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetNestedTypes()\n- uid: System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)\n  id: GetNestedTypes(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNestedTypes(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNestedTypes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 480\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type[] GetNestedTypes(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetNestedTypes(bindingAttr As BindingFlags) As Type()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetNestedTypes(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperties\n  commentId: M:System.Reflection.TypeInfo.GetProperties\n  id: GetProperties\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperties()\n  fullName: System.Reflection.TypeInfo.GetProperties()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 481\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo[] GetProperties()\n    content.vb: Public Function GetProperties As PropertyInfo()\n    return:\n      type: System.Reflection.PropertyInfo[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetProperties()\n- uid: System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)\n  id: GetProperties(System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperties(BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperties\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 482\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr)\n    content.vb: Public Overridable Function GetProperties(bindingAttr As BindingFlags) As PropertyInfo()\n    parameters:\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.PropertyInfo[]\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.GetProperties(BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String)\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String)\n  id: GetProperty(System.String)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String)\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 483\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name)\n    content.vb: Public Function GetProperty(name As String) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetProperty(String)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)\n  id: GetProperty(System.String,System.Reflection.BindingFlags)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, BindingFlags)\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Reflection.BindingFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 484\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)\n    content.vb: Public Function GetProperty(name As String, bindingAttr As BindingFlags) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: bindingAttr\n      type: System.Reflection.BindingFlags\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetProperty(String, BindingFlags)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type)\n  id: GetProperty(System.String,System.Type)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, Type)\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 485\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name, Type returnType)\n    content.vb: Public Function GetProperty(name As String, returnType As Type) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: returnType\n      type: System.Type\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeInfo.GetProperty(String, Type)\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])\n  id: GetProperty(System.String,System.Type,System.Type[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, Type, Type[])\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 486\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types)\n    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type()) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: returnType\n      type: System.Type\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type())\n  name.vb: GetProperty(String, Type, Type())\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[])\n  nameWithType.vb: TypeInfo.GetProperty(String, Type, Type())\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  id: GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, Type, Type[], ParameterModifier[])\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type[], System.Reflection.ParameterModifier[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 487\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers)\n    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: returnType\n      type: System.Type\n    - id: types\n      type: System.Type[]\n    - id: modifiers\n      type: System.Reflection.ParameterModifier[]\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type(), System.Reflection.ParameterModifier())\n  name.vb: GetProperty(String, Type, Type(), ParameterModifier())\n  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])\n  nameWithType.vb: TypeInfo.GetProperty(String, Type, Type(), ParameterModifier())\n- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])\n  id: GetProperty(System.String,System.Type[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, Type[])\n  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 488\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public PropertyInfo GetProperty(string name, Type[] types)\n    content.vb: Public Function GetProperty(name As String, types As Type()) As PropertyInfo\n    parameters:\n    - id: name\n      type: System.String\n    - id: types\n      type: System.Type[]\n    return:\n      type: System.Reflection.PropertyInfo\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type())\n  name.vb: GetProperty(String, Type())\n  nameWithType: TypeInfo.GetProperty(String, Type[])\n  nameWithType.vb: TypeInfo.GetProperty(String, Type())\n- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  commentId: M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo\n  id: System#Reflection#IReflectableType#GetTypeInfo\n  isEii: true\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IReflectableType.GetTypeInfo()\n  fullName: System.Reflection.TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Reflection.IReflectableType.GetTypeInfo\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a representation of the current type as a <xref href=\\\"System.Reflection.TypeInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: TypeInfo IReflectableType.GetTypeInfo()\n    content.vb: Function System.Reflection.IReflectableType.GetTypeInfo As TypeInfo Implements IReflectableType.GetTypeInfo\n    return:\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>A reference to the current type.</p>\\n\"\n  implements:\n  - System.Reflection.IReflectableType.GetTypeInfo\n  name.vb: System.Reflection.IReflectableType.GetTypeInfo()\n  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()\n  nameWithType.vb: TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()\n- uid: System.Reflection.TypeInfo.ImplementedInterfaces\n  commentId: P:System.Reflection.TypeInfo.ImplementedInterfaces\n  id: ImplementedInterfaces\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: ImplementedInterfaces\n  fullName: System.Reflection.TypeInfo.ImplementedInterfaces\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ImplementedInterfaces\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 181\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection of the interfaces implemented by the current type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Type> ImplementedInterfaces { get; }\n    content.vb: Public Overridable ReadOnly Property ImplementedInterfaces As IEnumerable(Of Type)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Type}\n      description: \"\\n<p>A collection of the interfaces implemented by the current type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.ImplementedInterfaces\n- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  commentId: M:System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  id: IsAssignableFrom(System.Type)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAssignableFrom(Type)\n  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAssignableFrom\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 491\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsAssignableFrom(Type c)\n    content.vb: Public Overridable Function IsAssignableFrom(c As Type) As Boolean\n    parameters:\n    - id: c\n      type: System.Type\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsAssignableFrom(Type)\n- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)\n  commentId: M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)\n  id: IsAssignableFrom(System.Reflection.TypeInfo)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAssignableFrom(TypeInfo)\n  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAssignableFrom\n    path: src/mscorlib/src/System/Reflection/TypeInfo.cs\n    startLine: 50\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether the specified type can be assigned to the current type.</p>\\n\"\n  syntax:\n    content: public virtual bool IsAssignableFrom(TypeInfo typeInfo)\n    content.vb: Public Overridable Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean\n    parameters:\n    - id: typeInfo\n      type: System.Reflection.TypeInfo\n      description: \"\\n<p>The type to check.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified type can be assigned to this type; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsAssignableFrom(TypeInfo)\n- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  commentId: M:System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  id: IsEnumDefined(System.Object)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsEnumDefined(Object)\n  fullName: System.Reflection.TypeInfo.IsEnumDefined(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEnumDefined\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 493\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsEnumDefined(object value)\n    content.vb: Public Overridable Function IsEnumDefined(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsEnumDefined(Object)\n- uid: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  commentId: M:System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  id: IsInstanceOfType(System.Object)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsInstanceOfType(Object)\n  fullName: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInstanceOfType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 494\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsInstanceOfType(object o)\n    content.vb: Public Overridable Function IsInstanceOfType(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsInstanceOfType(Object)\n- uid: System.Reflection.TypeInfo.StructLayoutAttribute\n  commentId: P:System.Reflection.TypeInfo.StructLayoutAttribute\n  id: StructLayoutAttribute\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: StructLayoutAttribute\n  fullName: System.Reflection.TypeInfo.StructLayoutAttribute\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StructLayoutAttribute\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 495\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual StructLayoutAttribute StructLayoutAttribute { get; }\n    content.vb: Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute\n    parameters: []\n    return:\n      type: System.Runtime.InteropServices.StructLayoutAttribute\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.StructLayoutAttribute\n- uid: System.Reflection.TypeInfo.TypeInitializer\n  commentId: P:System.Reflection.TypeInfo.TypeInitializer\n  id: TypeInitializer\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: TypeInitializer\n  fullName: System.Reflection.TypeInfo.TypeInitializer\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeInitializer\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 496\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public ConstructorInfo TypeInitializer { get; }\n    content.vb: Public ReadOnly Property TypeInitializer As ConstructorInfo\n    parameters: []\n    return:\n      type: System.Reflection.ConstructorInfo\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.TypeInitializer\n- uid: System.Reflection.TypeInfo.UnderlyingSystemType\n  commentId: P:System.Reflection.TypeInfo.UnderlyingSystemType\n  id: UnderlyingSystemType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: UnderlyingSystemType\n  fullName: System.Reflection.TypeInfo.UnderlyingSystemType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UnderlyingSystemType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 497\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual Type UnderlyingSystemType { get; }\n    content.vb: Public Overridable ReadOnly Property UnderlyingSystemType As Type\n    parameters: []\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.UnderlyingSystemType\n- uid: System.Reflection.TypeInfo.MemberType\n  commentId: P:System.Reflection.TypeInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MemberType\n  fullName: System.Reflection.TypeInfo.MemberType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberType\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 498\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public override MemberTypes MemberType { get; }\n    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes\n    parameters: []\n    return:\n      type: System.Reflection.MemberTypes\n  overridden: System.Reflection.MemberInfo.MemberType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: TypeInfo.MemberType\n- uid: System.Reflection.TypeInfo.Attributes\n  commentId: P:System.Reflection.TypeInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.TypeInfo.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 26\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract TypeAttributes Attributes { get; }\n    content.vb: Public MustOverride ReadOnly Property Attributes As TypeAttributes\n    parameters: []\n    return:\n      type: System.Reflection.TypeAttributes\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.Attributes\n- uid: System.Reflection.TypeInfo.GetArrayRank\n  commentId: M:System.Reflection.TypeInfo.GetArrayRank\n  id: GetArrayRank\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetArrayRank()\n  fullName: System.Reflection.TypeInfo.GetArrayRank()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetArrayRank\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract int GetArrayRank()\n    content.vb: Public MustOverride Function GetArrayRank As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.GetArrayRank()\n- uid: System.Reflection.TypeInfo.GetElementType\n  commentId: M:System.Reflection.TypeInfo.GetElementType\n  id: GetElementType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetElementType()\n  fullName: System.Reflection.TypeInfo.GetElementType()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetElementType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 28\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type GetElementType()\n    content.vb: Public MustOverride Function GetElementType As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.GetElementType()\n- uid: System.Reflection.TypeInfo.GetGenericParameterConstraints\n  commentId: M:System.Reflection.TypeInfo.GetGenericParameterConstraints\n  id: GetGenericParameterConstraints\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGenericParameterConstraints()\n  fullName: System.Reflection.TypeInfo.GetGenericParameterConstraints()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGenericParameterConstraints\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 29\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type[] GetGenericParameterConstraints()\n    content.vb: Public MustOverride Function GetGenericParameterConstraints As Type()\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.GetGenericParameterConstraints()\n- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  commentId: M:System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  id: IsSubclassOf(System.Type)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSubclassOf(Type)\n  fullName: System.Reflection.TypeInfo.IsSubclassOf(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSubclassOf\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 30\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsSubclassOf(Type c)\n    content.vb: Public Overridable Function IsSubclassOf(c As Type) As Boolean\n    parameters:\n    - id: c\n      type: System.Type\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsSubclassOf(Type)\n- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  commentId: M:System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  id: IsEquivalentTo(System.Type)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsEquivalentTo(Type)\n  fullName: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEquivalentTo\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsEquivalentTo(Type other)\n    content.vb: Public Overridable Function IsEquivalentTo(other As Type) As Boolean\n    parameters:\n    - id: other\n      type: System.Type\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeInfo.IsEquivalentTo(Type)\n- uid: System.Reflection.TypeInfo.GenericTypeArguments\n  commentId: P:System.Reflection.TypeInfo.GenericTypeArguments\n  id: GenericTypeArguments\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GenericTypeArguments\n  fullName: System.Reflection.TypeInfo.GenericTypeArguments\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericTypeArguments\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 32\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type[] GenericTypeArguments { get; }\n    content.vb: Public MustOverride ReadOnly Property GenericTypeArguments As Type()\n    parameters: []\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.GenericTypeArguments\n- uid: System.Reflection.TypeInfo.GetGenericTypeDefinition\n  commentId: M:System.Reflection.TypeInfo.GetGenericTypeDefinition\n  id: GetGenericTypeDefinition\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGenericTypeDefinition()\n  fullName: System.Reflection.TypeInfo.GetGenericTypeDefinition()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGenericTypeDefinition\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 33\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type GetGenericTypeDefinition()\n    content.vb: Public MustOverride Function GetGenericTypeDefinition As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.GetGenericTypeDefinition()\n- uid: System.Reflection.TypeInfo.Assembly\n  commentId: P:System.Reflection.TypeInfo.Assembly\n  id: Assembly\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: Assembly\n  fullName: System.Reflection.TypeInfo.Assembly\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Assembly\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 34\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Assembly Assembly { get; }\n    content.vb: Public MustOverride ReadOnly Property Assembly As Assembly\n    parameters: []\n    return:\n      type: System.Reflection.Assembly\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.Assembly\n- uid: System.Reflection.TypeInfo.BaseType\n  commentId: P:System.Reflection.TypeInfo.BaseType\n  id: BaseType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: BaseType\n  fullName: System.Reflection.TypeInfo.BaseType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 35\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type BaseType { get; }\n    content.vb: Public MustOverride ReadOnly Property BaseType As Type\n    parameters: []\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.BaseType\n- uid: System.Reflection.TypeInfo.ContainsGenericParameters\n  commentId: P:System.Reflection.TypeInfo.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: ContainsGenericParameters\n  fullName: System.Reflection.TypeInfo.ContainsGenericParameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContainsGenericParameters\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 36\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool ContainsGenericParameters { get; }\n    content.vb: Public MustOverride ReadOnly Property ContainsGenericParameters As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.ContainsGenericParameters\n- uid: System.Reflection.TypeInfo.DeclaringMethod\n  commentId: P:System.Reflection.TypeInfo.DeclaringMethod\n  id: DeclaringMethod\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: DeclaringMethod\n  fullName: System.Reflection.TypeInfo.DeclaringMethod\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeclaringMethod\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract MethodBase DeclaringMethod { get; }\n    content.vb: Public MustOverride ReadOnly Property DeclaringMethod As MethodBase\n    parameters: []\n    return:\n      type: System.Reflection.MethodBase\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.DeclaringMethod\n- uid: System.Reflection.TypeInfo.FullName\n  commentId: P:System.Reflection.TypeInfo.FullName\n  id: FullName\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: FullName\n  fullName: System.Reflection.TypeInfo.FullName\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FullName\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 39\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract string FullName { get; }\n    content.vb: Public MustOverride ReadOnly Property FullName As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.FullName\n- uid: System.Reflection.TypeInfo.GenericParameterAttributes\n  commentId: P:System.Reflection.TypeInfo.GenericParameterAttributes\n  id: GenericParameterAttributes\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GenericParameterAttributes\n  fullName: System.Reflection.TypeInfo.GenericParameterAttributes\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericParameterAttributes\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 40\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract GenericParameterAttributes GenericParameterAttributes { get; }\n    content.vb: Public MustOverride ReadOnly Property GenericParameterAttributes As GenericParameterAttributes\n    parameters: []\n    return:\n      type: System.Reflection.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.GenericParameterAttributes\n- uid: System.Reflection.TypeInfo.GenericParameterPosition\n  commentId: P:System.Reflection.TypeInfo.GenericParameterPosition\n  id: GenericParameterPosition\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GenericParameterPosition\n  fullName: System.Reflection.TypeInfo.GenericParameterPosition\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericParameterPosition\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 41\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract int GenericParameterPosition { get; }\n    content.vb: Public MustOverride ReadOnly Property GenericParameterPosition As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.GenericParameterPosition\n- uid: System.Reflection.TypeInfo.GUID\n  commentId: P:System.Reflection.TypeInfo.GUID\n  id: GUID\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: GUID\n  fullName: System.Reflection.TypeInfo.GUID\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GUID\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 42\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Guid GUID { get; }\n    content.vb: Public MustOverride ReadOnly Property GUID As Guid\n    parameters: []\n    return:\n      type: System.Guid\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.GUID\n- uid: System.Reflection.TypeInfo.HasElementType\n  commentId: P:System.Reflection.TypeInfo.HasElementType\n  id: HasElementType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: HasElementType\n  fullName: System.Reflection.TypeInfo.HasElementType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasElementType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 43\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool HasElementType { get; }\n    content.vb: Public ReadOnly Property HasElementType As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.HasElementType\n- uid: System.Reflection.TypeInfo.IsAbstract\n  commentId: P:System.Reflection.TypeInfo.IsAbstract\n  id: IsAbstract\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAbstract\n  fullName: System.Reflection.TypeInfo.IsAbstract\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAbstract\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 44\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsAbstract { get; }\n    content.vb: Public ReadOnly Property IsAbstract As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsAbstract\n- uid: System.Reflection.TypeInfo.IsAnsiClass\n  commentId: P:System.Reflection.TypeInfo.IsAnsiClass\n  id: IsAnsiClass\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAnsiClass\n  fullName: System.Reflection.TypeInfo.IsAnsiClass\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAnsiClass\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsAnsiClass { get; }\n    content.vb: Public ReadOnly Property IsAnsiClass As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsAnsiClass\n- uid: System.Reflection.TypeInfo.IsArray\n  commentId: P:System.Reflection.TypeInfo.IsArray\n  id: IsArray\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsArray\n  fullName: System.Reflection.TypeInfo.IsArray\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsArray\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 46\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsArray { get; }\n    content.vb: Public ReadOnly Property IsArray As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsArray\n- uid: System.Reflection.TypeInfo.IsAutoClass\n  commentId: P:System.Reflection.TypeInfo.IsAutoClass\n  id: IsAutoClass\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAutoClass\n  fullName: System.Reflection.TypeInfo.IsAutoClass\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAutoClass\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 47\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsAutoClass { get; }\n    content.vb: Public ReadOnly Property IsAutoClass As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsAutoClass\n- uid: System.Reflection.TypeInfo.IsAutoLayout\n  commentId: P:System.Reflection.TypeInfo.IsAutoLayout\n  id: IsAutoLayout\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsAutoLayout\n  fullName: System.Reflection.TypeInfo.IsAutoLayout\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAutoLayout\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 48\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsAutoLayout { get; }\n    content.vb: Public ReadOnly Property IsAutoLayout As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsAutoLayout\n- uid: System.Reflection.TypeInfo.IsByRef\n  commentId: P:System.Reflection.TypeInfo.IsByRef\n  id: IsByRef\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsByRef\n  fullName: System.Reflection.TypeInfo.IsByRef\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsByRef\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsByRef { get; }\n    content.vb: Public ReadOnly Property IsByRef As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsByRef\n- uid: System.Reflection.TypeInfo.IsClass\n  commentId: P:System.Reflection.TypeInfo.IsClass\n  id: IsClass\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsClass\n  fullName: System.Reflection.TypeInfo.IsClass\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsClass\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 50\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsClass { get; }\n    content.vb: Public ReadOnly Property IsClass As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsClass\n- uid: System.Reflection.TypeInfo.IsCOMObject\n  commentId: P:System.Reflection.TypeInfo.IsCOMObject\n  id: IsCOMObject\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsCOMObject\n  fullName: System.Reflection.TypeInfo.IsCOMObject\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsCOMObject\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 51\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsCOMObject { get; }\n    content.vb: Public Overridable ReadOnly Property IsCOMObject As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.IsCOMObject\n- uid: System.Reflection.TypeInfo.IsEnum\n  commentId: P:System.Reflection.TypeInfo.IsEnum\n  id: IsEnum\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsEnum\n  fullName: System.Reflection.TypeInfo.IsEnum\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEnum\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 52\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool IsEnum { get; }\n    content.vb: Public MustOverride ReadOnly Property IsEnum As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.IsEnum\n- uid: System.Reflection.TypeInfo.IsExplicitLayout\n  commentId: P:System.Reflection.TypeInfo.IsExplicitLayout\n  id: IsExplicitLayout\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsExplicitLayout\n  fullName: System.Reflection.TypeInfo.IsExplicitLayout\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsExplicitLayout\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 53\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsExplicitLayout { get; }\n    content.vb: Public ReadOnly Property IsExplicitLayout As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsExplicitLayout\n- uid: System.Reflection.TypeInfo.IsGenericParameter\n  commentId: P:System.Reflection.TypeInfo.IsGenericParameter\n  id: IsGenericParameter\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsGenericParameter\n  fullName: System.Reflection.TypeInfo.IsGenericParameter\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsGenericParameter\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 54\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool IsGenericParameter { get; }\n    content.vb: Public MustOverride ReadOnly Property IsGenericParameter As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.IsGenericParameter\n- uid: System.Reflection.TypeInfo.IsGenericType\n  commentId: P:System.Reflection.TypeInfo.IsGenericType\n  id: IsGenericType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsGenericType\n  fullName: System.Reflection.TypeInfo.IsGenericType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsGenericType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 55\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool IsGenericType { get; }\n    content.vb: Public MustOverride ReadOnly Property IsGenericType As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.IsGenericType\n- uid: System.Reflection.TypeInfo.IsGenericTypeDefinition\n  commentId: P:System.Reflection.TypeInfo.IsGenericTypeDefinition\n  id: IsGenericTypeDefinition\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsGenericTypeDefinition\n  fullName: System.Reflection.TypeInfo.IsGenericTypeDefinition\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsGenericTypeDefinition\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 56\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool IsGenericTypeDefinition { get; }\n    content.vb: Public MustOverride ReadOnly Property IsGenericTypeDefinition As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.IsGenericTypeDefinition\n- uid: System.Reflection.TypeInfo.IsImport\n  commentId: P:System.Reflection.TypeInfo.IsImport\n  id: IsImport\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsImport\n  fullName: System.Reflection.TypeInfo.IsImport\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsImport\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 57\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsImport { get; }\n    content.vb: Public ReadOnly Property IsImport As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsImport\n- uid: System.Reflection.TypeInfo.IsInterface\n  commentId: P:System.Reflection.TypeInfo.IsInterface\n  id: IsInterface\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsInterface\n  fullName: System.Reflection.TypeInfo.IsInterface\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInterface\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 58\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsInterface { get; }\n    content.vb: Public ReadOnly Property IsInterface As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsInterface\n- uid: System.Reflection.TypeInfo.IsLayoutSequential\n  commentId: P:System.Reflection.TypeInfo.IsLayoutSequential\n  id: IsLayoutSequential\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsLayoutSequential\n  fullName: System.Reflection.TypeInfo.IsLayoutSequential\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsLayoutSequential\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 59\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsLayoutSequential { get; }\n    content.vb: Public ReadOnly Property IsLayoutSequential As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsLayoutSequential\n- uid: System.Reflection.TypeInfo.IsMarshalByRef\n  commentId: P:System.Reflection.TypeInfo.IsMarshalByRef\n  id: IsMarshalByRef\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsMarshalByRef\n  fullName: System.Reflection.TypeInfo.IsMarshalByRef\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMarshalByRef\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 60\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsMarshalByRef { get; }\n    content.vb: Public ReadOnly Property IsMarshalByRef As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsMarshalByRef\n- uid: System.Reflection.TypeInfo.IsNested\n  commentId: P:System.Reflection.TypeInfo.IsNested\n  id: IsNested\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNested\n  fullName: System.Reflection.TypeInfo.IsNested\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNested\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 61\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNested { get; }\n    content.vb: Public ReadOnly Property IsNested As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNested\n- uid: System.Reflection.TypeInfo.IsNestedAssembly\n  commentId: P:System.Reflection.TypeInfo.IsNestedAssembly\n  id: IsNestedAssembly\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedAssembly\n  fullName: System.Reflection.TypeInfo.IsNestedAssembly\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedAssembly\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 62\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedAssembly { get; }\n    content.vb: Public ReadOnly Property IsNestedAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedAssembly\n- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  commentId: P:System.Reflection.TypeInfo.IsNestedFamANDAssem\n  id: IsNestedFamANDAssem\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedFamANDAssem\n  fullName: System.Reflection.TypeInfo.IsNestedFamANDAssem\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedFamANDAssem\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 63\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedFamANDAssem { get; }\n    content.vb: Public ReadOnly Property IsNestedFamANDAssem As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedFamANDAssem\n- uid: System.Reflection.TypeInfo.IsNestedFamily\n  commentId: P:System.Reflection.TypeInfo.IsNestedFamily\n  id: IsNestedFamily\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedFamily\n  fullName: System.Reflection.TypeInfo.IsNestedFamily\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedFamily\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 64\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedFamily { get; }\n    content.vb: Public ReadOnly Property IsNestedFamily As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedFamily\n- uid: System.Reflection.TypeInfo.IsNestedFamORAssem\n  commentId: P:System.Reflection.TypeInfo.IsNestedFamORAssem\n  id: IsNestedFamORAssem\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedFamORAssem\n  fullName: System.Reflection.TypeInfo.IsNestedFamORAssem\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedFamORAssem\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 65\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedFamORAssem { get; }\n    content.vb: Public ReadOnly Property IsNestedFamORAssem As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedFamORAssem\n- uid: System.Reflection.TypeInfo.IsNestedPrivate\n  commentId: P:System.Reflection.TypeInfo.IsNestedPrivate\n  id: IsNestedPrivate\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedPrivate\n  fullName: System.Reflection.TypeInfo.IsNestedPrivate\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedPrivate\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 66\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedPrivate { get; }\n    content.vb: Public ReadOnly Property IsNestedPrivate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedPrivate\n- uid: System.Reflection.TypeInfo.IsNestedPublic\n  commentId: P:System.Reflection.TypeInfo.IsNestedPublic\n  id: IsNestedPublic\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNestedPublic\n  fullName: System.Reflection.TypeInfo.IsNestedPublic\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNestedPublic\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 67\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNestedPublic { get; }\n    content.vb: Public ReadOnly Property IsNestedPublic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNestedPublic\n- uid: System.Reflection.TypeInfo.IsNotPublic\n  commentId: P:System.Reflection.TypeInfo.IsNotPublic\n  id: IsNotPublic\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsNotPublic\n  fullName: System.Reflection.TypeInfo.IsNotPublic\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsNotPublic\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 68\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsNotPublic { get; }\n    content.vb: Public ReadOnly Property IsNotPublic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsNotPublic\n- uid: System.Reflection.TypeInfo.IsPointer\n  commentId: P:System.Reflection.TypeInfo.IsPointer\n  id: IsPointer\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPointer\n  fullName: System.Reflection.TypeInfo.IsPointer\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPointer\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 69\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsPointer { get; }\n    content.vb: Public ReadOnly Property IsPointer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsPointer\n- uid: System.Reflection.TypeInfo.IsPrimitive\n  commentId: P:System.Reflection.TypeInfo.IsPrimitive\n  id: IsPrimitive\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPrimitive\n  fullName: System.Reflection.TypeInfo.IsPrimitive\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPrimitive\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 70\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsPrimitive { get; }\n    content.vb: Public Overridable ReadOnly Property IsPrimitive As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.IsPrimitive\n- uid: System.Reflection.TypeInfo.IsPublic\n  commentId: P:System.Reflection.TypeInfo.IsPublic\n  id: IsPublic\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsPublic\n  fullName: System.Reflection.TypeInfo.IsPublic\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsPublic\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 71\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsPublic { get; }\n    content.vb: Public ReadOnly Property IsPublic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsPublic\n- uid: System.Reflection.TypeInfo.IsSealed\n  commentId: P:System.Reflection.TypeInfo.IsSealed\n  id: IsSealed\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSealed\n  fullName: System.Reflection.TypeInfo.IsSealed\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSealed\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsSealed { get; }\n    content.vb: Public ReadOnly Property IsSealed As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsSealed\n- uid: System.Reflection.TypeInfo.IsVisible\n  commentId: P:System.Reflection.TypeInfo.IsVisible\n  id: IsVisible\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsVisible\n  fullName: System.Reflection.TypeInfo.IsVisible\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsVisible\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 73\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsVisible { get; }\n    content.vb: Public ReadOnly Property IsVisible As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsVisible\n- uid: System.Reflection.TypeInfo.IsSerializable\n  commentId: P:System.Reflection.TypeInfo.IsSerializable\n  id: IsSerializable\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSerializable\n  fullName: System.Reflection.TypeInfo.IsSerializable\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSerializable\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 74\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract bool IsSerializable { get; }\n    content.vb: Public MustOverride ReadOnly Property IsSerializable As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.IsSerializable\n- uid: System.Reflection.TypeInfo.IsSpecialName\n  commentId: P:System.Reflection.TypeInfo.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialName\n  fullName: System.Reflection.TypeInfo.IsSpecialName\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSpecialName\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 75\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsSpecialName { get; }\n    content.vb: Public ReadOnly Property IsSpecialName As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsSpecialName\n- uid: System.Reflection.TypeInfo.IsUnicodeClass\n  commentId: P:System.Reflection.TypeInfo.IsUnicodeClass\n  id: IsUnicodeClass\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsUnicodeClass\n  fullName: System.Reflection.TypeInfo.IsUnicodeClass\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsUnicodeClass\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 76\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public bool IsUnicodeClass { get; }\n    content.vb: Public ReadOnly Property IsUnicodeClass As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TypeInfo.IsUnicodeClass\n- uid: System.Reflection.TypeInfo.IsValueType\n  commentId: P:System.Reflection.TypeInfo.IsValueType\n  id: IsValueType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: IsValueType\n  fullName: System.Reflection.TypeInfo.IsValueType\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValueType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 77\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public virtual bool IsValueType { get; }\n    content.vb: Public Overridable ReadOnly Property IsValueType As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TypeInfo.IsValueType\n- uid: System.Reflection.TypeInfo.Namespace\n  commentId: P:System.Reflection.TypeInfo.Namespace\n  id: Namespace\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: Namespace\n  fullName: System.Reflection.TypeInfo.Namespace\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Namespace\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 78\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract string Namespace { get; }\n    content.vb: Public MustOverride ReadOnly Property Namespace As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.Namespace\n- uid: System.Reflection.TypeInfo.AssemblyQualifiedName\n  commentId: P:System.Reflection.TypeInfo.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: AssemblyQualifiedName\n  fullName: System.Reflection.TypeInfo.AssemblyQualifiedName\n  type: Property\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AssemblyQualifiedName\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 79\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract string AssemblyQualifiedName { get; }\n    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: TypeInfo.AssemblyQualifiedName\n- uid: System.Reflection.TypeInfo.MakeArrayType\n  commentId: M:System.Reflection.TypeInfo.MakeArrayType\n  id: MakeArrayType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MakeArrayType()\n  fullName: System.Reflection.TypeInfo.MakeArrayType()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeArrayType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 81\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type MakeArrayType()\n    content.vb: Public MustOverride Function MakeArrayType As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.MakeArrayType()\n- uid: System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  commentId: M:System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  id: MakeArrayType(System.Int32)\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MakeArrayType(Int32)\n  fullName: System.Reflection.TypeInfo.MakeArrayType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeArrayType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 82\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type MakeArrayType(int rank)\n    content.vb: Public MustOverride Function MakeArrayType(rank As Integer) As Type\n    parameters:\n    - id: rank\n      type: System.Int32\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.MakeArrayType(Int32)\n- uid: System.Reflection.TypeInfo.MakeByRefType\n  commentId: M:System.Reflection.TypeInfo.MakeByRefType\n  id: MakeByRefType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MakeByRefType()\n  fullName: System.Reflection.TypeInfo.MakeByRefType()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeByRefType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 83\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type MakeByRefType()\n    content.vb: Public MustOverride Function MakeByRefType As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.MakeByRefType()\n- uid: System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  commentId: M:System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  id: MakeGenericType(System.Type[])\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MakeGenericType(Type[])\n  fullName: System.Reflection.TypeInfo.MakeGenericType(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakeGenericType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 84\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type MakeGenericType(params Type[] typeArguments)\n    content.vb: Public MustOverride Function MakeGenericType(ParamArray typeArguments As Type()) As Type\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Reflection.TypeInfo.MakeGenericType(System.Type())\n  name.vb: MakeGenericType(Type())\n  nameWithType: TypeInfo.MakeGenericType(Type[])\n  nameWithType.vb: TypeInfo.MakeGenericType(Type())\n- uid: System.Reflection.TypeInfo.MakePointerType\n  commentId: M:System.Reflection.TypeInfo.MakePointerType\n  id: MakePointerType\n  parent: System.Reflection.TypeInfo\n  langs:\n  - csharp\n  - vb\n  name: MakePointerType()\n  fullName: System.Reflection.TypeInfo.MakePointerType()\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MakePointerType\n    path: src/System.Reflection/ref/System.Reflection.Manual.cs\n    startLine: 85\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: public abstract Type MakePointerType()\n    content.vb: Public MustOverride Function MakePointerType As Type\n    return:\n      type: System.Type\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: TypeInfo.MakePointerType()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.IReflectableType\n  parent: System.Reflection\n  isExternal: false\n  name: IReflectableType\n  fullName: System.Reflection.IReflectableType\n  nameWithType: IReflectableType\n  commentId: T:System.Reflection.IReflectableType\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MemberInfo.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.Equals(Object)\n  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MemberInfo.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.GetHashCode()\n  commentId: M:System.Reflection.MemberInfo.GetHashCode\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<ConstructorInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.ConstructorInfo)\n  name.vb: IEnumerable(Of ConstructorInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<ConstructorInfo>\n  nameWithType.vb: IEnumerable(Of ConstructorInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<EventInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)\n  name.vb: IEnumerable(Of EventInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<EventInfo>\n  nameWithType.vb: IEnumerable(Of EventInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<FieldInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)\n  name.vb: IEnumerable(Of FieldInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<FieldInfo>\n  nameWithType.vb: IEnumerable(Of FieldInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<MemberInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)\n  name.vb: IEnumerable(Of MemberInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<MemberInfo>\n  nameWithType.vb: IEnumerable(Of MemberInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<MethodInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)\n  name.vb: IEnumerable(Of MethodInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<MethodInfo>\n  nameWithType.vb: IEnumerable(Of MethodInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<TypeInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)\n  name.vb: IEnumerable(Of TypeInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.TypeInfo\n    name: TypeInfo\n    fullName: System.Reflection.TypeInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.TypeInfo\n    name: TypeInfo\n    fullName: System.Reflection.TypeInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<TypeInfo>\n  nameWithType.vb: IEnumerable(Of TypeInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<PropertyInfo>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)\n  name.vb: IEnumerable(Of PropertyInfo)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<PropertyInfo>\n  nameWithType.vb: IEnumerable(Of PropertyInfo)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}\n- uid: System.Reflection.TypeFilter\n  parent: System.Reflection\n  isExternal: false\n  name: TypeFilter\n  fullName: System.Reflection.TypeFilter\n  nameWithType: TypeFilter\n  commentId: T:System.Reflection.TypeFilter\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  fullName: System.Reflection.MemberTypes\n  nameWithType: MemberTypes\n  commentId: T:System.Reflection.MemberTypes\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  fullName: System.Reflection.BindingFlags\n  nameWithType: BindingFlags\n  commentId: T:System.Reflection.BindingFlags\n- uid: System.Reflection.MemberFilter\n  parent: System.Reflection\n  isExternal: false\n  name: MemberFilter\n  fullName: System.Reflection.MemberFilter\n  nameWithType: MemberFilter\n  commentId: T:System.Reflection.MemberFilter\n- uid: System.Reflection.MemberInfo[]\n  name: MemberInfo[]\n  fullName: System.Reflection.MemberInfo[]\n  fullname.vb: System.Reflection.MemberInfo()\n  name.vb: MemberInfo()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MemberInfo\n    name: MemberInfo\n    fullName: System.Reflection.MemberInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MemberInfo[]\n  nameWithType.vb: MemberInfo()\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n  nameWithType: ConstructorInfo\n  commentId: T:System.Reflection.ConstructorInfo\n- uid: System.Reflection.ConstructorInfo[]\n  name: ConstructorInfo[]\n  fullName: System.Reflection.ConstructorInfo[]\n  fullname.vb: System.Reflection.ConstructorInfo()\n  name.vb: ConstructorInfo()\n  spec.csharp:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.ConstructorInfo\n    name: ConstructorInfo\n    fullName: System.Reflection.ConstructorInfo\n  - name: ()\n    fullName: ()\n  nameWithType: ConstructorInfo[]\n  nameWithType.vb: ConstructorInfo()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Reflection.EventInfo\n  parent: System.Reflection\n  isExternal: false\n  name: EventInfo\n  fullName: System.Reflection.EventInfo\n  nameWithType: EventInfo\n  commentId: T:System.Reflection.EventInfo\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Reflection.TypeInfo\n  parent: System.Reflection\n  isExternal: false\n  name: TypeInfo\n  fullName: System.Reflection.TypeInfo\n  nameWithType: TypeInfo\n  commentId: T:System.Reflection.TypeInfo\n- uid: System.Reflection.PropertyInfo\n  parent: System.Reflection\n  isExternal: false\n  name: PropertyInfo\n  fullName: System.Reflection.PropertyInfo\n  nameWithType: PropertyInfo\n  commentId: T:System.Reflection.PropertyInfo\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Reflection.EventInfo[]\n  name: EventInfo[]\n  fullName: System.Reflection.EventInfo[]\n  fullname.vb: System.Reflection.EventInfo()\n  name.vb: EventInfo()\n  spec.csharp:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.EventInfo\n    name: EventInfo\n    fullName: System.Reflection.EventInfo\n  - name: ()\n    fullName: ()\n  nameWithType: EventInfo[]\n  nameWithType.vb: EventInfo()\n- uid: System.Reflection.FieldInfo[]\n  name: FieldInfo[]\n  fullName: System.Reflection.FieldInfo[]\n  fullname.vb: System.Reflection.FieldInfo()\n  name.vb: FieldInfo()\n  spec.csharp:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.FieldInfo\n    name: FieldInfo\n    fullName: System.Reflection.FieldInfo\n  - name: ()\n    fullName: ()\n  nameWithType: FieldInfo[]\n  nameWithType.vb: FieldInfo()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.ParameterModifier[]\n  name: ParameterModifier[]\n  fullName: System.Reflection.ParameterModifier[]\n  fullname.vb: System.Reflection.ParameterModifier()\n  name.vb: ParameterModifier()\n  spec.csharp:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.ParameterModifier\n    name: ParameterModifier\n    fullName: System.Reflection.ParameterModifier\n  - name: ()\n    fullName: ()\n  nameWithType: ParameterModifier[]\n  nameWithType.vb: ParameterModifier()\n- uid: System.Reflection.MethodInfo[]\n  name: MethodInfo[]\n  fullName: System.Reflection.MethodInfo[]\n  fullname.vb: System.Reflection.MethodInfo()\n  name.vb: MethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.MethodInfo\n    name: MethodInfo\n    fullName: System.Reflection.MethodInfo\n  - name: ()\n    fullName: ()\n  nameWithType: MethodInfo[]\n  nameWithType.vb: MethodInfo()\n- uid: System.Reflection.PropertyInfo[]\n  name: PropertyInfo[]\n  fullName: System.Reflection.PropertyInfo[]\n  fullname.vb: System.Reflection.PropertyInfo()\n  name.vb: PropertyInfo()\n  spec.csharp:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.PropertyInfo\n    name: PropertyInfo\n    fullName: System.Reflection.PropertyInfo\n  - name: ()\n    fullName: ()\n  nameWithType: PropertyInfo[]\n  nameWithType.vb: PropertyInfo()\n- uid: System.Reflection.IReflectableType.GetTypeInfo\n  parent: System.Reflection.IReflectableType\n  isExternal: false\n  name: GetTypeInfo()\n  fullName: System.Reflection.IReflectableType.GetTypeInfo()\n  spec.csharp:\n  - uid: System.Reflection.IReflectableType.GetTypeInfo\n    name: GetTypeInfo\n    fullName: System.Reflection.IReflectableType.GetTypeInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.IReflectableType.GetTypeInfo\n    name: GetTypeInfo\n    fullName: System.Reflection.IReflectableType.GetTypeInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IReflectableType.GetTypeInfo()\n  commentId: M:System.Reflection.IReflectableType.GetTypeInfo\n- uid: System.Collections.Generic.IEnumerable{System.Type}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Type>\n  fullName: System.Collections.Generic.IEnumerable<System.Type>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)\n  name.vb: IEnumerable(Of Type)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Type>\n  nameWithType.vb: IEnumerable(Of Type)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Type}\n- uid: System.Runtime.InteropServices.StructLayoutAttribute\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: StructLayoutAttribute\n  fullName: System.Runtime.InteropServices.StructLayoutAttribute\n  nameWithType: StructLayoutAttribute\n  commentId: T:System.Runtime.InteropServices.StructLayoutAttribute\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.TypeAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: TypeAttributes\n  fullName: System.Reflection.TypeAttributes\n  nameWithType: TypeAttributes\n  commentId: T:System.Reflection.TypeAttributes\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.Assembly\n  parent: System.Reflection\n  isExternal: false\n  name: Assembly\n  fullName: System.Reflection.Assembly\n  nameWithType: Assembly\n  commentId: T:System.Reflection.Assembly\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  fullName: System.Reflection.MethodBase\n  nameWithType: MethodBase\n  commentId: T:System.Reflection.MethodBase\n- uid: System.Reflection.GenericParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: GenericParameterAttributes\n  fullName: System.Reflection.GenericParameterAttributes\n  nameWithType: GenericParameterAttributes\n  commentId: T:System.Reflection.GenericParameterAttributes\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}