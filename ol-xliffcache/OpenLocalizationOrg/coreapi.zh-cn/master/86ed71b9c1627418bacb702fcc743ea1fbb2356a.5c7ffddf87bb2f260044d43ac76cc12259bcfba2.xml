{"nodes":[{"pos":[818,833],"content":"IncrementalHash","needQuote":true,"nodes":[{"content":"IncrementalHash","pos":[0,15]}]},{"pos":[2275,2288],"content":"AlgorithmName","needQuote":true,"nodes":[{"content":"AlgorithmName","pos":[0,13]}]},{"pos":[3462,3480],"content":"AppendData(Byte[])","needQuote":true,"nodes":[{"content":"AppendData(Byte[])","pos":[0,18]}]},{"pos":[4826,4858],"content":"AppendData(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"AppendData(Byte[], Int32, Int32)","pos":[0,32]}]},{"pos":[6466,6495],"content":"CreateHash(HashAlgorithmName)","needQuote":true,"nodes":[{"content":"CreateHash(HashAlgorithmName)","pos":[0,29]}]},{"pos":[8000,8037],"content":"CreateHMAC(HashAlgorithmName, Byte[])","needQuote":true,"nodes":[{"content":"CreateHMAC(HashAlgorithmName, Byte[])","pos":[0,37]}]},{"pos":[9693,9702],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[10697,10714],"content":"GetHashAndReset()","needQuote":true,"nodes":[{"content":"GetHashAndReset()","pos":[0,17]}]},{"pos":[11623,11651],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[11833,11839],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11994,12005],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[12184,12194],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12323,12331],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12434,12435],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12482,12483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12573,12581],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12684,12685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12732,12733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12915,12929],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13086,13092],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13191,13192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13262,13268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13353,13354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13457,13463],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13562,13563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13633,13639],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13724,13725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13935,13957],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14151,14157],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14256,14257],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14327,14333],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14419,14420]},{"pos":[14498,14504],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14589,14590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14707,14713],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14812,14813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14883,14889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14975,14976]},{"pos":[15054,15060],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15145,15146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15374,15405],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[15626,15641],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15758,15759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15829,15835],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15921,15922]},{"pos":[16000,16006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16091,16092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16218,16233],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16350,16351],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16421,16427],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16513,16514]},{"pos":[16592,16598],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16683,16684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16846,16859],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16997,17008],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17117,17118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17165,17166],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17259,17270],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17379,17380],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17427,17428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17582,17591],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[17717,17724],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[17825,17826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17873,17874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17963,17970],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18071,18072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18119,18120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18290,18307],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[18457,18472],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18589,18590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18637,18638],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18735,18750],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[18867,18868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18915,18916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19017,19023],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19249,19266],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[19389,19395],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[19564,19568],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[19650,19652]},{"pos":[19738,19742],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[19823,19825],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[19957,19962],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20189,20204],"content":"IncrementalHash","needQuote":true,"nodes":[{"content":"IncrementalHash","pos":[0,15]}]},{"pos":[20427,20436],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[20577,20584],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20674,20675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20722,20723],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20817,20824],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20914,20915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20962,20963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Security.Cryptography.IncrementalHash\n  commentId: T:System.Security.Cryptography.IncrementalHash\n  id: IncrementalHash\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.IncrementalHash.AlgorithmName\n  - System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])\n  - System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  - System.Security.Cryptography.IncrementalHash.Dispose\n  - System.Security.Cryptography.IncrementalHash.GetHashAndReset\n  langs:\n  - csharp\n  - vb\n  name: IncrementalHash\n  nameWithType: IncrementalHash\n  fullName: System.Security.Cryptography.IncrementalHash\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IncrementalHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 167\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: 'public sealed class IncrementalHash : IDisposable'\n    content.vb: >-\n      Public NotInheritable Class IncrementalHash\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n- uid: System.Security.Cryptography.IncrementalHash.AlgorithmName\n  commentId: P:System.Security.Cryptography.IncrementalHash.AlgorithmName\n  id: AlgorithmName\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmName\n  nameWithType: IncrementalHash.AlgorithmName\n  fullName: System.Security.Cryptography.IncrementalHash.AlgorithmName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AlgorithmName\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 170\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public HashAlgorithmName AlgorithmName { get; }\n    content.vb: Public ReadOnly Property AlgorithmName As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])\n  commentId: M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])\n  id: AppendData(System.Byte[])\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: AppendData(Byte[])\n  nameWithType: IncrementalHash.AppendData(Byte[])\n  fullName: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 171\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void AppendData(byte[] data)\n    content.vb: Public Sub AppendData(data As Byte())\n    parameters:\n    - id: data\n      type: System.Byte[]\n  nameWithType.vb: IncrementalHash.AppendData(Byte())\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte())\n  name.vb: AppendData(Byte())\n- uid: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)\n  id: AppendData(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: AppendData(Byte[], Int32, Int32)\n  nameWithType: IncrementalHash.AppendData(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendData\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 172\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void AppendData(byte[] data, int offset, int count)\n    content.vb: Public Sub AppendData(data As Byte(), offset As Integer, count As Integer)\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n  nameWithType.vb: IncrementalHash.AppendData(Byte(), Int32, Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte(), System.Int32, System.Int32)\n  name.vb: AppendData(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)\n  id: CreateHash(System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: CreateHash(HashAlgorithmName)\n  nameWithType: IncrementalHash.CreateHash(HashAlgorithmName)\n  fullName: System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateHash\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 173\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm)\n    content.vb: Public Shared Function CreateHash(hashAlgorithm As HashAlgorithmName) As IncrementalHash\n    parameters:\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Security.Cryptography.IncrementalHash\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  commentId: M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  id: CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: CreateHMAC(HashAlgorithmName, Byte[])\n  nameWithType: IncrementalHash.CreateHMAC(HashAlgorithmName, Byte[])\n  fullName: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateHMAC\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 174\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key)\n    content.vb: Public Shared Function CreateHMAC(hashAlgorithm As HashAlgorithmName, key As Byte()) As IncrementalHash\n    parameters:\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    - id: key\n      type: System.Byte[]\n    return:\n      type: System.Security.Cryptography.IncrementalHash\n  nameWithType.vb: IncrementalHash.CreateHMAC(HashAlgorithmName, Byte())\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName, System.Byte())\n  name.vb: CreateHMAC(HashAlgorithmName, Byte())\n- uid: System.Security.Cryptography.IncrementalHash.Dispose\n  commentId: M:System.Security.Cryptography.IncrementalHash.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  nameWithType: IncrementalHash.Dispose()\n  fullName: System.Security.Cryptography.IncrementalHash.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 175\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.IncrementalHash.GetHashAndReset\n  commentId: M:System.Security.Cryptography.IncrementalHash.GetHashAndReset\n  id: GetHashAndReset\n  parent: System.Security.Cryptography.IncrementalHash\n  langs:\n  - csharp\n  - vb\n  name: GetHashAndReset()\n  nameWithType: IncrementalHash.GetHashAndReset()\n  fullName: System.Security.Cryptography.IncrementalHash.GetHashAndReset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashAndReset\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 176\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] GetHashAndReset()\n    content.vb: Public Function GetHashAndReset As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\nreferences:\n- uid: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IDisposable\n  commentId: T:System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.Byte[]\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  nameWithType.vb: Byte()\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.Security.Cryptography.IncrementalHash\n  commentId: T:System.Security.Cryptography.IncrementalHash\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: IncrementalHash\n  nameWithType: IncrementalHash\n  fullName: System.Security.Cryptography.IncrementalHash\n- uid: System.IDisposable.Dispose\n  commentId: M:System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  nameWithType: IDisposable.Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n"}