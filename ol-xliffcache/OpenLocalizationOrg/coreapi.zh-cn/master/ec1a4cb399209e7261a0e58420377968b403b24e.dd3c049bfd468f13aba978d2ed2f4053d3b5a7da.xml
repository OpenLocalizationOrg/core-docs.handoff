{"nodes":[{"pos":[3794,3810],"content":"DiscretionaryAcl","needQuote":true,"nodes":[{"content":"DiscretionaryAcl","pos":[0,16]}]},{"pos":[7231,7278],"content":"DiscretionaryAcl(Boolean, Boolean, Byte, Int32)","needQuote":true,"nodes":[{"content":"DiscretionaryAcl(Boolean, Boolean, Byte, Int32)","pos":[0,47]}]},{"pos":[9781,9822],"content":"DiscretionaryAcl(Boolean, Boolean, Int32)","needQuote":true,"nodes":[{"content":"DiscretionaryAcl(Boolean, Boolean, Int32)","pos":[0,41]}]},{"pos":[12125,12167],"content":"DiscretionaryAcl(Boolean, Boolean, RawAcl)","needQuote":true,"nodes":[{"content":"DiscretionaryAcl(Boolean, Boolean, RawAcl)","pos":[0,42]}]},{"pos":[15129,15220],"content":"AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","needQuote":true,"nodes":[{"content":"AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","pos":[0,91]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to add.&lt;/p&gt;\\n","pos":[16609,16670],"source":"\\n<p>The type of access control (allow or deny) to add.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule for the new ACE.&lt;/p&gt;\\n","pos":[16975,17018],"source":"\\n<p>The access rule for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the new ACE.&lt;/p&gt;\\n","pos":[17126,17198],"source":"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the new ACE.&lt;/p&gt;\\n","pos":[17306,17391],"source":"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n"},{"pos":[18630,18749],"content":"AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","needQuote":true,"nodes":[{"content":"AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","pos":[0,119]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to add.&lt;/p&gt;\\n","pos":[20504,20565],"source":"\\n<p>The type of access control (allow or deny) to add.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule for the new ACE.&lt;/p&gt;\\n","pos":[20870,20913],"source":"\\n<p>The access rule for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the new ACE.&lt;/p&gt;\\n","pos":[21021,21093],"source":"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the new ACE.&lt;/p&gt;\\n","pos":[21201,21286],"source":"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify if the &lt;em&gt;objectType&lt;/em&gt; and &lt;em&gt;inheritedObjectType&lt;/em&gt; parameters contain non-&lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[21387,21529],"source":"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of objects to which the new ACE applies.&lt;/p&gt;\\n","pos":[21596,21673],"source":"\\n<p>The identity of the class of objects to which the new ACE applies.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of child objects which can inherit the new ACE.&lt;/p&gt;\\n","pos":[21749,21833],"source":"\\n<p>The identity of the class of child objects which can inherit the new ACE.</p>\\n"},{"pos":[22713,22779],"content":"AddAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","needQuote":true,"nodes":[{"content":"AddAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to add.&lt;/p&gt;\\n","pos":[23970,24031],"source":"\\n<p>The type of access control (allow or deny) to add.</p>\\n"},{"pos":[25521,25615],"content":"RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","needQuote":true,"nodes":[{"content":"RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","pos":[0,94]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[27013,27077],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the rule to be removed.&lt;/p&gt;\\n","pos":[27401,27455],"source":"\\n<p>The access mask for the rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the rule to be removed.&lt;/p&gt;\\n","pos":[27563,27646],"source":"\\n<p>Flags that specify the inheritance properties of the rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the rule to be removed.&lt;/p&gt;\\n","pos":[27754,27850],"source":"\\n<p>Flags that specify the inheritance propagation properties for the rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method successfully removes the specified access; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27911,28038],"source":"\\n<p>\\n<strong>true</strong> if this method successfully removes the specified access; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[29289,29411],"content":"RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","needQuote":true,"nodes":[{"content":"RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","pos":[0,122]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[31159,31223],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the access control rule to be removed.&lt;/p&gt;\\n","pos":[31547,31616],"source":"\\n<p>The access mask for the access control rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the access control rule to be removed.&lt;/p&gt;\\n","pos":[31724,31822],"source":"\\n<p>Flags that specify the inheritance properties of the access control rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the access control rule to be removed.&lt;/p&gt;\\n","pos":[31930,32041],"source":"\\n<p>Flags that specify the inheritance propagation properties for the access control rule to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify if the &lt;em&gt;objectType&lt;/em&gt; and &lt;em&gt;inheritedObjectType&lt;/em&gt; parameters contain non-&lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[32142,32284],"source":"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of objects to which the removed access control rule applies.&lt;/p&gt;\\n","pos":[32351,32448],"source":"\\n<p>The identity of the class of objects to which the removed access control rule applies.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of child objects which can inherit the removed access control rule.&lt;/p&gt;\\n","pos":[32524,32628],"source":"\\n<p>The identity of the class of child objects which can inherit the removed access control rule.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method successfully removes the specified access; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32689,32816],"source":"\\n<p>\\n<strong>true</strong> if this method successfully removes the specified access; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[33708,33777],"content":"RemoveAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","needQuote":true,"nodes":[{"content":"RemoveAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","pos":[0,69]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[34977,35041],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"pos":[36740,36842],"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","needQuote":true,"nodes":[{"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","pos":[0,102]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[38263,38327],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the ACE to be removed.&lt;/p&gt;\\n","pos":[38635,38688],"source":"\\n<p>The access mask for the ACE to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the ACE to be removed.&lt;/p&gt;\\n","pos":[38796,38878],"source":"\\n<p>Flags that specify the inheritance properties of the ACE to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the ACE to be removed.&lt;/p&gt;\\n","pos":[38986,39081],"source":"\\n<p>Flags that specify the inheritance propagation properties for the ACE to be removed.</p>\\n"},{"pos":[40364,40494],"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","needQuote":true,"nodes":[{"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","pos":[0,130]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[42291,42355],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The access mask for the ACE to be removed.&lt;/p&gt;\\n","pos":[42663,42716],"source":"\\n<p>The access mask for the ACE to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the ACE to be removed.&lt;/p&gt;\\n","pos":[42824,42906],"source":"\\n<p>Flags that specify the inheritance properties of the ACE to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the ACE to be removed.&lt;/p&gt;\\n","pos":[43014,43109],"source":"\\n<p>Flags that specify the inheritance propagation properties for the ACE to be removed.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify if the &lt;em&gt;objectType&lt;/em&gt; and &lt;em&gt;inheritedObjectType&lt;/em&gt; parameters contain non-&lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[43210,43352],"source":"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of objects to which the removed ACE applies.&lt;/p&gt;\\n","pos":[43419,43500],"source":"\\n<p>The identity of the class of objects to which the removed ACE applies.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of child objects which can inherit the removed ACE.&lt;/p&gt;\\n","pos":[43576,43664],"source":"\\n<p>The identity of the class of child objects which can inherit the removed ACE.</p>\\n"},{"pos":[44588,44665],"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, ObjectAccessRule)","needQuote":true,"nodes":[{"content":"RemoveAccessSpecific(AccessControlType, SecurityIdentifier, ObjectAccessRule)","pos":[0,77]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to remove.&lt;/p&gt;\\n","pos":[45888,45952],"source":"\\n<p>The type of access control (allow or deny) to remove.</p>\\n"},{"pos":[47455,47546],"content":"SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","needQuote":true,"nodes":[{"content":"SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)","pos":[0,91]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to set.&lt;/p&gt;\\n","pos":[48907,48968],"source":"\\n<p>The type of access control (allow or deny) to set.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule for the new ACE.&lt;/p&gt;\\n","pos":[49273,49316],"source":"\\n<p>The access rule for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the new ACE.&lt;/p&gt;\\n","pos":[49424,49496],"source":"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the new ACE.&lt;/p&gt;\\n","pos":[49604,49689],"source":"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n"},{"pos":[50928,51047],"content":"SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","needQuote":true,"nodes":[{"content":"SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)","pos":[0,119]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to set.&lt;/p&gt;\\n","pos":[52631,52692],"source":"\\n<p>The type of access control (allow or deny) to set.</p>\\n"},{"content":"\\n&lt;p&gt;The access rule for the new ACE.&lt;/p&gt;\\n","pos":[52997,53040],"source":"\\n<p>The access rule for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of the new ACE.&lt;/p&gt;\\n","pos":[53148,53220],"source":"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties for the new ACE.&lt;/p&gt;\\n","pos":[53328,53413],"source":"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n"},{"content":"\\n&lt;p&gt;Flags that specify if the &lt;em&gt;objectType&lt;/em&gt; and &lt;em&gt;inheritedObjectType&lt;/em&gt; parameters contain non-&lt;strong&gt;null&lt;/strong&gt; values.&lt;/p&gt;\\n","pos":[53514,53656],"source":"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of objects to which the new ACE applies.&lt;/p&gt;\\n","pos":[53723,53800],"source":"\\n<p>The identity of the class of objects to which the new ACE applies.</p>\\n"},{"content":"\\n&lt;p&gt;The identity of the class of child objects which can inherit the new ACE.&lt;/p&gt;\\n","pos":[53876,53960],"source":"\\n<p>The identity of the class of child objects which can inherit the new ACE.</p>\\n"},{"pos":[54840,54906],"content":"SetAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","needQuote":true,"nodes":[{"content":"SetAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The type of access control (allow or deny) to set.&lt;/p&gt;\\n","pos":[56069,56130],"source":"\\n<p>The type of access control (allow or deny) to set.</p>\\n"},{"pos":[56846,56875],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[57075,57081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[57276,57286],"content":"GenericAcl","needQuote":true,"nodes":[{"content":"GenericAcl","pos":[0,10]}]},{"pos":[57538,57547],"content":"CommonAcl","needQuote":true,"nodes":[{"content":"CommonAcl","pos":[0,9]}]},{"pos":[57776,57787],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[58000,58011],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[58267,58279],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[58583,58588],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[58877,58888],"content":"IsCanonical","needQuote":true,"nodes":[{"content":"IsCanonical","pos":[0,11]}]},{"pos":[59195,59206],"content":"IsContainer","needQuote":true,"nodes":[{"content":"IsContainer","pos":[0,11]}]},{"pos":[59506,59510],"content":"IsDS","needQuote":true,"nodes":[{"content":"IsDS","pos":[0,4]}]},{"pos":[59802,59813],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[60075,60079],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[60150,60151]},{"pos":[60203,60208],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[60268,60269]},{"pos":[60378,60382],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[60452,60453],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60502,60507],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[60566,60567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60871,60879],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[61206,61234],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[61584,61597],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[61676,61677],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61725,61729],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[61788,61790]},{"content":",","pos":[61822,61823]},{"pos":[61877,61882],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[61941,61942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62071,62084],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[62163,62164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62212,62216],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[62274,62276],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[62305,62306]},{"pos":[62360,62365],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[62424,62425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62828,62853],"content":"Purge(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"Purge(SecurityIdentifier)","pos":[0,25]}]},{"pos":[63084,63089],"content":"Purge","needQuote":true,"nodes":[{"content":"Purge","pos":[0,5]}]},{"pos":[63160,63161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63242,63260],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[63351,63352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63491,63496],"content":"Purge","needQuote":true,"nodes":[{"content":"Purge","pos":[0,5]}]},{"pos":[63567,63568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63649,63667],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[63758,63759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64080,64101],"content":"RemoveInheritedAces()","needQuote":true,"nodes":[{"content":"RemoveInheritedAces()","pos":[0,21]}]},{"pos":[64270,64289],"content":"RemoveInheritedAces","needQuote":true,"nodes":[{"content":"RemoveInheritedAces","pos":[0,19]}]},{"pos":[64374,64375],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64402,64403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64510,64529],"content":"RemoveInheritedAces","needQuote":true,"nodes":[{"content":"RemoveInheritedAces","pos":[0,19]}]},{"pos":[64614,64615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64642,64643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64922,64933],"content":"AclRevision","needQuote":true,"nodes":[{"content":"AclRevision","pos":[0,11]}]},{"pos":[65247,65260],"content":"AclRevisionDS","needQuote":true,"nodes":[{"content":"AclRevisionDS","pos":[0,13]}]},{"pos":[65582,65597],"content":"MaxBinaryLength","needQuote":true,"nodes":[{"content":"MaxBinaryLength","pos":[0,15]}]},{"pos":[65924,65938],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[66256,66264],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[66618,66645],"content":"CopyTo(GenericAce[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(GenericAce[], Int32)","pos":[0,27]}]},{"pos":[67063,67069],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[67142,67143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67220,67230],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"content":"[]","pos":[67297,67299]},{"content":",","pos":[67331,67332]},{"pos":[67386,67391],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67450,67451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67603,67609],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[67682,67683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67760,67770],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[67836,67838],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[67867,67868]},{"pos":[67922,67927],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67986,67987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68378,68393],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[68552,68565],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[68645,68646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68673,68674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68776,68789],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[68869,68870],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68897,68898],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69219,69251],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[69574,69592],"content":"ICollection.CopyTo","needQuote":true,"nodes":[{"content":"ICollection.CopyTo","pos":[0,18]}]},{"pos":[69696,69697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69746,69751],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[69811,69812]},{"pos":[69866,69871],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69930,69931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70084,70121],"content":"System.Collections.ICollection.CopyTo","needQuote":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo","pos":[0,37]}]},{"pos":[70225,70226],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70275,70280],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[70340,70341]},{"pos":[70395,70400],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[70459,70460],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70912,70939],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[71218,71243],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[71354,71355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71382,71383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71516,71560],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[71671,71672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71699,71700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72031,72041],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[72136,72144],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[72213,72214],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72241,72242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72312,72320],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[72389,72390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72417,72418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72601,72615],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[72734,72740],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[72807,72808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72858,72864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72924,72925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73008,73014],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73081,73082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73132,73138],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73198,73199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73413,73435],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[73583,73589],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73656,73657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73707,73713],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73774,73775]},{"pos":[73830,73836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73896,73897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73994,74000],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74067,74068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74118,74124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74185,74186]},{"pos":[74241,74247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74307,74308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74553,74584],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[74750,74765],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[74841,74842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74892,74898],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74959,74960]},{"pos":[75015,75021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75081,75082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75188,75203],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[75279,75280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75330,75336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[75397,75398]},{"pos":[75453,75459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75519,75520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75750,75763],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[75864,75875],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[75947,75948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75975,75976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76049,76060],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[76132,76133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76160,76161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76336,76345],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[76438,76445],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[76513,76514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76541,76542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76611,76618],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[76686,76687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76714,76715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76890,76907],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[77016,77031],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[77107,77108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77135,77136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77213,77228],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[77304,77305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77332,77333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77628,77641],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[77758,77769],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[77828,77829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77856,77857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77938,77949],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[78008,78009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78036,78037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78392,78404],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[78537,78547],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[78614,78615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78642,78643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78732,78742],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[78809,78810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78837,78838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79179,79194],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[79398,79411],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[79473,79474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79501,79502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79580,79596],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[79661,79662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79689,79690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80068,80085],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[80297,80312],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[80376,80377],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80404,80405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80485,80503],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[80570,80571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80598,80599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80834,80840],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[80959,80977],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[81178,81202],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[81381,81392],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[81451,81452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81519,81530],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[81607,81608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81721,81732],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[81791,81792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81859,81870],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[81947,81948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82176,82185],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[82391,82414],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[82609,82619],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[82686,82687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82754,82765],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[82842,82843],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82964,82974],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[83041,83042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83109,83120],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[83197,83198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83451,83469],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[83691,83717],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[84024,84037],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[84099,84100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84167,84178],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84255,84256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84366,84382],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[84447,84448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84515,84526],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84603,84604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84893,84903],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[85103,85131],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[85446,85461],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[85525,85526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85593,85604],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[85681,85682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85794,85812],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[85879,85880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85947,85958],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[86035,86036],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86298,86309],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[86456,86463],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[86609,86613],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[86751,86756],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86944,86950],"content":"RawAcl","needQuote":true,"nodes":[{"content":"RawAcl","pos":[0,6]}]},{"pos":[87198,87215],"content":"AccessControlType","needQuote":true,"nodes":[{"content":"AccessControlType","pos":[0,17]}]},{"pos":[87489,87507],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[87782,87798],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[88075,88091],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[88307,88332],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[88574,88588],"content":"ObjectAceFlags","needQuote":true,"nodes":[{"content":"ObjectAceFlags","pos":[0,14]}]},{"pos":[88801,88805],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[89000,89016],"content":"ObjectAccessRule","needQuote":true,"nodes":[{"content":"ObjectAccessRule","pos":[0,16]}]}],"content":"items:\n- uid: System.Security.AccessControl.DiscretionaryAcl\n  commentId: T:System.Security.AccessControl.DiscretionaryAcl\n  id: DiscretionaryAcl\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)\n  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)\n  - System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)\n  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  - System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  - System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  - System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl\n  fullName: System.Security.AccessControl.DiscretionaryAcl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DiscretionaryAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 244\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a Discretionary Access Control List (DACL).</p>\\n\"\n  syntax:\n    content: 'public sealed class DiscretionaryAcl : CommonAcl, ICollection, IEnumerable'\n    content.vb: >-\n      Public NotInheritable Class DiscretionaryAcl\n          Inherits CommonAcl\n          Implements ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAcl\n  - System.Security.AccessControl.CommonAcl\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Security.AccessControl.CommonAcl.BinaryLength\n  - System.Security.AccessControl.CommonAcl.Count\n  - System.Security.AccessControl.CommonAcl.IsCanonical\n  - System.Security.AccessControl.CommonAcl.IsContainer\n  - System.Security.AccessControl.CommonAcl.IsDS\n  - System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  - System.Security.AccessControl.CommonAcl.Revision\n  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: DiscretionaryAcl\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)\n  id: '#ctor(System.Boolean,System.Boolean,System.Byte,System.Int32)'\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl(Boolean, Boolean, Byte, Int32)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(System.Boolean, System.Boolean, System.Byte, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 246\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: public DiscretionaryAcl(bool isContainer, bool isDS, byte revision, int capacity)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, revision As Byte, capacity As Integer)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object Access Control List (ACL).</p>\\n\"\n    - id: revision\n      type: System.Byte\n      description: \"\\n<p>The revision level of the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The number of Access Control Entries (ACEs) this <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. This number is to be used only as a hint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean, Boolean, Byte, Int32)\n- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Int32)\n  id: '#ctor(System.Boolean,System.Boolean,System.Int32)'\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl(Boolean, Boolean, Int32)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(System.Boolean, System.Boolean, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 247\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values.</p>\\n\"\n  syntax:\n    content: public DiscretionaryAcl(bool isContainer, bool isDS, int capacity)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, capacity As Integer)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object Access Control List (ACL).</p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The number of Access Control Entries (ACEs) this <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. This number is to be used only as a hint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean, Boolean, Int32)\n- uid: System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)\n  id: '#ctor(System.Boolean,System.Boolean,System.Security.AccessControl.RawAcl)'\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: DiscretionaryAcl(Boolean, Boolean, RawAcl)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(System.Boolean, System.Boolean, System.Security.AccessControl.RawAcl)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 248\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified values from the specified <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public DiscretionaryAcl(bool isContainer, bool isDS, RawAcl rawAcl)\n    content.vb: Public Sub New(isContainer As Boolean, isDS As Boolean, rawAcl As RawAcl)\n    parameters:\n    - id: isContainer\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container.</p>\\n\"\n    - id: isDS\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object Access Control List (ACL).</p>\\n\"\n    - id: rawAcl\n      type: System.Security.AccessControl.RawAcl\n      description: \"\\n<p>The underlying <xref href=\\\"System.Security.AccessControl.RawAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the new <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Specify <strong>null</strong> to create an empty ACL.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.DiscretionaryAcl(Boolean, Boolean, RawAcl)\n- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 249\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Adds an Access Control Entry (ACE) with the specified settings to the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)\n    content.vb: Public Sub AddAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to add.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to add an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access rule for the new ACE.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 250\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Adds an Access Control Entry (ACE) with the specified settings to the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the new ACE.</p>\\n\"\n  syntax:\n    content: public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType)\n    content.vb: Public Sub AddAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectFlags As ObjectAceFlags, objectType As Guid, inheritedObjectType As Guid)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to add.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to add an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access rule for the new ACE.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n\"\n    - id: objectFlags\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of objects to which the new ACE applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of child objects which can inherit the new ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n- uid: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  id: AddAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: AddAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 251\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Adds an Access Control Entry (ACE) with the specified settings to the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void AddAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule)\n    content.vb: Public Sub AddAccess(accessType As AccessControlType, sid As SecurityIdentifier, rule As ObjectAccessRule)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to add.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to add an ACE.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.ObjectAccessRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the new access.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.AddAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 252\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified access control rule from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)\n    content.vb: Public Function RemoveAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags) As Boolean\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an access control rule.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the rule to be removed.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the rule to be removed.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the rule to be removed.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method successfully removes the specified access; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 253\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified access control rule from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type.</p>\\n\"\n  syntax:\n    content: public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType)\n    content.vb: Public Function RemoveAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectFlags As ObjectAceFlags, objectType As Guid, inheritedObjectType As Guid) As Boolean\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an access control rule.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the access control rule to be removed.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the access control rule to be removed.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the access control rule to be removed.</p>\\n\"\n    - id: objectFlags\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of objects to which the removed access control rule applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of child objects which can inherit the removed access control rule.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method successfully removes the specified access; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  id: RemoveAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 254\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified access control rule from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public bool RemoveAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule)\n    content.vb: Public Function RemoveAccess(accessType As AccessControlType, sid As SecurityIdentifier, rule As ObjectAccessRule) As Boolean\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an access control rule.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.ObjectAccessRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove access.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccessSpecific\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 255\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified Access Control Entry (ACE) from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)\n    content.vb: Public Sub RemoveAccessSpecific(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the ACE to be removed.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the ACE to be removed.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the ACE to be removed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccessSpecific\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 256\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified Access Control Entry (ACE) from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. Use this method for directory object Access Control Lists (ACLs) when specifying the object type or the inherited object type for the ACE to be removed.</p>\\n\"\n  syntax:\n    content: public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType)\n    content.vb: Public Sub RemoveAccessSpecific(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectFlags As ObjectAceFlags, objectType As Guid, inheritedObjectType As Guid)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access mask for the ACE to be removed.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the ACE to be removed.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the ACE to be removed.</p>\\n\"\n    - id: objectFlags\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of objects to which the removed ACE applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of child objects which can inherit the removed ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n- uid: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  id: RemoveAccessSpecific(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveAccessSpecific(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAccessSpecific\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 257\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes the specified Access Control Entry (ACE) from the current <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void RemoveAccessSpecific(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule)\n    content.vb: Public Sub RemoveAccessSpecific(accessType As AccessControlType, sid As SecurityIdentifier, rule As ObjectAccessRule)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to remove.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove an ACE.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.ObjectAccessRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to remove access.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.RemoveAccessSpecific(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 258\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the specified access control for the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags)\n    content.vb: Public Sub SetAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to set.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to set an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access rule for the new ACE.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags)\n- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Int32,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Int32, System.Security.AccessControl.InheritanceFlags, System.Security.AccessControl.PropagationFlags, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 259\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the specified access control for the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, int accessMask, InheritanceFlags inheritanceFlags, PropagationFlags propagationFlags, ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType)\n    content.vb: Public Sub SetAccess(accessType As AccessControlType, sid As SecurityIdentifier, accessMask As Integer, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, objectFlags As ObjectAceFlags, objectType As Guid, inheritedObjectType As Guid)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to set.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to set an ACE.</p>\\n\"\n    - id: accessMask\n      type: System.Int32\n      description: \"\\n<p>The access rule for the new ACE.</p>\\n\"\n    - id: inheritanceFlags\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of the new ACE.</p>\\n\"\n    - id: propagationFlags\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties for the new ACE.</p>\\n\"\n    - id: objectFlags\n      type: System.Security.AccessControl.ObjectAceFlags\n      description: \"\\n<p>Flags that specify if the <em>objectType</em> and <em>inheritedObjectType</em> parameters contain non-<strong>null</strong> values.</p>\\n\"\n    - id: objectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of objects to which the new ACE applies.</p>\\n\"\n    - id: inheritedObjectType\n      type: System.Guid\n      description: \"\\n<p>The identity of the class of child objects which can inherit the new ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType, SecurityIdentifier, Int32, InheritanceFlags, PropagationFlags, ObjectAceFlags, Guid, Guid)\n- uid: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  commentId: M:System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  id: SetAccess(System.Security.AccessControl.AccessControlType,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAccessRule)\n  parent: System.Security.AccessControl.DiscretionaryAcl\n  langs:\n  - csharp\n  - vb\n  name: SetAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\n  fullName: System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAccessRule)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetAccess\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 260\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets the specified access control for the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void SetAccess(AccessControlType accessType, SecurityIdentifier sid, ObjectAccessRule rule)\n    content.vb: Public Sub SetAccess(accessType As AccessControlType, sid As SecurityIdentifier, rule As ObjectAccessRule)\n    parameters:\n    - id: accessType\n      type: System.Security.AccessControl.AccessControlType\n      description: \"\\n<p>The type of access control (allow or deny) to set.</p>\\n\"\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to set an ACE.</p>\\n\"\n    - id: rule\n      type: System.Security.AccessControl.ObjectAccessRule\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.ObjectAccessRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for which to set access.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DiscretionaryAcl.SetAccess(AccessControlType, SecurityIdentifier, ObjectAccessRule)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAcl\n  fullName: System.Security.AccessControl.GenericAcl\n  commentId: T:System.Security.AccessControl.GenericAcl\n  nameWithType: GenericAcl\n- uid: System.Security.AccessControl.CommonAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: CommonAcl\n  fullName: System.Security.AccessControl.CommonAcl\n  commentId: T:System.Security.AccessControl.CommonAcl\n  nameWithType: CommonAcl\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  commentId: T:System.Collections.ICollection\n  nameWithType: ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.CommonAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.CommonAcl.BinaryLength\n  nameWithType: CommonAcl.BinaryLength\n- uid: System.Security.AccessControl.CommonAcl.Count\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Count\n  fullName: System.Security.AccessControl.CommonAcl.Count\n  commentId: P:System.Security.AccessControl.CommonAcl.Count\n  nameWithType: CommonAcl.Count\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsCanonical\n  fullName: System.Security.AccessControl.CommonAcl.IsCanonical\n  commentId: P:System.Security.AccessControl.CommonAcl.IsCanonical\n  nameWithType: CommonAcl.IsCanonical\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsContainer\n  fullName: System.Security.AccessControl.CommonAcl.IsContainer\n  commentId: P:System.Security.AccessControl.CommonAcl.IsContainer\n  nameWithType: CommonAcl.IsContainer\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: IsDS\n  fullName: System.Security.AccessControl.CommonAcl.IsDS\n  commentId: P:System.Security.AccessControl.CommonAcl.IsDS\n  nameWithType: CommonAcl.IsDS\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.CommonAcl.Item[System.Int32]\n  fullname.vb: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.CommonAcl.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.CommonAcl.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  nameWithType: CommonAcl.Item[Int32]\n  nameWithType.vb: CommonAcl.Item(Int32)\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: Revision\n  fullName: System.Security.AccessControl.CommonAcl.Revision\n  commentId: P:System.Security.AccessControl.CommonAcl.Revision\n  nameWithType: CommonAcl.Revision\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: CommonAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: true\n  name: Purge(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  spec.csharp:\n  - uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n    name: Purge\n    fullName: System.Security.AccessControl.CommonAcl.Purge\n  - name: (\n    fullName: (\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n    name: Purge\n    fullName: System.Security.AccessControl.CommonAcl.Purge\n  - name: (\n    fullName: (\n  - uid: System.Security.Principal.SecurityIdentifier\n    name: SecurityIdentifier\n    fullName: System.Security.Principal.SecurityIdentifier\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  isExternal: false\n  name: RemoveInheritedAces()\n  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()\n  spec.csharp:\n  - uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n    name: RemoveInheritedAces\n    fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n    name: RemoveInheritedAces\n    fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  nameWithType: CommonAcl.RemoveInheritedAces()\n- uid: System.Security.AccessControl.GenericAcl.AclRevision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevision\n  fullName: System.Security.AccessControl.GenericAcl.AclRevision\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision\n  nameWithType: GenericAcl.AclRevision\n- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevisionDS\n  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS\n  nameWithType: GenericAcl.AclRevisionDS\n- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: MaxBinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  nameWithType: GenericAcl.MaxBinaryLength\n- uid: System.Security.AccessControl.GenericAcl.IsSynchronized\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized\n  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized\n  nameWithType: GenericAcl.IsSynchronized\n- uid: System.Security.AccessControl.GenericAcl.SyncRoot\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Security.AccessControl.GenericAcl.SyncRoot\n  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot\n  nameWithType: GenericAcl.SyncRoot\n- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: CopyTo(GenericAce[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)\n  name.vb: CopyTo(GenericAce(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)\n  nameWithType.vb: GenericAcl.CopyTo(GenericAce(), Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator\n  nameWithType: GenericAcl.GetEnumerator()\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: System.Collections.ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: GenericAcl.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: GenericAcl.IEnumerable.GetEnumerator()\n  nameWithType.vb: GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.RawAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: RawAcl\n  fullName: System.Security.AccessControl.RawAcl\n  commentId: T:System.Security.AccessControl.RawAcl\n  nameWithType: RawAcl\n- uid: System.Security.AccessControl.AccessControlType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AccessControlType\n  fullName: System.Security.AccessControl.AccessControlType\n  commentId: T:System.Security.AccessControl.AccessControlType\n  nameWithType: AccessControlType\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Security.AccessControl.ObjectAceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ObjectAceFlags\n  fullName: System.Security.AccessControl.ObjectAceFlags\n  commentId: T:System.Security.AccessControl.ObjectAceFlags\n  nameWithType: ObjectAceFlags\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.Security.AccessControl.ObjectAccessRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: ObjectAccessRule\n  fullName: System.Security.AccessControl.ObjectAccessRule\n  commentId: T:System.Security.AccessControl.ObjectAccessRule\n  nameWithType: ObjectAccessRule\n"}