{"nodes":[{"pos":[182,192],"content":"TypeFilter","needQuote":true,"nodes":[{"content":"TypeFilter","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Type&lt;/strong&gt; object to which the filter is applied.","pos":[1093,1162],"source":"\\n<p>The <strong>Type</strong> object to which the filter is applied."},{"content":"&lt;/p&gt;\\n","pos":[1163,1169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An arbitrary object used to filter the list.","pos":[1242,1291],"source":"\\n<p>An arbitrary object used to filter the list."},{"content":"&lt;/p&gt;\\n","pos":[1292,1298],"source":" </p>\\n"},{"pos":[2185,2202],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[2538,2553],"content":"GetMethodInfo()","needQuote":true,"nodes":[{"content":"GetMethodInfo()","pos":[0,15]}]},{"pos":[2722,2735],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[2820,2821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[2848,2849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[2956,2969],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3054,3055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3082,3083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3316,3320],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[3459,3465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[3611,3618],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[3811,3834],"content":"GetMethodInfo(Delegate)","needQuote":true,"nodes":[{"content":"GetMethodInfo(Delegate)","pos":[0,23]}]},{"pos":[4035,4048],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4133,4134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4186,4194],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4256,4257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4381,4394],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4479,4480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4532,4540],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4602,4603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4889,4916],"content":"RuntimeReflectionExtensions","needQuote":true,"nodes":[{"content":"RuntimeReflectionExtensions","pos":[0,27]}]},{"pos":[5122,5128],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]}],"content":"items:\n- uid: System.Reflection.TypeFilter\n  commentId: T:System.Reflection.TypeFilter\n  id: TypeFilter\n  parent: System.Reflection\n  children: []\n  langs:\n  - csharp\n  - vb\n  name: TypeFilter\n  fullName: System.Reflection.TypeFilter\n  type: Delegate\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/TypeFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TypeFilter\n    path: src/mscorlib/src/System/Reflection/TypeFilter.cs\n    startLine: 15\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Filters the classes represented in an array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public delegate bool TypeFilter(Type m, object filterCriteria);\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Delegate Function TypeFilter(m As Type, filterCriteria As Object) As Boolean\n    parameters:\n    - id: m\n      type: System.Type\n      description: \"\\n<p>The <strong>Type</strong> object to which the filter is applied. </p>\\n\"\n    - id: filterCriteria\n      type: System.Object\n      description: \"\\n<p>An arbitrary object used to filter the list. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the filtered list; otherwise <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n    commentId: M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)\n  - type: System.Object\n    commentId: T:System.Object\n  - type: System.Delegate\n    commentId: T:System.Delegate\n  - type: System.MulticastDelegate\n    commentId: T:System.MulticastDelegate\n  modifiers.csharp:\n  - public\n  - delegate\n  modifiers.vb:\n  - Public\n  - Delegate\n  nameWithType: TypeFilter\n  extensionMethods:\n  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  parent: System.Reflection.RuntimeReflectionExtensions\n  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  name: GetMethodInfo()\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  isExternal: true\n  name: GetMethodInfo(Delegate)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.Reflection.RuntimeReflectionExtensions\n  parent: System.Reflection\n  isExternal: false\n  name: RuntimeReflectionExtensions\n  fullName: System.Reflection.RuntimeReflectionExtensions\n  nameWithType: RuntimeReflectionExtensions\n  commentId: T:System.Reflection.RuntimeReflectionExtensions\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n"}