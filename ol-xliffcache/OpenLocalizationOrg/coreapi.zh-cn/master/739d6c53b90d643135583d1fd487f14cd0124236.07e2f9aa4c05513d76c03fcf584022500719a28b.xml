{"nodes":[{"pos":[1703,1726],"content":"CacheControlHeaderValue","needQuote":true,"nodes":[{"content":"CacheControlHeaderValue","pos":[0,23]}]},{"pos":[2895,2920],"content":"CacheControlHeaderValue()","needQuote":true,"nodes":[{"content":"CacheControlHeaderValue()","pos":[0,25]}]},{"pos":[3965,3975],"content":"Extensions","needQuote":true,"nodes":[{"content":"Extensions","pos":[0,10]}]},{"pos":[5358,5364],"content":"MaxAge","needQuote":true,"nodes":[{"content":"MaxAge","pos":[0,6]}]},{"pos":[6573,6581],"content":"MaxStale","needQuote":true,"nodes":[{"content":"MaxStale","pos":[0,8]}]},{"pos":[7914,7927],"content":"MaxStaleLimit","needQuote":true,"nodes":[{"content":"MaxStaleLimit","pos":[0,13]}]},{"pos":[9192,9200],"content":"MinFresh","needQuote":true,"nodes":[{"content":"MinFresh","pos":[0,8]}]},{"pos":[10431,10445],"content":"MustRevalidate","needQuote":true,"nodes":[{"content":"MustRevalidate","pos":[0,14]}]},{"pos":[11842,11849],"content":"NoCache","needQuote":true,"nodes":[{"content":"NoCache","pos":[0,7]}]},{"pos":[13120,13134],"content":"NoCacheHeaders","needQuote":true,"nodes":[{"content":"NoCacheHeaders","pos":[0,14]}]},{"pos":[14480,14487],"content":"NoStore","needQuote":true,"nodes":[{"content":"NoStore","pos":[0,7]}]},{"pos":[15808,15819],"content":"NoTransform","needQuote":true,"nodes":[{"content":"NoTransform","pos":[0,11]}]},{"pos":[17121,17133],"content":"OnlyIfCached","needQuote":true,"nodes":[{"content":"OnlyIfCached","pos":[0,12]}]},{"pos":[18629,18636],"content":"Private","needQuote":true,"nodes":[{"content":"Private","pos":[0,7]}]},{"pos":[20007,20021],"content":"PrivateHeaders","needQuote":true,"nodes":[{"content":"PrivateHeaders","pos":[0,14]}]},{"pos":[21387,21402],"content":"ProxyRevalidate","needQuote":true,"nodes":[{"content":"ProxyRevalidate","pos":[0,15]}]},{"pos":[22859,22865],"content":"Public","needQuote":true,"nodes":[{"content":"Public","pos":[0,6]}]},{"pos":[24283,24295],"content":"SharedMaxAge","needQuote":true,"nodes":[{"content":"SharedMaxAge","pos":[0,12]}]},{"pos":[25652,25666],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[26554,26611],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[27401,27414],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[28763,28776],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents cache-control header value information.&lt;/p&gt;\\n","pos":[29591,29666],"source":"\\n<p>A string that represents cache-control header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[30134,30199],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid cache-control header value information.&lt;/p&gt;\\n","pos":[30292,30372],"source":"\\n<p>\\n<em>input</em> is not valid cache-control header value information.</p>\\n"},{"pos":[30752,30762],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[32274,32319],"content":"TryParse(String, out CacheControlHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out CacheControlHeaderValue)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[33267,33301],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[34451,34474],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[34656,34662],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34849,34871],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[35019,35025],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35092,35093],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35143,35149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35210,35211]},{"pos":[35266,35272],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35332,35333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35430,35436],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35503,35504],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35554,35560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35621,35622]},{"pos":[35677,35683],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35743,35744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35989,36020],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36186,36201],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36277,36278],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36328,36334],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36395,36396]},{"pos":[36451,36457],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36517,36518],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36624,36639],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36715,36716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36766,36772],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36833,36834]},{"pos":[36889,36895],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36955,36956],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37182,37191],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[37284,37291],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37359,37360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37387,37388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37457,37464],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37532,37533],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37560,37561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37736,37753],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[37862,37877],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[37953,37954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37981,37982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38059,38074],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[38150,38151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38178,38179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38324,38330],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[38587,38620],"content":"ICollection<NameValueHeaderValue>","needQuote":true,"nodes":[{"content":"ICollection&lt;NameValueHeaderValue&gt;","pos":[0,33],"source":"ICollection<NameValueHeaderValue>"}]},{"pos":[38944,38955],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[39040,39041],"content":"<","needQuote":true,"nodes":[]},{"pos":[39122,39142],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[39305,39316],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[39402,39405]},{"pos":[39493,39513],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[39583,39584],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39883,39897],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[40116,40127],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[40191,40192],"content":"<","needQuote":true,"nodes":[]},{"pos":[40219,40220],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[40340,40351],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[40416,40419]},{"pos":[40453,40454],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[40481,40482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40685,40711],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[40933,40951],"content":"Nullable<TimeSpan>","needQuote":true,"nodes":[{"content":"Nullable&lt;TimeSpan&gt;","pos":[0,18],"source":"Nullable<TimeSpan>"}]},{"pos":[41133,41141],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[41203,41204],"content":"<","needQuote":true,"nodes":[]},{"pos":[41256,41264],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[41396,41404],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[41467,41470]},{"pos":[41529,41537],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[41599,41600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41811,41822],"content":"Nullable<T>","needQuote":true,"nodes":[{"content":"Nullable&lt;T&gt;","pos":[0,11],"source":"Nullable<T>"}]},{"pos":[41969,41977],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"pos":[42018,42019],"content":"<","needQuote":true,"nodes":[]},{"pos":[42046,42047],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[42144,42152],"content":"Nullable","needQuote":true,"nodes":[{"content":"Nullable","pos":[0,8]}]},{"content":"(Of","pos":[42194,42197]},{"pos":[42231,42232],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[42259,42260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42439,42446],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42689,42708],"content":"ICollection<String>","needQuote":true,"nodes":[{"content":"ICollection&lt;String&gt;","pos":[0,19],"source":"ICollection<String>"}]},{"pos":[42956,42967],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[43052,43053],"content":"<","needQuote":true,"nodes":[]},{"pos":[43103,43109],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43262,43273],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[43359,43362]},{"pos":[43419,43425],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[43485,43486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43744,43758],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[43877,43883],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43950,43951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44001,44007],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44067,44068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44151,44157],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[44224,44225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44275,44281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44341,44342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44532,44545],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[44646,44657],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[44729,44730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44757,44758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44831,44842],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[44914,44915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44942,44943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45103,45108],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45250,45256],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[45452,45475],"content":"CacheControlHeaderValue","needQuote":true,"nodes":[{"content":"CacheControlHeaderValue","pos":[0,23]}]},{"pos":[45720,45730],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[45825,45833],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[45902,45903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45930,45931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46001,46009],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[46078,46079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46106,46107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46260,46281],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[46480,46495],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.CacheControlHeaderValue\n  commentId: T:System.Net.Http.Headers.CacheControlHeaderValue\n  id: CacheControlHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.CacheControlHeaderValue.#ctor\n  - System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.CacheControlHeaderValue.Extensions\n  - System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode\n  - System.Net.Http.Headers.CacheControlHeaderValue.MaxAge\n  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStale\n  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\n  - System.Net.Http.Headers.CacheControlHeaderValue.MinFresh\n  - System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate\n  - System.Net.Http.Headers.CacheControlHeaderValue.NoCache\n  - System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders\n  - System.Net.Http.Headers.CacheControlHeaderValue.NoStore\n  - System.Net.Http.Headers.CacheControlHeaderValue.NoTransform\n  - System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached\n  - System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.CacheControlHeaderValue.Private\n  - System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders\n  - System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate\n  - System.Net.Http.Headers.CacheControlHeaderValue.Public\n  - System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge\n  - System.Net.Http.Headers.CacheControlHeaderValue.ToString\n  - System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)\n  langs:\n  - csharp\n  - vb\n  name: CacheControlHeaderValue\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CacheControlHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 256\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents the value of the Cache-Control header.</p>\\n\"\n  syntax:\n    content: public class CacheControlHeaderValue\n    content.vb: Public Class CacheControlHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CacheControlHeaderValue\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.#ctor\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: CacheControlHeaderValue()\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.CacheControlHeaderValue()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 258\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CacheControlHeaderValue()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.CacheControlHeaderValue()\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.Extensions\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions\n  id: Extensions\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Extensions\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Extensions\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Extensions\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 259\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Cache-extension tokens, each with an optional assigned value.</p>\\n\"\n  syntax:\n    content: public ICollection<NameValueHeaderValue> Extensions { get; }\n    content.vb: Public ReadOnly Property Extensions As ICollection(Of NameValueHeaderValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A collection of cache-extension tokens each with an optional assigned value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CacheControlHeaderValue.Extensions\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge\n  id: MaxAge\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MaxAge\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxAge\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 260\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>The maximum age, specified in seconds, that the HTTP client is willing to accept a response. </p>\\n\"\n  syntax:\n    content: public TimeSpan? MaxAge { get; set; }\n    content.vb: Public Property MaxAge As TimeSpan?\n    parameters: []\n    return:\n      type: System.Nullable{System.TimeSpan}\n      description: \"\\n<p>Returns <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The time in seconds. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.MaxAge\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale\n  id: MaxStale\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MaxStale\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxStale\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 261\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\\n\"\n  syntax:\n    content: public bool MaxStale { get; set; }\n    content.vb: Public Property MaxStale As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the HTTP client is willing to accept a response that has exceed the expiration time; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.MaxStale\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\n  id: MaxStaleLimit\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MaxStaleLimit\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxStaleLimit\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 262\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\\n\"\n  syntax:\n    content: public TimeSpan? MaxStaleLimit { get; set; }\n    content.vb: Public Property MaxStaleLimit As TimeSpan?\n    parameters: []\n    return:\n      type: System.Nullable{System.TimeSpan}\n      description: \"\\n<p>Returns <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The time in seconds.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.MaxStaleLimit\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh\n  id: MinFresh\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MinFresh\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinFresh\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 263\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.</p>\\n\"\n  syntax:\n    content: public TimeSpan? MinFresh { get; set; }\n    content.vb: Public Property MinFresh As TimeSpan?\n    parameters: []\n    return:\n      type: System.Nullable{System.TimeSpan}\n      description: \"\\n<p>Returns <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The time in seconds.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.MinFresh\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate\n  id: MustRevalidate\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: MustRevalidate\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MustRevalidate\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 264\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</p>\\n\"\n  syntax:\n    content: public bool MustRevalidate { get; set; }\n    content.vb: Public Property MustRevalidate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.MustRevalidate\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCache\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache\n  id: NoCache\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: NoCache\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCache\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NoCache\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 265\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether an HTTP client is willing to accept a cached response.</p>\\n\"\n  syntax:\n    content: public bool NoCache { get; set; }\n    content.vb: Public Property NoCache As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the HTTP client is willing to accept a cached response; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.NoCache\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders\n  id: NoCacheHeaders\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: NoCacheHeaders\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NoCacheHeaders\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 266\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>A collection of fieldnames in the \\\"no-cache\\\" directive in a cache-control header field on an HTTP response.</p>\\n\"\n  syntax:\n    content: public ICollection<string> NoCacheHeaders { get; }\n    content.vb: Public ReadOnly Property NoCacheHeaders As ICollection(Of String)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A collection of fieldnames.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CacheControlHeaderValue.NoCacheHeaders\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoStore\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore\n  id: NoStore\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: NoStore\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoStore\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NoStore\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 267\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether a cache must not store any part of either the HTTP request mressage or any response.</p>\\n\"\n  syntax:\n    content: public bool NoStore { get; set; }\n    content.vb: Public Property NoStore As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if a cache must not store any part of either the HTTP request mressage or any response; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.NoStore\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform\n  id: NoTransform\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: NoTransform\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NoTransform\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 268\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether a cache or proxy must not change any aspect of the entity-body.</p>\\n\"\n  syntax:\n    content: public bool NoTransform { get; set; }\n    content.vb: Public Property NoTransform As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if a cache or proxy must not change any aspect of the entity-body; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.NoTransform\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached\n  id: OnlyIfCached\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: OnlyIfCached\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnlyIfCached\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 269\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.</p>\\n\"\n  syntax:\n    content: public bool OnlyIfCached { get; set; }\n    content.vb: Public Property OnlyIfCached As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.OnlyIfCached\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.Private\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Private\n  id: Private\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Private\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Private\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Private\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 270\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.</p>\\n\"\n  syntax:\n    content: public bool Private { get; set; }\n    content.vb: Public Property Private As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the HTTP response message is intended for a single user and must not be cached by a shared cache; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.Private\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders\n  id: PrivateHeaders\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: PrivateHeaders\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PrivateHeaders\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 271\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>A collection fieldnames in the \\\"private\\\" directive in a cache-control header field on an HTTP response.</p>\\n\"\n  syntax:\n    content: public ICollection<string> PrivateHeaders { get; }\n    content.vb: Public ReadOnly Property PrivateHeaders As ICollection(Of String)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A collection of fieldnames.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CacheControlHeaderValue.PrivateHeaders\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate\n  id: ProxyRevalidate\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ProxyRevalidate\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProxyRevalidate\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 272\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.</p>\\n\"\n  syntax:\n    content: public bool ProxyRevalidate { get; set; }\n    content.vb: Public Property ProxyRevalidate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale for shared user agent caches; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.ProxyRevalidate\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.Public\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Public\n  id: Public\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Public\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Public\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Public\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 273\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.</p>\\n\"\n  syntax:\n    content: public bool Public { get; set; }\n    content.vb: Public Property Public As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.Public\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge\n  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge\n  id: SharedMaxAge\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: SharedMaxAge\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SharedMaxAge\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 274\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>The shared maximum age, specified in seconds, in an HTTP response that overrides the \\\"max-age\\\" directive in a cache-control header or an Expires header for a shared cache.</p>\\n\"\n  syntax:\n    content: public TimeSpan? SharedMaxAge { get; set; }\n    content.vb: Public Property SharedMaxAge As TimeSpan?\n    parameters: []\n    return:\n      type: System.Nullable{System.TimeSpan}\n      description: \"\\n<p>Returns <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The time in seconds.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CacheControlHeaderValue.SharedMaxAge\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 275\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CacheControlHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 276\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for a  <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CacheControlHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 277\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static CacheControlHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As CacheControlHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents cache-control header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.CacheControlHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid cache-control header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CacheControlHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 278\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CacheControlHeaderValue.ToString()\n- uid: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)\n  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)\n  parent: System.Net.Http.Headers.CacheControlHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out CacheControlHeaderValue)\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, out System.Net.Http.Headers.CacheControlHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 279\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out CacheControlHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As CacheControlHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.CacheControlHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.CacheControlHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.CacheControlHeaderValue)\n  name.vb: TryParse(String, ByRef CacheControlHeaderValue)\n  nameWithType: CacheControlHeaderValue.TryParse(String, out CacheControlHeaderValue)\n  nameWithType.vb: CacheControlHeaderValue.TryParse(String, ByRef CacheControlHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<NameValueHeaderValue>\n  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.NameValueHeaderValue)\n  name.vb: ICollection(Of NameValueHeaderValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  nameWithType: ICollection<NameValueHeaderValue>\n  nameWithType.vb: ICollection(Of NameValueHeaderValue)\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection`1\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Nullable{System.TimeSpan}\n  parent: System\n  definition: System.Nullable`1\n  name: Nullable<TimeSpan>\n  fullName: System.Nullable<System.TimeSpan>\n  fullname.vb: System.Nullable(Of System.TimeSpan)\n  name.vb: Nullable(Of TimeSpan)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable{System.TimeSpan}\n  nameWithType: Nullable<TimeSpan>\n  nameWithType.vb: Nullable(Of TimeSpan)\n- uid: System.Nullable`1\n  parent: System\n  isExternal: false\n  name: Nullable<T>\n  fullName: System.Nullable<T>\n  fullname.vb: System.Nullable(Of T)\n  name.vb: Nullable(Of T)\n  spec.csharp:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Nullable`1\n    name: Nullable\n    fullName: System.Nullable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Nullable`1\n  nameWithType: Nullable<T>\n  nameWithType.vb: Nullable(Of T)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Collections.Generic.ICollection{System.String}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<String>\n  fullName: System.Collections.Generic.ICollection<System.String>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.String)\n  name.vb: ICollection(Of String)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{System.String}\n  nameWithType: ICollection<String>\n  nameWithType.vb: ICollection(Of String)\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Net.Http.Headers.CacheControlHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: CacheControlHeaderValue\n  fullName: System.Net.Http.Headers.CacheControlHeaderValue\n  commentId: T:System.Net.Http.Headers.CacheControlHeaderValue\n  nameWithType: CacheControlHeaderValue\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}