{"nodes":[{"pos":[221,240],"content":"RefreshEventHandler","needQuote":true,"nodes":[{"content":"RefreshEventHandler","pos":[0,19]}]},{"pos":[2192,2213],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[2561,2576],"content":"GetMethodInfo()","needQuote":true,"nodes":[{"content":"GetMethodInfo()","pos":[0,15]}]},{"pos":[2745,2758],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[2843,2844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[2871,2872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[2979,2992],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3077,3078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[3105,3106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[3381,3397],"content":"RefreshEventArgs","needQuote":true,"nodes":[{"content":"RefreshEventArgs","pos":[0,16]}]},{"pos":[3647,3670],"content":"GetMethodInfo(Delegate)","needQuote":true,"nodes":[{"content":"GetMethodInfo(Delegate)","pos":[0,23]}]},{"pos":[3871,3884],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[3969,3970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4022,4030],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4092,4093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4217,4230],"content":"GetMethodInfo","needQuote":true,"nodes":[{"content":"GetMethodInfo","pos":[0,13]}]},{"pos":[4315,4316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[4368,4376],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[4438,4439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[4725,4752],"content":"RuntimeReflectionExtensions","needQuote":true,"nodes":[{"content":"RuntimeReflectionExtensions","pos":[0,27]}]},{"pos":[4969,4986],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]}],"content":"items:\n- uid: System.ComponentModel.RefreshEventHandler\n  commentId: T:System.ComponentModel.RefreshEventHandler\n  id: RefreshEventHandler\n  parent: System.ComponentModel\n  children: []\n  langs:\n  - csharp\n  - vb\n  name: RefreshEventHandler\n  fullName: System.ComponentModel.RefreshEventHandler\n  type: Delegate\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventHandler.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RefreshEventHandler\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventHandler.cs\n    startLine: 10\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Represents the method that handles the <xref href=\\\"System.ComponentModel.TypeDescriptor.Refreshed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event raised when a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or component is changed during design time.</p>\\n\"\n  syntax:\n    content: public delegate void RefreshEventHandler(RefreshEventArgs e);\n    content.vb: Public Delegate Sub RefreshEventHandler(e As RefreshEventArgs)\n    parameters:\n    - id: e\n      type: System.ComponentModel.RefreshEventArgs\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.RefreshEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the component or <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that changed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.RefreshEventArgs\n    commentId: T:System.ComponentModel.RefreshEventArgs\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n  modifiers.csharp:\n  - public\n  - delegate\n  modifiers.vb:\n  - Public\n  - Delegate\n  nameWithType: RefreshEventHandler\n  extensionMethods:\n  - System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Delegate.System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  parent: System.Reflection.RuntimeReflectionExtensions\n  definition: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  name: GetMethodInfo()\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo()\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo()\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.ComponentModel.RefreshEventArgs\n  parent: System.ComponentModel\n  isExternal: false\n  name: RefreshEventArgs\n  fullName: System.ComponentModel.RefreshEventArgs\n  nameWithType: RefreshEventArgs\n  commentId: T:System.ComponentModel.RefreshEventArgs\n- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  isExternal: true\n  name: GetMethodInfo(Delegate)\n  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n  spec.csharp:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n    name: GetMethodInfo\n    fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo\n  - name: (\n    fullName: (\n  - uid: System.Delegate\n    name: Delegate\n    fullName: System.Delegate\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)\n  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)\n- uid: System.Reflection.RuntimeReflectionExtensions\n  parent: System.Reflection\n  isExternal: false\n  name: RuntimeReflectionExtensions\n  fullName: System.Reflection.RuntimeReflectionExtensions\n  nameWithType: RuntimeReflectionExtensions\n  commentId: T:System.Reflection.RuntimeReflectionExtensions\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n"}