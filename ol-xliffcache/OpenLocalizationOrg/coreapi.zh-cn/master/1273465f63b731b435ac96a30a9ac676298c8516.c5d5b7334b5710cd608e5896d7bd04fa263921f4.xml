{"nodes":[{"pos":[359,372],"content":"PublicKeyInfo","needQuote":true,"nodes":[{"content":"PublicKeyInfo","pos":[0,13]}]},{"pos":[1881,1890],"content":"Algorithm","needQuote":true,"nodes":[{"content":"Algorithm","pos":[0,9]}]},{"pos":[3613,3621],"content":"KeyValue","needQuote":true,"nodes":[{"content":"KeyValue","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An array of byte values  that represents the encoded public component of the public key pair.&lt;/p&gt;\\n","pos":[4599,4703],"source":"\\n<p>An array of byte values  that represents the encoded public component of the public key pair.</p>\\n"},{"pos":[5058,5091],"content":"System.Security.Cryptography.Pkcs","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.Pkcs","pos":[0,33]}]},{"pos":[5303,5309],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[5469,5479],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[5574,5582],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5651,5652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5679,5680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[5750,5758],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[5827,5828],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[5855,5856],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6039,6053],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6172,6178],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6245,6246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6296,6302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6362,6363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6446,6452],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6519,6520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6570,6576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6636,6637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6851,6873],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7021,7027],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7094,7095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7145,7151],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7212,7213]},{"pos":[7268,7274],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7334,7335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7432,7438],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7505,7506],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7556,7562],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7623,7624]},{"pos":[7679,7685],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7745,7746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7991,8022],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8188,8203],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8279,8280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8330,8336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8397,8398]},{"pos":[8453,8459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8519,8520],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8626,8641],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8717,8718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8768,8774],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8835,8836]},{"pos":[8891,8897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8957,8958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9188,9201],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9302,9313],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9385,9386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9413,9414],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9487,9498],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9570,9571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9598,9599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9774,9783],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[9876,9883],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[9951,9952],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9979,9980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10049,10056],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10124,10125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10152,10153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10328,10345],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10454,10469],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10545,10546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10573,10574],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10651,10666],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[10742,10743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10770,10771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10916,10922],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11120,11139],"content":"AlgorithmIdentifier","needQuote":true,"nodes":[{"content":"AlgorithmIdentifier","pos":[0,19]}]},{"pos":[11340,11346],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[11466,11470],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[11529,11531]},{"pos":[11594,11598],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[11656,11658],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]}],"content":"items:\n- uid: System.Security.Cryptography.Pkcs.PublicKeyInfo\n  commentId: T:System.Security.Cryptography.Pkcs.PublicKeyInfo\n  id: PublicKeyInfo\n  parent: System.Security.Cryptography.Pkcs\n  children:\n  - System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n  - System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n  langs:\n  - csharp\n  - vb\n  name: PublicKeyInfo\n  fullName: System.Security.Cryptography.Pkcs.PublicKeyInfo\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PublicKeyInfo\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 174\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.PublicKeyInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class represents information associated with a public key.</p>\\n\"\n  syntax:\n    content: public sealed class PublicKeyInfo\n    content.vb: Public NotInheritable Class PublicKeyInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: PublicKeyInfo\n- uid: System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n  commentId: P:System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n  id: Algorithm\n  parent: System.Security.Cryptography.Pkcs.PublicKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: Algorithm\n  fullName: System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Algorithm\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 177\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the algorithm identifier associated with the public key.</p>\\n\"\n  syntax:\n    content: >-\n      public AlgorithmIdentifier Algorithm\n\n      {\n          [CompilerGenerated]\n          get;\n      }\n    content.vb: Public ReadOnly Property Algorithm As AlgorithmIdentifier\n    parameters: []\n    return:\n      type: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n      description: \"\\n<p>An <xref href=\\\"System.Security.Cryptography.Pkcs.AlgorithmIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object that represents the algorithm.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n    commentId: P:System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PublicKeyInfo.Algorithm\n- uid: System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n  commentId: P:System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n  id: KeyValue\n  parent: System.Security.Cryptography.Pkcs.PublicKeyInfo\n  langs:\n  - csharp\n  - vb\n  name: KeyValue\n  fullName: System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyValue\n    path: src/System.Security.Cryptography.Pkcs/ref/System.Security.Cryptography.Pkcs.cs\n    startLine: 178\n  assemblies:\n  - System.Security.Cryptography.Pkcs\n  namespace: System.Security.Cryptography.Pkcs\n  summary: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.Pkcs.PublicKeyInfo.KeyValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property retrieves the value of the encoded public component of the public key pair.</p>\\n\"\n  syntax:\n    content: >-\n      public byte[] KeyValue\n\n      {\n          [CompilerGenerated]\n          get;\n      }\n    content.vb: Public ReadOnly Property KeyValue As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>An array of byte values  that represents the encoded public component of the public key pair.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n    commentId: P:System.Security.Cryptography.Pkcs.PublicKeyInfo.Algorithm\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PublicKeyInfo.KeyValue\nreferences:\n- uid: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: System.Security.Cryptography.Pkcs\n  fullName: System.Security.Cryptography.Pkcs\n  commentId: N:System.Security.Cryptography.Pkcs\n  nameWithType: System.Security.Cryptography.Pkcs\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  parent: System.Security.Cryptography.Pkcs\n  isExternal: false\n  name: AlgorithmIdentifier\n  fullName: System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  commentId: T:System.Security.Cryptography.Pkcs.AlgorithmIdentifier\n  nameWithType: AlgorithmIdentifier\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n"}