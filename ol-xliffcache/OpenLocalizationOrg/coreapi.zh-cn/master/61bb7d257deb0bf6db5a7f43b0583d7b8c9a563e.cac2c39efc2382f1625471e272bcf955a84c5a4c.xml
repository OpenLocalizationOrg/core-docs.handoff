{"nodes":[{"pos":[3313,3327],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[5184,5197],"content":"DefaultIssuer","needQuote":true,"nodes":[{"content":"DefaultIssuer","pos":[0,13]}]},{"pos":[6245,6265],"content":"DefaultNameClaimType","needQuote":true,"nodes":[{"content":"DefaultNameClaimType","pos":[0,20]}]},{"pos":[7524,7544],"content":"DefaultRoleClaimType","needQuote":true,"nodes":[{"content":"DefaultRoleClaimType","pos":[0,20]}]},{"pos":[8764,8780],"content":"ClaimsIdentity()","needQuote":true,"nodes":[{"content":"ClaimsIdentity()","pos":[0,16]}]},{"pos":[10001,10035],"content":"ClaimsIdentity(IEnumerable<Claim>)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IEnumerable&lt;Claim&gt;)","pos":[0,34],"source":"ClaimsIdentity(IEnumerable<Claim>)"}]},{"content":"\\n&lt;p&gt;The claims with which to populate the claims identity.&lt;/p&gt;\\n","pos":[11092,11157],"source":"\\n<p>The claims with which to populate the claims identity.</p>\\n"},{"pos":[12004,12046],"content":"ClaimsIdentity(IEnumerable<Claim>, String)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IEnumerable&lt;Claim&gt;, String)","pos":[0,42],"source":"ClaimsIdentity(IEnumerable<Claim>, String)"}]},{"content":"\\n&lt;p&gt;The claims with which to populate the claims identity.&lt;/p&gt;\\n","pos":[13094,13159],"source":"\\n<p>The claims with which to populate the claims identity.</p>\\n"},{"content":"\\n&lt;p&gt;The type of authentication used.&lt;/p&gt;\\n","pos":[13236,13279],"source":"\\n<p>The type of authentication used.</p>\\n"},{"pos":[14249,14307],"content":"ClaimsIdentity(IEnumerable<Claim>, String, String, String)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IEnumerable&lt;Claim&gt;, String, String, String)","pos":[0,58],"source":"ClaimsIdentity(IEnumerable<Claim>, String, String, String)"}]},{"content":"\\n&lt;p&gt;The claims with which to populate the claims identity.&lt;/p&gt;\\n","pos":[15494,15559],"source":"\\n<p>The claims with which to populate the claims identity.</p>\\n"},{"content":"\\n&lt;p&gt;The type of authentication used.&lt;/p&gt;\\n","pos":[15636,15679],"source":"\\n<p>The type of authentication used.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for name claims.&lt;/p&gt;\\n","pos":[15746,15795],"source":"\\n<p>The claim type to use for name claims.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for role claims.&lt;/p&gt;\\n","pos":[15862,15911],"source":"\\n<p>The claim type to use for role claims.</p>\\n"},{"pos":[16695,16723],"content":"ClaimsIdentity(BinaryReader)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(BinaryReader)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[17404,17415],"source":"\\n<p></p>\\n"},{"pos":[17859,17889],"content":"ClaimsIdentity(ClaimsIdentity)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(ClaimsIdentity)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[18607,18618],"source":"\\n<p></p>\\n"},{"pos":[19064,19089],"content":"ClaimsIdentity(IIdentity)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IIdentity)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The identity from which to base the new claims identity.&lt;/p&gt;\\n","pos":[20088,20155],"source":"\\n<p>The identity from which to base the new claims identity.</p>\\n"},{"pos":[20797,20842],"content":"ClaimsIdentity(IIdentity, IEnumerable<Claim>)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IIdentity, IEnumerable&lt;Claim&gt;)","pos":[0,45],"source":"ClaimsIdentity(IIdentity, IEnumerable<Claim>)"}]},{"content":"\\n&lt;p&gt;The identity from which to base the new claims identity.&lt;/p&gt;\\n","pos":[21958,22025],"source":"\\n<p>The identity from which to base the new claims identity.</p>\\n"},{"content":"\\n&lt;p&gt;The claims with which to populate the claims identity.&lt;/p&gt;\\n","pos":[22145,22210],"source":"\\n<p>The claims with which to populate the claims identity.</p>\\n"},{"pos":[23319,23388],"content":"ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(IIdentity, IEnumerable&lt;Claim&gt;, String, String, String)","pos":[0,69],"source":"ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)"}]},{"content":"\\n&lt;p&gt;The identity from which to base the new claims identity.&lt;/p&gt;\\n","pos":[24740,24807],"source":"\\n<p>The identity from which to base the new claims identity.</p>\\n"},{"content":"\\n&lt;p&gt;The claims with which to populate the new claims identity.&lt;/p&gt;\\n","pos":[24927,24996],"source":"\\n<p>The claims with which to populate the new claims identity.</p>\\n"},{"content":"\\n&lt;p&gt;The type of authentication used.&lt;/p&gt;\\n","pos":[25073,25116],"source":"\\n<p>The type of authentication used.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for name claims.&lt;/p&gt;\\n","pos":[25183,25232],"source":"\\n<p>The claim type to use for name claims.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for role claims.&lt;/p&gt;\\n","pos":[25299,25348],"source":"\\n<p>The claim type to use for role claims.</p>\\n"},{"pos":[26175,26197],"content":"ClaimsIdentity(String)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The type of authentication used.&lt;/p&gt;\\n","pos":[27092,27135],"source":"\\n<p>The type of authentication used.</p>\\n"},{"pos":[27585,27623],"content":"ClaimsIdentity(String, String, String)","needQuote":true,"nodes":[{"content":"ClaimsIdentity(String, String, String)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The type of authentication used.&lt;/p&gt;\\n","pos":[28629,28672],"source":"\\n<p>The type of authentication used.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for name claims.&lt;/p&gt;\\n","pos":[28739,28788],"source":"\\n<p>The claim type to use for name claims.</p>\\n"},{"content":"\\n&lt;p&gt;The claim type to use for role claims.&lt;/p&gt;\\n","pos":[28855,28904],"source":"\\n<p>The claim type to use for role claims.</p>\\n"},{"pos":[29239,29244],"content":"Actor","needQuote":true,"nodes":[{"content":"Actor","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The calling party that was granted delegation rights.&lt;/p&gt;\\n","pos":[29984,30048],"source":"\\n<p>The calling party that was granted delegation rights.</p>\\n"},{"content":"\\n&lt;p&gt;An attempt to set the property to the current instance occurs.&lt;/p&gt;\\n","pos":[30175,30248],"source":"\\n<p>An attempt to set the property to the current instance occurs.</p>\\n"},{"pos":[30605,30623],"content":"AuthenticationType","needQuote":true,"nodes":[{"content":"AuthenticationType","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The authentication type.&lt;/p&gt;\\n","pos":[31346,31381],"source":"\\n<p>The authentication type.</p>\\n"},{"pos":[31851,31867],"content":"BootstrapContext","needQuote":true,"nodes":[{"content":"BootstrapContext","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The bootstrap context.&lt;/p&gt;\\n","pos":[32668,32701],"source":"\\n<p>The bootstrap context.</p>\\n"},{"pos":[33277,33283],"content":"Claims","needQuote":true,"nodes":[{"content":"Claims","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The collection of claims associated with this claims identity.&lt;/p&gt;\\n","pos":[34064,34137],"source":"\\n<p>The collection of claims associated with this claims identity.</p>\\n"},{"pos":[34673,34696],"content":"CustomSerializationData","needQuote":true,"nodes":[{"content":"CustomSerializationData","pos":[0,23]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[35416,35427],"source":"\\n<p></p>\\n"},{"pos":[35832,35847],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the identity has been authenticated; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36601,36710],"source":"\\n<p>\\n<strong>true</strong> if the identity has been authenticated; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[37141,37146],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The label.&lt;/p&gt;\\n","pos":[37812,37833],"source":"\\n<p>The label.</p>\\n"},{"pos":[38148,38152],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38828,38873],"source":"\\n<p>The name or <strong>null</strong>.</p>\\n"},{"pos":[39448,39461],"content":"NameClaimType","needQuote":true,"nodes":[{"content":"NameClaimType","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The name claim type.&lt;/p&gt;\\n","pos":[40336,40367],"source":"\\n<p>The name claim type.</p>\\n"},{"pos":[40846,40859],"content":"RoleClaimType","needQuote":true,"nodes":[{"content":"RoleClaimType","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The role claim type.&lt;/p&gt;\\n","pos":[41624,41655],"source":"\\n<p>The role claim type.</p>\\n"},{"pos":[42249,42264],"content":"AddClaim(Claim)","needQuote":true,"nodes":[{"content":"AddClaim(Claim)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The claim to add.&lt;/p&gt;\\n","pos":[43070,43098],"source":"\\n<p>The claim to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;claim&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43217,43270],"source":"\\n<p>\\n<em>claim</em> is <strong>null</strong>.</p>\\n"},{"pos":[44092,44121],"content":"AddClaims(IEnumerable<Claim>)","needQuote":true,"nodes":[{"content":"AddClaims(IEnumerable&lt;Claim&gt;)","pos":[0,29],"source":"AddClaims(IEnumerable<Claim>)"}]},{"content":"\\n&lt;p&gt;The claims to add.&lt;/p&gt;\\n","pos":[45045,45074],"source":"\\n<p>The claims to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;claims&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45193,45247],"source":"\\n<p>\\n<em>claims</em> is <strong>null</strong>.</p>\\n"},{"pos":[46108,46115],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A copy of the current instance.&lt;/p&gt;\\n","pos":[46907,46949],"source":"\\n<p>A copy of the current instance.</p>\\n"},{"pos":[47371,47396],"content":"CreateClaim(BinaryReader)","needQuote":true,"nodes":[{"content":"CreateClaim(BinaryReader)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[48126,48137],"source":"\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[48212,48223],"source":"\\n<p></p>\\n"},{"pos":[48729,48754],"content":"FindAll(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindAll(Predicate&lt;Claim&gt;)","pos":[0,25],"source":"FindAll(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[49619,49676],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;The matching claims.","pos":[49791,49816],"source":"\\n<p>The matching claims."},{"content":"The list is read-only.&lt;/p&gt;\\n","pos":[49817,49845],"source":" The list is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49964,50017],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[50633,50648],"content":"FindAll(String)","needQuote":true,"nodes":[{"content":"FindAll(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The claim type against which to match claims.&lt;/p&gt;\\n","pos":[51412,51468],"source":"\\n<p>The claim type against which to match claims.</p>\\n"},{"content":"\\n&lt;p&gt;The matching claims.","pos":[51583,51608],"source":"\\n<p>The matching claims."},{"content":"The list is read-only.&lt;/p&gt;\\n","pos":[51609,51637],"source":" The list is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51756,51808],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[52304,52331],"content":"FindFirst(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindFirst(Predicate&lt;Claim&gt;)","pos":[0,27],"source":"FindFirst(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[53172,53229],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;The first matching claim or &lt;strong&gt;null&lt;/strong&gt; if no match is found.&lt;/p&gt;\\n","pos":[53304,53386],"source":"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53505,53558],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[54188,54205],"content":"FindFirst(String)","needQuote":true,"nodes":[{"content":"FindFirst(String)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The claim type to match.&lt;/p&gt;\\n","pos":[54941,54976],"source":"\\n<p>The claim type to match.</p>\\n"},{"content":"\\n&lt;p&gt;The first matching claim or &lt;strong&gt;null&lt;/strong&gt; if no match is found.&lt;/p&gt;\\n","pos":[55051,55133],"source":"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55252,55304],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[55799,55825],"content":"HasClaim(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"HasClaim(Predicate&lt;Claim&gt;)","pos":[0,26],"source":"HasClaim(Predicate<Claim>)"}]},{"content":"\\n&lt;p&gt;The function that performs the matching logic.&lt;/p&gt;\\n","pos":[56689,56746],"source":"\\n<p>The function that performs the matching logic.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a matching claim exists; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56807,56904],"source":"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;match&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57023,57076],"source":"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n"},{"pos":[57741,57765],"content":"HasClaim(String, String)","needQuote":true,"nodes":[{"content":"HasClaim(String, String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The type of the claim to match.&lt;/p&gt;\\n","pos":[58580,58622],"source":"\\n<p>The type of the claim to match.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the claim to match.&lt;/p&gt;\\n","pos":[58686,58729],"source":"\\n<p>The value of the claim to match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a match is found; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58790,58880],"source":"\\n<p>\\n<strong>true</strong> if a match is found; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58999,59115],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[59572,59590],"content":"RemoveClaim(Claim)","needQuote":true,"nodes":[{"content":"RemoveClaim(Claim)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The claim to remove.&lt;/p&gt;\\n","pos":[60416,60447],"source":"\\n<p>The claim to remove.</p>\\n"},{"content":"\\n&lt;p&gt;The claim cannot be removed.&lt;/p&gt;\\n","pos":[60574,60613],"source":"\\n<p>The claim cannot be removed.</p>\\n"},{"pos":[61333,61354],"content":"TryRemoveClaim(Claim)","needQuote":true,"nodes":[{"content":"TryRemoveClaim(Claim)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The claim to remove.&lt;/p&gt;\\n","pos":[62208,62239],"source":"\\n<p>The claim to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the claim was successfully removed; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62300,62408],"source":"\\n<p>\\n<strong>true</strong> if the claim was successfully removed; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[63092,63113],"content":"WriteTo(BinaryWriter)","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[63806,63817],"source":"\\n<p></p>\\n"},{"pos":[64283,64312],"content":"WriteTo(BinaryWriter, Byte[])","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter, Byte[])","pos":[0,29]}]},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[65063,65074],"source":"\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[65141,65152],"source":"\\n<p></p>\\n"},{"pos":[65582,65604],"content":"System.Security.Claims","needQuote":true,"nodes":[{"content":"System.Security.Claims","pos":[0,22]}]},{"pos":[65783,65789],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65975,65984],"content":"IIdentity","needQuote":true,"nodes":[{"content":"IIdentity","pos":[0,9]}]},{"pos":[66191,66201],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[66296,66304],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66373,66374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66401,66402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66472,66480],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66549,66550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66577,66578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66761,66775],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[66894,66900],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66967,66968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67018,67024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67084,67085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67168,67174],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67241,67242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67292,67298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67358,67359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67573,67595],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[67743,67749],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67816,67817],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67867,67873],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67934,67935]},{"pos":[67990,67996],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68056,68057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68154,68160],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68227,68228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68278,68284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68345,68346]},{"pos":[68401,68407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68467,68468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68713,68744],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[68910,68925],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69001,69002],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69052,69058],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69119,69120]},{"pos":[69175,69181],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69241,69242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69348,69363],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69439,69440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69490,69496],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69557,69558]},{"pos":[69613,69619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69679,69680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69910,69923],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[70024,70035],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70107,70108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70135,70136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70209,70220],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[70292,70293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70320,70321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70496,70505],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[70598,70605],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70673,70674],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70701,70702],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70771,70778],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70846,70847],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70874,70875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71050,71067],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[71176,71191],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71267,71268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71295,71296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71373,71388],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[71464,71465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71492,71493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71638,71644],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[71770,71795],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[71983,71989],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72244,72262],"content":"IEnumerable<Claim>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Claim&gt;","pos":[0,18],"source":"IEnumerable<Claim>"}]},{"pos":[72539,72550],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72635,72636],"content":"<","needQuote":true,"nodes":[]},{"pos":[72701,72706],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[72853,72864],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[72950,72953]},{"pos":[73025,73030],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[73084,73085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73338,73352],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[73571,73582],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73646,73647],"content":"<","needQuote":true,"nodes":[]},{"pos":[73674,73675],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73795,73806],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[73871,73874]},{"pos":[73908,73909],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73936,73937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74140,74166],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[74369,74381],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[74529,74538],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[74718,74732],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[75002,75020],"content":"AuthenticationType","needQuote":true,"nodes":[{"content":"AuthenticationType","pos":[0,18]}]},{"pos":[75232,75238],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[75358,75362],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[75421,75423]},{"pos":[75486,75490],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[75548,75550],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[75749,75764],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"pos":[76005,76012],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[76215,76219],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[76457,76462],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[76682,76698],"content":"Predicate<Claim>","needQuote":true,"nodes":[{"content":"Predicate&lt;Claim&gt;","pos":[0,16],"source":"Predicate<Claim>"}]},{"pos":[76907,76916],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[76979,76980],"content":"<","needQuote":true,"nodes":[]},{"pos":[77045,77050],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[77175,77184],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[77248,77251]},{"pos":[77323,77328],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[77382,77383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77588,77600],"content":"Predicate<T>","needQuote":true,"nodes":[{"content":"Predicate&lt;T&gt;","pos":[0,12],"source":"Predicate<T>"}]},{"pos":[77751,77760],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[77802,77803],"content":"<","needQuote":true,"nodes":[]},{"pos":[77830,77831],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[77929,77938],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[77981,77984]},{"pos":[78018,78019],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[78046,78047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78240,78252],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[78440,78465],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[78665,78686],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Claims.ClaimsIdentity\n  commentId: T:System.Security.Claims.ClaimsIdentity\n  id: ClaimsIdentity\n  parent: System.Security.Claims\n  children:\n  - System.Security.Claims.ClaimsIdentity.#ctor\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)\n  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.Actor\n  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.AuthenticationType\n  - System.Security.Claims.ClaimsIdentity.BootstrapContext\n  - System.Security.Claims.ClaimsIdentity.Claims\n  - System.Security.Claims.ClaimsIdentity.Clone\n  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  - System.Security.Claims.ClaimsIdentity.DefaultIssuer\n  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  - System.Security.Claims.ClaimsIdentity.Label\n  - System.Security.Claims.ClaimsIdentity.Name\n  - System.Security.Claims.ClaimsIdentity.NameClaimType\n  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.RoleClaimType\n  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ClaimsIdentity\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Represents a claims-based identity.</p>\\n\"\n  syntax:\n    content: 'public class ClaimsIdentity : IIdentity'\n    content.vb: >-\n      Public Class ClaimsIdentity\n          Implements IIdentity\n  seealso:\n  - type: System.Security.Claims.Claim\n    commentId: T:System.Security.Claims.Claim\n  - type: System.Security.Claims.ClaimsPrincipal\n    commentId: T:System.Security.Claims.ClaimsPrincipal\n  - type: System.Security.Principal.GenericIdentity\n    commentId: T:System.Security.Principal.GenericIdentity\n  - type: System.Security.Principal.WindowsIdentity\n    commentId: T:System.Security.Principal.WindowsIdentity\n  - type: System.Web.Security.FormsIdentity\n    commentId: T:System.Web.Security.FormsIdentity\n  inheritance:\n  - System.Object\n  implements:\n  - System.Security.Principal.IIdentity\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ClaimsIdentity\n- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer\n  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultIssuer\n  id: DefaultIssuer\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: DefaultIssuer\n  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIssuer\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>The default issuer; “LOCAL AUTHORITY”.</p>\\n\"\n  syntax:\n    content: public const string DefaultIssuer = \"LOCAL AUTHORITY\"\n    content.vb: Public Const DefaultIssuer As String = \"LOCAL AUTHORITY\"\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: ClaimsIdentity.DefaultIssuer\n- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  id: DefaultNameClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: DefaultNameClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultNameClaimType\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 38\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>The default name claim type; <xref href=\\\"System.Security.Claims.ClaimTypes.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public const string DefaultNameClaimType = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n    content.vb: Public Const DefaultNameClaimType As String = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name\"\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: ClaimsIdentity.DefaultNameClaimType\n- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  id: DefaultRoleClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: DefaultRoleClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultRoleClaimType\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 39\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>The default role claim type; <xref href=\\\"System.Security.Claims.ClaimTypes.Role\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public const string DefaultRoleClaimType = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"\n    content.vb: Public Const DefaultRoleClaimType As String = \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\"\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: ClaimsIdentity.DefaultRoleClaimType\n- uid: System.Security.Claims.ClaimsIdentity.#ctor\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor\n  id: '#ctor'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity()\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 40\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an empty claims collection.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.ClaimsIdentity()\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IEnumerable<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 41\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an enumerated collection of <xref href=\\\"System.Security.Claims.Claim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IEnumerable<Claim> claims)\n    content.vb: Public Sub New(claims As IEnumerable(Of Claim))\n    parameters:\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims with which to populate the claims identity.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))\n  name.vb: ClaimsIdentity(IEnumerable(Of Claim))\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)\n  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IEnumerable<Claim>, String)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 42\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified claims and authentication type.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType)\n    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String)\n    parameters:\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims with which to populate the claims identity.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication used.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)\n  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String)\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>, String)\n  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim), String)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IEnumerable<Claim>, String, String, String)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 43\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified claims, authentication type, name claim type, and role claim type.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)\n    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)\n    parameters:\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims with which to populate the claims identity.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication used.</p>\\n\"\n    - id: nameType\n      type: System.String\n      description: \"\\n<p>The claim type to use for name claims.</p>\\n\"\n    - id: roleType\n      type: System.String\n      description: \"\\n<p>The claim type to use for role claims.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)\n  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String, String, String)\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>, String, String, String)\n  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim), String, String, String)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)\n  id: '#ctor(System.IO.BinaryReader)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(BinaryReader)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.IO.BinaryReader)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 44\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(BinaryReader reader)\n    content.vb: Public Sub New(reader As BinaryReader)\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)\n  id: '#ctor(System.Security.Claims.ClaimsIdentity)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(ClaimsIdentity)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Claims.ClaimsIdentity)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 45\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected ClaimsIdentity(ClaimsIdentity other)\n    content.vb: Protected Sub New(other As ClaimsIdentity)\n    parameters:\n    - id: other\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)\n  id: '#ctor(System.Security.Principal.IIdentity)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IIdentity)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 46\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the name and authentication type from the specified <xref href=\\\"System.Security.Principal.IIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IIdentity identity)\n    content.vb: Public Sub New(identity As IIdentity)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The identity from which to base the new claims identity.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 47\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified claims and the specified <xref href=\\\"System.Security.Principal.IIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims)\n    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim))\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The identity from which to base the new claims identity.</p>\\n\"\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims with which to populate the claims identity.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))\n  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim))\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable<Claim>)\n  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)\n  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 48\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified <xref href=\\\"System.Security.Principal.IIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified claims, authentication type, name claim type, and role claim type.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)\n    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IIdentity\n      description: \"\\n<p>The identity from which to base the new claims identity.</p>\\n\"\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims with which to populate the new claims identity.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication used.</p>\\n\"\n    - id: nameType\n      type: System.String\n      description: \"\\n<p>The claim type to use for name claims.</p>\\n\"\n    - id: roleType\n      type: System.String\n      description: \"\\n<p>The claim type to use for role claims.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)\n  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim), String, String, String)\n  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)\n  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable(Of Claim), String, String, String)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(String)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 49\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an empty claims collection and the specified authentication type.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(string authenticationType)\n    content.vb: Public Sub New(authenticationType As String)\n    parameters:\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication used.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.ClaimsIdentity(String)\n- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)\n  id: '#ctor(System.String,System.String,System.String)'\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ClaimsIdentity(String, String, String)\n  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String, System.String, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 50\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified authentication type, name claim type, and role claim type.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity(string authenticationType, string nameType, string roleType)\n    content.vb: Public Sub New(authenticationType As String, nameType As String, roleType As String)\n    parameters:\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>The type of authentication used.</p>\\n\"\n    - id: nameType\n      type: System.String\n      description: \"\\n<p>The claim type to use for name claims.</p>\\n\"\n    - id: roleType\n      type: System.String\n      description: \"\\n<p>The claim type to use for role claims.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.ClaimsIdentity(String, String, String)\n- uid: System.Security.Claims.ClaimsIdentity.Actor\n  commentId: P:System.Security.Claims.ClaimsIdentity.Actor\n  id: Actor\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Actor\n  fullName: System.Security.Claims.ClaimsIdentity.Actor\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Actor\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 51\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets or sets the identity of the calling party that was granted delegation rights.</p>\\n\"\n  syntax:\n    content: public ClaimsIdentity Actor { get; set; }\n    content.vb: Public Property Actor As ClaimsIdentity\n    parameters: []\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p>The calling party that was granted delegation rights.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An attempt to set the property to the current instance occurs.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.Actor\n- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType\n  commentId: P:System.Security.Claims.ClaimsIdentity.AuthenticationType\n  id: AuthenticationType\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: AuthenticationType\n  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticationType\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 52\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the authentication type.</p>\\n\"\n  syntax:\n    content: public virtual string AuthenticationType { get; }\n    content.vb: Public Overridable ReadOnly Property AuthenticationType As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The authentication type.</p>\\n\"\n  implements:\n  - System.Security.Principal.IIdentity.AuthenticationType\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsIdentity.AuthenticationType\n- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext\n  commentId: P:System.Security.Claims.ClaimsIdentity.BootstrapContext\n  id: BootstrapContext\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: BootstrapContext\n  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BootstrapContext\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 53\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets or sets the token that was used to create this claims identity.</p>\\n\"\n  syntax:\n    content: >-\n      public object BootstrapContext\n\n      {\n          get;\n          [SecurityCritical]\n          set;\n      }\n    content.vb: Public Property BootstrapContext As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The bootstrap context.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsIdentity.Actor\n    commentId: P:System.Security.Claims.ClaimsIdentity.Actor\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.BootstrapContext\n- uid: System.Security.Claims.ClaimsIdentity.Claims\n  commentId: P:System.Security.Claims.ClaimsIdentity.Claims\n  id: Claims\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Claims\n  fullName: System.Security.Claims.ClaimsIdentity.Claims\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Claims\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 54\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the claims associated with this claims identity.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> Claims { get; }\n    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The collection of claims associated with this claims identity.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.Claims\n    commentId: P:System.Security.Claims.ClaimsPrincipal.Claims\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsIdentity.Claims\n- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  commentId: P:System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  id: CustomSerializationData\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: CustomSerializationData\n  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CustomSerializationData\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 55\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected virtual byte[] CustomSerializationData { get; }\n    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  - get\n  modifiers.vb:\n  - Protected\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsIdentity.CustomSerializationData\n- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  commentId: P:System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: IsAuthenticated\n  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAuthenticated\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 56\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets a value that indicates whether the identity has been authenticated.</p>\\n\"\n  syntax:\n    content: public virtual bool IsAuthenticated { get; }\n    content.vb: Public Overridable ReadOnly Property IsAuthenticated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the identity has been authenticated; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Security.Principal.IIdentity.IsAuthenticated\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsIdentity.IsAuthenticated\n- uid: System.Security.Claims.ClaimsIdentity.Label\n  commentId: P:System.Security.Claims.ClaimsIdentity.Label\n  id: Label\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Label\n  fullName: System.Security.Claims.ClaimsIdentity.Label\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Label\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 57\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets or sets the label for this claims identity.</p>\\n\"\n  syntax:\n    content: public string Label { get; set; }\n    content.vb: Public Property Label As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The label.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: ClaimsIdentity.Label\n- uid: System.Security.Claims.ClaimsIdentity.Name\n  commentId: P:System.Security.Claims.ClaimsIdentity.Name\n  id: Name\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Security.Claims.ClaimsIdentity.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 58\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the name of this claims identity.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name or <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsIdentity.NameClaimType\n    commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType\n  implements:\n  - System.Security.Principal.IIdentity.Name\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ClaimsIdentity.Name\n- uid: System.Security.Claims.ClaimsIdentity.NameClaimType\n  commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType\n  id: NameClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: NameClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameClaimType\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 59\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the claim type that is used to determine which claims provide the value for the <xref href=\\\"System.Security.Claims.ClaimsIdentity.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of this claims identity.</p>\\n\"\n  syntax:\n    content: public string NameClaimType { get; }\n    content.vb: Public ReadOnly Property NameClaimType As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name claim type.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsIdentity.Name\n    commentId: P:System.Security.Claims.ClaimsIdentity.Name\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ClaimsIdentity.NameClaimType\n- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType\n  commentId: P:System.Security.Claims.ClaimsIdentity.RoleClaimType\n  id: RoleClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: RoleClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RoleClaimType\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 60\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Gets the claim type that will be interpreted as a .NET Framework role among the claims in this claims identity.</p>\\n\"\n  syntax:\n    content: public string RoleClaimType { get; }\n    content.vb: Public ReadOnly Property RoleClaimType As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The role claim type.</p>\\n\"\n  seealso:\n  - type: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n    commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ClaimsIdentity.RoleClaimType\n- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  id: AddClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: AddClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 61\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Adds a single claim to this claims identity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual void AddClaim(Claim claim)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Sub AddClaim(claim As Claim)\n    parameters:\n    - id: claim\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The claim to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>claim</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.AddClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: AddClaims(IEnumerable<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddClaims\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 63\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Adds a list of claims to this claims identity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual void AddClaims(IEnumerable<Claim> claims)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Sub AddClaims(claims As IEnumerable(Of Claim))\n    parameters:\n    - id: claims\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The claims to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>claims</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))\n  name.vb: AddClaims(IEnumerable(Of Claim))\n  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)\n  nameWithType.vb: ClaimsIdentity.AddClaims(IEnumerable(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.Clone\n  commentId: M:System.Security.Claims.ClaimsIdentity.Clone\n  id: Clone\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Security.Claims.ClaimsIdentity.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 65\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> copied from this claims identity.</p>\\n\"\n  syntax:\n    content: public virtual ClaimsIdentity Clone()\n    content.vb: Public Overridable Function Clone As ClaimsIdentity\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p>A copy of the current instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.Clone()\n- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  commentId: M:System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  id: CreateClaim(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: CreateClaim(BinaryReader)\n  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 66\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected virtual Claim CreateClaim(BinaryReader reader)\n    content.vb: Protected Overridable Function CreateClaim(reader As BinaryReader) As Claim\n    parameters:\n    - id: reader\n      type: System.IO.BinaryReader\n      description: \"\\n<p></p>\\n\"\n    return:\n      type: System.Security.Claims.Claim\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)\n- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  id: FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindAll\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 67\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)\n    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The matching claims. The list is read-only.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindAll(Predicate(Of Claim))\n  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.FindAll(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  id: FindAll(System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: FindAll(String)\n  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindAll\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 68\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves all of the claims that have the specified claim type.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<Claim> FindAll(string type)\n    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The claim type against which to match claims.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>The matching claims. The list is read-only.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.FindAll(String)\n- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  id: FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindFirst\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 69\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual Claim FindFirst(Predicate<Claim> match)\n    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindFirst(Predicate(Of Claim))\n  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.FindFirst(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  id: FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: FindFirst(String)\n  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindFirst\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 70\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Retrieves the first claim with the specified claim type.</p>\\n\"\n  syntax:\n    content: public virtual Claim FindFirst(string type)\n    content.vb: Public Overridable Function FindFirst(type As String) As Claim\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The claim type to match.</p>\\n\"\n    return:\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.FindFirst(String)\n- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  id: HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 71\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Determines whether this claims identity has a claim that is matched by the specified predicate.</p>\\n\"\n  syntax:\n    content: public virtual bool HasClaim(Predicate<Claim> match)\n    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean\n    parameters:\n    - id: match\n      type: System.Predicate{System.Security.Claims.Claim}\n      description: \"\\n<p>The function that performs the matching logic.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>match</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: HasClaim(Predicate(Of Claim))\n  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.HasClaim(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  id: HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: HasClaim(String, String)\n  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 72\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Determines whether this claims identity has a claim with the specified claim type and value.</p>\\n\"\n  syntax:\n    content: public virtual bool HasClaim(string type, string value)\n    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean\n    parameters:\n    - id: type\n      type: System.String\n      description: \"\\n<p>The type of the claim to match.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the claim to match.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a match is found; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.HasClaim(String, String)\n- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  commentId: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  id: RemoveClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: RemoveClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 73\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Attempts to remove a claim from the claims identity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual void RemoveClaim(Claim claim)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Sub RemoveClaim(claim As Claim)\n    parameters:\n    - id: claim\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The claim to remove.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The claim cannot be removed.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.RemoveClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  commentId: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  id: TryRemoveClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: TryRemoveClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryRemoveClaim\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 75\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p>Attempts to remove a claim from the claims identity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public virtual bool TryRemoveClaim(Claim claim)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Overridable Function TryRemoveClaim(claim As Claim) As Boolean\n    parameters:\n    - id: claim\n      type: System.Security.Claims.Claim\n      description: \"\\n<p>The claim to remove.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the claim was successfully removed; otherwise, <strong>false</strong>.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  id: WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 77\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: public virtual void WriteTo(BinaryWriter writer)\n    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)\n- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  id: WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsIdentity\n  langs:\n  - csharp\n  - vb\n  name: WriteTo(BinaryWriter, Byte[])\n  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Claims/ref/System.Security.Claims.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTo\n    path: src/System.Security.Claims/ref/System.Security.Claims.cs\n    startLine: 78\n  assemblies:\n  - System.Security.Claims\n  namespace: System.Security.Claims\n  summary: \"\\n<p></p>\\n\"\n  syntax:\n    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)\n    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())\n    parameters:\n    - id: writer\n      type: System.IO.BinaryWriter\n      description: \"\\n<p></p>\\n\"\n    - id: userData\n      type: System.Byte[]\n      description: \"\\n<p></p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())\n  name.vb: WriteTo(BinaryWriter, Byte())\n  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter, Byte[])\n  nameWithType.vb: ClaimsIdentity.WriteTo(BinaryWriter, Byte())\nreferences:\n- uid: System.Security.Claims\n  isExternal: false\n  name: System.Security.Claims\n  fullName: System.Security.Claims\n  commentId: N:System.Security.Claims\n  nameWithType: System.Security.Claims\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  fullName: System.Security.Principal.IIdentity\n  commentId: T:System.Security.Principal.IIdentity\n  nameWithType: IIdentity\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)\n  name.vb: IEnumerable(Of Claim)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  nameWithType: IEnumerable<Claim>\n  nameWithType.vb: IEnumerable(Of Claim)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.IO.BinaryReader\n  parent: System.IO\n  isExternal: false\n  name: BinaryReader\n  fullName: System.IO.BinaryReader\n  commentId: T:System.IO.BinaryReader\n  nameWithType: BinaryReader\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Security.Claims.ClaimsIdentity\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n  commentId: T:System.Security.Claims.ClaimsIdentity\n  nameWithType: ClaimsIdentity\n- uid: System.Security.Principal.IIdentity.AuthenticationType\n  parent: System.Security.Principal.IIdentity\n  isExternal: true\n  name: AuthenticationType\n  fullName: System.Security.Principal.IIdentity.AuthenticationType\n  commentId: P:System.Security.Principal.IIdentity.AuthenticationType\n  nameWithType: IIdentity.AuthenticationType\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Principal.IIdentity.IsAuthenticated\n  parent: System.Security.Principal.IIdentity\n  isExternal: true\n  name: IsAuthenticated\n  fullName: System.Security.Principal.IIdentity.IsAuthenticated\n  commentId: P:System.Security.Principal.IIdentity.IsAuthenticated\n  nameWithType: IIdentity.IsAuthenticated\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Principal.IIdentity.Name\n  parent: System.Security.Principal.IIdentity\n  isExternal: true\n  name: Name\n  fullName: System.Security.Principal.IIdentity.Name\n  commentId: P:System.Security.Principal.IIdentity.Name\n  nameWithType: IIdentity.Name\n- uid: System.Security.Claims.Claim\n  parent: System.Security.Claims\n  isExternal: false\n  name: Claim\n  fullName: System.Security.Claims.Claim\n  commentId: T:System.Security.Claims.Claim\n  nameWithType: Claim\n- uid: System.Predicate{System.Security.Claims.Claim}\n  parent: System\n  definition: System.Predicate`1\n  name: Predicate<Claim>\n  fullName: System.Predicate<System.Security.Claims.Claim>\n  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)\n  name.vb: Predicate(Of Claim)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: T:System.Predicate{System.Security.Claims.Claim}\n  nameWithType: Predicate<Claim>\n  nameWithType.vb: Predicate(Of Claim)\n- uid: System.Predicate`1\n  isExternal: false\n  name: Predicate<T>\n  fullName: System.Predicate<T>\n  fullname.vb: System.Predicate(Of T)\n  name.vb: Predicate(Of T)\n  spec.csharp:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Predicate`1\n  nameWithType: Predicate<T>\n  nameWithType.vb: Predicate(Of T)\n- uid: System.IO.BinaryWriter\n  parent: System.IO\n  isExternal: false\n  name: BinaryWriter\n  fullName: System.IO.BinaryWriter\n  commentId: T:System.IO.BinaryWriter\n  nameWithType: BinaryWriter\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}