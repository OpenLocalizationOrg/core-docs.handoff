{"nodes":[{"pos":[506,527],"content":"DecoderFallbackBuffer","needQuote":true,"nodes":[{"content":"DecoderFallbackBuffer","pos":[0,21]}]},{"pos":[1965,1988],"content":"DecoderFallbackBuffer()","needQuote":true,"nodes":[{"content":"DecoderFallbackBuffer()","pos":[0,23]}]},{"pos":[2977,2986],"content":"Remaining","needQuote":true,"nodes":[{"content":"Remaining","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The number of characters in the current fallback buffer that have not yet been processed.&lt;/p&gt;\\n","pos":[3820,3920],"source":"\\n<p>The number of characters in the current fallback buffer that have not yet been processed.</p>\\n"},{"pos":[4365,4388],"content":"Fallback(Byte[], Int32)","needQuote":true,"nodes":[{"content":"Fallback(Byte[], Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An input array of bytes.&lt;/p&gt;\\n","pos":[5209,5244],"source":"\\n<p>An input array of bytes.</p>\\n"},{"content":"\\n&lt;p&gt;The index position of a byte in &lt;em&gt;bytesUnknown&lt;/em&gt;.&lt;/p&gt;\\n","pos":[5307,5372],"source":"\\n<p>The index position of a byte in <em>bytesUnknown</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the fallback buffer can process &lt;em&gt;bytesUnknown&lt;/em&gt;; &lt;strong&gt;false&lt;/strong&gt; if the fallback buffer ignores &lt;em&gt;bytesUnknown&lt;/em&gt;.&lt;/p&gt;\\n","pos":[5433,5602],"source":"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>bytesUnknown</em>; <strong>false</strong> if the fallback buffer ignores <em>bytesUnknown</em>.</p>\\n"},{"pos":[6152,6165],"content":"GetNextChar()","needQuote":true,"nodes":[{"content":"GetNextChar()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The next character in the fallback buffer.&lt;/p&gt;\\n","pos":[6846,6899],"source":"\\n<p>The next character in the fallback buffer.</p>\\n"},{"pos":[7255,7269],"content":"MovePrevious()","needQuote":true,"nodes":[{"content":"MovePrevious()","pos":[0,14]}]},{"pos":[8689,8696],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[9464,9475],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[9621,9627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9787,9797],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9892,9900],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9969,9970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9997,9998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10068,10076],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10145,10146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10173,10174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10357,10371],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[10490,10496],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10563,10564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10614,10620],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10680,10681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10764,10770],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10837,10838],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10888,10894],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10954,10955],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11169,11191],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[11339,11345],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11412,11413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11463,11469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11530,11531]},{"pos":[11586,11592],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11652,11653],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11750,11756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11823,11824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11874,11880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11941,11942]},{"pos":[11997,12003],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12063,12064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12309,12340],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[12506,12521],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12597,12598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12648,12654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12715,12716]},{"pos":[12771,12777],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12837,12838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12944,12959],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13035,13036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13086,13092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13153,13154]},{"pos":[13209,13215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13275,13276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13506,13519],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13620,13631],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13703,13704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13731,13732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13805,13816],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13888,13889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13916,13917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14092,14101],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[14194,14201],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14269,14270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14297,14298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14367,14374],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[14442,14443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14470,14471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14646,14663],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14772,14787],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14863,14864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14891,14892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14969,14984],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[15060,15061],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15088,15089],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15234,15240],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[15370,15375],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15480,15486],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[15606,15610],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[15669,15671]},{"pos":[15734,15738],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15796,15798],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[15932,15939],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[16085,16089],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]}],"content":"items:\n- uid: System.Text.DecoderFallbackBuffer\n  commentId: T:System.Text.DecoderFallbackBuffer\n  id: DecoderFallbackBuffer\n  parent: System.Text\n  children:\n  - System.Text.DecoderFallbackBuffer.#ctor\n  - System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  - System.Text.DecoderFallbackBuffer.GetNextChar\n  - System.Text.DecoderFallbackBuffer.MovePrevious\n  - System.Text.DecoderFallbackBuffer.Remaining\n  - System.Text.DecoderFallbackBuffer.Reset\n  langs:\n  - csharp\n  - vb\n  name: DecoderFallbackBuffer\n  fullName: System.Text.DecoderFallbackBuffer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DecoderFallbackBuffer\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 87\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Provides a buffer that allows a fallback handler to return an alternate string to a decoder when it cannot decode an input byte sequence. </p>\\n\"\n  syntax:\n    content: public abstract class DecoderFallbackBuffer\n    content.vb: Public MustInherit Class DecoderFallbackBuffer\n  seealso:\n  - type: System.Text.DecoderFallback\n    commentId: T:System.Text.DecoderFallback\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DecoderFallbackBuffer\n- uid: System.Text.DecoderFallbackBuffer.#ctor\n  commentId: M:System.Text.DecoderFallbackBuffer.#ctor\n  id: '#ctor'\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: DecoderFallbackBuffer()\n  fullName: System.Text.DecoderFallbackBuffer.DecoderFallbackBuffer()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.Encoding/ref/System.Text.Encoding.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.Encoding/ref/System.Text.Encoding.cs\n    startLine: 40\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.DecoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected DecoderFallbackBuffer()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DecoderFallbackBuffer.DecoderFallbackBuffer()\n- uid: System.Text.DecoderFallbackBuffer.Remaining\n  commentId: P:System.Text.DecoderFallbackBuffer.Remaining\n  id: Remaining\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Remaining\n  fullName: System.Text.DecoderFallbackBuffer.Remaining\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remaining\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 106\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, gets the number of characters in the current <xref href=\\\"System.Text.DecoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that remain to be processed.</p>\\n\"\n  syntax:\n    content: public abstract int Remaining { get; }\n    content.vb: Public MustOverride ReadOnly Property Remaining As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the current fallback buffer that have not yet been processed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: DecoderFallbackBuffer.Remaining\n- uid: System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  commentId: M:System.Text.DecoderFallbackBuffer.Fallback(System.Byte[],System.Int32)\n  id: Fallback(System.Byte[],System.Int32)\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Fallback(Byte[], Int32)\n  fullName: System.Text.DecoderFallbackBuffer.Fallback(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Fallback\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 94\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, prepares the fallback buffer to handle the specified input byte sequence.</p>\\n\"\n  syntax:\n    content: public abstract bool Fallback(byte[] bytesUnknown, int index)\n    content.vb: Public MustOverride Function Fallback(bytesUnknown As Byte(), index As Integer) As Boolean\n    parameters:\n    - id: bytesUnknown\n      type: System.Byte[]\n      description: \"\\n<p>An input array of bytes.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index position of a byte in <em>bytesUnknown</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the fallback buffer can process <em>bytesUnknown</em>; <strong>false</strong> if the fallback buffer ignores <em>bytesUnknown</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.DecoderFallbackBuffer.Fallback(System.Byte(), System.Int32)\n  name.vb: Fallback(Byte(), Int32)\n  nameWithType: DecoderFallbackBuffer.Fallback(Byte[], Int32)\n  nameWithType.vb: DecoderFallbackBuffer.Fallback(Byte(), Int32)\n- uid: System.Text.DecoderFallbackBuffer.GetNextChar\n  commentId: M:System.Text.DecoderFallbackBuffer.GetNextChar\n  id: GetNextChar\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: GetNextChar()\n  fullName: System.Text.DecoderFallbackBuffer.GetNextChar()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNextChar\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 98\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, retrieves the next character in the fallback buffer.</p>\\n\"\n  syntax:\n    content: public abstract char GetNextChar()\n    content.vb: Public MustOverride Function GetNextChar As Char\n    return:\n      type: System.Char\n      description: \"\\n<p>The next character in the fallback buffer.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DecoderFallbackBuffer.GetNextChar()\n- uid: System.Text.DecoderFallbackBuffer.MovePrevious\n  commentId: M:System.Text.DecoderFallbackBuffer.MovePrevious\n  id: MovePrevious\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: MovePrevious()\n  fullName: System.Text.DecoderFallbackBuffer.MovePrevious()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MovePrevious\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 102\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, causes the next call to the <xref href=\\\"System.Text.DecoderFallbackBuffer.GetNextChar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method to access the data buffer character position that is prior to the current character position. </p>\\n\"\n  syntax:\n    content: public abstract bool MovePrevious()\n    content.vb: Public MustOverride Function MovePrevious As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Text.DecoderFallbackBuffer.MovePrevious\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operation was successful; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: DecoderFallbackBuffer.MovePrevious()\n- uid: System.Text.DecoderFallbackBuffer.Reset\n  commentId: M:System.Text.DecoderFallbackBuffer.Reset\n  id: Reset\n  parent: System.Text.DecoderFallbackBuffer\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Text.DecoderFallbackBuffer.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/DecoderFallback.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Text/DecoderFallback.cs\n    startLine: 110\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes all data and state information pertaining to this fallback buffer.</p>\\n\"\n  syntax:\n    content: public virtual void Reset()\n    content.vb: Public Overridable Sub Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DecoderFallbackBuffer.Reset()\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n"}