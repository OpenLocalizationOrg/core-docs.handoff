{"nodes":[{"pos":[403,409],"content":"Random","needQuote":true,"nodes":[{"content":"Random","pos":[0,6]}]},{"pos":[1668,1676],"content":"Random()","needQuote":true,"nodes":[{"content":"Random()","pos":[0,8]}]},{"pos":[2530,2543],"content":"Random(Int32)","needQuote":true,"nodes":[{"content":"Random(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A number used to calculate a starting value for the pseudo-random number sequence.","pos":[3232,3319],"source":"\\n<p>A number used to calculate a starting value for the pseudo-random number sequence."},{"content":"If a negative number is specified, the absolute value of the number is used.","pos":[3320,3396]},{"content":"&lt;/p&gt;\\n","pos":[3397,3403],"source":" </p>\\n"},{"pos":[3630,3636],"content":"Next()","needQuote":true,"nodes":[{"content":"Next()","pos":[0,6]}]},{"pos":[4713,4724],"content":"Next(Int32)","needQuote":true,"nodes":[{"content":"Next(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The exclusive upper bound of the random number to be generated.","pos":[5389,5457],"source":"\\n<p>The exclusive upper bound of the random number to be generated."},{"content":"&lt;em&gt;maxValue&lt;/em&gt; must be greater than or equal to 0.","pos":[5458,5511],"source":" <em>maxValue</em> must be greater than or equal to 0."},{"content":"&lt;/p&gt;\\n","pos":[5512,5518],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer that is greater than or equal to 0, and less than &lt;em&gt;maxValue&lt;/em&gt;; that is, the range of return values ordinarily includes 0 but not &lt;em&gt;maxValue&lt;/em&gt;.","pos":[5577,5759],"source":"\\n<p>A 32-bit signed integer that is greater than or equal to 0, and less than <em>maxValue</em>; that is, the range of return values ordinarily includes 0 but not <em>maxValue</em>."},{"content":"However, if &lt;em&gt;maxValue&lt;/em&gt; equals 0, &lt;em&gt;maxValue&lt;/em&gt; is returned.&lt;/p&gt;\\n","pos":[5760,5836],"source":" However, if <em>maxValue</em> equals 0, <em>maxValue</em> is returned.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maxValue&lt;/em&gt; is less than 0.","pos":[5967,6007],"source":"\\n<p>\\n<em>maxValue</em> is less than 0."},{"content":"&lt;/p&gt;\\n","pos":[6008,6014],"source":" </p>\\n"},{"pos":[6412,6430],"content":"Next(Int32, Int32)","needQuote":true,"nodes":[{"content":"Next(Int32, Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The inclusive lower bound of the random number returned.","pos":[7124,7185],"source":"\\n<p>The inclusive lower bound of the random number returned."},{"content":"&lt;/p&gt;\\n","pos":[7186,7192],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The exclusive upper bound of the random number returned.","pos":[7258,7319],"source":"\\n<p>The exclusive upper bound of the random number returned."},{"content":"&lt;em&gt;maxValue&lt;/em&gt; must be greater than or equal to &lt;em&gt;minValue&lt;/em&gt;.","pos":[7320,7389],"source":" <em>maxValue</em> must be greater than or equal to <em>minValue</em>."},{"content":"&lt;/p&gt;\\n","pos":[7390,7396],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A 32-bit signed integer greater than or equal to &lt;em&gt;minValue&lt;/em&gt; and less than &lt;em&gt;maxValue&lt;/em&gt;; that is, the range of return values includes &lt;em&gt;minValue&lt;/em&gt; but not &lt;em&gt;maxValue&lt;/em&gt;.","pos":[7455,7649],"source":"\\n<p>A 32-bit signed integer greater than or equal to <em>minValue</em> and less than <em>maxValue</em>; that is, the range of return values includes <em>minValue</em> but not <em>maxValue</em>."},{"content":"If &lt;em&gt;minValue&lt;/em&gt; equals &lt;em&gt;maxValue&lt;/em&gt;, &lt;em&gt;minValue&lt;/em&gt; is returned.&lt;/p&gt;\\n","pos":[7650,7733],"source":" If <em>minValue</em> equals <em>maxValue</em>, <em>minValue</em> is returned.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;minValue&lt;/em&gt; is greater than &lt;em&gt;maxValue&lt;/em&gt;.","pos":[7864,7923],"source":"\\n<p>\\n<em>minValue</em> is greater than <em>maxValue</em>."},{"content":"&lt;/p&gt;\\n","pos":[7924,7930],"source":" </p>\\n"},{"pos":[8314,8331],"content":"NextBytes(Byte[])","needQuote":true,"nodes":[{"content":"NextBytes(Byte[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An array of bytes to contain random numbers.","pos":[8990,9039],"source":"\\n<p>An array of bytes to contain random numbers."},{"content":"&lt;/p&gt;\\n","pos":[9040,9046],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9165,9213],"source":"\\n<p>\\n<em>buffer</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9214,9220],"source":" </p>\\n"},{"pos":[9686,9698],"content":"NextDouble()","needQuote":true,"nodes":[{"content":"NextDouble()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.&lt;/p&gt;\\n","pos":[10339,10447],"source":"\\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\\n"},{"pos":[10707,10715],"content":"Sample()","needQuote":true,"nodes":[{"content":"Sample()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.&lt;/p&gt;\\n","pos":[11309,11417],"source":"\\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\\n"},{"pos":[11685,11691],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11822,11828],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11988,11998],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12093,12101],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12170,12171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12198,12199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12269,12277],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12346,12347],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12374,12375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12558,12572],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[12691,12697],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12764,12765],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12815,12821],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12881,12882],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12965,12971],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13038,13039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13089,13095],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13155,13156],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13370,13392],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[13540,13546],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13613,13614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13664,13670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13731,13732]},{"pos":[13787,13793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13853,13854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13951,13957],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14024,14025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14075,14081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14142,14143]},{"pos":[14198,14204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14264,14265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14510,14541],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[14707,14722],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14798,14799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14849,14855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14916,14917]},{"pos":[14972,14978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15038,15039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15145,15160],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[15236,15237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15287,15293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15354,15355]},{"pos":[15410,15416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15476,15477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15707,15720],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15821,15832],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15904,15905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15932,15933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16006,16017],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[16089,16090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16117,16118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16293,16302],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[16395,16402],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16470,16471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16498,16499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16568,16575],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16643,16644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16671,16672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16847,16864],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16973,16988],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17064,17065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17092,17093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17170,17185],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[17261,17262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17289,17290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17458,17463],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17568,17574],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[17694,17698],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[17757,17759]},{"pos":[17822,17826],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[17884,17886],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[18019,18025],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[18174,18201],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[18407,18428],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Random\n  commentId: T:System.Random\n  id: Random\n  parent: System\n  children:\n  - System.Random.#ctor\n  - System.Random.#ctor(System.Int32)\n  - System.Random.Next\n  - System.Random.Next(System.Int32)\n  - System.Random.Next(System.Int32,System.Int32)\n  - System.Random.NextBytes(System.Byte[])\n  - System.Random.NextDouble\n  - System.Random.Sample\n  langs:\n  - csharp\n  - vb\n  name: Random\n  fullName: System.Random\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Random\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public class Random\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public Class Random\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Random\n- uid: System.Random.#ctor\n  commentId: M:System.Random.#ctor\n  id: '#ctor'\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Random()\n  fullName: System.Random.Random()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Random\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using a time-dependent default seed value.</p>\\n\"\n  syntax:\n    content: public Random()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Random.Random()\n- uid: System.Random.#ctor(System.Int32)\n  commentId: M:System.Random.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Random(Int32)\n  fullName: System.Random.Random(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Random\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the specified seed value.</p>\\n\"\n  syntax:\n    content: public Random(int Seed)\n    content.vb: Public Sub New(Seed As Integer)\n    parameters:\n    - id: Seed\n      type: System.Int32\n      description: \"\\n<p>A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Random.Random(Int32)\n- uid: System.Random.Next\n  commentId: M:System.Random.Next\n  id: Next\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Next()\n  fullName: System.Random.Next()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Next\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 127\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a non-negative random integer.</p>\\n\"\n  syntax:\n    content: public virtual int Next()\n    content.vb: Public Overridable Function Next As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is greater than or equal to 0 and less than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Random.Next()\n- uid: System.Random.Next(System.Int32)\n  commentId: M:System.Random.Next(System.Int32)\n  id: Next(System.Int32)\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Next(Int32)\n  fullName: System.Random.Next(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Next\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a non-negative random integer that is less than the specified maximum.</p>\\n\"\n  syntax:\n    content: public virtual int Next(int maxValue)\n    content.vb: Public Overridable Function Next(maxValue As Integer) As Integer\n    parameters:\n    - id: maxValue\n      type: System.Int32\n      description: \"\\n<p>The exclusive upper bound of the random number to be generated. <em>maxValue</em> must be greater than or equal to 0. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer that is greater than or equal to 0, and less than <em>maxValue</em>; that is, the range of return values ordinarily includes 0 but not <em>maxValue</em>. However, if <em>maxValue</em> equals 0, <em>maxValue</em> is returned.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>maxValue</em> is less than 0. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Random.Next(Int32)\n- uid: System.Random.Next(System.Int32,System.Int32)\n  commentId: M:System.Random.Next(System.Int32,System.Int32)\n  id: Next(System.Int32,System.Int32)\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Next(Int32, Int32)\n  fullName: System.Random.Next(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Next\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 156\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a random integer that is within a specified range.</p>\\n\"\n  syntax:\n    content: public virtual int Next(int minValue, int maxValue)\n    content.vb: Public Overridable Function Next(minValue As Integer, maxValue As Integer) As Integer\n    parameters:\n    - id: minValue\n      type: System.Int32\n      description: \"\\n<p>The inclusive lower bound of the random number returned. </p>\\n\"\n    - id: maxValue\n      type: System.Int32\n      description: \"\\n<p>The exclusive upper bound of the random number returned. <em>maxValue</em> must be greater than or equal to <em>minValue</em>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer greater than or equal to <em>minValue</em> and less than <em>maxValue</em>; that is, the range of return values includes <em>minValue</em> but not <em>maxValue</em>. If <em>minValue</em> equals <em>maxValue</em>, <em>minValue</em> is returned.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>minValue</em> is greater than <em>maxValue</em>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Random.Next(Int32, Int32)\n- uid: System.Random.NextBytes(System.Byte[])\n  commentId: M:System.Random.NextBytes(System.Byte[])\n  id: NextBytes(System.Byte[])\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: NextBytes(Byte[])\n  fullName: System.Random.NextBytes(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NextBytes\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 202\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Fills the elements of a specified array of bytes with random numbers.</p>\\n\"\n  syntax:\n    content: public virtual void NextBytes(byte[] buffer)\n    content.vb: Public Overridable Sub NextBytes(buffer As Byte())\n    parameters:\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>An array of bytes to contain random numbers. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>buffer</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Random.NextBytes(System.Byte())\n  name.vb: NextBytes(Byte())\n  nameWithType: Random.NextBytes(Byte[])\n  nameWithType.vb: Random.NextBytes(Byte())\n- uid: System.Random.NextDouble\n  commentId: M:System.Random.NextDouble\n  id: NextDouble\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: NextDouble()\n  fullName: System.Random.NextDouble()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NextDouble\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</p>\\n\"\n  syntax:\n    content: public virtual double NextDouble()\n    content.vb: Public Overridable Function NextDouble As Double\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Random.NextDouble()\n- uid: System.Random.Sample\n  commentId: M:System.Random.Sample\n  id: Sample\n  parent: System.Random\n  langs:\n  - csharp\n  - vb\n  name: Sample()\n  fullName: System.Random.Sample()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Random.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sample\n    path: src/mscorlib/src/System/Random.cs\n    startLine: 90\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a random floating-point number between 0.0 and 1.0.</p>\\n\"\n  syntax:\n    content: protected virtual double Sample()\n    content.vb: Protected Overridable Function Sample As Double\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\\n\"\n  seealso:\n  - type: System.Random.NextDouble\n    commentId: M:System.Random.NextDouble\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Random.Sample()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}