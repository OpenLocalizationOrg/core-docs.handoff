{"nodes":[{"pos":[366,387],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[1901,1906],"content":"Entry","needQuote":true,"nodes":[{"content":"Entry","pos":[0,5]}]},{"pos":[3886,3889],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"content":"\\n&lt;p&gt;The key of the current element of the enumeration.&lt;/p&gt;\\n","pos":[4534,4595],"source":"\\n<p>The key of the current element of the enumeration.</p>\\n"},{"pos":[5694,5699],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The value of the current element of the enumeration.&lt;/p&gt;\\n","pos":[6354,6417],"source":"\\n<p>The value of the current element of the enumeration.</p>\\n"},{"pos":[7366,7384],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[7600,7607],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[7865,7875],"content":"MoveNext()","needQuote":true,"nodes":[{"content":"MoveNext()","pos":[0,10]}]},{"pos":[8004,8012],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[8077,8078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8105,8106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8193,8201],"content":"MoveNext","needQuote":true,"nodes":[{"content":"MoveNext","pos":[0,8]}]},{"pos":[8266,8267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8294,8295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8519,8526],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[8649,8654],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[8716,8717],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8744,8745],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8829,8834],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[8896,8897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8924,8925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9125,9136],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[9353,9368],"content":"DictionaryEntry","needQuote":true,"nodes":[{"content":"DictionaryEntry","pos":[0,15]}]},{"pos":[9564,9570],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9691,9697],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[9847,9872],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Collections.IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n  id: IDictionaryEnumerator\n  parent: System.Collections\n  children:\n  - System.Collections.IDictionaryEnumerator.Entry\n  - System.Collections.IDictionaryEnumerator.Key\n  - System.Collections.IDictionaryEnumerator.Value\n  langs:\n  - csharp\n  - vb\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IDictionaryEnumerator\n    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Enumerates the elements of a nongeneric dictionary.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public interface IDictionaryEnumerator : IEnumerator\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Interface IDictionaryEnumerator\n          Inherits IEnumerator\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  inheritedMembers:\n  - System.Collections.IEnumerator.Current\n  - System.Collections.IEnumerator.MoveNext\n  - System.Collections.IEnumerator.Reset\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IDictionaryEnumerator\n- uid: System.Collections.IDictionaryEnumerator.Entry\n  commentId: P:System.Collections.IDictionaryEnumerator.Entry\n  id: Entry\n  parent: System.Collections.IDictionaryEnumerator\n  langs:\n  - csharp\n  - vb\n  name: Entry\n  fullName: System.Collections.IDictionaryEnumerator.Entry\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Entry\n    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n    startLine: 74\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets both the key and the value of the current dictionary entry.</p>\\n\"\n  syntax:\n    content: DictionaryEntry Entry { get; }\n    content.vb: ReadOnly Property Entry As DictionaryEntry\n    parameters: []\n    return:\n      type: System.Collections.DictionaryEntry\n      description: \"\\n<p>A <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing both the key and the value of the current dictionary entry.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IDictionaryEnumerator.Key\n    commentId: P:System.Collections.IDictionaryEnumerator.Key\n  - type: System.Collections.IDictionaryEnumerator.Value\n    commentId: P:System.Collections.IDictionaryEnumerator.Value\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionaryEnumerator.Entry\n- uid: System.Collections.IDictionaryEnumerator.Key\n  commentId: P:System.Collections.IDictionaryEnumerator.Key\n  id: Key\n  parent: System.Collections.IDictionaryEnumerator\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Collections.IDictionaryEnumerator.Key\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Key\n    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n    startLine: 55\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the key of the current dictionary entry.</p>\\n\"\n  syntax:\n    content: object Key { get; }\n    content.vb: ReadOnly Property Key As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The key of the current element of the enumeration.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IDictionaryEnumerator.Value\n    commentId: P:System.Collections.IDictionaryEnumerator.Value\n  - type: System.Collections.IDictionaryEnumerator.Entry\n    commentId: P:System.Collections.IDictionaryEnumerator.Entry\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionaryEnumerator.Key\n- uid: System.Collections.IDictionaryEnumerator.Value\n  commentId: P:System.Collections.IDictionaryEnumerator.Value\n  id: Value\n  parent: System.Collections.IDictionaryEnumerator\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Collections.IDictionaryEnumerator.Value\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Value\n    path: src/mscorlib/src/System/Collections/IDictionaryEnumerator.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the value of the current dictionary entry.</p>\\n\"\n  syntax:\n    content: object Value { get; }\n    content.vb: ReadOnly Property Value As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of the current element of the enumeration.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is positioned before the first entry of the dictionary or after the last entry. </p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator.Reset\n    commentId: M:System.Collections.IEnumerator.Reset\n  - type: System.Collections.IEnumerator.MoveNext\n    commentId: M:System.Collections.IEnumerator.MoveNext\n  - type: System.Collections.IDictionaryEnumerator.Key\n    commentId: P:System.Collections.IDictionaryEnumerator.Key\n  - type: System.Collections.IDictionaryEnumerator.Entry\n    commentId: P:System.Collections.IDictionaryEnumerator.Entry\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionaryEnumerator.Value\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.IEnumerator.Current\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Current\n  fullName: System.Collections.IEnumerator.Current\n  nameWithType: IEnumerator.Current\n  commentId: P:System.Collections.IEnumerator.Current\n- uid: System.Collections.IEnumerator.MoveNext\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: MoveNext()\n  fullName: System.Collections.IEnumerator.MoveNext()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.MoveNext\n    name: MoveNext\n    fullName: System.Collections.IEnumerator.MoveNext\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.MoveNext()\n  commentId: M:System.Collections.IEnumerator.MoveNext\n- uid: System.Collections.IEnumerator.Reset\n  parent: System.Collections.IEnumerator\n  isExternal: false\n  name: Reset()\n  fullName: System.Collections.IEnumerator.Reset()\n  spec.csharp:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerator.Reset\n    name: Reset\n    fullName: System.Collections.IEnumerator.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator.Reset()\n  commentId: M:System.Collections.IEnumerator.Reset\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.DictionaryEntry\n  parent: System.Collections\n  isExternal: false\n  name: DictionaryEntry\n  fullName: System.Collections.DictionaryEntry\n  nameWithType: DictionaryEntry\n  commentId: T:System.Collections.DictionaryEntry\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}