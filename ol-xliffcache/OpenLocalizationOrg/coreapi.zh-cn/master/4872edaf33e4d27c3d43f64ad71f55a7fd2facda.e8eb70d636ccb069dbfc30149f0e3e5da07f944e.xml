{"nodes":[{"pos":[2414,2439],"content":"DbConnectionStringBuilder","needQuote":true,"nodes":[{"content":"DbConnectionStringBuilder","pos":[0,25]}]},{"pos":[4283,4310],"content":"DbConnectionStringBuilder()","needQuote":true,"nodes":[{"content":"DbConnectionStringBuilder()","pos":[0,27]}]},{"pos":[5427,5443],"content":"ConnectionString","needQuote":true,"nodes":[{"content":"ConnectionString","pos":[0,16]}]},{"content":"\\n&lt;p&gt;An invalid connection string argument has been supplied.&lt;/p&gt;\\n","pos":[6659,6726],"source":"\\n<p>An invalid connection string argument has been supplied.</p>\\n"},{"pos":[7087,7092],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[8650,8662],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key of the item to get or set.&lt;/p&gt;\\n","pos":[9443,9488],"source":"\\n<p>The key of the item to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[10132,10225],"source":"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[11257,11261],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[13006,13032],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[14922,14942],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[16719,16741],"content":"IDictionary.IsReadOnly","needQuote":true,"nodes":[{"content":"IDictionary.IsReadOnly","pos":[0,22]}]},{"pos":[18154,18178],"content":"IDictionary.Item[Object]","needQuote":true,"nodes":[{"content":"IDictionary.Item[Object]","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key of the element to get or set.&lt;/p&gt;\\n","pos":[19068,19116],"source":"\\n<p>The key of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element with the specified key.&lt;/p&gt;\\n","pos":[19176,19222],"source":"\\n<p>The element with the specified key.</p>\\n"},{"pos":[19880,19886],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[21594,21613],"content":"Add(String, Object)","needQuote":true,"nodes":[{"content":"Add(String, Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The value for the specified key.&lt;/p&gt;\\n","pos":[22688,22731],"source":"\\n<p>The value for the specified key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[22850,22943],"source":"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[23882,23931],"content":"AppendKeyValuePair(StringBuilder, String, String)","needQuote":true,"nodes":[{"content":"AppendKeyValuePair(StringBuilder, String, String)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The key to be added.&lt;/p&gt;\\n","pos":[25176,25207],"source":"\\n<p>The key to be added.</p>\\n"},{"content":"\\n&lt;p&gt;The value for the supplied key.&lt;/p&gt;\\n","pos":[25271,25313],"source":"\\n<p>The value for the supplied key.</p>\\n"},{"pos":[25713,25720],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[27161,27180],"content":"ContainsKey(String)","needQuote":true,"nodes":[{"content":"ContainsKey(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[28609,28702],"source":"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[29237,29276],"content":"EquivalentTo(DbConnectionStringBuilder)","needQuote":true,"nodes":[{"content":"EquivalentTo(DbConnectionStringBuilder)","pos":[0,39]}]},{"pos":[31401,31415],"content":"Remove(String)","needQuote":true,"nodes":[{"content":"Remove(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key existed within the connection string and was removed; &lt;strong&gt;false&lt;/strong&gt; if the key did not exist.&lt;/p&gt;\\n","pos":[32549,32697],"source":"\\n<p>\\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is null (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic)&lt;/p&gt;\\n","pos":[32816,32896],"source":"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n"},{"pos":[33710,33733],"content":"ShouldSerialize(String)","needQuote":true,"nodes":[{"content":"ShouldSerialize(String)","pos":[0,23]}]},{"pos":[35643,35675],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[37227,37301],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"pos":[38035,38066],"content":"IDictionary.Add(Object, Object)","needQuote":true,"nodes":[{"content":"IDictionary.Add(Object, Object)","pos":[0,31]}]},{"pos":[40076,40104],"content":"IDictionary.Contains(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Contains(Object)","pos":[0,28]}]},{"pos":[42144,42171],"content":"IDictionary.GetEnumerator()","needQuote":true,"nodes":[{"content":"IDictionary.GetEnumerator()","pos":[0,27]}]},{"pos":[44130,44156],"content":"IDictionary.Remove(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Remove(Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.&lt;/p&gt;\\n","pos":[45105,45149],"source":"\\n<p>The key of the element to remove.</p>\\n"},{"pos":[45796,45823],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[47373,47383],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[48858,48889],"content":"TryGetValue(String, out Object)","needQuote":true,"nodes":[{"content":"TryGetValue(String, out Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The key of the item to retrieve.&lt;/p&gt;\\n","pos":[49850,49893],"source":"\\n<p>The key of the item to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The value corresponding to the &lt;em&gt;key&lt;/em&gt;.&lt;/p&gt;\\n","pos":[49957,50012],"source":"\\n<p>The value corresponding to the <em>key</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;keyword&lt;/em&gt; was found within the connection string, &lt;strong&gt;false&lt;/strong&gt; otherwise.&lt;/p&gt;\\n","pos":[50073,50201],"source":"\\n<p>\\n<strong>true</strong> if <em>keyword</em> was found within the connection string, <strong>false</strong> otherwise.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; contains a null value (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[50320,50415],"source":"\\n<p>\\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[51160,51183],"content":"IDictionary.IsFixedSize","needQuote":true,"nodes":[{"content":"IDictionary.IsFixedSize","pos":[0,23]}]},{"pos":[52309,52327],"content":"System.Data.Common","needQuote":true,"nodes":[{"content":"System.Data.Common","pos":[0,18]}]},{"pos":[52494,52500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52674,52685],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[52898,52909],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[53122,53133],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[53345,53359],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[53478,53484],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53551,53552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53602,53608],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53668,53669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53752,53758],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[53825,53826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53876,53882],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[53942,53943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54157,54179],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[54327,54333],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54400,54401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54451,54457],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54518,54519]},{"pos":[54574,54580],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54640,54641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54738,54744],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54811,54812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54862,54868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[54929,54930]},{"pos":[54985,54991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55051,55052],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55297,55328],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[55494,55509],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[55585,55586],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55636,55642],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55703,55704]},{"pos":[55759,55765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55825,55826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55932,55947],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[56023,56024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56074,56080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56141,56142]},{"pos":[56197,56203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56263,56264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56494,56507],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[56608,56619],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56691,56692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56719,56720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56793,56804],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[56876,56877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56904,56905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57080,57089],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[57182,57189],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57257,57258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57285,57286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57355,57362],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57430,57431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57458,57459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57634,57651],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[57760,57775],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[57851,57852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57879,57880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57957,57972],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58048,58049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58076,58077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58372,58385],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[58502,58513],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[58572,58573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58600,58601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58682,58693],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[58752,58753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58780,58781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59136,59148],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[59281,59291],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[59358,59359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59386,59387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59476,59486],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[59553,59554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59581,59582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59923,59938],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[60142,60155],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[60217,60218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60245,60246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60324,60340],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[60405,60406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60433,60434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60812,60829],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[61041,61056],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[61120,61121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61148,61149],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61229,61247],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[61314,61315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61342,61343],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61578,61584],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[61703,61721],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[61922,61946],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[62125,62136],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[62195,62196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62263,62274],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62351,62352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62465,62476],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[62535,62536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62603,62614],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62691,62692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62920,62929],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[63135,63158],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[63353,63363],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[63430,63431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63498,63509],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[63586,63587],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63708,63718],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[63785,63786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63853,63864],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[63941,63942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64195,64213],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[64435,64461],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[64768,64781],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[64843,64844],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64911,64922],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[64999,65000],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65110,65126],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[65191,65192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65259,65270],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65347,65348],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65637,65647],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[65847,65875],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[66190,66205],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[66269,66270],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66337,66348],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[66425,66426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66538,66556],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[66623,66624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66691,66702],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[66779,66780],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67042,67053],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[67199,67205],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[67397,67402],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[67603,67608],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67795,67799],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[68054,68068],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[68298,68305],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68503,68511],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[68773,68783],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[69060,69072],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[69311,69315],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[69398,69399]},{"pos":[69452,69458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[69519,69520]},{"pos":[69621,69625],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[69707,69708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69758,69764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69824,69825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70106,70112],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[70334,70347],"content":"StringBuilder","needQuote":true,"nodes":[{"content":"StringBuilder","pos":[0,13]}]},{"pos":[70504,70515],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[70707,70714],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[70837,70842],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[70925,70926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70953,70954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71038,71043],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[71126,71127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71154,71155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71369,71394],"content":"DbConnectionStringBuilder","needQuote":true,"nodes":[{"content":"DbConnectionStringBuilder","pos":[0,25]}]},{"pos":[71694,71714],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[71892,71898],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[71961,71962],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72011,72016],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[72055,72056]},{"pos":[72110,72115],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72174,72175],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72287,72293],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[72356,72357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72406,72411],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[72450,72451]},{"pos":[72505,72510],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72569,72570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72781,72786],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[73001,73020],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[73196,73199],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[73280,73281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73331,73337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73398,73399]},{"pos":[73454,73460],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73520,73521],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73632,73635],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[73716,73717],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73767,73773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73834,73835]},{"pos":[73890,73896],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73956,73957],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74231,74247],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[74404,74412],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[74498,74499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74549,74555],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74615,74616],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74718,74726],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[74812,74813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74863,74869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74929,74930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75182,75197],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[75336,75349],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[75440,75441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75468,75469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75561,75574],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[75665,75666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75693,75694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75920,75941],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[76217,76231],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[76384,76390],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[76474,76475],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76525,76531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76591,76592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76692,76698],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[76782,76783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76833,76839],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76899,76900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77149,77164],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[77303,77316],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77386,77387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77414,77415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77507,77520],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[77590,77591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77618,77619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77835,77846],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[78045,78055],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[78150,78158],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78227,78228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78255,78256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78326,78334],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78403,78404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78431,78432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78639,78650],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[78881,78898],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[79074,79095],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[79300,79321],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Data.Common.DbConnectionStringBuilder\n  commentId: T:System.Data.Common.DbConnectionStringBuilder\n  id: DbConnectionStringBuilder\n  parent: System.Data.Common\n  children:\n  - System.Data.Common.DbConnectionStringBuilder.#ctor\n  - System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\n  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)\n  - System.Data.Common.DbConnectionStringBuilder.Clear\n  - System.Data.Common.DbConnectionStringBuilder.ConnectionString\n  - System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\n  - System.Data.Common.DbConnectionStringBuilder.Count\n  - System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\n  - System.Data.Common.DbConnectionStringBuilder.Item(System.String)\n  - System.Data.Common.DbConnectionStringBuilder.Keys\n  - System.Data.Common.DbConnectionStringBuilder.Remove(System.String)\n  - System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsFixedSize\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsReadOnly\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)\n  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator\n  - System.Data.Common.DbConnectionStringBuilder.ToString\n  - System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  - System.Data.Common.DbConnectionStringBuilder.Values\n  langs:\n  - csharp\n  - vb\n  name: DbConnectionStringBuilder\n  fullName: System.Data.Common.DbConnectionStringBuilder\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DbConnectionStringBuilder\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 21\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Provides a base class for strongly typed connection string builders.</p>\\n\"\n  syntax:\n    content: 'public class DbConnectionStringBuilder : IDictionary, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class DbConnectionStringBuilder\n          Implements IDictionary, ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DbConnectionStringBuilder\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Data.Common.DbConnectionStringBuilder.#ctor\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.#ctor\n  id: '#ctor'\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: DbConnectionStringBuilder()\n  fullName: System.Data.Common.DbConnectionStringBuilder.DbConnectionStringBuilder()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 31\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public DbConnectionStringBuilder()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnectionStringBuilder.DbConnectionStringBuilder()\n- uid: System.Data.Common.DbConnectionStringBuilder.ConnectionString\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.ConnectionString\n  id: ConnectionString\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ConnectionString\n  fullName: System.Data.Common.DbConnectionStringBuilder.ConnectionString\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectionString\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 91\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the connection string associated with the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public string ConnectionString { get; set; }\n    content.vb: Public Property ConnectionString As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The current connection string, created from the key/value pairs that are contained within the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The default value is an empty string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An invalid connection string argument has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnectionStringBuilder.ConnectionString\n- uid: System.Data.Common.DbConnectionStringBuilder.Count\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.Count\n  id: Count\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Data.Common.DbConnectionStringBuilder.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 142\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets the current number of keys that are contained within the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of keys that are contained within the connection string maintained by the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: DbConnectionStringBuilder.Count\n- uid: System.Data.Common.DbConnectionStringBuilder.Item(System.String)\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.Common.DbConnectionStringBuilder.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 65\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the value associated with the specified key.</p>\\n\"\n  syntax:\n    content: public virtual object this[string keyword] { get; set; }\n    content.vb: Public Overridable Property Item(keyword As String) As Object\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the item to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the specified key. If the specified key is not found, trying to get it returns a null reference (<strong>Nothing</strong> in Visual Basic), and trying to set it creates a new element using the specified key.</p>\\n<p>Passing a null (<strong>Nothing</strong> in Visual Basic) key throws an <xref href=\\\"System.ArgumentNullException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Assigning a null value removes the key/value pair.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set, and the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n<p>-or-</p>\\n<p>The property is set, <em>keyword</em> does not exist in the collection, and the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.Common.DbConnectionStringBuilder.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: DbConnectionStringBuilder.Item[String]\n  nameWithType.vb: DbConnectionStringBuilder.Item(String)\n- uid: System.Data.Common.DbConnectionStringBuilder.Keys\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.Keys\n  id: Keys\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Data.Common.DbConnectionStringBuilder.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Keys\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 161\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Keys { get; }\n    content.vb: Public Overridable ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: DbConnectionStringBuilder.Keys\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 156\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: DbConnectionStringBuilder.ICollection.IsSynchronized\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.ICollection.IsSynchronized\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 170\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: DbConnectionStringBuilder.ICollection.SyncRoot\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.ICollection.SyncRoot\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsReadOnly\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsReadOnly\n    path: src/System.Data.Common/ref/System.Data.Common.cs\n    startLine: 290\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: bool IDictionary.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsReadOnly\n  nameWithType: DbConnectionStringBuilder.IDictionary.IsReadOnly\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.IsReadOnly\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Item[Object]\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.this[]\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 58\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets or sets the element with the specified key.</p>\\n\"\n  syntax:\n    content: object IDictionary.this[object keyword] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(keyword As Object) As Object Implements IDictionary.this\n    parameters:\n    - id: keyword\n      type: System.Object\n      description: \"\\n<p>The key of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element with the specified key.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Item(System.Object)\n  name.vb: System.Collections.IDictionary.Item(Object)\n  nameWithType: DbConnectionStringBuilder.IDictionary.Item[Object]\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.Item(Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.Values\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.Values\n  id: Values\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Data.Common.DbConnectionStringBuilder.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Values\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 175\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the values in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Values { get; }\n    content.vb: Public Overridable ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the values in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: DbConnectionStringBuilder.Values\n- uid: System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)\n  id: Add(System.String,System.Object)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Add(String, Object)\n  fullName: System.Data.Common.DbConnectionStringBuilder.Add(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 196\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Adds an entry with the specified key and value into the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Add(string keyword, object value)\n    content.vb: Public Sub Add(keyword As String, value As Object)\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to add to the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value for the specified key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only. </p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DbConnectionStringBuilder.Add(String, Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)\n  id: AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendKeyValuePair(StringBuilder, String, String)\n  fullName: System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AppendKeyValuePair\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 201\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Provides an efficient and safe way to append a key and value to an existing <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public static void AppendKeyValuePair(StringBuilder builder, string keyword, string value)\n    content.vb: Public Shared Sub AppendKeyValuePair(builder As StringBuilder, keyword As String, value As String)\n    parameters:\n    - id: builder\n      type: System.Text.StringBuilder\n      description: \"\\n<p>The <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add the key/value pair.</p>\\n\"\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to be added.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value for the supplied key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: DbConnectionStringBuilder.AppendKeyValuePair(StringBuilder, String, String)\n- uid: System.Data.Common.DbConnectionStringBuilder.Clear\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.Clear\n  id: Clear\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Data.Common.DbConnectionStringBuilder.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 207\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Clears the contents of the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Clear\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnectionStringBuilder.Clear()\n- uid: System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(String)\n  fullName: System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContainsKey\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 219\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsKey(string keyword)\n    content.vb: Public Overridable Function ContainsKey(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an entry with the specified key; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnectionStringBuilder.ContainsKey(String)\n- uid: System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\n  id: EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: EquivalentTo(DbConnectionStringBuilder)\n  fullName: System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EquivalentTo\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 230\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Compares the connection information in this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the connection information in the supplied object.</p>\\n\"\n  syntax:\n    content: public virtual bool EquivalentTo(DbConnectionStringBuilder connectionStringBuilder)\n    content.vb: Public Overridable Function EquivalentTo(connectionStringBuilder As DbConnectionStringBuilder) As Boolean\n    parameters:\n    - id: connectionStringBuilder\n      type: System.Data.Common.DbConnectionStringBuilder\n      description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be compared with this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the connection information in both of the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects causes an equivalent connection string; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnectionStringBuilder.EquivalentTo(DbConnectionStringBuilder)\n- uid: System.Data.Common.DbConnectionStringBuilder.Remove(System.String)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Remove(String)\n  fullName: System.Data.Common.DbConnectionStringBuilder.Remove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 276\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes the entry with the specified key from the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual bool Remove(string keyword)\n    content.vb: Public Overridable Function Remove(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the key/value pair to be removed from the connection string in this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only, or the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnectionStringBuilder.Remove(String)\n- uid: System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)\n  id: ShouldSerialize(System.String)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ShouldSerialize(String)\n  fullName: System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldSerialize\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 288\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Indicates whether the specified key exists in this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual bool ShouldSerialize(string keyword)\n    content.vb: Public Overridable Function ShouldSerialize(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an entry with the specified key; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: DbConnectionStringBuilder.ShouldSerialize(String)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 225\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at a particular <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: DbConnectionStringBuilder.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Add(Object, Object)\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Add\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 192\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Adds an element with the provided key and value to the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: void IDictionary.Add(object keyword, object value)\n    content.vb: Sub System.Collections.IDictionary.Add(keyword As Object, value As Object) Implements IDictionary.Add\n    parameters:\n    - id: keyword\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the key of the element to add.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the value of the element to add.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  name.vb: System.Collections.IDictionary.Add(Object, Object)\n  nameWithType: DbConnectionStringBuilder.IDictionary.Add(Object, Object)\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.Add(Object, Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Contains(Object)\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Contains\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 215\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains an element with the specified key.</p>\\n\"\n  syntax:\n    content: bool IDictionary.Contains(object keyword)\n    content.vb: Function System.Collections.IDictionary.Contains(keyword As Object) As Boolean Implements IDictionary.Contains\n    parameters:\n    - id: keyword\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  name.vb: System.Collections.IDictionary.Contains(Object)\n  nameWithType: DbConnectionStringBuilder.IDictionary.Contains(Object)\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.Contains(Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator\n  id: System#Collections#IDictionary#GetEnumerator\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.GetEnumerator()\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.GetEnumerator\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 254\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: IDictionaryEnumerator IDictionary.GetEnumerator()\n    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.GetEnumerator\n  name.vb: System.Collections.IDictionary.GetEnumerator()\n  nameWithType: DbConnectionStringBuilder.IDictionary.GetEnumerator()\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.GetEnumerator()\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Remove(Object)\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Remove\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 272\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: void IDictionary.Remove(object keyword)\n    content.vb: Sub System.Collections.IDictionary.Remove(keyword As Object) Implements IDictionary.Remove\n    parameters:\n    - id: keyword\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  name.vb: System.Collections.IDictionary.Remove(Object)\n  nameWithType: DbConnectionStringBuilder.IDictionary.Remove(Object)\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.Remove(Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 250\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns an enumerator that iterates through a collection.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that can be used to iterate through the collection.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: DbConnectionStringBuilder.IEnumerable.GetEnumerator()\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Data.Common.DbConnectionStringBuilder.ToString\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.ToString\n  id: ToString\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Data.Common.DbConnectionStringBuilder.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 294\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Returns the connection string associated with this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The current <xref href=\\\"System.Data.Common.DbConnectionStringBuilder.ConnectionString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: DbConnectionStringBuilder.ToString()\n- uid: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  commentId: M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  id: TryGetValue(System.String,System.Object@)\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: TryGetValue(String, out Object)\n  fullName: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetValue\n    path: src/System.Data.Common/src/System/Data/Common/DbConnectionStringBuilder.cs\n    startLine: 299\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  summary: \"\\n<p>Retrieves a value corresponding to the supplied key from this <xref href=\\\"System.Data.Common.DbConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool TryGetValue(string keyword, out object value)\n    content.vb: Public Overridable Function TryGetValue(keyword As String, ByRef value As Object) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the item to retrieve.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value corresponding to the <em>key</em>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>keyword</em> was found within the connection string, <strong>false</strong> otherwise.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String, ByRef System.Object)\n  name.vb: TryGetValue(String, ByRef Object)\n  nameWithType: DbConnectionStringBuilder.TryGetValue(String, out Object)\n  nameWithType.vb: DbConnectionStringBuilder.TryGetValue(String, ByRef Object)\n- uid: System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Data.Common.DbConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsFixedSize\n  fullName: System.Data.Common.DbConnectionStringBuilder.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsFixedSize\n    path: src/System.Data.Common/ref/System.Data.Common.Manual.cs\n    startLine: 24\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data.Common\n  syntax:\n    content: bool IDictionary.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsFixedSize\n  nameWithType: DbConnectionStringBuilder.IDictionary.IsFixedSize\n  nameWithType.vb: DbConnectionStringBuilder.System.Collections.IDictionary.IsFixedSize\nreferences:\n- uid: System.Data.Common\n  isExternal: false\n  name: System.Data.Common\n  fullName: System.Data.Common\n  nameWithType: System.Data.Common\n  commentId: N:System.Data.Common\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: false\n  name: StringBuilder\n  fullName: System.Text.StringBuilder\n  nameWithType: StringBuilder\n  commentId: T:System.Text.StringBuilder\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Data.Common.DbConnectionStringBuilder\n  parent: System.Data.Common\n  isExternal: false\n  name: DbConnectionStringBuilder\n  fullName: System.Data.Common.DbConnectionStringBuilder\n  nameWithType: DbConnectionStringBuilder\n  commentId: T:System.Data.Common.DbConnectionStringBuilder\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}