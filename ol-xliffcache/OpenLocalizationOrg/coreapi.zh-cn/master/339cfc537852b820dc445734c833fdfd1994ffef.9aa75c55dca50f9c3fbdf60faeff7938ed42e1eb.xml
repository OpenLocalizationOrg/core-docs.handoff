{"nodes":[{"pos":[2811,2817],"content":"CngKey","needQuote":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[4267,4276],"content":"Algorithm","needQuote":true,"nodes":[{"content":"Algorithm","pos":[0,9]}]},{"content":"\\n&lt;p&gt;An object that specifies the name of an encryption algorithm.&lt;/p&gt;\\n","pos":[5052,5124],"source":"\\n<p>An object that specifies the name of an encryption algorithm.</p>\\n"},{"pos":[5464,5478],"content":"AlgorithmGroup","needQuote":true,"nodes":[{"content":"AlgorithmGroup","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object that specifies the name of an encryption algorithm group.&lt;/p&gt;\\n","pos":[6295,6373],"source":"\\n<p>An object that specifies the name of an encryption algorithm group.</p>\\n"},{"pos":[6712,6724],"content":"ExportPolicy","needQuote":true,"nodes":[{"content":"ExportPolicy","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An object that specifies the export policy for the key.&lt;/p&gt;\\n","pos":[7531,7597],"source":"\\n<p>An object that specifies the export policy for the key.</p>\\n"},{"pos":[7916,7922],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"content":"\\n&lt;p&gt;A safe handle that represents the key.&lt;/p&gt;\\n","pos":[8732,8781],"source":"\\n<p>A safe handle that represents the key.</p>\\n"},{"pos":[9237,9248],"content":"IsEphemeral","needQuote":true,"nodes":[{"content":"IsEphemeral","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is ephemeral; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[9987,10075],"source":"\\n<p>\\n<strong>true</strong> if the key is ephemeral; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10076,10082],"source":" </p>\\n"},{"pos":[10418,10430],"content":"IsMachineKey","needQuote":true,"nodes":[{"content":"IsMachineKey","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key is available on a machine-wide basis; &lt;strong&gt;false&lt;/strong&gt; if the key is only for the current user.&lt;/p&gt;\\n","pos":[11179,11326],"source":"\\n<p>\\n<strong>true</strong> if the key is available on a machine-wide basis; <strong>false</strong> if the key is only for the current user.</p>\\n"},{"pos":[11648,11655],"content":"KeyName","needQuote":true,"nodes":[{"content":"KeyName","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The name of the key.","pos":[12365,12390],"source":"\\n<p>The name of the key."},{"content":"If the key is ephemeral, the value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12391,12457],"source":" If the key is ephemeral, the value is <strong>null</strong>.</p>\\n"},{"pos":[12774,12781],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The key size in bits.&lt;/p&gt;\\n","pos":[13489,13521],"source":"\\n<p>The key size in bits.</p>\\n"},{"pos":[13841,13849],"content":"KeyUsage","needQuote":true,"nodes":[{"content":"KeyUsage","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify the usages allowed for the key.&lt;/p&gt;\\n","pos":[14633,14736],"source":"\\n<p>A bitwise combination of the enumeration values that specify the usages allowed for the key.</p>\\n"},{"pos":[15087,15105],"content":"ParentWindowHandle","needQuote":true,"nodes":[{"content":"ParentWindowHandle","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The parent window handle for the key.&lt;/p&gt;\\n","pos":[15948,15996],"source":"\\n<p>The parent window handle for the key.</p>\\n"},{"pos":[16450,16458],"content":"Provider","needQuote":true,"nodes":[{"content":"Provider","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The KSP that manages the key.&lt;/p&gt;\\n","pos":[17241,17281],"source":"\\n<p>The KSP that manages the key.</p>\\n"},{"pos":[17620,17634],"content":"ProviderHandle","needQuote":true,"nodes":[{"content":"ProviderHandle","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A handle to the KSP.&lt;/p&gt;\\n","pos":[18501,18532],"source":"\\n<p>A handle to the KSP.</p>\\n"},{"pos":[18987,18995],"content":"UIPolicy","needQuote":true,"nodes":[{"content":"UIPolicy","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An object that contains configuration parameters for displaying the UI.&lt;/p&gt;\\n","pos":[19798,19880],"source":"\\n<p>An object that contains configuration parameters for displaying the UI.</p>\\n"},{"pos":[20207,20217],"content":"UniqueName","needQuote":true,"nodes":[{"content":"UniqueName","pos":[0,10]}]},{"content":"\\n&lt;p&gt;An alternate name for the key.","pos":[20947,20982],"source":"\\n<p>An alternate name for the key."},{"content":"If the key is ephemeral, the value is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20983,21049],"source":" If the key is ephemeral, the value is <strong>null</strong>.</p>\\n"},{"pos":[21495,21515],"content":"Create(CngAlgorithm)","needQuote":true,"nodes":[{"content":"Create(CngAlgorithm)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The algorithm that the key will be used with.&lt;/p&gt;\\n","pos":[22476,22532],"source":"\\n<p>The algorithm that the key will be used with.</p>\\n"},{"content":"\\n&lt;p&gt;An ephemeral key.&lt;/p&gt;\\n","pos":[22614,22642],"source":"\\n<p>An ephemeral key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;algorithm&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22761,22818],"source":"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[22939,23017],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[23168,23196],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[23873,23901],"content":"Create(CngAlgorithm, String)","needQuote":true,"nodes":[{"content":"Create(CngAlgorithm, String)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The algorithm that the key will be used with.&lt;/p&gt;\\n","pos":[24910,24966],"source":"\\n<p>The algorithm that the key will be used with.</p>\\n"},{"content":"\\n&lt;p&gt;The key name.","pos":[25032,25050],"source":"\\n<p>The key name."},{"content":"If a name is not provided, the key will not be persisted.&lt;/p&gt;\\n","pos":[25051,25114],"source":" If a name is not provided, the key will not be persisted.</p>\\n"},{"content":"\\n&lt;p&gt;A persisted or ephemeral key that provides the specified algorithm.&lt;/p&gt;\\n","pos":[25196,25274],"source":"\\n<p>A persisted or ephemeral key that provides the specified algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;algorithm&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25393,25450],"source":"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[25571,25649],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[25800,25828],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[26675,26729],"content":"Create(CngAlgorithm, String, CngKeyCreationParameters)","needQuote":true,"nodes":[{"content":"Create(CngAlgorithm, String, CngKeyCreationParameters)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The algorithm that the key will be used with.&lt;/p&gt;\\n","pos":[27930,27986],"source":"\\n<p>The algorithm that the key will be used with.</p>\\n"},{"content":"\\n&lt;p&gt;The key name.","pos":[28052,28070],"source":"\\n<p>The key name."},{"content":"If a name is not provided, the key will not be persisted.&lt;/p&gt;\\n","pos":[28071,28134],"source":" If a name is not provided, the key will not be persisted.</p>\\n"},{"content":"\\n&lt;p&gt;A persisted or ephemeral key that provides the specified algorithm.&lt;/p&gt;\\n","pos":[28520,28598],"source":"\\n<p>A persisted or ephemeral key that provides the specified algorithm.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;algorithm&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28717,28774],"source":"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[28895,28973],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[29124,29152],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[29692,29700],"content":"Delete()","needQuote":true,"nodes":[{"content":"Delete()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An attempt was made to access a deleted key.&lt;/p&gt;\\n","pos":[30443,30498],"source":"\\n<p>An attempt was made to access a deleted key.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[30649,30677],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[31110,31119],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[32238,32252],"content":"Exists(String)","needQuote":true,"nodes":[{"content":"Exists(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key name.&lt;/p&gt;\\n","pos":[33062,33086],"source":"\\n<p>The key name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named key exists in the default KSP; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33147,33260],"source":"\\n<p>\\n<strong>true</strong> if the named key exists in the default KSP; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33379,33434],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[33555,33633],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[33784,33812],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[34302,34329],"content":"Exists(String, CngProvider)","needQuote":true,"nodes":[{"content":"Exists(String, CngProvider)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The key name.&lt;/p&gt;\\n","pos":[35230,35254],"source":"\\n<p>The key name.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP to check for the key.&lt;/p&gt;\\n","pos":[35348,35388],"source":"\\n<p>The KSP to check for the key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named key exists in the specified provider; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35449,35569],"source":"\\n<p>\\n<strong>true</strong> if the named key exists in the specified provider; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; or &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35688,35764],"source":"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[35885,35963],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[36114,36142],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[36786,36832],"content":"Exists(String, CngProvider, CngKeyOpenOptions)","needQuote":true,"nodes":[{"content":"Exists(String, CngProvider, CngKeyOpenOptions)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The key name.&lt;/p&gt;\\n","pos":[37874,37898],"source":"\\n<p>The key name.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP to search for the key.&lt;/p&gt;\\n","pos":[37992,38033],"source":"\\n<p>The KSP to search for the key.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for opening a key.&lt;/p&gt;\\n","pos":[38132,38230],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for opening a key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named key exists in the specified provider; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38291,38411],"source":"\\n<p>\\n<strong>true</strong> if the named key exists in the specified provider; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; or &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38530,38606],"source":"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[38727,38805],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[38956,38984],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[39479,39503],"content":"Export(CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Export(CngKeyBlobFormat)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An object that specifies the format of the key BLOB.&lt;/p&gt;\\n","pos":[40360,40423],"source":"\\n<p>An object that specifies the format of the key BLOB.</p>\\n"},{"content":"\\n&lt;p&gt;A BLOB that contains the key material in the specified format.&lt;/p&gt;\\n","pos":[40483,40556],"source":"\\n<p>A BLOB that contains the key material in the specified format.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40675,40729],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n"},{"pos":[41722,41761],"content":"GetProperty(String, CngPropertyOptions)","needQuote":true,"nodes":[{"content":"GetProperty(String, CngPropertyOptions)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The name of the desired property.&lt;/p&gt;\\n","pos":[42664,42708],"source":"\\n<p>The name of the desired property.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for the named property.&lt;/p&gt;\\n","pos":[42808,42911],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for the named property.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the raw value of the specified property.&lt;/p&gt;\\n","pos":[42998,43073],"source":"\\n<p>An object that contains the raw value of the specified property.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[43192,43244],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[43395,43423],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[44080,44119],"content":"HasProperty(String, CngPropertyOptions)","needQuote":true,"nodes":[{"content":"HasProperty(String, CngPropertyOptions)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The property name to check.&lt;/p&gt;\\n","pos":[45014,45052],"source":"\\n<p>The property name to check.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for the named property.&lt;/p&gt;\\n","pos":[45152,45255],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for the named property.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified property is found; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45316,45421],"source":"\\n<p>\\n<strong>true</strong> if the specified property is found; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45540,45592],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[46228,46260],"content":"Import(Byte[], CngKeyBlobFormat)","needQuote":true,"nodes":[{"content":"Import(Byte[], CngKeyBlobFormat)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An array that contains the key information.&lt;/p&gt;\\n","pos":[47221,47275],"source":"\\n<p>An array that contains the key information.</p>\\n"},{"content":"\\n&lt;p&gt;An object that specifies the format of the &lt;em&gt;keyBlob&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[47372,47449],"source":"\\n<p>An object that specifies the format of the <em>keyBlob</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;A new key.&lt;/p&gt;\\n","pos":[47531,47552],"source":"\\n<p>A new key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyBlob&lt;/em&gt; or &lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47671,47745],"source":"\\n<p>\\n<em>keyBlob</em> or <em>format</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[47866,47944],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[48095,48123],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[48992,49037],"content":"Import(Byte[], CngKeyBlobFormat, CngProvider)","needQuote":true,"nodes":[{"content":"Import(Byte[], CngKeyBlobFormat, CngProvider)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;An array that contains the key information.&lt;/p&gt;\\n","pos":[50086,50140],"source":"\\n<p>An array that contains the key information.</p>\\n"},{"content":"\\n&lt;p&gt;An object that specifies the format of the &lt;em&gt;keyBlob&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[50237,50314],"source":"\\n<p>An object that specifies the format of the <em>keyBlob</em> array.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP.&lt;/p&gt;\\n","pos":[50408,50427],"source":"\\n<p>The KSP.</p>\\n"},{"content":"\\n&lt;p&gt;A new key.&lt;/p&gt;\\n","pos":[50509,50530],"source":"\\n<p>A new key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyBlob&lt;/em&gt;, &lt;em&gt;format&lt;/em&gt;, or &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50649,50743],"source":"\\n<p>\\n<em>keyBlob</em>, <em>format</em>, or <em>provider</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[50864,50942],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[51093,51121],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[52201,52251],"content":"Open(SafeNCryptKeyHandle, CngKeyHandleOpenOptions)","needQuote":true,"nodes":[{"content":"Open(SafeNCryptKeyHandle, CngKeyHandleOpenOptions)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;A handle to an existing key.&lt;/p&gt;\\n","pos":[53386,53425],"source":"\\n<p>A handle to an existing key.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that indicates whether &lt;em&gt;keyHandle&lt;/em&gt; represents an ephemeral key or a named key.&lt;/p&gt;\\n","pos":[53543,53669],"source":"\\n<p>One of the enumeration values that indicates whether <em>keyHandle</em> represents an ephemeral key or a named key.</p>\\n"},{"content":"\\n&lt;p&gt;An existing key.&lt;/p&gt;\\n","pos":[53751,53778],"source":"\\n<p>An existing key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyHandle&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53897,53954],"source":"\\n<p>\\n<em>keyHandle</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[54526,54604],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[54755,54783],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[55308,55320],"content":"Open(String)","needQuote":true,"nodes":[{"content":"Open(String)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[56207,56238],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;An existing key.&lt;/p&gt;\\n","pos":[56320,56347],"source":"\\n<p>An existing key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56466,56521],"source":"\\n<p>\\n<em>keyName</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[56642,56720],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[56871,56899],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[57559,57584],"content":"Open(String, CngProvider)","needQuote":true,"nodes":[{"content":"Open(String, CngProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[58608,58639],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[58733,58774],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;An existing key.&lt;/p&gt;\\n","pos":[58856,58883],"source":"\\n<p>An existing key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; or &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[59002,59078],"source":"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[59199,59277],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[59428,59456],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[60270,60314],"content":"Open(String, CngProvider, CngKeyOpenOptions)","needQuote":true,"nodes":[{"content":"Open(String, CngProvider, CngKeyOpenOptions)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The name of the key.&lt;/p&gt;\\n","pos":[61472,61503],"source":"\\n<p>The name of the key.</p>\\n"},{"content":"\\n&lt;p&gt;The KSP that contains the key.&lt;/p&gt;\\n","pos":[61597,61638],"source":"\\n<p>The KSP that contains the key.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.&lt;/p&gt;\\n","pos":[61741,61942],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n"},{"content":"\\n&lt;p&gt;An existing key.&lt;/p&gt;\\n","pos":[62024,62051],"source":"\\n<p>An existing key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyName&lt;/em&gt; or &lt;em&gt;provider&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62170,62246],"source":"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;Cryptography Next Generation (CNG) is not supported on this system.&lt;/p&gt;\\n","pos":[62367,62445],"source":"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n"},{"content":"\\n&lt;p&gt;All other errors.&lt;/p&gt;\\n","pos":[62596,62624],"source":"\\n<p>All other errors.</p>\\n"},{"pos":[63295,63319],"content":"SetProperty(CngProperty)","needQuote":true,"nodes":[{"content":"SetProperty(CngProperty)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key property to set.&lt;/p&gt;\\n","pos":[64136,64171],"source":"\\n<p>The key property to set.</p>\\n"},{"pos":[64483,64511],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[64708,64714],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64864,64875],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[65050,65060],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[65155,65163],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65232,65233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65260,65261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65331,65339],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65408,65409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65436,65437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65620,65634],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[65753,65759],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65826,65827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65877,65883],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65943,65944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66027,66033],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66100,66101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66151,66157],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66217,66218],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66432,66454],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[66602,66608],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66675,66676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66726,66732],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[66793,66794]},{"pos":[66849,66855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66915,66916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67013,67019],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67086,67087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67137,67143],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67204,67205]},{"pos":[67260,67266],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67326,67327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67572,67603],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[67769,67784],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[67860,67861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67911,67917],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67978,67979]},{"pos":[68034,68040],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68100,68101],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68207,68222],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[68298,68299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68349,68355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68416,68417]},{"pos":[68472,68478],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68538,68539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68769,68782],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[68883,68894],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68966,68967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68994,68995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69068,69079],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[69151,69152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69179,69180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69355,69364],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[69457,69464],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[69532,69533],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69560,69561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69630,69637],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[69705,69706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69733,69734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69909,69926],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[70035,70050],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70126,70127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70154,70155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70232,70247],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70323,70324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70351,70352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70497,70503],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[70684,70696],"content":"CngAlgorithm","needQuote":true,"nodes":[{"content":"CngAlgorithm","pos":[0,12]}]},{"pos":[70958,70975],"content":"CngAlgorithmGroup","needQuote":true,"nodes":[{"content":"CngAlgorithmGroup","pos":[0,17]}]},{"pos":[71252,71269],"content":"CngExportPolicies","needQuote":true,"nodes":[{"content":"CngExportPolicies","pos":[0,17]}]},{"pos":[71546,71565],"content":"SafeNCryptKeyHandle","needQuote":true,"nodes":[{"content":"SafeNCryptKeyHandle","pos":[0,19]}]},{"pos":[71788,71815],"content":"Microsoft.Win32.SafeHandles","needQuote":true,"nodes":[{"content":"Microsoft.Win32.SafeHandles","pos":[0,27]}]},{"pos":[72010,72017],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[72165,72171],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[72315,72320],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72512,72524],"content":"CngKeyUsages","needQuote":true,"nodes":[{"content":"CngKeyUsages","pos":[0,12]}]},{"pos":[72731,72737],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[72931,72942],"content":"CngProvider","needQuote":true,"nodes":[{"content":"CngProvider","pos":[0,11]}]},{"pos":[73206,73230],"content":"SafeNCryptProviderHandle","needQuote":true,"nodes":[{"content":"SafeNCryptProviderHandle","pos":[0,24]}]},{"pos":[73520,73531],"content":"CngUIPolicy","needQuote":true,"nodes":[{"content":"CngUIPolicy","pos":[0,11]}]},{"pos":[73779,73785],"content":"CngKey","needQuote":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[74036,74060],"content":"CngKeyCreationParameters","needQuote":true,"nodes":[{"content":"CngKeyCreationParameters","pos":[0,24]}]},{"pos":[74328,74337],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[74440,74447],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[74499,74500],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74527,74528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74602,74609],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[74661,74662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74689,74690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74908,74925],"content":"CngKeyOpenOptions","needQuote":true,"nodes":[{"content":"CngKeyOpenOptions","pos":[0,17]}]},{"pos":[75201,75217],"content":"CngKeyBlobFormat","needQuote":true,"nodes":[{"content":"CngKeyBlobFormat","pos":[0,16]}]},{"pos":[75399,75405],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[75525,75529],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[75588,75590]},{"pos":[75653,75657],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[75715,75717],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[75906,75924],"content":"CngPropertyOptions","needQuote":true,"nodes":[{"content":"CngPropertyOptions","pos":[0,18]}]},{"pos":[76198,76209],"content":"CngProperty","needQuote":true,"nodes":[{"content":"CngProperty","pos":[0,11]}]},{"pos":[76474,76497],"content":"CngKeyHandleOpenOptions","needQuote":true,"nodes":[{"content":"CngKeyHandleOpenOptions","pos":[0,23]}]},{"pos":[76735,76756],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[76952,76981],"content":"PlatformNotSupportedException","needQuote":true,"nodes":[{"content":"PlatformNotSupportedException","pos":[0,29]}]},{"pos":[77216,77238],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[77475,77498],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[77705,77722],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.CngKey\n  commentId: T:System.Security.Cryptography.CngKey\n  id: CngKey\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.CngKey.Algorithm\n  - System.Security.Cryptography.CngKey.AlgorithmGroup\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  - System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  - System.Security.Cryptography.CngKey.Delete\n  - System.Security.Cryptography.CngKey.Dispose\n  - System.Security.Cryptography.CngKey.Exists(System.String)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.ExportPolicy\n  - System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Handle\n  - System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  - System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.IsEphemeral\n  - System.Security.Cryptography.CngKey.IsMachineKey\n  - System.Security.Cryptography.CngKey.KeyName\n  - System.Security.Cryptography.CngKey.KeySize\n  - System.Security.Cryptography.CngKey.KeyUsage\n  - System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  - System.Security.Cryptography.CngKey.Open(System.String)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  - System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  - System.Security.Cryptography.CngKey.ParentWindowHandle\n  - System.Security.Cryptography.CngKey.Provider\n  - System.Security.Cryptography.CngKey.ProviderHandle\n  - System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  - System.Security.Cryptography.CngKey.UIPolicy\n  - System.Security.Cryptography.CngKey.UniqueName\n  langs:\n  - csharp\n  - vb\n  name: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CngKey\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 101\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Defines the core functionality for keys that are used with Cryptography Next Generation (CNG) objects.</p>\\n\"\n  syntax:\n    content: 'public sealed class CngKey : IDisposable'\n    content.vb: >-\n      Public NotInheritable Class CngKey\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: CngKey\n- uid: System.Security.Cryptography.CngKey.Algorithm\n  commentId: P:System.Security.Cryptography.CngKey.Algorithm\n  id: Algorithm\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Algorithm\n  fullName: System.Security.Cryptography.CngKey.Algorithm\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Algorithm\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 104\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the algorithm that is used by the key.</p>\\n\"\n  syntax:\n    content: public CngAlgorithm Algorithm { get; }\n    content.vb: Public ReadOnly Property Algorithm As CngAlgorithm\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>An object that specifies the name of an encryption algorithm.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.Algorithm\n- uid: System.Security.Cryptography.CngKey.AlgorithmGroup\n  commentId: P:System.Security.Cryptography.CngKey.AlgorithmGroup\n  id: AlgorithmGroup\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: AlgorithmGroup\n  fullName: System.Security.Cryptography.CngKey.AlgorithmGroup\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AlgorithmGroup\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 105\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the algorithm group that is used by the key.</p>\\n\"\n  syntax:\n    content: public CngAlgorithmGroup AlgorithmGroup { get; }\n    content.vb: Public ReadOnly Property AlgorithmGroup As CngAlgorithmGroup\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngAlgorithmGroup\n      description: \"\\n<p>An object that specifies the name of an encryption algorithm group.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.AlgorithmGroup\n- uid: System.Security.Cryptography.CngKey.ExportPolicy\n  commentId: P:System.Security.Cryptography.CngKey.ExportPolicy\n  id: ExportPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: ExportPolicy\n  fullName: System.Security.Cryptography.CngKey.ExportPolicy\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportPolicy\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 106\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the export policy that is used by the key.</p>\\n\"\n  syntax:\n    content: public CngExportPolicies ExportPolicy { get; }\n    content.vb: Public ReadOnly Property ExportPolicy As CngExportPolicies\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngExportPolicies\n      description: \"\\n<p>An object that specifies the export policy for the key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.ExportPolicy\n- uid: System.Security.Cryptography.CngKey.Handle\n  commentId: P:System.Security.Cryptography.CngKey.Handle\n  id: Handle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Handle\n  fullName: System.Security.Cryptography.CngKey.Handle\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Handle\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 107\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a safe handle that represents a native key (NCRYPT_KEY_HANDLE). </p>\\n\"\n  syntax:\n    content: public SafeNCryptKeyHandle Handle { get; }\n    content.vb: Public ReadOnly Property Handle As SafeNCryptKeyHandle\n    parameters: []\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: \"\\n<p>A safe handle that represents the key.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.Handle\n- uid: System.Security.Cryptography.CngKey.IsEphemeral\n  commentId: P:System.Security.Cryptography.CngKey.IsEphemeral\n  id: IsEphemeral\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: IsEphemeral\n  fullName: System.Security.Cryptography.CngKey.IsEphemeral\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEphemeral\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 108\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the persistence state of the key.</p>\\n\"\n  syntax:\n    content: public bool IsEphemeral { get; }\n    content.vb: Public ReadOnly Property IsEphemeral As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is ephemeral; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.IsEphemeral\n- uid: System.Security.Cryptography.CngKey.IsMachineKey\n  commentId: P:System.Security.Cryptography.CngKey.IsMachineKey\n  id: IsMachineKey\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: IsMachineKey\n  fullName: System.Security.Cryptography.CngKey.IsMachineKey\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMachineKey\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 109\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the scope (machine or user) of the key.</p>\\n\"\n  syntax:\n    content: public bool IsMachineKey { get; }\n    content.vb: Public ReadOnly Property IsMachineKey As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key is available on a machine-wide basis; <strong>false</strong> if the key is only for the current user.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.IsMachineKey\n- uid: System.Security.Cryptography.CngKey.KeyName\n  commentId: P:System.Security.Cryptography.CngKey.KeyName\n  id: KeyName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: KeyName\n  fullName: System.Security.Cryptography.CngKey.KeyName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyName\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 110\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the name of the key.</p>\\n\"\n  syntax:\n    content: public string KeyName { get; }\n    content.vb: Public ReadOnly Property KeyName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the key. If the key is ephemeral, the value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.KeyName\n- uid: System.Security.Cryptography.CngKey.KeySize\n  commentId: P:System.Security.Cryptography.CngKey.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  fullName: System.Security.Cryptography.CngKey.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 111\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the key size in bits.</p>\\n\"\n  syntax:\n    content: public int KeySize { get; }\n    content.vb: Public ReadOnly Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The key size in bits.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.KeySize\n- uid: System.Security.Cryptography.CngKey.KeyUsage\n  commentId: P:System.Security.Cryptography.CngKey.KeyUsage\n  id: KeyUsage\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: KeyUsage\n  fullName: System.Security.Cryptography.CngKey.KeyUsage\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyUsage\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 112\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the cryptographic operations specified by the key.</p>\\n\"\n  syntax:\n    content: public CngKeyUsages KeyUsage { get; }\n    content.vb: Public ReadOnly Property KeyUsage As CngKeyUsages\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKeyUsages\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify the usages allowed for the key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.KeyUsage\n- uid: System.Security.Cryptography.CngKey.ParentWindowHandle\n  commentId: P:System.Security.Cryptography.CngKey.ParentWindowHandle\n  id: ParentWindowHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: ParentWindowHandle\n  fullName: System.Security.Cryptography.CngKey.ParentWindowHandle\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ParentWindowHandle\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 113\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the window handle (HWND) that should be used for user interface (UI) prompts caused by accessing the key.</p>\\n\"\n  syntax:\n    content: public IntPtr ParentWindowHandle { get; set; }\n    content.vb: Public Property ParentWindowHandle As IntPtr\n    parameters: []\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>The parent window handle for the key.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.ParentWindowHandle\n- uid: System.Security.Cryptography.CngKey.Provider\n  commentId: P:System.Security.Cryptography.CngKey.Provider\n  id: Provider\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Provider\n  fullName: System.Security.Cryptography.CngKey.Provider\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Provider\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 114\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the key storage provider (KSP) that manages the key.</p>\\n\"\n  syntax:\n    content: public CngProvider Provider { get; }\n    content.vb: Public ReadOnly Property Provider As CngProvider\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that manages the key.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.Provider\n- uid: System.Security.Cryptography.CngKey.ProviderHandle\n  commentId: P:System.Security.Cryptography.CngKey.ProviderHandle\n  id: ProviderHandle\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: ProviderHandle\n  fullName: System.Security.Cryptography.CngKey.ProviderHandle\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ProviderHandle\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 115\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a native handle (an NCRYPT_PROV_HANDLE) to the key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public SafeNCryptProviderHandle ProviderHandle { get; }\n    content.vb: Public ReadOnly Property ProviderHandle As SafeNCryptProviderHandle\n    parameters: []\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n      description: \"\\n<p>A handle to the KSP.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.ProviderHandle\n- uid: System.Security.Cryptography.CngKey.UIPolicy\n  commentId: P:System.Security.Cryptography.CngKey.UIPolicy\n  id: UIPolicy\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: UIPolicy\n  fullName: System.Security.Cryptography.CngKey.UIPolicy\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UIPolicy\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 116\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets parameters that control the user interface (UI) for accessing the key.  </p>\\n\"\n  syntax:\n    content: public CngUIPolicy UIPolicy { get; }\n    content.vb: Public ReadOnly Property UIPolicy As CngUIPolicy\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngUIPolicy\n      description: \"\\n<p>An object that contains configuration parameters for displaying the UI.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.UIPolicy\n- uid: System.Security.Cryptography.CngKey.UniqueName\n  commentId: P:System.Security.Cryptography.CngKey.UniqueName\n  id: UniqueName\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: UniqueName\n  fullName: System.Security.Cryptography.CngKey.UniqueName\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UniqueName\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 117\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the unique name for the key.</p>\\n\"\n  syntax:\n    content: public string UniqueName { get; }\n    content.vb: Public ReadOnly Property UniqueName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>An alternate name for the key. If the key is ephemeral, the value is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CngKey.UniqueName\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  commentId: M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  id: Create(System.Security.Cryptography.CngAlgorithm)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Create(CngAlgorithm)\n  fullName: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 118\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that can be used with the specified algorithm.</p>\\n\"\n  syntax:\n    content: public static CngKey Create(CngAlgorithm algorithm)\n    content.vb: Public Shared Function Create(algorithm As CngAlgorithm) As CngKey\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>The algorithm that the key will be used with.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An ephemeral key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Create(CngAlgorithm)\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  commentId: M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Create(CngAlgorithm, String)\n  fullName: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 119\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a named <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that provides the specified algorithm.</p>\\n\"\n  syntax:\n    content: public static CngKey Create(CngAlgorithm algorithm, string keyName)\n    content.vb: Public Shared Function Create(algorithm As CngAlgorithm, keyName As String) As CngKey\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>The algorithm that the key will be used with.</p>\\n\"\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The key name. If a name is not provided, the key will not be persisted.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>A persisted or ephemeral key that provides the specified algorithm.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Create(CngAlgorithm, String)\n- uid: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  commentId: M:System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  id: Create(System.Security.Cryptography.CngAlgorithm,System.String,System.Security.Cryptography.CngKeyCreationParameters)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Create(CngAlgorithm, String, CngKeyCreationParameters)\n  fullName: System.Security.Cryptography.CngKey.Create(System.Security.Cryptography.CngAlgorithm, System.String, System.Security.Cryptography.CngKeyCreationParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 120\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a named <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that provides the specified algorithm, using the supplied key creation parameters.</p>\\n\"\n  syntax:\n    content: public static CngKey Create(CngAlgorithm algorithm, string keyName, CngKeyCreationParameters creationParameters)\n    content.vb: Public Shared Function Create(algorithm As CngAlgorithm, keyName As String, creationParameters As CngKeyCreationParameters) As CngKey\n    parameters:\n    - id: algorithm\n      type: System.Security.Cryptography.CngAlgorithm\n      description: \"\\n<p>The algorithm that the key will be used with.</p>\\n\"\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The key name. If a name is not provided, the key will not be persisted.</p>\\n\"\n    - id: creationParameters\n      type: System.Security.Cryptography.CngKeyCreationParameters\n      description: \"\\n<p>An object that specifies advanced parameters for the method, including the <xref href=\\\"System.Security.Cryptography.CngProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>A persisted or ephemeral key that provides the specified algorithm.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>algorithm</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Create(CngAlgorithm, String, CngKeyCreationParameters)\n- uid: System.Security.Cryptography.CngKey.Delete\n  commentId: M:System.Security.Cryptography.CngKey.Delete\n  id: Delete\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Delete()\n  fullName: System.Security.Cryptography.CngKey.Delete()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Delete\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 121\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Removes the key that is associated with the object.</p>\\n\"\n  syntax:\n    content: public void Delete()\n    content.vb: Public Sub Delete\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An attempt was made to access a deleted key.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.Delete()\n- uid: System.Security.Cryptography.CngKey.Dispose\n  commentId: M:System.Security.Cryptography.CngKey.Dispose\n  id: Dispose\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Security.Cryptography.CngKey.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 122\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.Dispose()\n- uid: System.Security.Cryptography.CngKey.Exists(System.String)\n  commentId: M:System.Security.Cryptography.CngKey.Exists(System.String)\n  id: Exists(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Exists(String)\n  fullName: System.Security.Cryptography.CngKey.Exists(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exists\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 123\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Checks to see whether a named key exists in the default key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public static bool Exists(string keyName)\n    content.vb: Public Shared Function Exists(keyName As String) As Boolean\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The key name.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named key exists in the default KSP; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Exists(String)\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Exists(String, CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Exists(System.String, System.Security.Cryptography.CngProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exists\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 124\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Checks to see whether a named key exists in the specified key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public static bool Exists(string keyName, CngProvider provider)\n    content.vb: Public Shared Function Exists(keyName As String, provider As CngProvider) As Boolean\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The key name.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP to check for the key.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named key exists in the specified provider; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Exists(String, CngProvider)\n- uid: System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  commentId: M:System.Security.Cryptography.CngKey.Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Exists(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Exists(String, CngProvider, CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Exists(System.String, System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngKeyOpenOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exists\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 125\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Checks to see whether a named key exists in the specified key storage provider (KSP), according to the specified options.</p>\\n\"\n  syntax:\n    content: public static bool Exists(string keyName, CngProvider provider, CngKeyOpenOptions options)\n    content.vb: Public Shared Function Exists(keyName As String, provider As CngProvider, options As CngKeyOpenOptions) As Boolean\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The key name.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP to search for the key.</p>\\n\"\n    - id: options\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for opening a key.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named key exists in the specified provider; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Exists(String, CngProvider, CngKeyOpenOptions)\n- uid: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  commentId: M:System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  id: Export(System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Export(CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Export(System.Security.Cryptography.CngKeyBlobFormat)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Export\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 126\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Exports the key material into a BLOB, in the specified format.</p>\\n\"\n  syntax:\n    content: public byte[] Export(CngKeyBlobFormat format)\n    content.vb: Public Function Export(format As CngKeyBlobFormat) As Byte()\n    parameters:\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies the format of the key BLOB.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A BLOB that contains the key material in the specified format.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors. Typically, the <xref href=\\\"System.Security.Cryptography.CngKey.ExportPolicy\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> does not allow the key to be exported. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.Export(CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  commentId: M:System.Security.Cryptography.CngKey.GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: GetProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: GetProperty(String, CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.GetProperty(System.String, System.Security.Cryptography.CngPropertyOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProperty\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 127\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a property, given a name and a set of property options.</p>\\n\"\n  syntax:\n    content: public CngProperty GetProperty(string name, CngPropertyOptions options)\n    content.vb: Public Function GetProperty(name As String, options As CngPropertyOptions) As CngProperty\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the desired property.</p>\\n\"\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for the named property.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>An object that contains the raw value of the specified property.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.GetProperty(String, CngPropertyOptions)\n- uid: System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  commentId: M:System.Security.Cryptography.CngKey.HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  id: HasProperty(System.String,System.Security.Cryptography.CngPropertyOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: HasProperty(String, CngPropertyOptions)\n  fullName: System.Security.Cryptography.CngKey.HasProperty(System.String, System.Security.Cryptography.CngPropertyOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasProperty\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 128\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Checks to see whether the specified property exists on the key.</p>\\n\"\n  syntax:\n    content: public bool HasProperty(string name, CngPropertyOptions options)\n    content.vb: Public Function HasProperty(name As String, options As CngPropertyOptions) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The property name to check.</p>\\n\"\n    - id: options\n      type: System.Security.Cryptography.CngPropertyOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for the named property.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified property is found; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.HasProperty(String, CngPropertyOptions)\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  commentId: M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Import(Byte[], CngKeyBlobFormat)\n  fullName: System.Security.Cryptography.CngKey.Import(System.Byte[], System.Security.Cryptography.CngKeyBlobFormat)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Import\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 129\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a new key by importing the specified key material into the default key storage provider (KSP) and using the specified format.</p>\\n\"\n  syntax:\n    content: public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format)\n    content.vb: Public Shared Function Import(keyBlob As Byte(), format As CngKeyBlobFormat) As CngKey\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: \"\\n<p>An array that contains the key information.</p>\\n\"\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies the format of the <em>keyBlob</em> array.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>A new key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyBlob</em> or <em>format</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.CngKey.Import(System.Byte(), System.Security.Cryptography.CngKeyBlobFormat)\n  name.vb: Import(Byte(), CngKeyBlobFormat)\n  nameWithType: CngKey.Import(Byte[], CngKeyBlobFormat)\n  nameWithType.vb: CngKey.Import(Byte(), CngKeyBlobFormat)\n- uid: System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngKey.Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  id: Import(System.Byte[],System.Security.Cryptography.CngKeyBlobFormat,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Import(Byte[], CngKeyBlobFormat, CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Import(System.Byte[], System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Import\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 130\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates a new key by importing the specified key material into the specified key storage provider (KSP), using the specified format.</p>\\n\"\n  syntax:\n    content: public static CngKey Import(byte[] keyBlob, CngKeyBlobFormat format, CngProvider provider)\n    content.vb: Public Shared Function Import(keyBlob As Byte(), format As CngKeyBlobFormat, provider As CngProvider) As CngKey\n    parameters:\n    - id: keyBlob\n      type: System.Byte[]\n      description: \"\\n<p>An array that contains the key information.</p>\\n\"\n    - id: format\n      type: System.Security.Cryptography.CngKeyBlobFormat\n      description: \"\\n<p>An object that specifies the format of the <em>keyBlob</em> array.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>A new key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyBlob</em>, <em>format</em>, or <em>provider</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermission\n    commentId: T:System.Security.Permissions.KeyContainerPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Cryptography.CngKey.Import(System.Byte(), System.Security.Cryptography.CngKeyBlobFormat, System.Security.Cryptography.CngProvider)\n  name.vb: Import(Byte(), CngKeyBlobFormat, CngProvider)\n  nameWithType: CngKey.Import(Byte[], CngKeyBlobFormat, CngProvider)\n  nameWithType.vb: CngKey.Import(Byte(), CngKeyBlobFormat, CngProvider)\n- uid: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  commentId: M:System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  id: Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle,System.Security.Cryptography.CngKeyHandleOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Open(SafeNCryptKeyHandle, CngKeyHandleOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle, System.Security.Cryptography.CngKeyHandleOpenOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 131\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of an <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object by using a handle to an existing key.</p>\\n\"\n  syntax:\n    content: public static CngKey Open(SafeNCryptKeyHandle keyHandle, CngKeyHandleOpenOptions keyHandleOpenOptions)\n    content.vb: Public Shared Function Open(keyHandle As SafeNCryptKeyHandle, keyHandleOpenOptions As CngKeyHandleOpenOptions) As CngKey\n    parameters:\n    - id: keyHandle\n      type: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n      description: \"\\n<p>A handle to an existing key.</p>\\n\"\n    - id: keyHandleOpenOptions\n      type: System.Security.Cryptography.CngKeyHandleOpenOptions\n      description: \"\\n<p>One of the enumeration values that indicates whether <em>keyHandle</em> represents an ephemeral key or a named key.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An existing key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyHandle</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>keyHandle</em> is invalid or malformed, or it is already closed. This exception is also thrown if the key is an ephemeral key that is created by the common language runtime (CLR), but the <xref href=\\\"System.Security.Cryptography.CngKeyHandleOpenOptions.EphemeralKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value is not specified.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Open(SafeNCryptKeyHandle, CngKeyHandleOpenOptions)\n- uid: System.Security.Cryptography.CngKey.Open(System.String)\n  commentId: M:System.Security.Cryptography.CngKey.Open(System.String)\n  id: Open(System.String)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Open(String)\n  fullName: System.Security.Cryptography.CngKey.Open(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 132\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of an <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents an existing named key.</p>\\n\"\n  syntax:\n    content: public static CngKey Open(string keyName)\n    content.vb: Public Shared Function Open(keyName As String) As CngKey\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An existing key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Open(String)\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider)\n  id: Open(System.String,System.Security.Cryptography.CngProvider)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Open(String, CngProvider)\n  fullName: System.Security.Cryptography.CngKey.Open(System.String, System.Security.Cryptography.CngProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 133\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of an <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents an existing named key, using the specified key storage provider (KSP).</p>\\n\"\n  syntax:\n    content: public static CngKey Open(string keyName, CngProvider provider)\n    content.vb: Public Shared Function Open(keyName As String, provider As CngProvider) As CngKey\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An existing key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Open(String, CngProvider)\n- uid: System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  commentId: M:System.Security.Cryptography.CngKey.Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  id: Open(System.String,System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngKeyOpenOptions)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: Open(String, CngProvider, CngKeyOpenOptions)\n  fullName: System.Security.Cryptography.CngKey.Open(System.String, System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngKeyOpenOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Open\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 134\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of an <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents an existing named key, using the specified key storage provider (KSP) and key open options.</p>\\n\"\n  syntax:\n    content: public static CngKey Open(string keyName, CngProvider provider, CngKeyOpenOptions openOptions)\n    content.vb: Public Shared Function Open(keyName As String, provider As CngProvider, openOptions As CngKeyOpenOptions) As CngKey\n    parameters:\n    - id: keyName\n      type: System.String\n      description: \"\\n<p>The name of the key.</p>\\n\"\n    - id: provider\n      type: System.Security.Cryptography.CngProvider\n      description: \"\\n<p>The KSP that contains the key.</p>\\n\"\n    - id: openOptions\n      type: System.Security.Cryptography.CngKeyOpenOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for opening the key, such as where the key is opened from (machine or user storage) and whether to suppress UI prompting.</p>\\n\"\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>An existing key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyName</em> or <em>provider</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.PlatformNotSupportedException\n    commentId: T:System.PlatformNotSupportedException\n    description: \"\\n<p>Cryptography Next Generation (CNG) is not supported on this system.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>All other errors.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n    commentId: T:System.Security.Permissions.KeyContainerPermissionAccessEntryCollection\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CngKey.Open(String, CngProvider, CngKeyOpenOptions)\n- uid: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  commentId: M:System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  id: SetProperty(System.Security.Cryptography.CngProperty)\n  parent: System.Security.Cryptography.CngKey\n  langs:\n  - csharp\n  - vb\n  name: SetProperty(CngProperty)\n  fullName: System.Security.Cryptography.CngKey.SetProperty(System.Security.Cryptography.CngProperty)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetProperty\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 135\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Sets a named property on the key.</p>\\n\"\n  syntax:\n    content: public void SetProperty(CngProperty property)\n    content.vb: Public Sub SetProperty(property As CngProperty)\n    parameters:\n    - id: property\n      type: System.Security.Cryptography.CngProperty\n      description: \"\\n<p>The key property to set.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CngKey.SetProperty(CngProperty)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.CngAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithm\n  fullName: System.Security.Cryptography.CngAlgorithm\n  commentId: T:System.Security.Cryptography.CngAlgorithm\n  nameWithType: CngAlgorithm\n- uid: System.Security.Cryptography.CngAlgorithmGroup\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngAlgorithmGroup\n  fullName: System.Security.Cryptography.CngAlgorithmGroup\n  commentId: T:System.Security.Cryptography.CngAlgorithmGroup\n  nameWithType: CngAlgorithmGroup\n- uid: System.Security.Cryptography.CngExportPolicies\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngExportPolicies\n  fullName: System.Security.Cryptography.CngExportPolicies\n  commentId: T:System.Security.Cryptography.CngExportPolicies\n  nameWithType: CngExportPolicies\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptKeyHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle\n  nameWithType: SafeNCryptKeyHandle\n- uid: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles\n  fullName: Microsoft.Win32.SafeHandles\n  commentId: N:Microsoft.Win32.SafeHandles\n  nameWithType: Microsoft.Win32.SafeHandles\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.CngKeyUsages\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyUsages\n  fullName: System.Security.Cryptography.CngKeyUsages\n  commentId: T:System.Security.Cryptography.CngKeyUsages\n  nameWithType: CngKeyUsages\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n  nameWithType: IntPtr\n- uid: System.Security.Cryptography.CngProvider\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProvider\n  fullName: System.Security.Cryptography.CngProvider\n  commentId: T:System.Security.Cryptography.CngProvider\n  nameWithType: CngProvider\n- uid: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeNCryptProviderHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle\n  nameWithType: SafeNCryptProviderHandle\n- uid: System.Security.Cryptography.CngUIPolicy\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngUIPolicy\n  fullName: System.Security.Cryptography.CngUIPolicy\n  commentId: T:System.Security.Cryptography.CngUIPolicy\n  nameWithType: CngUIPolicy\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  commentId: T:System.Security.Cryptography.CngKey\n  nameWithType: CngKey\n- uid: System.Security.Cryptography.CngKeyCreationParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyCreationParameters\n  fullName: System.Security.Cryptography.CngKeyCreationParameters\n  commentId: T:System.Security.Cryptography.CngKeyCreationParameters\n  nameWithType: CngKeyCreationParameters\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Security.Cryptography.CngKeyOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyOpenOptions\n  fullName: System.Security.Cryptography.CngKeyOpenOptions\n  commentId: T:System.Security.Cryptography.CngKeyOpenOptions\n  nameWithType: CngKeyOpenOptions\n- uid: System.Security.Cryptography.CngKeyBlobFormat\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyBlobFormat\n  fullName: System.Security.Cryptography.CngKeyBlobFormat\n  commentId: T:System.Security.Cryptography.CngKeyBlobFormat\n  nameWithType: CngKeyBlobFormat\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.CngPropertyOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngPropertyOptions\n  fullName: System.Security.Cryptography.CngPropertyOptions\n  commentId: T:System.Security.Cryptography.CngPropertyOptions\n  nameWithType: CngPropertyOptions\n- uid: System.Security.Cryptography.CngProperty\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngProperty\n  fullName: System.Security.Cryptography.CngProperty\n  commentId: T:System.Security.Cryptography.CngProperty\n  nameWithType: CngProperty\n- uid: System.Security.Cryptography.CngKeyHandleOpenOptions\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKeyHandleOpenOptions\n  fullName: System.Security.Cryptography.CngKeyHandleOpenOptions\n  commentId: T:System.Security.Cryptography.CngKeyHandleOpenOptions\n  nameWithType: CngKeyHandleOpenOptions\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.PlatformNotSupportedException\n  isExternal: false\n  name: PlatformNotSupportedException\n  fullName: System.PlatformNotSupportedException\n  nameWithType: PlatformNotSupportedException\n  commentId: T:System.PlatformNotSupportedException\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}