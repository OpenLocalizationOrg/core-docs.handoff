{"nodes":[{"pos":[739,748],"content":"Stopwatch","needQuote":true,"nodes":[{"content":"Stopwatch","pos":[0,9]}]},{"pos":[2051,2060],"content":"Frequency","needQuote":true,"nodes":[{"content":"Frequency","pos":[0,9]}]},{"pos":[3233,3249],"content":"IsHighResolution","needQuote":true,"nodes":[{"content":"IsHighResolution","pos":[0,16]}]},{"pos":[4429,4440],"content":"Stopwatch()","needQuote":true,"nodes":[{"content":"Stopwatch()","pos":[0,11]}]},{"pos":[5484,5491],"content":"Elapsed","needQuote":true,"nodes":[{"content":"Elapsed","pos":[0,7]}]},{"pos":[7000,7019],"content":"ElapsedMilliseconds","needQuote":true,"nodes":[{"content":"ElapsedMilliseconds","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A read-only long integer representing the total number of milliseconds measured by the current instance.&lt;/p&gt;\\n","pos":[7773,7888],"source":"\\n<p>A read-only long integer representing the total number of milliseconds measured by the current instance.</p>\\n"},{"pos":[8437,8449],"content":"ElapsedTicks","needQuote":true,"nodes":[{"content":"ElapsedTicks","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A read-only long integer representing the total number of timer ticks measured by the current instance.&lt;/p&gt;\\n","pos":[9174,9288],"source":"\\n<p>A read-only long integer representing the total number of timer ticks measured by the current instance.</p>\\n"},{"pos":[9940,9949],"content":"IsRunning","needQuote":true,"nodes":[{"content":"IsRunning","pos":[0,9]}]},{"pos":[11690,11704],"content":"GetTimestamp()","needQuote":true,"nodes":[{"content":"GetTimestamp()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A long integer representing the tick counter value of the underlying timer mechanism.&lt;/p&gt;\\n","pos":[12387,12483],"source":"\\n<p>A long integer representing the tick counter value of the underlying timer mechanism.</p>\\n"},{"pos":[12914,12921],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[14191,14200],"content":"Restart()","needQuote":true,"nodes":[{"content":"Restart()","pos":[0,9]}]},{"pos":[15095,15102],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"pos":[16366,16376],"content":"StartNew()","needQuote":true,"nodes":[{"content":"StartNew()","pos":[0,10]}]},{"pos":[18048,18054],"content":"Stop()","needQuote":true,"nodes":[{"content":"Stop()","pos":[0,6]}]},{"pos":[19180,19198],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[19365,19371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19531,19541],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[19636,19644],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19713,19714],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19741,19742],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19812,19820],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[19889,19890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19917,19918],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20101,20115],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20234,20240],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20307,20308],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20358,20364],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20424,20425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20508,20514],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20581,20582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20632,20638],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20698,20699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20913,20935],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21083,21089],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21156,21157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21207,21213],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21274,21275]},{"pos":[21330,21336],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21396,21397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21494,21500],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21567,21568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21618,21624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21685,21686]},{"pos":[21741,21747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21807,21808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22053,22084],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22250,22265],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22341,22342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22392,22398],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22459,22460]},{"pos":[22515,22521],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22581,22582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22688,22703],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[22779,22780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22830,22836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22897,22898]},{"pos":[22953,22959],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23019,23020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23250,23263],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23364,23375],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23447,23448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23475,23476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23549,23560],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23632,23633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23660,23661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23836,23845],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[23938,23945],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24013,24014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24041,24042],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24111,24118],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24186,24187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24214,24215],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24390,24407],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[24516,24531],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24607,24608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24635,24636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24713,24728],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[24804,24805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24832,24833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24978,24984],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[25114,25119],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[25262,25269],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25419,25427],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[25605,25614],"content":"Stopwatch","needQuote":true,"nodes":[{"content":"Stopwatch","pos":[0,9]}]}],"content":"items:\n- uid: System.Diagnostics.Stopwatch\n  commentId: T:System.Diagnostics.Stopwatch\n  id: Stopwatch\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.Stopwatch.#ctor\n  - System.Diagnostics.Stopwatch.Elapsed\n  - System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  - System.Diagnostics.Stopwatch.ElapsedTicks\n  - System.Diagnostics.Stopwatch.Frequency\n  - System.Diagnostics.Stopwatch.GetTimestamp\n  - System.Diagnostics.Stopwatch.IsHighResolution\n  - System.Diagnostics.Stopwatch.IsRunning\n  - System.Diagnostics.Stopwatch.Reset\n  - System.Diagnostics.Stopwatch.Restart\n  - System.Diagnostics.Stopwatch.Start\n  - System.Diagnostics.Stopwatch.StartNew\n  - System.Diagnostics.Stopwatch.Stop\n  langs:\n  - csharp\n  - vb\n  name: Stopwatch\n  fullName: System.Diagnostics.Stopwatch\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Stopwatch\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 594\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides a set of methods and properties that you can use to accurately measure elapsed time.</p>\\n\"\n  syntax:\n    content: public class Stopwatch\n    content.vb: Public Class Stopwatch\n  seealso:\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Stopwatch\n- uid: System.Diagnostics.Stopwatch.Frequency\n  commentId: F:System.Diagnostics.Stopwatch.Frequency\n  id: Frequency\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Frequency\n  fullName: System.Diagnostics.Stopwatch.Frequency\n  type: Field\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Frequency\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 596\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the frequency of the timer as the number of ticks per second. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly long Frequency\n    content.vb: Public Shared ReadOnly Frequency As Long\n    return:\n      type: System.Int64\n  seealso:\n  - type: System.Diagnostics.Stopwatch.IsHighResolution\n    commentId: F:System.Diagnostics.Stopwatch.IsHighResolution\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Stopwatch.Frequency\n- uid: System.Diagnostics.Stopwatch.IsHighResolution\n  commentId: F:System.Diagnostics.Stopwatch.IsHighResolution\n  id: IsHighResolution\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: IsHighResolution\n  fullName: System.Diagnostics.Stopwatch.IsHighResolution\n  type: Field\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsHighResolution\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 597\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates whether the timer is based on a high-resolution performance counter. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly bool IsHighResolution\n    content.vb: Public Shared ReadOnly IsHighResolution As Boolean\n    return:\n      type: System.Boolean\n  seealso:\n  - type: System.Diagnostics.Stopwatch.Frequency\n    commentId: F:System.Diagnostics.Stopwatch.Frequency\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Stopwatch.IsHighResolution\n- uid: System.Diagnostics.Stopwatch.#ctor\n  commentId: M:System.Diagnostics.Stopwatch.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Stopwatch()\n  fullName: System.Diagnostics.Stopwatch.Stopwatch()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 598\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.Stopwatch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Stopwatch()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.Diagnostics.Stopwatch.StartNew\n    commentId: M:System.Diagnostics.Stopwatch.StartNew\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stopwatch.Stopwatch()\n- uid: System.Diagnostics.Stopwatch.Elapsed\n  commentId: P:System.Diagnostics.Stopwatch.Elapsed\n  id: Elapsed\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Elapsed\n  fullName: System.Diagnostics.Stopwatch.Elapsed\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Elapsed\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 599\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the total elapsed time measured by the current instance.</p>\\n\"\n  syntax:\n    content: public TimeSpan Elapsed { get; }\n    content.vb: Public ReadOnly Property Elapsed As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>A read-only <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the total elapsed time measured by the current instance.</p>\\n\"\n  seealso:\n  - type: System.TimeSpan\n    commentId: T:System.TimeSpan\n  - type: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n    commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  - type: System.Diagnostics.Stopwatch.ElapsedTicks\n    commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Stopwatch.Elapsed\n- uid: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  id: ElapsedMilliseconds\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: ElapsedMilliseconds\n  fullName: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElapsedMilliseconds\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 600\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the total elapsed time measured by the current instance, in milliseconds.</p>\\n\"\n  syntax:\n    content: public long ElapsedMilliseconds { get; }\n    content.vb: Public ReadOnly Property ElapsedMilliseconds As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A read-only long integer representing the total number of milliseconds measured by the current instance.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Stopwatch.Elapsed\n    commentId: P:System.Diagnostics.Stopwatch.Elapsed\n  - type: System.Diagnostics.Stopwatch.ElapsedTicks\n    commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Stopwatch.ElapsedMilliseconds\n- uid: System.Diagnostics.Stopwatch.ElapsedTicks\n  commentId: P:System.Diagnostics.Stopwatch.ElapsedTicks\n  id: ElapsedTicks\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: ElapsedTicks\n  fullName: System.Diagnostics.Stopwatch.ElapsedTicks\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ElapsedTicks\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 601\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the total elapsed time measured by the current instance, in timer ticks.</p>\\n\"\n  syntax:\n    content: public long ElapsedTicks { get; }\n    content.vb: Public ReadOnly Property ElapsedTicks As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A read-only long integer representing the total number of timer ticks measured by the current instance.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Stopwatch.Elapsed\n    commentId: P:System.Diagnostics.Stopwatch.Elapsed\n  - type: System.Diagnostics.Stopwatch.ElapsedMilliseconds\n    commentId: P:System.Diagnostics.Stopwatch.ElapsedMilliseconds\n  - type: System.Diagnostics.Stopwatch.Frequency\n    commentId: F:System.Diagnostics.Stopwatch.Frequency\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Stopwatch.ElapsedTicks\n- uid: System.Diagnostics.Stopwatch.IsRunning\n  commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  id: IsRunning\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: IsRunning\n  fullName: System.Diagnostics.Stopwatch.IsRunning\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsRunning\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 602\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Diagnostics.Stopwatch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> timer is running.</p>\\n\"\n  syntax:\n    content: public bool IsRunning { get; }\n    content.vb: Public ReadOnly Property IsRunning As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Diagnostics.Stopwatch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is currently running and measuring elapsed time for an interval; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Stopwatch.StartNew\n    commentId: M:System.Diagnostics.Stopwatch.StartNew\n  - type: System.Diagnostics.Stopwatch.Stop\n    commentId: M:System.Diagnostics.Stopwatch.Stop\n  - type: System.Diagnostics.Stopwatch.Start\n    commentId: M:System.Diagnostics.Stopwatch.Start\n  - type: System.Diagnostics.Stopwatch.Reset\n    commentId: M:System.Diagnostics.Stopwatch.Reset\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Stopwatch.IsRunning\n- uid: System.Diagnostics.Stopwatch.GetTimestamp\n  commentId: M:System.Diagnostics.Stopwatch.GetTimestamp\n  id: GetTimestamp\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: GetTimestamp()\n  fullName: System.Diagnostics.Stopwatch.GetTimestamp()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTimestamp\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 603\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets the current number of ticks in the timer mechanism.</p>\\n\"\n  syntax:\n    content: public static long GetTimestamp()\n    content.vb: Public Shared Function GetTimestamp As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long integer representing the tick counter value of the underlying timer mechanism.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Stopwatch.IsHighResolution\n    commentId: F:System.Diagnostics.Stopwatch.IsHighResolution\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Stopwatch.GetTimestamp()\n- uid: System.Diagnostics.Stopwatch.Reset\n  commentId: M:System.Diagnostics.Stopwatch.Reset\n  id: Reset\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Diagnostics.Stopwatch.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reset\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 604\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Stops time interval measurement and resets the elapsed time to zero.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  seealso:\n  - type: System.Diagnostics.Stopwatch.StartNew\n    commentId: M:System.Diagnostics.Stopwatch.StartNew\n  - type: System.Diagnostics.Stopwatch.Stop\n    commentId: M:System.Diagnostics.Stopwatch.Stop\n  - type: System.Diagnostics.Stopwatch.IsRunning\n    commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  - type: System.Diagnostics.Stopwatch.Start\n    commentId: M:System.Diagnostics.Stopwatch.Start\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stopwatch.Reset()\n- uid: System.Diagnostics.Stopwatch.Restart\n  commentId: M:System.Diagnostics.Stopwatch.Restart\n  id: Restart\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Restart()\n  fullName: System.Diagnostics.Stopwatch.Restart()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Restart\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 605\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Stops time interval measurement, resets the elapsed time to zero, and starts measuring elapsed time.</p>\\n\"\n  syntax:\n    content: public void Restart()\n    content.vb: Public Sub Restart\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stopwatch.Restart()\n- uid: System.Diagnostics.Stopwatch.Start\n  commentId: M:System.Diagnostics.Stopwatch.Start\n  id: Start\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Start()\n  fullName: System.Diagnostics.Stopwatch.Start()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Start\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 606\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Starts, or resumes, measuring elapsed time for an interval.</p>\\n\"\n  syntax:\n    content: public void Start()\n    content.vb: Public Sub Start\n  seealso:\n  - type: System.Diagnostics.Stopwatch.StartNew\n    commentId: M:System.Diagnostics.Stopwatch.StartNew\n  - type: System.Diagnostics.Stopwatch.Stop\n    commentId: M:System.Diagnostics.Stopwatch.Stop\n  - type: System.Diagnostics.Stopwatch.IsRunning\n    commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  - type: System.Diagnostics.Stopwatch.Reset\n    commentId: M:System.Diagnostics.Stopwatch.Reset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stopwatch.Start()\n- uid: System.Diagnostics.Stopwatch.StartNew\n  commentId: M:System.Diagnostics.Stopwatch.StartNew\n  id: StartNew\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: StartNew()\n  fullName: System.Diagnostics.Stopwatch.StartNew()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StartNew\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 607\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new <xref href=\\\"System.Diagnostics.Stopwatch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance, sets the elapsed time property to zero, and starts measuring elapsed time.</p>\\n\"\n  syntax:\n    content: public static Stopwatch StartNew()\n    content.vb: Public Shared Function StartNew As Stopwatch\n    return:\n      type: System.Diagnostics.Stopwatch\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.Stopwatch\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has just begun measuring elapsed time.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.Stopwatch.Start\n    commentId: M:System.Diagnostics.Stopwatch.Start\n  - type: System.Diagnostics.Stopwatch.Stop\n    commentId: M:System.Diagnostics.Stopwatch.Stop\n  - type: System.Diagnostics.Stopwatch.IsRunning\n    commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  - type: System.Diagnostics.Stopwatch.Reset\n    commentId: M:System.Diagnostics.Stopwatch.Reset\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Stopwatch.StartNew()\n- uid: System.Diagnostics.Stopwatch.Stop\n  commentId: M:System.Diagnostics.Stopwatch.Stop\n  id: Stop\n  parent: System.Diagnostics.Stopwatch\n  langs:\n  - csharp\n  - vb\n  name: Stop()\n  fullName: System.Diagnostics.Stopwatch.Stop()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Stop\n    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs\n    startLine: 608\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Stops measuring elapsed time for an interval.</p>\\n\"\n  syntax:\n    content: public void Stop()\n    content.vb: Public Sub Stop\n  seealso:\n  - type: System.Diagnostics.Stopwatch.StartNew\n    commentId: M:System.Diagnostics.Stopwatch.StartNew\n  - type: System.Diagnostics.Stopwatch.IsRunning\n    commentId: P:System.Diagnostics.Stopwatch.IsRunning\n  - type: System.Diagnostics.Stopwatch.Start\n    commentId: M:System.Diagnostics.Stopwatch.Start\n  - type: System.Diagnostics.Stopwatch.Reset\n    commentId: M:System.Diagnostics.Stopwatch.Reset\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Stopwatch.Stop()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  commentId: N:System.Diagnostics\n  nameWithType: System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.Diagnostics.Stopwatch\n  parent: System.Diagnostics\n  isExternal: false\n  name: Stopwatch\n  fullName: System.Diagnostics.Stopwatch\n  commentId: T:System.Diagnostics.Stopwatch\n  nameWithType: Stopwatch\n"}