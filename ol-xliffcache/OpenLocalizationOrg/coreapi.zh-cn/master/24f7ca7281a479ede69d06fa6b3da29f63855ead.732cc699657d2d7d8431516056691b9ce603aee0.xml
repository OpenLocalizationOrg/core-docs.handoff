{"nodes":[{"pos":[688,719],"content":"WindowsRuntimeStorageExtensions","needQuote":true,"nodes":[{"content":"WindowsRuntimeStorageExtensions","pos":[0,31]}]},{"pos":[2351,2395],"content":"OpenStreamForReadAsync(Storage.IStorageFile)","needQuote":true,"nodes":[{"content":"OpenStreamForReadAsync(Storage.IStorageFile)","pos":[0,44]}]},{"pos":[4178,4232],"content":"OpenStreamForReadAsync(Storage.IStorageFolder, String)","needQuote":true,"nodes":[{"content":"OpenStreamForReadAsync(Storage.IStorageFolder, String)","pos":[0,54]}]},{"pos":[6082,6127],"content":"OpenStreamForWriteAsync(Storage.IStorageFile)","needQuote":true,"nodes":[{"content":"OpenStreamForWriteAsync(Storage.IStorageFile)","pos":[0,45]}]},{"pos":[8038,8126],"content":"OpenStreamForWriteAsync(Storage.IStorageFolder, String, Storage.CreationCollisionOption)","needQuote":true,"nodes":[{"content":"OpenStreamForWriteAsync(Storage.IStorageFolder, String, Storage.CreationCollisionOption)","pos":[0,88]}]},{"pos":[9953,9962],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[10106,10112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10281,10291],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[10420,10428],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10531,10532],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10579,10580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10670,10678],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[10781,10782],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10829,10830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11012,11026],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11183,11189],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11288,11289],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11359,11365],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11450,11451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11554,11560],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11659,11660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11730,11736],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11821,11822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12032,12054],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12248,12254],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12353,12354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12424,12430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12516,12517]},{"pos":[12595,12601],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12686,12687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12804,12810],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12909,12910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12980,12986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13072,13073]},{"pos":[13151,13157],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13242,13243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13471,13502],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13723,13738],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13855,13856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13926,13932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14018,14019]},{"pos":[14097,14103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14188,14189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14315,14330],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14447,14448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14518,14524],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14610,14611]},{"pos":[14689,14695],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14780,14781],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14943,14956],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[15094,15105],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15214,15215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15262,15263],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15356,15367],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15476,15477],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15524,15525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15679,15688],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15814,15821],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15922,15923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15970,15971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16060,16067],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[16168,16169],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16216,16217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16387,16404],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[16554,16569],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16686,16687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16734,16735],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16832,16847],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16964,16965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17012,17013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17114,17120],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17226,17246],"content":"Storage.IStorageFile","needQuote":true,"nodes":[{"content":"Storage.IStorageFile","pos":[0,20]}]},{"pos":[17524,17536],"content":"Task<Stream>","needQuote":true,"nodes":[{"content":"Task&lt;Stream&gt;","pos":[0,12],"source":"Task<Stream>"}]},{"pos":[17814,17818],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[17915,17916],"content":"<","needQuote":true,"nodes":[]},{"pos":[17989,17995],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[18187,18191],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[18289,18292]},{"pos":[18377,18383],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[18471,18472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18619,18632],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[18895,18899],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[18975,18976],"content":"<","needQuote":true,"nodes":[]},{"pos":[19023,19030],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19193,19197],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[19274,19277]},{"pos":[19336,19343],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[19402,19403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19536,19558],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[19698,19720],"content":"Storage.IStorageFolder","needQuote":true,"nodes":[{"content":"Storage.IStorageFolder","pos":[0,22]}]},{"pos":[19898,19904],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[20085,20116],"content":"Storage.CreationCollisionOption","needQuote":true,"nodes":[{"content":"Storage.CreationCollisionOption","pos":[0,31]}]}],"content":"items:\n- uid: System.IO.WindowsRuntimeStorageExtensions\n  commentId: T:System.IO.WindowsRuntimeStorageExtensions\n  id: WindowsRuntimeStorageExtensions\n  parent: System.IO\n  children:\n  - System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)\n  - System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)\n  - System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)\n  - System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)\n  langs:\n  - csharp\n  - vb\n  name: WindowsRuntimeStorageExtensions\n  nameWithType: WindowsRuntimeStorageExtensions\n  fullName: System.IO.WindowsRuntimeStorageExtensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WindowsRuntimeStorageExtensions\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System.IO\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public class WindowsRuntimeStorageExtensions\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Class WindowsRuntimeStorageExtensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n- uid: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)\n  commentId: M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)\n  id: OpenStreamForReadAsync(Windows.Storage.IStorageFile)\n  isExtensionMethod: true\n  parent: System.IO.WindowsRuntimeStorageExtensions\n  langs:\n  - csharp\n  - vb\n  name: OpenStreamForReadAsync(Storage.IStorageFile)\n  nameWithType: WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Storage.IStorageFile)\n  fullName: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFile)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenStreamForReadAsync\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System.IO\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Task<Stream> OpenStreamForReadAsync(this Storage.IStorageFile windowsRuntimeFile)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ExtensionAttribute>\n\n      Public Shared Function OpenStreamForReadAsync(windowsRuntimeFile As Storage.IStorageFile) As Task(Of Stream)\n    parameters:\n    - id: windowsRuntimeFile\n      type: Windows.Storage.IStorageFile\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)\n  commentId: M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)\n  id: OpenStreamForReadAsync(Windows.Storage.IStorageFolder,System.String)\n  isExtensionMethod: true\n  parent: System.IO.WindowsRuntimeStorageExtensions\n  langs:\n  - csharp\n  - vb\n  name: OpenStreamForReadAsync(Storage.IStorageFolder, String)\n  nameWithType: WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Storage.IStorageFolder, String)\n  fullName: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForReadAsync(Windows.Storage.IStorageFolder, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenStreamForReadAsync\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 45\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System.IO\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Task<Stream> OpenStreamForReadAsync(this Storage.IStorageFolder rootDirectory, string relativePath)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ExtensionAttribute>\n\n      Public Shared Function OpenStreamForReadAsync(rootDirectory As Storage.IStorageFolder, relativePath As String) As Task(Of Stream)\n    parameters:\n    - id: rootDirectory\n      type: Windows.Storage.IStorageFolder\n    - id: relativePath\n      type: System.String\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)\n  commentId: M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)\n  id: OpenStreamForWriteAsync(Windows.Storage.IStorageFile)\n  isExtensionMethod: true\n  parent: System.IO.WindowsRuntimeStorageExtensions\n  langs:\n  - csharp\n  - vb\n  name: OpenStreamForWriteAsync(Storage.IStorageFile)\n  nameWithType: WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Storage.IStorageFile)\n  fullName: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFile)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenStreamForWriteAsync\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 47\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System.IO\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Task<Stream> OpenStreamForWriteAsync(this Storage.IStorageFile windowsRuntimeFile)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ExtensionAttribute>\n\n      Public Shared Function OpenStreamForWriteAsync(windowsRuntimeFile As Storage.IStorageFile) As Task(Of Stream)\n    parameters:\n    - id: windowsRuntimeFile\n      type: Windows.Storage.IStorageFile\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)\n  commentId: M:System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)\n  id: OpenStreamForWriteAsync(Windows.Storage.IStorageFolder,System.String,Windows.Storage.CreationCollisionOption)\n  isExtensionMethod: true\n  parent: System.IO.WindowsRuntimeStorageExtensions\n  langs:\n  - csharp\n  - vb\n  name: OpenStreamForWriteAsync(Storage.IStorageFolder, String, Storage.CreationCollisionOption)\n  nameWithType: WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Storage.IStorageFolder, String, Storage.CreationCollisionOption)\n  fullName: System.IO.WindowsRuntimeStorageExtensions.OpenStreamForWriteAsync(Windows.Storage.IStorageFolder, System.String, Windows.Storage.CreationCollisionOption)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OpenStreamForWriteAsync\n    path: src/System.Runtime.WindowsRuntime/ref/System.Runtime.WindowsRuntime.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime.WindowsRuntime\n  namespace: System.IO\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static Task<Stream> OpenStreamForWriteAsync(this Storage.IStorageFolder rootDirectory, string relativePath, Storage.CreationCollisionOption creationCollisionOption)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ExtensionAttribute>\n\n      Public Shared Function OpenStreamForWriteAsync(rootDirectory As Storage.IStorageFolder, relativePath As String, creationCollisionOption As Storage.CreationCollisionOption) As Task(Of Stream)\n    parameters:\n    - id: rootDirectory\n      type: Windows.Storage.IStorageFolder\n    - id: relativePath\n      type: System.String\n    - id: creationCollisionOption\n      type: Windows.Storage.CreationCollisionOption\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.IO\n  commentId: N:System.IO\n  isExternal: false\n  name: System.IO\n  nameWithType: System.IO\n  fullName: System.IO\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: Windows.Storage.IStorageFile\n  isExternal: true\n  name: Storage.IStorageFile\n  nameWithType: Storage.IStorageFile\n  fullName: Windows.Storage.IStorageFile\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Stream>\n  nameWithType: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  nameWithType.vb: Task(Of Stream)\n  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)\n  name.vb: Task(Of Stream)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    nameWithType: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.Stream\n    name: Stream\n    nameWithType: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks.Task`1\n  commentId: T:System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  nameWithType: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    nameWithType: <\n    fullName: <\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: '>'\n    nameWithType: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    nameWithType: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    nameWithType: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    nameWithType: TResult\n    fullName: TResult\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n- uid: Windows.Storage.IStorageFolder\n  isExternal: true\n  name: Storage.IStorageFolder\n  nameWithType: Storage.IStorageFolder\n  fullName: Windows.Storage.IStorageFolder\n- uid: System.String\n  commentId: T:System.String\n  parent: System\n  isExternal: false\n  name: String\n  nameWithType: String\n  fullName: System.String\n- uid: Windows.Storage.CreationCollisionOption\n  commentId: '!:Windows.Storage.CreationCollisionOption'\n  isExternal: true\n  name: Storage.CreationCollisionOption\n  nameWithType: Storage.CreationCollisionOption\n  fullName: Windows.Storage.CreationCollisionOption\n"}