{"nodes":[{"pos":[962,987],"content":"TransferCodingHeaderValue","needQuote":true,"nodes":[{"content":"TransferCodingHeaderValue","pos":[0,25]}]},{"pos":[2319,2371],"content":"TransferCodingHeaderValue(TransferCodingHeaderValue)","needQuote":true,"nodes":[{"content":"TransferCodingHeaderValue(TransferCodingHeaderValue)","pos":[0,52]}]},{"pos":[3905,3938],"content":"TransferCodingHeaderValue(String)","needQuote":true,"nodes":[{"content":"TransferCodingHeaderValue(String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A string used to initialize the new instance.&lt;/p&gt;\\n","pos":[4737,4793],"source":"\\n<p>A string used to initialize the new instance.</p>\\n"},{"pos":[5185,5195],"content":"Parameters","needQuote":true,"nodes":[{"content":"Parameters","pos":[0,10]}]},{"pos":[6515,6520],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[7698,7712],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.&lt;/p&gt;\\n","pos":[8537,8594],"source":"\\n<p>The object to compare with the current object.</p>\\n"},{"pos":[9392,9405],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10766,10779],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that represents transfer-coding header value information.&lt;/p&gt;\\n","pos":[11602,11679],"source":"\\n<p>A string that represents transfer-coding header value information.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is a &lt;strong&gt;null&lt;/strong&gt; reference.&lt;/p&gt;\\n","pos":[12154,12219],"source":"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is not valid transfer-coding header value information.&lt;/p&gt;\\n","pos":[12312,12394],"source":"\\n<p>\\n<em>input</em> is not valid transfer-coding header value information.</p>\\n"},{"pos":[12782,12792],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14322,14369],"content":"TryParse(String, out TransferCodingHeaderValue)","needQuote":true,"nodes":[{"content":"TryParse(String, out TransferCodingHeaderValue)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[15327,15361],"source":"\\n<p>The string to validate.</p>\\n"},{"pos":[16531,16554],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[16736,16742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16929,16951],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[17099,17105],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17172,17173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17223,17229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17290,17291]},{"pos":[17346,17352],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17412,17413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17510,17516],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[17583,17584],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17634,17640],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17701,17702]},{"pos":[17757,17763],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17823,17824],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18069,18100],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[18266,18281],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18357,18358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18408,18414],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18475,18476]},{"pos":[18531,18537],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18597,18598],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18704,18719],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18795,18796],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18846,18852],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18913,18914]},{"pos":[18969,18975],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19035,19036],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19262,19271],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[19364,19371],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19439,19440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19467,19468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19537,19544],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19612,19613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19640,19641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19816,19833],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19942,19957],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20033,20034],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20061,20062],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20139,20154],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[20230,20231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20258,20259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20404,20410],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20594,20619],"content":"TransferCodingHeaderValue","needQuote":true,"nodes":[{"content":"TransferCodingHeaderValue","pos":[0,25]}]},{"pos":[20855,20861],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[21132,21165],"content":"ICollection<NameValueHeaderValue>","needQuote":true,"nodes":[{"content":"ICollection&lt;NameValueHeaderValue&gt;","pos":[0,33],"source":"ICollection<NameValueHeaderValue>"}]},{"pos":[21489,21500],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[21585,21586],"content":"<","needQuote":true,"nodes":[]},{"pos":[21667,21687],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[21850,21861],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[21947,21950]},{"pos":[22038,22058],"content":"NameValueHeaderValue","needQuote":true,"nodes":[{"content":"NameValueHeaderValue","pos":[0,20]}]},{"pos":[22128,22129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22428,22442],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[22661,22672],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[22736,22737],"content":"<","needQuote":true,"nodes":[]},{"pos":[22764,22765],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[22885,22896],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[22961,22964]},{"pos":[22998,22999],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23026,23027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23230,23256],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[23475,23489],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[23608,23614],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23681,23682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23732,23738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23798,23799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23882,23888],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23955,23956],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24006,24012],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24072,24073],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24246,24253],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[24419,24432],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24533,24544],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24616,24617],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24644,24645],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24718,24729],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24801,24802],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24829,24830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24990,24995],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25152,25162],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25257,25265],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25334,25335],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25362,25363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25433,25441],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25510,25511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25538,25539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25692,25713],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[25912,25927],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue\n  commentId: T:System.Net.Http.Headers.TransferCodingHeaderValue\n  id: TransferCodingHeaderValue\n  parent: System.Net.Http.Headers\n  children:\n  - System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)\n  - System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)\n  - System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)\n  - System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode\n  - System.Net.Http.Headers.TransferCodingHeaderValue.Parameters\n  - System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)\n  - System.Net.Http.Headers.TransferCodingHeaderValue.ToString\n  - System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)\n  - System.Net.Http.Headers.TransferCodingHeaderValue.Value\n  langs:\n  - csharp\n  - vb\n  name: TransferCodingHeaderValue\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TransferCodingHeaderValue\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 565\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Represents an accept-encoding header value.</p>\\n\"\n  syntax:\n    content: public class TransferCodingHeaderValue\n    content.vb: Public Class TransferCodingHeaderValue\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TransferCodingHeaderValue\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)\n  id: '#ctor(System.Net.Http.Headers.TransferCodingHeaderValue)'\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TransferCodingHeaderValue(TransferCodingHeaderValue)\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.TransferCodingHeaderValue(System.Net.Http.Headers.TransferCodingHeaderValue)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 567\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TransferCodingHeaderValue(TransferCodingHeaderValue source)\n    content.vb: Protected Sub New(source As TransferCodingHeaderValue)\n    parameters:\n    - id: source\n      type: System.Net.Http.Headers.TransferCodingHeaderValue\n      description: \"\\n<p>A <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object used to initialize the new instance. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TransferCodingHeaderValue.TransferCodingHeaderValue(TransferCodingHeaderValue)\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TransferCodingHeaderValue(String)\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.TransferCodingHeaderValue(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 568\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public TransferCodingHeaderValue(string value)\n    content.vb: Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string used to initialize the new instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TransferCodingHeaderValue.TransferCodingHeaderValue(String)\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.Parameters\n  commentId: P:System.Net.Http.Headers.TransferCodingHeaderValue.Parameters\n  id: Parameters\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parameters\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.Parameters\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parameters\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 569\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the transfer-coding parameters.</p>\\n\"\n  syntax:\n    content: public ICollection<NameValueHeaderValue> Parameters { get; }\n    content.vb: Public ReadOnly Property Parameters As ICollection(Of NameValueHeaderValue)\n    parameters: []\n    return:\n      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n      description: \"\\n<p>Returns <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The transfer-coding parameters.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TransferCodingHeaderValue.Parameters\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.Value\n  commentId: P:System.Net.Http.Headers.TransferCodingHeaderValue.Value\n  id: Value\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 570\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Gets the transfer-coding value.</p>\\n\"\n  syntax:\n    content: public string Value { get; }\n    content.vb: Public ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The transfer-coding value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TransferCodingHeaderValue.Value\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 571\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether the specified Object is equal to the current <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TransferCodingHeaderValue.Equals(Object)\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode\n  id: GetHashCode\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 572\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Serves as a hash function for an <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A hash code for the current object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TransferCodingHeaderValue.GetHashCode()\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 573\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Converts a string to an <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static TransferCodingHeaderValue Parse(string input)\n    content.vb: Public Shared Function Parse(input As String) As TransferCodingHeaderValue\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>A string that represents transfer-coding header value information.</p>\\n\"\n    return:\n      type: System.Net.Http.Headers.TransferCodingHeaderValue\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An <xref href=\\\"System.Net.Http.Headers.AuthenticationHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is a <strong>null</strong> reference.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>input</em> is not valid transfer-coding header value information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TransferCodingHeaderValue.Parse(String)\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.ToString\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.ToString\n  id: ToString\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 574\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Returns a string that represents the current <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>Returns <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>A string that represents the current object.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: TransferCodingHeaderValue.ToString()\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)\n  commentId: M:System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)\n  id: TryParse(System.String,System.Net.Http.Headers.TransferCodingHeaderValue@)\n  parent: System.Net.Http.Headers.TransferCodingHeaderValue\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out TransferCodingHeaderValue)\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String, out System.Net.Http.Headers.TransferCodingHeaderValue)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 575\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http.Headers\n  summary: \"\\n<p>Determines whether a string is valid <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string input, out TransferCodingHeaderValue parsedValue)\n    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As TransferCodingHeaderValue) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: parsedValue\n      type: System.Net.Http.Headers.TransferCodingHeaderValue\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if <em>input</em> is valid <xref href=\\\"System.Net.Http.Headers.TransferCodingHeaderValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.Http.Headers.TransferCodingHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.TransferCodingHeaderValue)\n  name.vb: TryParse(String, ByRef TransferCodingHeaderValue)\n  nameWithType: TransferCodingHeaderValue.TryParse(String, out TransferCodingHeaderValue)\n  nameWithType.vb: TransferCodingHeaderValue.TryParse(String, ByRef TransferCodingHeaderValue)\nreferences:\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Http.Headers.TransferCodingHeaderValue\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: TransferCodingHeaderValue\n  fullName: System.Net.Http.Headers.TransferCodingHeaderValue\n  commentId: T:System.Net.Http.Headers.TransferCodingHeaderValue\n  nameWithType: TransferCodingHeaderValue\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<NameValueHeaderValue>\n  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>\n  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.NameValueHeaderValue)\n  name.vb: ICollection(Of NameValueHeaderValue)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.Headers.NameValueHeaderValue\n    name: NameValueHeaderValue\n    fullName: System.Net.Http.Headers.NameValueHeaderValue\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}\n  nameWithType: ICollection<NameValueHeaderValue>\n  nameWithType.vb: ICollection(Of NameValueHeaderValue)\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.ICollection`1\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}