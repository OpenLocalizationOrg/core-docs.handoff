{"nodes":[{"pos":[1188,1193],"content":"SizeF","needQuote":true,"nodes":[{"content":"SizeF","pos":[0,5]}]},{"pos":[2201,2206],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[3762,3775],"content":"SizeF(PointF)","needQuote":true,"nodes":[{"content":"SizeF(PointF)","pos":[0,13]}]},{"pos":[5175,5187],"content":"SizeF(SizeF)","needQuote":true,"nodes":[{"content":"SizeF(SizeF)","pos":[0,12]}]},{"pos":[6615,6636],"content":"SizeF(Single, Single)","needQuote":true,"nodes":[{"content":"SizeF(Single, Single)","pos":[0,21]}]},{"pos":[8042,8048],"content":"Height","needQuote":true,"nodes":[{"content":"Height","pos":[0,6]}]},{"pos":[9213,9220],"content":"IsEmpty","needQuote":true,"nodes":[{"content":"IsEmpty","pos":[0,7]}]},{"pos":[10481,10486],"content":"Width","needQuote":true,"nodes":[{"content":"Width","pos":[0,5]}]},{"pos":[11767,11784],"content":"Add(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Add(SizeF, SizeF)","pos":[0,17]}]},{"pos":[13759,13773],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15502,15515],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[16864,16886],"content":"Addition(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Addition(SizeF, SizeF)","pos":[0,22]}]},{"pos":[18795,18817],"content":"Equality(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Equality(SizeF, SizeF)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;This operator returns &lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; have equal width and height; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20069,20220],"source":"\\n<p>This operator returns <strong>true</strong> if <em>sz1</em> and <em>sz2</em> have equal width and height; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20651,20676],"content":"Explicit(SizeF to PointF)","needQuote":true,"nodes":[{"content":"Explicit(SizeF to PointF)","pos":[0,25]}]},{"pos":[22546,22570],"content":"Inequality(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Inequality(SizeF, SizeF)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;This operator returns &lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; differ either in width or height; &lt;strong&gt;false&lt;/strong&gt; if &lt;em&gt;sz1&lt;/em&gt; and &lt;em&gt;sz2&lt;/em&gt; are equal.&lt;/p&gt;\\n","pos":[23831,24019],"source":"\\n<p>This operator returns <strong>true</strong> if <em>sz1</em> and <em>sz2</em> differ either in width or height; <strong>false</strong> if <em>sz1</em> and <em>sz2</em> are equal.</p>\\n"},{"pos":[24458,24483],"content":"Subtraction(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Subtraction(SizeF, SizeF)","pos":[0,25]}]},{"pos":[26457,26479],"content":"Subtract(SizeF, SizeF)","needQuote":true,"nodes":[{"content":"Subtract(SizeF, SizeF)","pos":[0,22]}]},{"pos":[28520,28530],"content":"ToPointF()","needQuote":true,"nodes":[{"content":"ToPointF()","pos":[0,10]}]},{"pos":[29680,29688],"content":"ToSize()","needQuote":true,"nodes":[{"content":"ToSize()","pos":[0,8]}]},{"pos":[30824,30834],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[31931,31945],"content":"System.Drawing","needQuote":true,"nodes":[{"content":"System.Drawing","pos":[0,14]}]},{"pos":[32142,32164],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32312,32318],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32385,32386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32436,32442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32503,32504]},{"pos":[32559,32565],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32625,32626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32723,32729],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32796,32797],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32847,32853],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32914,32915]},{"pos":[32970,32976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33036,33037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33282,33313],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33479,33494],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33570,33571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33621,33627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33688,33689]},{"pos":[33744,33750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33810,33811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33917,33932],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34008,34009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34059,34065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34126,34127]},{"pos":[34182,34188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34248,34249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34475,34484],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[34577,34584],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34652,34653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34680,34681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34750,34757],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34825,34826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34853,34854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35007,35013],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35134,35140],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[35286,35291],"content":"SizeF","needQuote":true,"nodes":[{"content":"SizeF","pos":[0,5]}]},{"pos":[35465,35471],"content":"PointF","needQuote":true,"nodes":[{"content":"PointF","pos":[0,6]}]},{"pos":[35632,35638],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[35784,35791],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35973,35987],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36112,36118],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36167,36168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36218,36224],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36284,36285],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36371,36377],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[36426,36427],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36477,36483],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36543,36544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36725,36734],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[36913,36926],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37033,37044],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37098,37099],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37126,37127],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37203,37214],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37268,37269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37296,37297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37463,37468],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[37624,37628],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"pos":[37805,37815],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[37916,37924],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[37975,37976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38003,38004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38077,38085],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[38136,38137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38164,38165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38326,38332],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Drawing.SizeF\n  commentId: T:System.Drawing.SizeF\n  id: SizeF\n  parent: System.Drawing\n  children:\n  - System.Drawing.SizeF.#ctor(System.Drawing.PointF)\n  - System.Drawing.SizeF.#ctor(System.Drawing.SizeF)\n  - System.Drawing.SizeF.#ctor(System.Single,System.Single)\n  - System.Drawing.SizeF.Add(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.Empty\n  - System.Drawing.SizeF.Equals(System.Object)\n  - System.Drawing.SizeF.GetHashCode\n  - System.Drawing.SizeF.Height\n  - System.Drawing.SizeF.IsEmpty\n  - System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)~System.Drawing.PointF\n  - System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.Subtract(System.Drawing.SizeF,System.Drawing.SizeF)\n  - System.Drawing.SizeF.ToPointF\n  - System.Drawing.SizeF.ToSize\n  - System.Drawing.SizeF.ToString\n  - System.Drawing.SizeF.Width\n  langs:\n  - csharp\n  - vb\n  name: SizeF\n  fullName: System.Drawing.SizeF\n  type: Struct\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SizeF\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 15\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Stores an ordered pair of floating-point numbers, typically the width and height of a rectangle.</p>\\n\"\n  syntax:\n    content: public struct SizeF\n    content.vb: Public Structure SizeF\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SizeF\n- uid: System.Drawing.SizeF.Empty\n  commentId: F:System.Drawing.SizeF.Empty\n  id: Empty\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Empty\n  fullName: System.Drawing.SizeF.Empty\n  type: Field\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Empty\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 20\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that has a <xref href=\\\"System.Drawing.SizeF.Height\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Drawing.SizeF.Width\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of 0. </p>\\n\"\n  syntax:\n    content: public static readonly SizeF Empty\n    content.vb: Public Shared ReadOnly Empty As SizeF\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that has a <xref href=\\\"System.Drawing.SizeF.Height\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Drawing.SizeF.Width\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: SizeF.Empty\n- uid: System.Drawing.SizeF.#ctor(System.Drawing.PointF)\n  commentId: M:System.Drawing.SizeF.#ctor(System.Drawing.PointF)\n  id: '#ctor(System.Drawing.PointF)'\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: SizeF(PointF)\n  fullName: System.Drawing.SizeF.SizeF(System.Drawing.PointF)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 46\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the specified <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public SizeF(PointF pt)\n    content.vb: Public Sub New(pt As PointF)\n    parameters:\n    - id: pt\n      type: System.Drawing.PointF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from which to initialize this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.SizeF(PointF)\n- uid: System.Drawing.SizeF.#ctor(System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.#ctor(System.Drawing.SizeF)\n  id: '#ctor(System.Drawing.SizeF)'\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: SizeF(SizeF)\n  fullName: System.Drawing.SizeF.SizeF(System.Drawing.SizeF)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 31\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the specified existing <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public SizeF(SizeF size)\n    content.vb: Public Sub New(size As SizeF)\n    parameters:\n    - id: size\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from which to create the new <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.SizeF(SizeF)\n- uid: System.Drawing.SizeF.#ctor(System.Single,System.Single)\n  commentId: M:System.Drawing.SizeF.#ctor(System.Single,System.Single)\n  id: '#ctor(System.Single,System.Single)'\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: SizeF(Single, Single)\n  fullName: System.Drawing.SizeF.SizeF(System.Single, System.Single)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 61\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the specified dimensions.</p>\\n\"\n  syntax:\n    content: public SizeF(float width, float height)\n    content.vb: Public Sub New(width As Single, height As Single)\n    parameters:\n    - id: width\n      type: System.Single\n      description: \"\\n<p>The width component of the new <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n    - id: height\n      type: System.Single\n      description: \"\\n<p>The height component of the new <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.SizeF(Single, Single)\n- uid: System.Drawing.SizeF.Height\n  commentId: P:System.Drawing.SizeF.Height\n  id: Height\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Height\n  fullName: System.Drawing.SizeF.Height\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Height\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 161\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets or sets the vertical component of this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public float Height { get; set; }\n    content.vb: Public Property Height As Single\n    parameters: []\n    return:\n      type: System.Single\n      description: \"\\n<p>The vertical component of this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, typically measured in pixels.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.Height\n- uid: System.Drawing.SizeF.IsEmpty\n  commentId: P:System.Drawing.SizeF.IsEmpty\n  id: IsEmpty\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: IsEmpty\n  fullName: System.Drawing.SizeF.IsEmpty\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsEmpty\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 123\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets a value that indicates whether this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure has zero width and height.</p>\\n\"\n  syntax:\n    content: public bool IsEmpty { get; }\n    content.vb: Public ReadOnly Property IsEmpty As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This property returns <strong>true</strong> when this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure has both a width and height of zero; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SizeF.IsEmpty\n- uid: System.Drawing.SizeF.Width\n  commentId: P:System.Drawing.SizeF.Width\n  id: Width\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Width\n  fullName: System.Drawing.SizeF.Width\n  type: Property\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Width\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 140\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Gets or sets the horizontal component of this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public float Width { get; set; }\n    content.vb: Public Property Width As Single\n    parameters: []\n    return:\n      type: System.Single\n      description: \"\\n<p>The horizontal component of this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure, typically measured in pixels.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.Width\n- uid: System.Drawing.SizeF.Add(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.Add(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: Add(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Add(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Add(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 178\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Adds the width and height of one <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the width and height of another <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SizeF Add(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Function Add(sz1 As SizeF, sz2 As SizeF) As SizeF\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The first <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add.</p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The second <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add.</p>\\n\"\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is the result of the addition operation.</p>\\n\"\n  seealso:\n  - type: System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n    commentId: M:System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Add(SizeF, SizeF)\n- uid: System.Drawing.SizeF.Equals(System.Object)\n  commentId: M:System.Drawing.SizeF.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Drawing.SizeF.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 201\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests to see whether the specified object is a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with the same dimensions as this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to test. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This method returns <strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and has the same width and height as this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SizeF.Equals(Object)\n- uid: System.Drawing.SizeF.GetHashCode\n  commentId: M:System.Drawing.SizeF.GetHashCode\n  id: GetHashCode\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Drawing.SizeF.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 211\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Returns a hash code for this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value that specifies a hash value for this <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SizeF.GetHashCode()\n- uid: System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: op_Addition(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Addition(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Addition(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 72\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Adds the width and height of one <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to the width and height of another <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SizeF operator +(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Operator +(sz1 As SizeF, sz2 As SizeF) As SizeF\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The first <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The second <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to add. </p>\\n\"\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is the result of the addition operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Addition(SizeF, SizeF)\n- uid: System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: op_Equality(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Equality(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Equality(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 91\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Operator =(sz1 As SizeF, sz2 As SizeF) As Boolean\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the equality operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right of the equality operator. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This operator returns <strong>true</strong> if <em>sz1</em> and <em>sz2</em> have equal width and height; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Equality(SizeF, SizeF)\n- uid: System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)~System.Drawing.PointF\n  commentId: M:System.Drawing.SizeF.op_Explicit(System.Drawing.SizeF)~System.Drawing.PointF\n  id: op_Explicit(System.Drawing.SizeF)~System.Drawing.PointF\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Explicit(SizeF to PointF)\n  fullName: System.Drawing.SizeF.Explicit(System.Drawing.SizeF to System.Drawing.PointF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 112\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts the specified <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static explicit operator PointF(SizeF size)\n    content.vb: Public Shared Narrowing Operator CType(size As SizeF) As PointF\n    parameters:\n    - id: size\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to be converted</p>\\n\"\n    return:\n      type: System.Drawing.PointF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to which this operator converts.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Drawing.SizeF.Narrowing(System.Drawing.SizeF to System.Drawing.PointF)\n  name.vb: Narrowing(SizeF to PointF)\n  nameWithType: SizeF.Explicit(SizeF to PointF)\n  nameWithType.vb: SizeF.Narrowing(SizeF to PointF)\n- uid: System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: op_Inequality(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Inequality(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Inequality(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 101\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Tests whether two <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structures are different.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Operator <>(sz1 As SizeF, sz2 As SizeF) As Boolean\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left of the inequality operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right of the inequality operator. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This operator returns <strong>true</strong> if <em>sz1</em> and <em>sz2</em> differ either in width or height; <strong>false</strong> if <em>sz1</em> and <em>sz2</em> are equal.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Inequality(SizeF, SizeF)\n- uid: System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Subtraction(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 82\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Subtracts the width and height of one <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the width and height of another <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SizeF operator -(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Operator -(sz1 As SizeF, sz2 As SizeF) As SizeF\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the subtraction operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right side of the subtraction operator. </p>\\n\"\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the result of the subtraction operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Subtraction(SizeF, SizeF)\n- uid: System.Drawing.SizeF.Subtract(System.Drawing.SizeF,System.Drawing.SizeF)\n  commentId: M:System.Drawing.SizeF.Subtract(System.Drawing.SizeF,System.Drawing.SizeF)\n  id: Subtract(System.Drawing.SizeF,System.Drawing.SizeF)\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: Subtract(SizeF, SizeF)\n  fullName: System.Drawing.SizeF.Subtract(System.Drawing.SizeF, System.Drawing.SizeF)\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 189\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Subtracts the width and height of one <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure from the width and height of another <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public static SizeF Subtract(SizeF sz1, SizeF sz2)\n    content.vb: Public Shared Function Subtract(sz1 As SizeF, sz2 As SizeF) As SizeF\n    parameters:\n    - id: sz1\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the left side of the subtraction operator. </p>\\n\"\n    - id: sz2\n      type: System.Drawing.SizeF\n      description: \"\\n<p>The <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure on the right side of the subtraction operator. </p>\\n\"\n    return:\n      type: System.Drawing.SizeF\n      description: \"\\n<p>A <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure that is a result of the subtraction operation.</p>\\n\"\n  seealso:\n  - type: System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n    commentId: M:System.Drawing.SizeF.op_Subtraction(System.Drawing.SizeF,System.Drawing.SizeF)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SizeF.Subtract(SizeF, SizeF)\n- uid: System.Drawing.SizeF.ToPointF\n  commentId: M:System.Drawing.SizeF.ToPointF\n  id: ToPointF\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: ToPointF()\n  fullName: System.Drawing.SizeF.ToPointF()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToPointF\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 216\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public PointF ToPointF()\n    content.vb: Public Function ToPointF As PointF\n    return:\n      type: System.Drawing.PointF\n      description: \"\\n<p>Returns a <xref href=\\\"System.Drawing.PointF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.ToPointF()\n- uid: System.Drawing.SizeF.ToSize\n  commentId: M:System.Drawing.SizeF.ToSize\n  id: ToSize\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: ToSize()\n  fullName: System.Drawing.SizeF.ToSize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToSize\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 221\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Converts a <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure to a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public Size ToSize()\n    content.vb: Public Function ToSize As Size\n    return:\n      type: System.Drawing.Size\n      description: \"\\n<p>Returns a <xref href=\\\"System.Drawing.Size\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SizeF.ToSize()\n- uid: System.Drawing.SizeF.ToString\n  commentId: M:System.Drawing.SizeF.ToString\n  id: ToString\n  parent: System.Drawing.SizeF\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Drawing.SizeF.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Drawing.Primitives/src/System/Drawing/SizeF.cs\n    startLine: 232\n  assemblies:\n  - System.Drawing.Primitives\n  namespace: System.Drawing\n  summary: \"\\n<p>Creates a human-readable string that represents this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents this <xref href=\\\"System.Drawing.SizeF\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SizeF.ToString()\nreferences:\n- uid: System.Drawing\n  isExternal: false\n  name: System.Drawing\n  fullName: System.Drawing\n  nameWithType: System.Drawing\n  commentId: N:System.Drawing\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Drawing.SizeF\n  parent: System.Drawing\n  isExternal: false\n  name: SizeF\n  fullName: System.Drawing.SizeF\n  nameWithType: SizeF\n  commentId: T:System.Drawing.SizeF\n- uid: System.Drawing.PointF\n  parent: System.Drawing\n  isExternal: false\n  name: PointF\n  fullName: System.Drawing.PointF\n  nameWithType: PointF\n  commentId: T:System.Drawing.PointF\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Drawing.Size\n  parent: System.Drawing\n  isExternal: false\n  name: Size\n  fullName: System.Drawing.Size\n  nameWithType: Size\n  commentId: T:System.Drawing.Size\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}