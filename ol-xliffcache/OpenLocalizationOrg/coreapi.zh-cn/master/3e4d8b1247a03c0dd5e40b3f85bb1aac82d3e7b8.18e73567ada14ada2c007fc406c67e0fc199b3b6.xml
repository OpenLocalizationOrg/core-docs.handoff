{"nodes":[{"pos":[1605,1615],"content":"MethodBase","needQuote":true,"nodes":[{"content":"MethodBase","pos":[0,10]}]},{"pos":[4258,4268],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[5583,5600],"content":"CallingConvention","needQuote":true,"nodes":[{"content":"CallingConvention","pos":[0,17]}]},{"pos":[7000,7025],"content":"ContainsGenericParameters","needQuote":true,"nodes":[{"content":"ContainsGenericParameters","pos":[0,25]}]},{"pos":[8824,8834],"content":"IsAbstract","needQuote":true,"nodes":[{"content":"IsAbstract","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the method is abstract; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9498,9594],"source":"\\n<p>\\n<strong>true</strong> if the method is abstract; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10063,10073],"content":"IsAssembly","needQuote":true,"nodes":[{"content":"IsAssembly","pos":[0,10]}]},{"pos":[12064,12077],"content":"IsConstructor","needQuote":true,"nodes":[{"content":"IsConstructor","pos":[0,13]}]},{"pos":[13563,13571],"content":"IsFamily","needQuote":true,"nodes":[{"content":"IsFamily","pos":[0,8]}]},{"pos":[15492,15511],"content":"IsFamilyAndAssembly","needQuote":true,"nodes":[{"content":"IsFamilyAndAssembly","pos":[0,19]}]},{"pos":[17495,17513],"content":"IsFamilyOrAssembly","needQuote":true,"nodes":[{"content":"IsFamilyOrAssembly","pos":[0,18]}]},{"pos":[19481,19488],"content":"IsFinal","needQuote":true,"nodes":[{"content":"IsFinal","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method is &lt;strong&gt;final&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20155,20266],"source":"\\n<p>\\n<strong>true</strong> if this method is <strong>final</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20658,20673],"content":"IsGenericMethod","needQuote":true,"nodes":[{"content":"IsGenericMethod","pos":[0,15]}]},{"pos":[22449,22474],"content":"IsGenericMethodDefinition","needQuote":true,"nodes":[{"content":"IsGenericMethodDefinition","pos":[0,25]}]},{"pos":[23970,23981],"content":"IsHideBySig","needQuote":true,"nodes":[{"content":"IsHideBySig","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the member is hidden by signature; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24720,24827],"source":"\\n<p>\\n<strong>true</strong> if the member is hidden by signature; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[25137,25146],"content":"IsPrivate","needQuote":true,"nodes":[{"content":"IsPrivate","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if access to this method is restricted to other members of the class itself; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25806,25952],"source":"\\n<p>\\n<strong>true</strong> if access to this method is restricted to other members of the class itself; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[26325,26333],"content":"IsPublic","needQuote":true,"nodes":[{"content":"IsPublic","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method is public; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26990,27085],"source":"\\n<p>\\n<strong>true</strong> if this method is public; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[27561,27574],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method has a special name; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28258,28362],"source":"\\n<p>\\n<strong>true</strong> if this method has a special name; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28836,28844],"content":"IsStatic","needQuote":true,"nodes":[{"content":"IsStatic","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method is &lt;strong&gt;static&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29515,29627],"source":"\\n<p>\\n<strong>true</strong> if this method is <strong>static</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30099,30108],"content":"IsVirtual","needQuote":true,"nodes":[{"content":"IsVirtual","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this method is &lt;strong&gt;virtual&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30784,30897],"source":"\\n<p>\\n<strong>true</strong> if this method is <strong>virtual</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[31253,31278],"content":"MethodImplementationFlags","needQuote":true,"nodes":[{"content":"MethodImplementationFlags","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The method implementation flags.&lt;/p&gt;\\n","pos":[32189,32232],"source":"\\n<p>The method implementation flags.</p>\\n"},{"pos":[32622,32636],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33352,33429],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33490,33619],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[34033,34054],"content":"GetGenericArguments()","needQuote":true,"nodes":[{"content":"GetGenericArguments()","pos":[0,21]}]},{"pos":[36576,36589],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[37223,37268],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[37755,37795],"content":"GetMethodFromHandle(RuntimeMethodHandle)","needQuote":true,"nodes":[{"content":"GetMethodFromHandle(RuntimeMethodHandle)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The method's handle.","pos":[38631,38656],"source":"\\n<p>The method's handle."},{"content":"&lt;/p&gt;\\n","pos":[38657,38663],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodBase&lt;/strong&gt; containing information about the method.&lt;/p&gt;\\n","pos":[38738,38819],"source":"\\n<p>A <strong>MethodBase</strong> containing information about the method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;handle&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[38930,38970],"source":"\\n<p>\\n<em>handle</em> is invalid.</p>\\n"},{"pos":[39631,39690],"content":"GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;A handle to the internal metadata representation of a constructor or method.&lt;/p&gt;\\n","pos":[40806,40893],"source":"\\n<p>A handle to the internal metadata representation of a constructor or method.</p>\\n"},{"content":"\\n&lt;p&gt;A handle to the generic type that defines the constructor or method.&lt;/p&gt;\\n","pos":[40976,41055],"source":"\\n<p>A handle to the generic type that defines the constructor or method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;handle&lt;/em&gt; is invalid.&lt;/p&gt;\\n","pos":[41475,41515],"source":"\\n<p>\\n<em>handle</em> is invalid.</p>\\n"},{"pos":[42018,42033],"content":"GetParameters()","needQuote":true,"nodes":[{"content":"GetParameters()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;An array of type &lt;strong&gt;ParameterInfo&lt;/strong&gt; containing information that matches the signature of the method (or constructor) reflected by this &lt;strong&gt;MethodBase&lt;/strong&gt; instance.&lt;/p&gt;\\n","pos":[42774,42969],"source":"\\n<p>An array of type <strong>ParameterInfo</strong> containing information that matches the signature of the method (or constructor) reflected by this <strong>MethodBase</strong> instance.</p>\\n"},{"pos":[43610,43634],"content":"Invoke(Object, Object[])","needQuote":true,"nodes":[{"content":"Invoke(Object, Object[])","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The object on which to invoke the method or constructor.","pos":[44536,44597],"source":"\\n<p>The object on which to invoke the method or constructor."},{"content":"If a method is static, this argument is ignored.","pos":[44598,44646]},{"content":"If a constructor is static, this argument must be &lt;strong&gt;null&lt;/strong&gt; or an instance of the class that defines the constructor.&lt;/p&gt;\\n","pos":[44647,44782],"source":" If a constructor is static, this argument must be <strong>null</strong> or an instance of the class that defines the constructor.</p>\\n"},{"content":"\\n&lt;p&gt;An argument list for the invoked method or constructor.","pos":[44853,44913],"source":"\\n<p>An argument list for the invoked method or constructor."},{"content":"This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked.","pos":[44914,45041]},{"content":"If there are no parameters, &lt;em&gt;parameters&lt;/em&gt; should be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;If the method or constructor represented by this instance takes a &lt;strong&gt;ref&lt;/strong&gt; parameter (&lt;strong&gt;ByRef&lt;/strong&gt; in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function.","pos":[45042,45387],"source":" If there are no parameters, <em>parameters</em> should be <strong>null</strong>.</p>\\n<p>If the method or constructor represented by this instance takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function."},{"content":"Any object in this array that is not explicitly initialized with a value will contain the default value for that object type.","pos":[45388,45513]},{"content":"For reference-type elements, this value is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45514,45579],"source":" For reference-type elements, this value is <strong>null</strong>."},{"content":"For value-type elements, this value is 0, 0.0, or &lt;strong&gt;false&lt;/strong&gt;, depending on the specific element type.","pos":[45580,45693],"source":" For value-type elements, this value is 0, 0.0, or <strong>false</strong>, depending on the specific element type."},{"content":"&lt;/p&gt;\\n","pos":[45694,45700],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object containing the return value of the invoked method, or &lt;strong&gt;null&lt;/strong&gt; in the case of a constructor.&lt;/p&gt;\\n&lt;p&gt;Elements of the &lt;em&gt;parameters&lt;/em&gt; array that represent parameters declared with the &lt;strong&gt;ref&lt;/strong&gt; or &lt;strong&gt;out&lt;/strong&gt; keyword may also be modified.&lt;/p&gt;\\n","pos":[45760,46055],"source":"\\n<p>An object containing the return value of the invoked method, or <strong>null</strong> in the case of a constructor.</p>\\n<p>Elements of the <em>parameters</em> array that represent parameters declared with the <strong>ref</strong> or <strong>out</strong> keyword may also be modified.</p>\\n"},{"content":"\\n&lt;p&gt;The elements of the &lt;em&gt;parameters&lt;/em&gt;array do not match the signature of the method or constructor reflected by this instance.","pos":[46862,46995],"source":"\\n<p>The elements of the <em>parameters</em>array do not match the signature of the method or constructor reflected by this instance."},{"content":"&lt;/p&gt;\\n","pos":[46996,47002],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;parameters&lt;/em&gt; array does not have the correct number of arguments.","pos":[47669,47750],"source":"\\n<p>The <em>parameters</em> array does not have the correct number of arguments."},{"content":"&lt;/p&gt;\\n","pos":[47751,47757],"source":" </p>\\n"},{"pos":[50432,50462],"content":"GetMethodImplementationFlags()","needQuote":true,"nodes":[{"content":"GetMethodImplementationFlags()","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;MethodImplAttributes&lt;/strong&gt; flags.&lt;/p&gt;\\n","pos":[51336,51395],"source":"\\n<p>The <strong>MethodImplAttributes</strong> flags.</p>\\n"},{"pos":[51856,51873],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[52037,52043],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52214,52224],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[52443,52467],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[52742,52758],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[53039,53052],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[53324,53337],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[53602,53608],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[53850,53854],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[54096,54106],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[54433,54486],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[54832,54876],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[54993,54994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55045,55052],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55113,55114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55269,55331],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[55448,55449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55500,55507],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55568,55569],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56085,56144],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[56521,56565],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[56682,56683],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56731,56735],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[56794,56795]},{"pos":[56851,56858],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[56919,56920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57087,57149],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[57266,57267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57315,57319],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[57378,57379]},{"pos":[57435,57442],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57503,57504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58034,58083],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[58430,58464],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[58571,58572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58620,58624],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[58683,58684]},{"pos":[58740,58747],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[58808,58809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58966,59018],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[59125,59126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59174,59178],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[59237,59238]},{"pos":[59294,59301],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[59362,59363],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59761,59771],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[59866,59874],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[59943,59944],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59971,59972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60042,60050],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60119,60120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60147,60148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60345,60367],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[60515,60521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60588,60589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60639,60645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[60706,60707]},{"pos":[60762,60768],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[60828,60829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60926,60932],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[60999,61000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61050,61056],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61117,61118]},{"pos":[61173,61179],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61239,61240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61485,61516],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[61682,61697],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[61773,61774],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61824,61830],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61891,61892]},{"pos":[61947,61953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62013,62014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62120,62135],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[62211,62212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62262,62268],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62329,62330]},{"pos":[62385,62391],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62451,62452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62678,62687],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[62780,62787],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[62855,62856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62883,62884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62953,62960],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[63028,63029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63056,63057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63232,63249],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[63358,63373],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[63449,63450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63477,63478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63555,63570],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[63646,63647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63674,63675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63820,63826],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[63989,64005],"content":"MethodAttributes","needQuote":true,"nodes":[{"content":"MethodAttributes","pos":[0,16]}]},{"pos":[64236,64254],"content":"CallingConventions","needQuote":true,"nodes":[{"content":"CallingConventions","pos":[0,18]}]},{"pos":[64458,64465],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[64649,64669],"content":"MethodImplAttributes","needQuote":true,"nodes":[{"content":"MethodImplAttributes","pos":[0,20]}]},{"pos":[64936,64950],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[65099,65105],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65166,65167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65217,65223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65283,65284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65382,65388],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65449,65450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65500,65506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65566,65567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65721,65727],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[65847,65851],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[65889,65891]},{"pos":[65954,65958],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[65995,65997],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[66179,66192],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[66323,66334],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[66400,66401],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66428,66429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66517,66528],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[66594,66595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66622,66623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66802,66807],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[66962,66981],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[67191,67201],"content":"MethodBase","needQuote":true,"nodes":[{"content":"MethodBase","pos":[0,10]}]},{"pos":[67391,67408],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[67569,67584],"content":"ParameterInfo[]","needQuote":true,"nodes":[{"content":"ParameterInfo[]","pos":[0,15]}]},{"pos":[67773,67786],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"content":"[]","pos":[67844,67846]},{"pos":[67929,67942],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"pos":[67999,68001],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[68117,68125],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[68253,68259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[68320,68322]},{"pos":[68387,68393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68453,68455],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[68607,68628],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[68829,68846],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[69027,69042],"content":"TargetException","needQuote":true,"nodes":[{"content":"TargetException","pos":[0,15]}]},{"pos":[69249,69274],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]},{"pos":[69515,69544],"content":"TargetParameterCountException","needQuote":true,"nodes":[{"content":"TargetParameterCountException","pos":[0,29]}]},{"pos":[69778,69799],"content":"MethodAccessException","needQuote":true,"nodes":[{"content":"MethodAccessException","pos":[0,21]}]},{"pos":[70008,70033],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Reflection.MethodBase\n  commentId: T:System.Reflection.MethodBase\n  id: MethodBase\n  parent: System.Reflection\n  children:\n  - System.Reflection.MethodBase.Attributes\n  - System.Reflection.MethodBase.CallingConvention\n  - System.Reflection.MethodBase.ContainsGenericParameters\n  - System.Reflection.MethodBase.Equals(System.Object)\n  - System.Reflection.MethodBase.GetGenericArguments\n  - System.Reflection.MethodBase.GetHashCode\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.GetMethodImplementationFlags\n  - System.Reflection.MethodBase.GetParameters\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsGenericMethod\n  - System.Reflection.MethodBase.IsGenericMethodDefinition\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.MethodImplementationFlags\n  langs:\n  - csharp\n  - vb\n  name: MethodBase\n  fullName: System.Reflection.MethodBase\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MethodBase\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 49\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Provides information about methods and constructors. </p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_MethodBase))]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Name = \"FullTrust\")]\n\n      [ComVisible(true)]\n\n      public abstract class MethodBase : MemberInfo, ICustomAttributeProvider, _MemberInfo, _MethodBase\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_MethodBase))>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Name:=\"FullTrust\")>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class MethodBase\n          Inherits MemberInfo\n          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.MemberType\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: MethodBase\n- uid: System.Reflection.MethodBase.Attributes\n  commentId: P:System.Reflection.MethodBase.Attributes\n  id: Attributes\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.MethodBase.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Attributes\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 174\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the attributes associated with this method.</p>\\n\"\n  syntax:\n    content: public abstract MethodAttributes Attributes { get; }\n    content.vb: Public MustOverride ReadOnly Property Attributes As MethodAttributes\n    parameters: []\n    return:\n      type: System.Reflection.MethodAttributes\n      description: \"\\n<p>One of the <xref href=\\\"System.Reflection.MethodAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: MethodBase.Attributes\n- uid: System.Reflection.MethodBase.CallingConvention\n  commentId: P:System.Reflection.MethodBase.CallingConvention\n  id: CallingConvention\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: CallingConvention\n  fullName: System.Reflection.MethodBase.CallingConvention\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CallingConvention\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 178\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating the calling conventions for this method.</p>\\n\"\n  syntax:\n    content: public virtual CallingConventions CallingConvention { get; }\n    content.vb: Public Overridable ReadOnly Property CallingConvention As CallingConventions\n    parameters: []\n    return:\n      type: System.Reflection.CallingConventions\n      description: \"\\n<p>The <xref href=\\\"System.Reflection.CallingConventions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this method.</p>\\n\"\n  seealso:\n  - type: System.Reflection.CallingConventions\n    commentId: T:System.Reflection.CallingConventions\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodBase.CallingConvention\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  commentId: P:System.Reflection.MethodBase.ContainsGenericParameters\n  id: ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: ContainsGenericParameters\n  fullName: System.Reflection.MethodBase.ContainsGenericParameters\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsGenericParameters\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 185\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the generic method contains unassigned generic type parameters.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsGenericParameters { get; }\n    content.vb: Public Overridable ReadOnly Property ContainsGenericParameters As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Reflection.MethodBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents a generic method that contains unassigned generic type parameters; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodBase.IsGenericMethod\n    commentId: P:System.Reflection.MethodBase.IsGenericMethod\n  - type: System.Reflection.MethodBase.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n  - type: System.Reflection.MethodInfo.ContainsGenericParameters\n    commentId: P:System.Reflection.MethodInfo.ContainsGenericParameters\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodBase.ContainsGenericParameters\n- uid: System.Reflection.MethodBase.IsAbstract\n  commentId: P:System.Reflection.MethodBase.IsAbstract\n  id: IsAbstract\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsAbstract\n  fullName: System.Reflection.MethodBase.IsAbstract\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAbstract\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 231\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is abstract.</p>\\n\"\n  syntax:\n    content: public bool IsAbstract { get; }\n    content.vb: Public ReadOnly Property IsAbstract As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the method is abstract; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Reflection.BindingFlags\n    commentId: T:System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  commentId: P:System.Reflection.MethodBase.IsAssembly\n  id: IsAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsAssembly\n  fullName: System.Reflection.MethodBase.IsAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsAssembly\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 217\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\\\"System.Reflection.MethodAttributes.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\\n\"\n  syntax:\n    content: public bool IsAssembly { get; }\n    content.vb: Public ReadOnly Property IsAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the visibility of this method or constructor is exactly described by <xref href=\\\"System.Reflection.MethodAttributes.Assembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  - type: System.Reflection.MethodBase.IsFamily\n    commentId: P:System.Reflection.MethodBase.IsFamily\n  - type: System.Reflection.MethodBase.IsFamilyOrAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n  - type: System.Reflection.MethodBase.IsFamilyAndAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  commentId: P:System.Reflection.MethodBase.IsConstructor\n  id: IsConstructor\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsConstructor\n  fullName: System.Reflection.MethodBase.IsConstructor\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsConstructor\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 235\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is a constructor.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public bool IsConstructor { get; }\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public ReadOnly Property IsConstructor As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method is a constructor represented by a <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object (see note in Remarks about <xref href=\\\"System.Reflection.Emit.ConstructorBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects); otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  commentId: P:System.Reflection.MethodBase.IsFamily\n  id: IsFamily\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsFamily\n  fullName: System.Reflection.MethodBase.IsFamily\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamily\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 215\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\\\"System.Reflection.MethodAttributes.Family\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the method or constructor is visible only within its class and derived classes.</p>\\n\"\n  syntax:\n    content: public bool IsFamily { get; }\n    content.vb: Public ReadOnly Property IsFamily As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\\\"System.Reflection.MethodAttributes.Family\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  - type: System.Reflection.MethodBase.IsAssembly\n    commentId: P:System.Reflection.MethodBase.IsAssembly\n  - type: System.Reflection.MethodBase.IsFamilyOrAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n  - type: System.Reflection.MethodBase.IsFamilyAndAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n  id: IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsFamilyAndAssembly\n  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamilyAndAssembly\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 219\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\\\"System.Reflection.MethodAttributes.FamANDAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</p>\\n\"\n  syntax:\n    content: public bool IsFamilyAndAssembly { get; }\n    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\\\"System.Reflection.MethodAttributes.FamANDAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  - type: System.Reflection.MethodBase.IsAssembly\n    commentId: P:System.Reflection.MethodBase.IsAssembly\n  - type: System.Reflection.MethodBase.IsFamilyOrAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n  - type: System.Reflection.MethodBase.IsFamily\n    commentId: P:System.Reflection.MethodBase.IsFamily\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n  id: IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsFamilyOrAssembly\n  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFamilyOrAssembly\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 221\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\\\"System.Reflection.MethodAttributes.FamORAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</p>\\n\"\n  syntax:\n    content: public bool IsFamilyOrAssembly { get; }\n    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\\\"System.Reflection.MethodAttributes.FamORAssem\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  - type: System.Reflection.MethodBase.IsAssembly\n    commentId: P:System.Reflection.MethodBase.IsAssembly\n  - type: System.Reflection.MethodBase.IsFamily\n    commentId: P:System.Reflection.MethodBase.IsFamily\n  - type: System.Reflection.MethodBase.IsFamilyAndAssembly\n    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  commentId: P:System.Reflection.MethodBase.IsFinal\n  id: IsFinal\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsFinal\n  fullName: System.Reflection.MethodBase.IsFinal\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFinal\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 225\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this method is <strong>final</strong>.</p>\\n\"\n  syntax:\n    content: public bool IsFinal { get; }\n    content.vb: Public ReadOnly Property IsFinal As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method is <strong>final</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  commentId: P:System.Reflection.MethodBase.IsGenericMethod\n  id: IsGenericMethod\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsGenericMethod\n  fullName: System.Reflection.MethodBase.IsGenericMethod\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsGenericMethod\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 187\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is generic.</p>\\n\"\n  syntax:\n    content: public virtual bool IsGenericMethod { get; }\n    content.vb: Public Overridable ReadOnly Property IsGenericMethod As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Reflection.MethodBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents a generic method; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodBase.ContainsGenericParameters\n    commentId: P:System.Reflection.MethodBase.ContainsGenericParameters\n  - type: System.Reflection.MethodBase.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n  - type: System.Reflection.MethodInfo.IsGenericMethod\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethod\n  - type: System.Type.IsGenericType\n    commentId: P:System.Type.IsGenericType\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodBase.IsGenericMethod\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n  id: IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsGenericMethodDefinition\n  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsGenericMethodDefinition\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 183\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is a generic method definition.</p>\\n\"\n  syntax:\n    content: public virtual bool IsGenericMethodDefinition { get; }\n    content.vb: Public Overridable ReadOnly Property IsGenericMethodDefinition As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Reflection.MethodBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents the definition of a generic method; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodBase.IsGenericMethodDefinition\n- uid: System.Reflection.MethodBase.IsHideBySig\n  commentId: P:System.Reflection.MethodBase.IsHideBySig\n  id: IsHideBySig\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsHideBySig\n  fullName: System.Reflection.MethodBase.IsHideBySig\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsHideBySig\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 229\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</p>\\n\"\n  syntax:\n    content: public bool IsHideBySig { get; }\n    content.vb: Public ReadOnly Property IsHideBySig As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the member is hidden by signature; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  commentId: P:System.Reflection.MethodBase.IsPrivate\n  id: IsPrivate\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsPrivate\n  fullName: System.Reflection.MethodBase.IsPrivate\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPrivate\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 213\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this member is private.</p>\\n\"\n  syntax:\n    content: public bool IsPrivate { get; }\n    content.vb: Public ReadOnly Property IsPrivate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to this method is restricted to other members of the class itself; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  commentId: P:System.Reflection.MethodBase.IsPublic\n  id: IsPublic\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsPublic\n  fullName: System.Reflection.MethodBase.IsPublic\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPublic\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 211\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this is a public method.</p>\\n\"\n  syntax:\n    content: public bool IsPublic { get; }\n    content.vb: Public ReadOnly Property IsPublic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method is public; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Reflection.BindingFlags\n    commentId: T:System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSpecialName\n  commentId: P:System.Reflection.MethodBase.IsSpecialName\n  id: IsSpecialName\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsSpecialName\n  fullName: System.Reflection.MethodBase.IsSpecialName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSpecialName\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 233\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this method has a special name.</p>\\n\"\n  syntax:\n    content: public bool IsSpecialName { get; }\n    content.vb: Public ReadOnly Property IsSpecialName As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method has a special name; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  commentId: P:System.Reflection.MethodBase.IsStatic\n  id: IsStatic\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsStatic\n  fullName: System.Reflection.MethodBase.IsStatic\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsStatic\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 223\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is <strong>static</strong>.</p>\\n\"\n  syntax:\n    content: public bool IsStatic { get; }\n    content.vb: Public ReadOnly Property IsStatic As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method is <strong>static</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  - type: System.Reflection.MethodAttributes\n    commentId: T:System.Reflection.MethodAttributes\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  commentId: P:System.Reflection.MethodBase.IsVirtual\n  id: IsVirtual\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: IsVirtual\n  fullName: System.Reflection.MethodBase.IsVirtual\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsVirtual\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 227\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether the method is <strong>virtual</strong>.</p>\\n\"\n  syntax:\n    content: public bool IsVirtual { get; }\n    content.vb: Public ReadOnly Property IsVirtual As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this method is <strong>virtual</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.MethodImplementationFlags\n  commentId: P:System.Reflection.MethodBase.MethodImplementationFlags\n  id: MethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: MethodImplementationFlags\n  fullName: System.Reflection.MethodBase.MethodImplementationFlags\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MethodImplementationFlags\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 162\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Reflection.MethodImplAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags that specify the attributes of a method implementation.</p>\\n\"\n  syntax:\n    content: public virtual MethodImplAttributes MethodImplementationFlags { get; }\n    content.vb: Public Overridable ReadOnly Property MethodImplementationFlags As MethodImplAttributes\n    parameters: []\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: \"\\n<p>The method implementation flags.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: MethodBase.MethodImplementationFlags\n- uid: System.Reflection.MethodBase.Equals(System.Object)\n  commentId: M:System.Reflection.MethodBase.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.MethodBase.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 123\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MethodBase.Equals(Object)\n- uid: System.Reflection.MethodBase.GetGenericArguments\n  commentId: M:System.Reflection.MethodBase.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetGenericArguments()\n  fullName: System.Reflection.MethodBase.GetGenericArguments()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGenericArguments\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 180\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public virtual Type[] GetGenericArguments()\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overridable Function GetGenericArguments As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current object is a <xref href=\\\"System.Reflection.ConstructorInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodBase.IsGenericMethod\n    commentId: P:System.Reflection.MethodBase.IsGenericMethod\n  - type: System.Reflection.MethodBase.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n  - type: System.Reflection.MethodInfo.GetGenericArguments\n    commentId: M:System.Reflection.MethodInfo.GetGenericArguments\n  - type: System.Reflection.MethodInfo.IsGenericMethod\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethod\n  - type: System.Type.IsGenericType\n    commentId: P:System.Type.IsGenericType\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MethodBase.GetGenericArguments()\n- uid: System.Reflection.MethodBase.GetHashCode\n  commentId: M:System.Reflection.MethodBase.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.MethodBase.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 128\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MethodBase.GetHashCode()\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  id: GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodFromHandle\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 59\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets method information by using the method's internal metadata representation (handle).</p>\\n\"\n  syntax:\n    content: public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle)\n    content.vb: Public Shared Function GetMethodFromHandle(handle As RuntimeMethodHandle) As MethodBase\n    parameters:\n    - id: handle\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>The method's handle. </p>\\n\"\n    return:\n      type: System.Reflection.MethodBase\n      description: \"\\n<p>A <strong>MethodBase</strong> containing information about the method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>handle</em> is invalid.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  id: GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodFromHandle\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 75\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.MethodBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the constructor or method represented by the specified handle, for the specified generic type.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Shared Function GetMethodFromHandle(handle As RuntimeMethodHandle, declaringType As RuntimeTypeHandle) As MethodBase\n    parameters:\n    - id: handle\n      type: System.RuntimeMethodHandle\n      description: \"\\n<p>A handle to the internal metadata representation of a constructor or method.</p>\\n\"\n    - id: declaringType\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>A handle to the generic type that defines the constructor or method.</p>\\n\"\n    return:\n      type: System.Reflection.MethodBase\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the method or constructor specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>handle</em> is invalid.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n- uid: System.Reflection.MethodBase.GetParameters\n  commentId: M:System.Reflection.MethodBase.GetParameters\n  id: GetParameters\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetParameters()\n  fullName: System.Reflection.MethodBase.GetParameters()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetParameters\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 159\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, gets the parameters of the specified method or constructor.</p>\\n\"\n  syntax:\n    content: public abstract ParameterInfo[] GetParameters()\n    content.vb: Public MustOverride Function GetParameters As ParameterInfo()\n    return:\n      type: System.Reflection.ParameterInfo[]\n      description: \"\\n<p>An array of type <strong>ParameterInfo</strong> containing information that matches the signature of the method (or constructor) reflected by this <strong>MethodBase</strong> instance.</p>\\n\"\n  seealso:\n  - type: System.Reflection.ParameterInfo\n    commentId: T:System.Reflection.ParameterInfo\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: MethodBase.GetParameters()\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  commentId: M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  id: Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: Invoke(Object, Object[])\n  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Invoke\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 198\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Invokes the method or constructor represented by the current instance, using the specified parameters.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerStepThrough]\n\n      [DebuggerHidden]\n\n      public object Invoke(object obj, object[] parameters)\n    content.vb: >-\n      <DebuggerStepThrough>\n\n      <DebuggerHidden>\n\n      Public Function Invoke(obj As Object, parameters As Object()) As Object\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be <strong>null</strong> or an instance of the class that defines the constructor.</p>\\n\"\n    - id: parameters\n      type: System.Object[]\n      description: \"\\n<p>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <em>parameters</em> should be <strong>null</strong>.</p>\\n<p>If the method or constructor represented by this instance takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <strong>null</strong>. For value-type elements, this value is 0, 0.0, or <strong>false</strong>, depending on the specific element type. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An object containing the return value of the invoked method, or <strong>null</strong> in the case of a constructor.</p>\\n<p>Elements of the <em>parameters</em> array that represent parameters declared with the <strong>ref</strong> or <strong>out</strong> keyword may also be modified.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.TargetException\n    commentId: T:System.Reflection.TargetException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead.</p>\\n<p>The <em>obj</em> parameter is <strong>null</strong> and the method is not static.</p>\\n<p>-or- </p>\\n<p>The method is not declared or inherited by the class of <em>obj</em>. </p>\\n<p>-or-</p>\\n<p>A static constructor is invoked, and <em>obj</em> is neither <strong>null</strong> nor an instance of the class that declared the constructor.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The elements of the <em>parameters</em>array do not match the signature of the method or constructor reflected by this instance. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The invoked method or constructor throws an exception. </p>\\n<p>-or-</p>\\n<p>The current instance is a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains unverifiable code. See the \\\"Verification\\\" section in Remarks for <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Reflection.TargetParameterCountException\n    commentId: T:System.Reflection.TargetParameterCountException\n    description: \"\\n<p>The <em>parameters</em> array does not have the correct number of arguments. </p>\\n\"\n  - type: System.MethodAccessException\n    commentId: T:System.MethodAccessException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.MemberAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The caller does not have permission to execute the method or constructor that is represented by the current instance. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The type that declares the method is an open generic type. That is, the <xref href=\\\"System.Type.ContainsGenericParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property returns <strong>true</strong> for the declaring type.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The current instance is a <xref href=\\\"System.Reflection.Emit.MethodBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.BindingFlags\n    commentId: T:System.Reflection.BindingFlags\n  - type: System.Reflection.Missing\n    commentId: T:System.Reflection.Missing\n  - type: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n    commentId: M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())\n  name.vb: Invoke(Object, Object())\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  nameWithType.vb: MethodBase.Invoke(Object, Object())\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n  commentId: M:System.Reflection.MethodBase.GetMethodImplementationFlags\n  id: GetMethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  langs:\n  - csharp\n  - vb\n  name: GetMethodImplementationFlags()\n  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMethodImplementationFlags\n    path: src/mscorlib/src/System/Reflection/MethodBase.cs\n    startLine: 170\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the <xref href=\\\"System.Reflection.MethodImplAttributes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags.</p>\\n\"\n  syntax:\n    content: public abstract MethodImplAttributes GetMethodImplementationFlags()\n    content.vb: Public MustOverride Function GetMethodImplementationFlags As MethodImplAttributes\n    return:\n      type: System.Reflection.MethodImplAttributes\n      description: \"\\n<p>The <strong>MethodImplAttributes</strong> flags.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodImplAttributes\n    commentId: T:System.Reflection.MethodImplAttributes\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: MethodBase.GetMethodImplementationFlags()\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.MethodAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodAttributes\n  fullName: System.Reflection.MethodAttributes\n  nameWithType: MethodAttributes\n  commentId: T:System.Reflection.MethodAttributes\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  nameWithType: CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.MethodImplAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n  nameWithType: MethodImplAttributes\n  commentId: T:System.Reflection.MethodImplAttributes\n- uid: System.Reflection.MemberInfo.Equals(System.Object)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MemberInfo.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MemberInfo.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.Equals(Object)\n  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.MemberInfo.GetHashCode\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MemberInfo.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MemberInfo.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.GetHashCode()\n  commentId: M:System.Reflection.MemberInfo.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.RuntimeMethodHandle\n  parent: System\n  isExternal: false\n  name: RuntimeMethodHandle\n  fullName: System.RuntimeMethodHandle\n  nameWithType: RuntimeMethodHandle\n  commentId: T:System.RuntimeMethodHandle\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  fullName: System.Reflection.MethodBase\n  nameWithType: MethodBase\n  commentId: T:System.Reflection.MethodBase\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  commentId: T:System.RuntimeTypeHandle\n- uid: System.Reflection.ParameterInfo[]\n  name: ParameterInfo[]\n  fullName: System.Reflection.ParameterInfo[]\n  fullname.vb: System.Reflection.ParameterInfo()\n  name.vb: ParameterInfo()\n  spec.csharp:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.ParameterInfo\n    name: ParameterInfo\n    fullName: System.Reflection.ParameterInfo\n  - name: ()\n    fullName: ()\n  nameWithType: ParameterInfo[]\n  nameWithType.vb: ParameterInfo()\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Reflection.TargetException\n  isExternal: false\n  name: TargetException\n  fullName: System.Reflection.TargetException\n  nameWithType: TargetException\n  commentId: T:System.Reflection.TargetException\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n- uid: System.Reflection.TargetParameterCountException\n  isExternal: false\n  name: TargetParameterCountException\n  fullName: System.Reflection.TargetParameterCountException\n  nameWithType: TargetParameterCountException\n  commentId: T:System.Reflection.TargetParameterCountException\n- uid: System.MethodAccessException\n  isExternal: false\n  name: MethodAccessException\n  fullName: System.MethodAccessException\n  nameWithType: MethodAccessException\n  commentId: T:System.MethodAccessException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}