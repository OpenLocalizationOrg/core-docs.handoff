{"nodes":[{"pos":[860,875],"content":"CredentialCache","needQuote":true,"nodes":[{"content":"CredentialCache","pos":[0,15]}]},{"pos":[2752,2769],"content":"CredentialCache()","needQuote":true,"nodes":[{"content":"CredentialCache()","pos":[0,17]}]},{"pos":[3713,3731],"content":"DefaultCredentials","needQuote":true,"nodes":[{"content":"DefaultCredentials","pos":[0,18]}]},{"pos":[5136,5161],"content":"DefaultNetworkCredentials","needQuote":true,"nodes":[{"content":"DefaultNetworkCredentials","pos":[0,25]}]},{"pos":[6799,6844],"content":"Add(String, Int32, String, NetworkCredential)","needQuote":true,"nodes":[{"content":"Add(String, Int32, String, NetworkCredential)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;host&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8917,8963],"source":"\\n<p>\\n<em>host</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;authType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8964,9031],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>authType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9032,9038],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;authType&lt;/em&gt; not an accepted value.","pos":[9135,9182],"source":"\\n<p>\\n<em>authType</em> not an accepted value."},{"content":"See Remarks.","pos":[9183,9195]},{"content":"&lt;/p&gt;\\n","pos":[9196,9202],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;port&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[9319,9364],"source":"\\n<p>\\n<em>port</em> is less than zero.</p>\\n"},{"pos":[9833,9868],"content":"Add(Uri, String, NetworkCredential)","needQuote":true,"nodes":[{"content":"Add(Uri, String, NetworkCredential)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The authentication scheme used by the resource named in &lt;em&gt;uriPrefix&lt;/em&gt;.","pos":[11096,11176],"source":"\\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>."},{"content":"&lt;/p&gt;\\n","pos":[11177,11183],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;uriPrefix&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11516,11567],"source":"\\n<p>\\n<em>uriPrefix</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;authType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11568,11636],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>authType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11637,11643],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The same credentials are added more than once.","pos":[11740,11791],"source":"\\n<p>The same credentials are added more than once."},{"content":"&lt;/p&gt;\\n","pos":[11792,11798],"source":" </p>\\n"},{"pos":[12248,12284],"content":"GetCredential(String, Int32, String)","needQuote":true,"nodes":[{"content":"GetCredential(String, Int32, String)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;host&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14201,14247],"source":"\\n<p>\\n<em>host</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;authType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14248,14316],"source":" </p>\\n<p>-or- </p>\\n<p>\\n<em>authType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14317,14323],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;port&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[14678,14723],"source":"\\n<p>\\n<em>port</em> is less than zero.</p>\\n"},{"pos":[15230,15256],"content":"GetCredential(Uri, String)","needQuote":true,"nodes":[{"content":"GetCredential(Uri, String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The authentication scheme used by the resource named in &lt;em&gt;uriPrefix&lt;/em&gt;.","pos":[16417,16497],"source":"\\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>."},{"content":"&lt;/p&gt;\\n","pos":[16498,16504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;uriPrefix&lt;/em&gt; or &lt;em&gt;authType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16875,16947],"source":"\\n<p>\\n<em>uriPrefix</em> or <em>authType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16948,16954],"source":" </p>\\n"},{"pos":[17351,17366],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[18803,18832],"content":"Remove(String, Int32, String)","needQuote":true,"nodes":[{"content":"Remove(String, Int32, String)","pos":[0,29]}]},{"pos":[20708,20727],"content":"Remove(Uri, String)","needQuote":true,"nodes":[{"content":"Remove(Uri, String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The authentication scheme used by the host named in &lt;em&gt;uriPrefix&lt;/em&gt;.","pos":[21849,21925],"source":"\\n<p>The authentication scheme used by the host named in <em>uriPrefix</em>."},{"content":"&lt;/p&gt;\\n","pos":[21926,21932],"source":" </p>\\n"},{"pos":[22102,22112],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[22255,22261],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22435,22446],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[22644,22656],"content":"ICredentials","needQuote":true,"nodes":[{"content":"ICredentials","pos":[0,12]}]},{"pos":[22847,22865],"content":"ICredentialsByHost","needQuote":true,"nodes":[{"content":"ICredentialsByHost","pos":[0,18]}]},{"pos":[23069,23079],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23174,23182],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23251,23252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23279,23280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23350,23358],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23427,23428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23455,23456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23639,23653],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[23772,23778],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23845,23846],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23896,23902],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23962,23963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24046,24052],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24119,24120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24170,24176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24236,24237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24451,24473],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24621,24627],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24694,24695],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24745,24751],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24812,24813]},{"pos":[24868,24874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24934,24935],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25032,25038],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25105,25106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25156,25162],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25223,25224]},{"pos":[25279,25285],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25345,25346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25591,25622],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[25788,25803],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25879,25880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25930,25936],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25997,25998]},{"pos":[26053,26059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26119,26120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26226,26241],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26317,26318],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26368,26374],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26435,26436]},{"pos":[26491,26497],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26557,26558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26788,26801],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[26902,26913],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26985,26986],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27013,27014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27087,27098],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27170,27171],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27198,27199],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27374,27383],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27476,27483],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27551,27552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27579,27580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27649,27656],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27724,27725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27752,27753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27928,27945],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28054,28069],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28145,28146],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28173,28174],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28251,28266],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28342,28343],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28370,28371],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28666,28679],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[28796,28807],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[28866,28867],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28894,28895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28976,28987],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[29046,29047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29074,29075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29430,29442],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[29575,29585],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[29652,29653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29680,29681],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29770,29780],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[29847,29848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29875,29876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30217,30232],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[30436,30449],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[30511,30512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30539,30540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30618,30634],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[30699,30700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30727,30728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31106,31123],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[31335,31350],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[31414,31415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31442,31443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31523,31541],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[31608,31609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31636,31637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31872,31878],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31997,32015],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[32216,32240],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[32419,32430],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32489,32490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32557,32568],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32645,32646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32759,32770],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[32829,32830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32897,32908],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32985,32986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33214,33223],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[33429,33452],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[33647,33657],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[33724,33725],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33792,33803],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33880,33881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34002,34012],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34079,34080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34147,34158],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34235,34236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34489,34507],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[34729,34755],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[35062,35075],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35137,35138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35205,35216],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[35293,35294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35404,35420],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[35485,35486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35553,35564],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[35641,35642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35931,35941],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[36141,36169],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[36484,36499],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[36563,36564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36631,36642],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[36719,36720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36832,36850],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36917,36918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36985,36996],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37073,37074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37336,37347],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[37512,37529],"content":"NetworkCredential","needQuote":true,"nodes":[{"content":"NetworkCredential","pos":[0,17]}]},{"pos":[37715,37721],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[37865,37870],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38009,38012],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"pos":[38242,38278],"content":"GetCredential(String, Int32, String)","needQuote":true,"nodes":[{"content":"GetCredential(String, Int32, String)","pos":[0,36]}]},{"pos":[38499,38512],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[38581,38582],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38632,38638],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[38699,38700]},{"pos":[38754,38759],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[38819,38820]},{"pos":[38875,38881],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[38941,38942],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39075,39088],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[39157,39158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39208,39214],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[39275,39276]},{"pos":[39330,39335],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[39395,39396]},{"pos":[39451,39457],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[39517,39518],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39840,39866],"content":"GetCredential(Uri, String)","needQuote":true,"nodes":[{"content":"GetCredential(Uri, String)","pos":[0,26]}]},{"pos":[40042,40055],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[40118,40119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40166,40169],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"content":",","pos":[40227,40228]},{"pos":[40283,40289],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40349,40350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40461,40474],"content":"GetCredential","needQuote":true,"nodes":[{"content":"GetCredential","pos":[0,13]}]},{"pos":[40537,40538],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40585,40588],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"content":",","pos":[40646,40647]},{"pos":[40702,40708],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40768,40769],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41042,41057],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[41196,41209],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[41279,41280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41307,41308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41400,41413],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[41483,41484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41511,41512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41728,41739],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[41921,41942],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[42143,42160],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[42342,42369],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Net.CredentialCache\n  commentId: T:System.Net.CredentialCache\n  id: CredentialCache\n  parent: System.Net\n  children:\n  - System.Net.CredentialCache.#ctor\n  - System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)\n  - System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)\n  - System.Net.CredentialCache.DefaultCredentials\n  - System.Net.CredentialCache.DefaultNetworkCredentials\n  - System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)\n  - System.Net.CredentialCache.GetCredential(System.Uri,System.String)\n  - System.Net.CredentialCache.GetEnumerator\n  - System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)\n  - System.Net.CredentialCache.Remove(System.Uri,System.String)\n  langs:\n  - csharp\n  - vb\n  name: CredentialCache\n  fullName: System.Net.CredentialCache\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CredentialCache\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 77\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides storage for multiple credentials.</p>\\n\"\n  syntax:\n    content: 'public class CredentialCache : IEnumerable, ICredentials, ICredentialsByHost'\n    content.vb: >-\n      Public Class CredentialCache\n          Implements IEnumerable, ICredentials, ICredentialsByHost\n  seealso:\n  - type: System.Net.ICredentials\n    commentId: T:System.Net.ICredentials\n  - type: System.Net.WebRequest.Credentials\n    commentId: P:System.Net.WebRequest.Credentials\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IEnumerable\n  - System.Net.ICredentials\n  - System.Net.ICredentialsByHost\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CredentialCache\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Net.CredentialCache.#ctor\n  commentId: M:System.Net.CredentialCache.#ctor\n  id: '#ctor'\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: CredentialCache()\n  fullName: System.Net.CredentialCache.CredentialCache()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 79\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Net.CredentialCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CredentialCache()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.CredentialCache()\n- uid: System.Net.CredentialCache.DefaultCredentials\n  commentId: P:System.Net.CredentialCache.DefaultCredentials\n  id: DefaultCredentials\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: DefaultCredentials\n  fullName: System.Net.CredentialCache.DefaultCredentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultCredentials\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 80\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the system credentials of the application.</p>\\n\"\n  syntax:\n    content: public static ICredentials DefaultCredentials { get; }\n    content.vb: Public Shared ReadOnly Property DefaultCredentials As ICredentials\n    parameters: []\n    return:\n      type: System.Net.ICredentials\n      description: \"\\n<p>An <xref href=\\\"System.Net.ICredentials\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the system credentials of the application.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CredentialCache.DefaultCredentials\n- uid: System.Net.CredentialCache.DefaultNetworkCredentials\n  commentId: P:System.Net.CredentialCache.DefaultNetworkCredentials\n  id: DefaultNetworkCredentials\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: DefaultNetworkCredentials\n  fullName: System.Net.CredentialCache.DefaultNetworkCredentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultNetworkCredentials\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 81\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the network credentials of the current security context.</p>\\n\"\n  syntax:\n    content: public static NetworkCredential DefaultNetworkCredentials { get; }\n    content.vb: Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential\n    parameters: []\n    return:\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>An <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the network credentials of the current user or application.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: CredentialCache.DefaultNetworkCredentials\n- uid: System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)\n  commentId: M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)\n  id: Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: Add(String, Int32, String, NetworkCredential)\n  fullName: System.Net.CredentialCache.Add(System.String, System.Int32, System.String, System.Net.NetworkCredential)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 82\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</p>\\n\"\n  syntax:\n    content: public void Add(string host, int port, string authenticationType, NetworkCredential credential)\n    content.vb: Public Sub Add(host As String, port As Integer, authenticationType As String, credential As NetworkCredential)\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the host computer.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the port to connect to on <em>host</em>.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the authentication scheme used when connecting to <em>host</em> using <em>cred</em>. See Remarks.</p>\\n\"\n    - id: credential\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>The <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the credential cache. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>host</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>authType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>authType</em> not an accepted value. See Remarks. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.Add(String, Int32, String, NetworkCredential)\n- uid: System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)\n  commentId: M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)\n  id: Add(System.Uri,System.String,System.Net.NetworkCredential)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: Add(Uri, String, NetworkCredential)\n  fullName: System.Net.CredentialCache.Add(System.Uri, System.String, System.Net.NetworkCredential)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 83\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Adds a <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol. </p>\\n\"\n  syntax:\n    content: public void Add(Uri uriPrefix, string authType, NetworkCredential cred)\n    content.vb: Public Sub Add(uriPrefix As Uri, authType As String, cred As NetworkCredential)\n    parameters:\n    - id: uriPrefix\n      type: System.Uri\n      description: \"\\n<p>A <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\\n\"\n    - id: authType\n      type: System.String\n      description: \"\\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\\n\"\n    - id: cred\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>The <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the credential cache. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>uriPrefix</em> is <strong>null</strong>. </p>\\n<p>-or- </p>\\n<p>\\n<em>authType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The same credentials are added more than once. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.Add(Uri, String, NetworkCredential)\n- uid: System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)\n  commentId: M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)\n  id: GetCredential(System.String,System.Int32,System.String)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: GetCredential(String, Int32, String)\n  fullName: System.Net.CredentialCache.GetCredential(System.String, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCredential\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 84\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance associated with the specified host, port, and authentication protocol.</p>\\n\"\n  syntax:\n    content: public NetworkCredential GetCredential(string host, int port, string authenticationType)\n    content.vb: Public Function GetCredential(host As String, port As Integer, authenticationType As String) As NetworkCredential\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the host computer.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the port to connect to on <em>host</em>.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\\n\"\n    return:\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>host</em> is <strong>null</strong>. </p>\\n<p>-or- </p>\\n<p>\\n<em>authType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>authType</em> not an accepted value. See Remarks. </p>\\n<p>-or-</p>\\n<p>\\n<em>host</em> is equal to the empty string (\\\"\\\").</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than zero.</p>\\n\"\n  implements:\n  - System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.GetCredential(String, Int32, String)\n- uid: System.Net.CredentialCache.GetCredential(System.Uri,System.String)\n  commentId: M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)\n  id: GetCredential(System.Uri,System.String)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: GetCredential(Uri, String)\n  fullName: System.Net.CredentialCache.GetCredential(System.Uri, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCredential\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 85\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</p>\\n\"\n  syntax:\n    content: public NetworkCredential GetCredential(Uri uriPrefix, string authType)\n    content.vb: Public Function GetCredential(uriPrefix As Uri, authType As String) As NetworkCredential\n    parameters:\n    - id: uriPrefix\n      type: System.Uri\n      description: \"\\n<p>A <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\\n\"\n    - id: authType\n      type: System.String\n      description: \"\\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\\n\"\n    return:\n      type: System.Net.NetworkCredential\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>uriPrefix</em> or <em>authType</em> is <strong>null</strong>. </p>\\n\"\n  implements:\n  - System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.GetCredential(Uri, String)\n- uid: System.Net.CredentialCache.GetEnumerator\n  commentId: M:System.Net.CredentialCache.GetEnumerator\n  id: GetEnumerator\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Net.CredentialCache.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 86\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns an enumerator that can iterate through the <xref href=\\\"System.Net.CredentialCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Net.CredentialCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.GetEnumerator()\n- uid: System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)\n  commentId: M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)\n  id: Remove(System.String,System.Int32,System.String)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: Remove(String, Int32, String)\n  fullName: System.Net.CredentialCache.Remove(System.String, System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 87\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Deletes a <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance from the cache if it is associated with the specified host, port, and authentication protocol.</p>\\n\"\n  syntax:\n    content: public void Remove(string host, int port, string authenticationType)\n    content.vb: Public Sub Remove(host As String, port As Integer, authenticationType As String)\n    parameters:\n    - id: host\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the host computer.</p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>A <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the port to connect to on <em>host</em>.</p>\\n\"\n    - id: authenticationType\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.Remove(String, Int32, String)\n- uid: System.Net.CredentialCache.Remove(System.Uri,System.String)\n  commentId: M:System.Net.CredentialCache.Remove(System.Uri,System.String)\n  id: Remove(System.Uri,System.String)\n  parent: System.Net.CredentialCache\n  langs:\n  - csharp\n  - vb\n  name: Remove(Uri, String)\n  fullName: System.Net.CredentialCache.Remove(System.Uri, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 88\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Deletes a <xref href=\\\"System.Net.NetworkCredential\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\\n\"\n  syntax:\n    content: public void Remove(Uri uriPrefix, string authType)\n    content.vb: Public Sub Remove(uriPrefix As Uri, authType As String)\n    parameters:\n    - id: uriPrefix\n      type: System.Uri\n      description: \"\\n<p>A <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the URI prefix of the resources that the credential is used for. </p>\\n\"\n    - id: authType\n      type: System.String\n      description: \"\\n<p>The authentication scheme used by the host named in <em>uriPrefix</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CredentialCache.Remove(Uri, String)\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Net.ICredentials\n  parent: System.Net\n  isExternal: false\n  name: ICredentials\n  fullName: System.Net.ICredentials\n  commentId: T:System.Net.ICredentials\n  nameWithType: ICredentials\n- uid: System.Net.ICredentialsByHost\n  parent: System.Net\n  isExternal: false\n  name: ICredentialsByHost\n  fullName: System.Net.ICredentialsByHost\n  commentId: T:System.Net.ICredentialsByHost\n  nameWithType: ICredentialsByHost\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Net.NetworkCredential\n  parent: System.Net\n  isExternal: false\n  name: NetworkCredential\n  fullName: System.Net.NetworkCredential\n  commentId: T:System.Net.NetworkCredential\n  nameWithType: NetworkCredential\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  fullName: System.Uri\n  commentId: T:System.Uri\n  nameWithType: Uri\n- uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  parent: System.Net.ICredentialsByHost\n  isExternal: true\n  name: GetCredential(String, Int32, String)\n  fullName: System.Net.ICredentialsByHost.GetCredential(System.String, System.Int32, System.String)\n  spec.csharp:\n  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentialsByHost.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentialsByHost.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)\n  nameWithType: ICredentialsByHost.GetCredential(String, Int32, String)\n- uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  parent: System.Net.ICredentials\n  isExternal: true\n  name: GetCredential(Uri, String)\n  fullName: System.Net.ICredentials.GetCredential(System.Uri, System.String)\n  spec.csharp:\n  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentials.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.Uri\n    name: Uri\n    fullName: System.Uri\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)\n    name: GetCredential\n    fullName: System.Net.ICredentials.GetCredential\n  - name: (\n    fullName: (\n  - uid: System.Uri\n    name: Uri\n    fullName: System.Uri\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.ICredentials.GetCredential(System.Uri,System.String)\n  nameWithType: ICredentials.GetCredential(Uri, String)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}