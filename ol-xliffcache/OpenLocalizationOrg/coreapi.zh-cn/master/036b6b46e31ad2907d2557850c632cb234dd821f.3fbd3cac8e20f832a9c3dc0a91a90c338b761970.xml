{"nodes":[{"pos":[689,700],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[2111,2122],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[3365,3375],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[4632,4644],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key of the element to get or set.","pos":[5305,5347],"source":"\\n<p>The key of the element to get or set."},{"content":"&lt;/p&gt;\\n","pos":[5348,5354],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The element with the specified key, or &lt;strong&gt;null&lt;/strong&gt; if the key does not exist.&lt;/p&gt;\\n","pos":[5414,5512],"source":"\\n<p>The element with the specified key, or <strong>null</strong> if the key does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5631,5676],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5677,5683],"source":" </p>\\n"},{"pos":[6706,6710],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[8158,8164],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[9704,9723],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10941,10986],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10987,10993],"source":" </p>\\n"},{"pos":[11985,11992],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[13108,13124],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14413,14458],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14459,14465],"source":" </p>\\n"},{"pos":[14720,14735],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[16307,16321],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.","pos":[17057,17095],"source":"\\n<p>The key of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[17096,17102],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17221,17266],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17267,17273],"source":" </p>\\n"},{"pos":[17751,17769],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[17983,17988],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[18246,18260],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[18539,18547],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[18832,18852],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[19030,19036],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[19099,19100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19149,19154],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[19193,19194]},{"pos":[19248,19253],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19312,19313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19425,19431],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[19494,19495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19544,19549],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[19588,19589]},{"pos":[19643,19648],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[19707,19708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19949,19960],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[20145,20152],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20276,20282],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20413,20419],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20603,20624],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[20836,20857],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[21062,21083],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[21284,21301],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.IDictionary\n  commentId: T:System.Collections.IDictionary\n  id: IDictionary\n  parent: System.Collections\n  children:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  - System.Collections.IDictionary.Clear\n  - System.Collections.IDictionary.Contains(System.Object)\n  - System.Collections.IDictionary.GetEnumerator\n  - System.Collections.IDictionary.IsFixedSize\n  - System.Collections.IDictionary.IsReadOnly\n  - System.Collections.IDictionary.Item(System.Object)\n  - System.Collections.IDictionary.Keys\n  - System.Collections.IDictionary.Remove(System.Object)\n  - System.Collections.IDictionary.Values\n  langs:\n  - csharp\n  - vb\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  type: Interface\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IDictionary\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a nongeneric collection of key/value pairs.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public interface IDictionary : ICollection, IEnumerable\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Interface IDictionary\n          Inherits ICollection\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  inheritedMembers:\n  - System.Collections.ICollection.Count\n  - System.Collections.ICollection.IsSynchronized\n  - System.Collections.ICollection.SyncRoot\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IDictionary\n- uid: System.Collections.IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFixedSize\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 58\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IsFixedSize { get; }\n    content.vb: ReadOnly Property IsFixedSize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionary.IsFixedSize\n- uid: System.Collections.IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 55\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  syntax:\n    content: bool IsReadOnly { get; }\n    content.vb: ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionary.IsReadOnly\n- uid: System.Collections.IDictionary.Item(System.Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 29\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the element with the specified key.</p>\\n\"\n  syntax:\n    content: object this[object key] { get; set; }\n    content.vb: Property Item(key As Object) As Object\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element with the specified key, or <strong>null</strong> if the key does not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Add(System.Object,System.Object)\n    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n- uid: System.Collections.IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n  id: Keys\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Keys\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys of the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: ICollection Keys { get; }\n    content.vb: ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys of the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionary.Keys\n- uid: System.Collections.IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n  id: Values\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Values\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: ICollection Values { get; }\n    content.vb: ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDictionary.Values\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an element with the provided key and value to the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: void Add(object key, object value)\n    content.vb: Sub Add(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the key of the element to add. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the value of the element to add. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An element with the same key already exists in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Item(System.Object)\n    commentId: P:System.Collections.IDictionary.Item(System.Object)\n  nameWithType: IDictionary.Add(Object, Object)\n- uid: System.Collections.IDictionary.Clear\n  commentId: M:System.Collections.IDictionary.Clear\n  id: Clear\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 53\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: void Clear()\n    content.vb: Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only. </p>\\n\"\n  nameWithType: IDictionary.Clear()\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains an element with the specified key.</p>\\n\"\n  syntax:\n    content: bool Contains(object key)\n    content.vb: Function Contains(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  nameWithType: IDictionary.Contains(Object)\n- uid: System.Collections.IDictionary.GetEnumerator\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 62\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: IDictionaryEnumerator GetEnumerator()\n    content.vb: Function GetEnumerator As IDictionaryEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  nameWithType: IDictionary.GetEnumerator()\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.IDictionary\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/IDictionary.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/IDictionary.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: void Remove(object key)\n    content.vb: Sub Remove(key As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  nameWithType: IDictionary.Remove(Object)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}