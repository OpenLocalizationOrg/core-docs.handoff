{"nodes":[{"pos":[2633,2646],"content":"Collection<T>","needQuote":true,"nodes":[{"content":"Collection&lt;T&gt;","pos":[0,13],"source":"Collection<T>"}]},{"content":"\\n&lt;p&gt;The type of elements in the collection.&lt;/p&gt;\\n","pos":[3906,3956],"source":"\\n<p>The type of elements in the collection.</p>\\n"},{"pos":[5222,5234],"content":"Collection()","needQuote":true,"nodes":[{"content":"Collection()","pos":[0,12]}]},{"pos":[6495,6515],"content":"Collection(IList<T>)","needQuote":true,"nodes":[{"content":"Collection(IList&lt;T&gt;)","pos":[0,20],"source":"Collection(IList<T>)"}]},{"content":"\\n&lt;p&gt;The list that is wrapped by the new collection.&lt;/p&gt;\\n","pos":[7403,7461],"source":"\\n<p>The list that is wrapped by the new collection.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7580,7632],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n"},{"pos":[8175,8180],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[9800,9811],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[10526,10587],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[10639,10685],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[11816,11821],"content":"Items","needQuote":true,"nodes":[{"content":"Items","pos":[0,5]}]},{"pos":[13566,13591],"content":"ICollection<T>.IsReadOnly","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.IsReadOnly","pos":[0,25],"source":"ICollection<T>.IsReadOnly"}]},{"pos":[15776,15802],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[18070,18090],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[20234,20251],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[22241,22257],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[24253,24270],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[25104,25165],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[25225,25271],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[26423,26429],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[28831,28838],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[30192,30204],"content":"ClearItems()","needQuote":true,"nodes":[{"content":"ClearItems()","pos":[0,12]}]},{"pos":[31557,31568],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[33562,33580],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[34966,35040],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35159,35212],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[35329,35375],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[36344,36359],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[38098,38108],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[40153,40169],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;item&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[40996,41070],"source":"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The object to insert.","pos":[41125,41151],"source":"\\n<p>The object to insert."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt; for reference types.&lt;/p&gt;\\n","pos":[41152,41217],"source":" The value can be <strong>null</strong> for reference types.</p>\\n"},{"pos":[42455,42475],"content":"InsertItem(Int32, T)","needQuote":true,"nodes":[{"content":"InsertItem(Int32, T)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;item&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[43345,43419],"source":"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;The object to insert.","pos":[43474,43500],"source":"\\n<p>The object to insert."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt; for reference types.&lt;/p&gt;\\n","pos":[43501,43566],"source":" The value can be <strong>null</strong> for reference types.</p>\\n"},{"pos":[44613,44622],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[47034,47049],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to remove.&lt;/p&gt;\\n","pos":[47862,47919],"source":"\\n<p>The zero-based index of the element to remove.</p>\\n"},{"pos":[49370,49387],"content":"RemoveItem(Int32)","needQuote":true,"nodes":[{"content":"RemoveItem(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to remove.&lt;/p&gt;\\n","pos":[50234,50291],"source":"\\n<p>The zero-based index of the element to remove.</p>\\n"},{"pos":[51381,51398],"content":"SetItem(Int32, T)","needQuote":true,"nodes":[{"content":"SetItem(Int32, T)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to replace.&lt;/p&gt;\\n","pos":[52145,52203],"source":"\\n<p>The zero-based index of the element to replace.</p>\\n"},{"content":"\\n&lt;p&gt;The new value for the element at the specified index.","pos":[52258,52316],"source":"\\n<p>The new value for the element at the specified index."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt; for reference types.&lt;/p&gt;\\n","pos":[52317,52382],"source":" The value can be <strong>null</strong> for reference types.</p>\\n"},{"pos":[53713,53745],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[55280,55354],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[55473,55520],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[55521,55527],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.","pos":[55644,55684],"source":"\\n<p>\\n<em>index</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[55685,55691],"source":" </p>\\n"},{"pos":[57153,57180],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[59011,59028],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The position into which the new element was inserted.&lt;/p&gt;\\n","pos":[60126,60190],"source":"\\n<p>The position into which the new element was inserted.</p>\\n"},{"pos":[61163,61185],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"pos":[63590,63611],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;value&lt;/em&gt; if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[64759,64834],"source":"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n"},{"pos":[65860,65887],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[66808,66883],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"pos":[68429,68449],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"pos":[70232,70262],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[70465,70471],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70689,70697],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[70892,70897],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[70955,70956],"content":"<","needQuote":true,"nodes":[]},{"pos":[70983,70984],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71098,71103],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[71162,71165]},{"pos":[71199,71200],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71227,71228],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71504,71518],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[71737,71748],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[71812,71813],"content":"<","needQuote":true,"nodes":[]},{"pos":[71840,71841],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71961,71972],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[72037,72040]},{"pos":[72074,72075],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72102,72103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72401,72417],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[72644,72657],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[72723,72724],"content":"<","needQuote":true,"nodes":[]},{"pos":[72751,72752],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72874,72887],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[72954,72957]},{"pos":[72991,72992],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73019,73020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73336,73358],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[73609,73628],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[73700,73701],"content":"<","needQuote":true,"nodes":[]},{"pos":[73728,73729],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73857,73876],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[73949,73952]},{"pos":[73986,73987],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74014,74015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74333,74347],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[74566,74577],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74641,74642],"content":"<","needQuote":true,"nodes":[]},{"pos":[74669,74670],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74790,74801],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[74866,74869]},{"pos":[74903,74904],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74931,74932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75164,75169],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[75364,75375],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[75588,75599],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75798,75808],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[75903,75911],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75980,75981],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76008,76009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76079,76087],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76156,76157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76184,76185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76368,76382],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[76501,76507],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76574,76575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76625,76631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76691,76692],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76775,76781],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76848,76849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76899,76905],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76965,76966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77180,77202],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[77350,77356],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77423,77424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77474,77480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77541,77542]},{"pos":[77597,77603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77663,77664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77761,77767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77834,77835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77885,77891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77952,77953]},{"pos":[78008,78014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78074,78075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78320,78351],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[78517,78532],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78608,78609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78659,78665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78726,78727]},{"pos":[78782,78788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78848,78849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78955,78970],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[79046,79047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79097,79103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[79164,79165]},{"pos":[79220,79226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79286,79287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79517,79530],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[79631,79642],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79714,79715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79742,79743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79816,79827],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79899,79900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79927,79928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80103,80112],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[80205,80212],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[80280,80281],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80308,80309],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80378,80385],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[80453,80454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80481,80482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80657,80674],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[80783,80798],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80874,80875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80902,80903],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80980,80995],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[81071,81072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81099,81100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81245,81251],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[81386,81394],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[81589,81594],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[81652,81653],"content":"<","needQuote":true,"nodes":[]},{"pos":[81680,81681],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81795,81800],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[81859,81862]},{"pos":[81896,81897],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81924,81925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82110,82136],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[82337,82351],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[82570,82581],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[82645,82646],"content":"<","needQuote":true,"nodes":[]},{"pos":[82673,82674],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82794,82805],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[82870,82873]},{"pos":[82907,82908],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82935,82936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83155,83171],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[83398,83411],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[83477,83478],"content":"<","needQuote":true,"nodes":[]},{"pos":[83505,83506],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83628,83641],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[83708,83711]},{"pos":[83745,83746],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83773,83774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84005,84027],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[84278,84297],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[84369,84370],"content":"<","needQuote":true,"nodes":[]},{"pos":[84397,84398],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84526,84545],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[84618,84621]},{"pos":[84655,84656],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84683,84684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84925,84939],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[85158,85169],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[85233,85234],"content":"<","needQuote":true,"nodes":[]},{"pos":[85261,85262],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85382,85393],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[85458,85461]},{"pos":[85495,85496],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[85523,85524],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85719,85737],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[86018,86023],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[86498,86503],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[86927,86932],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[87133,87138],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87296,87301],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[87660,87665],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[88162,88173],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[88425,88429],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[88496,88497]},{"pos":[88549,88554],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[88614,88615]},{"pos":[88719,88723],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[88792,88793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88842,88847],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88906,88907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89287,89298],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[89574,89578],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[89653,89654]},{"pos":[89706,89711],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[89771,89772]},{"pos":[89884,89888],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[89965,89966],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90015,90020],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90079,90080],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90309,90310],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[90450,90461],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[90713,90717],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[90784,90785]},{"pos":[90837,90842],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[90902,90903]},{"pos":[91007,91011],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[91080,91081],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91130,91135],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91194,91195],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91457,91468],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[91744,91748],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[91823,91824]},{"pos":[91876,91881],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[91941,91942]},{"pos":[92054,92058],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[92135,92136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92185,92190],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92249,92250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92477,92478],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[92701,92711],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[93074,93081],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[93250,93260],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[93676,93690],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[93969,93977],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[94229,94240],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[94482,94492],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[94738,94749],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[94966,94970],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[95026,95027]},{"pos":[95079,95084],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[95144,95145]},{"pos":[95239,95243],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[95298,95299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95348,95353],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95412,95413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95745,95751],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[95963,95966],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[96037,96038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96065,96066],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[96093,96094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96190,96193],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[96267,96268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96295,96296],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[96323,96324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96573,96579],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[96791,96794],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[96865,96866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96893,96894],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[96921,96922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97018,97021],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[97095,97096],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97123,97124],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[97151,97152],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97495,97502],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[97714,97719],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[97792,97793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97820,97821],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97915,97920],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[97996,97997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98024,98025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98291,98298],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[98409,98414],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[98470,98471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98498,98499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98577,98582],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[98638,98639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98666,98667],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98842,98849],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[99061,99066],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[99139,99140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99167,99168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99262,99267],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[99343,99344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99371,99372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99730,99741],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[99968,99976],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[100052,100053],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100080,100081],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[100108,100109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100210,100218],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[100297,100298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100325,100326],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[100353,100354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100623,100634],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[100861,100869],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[100945,100946],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100973,100974],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101001,101002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101103,101111],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[101190,101191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101218,101219],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101246,101247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101646,101664],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[101962,101968],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[102042,102043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102070,102071],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[102099,102101]},{"content":",","pos":[102133,102134]},{"pos":[102188,102193],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102252,102253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102367,102373],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[102450,102451],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102478,102479],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[102506,102508],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[102537,102538]},{"pos":[102592,102597],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102656,102657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102887,102890],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[102966,102967],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[102995,102997]},{"pos":[103039,103040],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[103067,103069],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[103231,103249],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[103547,103553],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[103627,103628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103655,103656],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[103684,103686]},{"content":",","pos":[103718,103719]},{"pos":[103773,103778],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103837,103838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103952,103958],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[104035,104036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104063,104064],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104091,104093],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[104122,104123]},{"pos":[104177,104182],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104241,104242],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104643,104658],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[104894,104907],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[104988,104989],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105016,105017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105119,105132],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[105216,105217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105244,105245],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105585,105599],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[105818,105829],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[105893,105894],"content":"<","needQuote":true,"nodes":[]},{"pos":[105921,105922],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[106042,106053],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[106118,106121]},{"pos":[106155,106156],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[106183,106184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106417,106432],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[106668,106681],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[106762,106763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106790,106791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106893,106906],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[106990,106991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107018,107019],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107282,107296],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[107515,107526],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[107590,107591],"content":"<","needQuote":true,"nodes":[]},{"pos":[107618,107619],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[107739,107750],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[107815,107818]},{"pos":[107852,107853],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[107880,107881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108197,108207],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[108413,108420],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[108489,108490],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108517,108518],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[108545,108546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108640,108647],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[108719,108720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108747,108748],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[108775,108776],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109017,109027],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[109233,109240],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[109309,109310],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109337,109338],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109365,109366],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109460,109467],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[109539,109540],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109567,109568],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109595,109596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109952,109968],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[110212,110218],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[110286,110287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110336,110341],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110401,110402]},{"pos":[110434,110435],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[110462,110463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110569,110575],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[110646,110647],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110696,110701],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110761,110762]},{"pos":[110794,110795],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[110822,110823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111099,111115],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[111359,111365],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[111433,111434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111483,111488],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111548,111549]},{"pos":[111581,111582],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111609,111610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111716,111722],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[111793,111794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111843,111848],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111908,111909]},{"pos":[111941,111942],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111969,111970],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112342,112351],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[112572,112578],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[112652,112653],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112680,112681],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[112708,112709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112808,112814],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[112891,112892],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112919,112920],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[112947,112948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113209,113218],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[113439,113445],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[113519,113520],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113547,113548],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[113575,113576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113675,113681],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[113758,113759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113786,113787],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[113814,113815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114183,114198],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[114439,114447],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[114517,114518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114567,114572],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114631,114632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114737,114745],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[114818,114819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114868,114873],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114932,114933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115230,115245],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[115388,115396],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[115455,115456],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115505,115510],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115569,115570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115665,115673],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[115732,115733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115782,115787],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115846,115847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116057,116072],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[116313,116321],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[116391,116392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116441,116446],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116505,116506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116611,116619],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[116692,116693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116742,116747],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116806,116807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117125,117145],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[117323,117329],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[117392,117393],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117442,117447],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[117486,117487]},{"pos":[117541,117546],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[117605,117606],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117718,117724],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[117787,117788],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117837,117842],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[117881,117882]},{"pos":[117936,117941],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[118000,118001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118212,118217],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[118414,118429],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[118568,118581],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[118651,118652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118679,118680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118772,118785],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[118855,118856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118883,118884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119100,119111],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[119342,119353],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[119488,119491],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[119545,119546],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119596,119602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119662,119663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119754,119757],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[119811,119812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119862,119868],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119928,119929],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120157,120173],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[120318,120326],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[120385,120386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120436,120442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120502,120503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120599,120607],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[120666,120667],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120717,120723],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120783,120784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121021,121036],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[121179,121186],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[121244,121245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121295,121301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121361,121362],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121457,121464],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[121522,121523],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121573,121579],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121639,121640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121887,121908],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[122076,122082],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[122139,122140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122189,122194],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122254,122255]},{"pos":[122310,122316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122376,122377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122484,122490],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[122547,122548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122597,122602],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[122662,122663]},{"pos":[122718,122724],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122784,122785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123037,123051],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[123192,123198],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[123255,123256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123306,123312],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123372,123373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123467,123473],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[123530,123531],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123581,123587],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123647,123648],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123828,123849],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[124043,124070],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[124289,124306],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.ObjectModel.Collection`1\n  commentId: T:System.Collections.ObjectModel.Collection`1\n  id: Collection`1\n  parent: System.Collections.ObjectModel\n  children:\n  - System.Collections.ObjectModel.Collection`1.#ctor\n  - System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})\n  - System.Collections.ObjectModel.Collection`1.Add(`0)\n  - System.Collections.ObjectModel.Collection`1.Clear\n  - System.Collections.ObjectModel.Collection`1.ClearItems\n  - System.Collections.ObjectModel.Collection`1.Contains(`0)\n  - System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.ObjectModel.Collection`1.Count\n  - System.Collections.ObjectModel.Collection`1.GetEnumerator\n  - System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  - System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.Items\n  - System.Collections.ObjectModel.Collection`1.Remove(`0)\n  - System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: Collection<T>\n  fullName: System.Collections.ObjectModel.Collection<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Collection\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 14\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Provides the base class for a generic collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(false)]\n\n      [DebuggerTypeProxy(typeof (Mscorlib_CollectionDebugView<>))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      public class Collection<T> : IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(False)>\n\n      <DebuggerTypeProxy(GetType(Mscorlib_CollectionDebugView(Of )))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      Public Class Collection(Of T)\n          Implements IList(Of T), ICollection(Of T), IList, ICollection, IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of elements in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.ICollection`1\n    commentId: T:System.Collections.Generic.ICollection`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IList{{T}}\n  - System.Collections.Generic.ICollection{{T}}\n  - System.Collections.Generic.IReadOnlyList{{T}}\n  - System.Collections.Generic.IReadOnlyCollection{{T}}\n  - System.Collections.Generic.IEnumerable{{T}}\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T)\n  name.vb: Collection(Of T)\n  nameWithType: Collection<T>\n  nameWithType.vb: Collection(Of T)\n- uid: System.Collections.ObjectModel.Collection`1.#ctor\n  commentId: M:System.Collections.ObjectModel.Collection`1.#ctor\n  id: '#ctor'\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Collection()\n  fullName: System.Collections.ObjectModel.Collection<T>.Collection()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty.</p>\\n\"\n  syntax:\n    content: public Collection()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Collection()\n  nameWithType: Collection<T>.Collection()\n  nameWithType.vb: Collection(Of T).Collection()\n- uid: System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})\n  commentId: M:System.Collections.ObjectModel.Collection`1.#ctor(System.Collections.Generic.IList{`0})\n  id: '#ctor(System.Collections.Generic.IList{`0})'\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Collection(IList<T>)\n  fullName: System.Collections.ObjectModel.Collection<T>.Collection(System.Collections.Generic.IList<T>)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class as a wrapper for the specified list.</p>\\n\"\n  syntax:\n    content: public Collection(IList<T> list)\n    content.vb: Public Sub New(list As IList(Of T))\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{{T}}\n      description: \"\\n<p>The list that is wrapped by the new collection.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Collection(System.Collections.Generic.IList(Of T))\n  name.vb: Collection(IList(Of T))\n  nameWithType: Collection<T>.Collection(IList<T>)\n  nameWithType.vb: Collection(Of T).Collection(IList(Of T))\n- uid: System.Collections.ObjectModel.Collection`1.Count\n  commentId: P:System.Collections.ObjectModel.Collection`1.Count\n  id: Count\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.ObjectModel.Collection<T>.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets the number of elements actually contained in the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements actually contained in the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Count\n  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Count\n  nameWithType: Collection<T>.Count\n  nameWithType.vb: Collection(Of T).Count\n- uid: System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  commentId: P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.ObjectModel.Collection<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: public T this[int index] { get; set; }\n    content.vb: Public Property Item(index As Integer) As T\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Count\n    commentId: P:System.Collections.ObjectModel.Collection`1.Count\n  implements:\n  - System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: Collection<T>.Item[Int32]\n  nameWithType.vb: Collection(Of T).Item(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.Items\n  commentId: P:System.Collections.ObjectModel.Collection`1.Items\n  id: Items\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Items\n  fullName: System.Collections.ObjectModel.Collection<T>.Items\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Items\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper around the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected IList<T> Items { get; }\n    content.vb: Protected ReadOnly Property Items As IList(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IList{{T}}\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wrapper around the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Items\n  nameWithType: Collection<T>.Items\n  nameWithType.vb: Collection(Of T).Items\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.IsReadOnly\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.IsReadOnly\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 142\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: Collection<T>.ICollection<T>.IsReadOnly\n  nameWithType.vb: Collection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 152\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.ICollection.IsSynchronized\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: Collection<T>.ICollection.IsSynchronized\n  nameWithType.vb: Collection(Of T).System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 156\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns the current instance.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.ICollection.SyncRoot\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: Collection<T>.ICollection.SyncRoot\n  nameWithType.vb: Collection(Of T).System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 251\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.IsFixedSize\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: Collection<T>.IList.IsFixedSize\n  nameWithType.vb: Collection(Of T).System.Collections.IList.IsFixedSize\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 245\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.IsReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: Collection<T>.IList.IsReadOnly\n  nameWithType.vb: Collection(Of T).System.Collections.IList.IsReadOnly\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.this[]\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 230\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The property is set and <em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: Collection<T>.IList.Item[Int32]\n  nameWithType.vb: Collection(Of T).System.Collections.IList.Item(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.Add(`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)\n  id: Add(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Add(T)\n  fullName: System.Collections.ObjectModel.Collection<T>.Add(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 58\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Adds an object to the end of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public void Add(T item)\n    content.vb: Public Sub Add(item As T)\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to be added to the end of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  - type: System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  - type: System.Collections.ObjectModel.Collection`1.Remove(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)\n  - type: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n    commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  - type: System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\n    commentId: M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\n  - type: System.Collections.ObjectModel.Collection`1.Count\n    commentId: P:System.Collections.ObjectModel.Collection`1.Count\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Add({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Add(T)\n  nameWithType: Collection<T>.Add(T)\n  nameWithType.vb: Collection(Of T).Add(T)\n- uid: System.Collections.ObjectModel.Collection`1.Clear\n  commentId: M:System.Collections.ObjectModel.Collection`1.Clear\n  id: Clear\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.ObjectModel.Collection<T>.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 67\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Count\n    commentId: P:System.Collections.ObjectModel.Collection`1.Count\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Clear\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Clear()\n  nameWithType: Collection<T>.Clear()\n  nameWithType.vb: Collection(Of T).Clear()\n- uid: System.Collections.ObjectModel.Collection`1.ClearItems\n  commentId: M:System.Collections.ObjectModel.Collection`1.ClearItems\n  id: ClearItems\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: ClearItems()\n  fullName: System.Collections.ObjectModel.Collection<T>.ClearItems()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ClearItems\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 126\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes all elements from the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual void ClearItems()\n    content.vb: Protected Overridable Sub ClearItems\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Clear\n    commentId: M:System.Collections.ObjectModel.Collection`1.Clear\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).ClearItems()\n  nameWithType: Collection<T>.ClearItems()\n  nameWithType.vb: Collection(Of T).ClearItems()\n- uid: System.Collections.ObjectModel.Collection`1.Contains(`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Contains(T)\n  fullName: System.Collections.ObjectModel.Collection<T>.Contains(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 79\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Contains(T item)\n    content.vb: Public Function Contains(item As T) As Boolean\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> is found in the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Contains({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Contains(T)\n  nameWithType: Collection<T>.Contains(T)\n  nameWithType.vb: Collection(Of T).Contains(T)\n- uid: System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.ObjectModel.Collection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.ObjectModel.Collection<T>.CopyTo(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 75\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: public void CopyTo(T[] array, int index)\n    content.vb: Public Sub CopyTo(array As T(), index As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  nameWithType: Collection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: Collection(Of T).CopyTo(T(), Int32)\n- uid: System.Collections.ObjectModel.Collection`1.GetEnumerator\n  commentId: M:System.Collections.ObjectModel.Collection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.ObjectModel.Collection<T>.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 83\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IEnumerator<T> GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator(Of T)\n    return:\n      type: System.Collections.Generic.IEnumerator{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerator`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).GetEnumerator()\n  nameWithType: Collection<T>.GetEnumerator()\n  nameWithType.vb: Collection(Of T).GetEnumerator()\n- uid: System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(T)\n  fullName: System.Collections.ObjectModel.Collection<T>.IndexOf(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 87\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int IndexOf(T item)\n    content.vb: Public Function IndexOf(item As T) As Integer\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>item</em> within the entire <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Contains(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Contains(`0)\n  implements:\n  - System.Collections.Generic.IList{{T}}.IndexOf({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).IndexOf(T)\n  nameWithType: Collection<T>.IndexOf(T)\n  nameWithType.vb: Collection(Of T).IndexOf(T)\n- uid: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  id: Insert(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, T)\n  fullName: System.Collections.ObjectModel.Collection<T>.Insert(System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 91\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Inserts an element into the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, T item)\n    content.vb: Public Sub Insert(index As Integer, item As T)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n\"\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to insert. The value can be <strong>null</strong> for reference types.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Add(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)\n  - type: System.Collections.ObjectModel.Collection`1.Remove(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)\n  implements:\n  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Insert(System.Int32, T)\n  nameWithType: Collection<T>.Insert(Int32, T)\n  nameWithType.vb: Collection(Of T).Insert(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.InsertItem(System.Int32,`0)\n  id: InsertItem(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: InsertItem(Int32, T)\n  fullName: System.Collections.ObjectModel.Collection<T>.InsertItem(System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InsertItem\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 130\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Inserts an element into the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: protected virtual void InsertItem(int index, T item)\n    content.vb: Protected Overridable Sub InsertItem(index As Integer, item As T)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>item</em> should be inserted.</p>\\n\"\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to insert. The value can be <strong>null</strong> for reference types.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).InsertItem(System.Int32, T)\n  nameWithType: Collection<T>.InsertItem(Int32, T)\n  nameWithType.vb: Collection(Of T).InsertItem(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.Remove(`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)\n  id: Remove(`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: Remove(T)\n  fullName: System.Collections.ObjectModel.Collection<T>.Remove(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 103\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Remove(T item)\n    content.vb: Public Function Remove(item As T) As Boolean\n    parameters:\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>item</em> is successfully removed; otherwise, <strong>false</strong>.  This method also returns <strong>false</strong> if <em>item</em> was not found in the original <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n    commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  - type: System.Collections.ObjectModel.Collection`1.Add(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)\n  - type: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Remove({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).Remove(T)\n  nameWithType: Collection<T>.Remove(T)\n  nameWithType.vb: Collection(Of T).Remove(T)\n- uid: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.ObjectModel.Collection<T>.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAt\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 114\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the element at the specified index of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Remove(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Remove(`0)\n  - type: System.Collections.ObjectModel.Collection`1.Add(`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Add(`0)\n  - type: System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n    commentId: M:System.Collections.ObjectModel.Collection`1.Insert(System.Int32,`0)\n  implements:\n  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).RemoveAt(System.Int32)\n  nameWithType: Collection<T>.RemoveAt(Int32)\n  nameWithType.vb: Collection(Of T).RemoveAt(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\n  commentId: M:System.Collections.ObjectModel.Collection`1.RemoveItem(System.Int32)\n  id: RemoveItem(System.Int32)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: RemoveItem(Int32)\n  fullName: System.Collections.ObjectModel.Collection<T>.RemoveItem(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveItem\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 134\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the element at the specified index of the <xref href=\\\"System.Collections.ObjectModel.Collection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual void RemoveItem(int index)\n    content.vb: Protected Overridable Sub RemoveItem(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n    commentId: M:System.Collections.ObjectModel.Collection`1.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).RemoveItem(System.Int32)\n  nameWithType: Collection<T>.RemoveItem(Int32)\n  nameWithType.vb: Collection(Of T).RemoveItem(Int32)\n- uid: System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\n  commentId: M:System.Collections.ObjectModel.Collection`1.SetItem(System.Int32,`0)\n  id: SetItem(System.Int32,`0)\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: SetItem(Int32, T)\n  fullName: System.Collections.ObjectModel.Collection<T>.SetItem(System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetItem\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 138\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Replaces the element at the specified index.</p>\\n\"\n  syntax:\n    content: protected virtual void SetItem(int index, T item)\n    content.vb: Protected Overridable Sub SetItem(index As Integer, item As T)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to replace.</p>\\n\"\n    - id: item\n      type: '{T}'\n      description: \"\\n<p>The new value for the element at the specified index. The value can be <strong>null</strong> for reference types.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.ObjectModel.Collection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n    commentId: P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)\n  - type: System.Collections.ObjectModel.Collection`1.Items\n    commentId: P:System.Collections.ObjectModel.Collection`1.Items\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).SetItem(System.Int32, T)\n  nameWithType: Collection<T>.SetItem(Int32, T)\n  nameWithType.vb: Collection(Of T).SetItem(Int32, T)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 171\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at a particular <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>\\n<em>array</em> does not have zero-based indexing.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n<p>-or-</p>\\n<p>The type of the source <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: Collection<T>.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: Collection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 148\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Returns an enumerator that iterates through a collection.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: Collection<T>.IEnumerable.GetEnumerator()\n  nameWithType.vb: Collection(Of T).System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Add\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 266\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new element was inserted.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: Collection<T>.IList.Add(Object)\n  nameWithType.vb: Collection(Of T).System.Collections.IList.Add(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Contains\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 282\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is found in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: Collection<T>.IList.Contains(Object)\n  nameWithType.vb: Collection(Of T).System.Collections.IList.Contains(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IndexOf\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 289\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines the index of a specific item in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: Collection<T>.IList.IndexOf(Object)\n  nameWithType.vb: Collection(Of T).System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Insert\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 296\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Inserts an item into the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert into the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: Collection<T>.IList.Insert(Int32, Object)\n  nameWithType.vb: Collection(Of T).System.Collections.IList.Insert(Int32, Object)\n- uid: System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Collections.ObjectModel.Collection`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.Collection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Collections.ObjectModel.Collection<T>.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Remove\n    path: src/mscorlib/src/System/Collections/ObjectModel/Collection.cs\n    startLine: 311\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is of a type that is not assignable to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  fullName.vb: System.Collections.ObjectModel.Collection(Of T).System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: Collection<T>.IList.Remove(Object)\n  nameWithType.vb: Collection(Of T).System.Collections.IList.Remove(Object)\nreferences:\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList{`0}\n- uid: System.Collections.Generic.ICollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection{`0}\n- uid: System.Collections.Generic.IReadOnlyList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyList`1\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList{`0}\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyCollection`1\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection`1\n- uid: System.Collections.Generic.IReadOnlyList`1\n  isExternal: false\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList`1\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  isExternal: false\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection`1\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.Generic.ICollection{{T}}.Count\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection{`0}.Count\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  parent: System.Collections.Generic.IReadOnlyCollection{{T}}\n  definition: System.Collections.Generic.IReadOnlyCollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.ICollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n- uid: System.Collections.Generic.IReadOnlyCollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count\n- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)\n- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IReadOnlyList{{T}}\n  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList{`0}.Item(System.Int32)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Collections.Generic.IList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)\n- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.IsReadOnly\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Collections.Generic.ICollection{{T}}.Add({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Add(`0)\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  isExternal: false\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.Clear\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Clear\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection{`0}.Clear\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.Generic.ICollection`1.Clear\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Contains(`0)\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  isExternal: false\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  isExternal: true\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{{T}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.IndexOf(`0)\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)\n- uid: System.Collections.Generic.IList`1.IndexOf(`0)\n  isExternal: false\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)\n- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  isExternal: true\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Remove(`0)\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  isExternal: false\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}