{"nodes":[{"pos":[483,498],"content":"CommandBehavior","needQuote":true,"nodes":[{"content":"CommandBehavior","pos":[0,15]}]},{"pos":[1551,1566],"content":"CloseConnection","needQuote":true,"nodes":[{"content":"CloseConnection","pos":[0,15]}]},{"pos":[2554,2561],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[3724,3731],"content":"KeyInfo","needQuote":true,"nodes":[{"content":"KeyInfo","pos":[0,7]}]},{"pos":[4594,4604],"content":"SchemaOnly","needQuote":true,"nodes":[{"content":"SchemaOnly","pos":[0,10]}]},{"pos":[5703,5719],"content":"SequentialAccess","needQuote":true,"nodes":[{"content":"SequentialAccess","pos":[0,16]}]},{"pos":[7013,7025],"content":"SingleResult","needQuote":true,"nodes":[{"content":"SingleResult","pos":[0,12]}]},{"pos":[7889,7898],"content":"SingleRow","needQuote":true,"nodes":[{"content":"SingleRow","pos":[0,9]}]},{"pos":[9927,9938],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[10103,10118],"content":"CommandBehavior","needQuote":true,"nodes":[{"content":"CommandBehavior","pos":[0,15]}]}],"content":"items:\n- uid: System.Data.CommandBehavior\n  commentId: T:System.Data.CommandBehavior\n  id: CommandBehavior\n  parent: System.Data\n  children:\n  - System.Data.CommandBehavior.CloseConnection\n  - System.Data.CommandBehavior.Default\n  - System.Data.CommandBehavior.KeyInfo\n  - System.Data.CommandBehavior.SchemaOnly\n  - System.Data.CommandBehavior.SequentialAccess\n  - System.Data.CommandBehavior.SingleResult\n  - System.Data.CommandBehavior.SingleRow\n  langs:\n  - csharp\n  - vb\n  name: CommandBehavior\n  fullName: System.Data.CommandBehavior\n  type: Enum\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommandBehavior\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 10\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Provides a description of the results of the query and its effect on the database.</p>\\n\"\n  syntax:\n    content: >-\n      [Flags]\n\n      public enum CommandBehavior\n    content.vb: >-\n      <Flags>\n\n      Public Enum CommandBehavior\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: CommandBehavior\n- uid: System.Data.CommandBehavior.CloseConnection\n  commentId: F:System.Data.CommandBehavior.CloseConnection\n  id: CloseConnection\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: CloseConnection\n  fullName: System.Data.CommandBehavior.CloseConnection\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CloseConnection\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 19\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>When the command is executed, the associated <strong>Connection</strong> object is closed when the associated <strong>DataReader</strong> object is closed.</p>\\n\"\n  syntax:\n    content: CloseConnection = 32\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.CloseConnection\n- uid: System.Data.CommandBehavior.Default\n  commentId: F:System.Data.CommandBehavior.Default\n  id: Default\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Data.CommandBehavior.Default\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Default\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 13\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>The query may return multiple result sets. Execution of the query may affect the database state. <strong>Default</strong> sets no <xref href=\\\"System.Data.CommandBehavior\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flags, so calling <strong>ExecuteReader(CommandBehavior.Default)</strong> is functionally equivalent to calling <strong>ExecuteReader()</strong>.</p>\\n\"\n  syntax:\n    content: Default = 0\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.Default\n- uid: System.Data.CommandBehavior.KeyInfo\n  commentId: F:System.Data.CommandBehavior.KeyInfo\n  id: KeyInfo\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: KeyInfo\n  fullName: System.Data.CommandBehavior.KeyInfo\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeyInfo\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 16\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>The query returns column and primary key information. </p>\\n\"\n  syntax:\n    content: KeyInfo = 4\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.KeyInfo\n- uid: System.Data.CommandBehavior.SchemaOnly\n  commentId: F:System.Data.CommandBehavior.SchemaOnly\n  id: SchemaOnly\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: SchemaOnly\n  fullName: System.Data.CommandBehavior.SchemaOnly\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SchemaOnly\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 15\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>The query returns column information only. When using <xref href=\\\"System.Data.CommandBehavior.SchemaOnly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the .NET Framework Data Provider for SQL Server precedes the statement being executed with SET FMTONLY ON.</p>\\n\"\n  syntax:\n    content: SchemaOnly = 2\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.SchemaOnly\n- uid: System.Data.CommandBehavior.SequentialAccess\n  commentId: F:System.Data.CommandBehavior.SequentialAccess\n  id: SequentialAccess\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: SequentialAccess\n  fullName: System.Data.CommandBehavior.SequentialAccess\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SequentialAccess\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 18\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Provides a way for the <strong>DataReader</strong> to handle rows that contain columns with large binary values. Rather than loading the entire row, <strong>SequentialAccess</strong> enables the <strong>DataReader</strong> to load data as a stream. You can then use the <strong>GetBytes</strong> or <strong>GetChars</strong> method to specify a byte location to start the read operation, and a limited buffer size for the data being returned.</p>\\n\"\n  syntax:\n    content: SequentialAccess = 16\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.SequentialAccess\n- uid: System.Data.CommandBehavior.SingleResult\n  commentId: F:System.Data.CommandBehavior.SingleResult\n  id: SingleResult\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: SingleResult\n  fullName: System.Data.CommandBehavior.SingleResult\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleResult\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 14\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>The query returns a single result set.</p>\\n\"\n  syntax:\n    content: SingleResult = 1\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.SingleResult\n- uid: System.Data.CommandBehavior.SingleRow\n  commentId: F:System.Data.CommandBehavior.SingleRow\n  id: SingleRow\n  parent: System.Data.CommandBehavior\n  langs:\n  - csharp\n  - vb\n  name: SingleRow\n  fullName: System.Data.CommandBehavior.SingleRow\n  type: Field\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SingleRow\n    path: src/System.Data.Common/src/System/Data/CommandBehavior.cs\n    startLine: 17\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>The query is expected to return a single row of the first result set. Execution of the query may affect the database state. Some .NET Framework data providers may, but are not required to, use this information to optimize the performance of the command. When you specify <xref href=\\\"System.Data.CommandBehavior.SingleRow\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the <xref href=\\\"System.Data.OleDb.OleDbCommand.ExecuteReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method of the <xref href=\\\"System.Data.OleDb.OleDbCommand\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, the .NET Framework Data Provider for OLE DB performs binding using the OLE DB <strong>IRow</strong> interface if it is available. Otherwise, it uses the <strong>IRowset</strong> interface. If your SQL statement is expected to return only a single row, specifying <xref href=\\\"System.Data.CommandBehavior.SingleRow\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can also improve application performance. It is possible to specify <strong>SingleRow</strong> when executing queries that are expected to return multiple result sets.  In that case, where both a multi-result set SQL query and single row are specified, the result returned will contain only the first row of the first result set. The other result sets of the query will not be returned.</p>\\n\"\n  syntax:\n    content: SingleRow = 8\n    return:\n      type: System.Data.CommandBehavior\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: CommandBehavior.SingleRow\nreferences:\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Data.CommandBehavior\n  parent: System.Data\n  isExternal: false\n  name: CommandBehavior\n  fullName: System.Data.CommandBehavior\n  nameWithType: CommandBehavior\n  commentId: T:System.Data.CommandBehavior\n"}