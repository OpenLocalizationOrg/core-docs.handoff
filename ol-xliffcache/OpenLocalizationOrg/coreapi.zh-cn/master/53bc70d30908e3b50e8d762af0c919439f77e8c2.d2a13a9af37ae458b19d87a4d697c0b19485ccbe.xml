{"nodes":[{"pos":[1125,1135],"content":"SafeBuffer","needQuote":true,"nodes":[{"content":"SafeBuffer","pos":[0,10]}]},{"pos":[3909,3928],"content":"SafeBuffer(Boolean)","needQuote":true,"nodes":[{"content":"SafeBuffer(Boolean)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to reliably release the handle during the finalization phase; &lt;strong&gt;false&lt;/strong&gt; to prevent reliable release (not recommended).&lt;/p&gt;\\n","pos":[4827,4993],"source":"\\n<p>\\n<strong>true</strong> to reliably release the handle during the finalization phase; <strong>false</strong> to prevent reliable release (not recommended).</p>\\n"},{"pos":[5453,5462],"content":"IsInvalid","needQuote":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"pos":[6568,6578],"content":"ByteLength","needQuote":true,"nodes":[{"content":"ByteLength","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The number of bytes in the memory buffer.&lt;/p&gt;\\n","pos":[7465,7517],"source":"\\n<p>The number of bytes in the memory buffer.</p>\\n"},{"pos":[8411,8436],"content":"AcquirePointer(ref Byte*)","needQuote":true,"nodes":[{"content":"AcquirePointer(ref Byte*)","pos":[0,25]}]},{"pos":[10918,10944],"content":"Initialize(UInt32, UInt32)","needQuote":true,"nodes":[{"content":"Initialize(UInt32, UInt32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of elements in the buffer.&lt;/p&gt;\\n","pos":[12059,12107],"source":"\\n<p>The number of elements in the buffer.</p>\\n"},{"content":"\\n&lt;p&gt;The size of each element in the buffer.&lt;/p&gt;\\n","pos":[12183,12233],"source":"\\n<p>The size of each element in the buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;numElements&lt;/em&gt; is less than zero.","pos":[12364,12410],"source":"\\n<p>\\n<em>numElements</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;sizeOfEachElement&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;numElements&lt;/em&gt; multiplied by &lt;em&gt;sizeOfEachElement&lt;/em&gt; is greater than the available address space.&lt;/p&gt;\\n","pos":[12411,12616],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>sizeOfEachElement</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numElements</em> multiplied by <em>sizeOfEachElement</em> is greater than the available address space.</p>\\n"},{"pos":[13182,13200],"content":"Initialize(UInt64)","needQuote":true,"nodes":[{"content":"Initialize(UInt64)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The number of bytes in the buffer.&lt;/p&gt;\\n","pos":[14181,14226],"source":"\\n<p>The number of bytes in the buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;numBytes&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;numBytes&lt;/em&gt; is greater than the available address space.&lt;/p&gt;\\n","pos":[14357,14492],"source":"\\n<p>\\n<em>numBytes</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numBytes</em> is greater than the available address space.</p>\\n"},{"pos":[15059,15080],"content":"Initialize<T>(UInt32)","needQuote":true,"nodes":[{"content":"Initialize&lt;T&gt;(UInt32)","pos":[0,21],"source":"Initialize<T>(UInt32)"}]},{"content":"\\n&lt;p&gt;The number of elements of the value type to allocate memory for.&lt;/p&gt;\\n","pos":[16145,16220],"source":"\\n<p>The number of elements of the value type to allocate memory for.</p>\\n"},{"content":"\\n&lt;p&gt;The value type to allocate memory for.&lt;/p&gt;\\n","pos":[16274,16323],"source":"\\n<p>The value type to allocate memory for.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;numElements&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;numElements&lt;/em&gt; multiplied by the size of each element is greater than the available address space.&lt;/p&gt;\\n","pos":[16454,16634],"source":"\\n<p>\\n<em>numElements</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numElements</em> multiplied by the size of each element is greater than the available address space.</p>\\n"},{"pos":[17366,17381],"content":"Read<T>(UInt64)","needQuote":true,"nodes":[{"content":"Read&lt;T&gt;(UInt64)","pos":[0,15],"source":"Read<T>(UInt64)"}]},{"content":"\\n&lt;p&gt;The location from which to read the value type.","pos":[18383,18435],"source":"\\n<p>The location from which to read the value type."},{"content":"You may have to consider alignment issues.&lt;/p&gt;\\n","pos":[18436,18484],"source":" You may have to consider alignment issues.</p>\\n"},{"content":"\\n&lt;p&gt;The value type to read.&lt;/p&gt;\\n","pos":[18538,18572],"source":"\\n<p>The value type to read.</p>\\n"},{"content":"\\n&lt;p&gt;The value type that was read from memory.&lt;/p&gt;\\n","pos":[18624,18676],"source":"\\n<p>The value type that was read from memory.</p>\\n"},{"pos":[19984,20023],"content":"ReadArray<T>(UInt64, T[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ReadArray&lt;T&gt;(UInt64, T[], Int32, Int32)","pos":[0,39],"source":"ReadArray<T>(UInt64, T[], Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The location from which to start reading.&lt;/p&gt;\\n","pos":[21230,21282],"source":"\\n<p>The location from which to start reading.</p>\\n"},{"content":"\\n&lt;p&gt;The output array to write to.&lt;/p&gt;\\n","pos":[21340,21380],"source":"\\n<p>The output array to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The location in the output array to begin writing to.&lt;/p&gt;\\n","pos":[21443,21507],"source":"\\n<p>The location in the output array to begin writing to.</p>\\n"},{"content":"\\n&lt;p&gt;The number of value types to read from the input array and to write to the output array.&lt;/p&gt;\\n","pos":[21570,21669],"source":"\\n<p>The number of value types to read from the input array and to write to the output array.</p>\\n"},{"content":"\\n&lt;p&gt;The value type to read.&lt;/p&gt;\\n","pos":[21723,21757],"source":"\\n<p>The value type to read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[21888,21991],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22096,22149],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the array minus the index is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22246,22325],"source":"\\n<p>The length of the array minus the index is less than <em>count</em>.</p>\\n"},{"pos":[23660,23676],"content":"ReleasePointer()","needQuote":true,"nodes":[{"content":"ReleasePointer()","pos":[0,16]}]},{"pos":[25303,25322],"content":"Write<T>(UInt64, T)","needQuote":true,"nodes":[{"content":"Write&lt;T&gt;(UInt64, T)","pos":[0,19],"source":"Write<T>(UInt64, T)"}]},{"content":"\\n&lt;p&gt;The location at which to start writing.","pos":[26342,26386],"source":"\\n<p>The location at which to start writing."},{"content":"You may have to consider alignment issues.&lt;/p&gt;\\n","pos":[26387,26435],"source":" You may have to consider alignment issues.</p>\\n"},{"content":"\\n&lt;p&gt;The value to write.&lt;/p&gt;\\n","pos":[26491,26521],"source":"\\n<p>The value to write.</p>\\n"},{"content":"\\n&lt;p&gt;The value type to write.&lt;/p&gt;\\n","pos":[26575,26610],"source":"\\n<p>The value type to write.</p>\\n"},{"pos":[27927,27967],"content":"WriteArray<T>(UInt64, T[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray&lt;T&gt;(UInt64, T[], Int32, Int32)","pos":[0,40],"source":"WriteArray<T>(UInt64, T[], Int32, Int32)"}]},{"content":"\\n&lt;p&gt;The location in memory to write to.&lt;/p&gt;\\n","pos":[29184,29230],"source":"\\n<p>The location in memory to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The input array.&lt;/p&gt;\\n","pos":[29288,29315],"source":"\\n<p>The input array.</p>\\n"},{"content":"\\n&lt;p&gt;The offset in the array to start reading from.&lt;/p&gt;\\n","pos":[29378,29435],"source":"\\n<p>The offset in the array to start reading from.</p>\\n"},{"content":"\\n&lt;p&gt;The number of value types to write.&lt;/p&gt;\\n","pos":[29498,29544],"source":"\\n<p>The number of value types to write.</p>\\n"},{"content":"\\n&lt;p&gt;The value type to write.&lt;/p&gt;\\n","pos":[29598,29633],"source":"\\n<p>The value type to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29752,29805],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[29922,29986],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;The length of the input array minus &lt;em&gt;index&lt;/em&gt; is less than &lt;em&gt;count&lt;/em&gt;.&lt;/p&gt;\\n","pos":[30083,30173],"source":"\\n<p>The length of the input array minus <em>index</em> is less than <em>count</em>.</p>\\n"},{"pos":[31344,31374],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[31577,31583],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31802,31825],"content":"CriticalFinalizerObject","needQuote":true,"nodes":[{"content":"CriticalFinalizerObject","pos":[0,23]}]},{"pos":[32131,32141],"content":"SafeHandle","needQuote":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[32351,32362],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[32592,32598],"content":"handle","needQuote":true,"nodes":[{"content":"handle","pos":[0,6]}]},{"pos":[32911,32928],"content":"SetHandle(IntPtr)","needQuote":true,"nodes":[{"content":"SetHandle(IntPtr)","pos":[0,17]}]},{"pos":[33109,33118],"content":"SetHandle","needQuote":true,"nodes":[{"content":"SetHandle","pos":[0,9]}]},{"pos":[33195,33196],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33246,33252],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[33312,33313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33427,33436],"content":"SetHandle","needQuote":true,"nodes":[{"content":"SetHandle","pos":[0,9]}]},{"pos":[33513,33514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33564,33570],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[33630,33631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33923,33943],"content":"DangerousGetHandle()","needQuote":true,"nodes":[{"content":"DangerousGetHandle()","pos":[0,20]}]},{"pos":[34114,34132],"content":"DangerousGetHandle","needQuote":true,"nodes":[{"content":"DangerousGetHandle","pos":[0,18]}]},{"pos":[34218,34219],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34246,34247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34355,34373],"content":"DangerousGetHandle","needQuote":true,"nodes":[{"content":"DangerousGetHandle","pos":[0,18]}]},{"pos":[34459,34460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34487,34488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34763,34770],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[34915,34920],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[35014,35015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35042,35043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35138,35143],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[35237,35238],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35265,35266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35518,35527],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[35676,35683],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[35758,35759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35786,35787],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35884,35891],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[35966,35967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35994,35995],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36266,36282],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[36461,36468],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[36543,36544],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36595,36602],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36663,36664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36777,36784],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[36859,36860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36911,36918],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36979,36980],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37270,37290],"content":"SetHandleAsInvalid()","needQuote":true,"nodes":[{"content":"SetHandleAsInvalid()","pos":[0,20]}]},{"pos":[37461,37479],"content":"SetHandleAsInvalid","needQuote":true,"nodes":[{"content":"SetHandleAsInvalid","pos":[0,18]}]},{"pos":[37565,37566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37593,37594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37702,37720],"content":"SetHandleAsInvalid","needQuote":true,"nodes":[{"content":"SetHandleAsInvalid","pos":[0,18]}]},{"pos":[37806,37807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37834,37835],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38119,38134],"content":"ReleaseHandle()","needQuote":true,"nodes":[{"content":"ReleaseHandle()","pos":[0,15]}]},{"pos":[38295,38308],"content":"ReleaseHandle","needQuote":true,"nodes":[{"content":"ReleaseHandle","pos":[0,13]}]},{"pos":[38389,38390],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38417,38418],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38521,38534],"content":"ReleaseHandle","needQuote":true,"nodes":[{"content":"ReleaseHandle","pos":[0,13]}]},{"pos":[38615,38616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38643,38644],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38936,38960],"content":"DangerousAddRef(Boolean)","needQuote":true,"nodes":[{"content":"DangerousAddRef(Boolean)","pos":[0,24]}]},{"pos":[39156,39171],"content":"DangerousAddRef","needQuote":true,"nodes":[{"content":"DangerousAddRef","pos":[0,15]}]},{"pos":[39254,39255],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39306,39313],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39374,39375],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39497,39512],"content":"DangerousAddRef","needQuote":true,"nodes":[{"content":"DangerousAddRef","pos":[0,15]}]},{"pos":[39595,39596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39647,39654],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39715,39716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40021,40039],"content":"DangerousRelease()","needQuote":true,"nodes":[{"content":"DangerousRelease()","pos":[0,18]}]},{"pos":[40206,40222],"content":"DangerousRelease","needQuote":true,"nodes":[{"content":"DangerousRelease","pos":[0,16]}]},{"pos":[40306,40307],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40334,40335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40441,40457],"content":"DangerousRelease","needQuote":true,"nodes":[{"content":"DangerousRelease","pos":[0,16]}]},{"pos":[40541,40542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40569,40570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40845,40853],"content":"IsClosed","needQuote":true,"nodes":[{"content":"IsClosed","pos":[0,8]}]},{"pos":[41100,41110],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[41205,41213],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41282,41283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41310,41311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41381,41389],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41458,41459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41486,41487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41670,41684],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[41803,41809],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41876,41877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41927,41933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41993,41994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42077,42083],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42150,42151],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42201,42207],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42267,42268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42482,42504],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[42652,42658],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42725,42726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42776,42782],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42843,42844]},{"pos":[42899,42905],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42965,42966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43063,43069],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[43136,43137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43187,43193],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43254,43255]},{"pos":[43310,43316],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43376,43377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43622,43653],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[43819,43834],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43910,43911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43961,43967],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44028,44029]},{"pos":[44084,44090],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44150,44151],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44257,44272],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[44348,44349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44399,44405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[44466,44467]},{"pos":[44522,44528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44588,44589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44819,44832],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[44933,44944],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45016,45017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45044,45045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45118,45129],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[45201,45202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45229,45230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45405,45414],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[45507,45514],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45582,45583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45610,45611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45680,45687],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[45755,45756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45783,45784],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45959,45976],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[46085,46100],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[46176,46177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46204,46205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46282,46297],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[46373,46374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46401,46402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46547,46553],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[46689,46724],"content":"System.Runtime.ConstrainedExecution","needQuote":true,"nodes":[{"content":"System.Runtime.ConstrainedExecution","pos":[0,35]}]},{"pos":[46943,46950],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[47171,47180],"content":"IsInvalid","needQuote":true,"nodes":[{"content":"IsInvalid","pos":[0,9]}]},{"pos":[47415,47421],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[47528,47533],"content":"Byte*","needQuote":true,"nodes":[{"content":"Byte*","pos":[0,5]}]},{"pos":[47605,47609],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47731,47735],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47903,47909],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[48025,48026],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[48115,48116],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[48172,48175],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[48251,48252],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[48280,48282]},{"pos":[48324,48325],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[48352,48354],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[48480,48485],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[48646,48671],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[48877,48904],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[49110,49131],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[49332,49349],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.SafeBuffer\n  commentId: T:System.Runtime.InteropServices.SafeBuffer\n  id: SafeBuffer\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  - System.Runtime.InteropServices.SafeBuffer.ByteLength\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  - System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: SafeBuffer\n  fullName: System.Runtime.InteropServices.SafeBuffer\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SafeBuffer\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 80\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid, IDisposable\n    content.vb: >-\n      <SecurityCritical>\n\n      Public MustInherit Class SafeBuffer\n          Inherits SafeHandleZeroOrMinusOneIsInvalid\n          Implements IDisposable\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  inheritance:\n  - System.Object\n  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  - System.Runtime.InteropServices.SafeHandle\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Runtime.InteropServices.SafeHandle.handle\n  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - System.Runtime.InteropServices.SafeHandle.Close\n  - System.Runtime.InteropServices.SafeHandle.Dispose\n  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  - System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - System.Runtime.InteropServices.SafeHandle.IsClosed\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: SafeBuffer\n- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: SafeBuffer(Boolean)\n  fullName: System.Runtime.InteropServices.SafeBuffer.SafeBuffer(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Creates a new instance of the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, and specifies whether the buffer handle is to be reliably released.</p>\\n\"\n  syntax:\n    content: protected SafeBuffer(bool ownsHandle)\n    content.vb: Protected Sub New(ownsHandle As Boolean)\n    parameters:\n    - id: ownsHandle\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to reliably release the handle during the finalization phase; <strong>false</strong> to prevent reliable release (not recommended).</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SafeBuffer.SafeBuffer(Boolean)\n- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  commentId: P:System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  id: IsInvalid\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: IsInvalid\n  fullName: System.Runtime.InteropServices.SafeBuffer.IsInvalid\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInvalid\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 712\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  syntax:\n    content: public override bool IsInvalid { get; }\n    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SafeBuffer.IsInvalid\n- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength\n  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength\n  id: ByteLength\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: ByteLength\n  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ByteLength\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 355\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the size of the buffer, in bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public ulong ByteLength\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public ReadOnly Property ByteLength As ULong\n    parameters: []\n    return:\n      type: System.UInt64\n      description: \"\\n<p>The number of bytes in the memory buffer.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SafeBuffer.ByteLength\n- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\n  id: AcquirePointer(System.Byte*@)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: AcquirePointer(ref Byte*)\n  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ref System.Byte*)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AcquirePointer\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 176\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Obtains a pointer from a <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for a block of memory.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public void AcquirePointer(ref byte *pointer)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub AcquirePointer(ByRef pointer As Byte *)\n    parameters:\n    - id: pointer\n      type: System.Byte*\n      description: \"\\n<p>A byte pointer, passed by reference, to receive the pointer from within the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. You must set this pointer to <strong>null</strong> before you call this method.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ByRef System.Byte*)\n  name.vb: AcquirePointer(ByRef Byte*)\n  nameWithType: SafeBuffer.AcquirePointer(ref Byte*)\n  nameWithType.vb: SafeBuffer.AcquirePointer(ByRef Byte*)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\n  id: Initialize(System.UInt32,System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: Initialize(UInt32, UInt32)\n  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32, System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Initialize\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 118\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public void Initialize(uint numElements, uint sizeOfEachElement)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub Initialize(numElements As UInteger, sizeOfEachElement As UInteger)\n    parameters:\n    - id: numElements\n      type: System.UInt32\n      description: \"\\n<p>The number of elements in the buffer.</p>\\n\"\n    - id: sizeOfEachElement\n      type: System.UInt32\n      description: \"\\n<p>The size of each element in the buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>numElements</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>\\n<em>sizeOfEachElement</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numElements</em> multiplied by <em>sizeOfEachElement</em> is greater than the available address space.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  id: Initialize(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: Initialize(UInt64)\n  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Initialize\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 99\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public void Initialize(ulong numBytes)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub Initialize(numBytes As ULong)\n    parameters:\n    - id: numBytes\n      type: System.UInt64\n      description: \"\\n<p>The number of bytes in the buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>numBytes</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numBytes</em> is greater than the available address space.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeBuffer.Initialize(UInt64)\n- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)\n  id: Initialize``1(System.UInt32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: Initialize<T>(UInt32)\n  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize<T>(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Initialize\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 140\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public void Initialize<T>(uint numElements)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub Initialize(Of T As Structure)(numElements As UInteger)\n    parameters:\n    - id: numElements\n      type: System.UInt32\n      description: \"\\n<p>The number of elements of the value type to allocate memory for.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The value type to allocate memory for.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>numElements</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>numElements</em> multiplied by the size of each element is greater than the available address space.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Initialize(Of T)(System.UInt32)\n  name.vb: Initialize(Of T)(UInt32)\n  nameWithType: SafeBuffer.Initialize<T>(UInt32)\n  nameWithType.vb: SafeBuffer.Initialize(Of T)(UInt32)\n- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  id: Read``1(System.UInt64)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: Read<T>(UInt64)\n  fullName: System.Runtime.InteropServices.SafeBuffer.Read<T>(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Read\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads a value type from memory at the specified offset.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public T Read<T>(ulong byteOffset)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Function Read(Of T As Structure)(byteOffset As ULong) As T\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: \"\\n<p>The location from which to read the value type. You may have to consider alignment issues.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The value type to read.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The value type that was read from memory.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n    commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Read(Of T)(System.UInt64)\n  name.vb: Read(Of T)(UInt64)\n  nameWithType: SafeBuffer.Read<T>(UInt64)\n  nameWithType.vb: SafeBuffer.Read(Of T)(UInt64)\n- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: ReadArray<T>(UInt64, T[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>(System.UInt64, T[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadArray\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index. </p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub ReadArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: \"\\n<p>The location from which to start reading.</p>\\n\"\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The output array to write to.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The location in the output array to begin writing to.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of value types to read from the input array and to write to the output array.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The value type to read.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>count</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of the array minus the index is less than <em>count</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n    commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)\n  name.vb: ReadArray(Of T)(UInt64, T(), Int32, Int32)\n  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType.vb: SafeBuffer.ReadArray(Of T)(UInt64, T(), Int32, Int32)\n- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer\n  id: ReleasePointer\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: ReleasePointer()\n  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReleasePointer\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 196\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Releases a pointer that was obtained by the <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void ReleasePointer()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub ReleasePointer\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SafeBuffer.ReleasePointer()\n- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)\n  id: Write``1(System.UInt64,``0)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: Write<T>(UInt64, T)\n  fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>(System.UInt64, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Write\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 288\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes a value type to memory at the given location.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public void Write<T>(ulong byteOffset, T value)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub Write(Of T As Structure)(byteOffset As ULong, value As T)\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: \"\\n<p>The location at which to start writing. You may have to consider alignment issues.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The value to write.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The value type to write.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n    commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Write(Of T)(System.UInt64, T)\n  name.vb: Write(Of T)(UInt64, T)\n  nameWithType: SafeBuffer.Write<T>(UInt64, T)\n  nameWithType.vb: SafeBuffer.Write(Of T)(UInt64, T)\n- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  parent: System.Runtime.InteropServices.SafeBuffer\n  langs:\n  - csharp\n  - vb\n  name: WriteArray<T>(UInt64, T[], Int32, Int32)\n  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>(System.UInt64, T[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WriteArray\n    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs\n    startLine: 313\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      Public Sub WriteArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)\n    parameters:\n    - id: byteOffset\n      type: System.UInt64\n      description: \"\\n<p>The location in memory to write to.</p>\\n\"\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The input array.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The offset in the array to start reading from.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of value types to write.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The value type to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of the input array minus <em>index</em> is less than <em>count</em>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method has not been called.</p>\\n\"\n  seealso:\n  - type: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n    commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)\n  name.vb: WriteArray(Of T)(UInt64, T(), Int32, Int32)\n  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)\n  nameWithType.vb: SafeBuffer.WriteArray(Of T)(UInt64, T(), Int32, Int32)\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  parent: System.Runtime.ConstrainedExecution\n  isExternal: true\n  name: CriticalFinalizerObject\n  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n  nameWithType: CriticalFinalizerObject\n  commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject\n- uid: System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n  nameWithType: SafeHandle\n  commentId: T:System.Runtime.InteropServices.SafeHandle\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Runtime.InteropServices.SafeHandle.handle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: handle\n  fullName: System.Runtime.InteropServices.SafeHandle.handle\n  nameWithType: SafeHandle.handle\n  commentId: F:System.Runtime.InteropServices.SafeHandle.handle\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: true\n  name: SetHandle(IntPtr)\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n    name: SetHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle\n  - name: (\n    fullName: (\n  - uid: System.IntPtr\n    name: IntPtr\n    fullName: System.IntPtr\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n    name: SetHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle\n  - name: (\n    fullName: (\n  - uid: System.IntPtr\n    name: IntPtr\n    fullName: System.IntPtr\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.SetHandle(IntPtr)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousGetHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n    name: DangerousGetHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n    name: DangerousGetHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.DangerousGetHandle()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle\n- uid: System.Runtime.InteropServices.SafeHandle.Close\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: true\n  name: Close()\n  fullName: System.Runtime.InteropServices.SafeHandle.Close()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.Close\n    name: Close\n    fullName: System.Runtime.InteropServices.SafeHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.Close\n    name: Close\n    fullName: System.Runtime.InteropServices.SafeHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.Close()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Close\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: Dispose()\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.Dispose\n    name: Dispose\n    fullName: System.Runtime.InteropServices.SafeHandle.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.Dispose\n    name: Dispose\n    fullName: System.Runtime.InteropServices.SafeHandle.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.Dispose()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose\n- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Runtime.InteropServices.SafeHandle.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Runtime.InteropServices.SafeHandle.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.Dispose(Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)\n- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: SetHandleAsInvalid()\n  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n    name: SetHandleAsInvalid\n    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n    name: SetHandleAsInvalid\n    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.SetHandleAsInvalid()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid\n- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: ReleaseHandle()\n  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n    name: ReleaseHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n    name: ReleaseHandle\n    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.ReleaseHandle()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: true\n  name: DangerousAddRef(Boolean)\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n    name: DangerousAddRef\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n    name: DangerousAddRef\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.DangerousAddRef(Boolean)\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)\n- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: DangerousRelease()\n  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()\n  spec.csharp:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n    name: DangerousRelease\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n    name: DangerousRelease\n    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: SafeHandle.DangerousRelease()\n  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease\n- uid: System.Runtime.InteropServices.SafeHandle.IsClosed\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsClosed\n  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed\n  nameWithType: SafeHandle.IsClosed\n  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Runtime.ConstrainedExecution\n  isExternal: false\n  name: System.Runtime.ConstrainedExecution\n  fullName: System.Runtime.ConstrainedExecution\n  nameWithType: System.Runtime.ConstrainedExecution\n  commentId: N:System.Runtime.ConstrainedExecution\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  parent: System.Runtime.InteropServices.SafeHandle\n  isExternal: false\n  name: IsInvalid\n  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid\n  nameWithType: SafeHandle.IsInvalid\n  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.Byte*\n  name: Byte*\n  fullName: System.Byte*\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Byte*\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}