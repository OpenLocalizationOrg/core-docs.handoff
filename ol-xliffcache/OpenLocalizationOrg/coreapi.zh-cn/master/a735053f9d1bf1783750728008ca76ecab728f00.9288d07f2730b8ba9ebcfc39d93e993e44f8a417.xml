{"nodes":[{"pos":[3030,3051],"content":"ReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"ReadOnlyCollection&lt;T&gt;","pos":[0,21],"source":"ReadOnlyCollection<T>"}]},{"content":"\\n&lt;p&gt;The type of elements in the collection.&lt;/p&gt;\\n","pos":[4369,4419],"source":"\\n<p>The type of elements in the collection.</p>\\n"},{"pos":[5861,5889],"content":"ReadOnlyCollection(IList<T>)","needQuote":true,"nodes":[{"content":"ReadOnlyCollection(IList&lt;T&gt;)","pos":[0,28],"source":"ReadOnlyCollection(IList<T>)"}]},{"content":"\\n&lt;p&gt;The list to wrap.&lt;/p&gt;\\n","pos":[6843,6871],"source":"\\n<p>The list to wrap.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6990,7042],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n"},{"pos":[7773,7778],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[9486,9497],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get.&lt;/p&gt;\\n","pos":[10232,10286],"source":"\\n<p>The zero-based index of the element to get.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[10338,10384],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[11531,11536],"content":"Items","needQuote":true,"nodes":[{"content":"Items","pos":[0,5]}]},{"pos":[13368,13393],"content":"ICollection<T>.IsReadOnly","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.IsReadOnly","pos":[0,25],"source":"ICollection<T>.IsReadOnly"}]},{"pos":[15683,15703],"content":"IList<T>.Item[Int32]","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.Item[Int32]","pos":[0,20],"source":"IList<T>.Item[Int32]"}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get.&lt;/p&gt;\\n","pos":[16734,16788],"source":"\\n<p>The zero-based index of the element to get.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[16840,16886],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown if the property is set.&lt;/p&gt;\\n","pos":[17005,17053],"source":"\\n<p>Always thrown if the property is set.</p>\\n"},{"pos":[17883,17909],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[20256,20276],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[22500,22517],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[24586,24602],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[26677,26694],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get.&lt;/p&gt;\\n","pos":[27693,27747],"source":"\\n<p>The zero-based index of the element to get.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[27807,27853],"source":"\\n<p>The element at the specified index.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown if the property is set.&lt;/p&gt;\\n","pos":[28231,28279],"source":"\\n<p>Always thrown if the property is set.</p>\\n"},{"pos":[28947,28958],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[31068,31086],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[32512,32586],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32705,32758],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[32875,32921],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[33946,33961],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[35788,35798],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[38042,38063],"content":"ICollection<T>.Add(T)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Add(T)","pos":[0,21],"source":"ICollection<T>.Add(T)"}]},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[39361,39386],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[40179,40201],"content":"ICollection<T>.Clear()","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Clear()","pos":[0,22],"source":"ICollection<T>.Clear()"}]},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[41287,41312],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[42121,42145],"content":"ICollection<T>.Remove(T)","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;.Remove(T)","pos":[0,24],"source":"ICollection<T>.Remove(T)"}]},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[43802,43827],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[44671,44696],"content":"IList<T>.Insert(Int32, T)","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.Insert(Int32, T)","pos":[0,25],"source":"IList<T>.Insert(Int32, T)"}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[45793,45868],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[46179,46204],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[47063,47087],"content":"IList<T>.RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;.RemoveAt(Int32)","pos":[0,24],"source":"IList<T>.RemoveAt(Int32)"}]},{"content":"\\n&lt;p&gt;The zero-based index of the item to remove.&lt;/p&gt;\\n","pos":[48164,48218],"source":"\\n<p>The zero-based index of the item to remove.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[48337,48362],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[49233,49265],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[50824,50898],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51017,51070],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[51187,51233],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[52743,52770],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[54672,54689],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The position into which the new element was inserted.&lt;/p&gt;\\n","pos":[55936,56000],"source":"\\n<p>The position into which the new element was inserted.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[56119,56144],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[56844,56857],"content":"IList.Clear()","needQuote":true,"nodes":[{"content":"IList.Clear()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[57856,57881],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[58599,58621],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not of the type specified for the generic type parameter &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60166,60265],"source":"\\n<p>\\n<em>value</em> is not of the type specified for the generic type parameter <em>T</em>.</p>\\n"},{"pos":[61041,61062],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The index of &lt;em&gt;value&lt;/em&gt; if found in the list; otherwise, -1.&lt;/p&gt;\\n","pos":[62234,62309],"source":"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is not of the type specified for the generic type parameter &lt;em&gt;T&lt;/em&gt;.&lt;/p&gt;\\n","pos":[62420,62519],"source":"\\n<p>\\n<em>value</em> is not of the type specified for the generic type parameter <em>T</em>.</p>\\n"},{"pos":[63326,63353],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[64421,64496],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[64872,64897],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[65708,65728],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[67079,67104],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[67870,67891],"content":"IList.RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"IList.RemoveAt(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The zero-based index of the item to remove.&lt;/p&gt;\\n","pos":[68917,68971],"source":"\\n<p>The zero-based index of the item to remove.</p>\\n"},{"content":"\\n&lt;p&gt;Always thrown.&lt;/p&gt;\\n","pos":[69090,69115],"source":"\\n<p>Always thrown.</p>\\n"},{"pos":[69577,69607],"content":"System.Collections.ObjectModel","needQuote":true,"nodes":[{"content":"System.Collections.ObjectModel","pos":[0,30]}]},{"pos":[69810,69816],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70034,70042],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[70237,70242],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[70300,70301],"content":"<","needQuote":true,"nodes":[]},{"pos":[70328,70329],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[70443,70448],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[70507,70510]},{"pos":[70544,70545],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[70572,70573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70849,70863],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[71082,71093],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[71157,71158],"content":"<","needQuote":true,"nodes":[]},{"pos":[71185,71186],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71306,71317],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[71382,71385]},{"pos":[71419,71420],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71447,71448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71746,71762],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[71989,72002],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[72068,72069],"content":"<","needQuote":true,"nodes":[]},{"pos":[72096,72097],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72219,72232],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[72299,72302]},{"pos":[72336,72337],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72364,72365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72681,72703],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[72954,72973],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[73045,73046],"content":"<","needQuote":true,"nodes":[]},{"pos":[73073,73074],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73202,73221],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[73294,73297]},{"pos":[73331,73332],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73359,73360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73678,73692],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[73911,73922],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73986,73987],"content":"<","needQuote":true,"nodes":[]},{"pos":[74014,74015],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74135,74146],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[74211,74214]},{"pos":[74248,74249],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[74276,74277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74509,74514],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[74709,74720],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[74933,74944],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75143,75153],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[75248,75256],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75325,75326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75353,75354],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75424,75432],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[75501,75502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75529,75530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75713,75727],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75846,75852],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75919,75920],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75970,75976],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76036,76037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76120,76126],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76193,76194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76244,76250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76310,76311],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76525,76547],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[76695,76701],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[76768,76769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76819,76825],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76886,76887]},{"pos":[76942,76948],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77008,77009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77106,77112],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[77179,77180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77230,77236],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[77297,77298]},{"pos":[77353,77359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77419,77420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77665,77696],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[77862,77877],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[77953,77954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78004,78010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78071,78072]},{"pos":[78127,78133],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78193,78194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78300,78315],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[78391,78392],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78442,78448],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[78509,78510]},{"pos":[78565,78571],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78631,78632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78862,78875],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[78976,78987],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79059,79060],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79087,79088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79161,79172],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[79244,79245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79272,79273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79448,79457],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[79550,79557],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79625,79626],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79653,79654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79723,79730],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[79798,79799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79826,79827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80002,80019],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[80128,80143],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80219,80220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80247,80248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80325,80340],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[80416,80417],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80444,80445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80590,80596],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[80731,80739],"content":"IList<T>","needQuote":true,"nodes":[{"content":"IList&lt;T&gt;","pos":[0,8],"source":"IList<T>"}]},{"pos":[80934,80939],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[80997,80998],"content":"<","needQuote":true,"nodes":[]},{"pos":[81025,81026],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81140,81145],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"content":"(Of","pos":[81204,81207]},{"pos":[81241,81242],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[81269,81270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81455,81481],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[81682,81696],"content":"ICollection<T>","needQuote":true,"nodes":[{"content":"ICollection&lt;T&gt;","pos":[0,14],"source":"ICollection<T>"}]},{"pos":[81915,81926],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[81990,81991],"content":"<","needQuote":true,"nodes":[]},{"pos":[82018,82019],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82139,82150],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"content":"(Of","pos":[82215,82218]},{"pos":[82252,82253],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82280,82281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82500,82516],"content":"IReadOnlyList<T>","needQuote":true,"nodes":[{"content":"IReadOnlyList&lt;T&gt;","pos":[0,16],"source":"IReadOnlyList<T>"}]},{"pos":[82743,82756],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"pos":[82822,82823],"content":"<","needQuote":true,"nodes":[]},{"pos":[82850,82851],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[82973,82986],"content":"IReadOnlyList","needQuote":true,"nodes":[{"content":"IReadOnlyList","pos":[0,13]}]},{"content":"(Of","pos":[83053,83056]},{"pos":[83090,83091],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83118,83119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83350,83372],"content":"IReadOnlyCollection<T>","needQuote":true,"nodes":[{"content":"IReadOnlyCollection&lt;T&gt;","pos":[0,22],"source":"IReadOnlyCollection<T>"}]},{"pos":[83623,83642],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"pos":[83714,83715],"content":"<","needQuote":true,"nodes":[]},{"pos":[83742,83743],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83871,83890],"content":"IReadOnlyCollection","needQuote":true,"nodes":[{"content":"IReadOnlyCollection","pos":[0,19]}]},{"content":"(Of","pos":[83963,83966]},{"pos":[84000,84001],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84028,84029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84270,84284],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[84503,84514],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[84578,84579],"content":"<","needQuote":true,"nodes":[]},{"pos":[84606,84607],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84727,84738],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[84803,84806]},{"pos":[84840,84841],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84868,84869],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85064,85082],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[85363,85368],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[85843,85848],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[86272,86277],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[86478,86483],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86641,86646],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[87005,87010],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[87531,87542],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[87818,87822],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[87897,87898]},{"pos":[87950,87955],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[88015,88016]},{"pos":[88128,88132],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[88209,88210],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88259,88264],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88323,88324],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88553,88554],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[88702,88713],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[88989,88993],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[89068,89069]},{"pos":[89121,89126],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[89186,89187]},{"pos":[89299,89303],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[89380,89381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89430,89435],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[89494,89495],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89722,89723],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[89946,89956],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[90319,90326],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[90495,90505],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[90987,90998],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[91250,91254],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[91321,91322]},{"pos":[91374,91379],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[91439,91440]},{"pos":[91544,91548],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[91617,91618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91667,91672],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91731,91732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91988,91999],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[92251,92255],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[92322,92323]},{"pos":[92375,92380],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[92440,92441]},{"pos":[92545,92549],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[92618,92619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92668,92673],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92732,92733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93021,93035],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[93314,93322],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[93574,93585],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[93827,93837],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[94083,94094],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[94311,94315],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[94371,94372]},{"pos":[94424,94429],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[94489,94490]},{"pos":[94584,94588],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[94643,94644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94693,94698],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[94757,94758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95100,95111],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[95338,95346],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[95422,95423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95450,95451],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95478,95479],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95580,95588],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[95667,95668],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[95695,95696],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[95723,95724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95993,96004],"content":"Contains(T)","needQuote":true,"nodes":[{"content":"Contains(T)","pos":[0,11]}]},{"pos":[96231,96239],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[96315,96316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96343,96344],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[96371,96372],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96473,96481],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[96560,96561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96588,96589],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[96616,96617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97016,97034],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[97332,97338],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[97412,97413],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97440,97441],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[97469,97471]},{"content":",","pos":[97503,97504]},{"pos":[97558,97563],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[97622,97623],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97737,97743],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[97820,97821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97848,97849],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[97876,97878],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[97907,97908]},{"pos":[97962,97967],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[98026,98027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98257,98260],"content":"T[]","needQuote":true,"nodes":[{"content":"T[]","pos":[0,3]}]},{"pos":[98336,98337],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[98365,98367]},{"pos":[98409,98410],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[98437,98439],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[98601,98619],"content":"CopyTo(T[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(T[], Int32)","pos":[0,18]}]},{"pos":[98917,98923],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[98997,98998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99025,99026],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":"[]","pos":[99054,99056]},{"content":",","pos":[99088,99089]},{"pos":[99143,99148],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99207,99208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99322,99328],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[99405,99406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99433,99434],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[99461,99463],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[99492,99493]},{"pos":[99547,99552],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99611,99612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100013,100028],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[100264,100277],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[100358,100359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100386,100387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100489,100502],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[100586,100587],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100614,100615],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100955,100969],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[101188,101199],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[101263,101264],"content":"<","needQuote":true,"nodes":[]},{"pos":[101291,101292],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101412,101423],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[101488,101491]},{"pos":[101525,101526],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101553,101554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101787,101802],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[102038,102051],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[102132,102133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102160,102161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102263,102276],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[102360,102361],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102388,102389],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102652,102666],"content":"IEnumerator<T>","needQuote":true,"nodes":[{"content":"IEnumerator&lt;T&gt;","pos":[0,14],"source":"IEnumerator<T>"}]},{"pos":[102885,102896],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[102960,102961],"content":"<","needQuote":true,"nodes":[]},{"pos":[102988,102989],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[103109,103120],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"content":"(Of","pos":[103185,103188]},{"pos":[103222,103223],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[103250,103251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103567,103577],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[103783,103790],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[103859,103860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103887,103888],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[103915,103916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104010,104017],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[104089,104090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104117,104118],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104145,104146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104387,104397],"content":"IndexOf(T)","needQuote":true,"nodes":[{"content":"IndexOf(T)","pos":[0,10]}]},{"pos":[104603,104610],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[104679,104680],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104707,104708],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104735,104736],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104830,104837],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[104909,104910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104937,104938],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104965,104966],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105308,105314],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[105526,105529],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[105600,105601],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105628,105629],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[105656,105657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105753,105756],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[105830,105831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105858,105859],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[105886,105887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106136,106142],"content":"Add(T)","needQuote":true,"nodes":[{"content":"Add(T)","pos":[0,6]}]},{"pos":[106354,106357],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[106428,106429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106456,106457],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[106484,106485],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106581,106584],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[106658,106659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106686,106687],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[106714,106715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107058,107065],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[107277,107282],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[107355,107356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107383,107384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107478,107483],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[107559,107560],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107587,107588],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107835,107842],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[108054,108059],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[108132,108133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108160,108161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108255,108260],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[108336,108337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108364,108365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108719,108728],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[108949,108955],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[109029,109030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109057,109058],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109085,109086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109185,109191],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[109268,109269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109296,109297],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109324,109325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109586,109595],"content":"Remove(T)","needQuote":true,"nodes":[{"content":"Remove(T)","pos":[0,9]}]},{"pos":[109816,109822],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[109896,109897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109924,109925],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[109952,109953],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110052,110058],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[110135,110136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110163,110164],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[110191,110192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110563,110579],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[110823,110829],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[110897,110898],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110947,110952],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111012,111013]},{"pos":[111045,111046],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111073,111074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111180,111186],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[111257,111258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111307,111312],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111372,111373]},{"pos":[111405,111406],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[111433,111434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111710,111726],"content":"Insert(Int32, T)","needQuote":true,"nodes":[{"content":"Insert(Int32, T)","pos":[0,16]}]},{"pos":[111970,111976],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[112044,112045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112094,112099],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112159,112160]},{"pos":[112192,112193],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[112220,112221],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112327,112333],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[112404,112405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112454,112459],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112519,112520]},{"pos":[112552,112553],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[112580,112581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112958,112973],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[113214,113222],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[113292,113293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113342,113347],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113406,113407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113512,113520],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[113593,113594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113643,113648],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[113707,113708],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113980,113995],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[114236,114244],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[114314,114315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114364,114369],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114428,114429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114534,114542],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[114615,114616],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114665,114670],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114729,114730],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115048,115068],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[115246,115252],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[115315,115316],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115365,115370],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[115409,115410]},{"pos":[115464,115469],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115528,115529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115641,115647],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[115710,115711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115760,115765],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[115804,115805]},{"pos":[115859,115864],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[115923,115924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116135,116140],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[116337,116352],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[116491,116504],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[116574,116575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116602,116603],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116695,116708],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[116778,116779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116806,116807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117023,117034],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[117265,117276],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[117411,117414],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[117468,117469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117519,117525],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117585,117586],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117677,117680],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[117734,117735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117785,117791],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[117851,117852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118063,118070],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[118181,118186],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[118242,118243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118270,118271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118349,118354],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[118410,118411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118438,118439],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118650,118666],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[118811,118819],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[118878,118879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118929,118935],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[118995,118996],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119092,119100],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[119159,119160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119210,119216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119276,119277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119514,119529],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[119672,119679],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[119737,119738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119788,119794],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[119854,119855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119950,119957],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[120015,120016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120066,120072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120132,120133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120380,120401],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[120569,120575],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[120632,120633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120682,120687],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[120747,120748]},{"pos":[120803,120809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[120869,120870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120977,120983],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[121040,121041],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121090,121095],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121155,121156]},{"pos":[121211,121217],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121277,121278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121530,121544],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[121685,121691],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[121748,121749],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121799,121805],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[121865,121866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121960,121966],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[122023,122024],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122074,122080],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122140,122141],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122374,122389],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[122532,122540],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[122599,122600],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122649,122654],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122713,122714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122809,122817],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[122876,122877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122926,122931],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122990,122991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123173,123194],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[123388,123415],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[123638,123659],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[123860,123877],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1\n  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1\n  id: ReadOnlyCollection`1\n  parent: System.Collections.ObjectModel\n  children:\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.Count\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.Items\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  - System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: ReadOnlyCollection<T>\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReadOnlyCollection\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 14\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Provides the base class for a generic read-only collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(false)]\n\n      [DebuggerTypeProxy(typeof (Mscorlib_CollectionDebugView<>))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      public class ReadOnlyCollection<T> : IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(False)>\n\n      <DebuggerTypeProxy(GetType(Mscorlib_CollectionDebugView(Of )))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      Public Class ReadOnlyCollection(Of T)\n          Implements IList(Of T), ICollection(Of T), IList, ICollection, IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of elements in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.Collection`1\n    commentId: T:System.Collections.ObjectModel.Collection`1\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.Generic.IList{{T}}\n  - System.Collections.Generic.ICollection{{T}}\n  - System.Collections.Generic.IReadOnlyList{{T}}\n  - System.Collections.Generic.IReadOnlyCollection{{T}}\n  - System.Collections.Generic.IEnumerable{{T}}\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)\n  name.vb: ReadOnlyCollection(Of T)\n  nameWithType: ReadOnlyCollection<T>\n  nameWithType.vb: ReadOnlyCollection(Of T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.#ctor(System.Collections.Generic.IList{`0})\n  id: '#ctor(System.Collections.Generic.IList{`0})'\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ReadOnlyCollection(IList<T>)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.ReadOnlyCollection(System.Collections.Generic.IList<T>)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is a read-only wrapper around the specified list.</p>\\n\"\n  syntax:\n    content: public ReadOnlyCollection(IList<T> list)\n    content.vb: Public Sub New(list As IList(Of T))\n    parameters:\n    - id: list\n      type: System.Collections.Generic.IList{{T}}\n      description: \"\\n<p>The list to wrap.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IList`1\n    commentId: T:System.Collections.Generic.IList`1\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).ReadOnlyCollection(System.Collections.Generic.IList(Of T))\n  name.vb: ReadOnlyCollection(IList(Of T))\n  nameWithType: ReadOnlyCollection<T>.ReadOnlyCollection(IList<T>)\n  nameWithType.vb: ReadOnlyCollection(Of T).ReadOnlyCollection(IList(Of T))\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Count\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count\n  id: Count\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 31\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Count\n  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Count\n  nameWithType: ReadOnlyCollection<T>.Count\n  nameWithType.vb: ReadOnlyCollection(Of T).Count\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets the element at the specified index.</p>\\n\"\n  syntax:\n    content: public T this[int index] { get; }\n    content.vb: Public ReadOnly Property Item(index As Integer) As T\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.ReadOnlyCollection`1.Count\n    commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Count\n  implements:\n  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: ReadOnlyCollection<T>.Item[Int32]\n  nameWithType.vb: ReadOnlyCollection(Of T).Item(Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Items\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.Items\n  id: Items\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: Items\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Items\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Items\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 55\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Returns the <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wraps.</p>\\n\"\n  syntax:\n    content: protected IList<T> Items { get; }\n    content.vb: Protected ReadOnly Property Items As IList(Of T)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IList{{T}}\n      description: \"\\n<p>The <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> wraps.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Items\n  nameWithType: ReadOnlyCollection<T>.Items\n  nameWithType.vb: ReadOnlyCollection(Of T).Items\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#IsReadOnly\n  id: System#Collections#Generic#ICollection{T}#IsReadOnly\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.IsReadOnly\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.IsReadOnly\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 61\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>true</strong>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly\n  nameWithType: ReadOnlyCollection<T>.ICollection<T>.IsReadOnly\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Item(System.Int32)\n  id: System#Collections#Generic#IList{T}#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.Item[Int32]\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.this[]\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets the element at the specified index. An <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> occurs if you try to set the item at the specified index.</p>\\n\"\n  syntax:\n    content: T IList<T>.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IList<T>.Item(index As Integer) As T Implements IList(Of T).this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown if the property is set.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(System.Int32)\n  name.vb: System.Collections.Generic.IList<T>.Item(Int32)\n  nameWithType: ReadOnlyCollection<T>.IList<T>.Item[Int32]\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Item(Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 97\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: ReadOnlyCollection<T>.ICollection.IsSynchronized\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns the current instance.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: ReadOnlyCollection<T>.ICollection.SyncRoot\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.SyncRoot\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>true</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: ReadOnlyCollection<T>.IList.IsFixedSize\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IsFixedSize\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 179\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>.  In the default implementation of <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this property always returns <strong>true</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: ReadOnlyCollection<T>.IList.IsReadOnly\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IsReadOnly\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.this[]\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 183\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Gets the element at the specified index. A <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> occurs if you try to set the item at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is not a valid index in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown if the property is set.</p>\\n\"\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: ReadOnlyCollection<T>.IList.Item[Int32]\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Item(Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)\n  id: Contains(`0)\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: Contains(T)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.Contains(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 39\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines whether an element is in the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Contains(T value)\n    content.vb: Public Function Contains(value As T) As Boolean\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> is found in the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)\n    commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Contains({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).Contains(T)\n  nameWithType: ReadOnlyCollection<T>.Contains(T)\n  nameWithType.vb: ReadOnlyCollection(Of T).Contains(T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.CopyTo(`0[],System.Int32)\n  id: CopyTo(`0[],System.Int32)\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.CopyTo(T[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: public void CopyTo(T[] array, int index)\n    content.vb: Public Sub CopyTo(array As T(), index As Integer)\n    parameters:\n    - id: array\n      type: '{T}[]'\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  nameWithType: ReadOnlyCollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ReadOnlyCollection(Of T).CopyTo(T(), Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 47\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IEnumerator<T> GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator(Of T)\n    return:\n      type: System.Collections.Generic.IEnumerator{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerator`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Generic.IEnumerator`1\n    commentId: T:System.Collections.Generic.IEnumerator`1\n  implements:\n  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).GetEnumerator()\n  nameWithType: ReadOnlyCollection<T>.GetEnumerator()\n  nameWithType.vb: ReadOnlyCollection(Of T).GetEnumerator()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.IndexOf(`0)\n  id: IndexOf(`0)\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(T)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.IndexOf(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOf\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 51\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int IndexOf(T value)\n    content.vb: Public Function IndexOf(value As T) As Integer\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to locate in the <xref href=\\\"System.Collections.Generic.List`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The value can be <strong>null</strong> for reference types.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>item</em> within the entire <xref href=\\\"System.Collections.ObjectModel.ReadOnlyCollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)\n    commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.Contains(`0)\n  implements:\n  - System.Collections.Generic.IList{{T}}.IndexOf({T})\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).IndexOf(T)\n  nameWithType: ReadOnlyCollection<T>.IndexOf(T)\n  nameWithType.vb: ReadOnlyCollection(Of T).IndexOf(T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Add(`0)\n  id: System#Collections#Generic#ICollection{T}#Add(`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Add(T)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Add(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Add\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 72\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void ICollection<T>.Add(T value)\n    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(value As T) Implements ICollection(Of T).Add\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to add to the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Add({T})\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)\n  name.vb: System.Collections.Generic.ICollection<T>.Add(T)\n  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Add(T)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Add(T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Clear\n  id: System#Collections#Generic#ICollection{T}#Clear\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Clear()\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Clear\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 76\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes all items from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void ICollection<T>.Clear()\n    content.vb: Sub System.Collections.Generic.ICollection<T>.Clear Implements ICollection(Of T).Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Clear\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()\n  name.vb: System.Collections.Generic.ICollection<T>.Clear()\n  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Clear()\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Clear()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#ICollection{T}#Remove(`0)\n  id: System#Collections#Generic#ICollection{T}#Remove(`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection<T>.Remove(T)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.ICollection<T>.Remove(T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.ICollection<T>.Remove\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 84\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: bool ICollection<T>.Remove(T value)\n    content.vb: Function System.Collections.Generic.ICollection<T>.Remove(value As T) As Boolean Implements ICollection(Of T).Remove\n    parameters:\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to remove from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value</em> was successfully removed from the <xref href=\\\"System.Collections.Generic.ICollection`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.Generic.ICollection{{T}}.Remove({T})\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)\n  name.vb: System.Collections.Generic.ICollection<T>.Remove(T)\n  nameWithType: ReadOnlyCollection<T>.ICollection<T>.Remove(T)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.ICollection<T>.Remove(T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  id: System#Collections#Generic#IList{T}#Insert(System.Int32,`0)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.Insert(Int32, T)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.Insert\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 80\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Inserts an item to the <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList<T>.Insert(int index, T value)\n    content.vb: Sub System.Collections.Generic.IList<T>.Insert(index As Integer, value As T) Implements IList(Of T).Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: '{T}'\n      description: \"\\n<p>The object to insert into the <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  name.vb: System.Collections.Generic.IList<T>.Insert(Int32, T)\n  nameWithType: ReadOnlyCollection<T>.IList<T>.Insert(Int32, T)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.Insert(Int32, T)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  id: System#Collections#Generic#IList{T}#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList<T>.RemoveAt(Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.Generic.IList<T>.RemoveAt\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Collections.Generic.IList`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> item at the specified index.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList<T>.RemoveAt(int index)\n    content.vb: Sub System.Collections.Generic.IList<T>.RemoveAt(index As Integer) Implements IList(Of T).RemoveAt\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the item to remove.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  name.vb: System.Collections.Generic.IList<T>.RemoveAt(Int32)\n  nameWithType: ReadOnlyCollection<T>.IList<T>.RemoveAt(Int32)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.Generic.IList<T>.RemoveAt(Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 116\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Copies the elements of the <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to an <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at a particular <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>\\n<em>array</em> does not have zero-based indexing.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n<p>-or-</p>\\n<p>The type of the source <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: ReadOnlyCollection<T>.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 93\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Returns an enumerator that iterates through a collection.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be used to iterate through the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: ReadOnlyCollection<T>.IEnumerable.GetEnumerator()\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Add\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Adds an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position into which the new element was inserted.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: ReadOnlyCollection<T>.IList.Add(Object)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Add(Object)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Clear\n  id: System#Collections#IList#Clear\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Clear()\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Clear\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 195\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes all items from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Clear()\n    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.IList.Clear\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Clear()\n  name.vb: System.Collections.IList.Clear()\n  nameWithType: ReadOnlyCollection<T>.IList.Clear()\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Clear()\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Contains\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 205\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific value.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is found in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is not of the type specified for the generic type parameter <em>T</em>.</p>\\n\"\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: ReadOnlyCollection<T>.IList.Contains(Object)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Contains(Object)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IndexOf\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 212\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Determines the index of a specific item in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>value</em> is not of the type specified for the generic type parameter <em>T</em>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: ReadOnlyCollection<T>.IList.IndexOf(Object)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Insert\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 219\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Inserts an item to the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert into the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Insert(System.Int32, System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: ReadOnlyCollection<T>.IList.Insert(Int32, Object)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Insert(Int32, Object)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Remove\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 223\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: ReadOnlyCollection<T>.IList.Remove(Object)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.Remove(Object)\n- uid: System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  commentId: M:System.Collections.ObjectModel.ReadOnlyCollection`1.System#Collections#IList#RemoveAt(System.Int32)\n  id: System#Collections#IList#RemoveAt(System.Int32)\n  isEii: true\n  parent: System.Collections.ObjectModel.ReadOnlyCollection`1\n  langs:\n  - csharp\n  - vb\n  name: IList.RemoveAt(Int32)\n  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>.System.Collections.IList.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.RemoveAt\n    path: src/mscorlib/src/System/Collections/ObjectModel/ReadOnlyCollection.cs\n    startLine: 227\n  assemblies:\n  - System.Runtime\n  namespace: System.Collections.ObjectModel\n  summary: \"\\n<p>Removes the <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> item at the specified index.  This implementation always throws <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.RemoveAt(int index)\n    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the item to remove.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Always thrown.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  fullName.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(System.Int32)\n  name.vb: System.Collections.IList.RemoveAt(Int32)\n  nameWithType: ReadOnlyCollection<T>.IList.RemoveAt(Int32)\n  nameWithType.vb: ReadOnlyCollection(Of T).System.Collections.IList.RemoveAt(Int32)\nreferences:\n- uid: System.Collections.ObjectModel\n  isExternal: false\n  name: System.Collections.ObjectModel\n  fullName: System.Collections.ObjectModel\n  nameWithType: System.Collections.ObjectModel\n  commentId: N:System.Collections.ObjectModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.Generic.IList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IList`1\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList{`0}\n- uid: System.Collections.Generic.ICollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.ICollection`1\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection{`0}\n- uid: System.Collections.Generic.IReadOnlyList{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyList`1\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList{`0}\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IReadOnlyCollection`1\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections.Generic.IList`1\n  isExternal: false\n  name: IList<T>\n  fullName: System.Collections.Generic.IList<T>\n  fullname.vb: System.Collections.Generic.IList(Of T)\n  name.vb: IList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1\n    name: IList\n    fullName: System.Collections.Generic.IList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>\n  nameWithType.vb: IList(Of T)\n  commentId: T:System.Collections.Generic.IList`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Collections.Generic.ICollection`1\n  isExternal: false\n  name: ICollection<T>\n  fullName: System.Collections.Generic.ICollection<T>\n  fullname.vb: System.Collections.Generic.ICollection(Of T)\n  name.vb: ICollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1\n    name: ICollection\n    fullName: System.Collections.Generic.ICollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>\n  nameWithType.vb: ICollection(Of T)\n  commentId: T:System.Collections.Generic.ICollection`1\n- uid: System.Collections.Generic.IReadOnlyList`1\n  isExternal: false\n  name: IReadOnlyList<T>\n  fullName: System.Collections.Generic.IReadOnlyList<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)\n  name.vb: IReadOnlyList(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1\n    name: IReadOnlyList\n    fullName: System.Collections.Generic.IReadOnlyList\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>\n  nameWithType.vb: IReadOnlyList(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyList`1\n- uid: System.Collections.Generic.IReadOnlyCollection`1\n  isExternal: false\n  name: IReadOnlyCollection<T>\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)\n  name.vb: IReadOnlyCollection(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyCollection`1\n    name: IReadOnlyCollection\n    fullName: System.Collections.Generic.IReadOnlyCollection\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyCollection<T>\n  nameWithType.vb: IReadOnlyCollection(Of T)\n  commentId: T:System.Collections.Generic.IReadOnlyCollection`1\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.Generic.ICollection{{T}}.Count\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection{`0}.Count\n- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count\n  parent: System.Collections.Generic.IReadOnlyCollection{{T}}\n  definition: System.Collections.Generic.IReadOnlyCollection`1.Count\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Generic.ICollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.ICollection<T>.Count\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Count\n  nameWithType: ICollection<T>.Count\n  nameWithType.vb: ICollection(Of T).Count\n  commentId: P:System.Collections.Generic.ICollection`1.Count\n- uid: System.Collections.Generic.IReadOnlyCollection`1.Count\n  isExternal: false\n  name: Count\n  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count\n  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count\n  nameWithType: IReadOnlyCollection<T>.Count\n  nameWithType.vb: IReadOnlyCollection(Of T).Count\n  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count\n- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IReadOnlyList{{T}}\n  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList{`0}.Item(System.Int32)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  nameWithType: T\n  commentId: '!:T'\n- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IReadOnlyList<T>.Item[Int32]\n  nameWithType.vb: IReadOnlyList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.IsReadOnly\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection{`0}.IsReadOnly\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Generic.ICollection`1.IsReadOnly\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly\n  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly\n  nameWithType: ICollection<T>.IsReadOnly\n  nameWithType.vb: ICollection(Of T).IsReadOnly\n  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly\n- uid: System.Collections.Generic.IList{{T}}.Item(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Item(System.Int32)\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList{`0}.Item(System.Int32)\n- uid: System.Collections.Generic.IList`1.Item(System.Int32)\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.Generic.IList<T>.Item[System.Int32]\n  fullname.vb: System.Collections.Generic.IList(Of T).Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList<T>.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.Generic.IList(Of T).Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Item[Int32]\n  nameWithType.vb: IList(Of T).Item(Int32)\n  commentId: P:System.Collections.Generic.IList`1.Item(System.Int32)\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Contains(`0)\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Contains(`0)\n- uid: System.Collections.Generic.ICollection`1.Contains(`0)\n  isExternal: false\n  name: Contains(T)\n  fullName: System.Collections.Generic.ICollection<T>.Contains(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection<T>.Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Contains(`0)\n    name: Contains\n    fullName: System.Collections.Generic.ICollection(Of T).Contains\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Contains(T)\n  nameWithType.vb: ICollection(Of T).Contains(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection{`0}.CopyTo(`0[],System.Int32)\n- uid: '{T}[]'\n  name: T[]\n  fullName: T[]\n  fullname.vb: T()\n  name.vb: T()\n  spec.csharp:\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  nameWithType: T[]\n  nameWithType.vb: T()\n- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n  isExternal: true\n  name: CopyTo(T[], Int32)\n  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)\n  name.vb: CopyTo(T(), Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection<T>.CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n    name: CopyTo\n    fullName: System.Collections.Generic.ICollection(Of T).CopyTo\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.CopyTo(T[], Int32)\n  nameWithType.vb: ICollection(Of T).CopyTo(T(), Int32)\n  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)\n- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator\n  parent: System.Collections.Generic.IEnumerable{{T}}\n  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerator`1\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator{`0}\n- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>.GetEnumerator()\n  nameWithType.vb: IEnumerable(Of T).GetEnumerator()\n  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator\n- uid: System.Collections.Generic.IEnumerator`1\n  isExternal: false\n  name: IEnumerator<T>\n  fullName: System.Collections.Generic.IEnumerator<T>\n  fullname.vb: System.Collections.Generic.IEnumerator(Of T)\n  name.vb: IEnumerator(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerator`1\n    name: IEnumerator\n    fullName: System.Collections.Generic.IEnumerator\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerator<T>\n  nameWithType.vb: IEnumerator(Of T)\n  commentId: T:System.Collections.Generic.IEnumerator`1\n- uid: System.Collections.Generic.IList{{T}}.IndexOf({T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.IndexOf(`0)\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList{`0}.IndexOf(`0)\n- uid: System.Collections.Generic.IList`1.IndexOf(`0)\n  isExternal: false\n  name: IndexOf(T)\n  fullName: System.Collections.Generic.IList<T>.IndexOf(T)\n  fullname.vb: System.Collections.Generic.IList(Of T).IndexOf(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList<T>.IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.IndexOf(`0)\n    name: IndexOf\n    fullName: System.Collections.Generic.IList(Of T).IndexOf\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.IndexOf(T)\n  nameWithType.vb: IList(Of T).IndexOf(T)\n  commentId: M:System.Collections.Generic.IList`1.IndexOf(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.Add({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Add(`0)\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Add(`0)\n- uid: System.Collections.Generic.ICollection`1.Add(`0)\n  isExternal: false\n  name: Add(T)\n  fullName: System.Collections.Generic.ICollection<T>.Add(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection<T>.Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Add(`0)\n    name: Add\n    fullName: System.Collections.Generic.ICollection(Of T).Add\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Add(T)\n  nameWithType.vb: ICollection(Of T).Add(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)\n- uid: System.Collections.Generic.ICollection{{T}}.Clear\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Clear\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection{`0}.Clear\n- uid: System.Collections.Generic.ICollection`1.Clear\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.Generic.ICollection<T>.Clear()\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection<T>.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Clear\n    name: Clear\n    fullName: System.Collections.Generic.ICollection(Of T).Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Clear()\n  nameWithType.vb: ICollection(Of T).Clear()\n  commentId: M:System.Collections.Generic.ICollection`1.Clear\n- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})\n  parent: System.Collections.Generic.ICollection{{T}}\n  definition: System.Collections.Generic.ICollection`1.Remove(`0)\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection{`0}.Remove(`0)\n- uid: System.Collections.Generic.ICollection`1.Remove(`0)\n  isExternal: false\n  name: Remove(T)\n  fullName: System.Collections.Generic.ICollection<T>.Remove(T)\n  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)\n  spec.csharp:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection<T>.Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.ICollection`1.Remove(`0)\n    name: Remove\n    fullName: System.Collections.Generic.ICollection(Of T).Remove\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: ICollection<T>.Remove(T)\n  nameWithType.vb: ICollection(Of T).Remove(T)\n  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)\n- uid: System.Collections.Generic.IList{{T}}.Insert(System.Int32,{T})\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList{`0}.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n  isExternal: true\n  name: Insert(Int32, T)\n  fullName: System.Collections.Generic.IList<T>.Insert(System.Int32, T)\n  fullname.vb: System.Collections.Generic.IList(Of T).Insert(System.Int32, T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList<T>.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n    name: Insert\n    fullName: System.Collections.Generic.IList(Of T).Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.Insert(Int32, T)\n  nameWithType.vb: IList(Of T).Insert(Int32, T)\n  commentId: M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)\n- uid: System.Collections.Generic.IList{{T}}.RemoveAt(System.Int32)\n  parent: System.Collections.Generic.IList{{T}}\n  definition: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList{`0}.RemoveAt(System.Int32)\n- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.Generic.IList<T>.RemoveAt(System.Int32)\n  fullname.vb: System.Collections.Generic.IList(Of T).RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList<T>.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.Generic.IList(Of T).RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList<T>.RemoveAt(Int32)\n  nameWithType.vb: IList(Of T).RemoveAt(Int32)\n  commentId: M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}