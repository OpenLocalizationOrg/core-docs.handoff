{"nodes":[{"pos":[293,299],"content":"SHA384","needQuote":true,"nodes":[{"content":"SHA384","pos":[0,6]}]},{"pos":[3476,3484],"content":"SHA384()","needQuote":true,"nodes":[{"content":"SHA384()","pos":[0,8]}]},{"pos":[4516,4524],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.&lt;/p&gt;\\n","pos":[5664,5792],"source":"\\n<p>The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</p>\\n"},{"pos":[5982,6010],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[6207,6213],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6409,6422],"content":"HashAlgorithm","needQuote":true,"nodes":[{"content":"HashAlgorithm","pos":[0,13]}]},{"pos":[6686,6702],"content":"ICryptoTransform","needQuote":true,"nodes":[{"content":"ICryptoTransform","pos":[0,16]}]},{"pos":[6926,6937],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[7175,7188],"content":"HashSizeValue","needQuote":true,"nodes":[{"content":"HashSizeValue","pos":[0,13]}]},{"pos":[7514,7523],"content":"HashValue","needQuote":true,"nodes":[{"content":"HashValue","pos":[0,9]}]},{"pos":[7833,7838],"content":"State","needQuote":true,"nodes":[{"content":"State","pos":[0,5]}]},{"pos":[8152,8166],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[8343,8349],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[8445,8446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8496,8502],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8562,8563],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8675,8681],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[8777,8778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8828,8834],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[8894,8895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9197,9216],"content":"ComputeHash(Stream)","needQuote":true,"nodes":[{"content":"ComputeHash(Stream)","pos":[0,19]}]},{"pos":[9409,9420],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[9500,9501],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9554,9560],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[9623,9624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9744,9755],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[9835,9836],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9889,9895],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[9958,9959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10271,10290],"content":"ComputeHash(Byte[])","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[])","pos":[0,19]}]},{"pos":[10593,10604],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[10684,10685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10733,10737],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[10796,10798]},{"pos":[10829,10830],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10947,10958],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[11038,11039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11087,11091],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[11149,11151],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[11179,11180],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11568,11601],"content":"ComputeHash(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"ComputeHash(Byte[], Int32, Int32)","pos":[0,33]}]},{"pos":[12000,12011],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[12091,12092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12140,12144],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[12203,12205]},{"content":",","pos":[12237,12238]},{"pos":[12292,12297],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[12357,12358]},{"pos":[12412,12417],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[12476,12477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12620,12631],"content":"ComputeHash","needQuote":true,"nodes":[{"content":"ComputeHash","pos":[0,11]}]},{"pos":[12711,12712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12760,12764],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[12822,12824],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[12853,12854]},{"pos":[12908,12913],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[12973,12974]},{"pos":[13028,13033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13092,13093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13565,13616],"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","needQuote":true,"nodes":[{"content":"TransformBlock(Byte[], Int32, Int32, Byte[], Int32)","pos":[0,51]}]},{"pos":[14127,14141],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[14245,14246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14294,14298],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14357,14359]},{"content":",","pos":[14391,14392]},{"pos":[14446,14451],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[14511,14512]},{"pos":[14566,14571],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[14631,14632]},{"pos":[14685,14689],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[14748,14750]},{"content":",","pos":[14782,14783]},{"pos":[14837,14842],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14901,14902],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15075,15089],"content":"TransformBlock","needQuote":true,"nodes":[{"content":"TransformBlock","pos":[0,14]}]},{"pos":[15193,15194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15242,15246],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15304,15306],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[15335,15336]},{"pos":[15390,15395],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[15455,15456]},{"pos":[15510,15515],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[15575,15576]},{"pos":[15629,15633],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15691,15693],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[15722,15723]},{"pos":[15777,15782],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[15841,15842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16358,16399],"content":"TransformFinalBlock(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"TransformFinalBlock(Byte[], Int32, Int32)","pos":[0,41]}]},{"pos":[16830,16849],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[16958,16959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17007,17011],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[17070,17072]},{"content":",","pos":[17104,17105]},{"pos":[17159,17164],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17224,17225]},{"pos":[17279,17284],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[17343,17344],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17495,17514],"content":"TransformFinalBlock","needQuote":true,"nodes":[{"content":"TransformFinalBlock","pos":[0,19]}]},{"pos":[17623,17624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17672,17676],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[17734,17736],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[17765,17766]},{"pos":[17820,17825],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[17885,17886]},{"pos":[17940,17945],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18004,18005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18427,18436],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[18587,18594],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18670,18671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18698,18699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18797,18804],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[18880,18881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18908,18909],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19168,19175],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[19322,19327],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[19422,19423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19450,19451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19547,19552],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[19647,19648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19675,19676],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19949,19965],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[20146,20153],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20229,20230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20281,20288],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20349,20350],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20464,20471],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20547,20548],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20599,20606],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[20667,20668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20956,20968],"content":"Initialize()","needQuote":true,"nodes":[{"content":"Initialize()","pos":[0,12]}]},{"pos":[21125,21135],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[21214,21215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21242,21243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21344,21354],"content":"Initialize","needQuote":true,"nodes":[{"content":"Initialize","pos":[0,10]}]},{"pos":[21433,21434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21461,21462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21771,21801],"content":"HashCore(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"HashCore(Byte[], Int32, Int32)","pos":[0,30]}]},{"pos":[22188,22196],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[22273,22274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22322,22326],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[22385,22387]},{"content":",","pos":[22419,22420]},{"pos":[22474,22479],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[22539,22540]},{"pos":[22594,22599],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[22658,22659],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22799,22807],"content":"HashCore","needQuote":true,"nodes":[{"content":"HashCore","pos":[0,8]}]},{"pos":[22884,22885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22933,22937],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[22995,22997],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[23026,23027]},{"pos":[23081,23086],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[23146,23147]},{"pos":[23201,23206],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23265,23266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23657,23668],"content":"HashFinal()","needQuote":true,"nodes":[{"content":"HashFinal()","pos":[0,11]}]},{"pos":[23823,23832],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[23910,23911],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23938,23939],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24039,24048],"content":"HashFinal","needQuote":true,"nodes":[{"content":"HashFinal","pos":[0,9]}]},{"pos":[24126,24127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24154,24155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24422,24430],"content":"HashSize","needQuote":true,"nodes":[{"content":"HashSize","pos":[0,8]}]},{"pos":[24736,24740],"content":"Hash","needQuote":true,"nodes":[{"content":"Hash","pos":[0,4]}]},{"pos":[25044,25058],"content":"InputBlockSize","needQuote":true,"nodes":[{"content":"InputBlockSize","pos":[0,14]}]},{"pos":[25393,25408],"content":"OutputBlockSize","needQuote":true,"nodes":[{"content":"OutputBlockSize","pos":[0,15]}]},{"pos":[25757,25783],"content":"CanTransformMultipleBlocks","needQuote":true,"nodes":[{"content":"CanTransformMultipleBlocks","pos":[0,26]}]},{"pos":[26156,26173],"content":"CanReuseTransform","needQuote":true,"nodes":[{"content":"CanReuseTransform","pos":[0,17]}]},{"pos":[26452,26462],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26557,26565],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26634,26635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26662,26663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26733,26741],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26810,26811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26838,26839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27022,27036],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27155,27161],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27228,27229],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27279,27285],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27345,27346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27429,27435],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27502,27503],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27553,27559],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27619,27620],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27834,27856],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28004,28010],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28077,28078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28128,28134],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28195,28196]},{"pos":[28251,28257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28317,28318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28415,28421],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28488,28489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28539,28545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28606,28607]},{"pos":[28662,28668],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28728,28729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28974,29005],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29171,29186],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29262,29263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29313,29319],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29380,29381]},{"pos":[29436,29442],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29502,29503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29609,29624],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29700,29701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29751,29757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29818,29819]},{"pos":[29874,29880],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29940,29941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30171,30184],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30285,30296],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30368,30369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30396,30397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30470,30481],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30553,30554],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30581,30582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30757,30766],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[30859,30866],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30934,30935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30962,30963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31032,31039],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31107,31108],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31135,31136],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31311,31328],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31437,31452],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31528,31529],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31556,31557],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31634,31649],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31725,31726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31753,31754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31899,31905],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[32080,32086],"content":"SHA384","needQuote":true,"nodes":[{"content":"SHA384","pos":[0,6]}]},{"pos":[32288,32313],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.Cryptography.SHA384\n  commentId: T:System.Security.Cryptography.SHA384\n  id: SHA384\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.SHA384.#ctor\n  - System.Security.Cryptography.SHA384.Create\n  langs:\n  - csharp\n  - vb\n  name: SHA384\n  fullName: System.Security.Cryptography.SHA384\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA384\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 286\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Computes the <xref href=\\\"System.Security.Cryptography.SHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> hash for the input data.</p>\\n\"\n  syntax:\n    content: 'public abstract class SHA384 : HashAlgorithm, ICryptoTransform, IDisposable'\n    content.vb: >-\n      Public MustInherit Class SHA384\n          Inherits HashAlgorithm\n          Implements ICryptoTransform, IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.HashAlgorithm\n  implements:\n  - System.Security.Cryptography.ICryptoTransform\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  - System.Security.Cryptography.HashAlgorithm.HashValue\n  - System.Security.Cryptography.HashAlgorithm.State\n  - System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.Dispose\n  - System.Security.Cryptography.HashAlgorithm.Clear\n  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  - System.Security.Cryptography.HashAlgorithm.Initialize\n  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  - System.Security.Cryptography.HashAlgorithm.HashFinal\n  - System.Security.Cryptography.HashAlgorithm.HashSize\n  - System.Security.Cryptography.HashAlgorithm.Hash\n  - System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: SHA384\n- uid: System.Security.Cryptography.SHA384.#ctor\n  commentId: M:System.Security.Cryptography.SHA384.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.SHA384\n  langs:\n  - csharp\n  - vb\n  name: SHA384()\n  fullName: System.Security.Cryptography.SHA384.SHA384()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 288\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.Security.Cryptography.SHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected SHA384()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: SHA384.SHA384()\n- uid: System.Security.Cryptography.SHA384.Create\n  commentId: M:System.Security.Cryptography.SHA384.Create\n  id: Create\n  parent: System.Security.Cryptography.SHA384\n  langs:\n  - csharp\n  - vb\n  name: Create()\n  fullName: System.Security.Cryptography.SHA384.Create()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 289\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Creates an instance of the default implementation of <xref href=\\\"System.Security.Cryptography.SHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static SHA384 Create()\n    content.vb: Public Shared Function Create As SHA384\n    return:\n      type: System.Security.Cryptography.SHA384\n      description: \"\\n<p>A new instance of <xref href=\\\"System.Security.Cryptography.SHA384\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>The algorithm was used with Federal Information Processing Standards (FIPS) mode enabled, but is not FIPS compatible.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SHA384.Create()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.HashAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithm\n  fullName: System.Security.Cryptography.HashAlgorithm\n  commentId: T:System.Security.Cryptography.HashAlgorithm\n  nameWithType: HashAlgorithm\n- uid: System.Security.Cryptography.ICryptoTransform\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ICryptoTransform\n  fullName: System.Security.Cryptography.ICryptoTransform\n  commentId: T:System.Security.Cryptography.ICryptoTransform\n  nameWithType: ICryptoTransform\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashSizeValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue\n  nameWithType: HashAlgorithm.HashSizeValue\n- uid: System.Security.Cryptography.HashAlgorithm.HashValue\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashValue\n  fullName: System.Security.Cryptography.HashAlgorithm.HashValue\n  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue\n  nameWithType: HashAlgorithm.HashValue\n- uid: System.Security.Cryptography.HashAlgorithm.State\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: State\n  fullName: System.Security.Cryptography.HashAlgorithm.State\n  commentId: F:System.Security.Cryptography.HashAlgorithm.State\n  nameWithType: HashAlgorithm.State\n- uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HashAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.HashAlgorithm.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Create(System.String)\n  nameWithType: HashAlgorithm.Create(String)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Stream)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)\n  nameWithType: HashAlgorithm.ComputeHash(Stream)\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[])\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())\n  name.vb: ComputeHash(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])\n  nameWithType: HashAlgorithm.ComputeHash(Byte[])\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())\n- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: ComputeHash(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)\n  name.vb: ComputeHash(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n    name: ComputeHash\n    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)\n  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n    name: TransformBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)\n  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)\n  nameWithType.vb: HashAlgorithm.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: TransformFinalBlock(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)\n  name.vb: TransformFinalBlock(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n    name: TransformFinalBlock\n    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.TransformFinalBlock(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose\n  nameWithType: HashAlgorithm.Dispose()\n- uid: System.Security.Cryptography.HashAlgorithm.Clear\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.HashAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.HashAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear\n  nameWithType: HashAlgorithm.Clear()\n- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.HashAlgorithm.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)\n  nameWithType: HashAlgorithm.Dispose(Boolean)\n- uid: System.Security.Cryptography.HashAlgorithm.Initialize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: Initialize()\n  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.Initialize\n    name: Initialize\n    fullName: System.Security.Cryptography.HashAlgorithm.Initialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize\n  nameWithType: HashAlgorithm.Initialize()\n- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: HashCore(Byte[], Int32, Int32)\n  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)\n  fullname.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)\n  name.vb: HashCore(Byte(), Int32, Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n    name: HashCore\n    fullName: System.Security.Cryptography.HashAlgorithm.HashCore\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)\n  nameWithType: HashAlgorithm.HashCore(Byte[], Int32, Int32)\n  nameWithType.vb: HashAlgorithm.HashCore(Byte(), Int32, Int32)\n- uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashFinal()\n  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()\n  spec.csharp:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.HashAlgorithm.HashFinal\n    name: HashFinal\n    fullName: System.Security.Cryptography.HashAlgorithm.HashFinal\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal\n  nameWithType: HashAlgorithm.HashFinal()\n- uid: System.Security.Cryptography.HashAlgorithm.HashSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: false\n  name: HashSize\n  fullName: System.Security.Cryptography.HashAlgorithm.HashSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize\n  nameWithType: HashAlgorithm.HashSize\n- uid: System.Security.Cryptography.HashAlgorithm.Hash\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: Hash\n  fullName: System.Security.Cryptography.HashAlgorithm.Hash\n  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash\n  nameWithType: HashAlgorithm.Hash\n- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: InputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize\n  nameWithType: HashAlgorithm.InputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: OutputBlockSize\n  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize\n  nameWithType: HashAlgorithm.OutputBlockSize\n- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanTransformMultipleBlocks\n  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks\n  nameWithType: HashAlgorithm.CanTransformMultipleBlocks\n- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  parent: System.Security.Cryptography.HashAlgorithm\n  isExternal: true\n  name: CanReuseTransform\n  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform\n  nameWithType: HashAlgorithm.CanReuseTransform\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.SHA384\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SHA384\n  fullName: System.Security.Cryptography.SHA384\n  commentId: T:System.Security.Cryptography.SHA384\n  nameWithType: SHA384\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n"}