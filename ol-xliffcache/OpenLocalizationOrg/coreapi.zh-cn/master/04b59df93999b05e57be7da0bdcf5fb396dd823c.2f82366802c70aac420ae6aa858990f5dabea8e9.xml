{"nodes":[{"pos":[5366,5371],"content":"Regex","needQuote":true,"nodes":[{"content":"Regex","pos":[0,5]}]},{"pos":[6612,6632],"content":"InfiniteMatchTimeout","needQuote":true,"nodes":[{"content":"InfiniteMatchTimeout","pos":[0,20]}]},{"pos":[7889,7896],"content":"pattern","needQuote":true,"nodes":[{"content":"pattern","pos":[0,7]}]},{"pos":[9066,9073],"content":"factory","needQuote":true,"nodes":[{"content":"factory","pos":[0,7]}]},{"pos":[10306,10314],"content":"roptions","needQuote":true,"nodes":[{"content":"roptions","pos":[0,8]}]},{"pos":[11570,11590],"content":"internalMatchTimeout","needQuote":true,"nodes":[{"content":"internalMatchTimeout","pos":[0,20]}]},{"pos":[12683,12690],"content":"capsize","needQuote":true,"nodes":[{"content":"capsize","pos":[0,7]}]},{"pos":[13860,13868],"content":"capslist","needQuote":true,"nodes":[{"content":"capslist","pos":[0,8]}]},{"pos":[15040,15044],"content":"Caps","needQuote":true,"nodes":[{"content":"Caps","pos":[0,4]}]},{"pos":[16011,16019],"content":"CapNames","needQuote":true,"nodes":[{"content":"CapNames","pos":[0,8]}]},{"pos":[16999,17006],"content":"Regex()","needQuote":true,"nodes":[{"content":"Regex()","pos":[0,7]}]},{"pos":[18049,18062],"content":"Regex(String)","needQuote":true,"nodes":[{"content":"Regex(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[18919,18964],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[18965,18971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.","pos":[19082,19131],"source":"\\n<p>A regular expression parsing error occurred."},{"content":"&lt;/p&gt;\\n","pos":[19132,19138],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19243,19298],"source":"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n"},{"pos":[19775,19802],"content":"Regex(String, RegexOptions)","needQuote":true,"nodes":[{"content":"Regex(String, RegexOptions)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[20789,20834],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[20835,20841],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that modify the regular expression.","pos":[20937,21025],"source":"\\n<p>A bitwise combination of the enumeration values that modify the regular expression."},{"content":"&lt;/p&gt;\\n","pos":[21026,21032],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.","pos":[21143,21192],"source":"\\n<p>A regular expression parsing error occurred."},{"content":"&lt;/p&gt;\\n","pos":[21193,21199],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21304,21359],"source":"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;options&lt;/em&gt; contains an invalid flag.&lt;/p&gt;\\n","pos":[21476,21531],"source":"\\n<p>\\n<em>options</em> contains an invalid flag.</p>\\n"},{"pos":[22070,22107],"content":"Regex(String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Regex(String, RegexOptions, TimeSpan)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[23265,23316],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that modify the regular expression.&lt;/p&gt;\\n","pos":[23412,23506],"source":"\\n<p>A bitwise combination of the enumeration values that modify the regular expression.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[23891,23946],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24051,24106],"source":"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n"},{"pos":[24815,24824],"content":"CacheSize","needQuote":true,"nodes":[{"content":"CacheSize","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The maximum number of entries in the static cache.&lt;/p&gt;\\n","pos":[25619,25680],"source":"\\n<p>The maximum number of entries in the static cache.</p>\\n"},{"content":"\\n&lt;p&gt;The value in a set operation is less than zero.&lt;/p&gt;\\n","pos":[25811,25869],"source":"\\n<p>The value in a set operation is less than zero.</p>\\n"},{"pos":[26222,26234],"content":"MatchTimeout","needQuote":true,"nodes":[{"content":"MatchTimeout","pos":[0,12]}]},{"pos":[27682,27689],"content":"Options","needQuote":true,"nodes":[{"content":"Options","pos":[0,7]}]},{"pos":[29327,29338],"content":"RightToLeft","needQuote":true,"nodes":[{"content":"RightToLeft","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression searches from right to left; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30118,30242],"source":"\\n<p>\\n<strong>true</strong> if the regular expression searches from right to left; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30604,30626],"content":"InitializeReferences()","needQuote":true,"nodes":[{"content":"InitializeReferences()","pos":[0,22]}]},{"content":"\\n&lt;p&gt;References have already been initialized.","pos":[31622,31668],"source":"\\n<p>References have already been initialized."},{"content":"&lt;/p&gt;\\n","pos":[31669,31675],"source":" </p>\\n"},{"pos":[32084,32114],"content":"ValidateMatchTimeout(TimeSpan)","needQuote":true,"nodes":[{"content":"ValidateMatchTimeout(TimeSpan)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The time-out interval to check.&lt;/p&gt;\\n","pos":[32967,33009],"source":"\\n<p>The time-out interval to check.</p>\\n"},{"pos":[33400,33414],"content":"Escape(String)","needQuote":true,"nodes":[{"content":"Escape(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The input string that contains the text to convert.","pos":[34372,34428],"source":"\\n<p>The input string that contains the text to convert."},{"content":"&lt;/p&gt;\\n","pos":[34429,34435],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string of characters with metacharacters converted to their escaped form.&lt;/p&gt;\\n","pos":[34495,34581],"source":"\\n<p>A string of characters with metacharacters converted to their escaped form.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[34700,34751],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>.</p>\\n"},{"pos":[35256,35271],"content":"GetGroupNames()","needQuote":true,"nodes":[{"content":"GetGroupNames()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A string array of group names.&lt;/p&gt;\\n","pos":[36012,36053],"source":"\\n<p>A string array of group names.</p>\\n"},{"pos":[36515,36532],"content":"GetGroupNumbers()","needQuote":true,"nodes":[{"content":"GetGroupNumbers()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An integer array of group numbers.&lt;/p&gt;\\n","pos":[37296,37341],"source":"\\n<p>An integer array of group numbers.</p>\\n"},{"pos":[37859,37885],"content":"GroupNameFromNumber(Int32)","needQuote":true,"nodes":[{"content":"GroupNameFromNumber(Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The group number to convert to the corresponding group name.","pos":[38688,38753],"source":"\\n<p>The group number to convert to the corresponding group name."},{"content":"&lt;/p&gt;\\n","pos":[38754,38760],"source":" </p>\\n"},{"pos":[39733,39760],"content":"GroupNumberFromName(String)","needQuote":true,"nodes":[{"content":"GroupNumberFromName(String)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The group name to convert to the corresponding group number.","pos":[40577,40642],"source":"\\n<p>The group name to convert to the corresponding group number."},{"content":"&lt;/p&gt;\\n","pos":[40643,40649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The group number that corresponds to the specified group name, or -1 if &lt;em&gt;name&lt;/em&gt; is not a valid group name.&lt;/p&gt;\\n","pos":[40708,40831],"source":"\\n<p>The group number that corresponds to the specified group name, or -1 if <em>name</em> is not a valid group name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40950,41002],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[41626,41641],"content":"IsMatch(String)","needQuote":true,"nodes":[{"content":"IsMatch(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[42553,42591],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[42592,42598],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression finds a match; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42659,42769],"source":"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42888,42941],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[43104,43129],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[43130,43198],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[43588,43610],"content":"IsMatch(String, Int32)","needQuote":true,"nodes":[{"content":"IsMatch(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[44631,44669],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[44670,44676],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position at which to start the search.","pos":[44741,44798],"source":"\\n<p>The character position at which to start the search."},{"content":"&lt;/p&gt;\\n","pos":[44799,44805],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression finds a match; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44866,44976],"source":"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45095,45148],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45265,45358],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[45521,45546],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[45547,45615],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[46015,46038],"content":"IsMatch(String, String)","needQuote":true,"nodes":[{"content":"IsMatch(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[46900,46938],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[46939,46945],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[47011,47056],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[47057,47063],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression finds a match; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47124,47234],"source":"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[47345,47400],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47505,47572],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47573,47579],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[47742,47767],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[47768,47836],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[48391,48428],"content":"IsMatch(String, String, RegexOptions)","needQuote":true,"nodes":[{"content":"IsMatch(String, String, RegexOptions)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[49420,49458],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[49459,49465],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[49531,49576],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[49577,49583],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.","pos":[49679,49766],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching."},{"content":"&lt;/p&gt;\\n","pos":[49767,49773],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression finds a match; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49834,49944],"source":"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[50055,50110],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50215,50288],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[50724,50749],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[50750,50818],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[51435,51482],"content":"IsMatch(String, String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"IsMatch(String, String, RegexOptions, TimeSpan)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[52563,52607],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[52673,52724],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.&lt;/p&gt;\\n","pos":[52820,52913],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the regular expression finds a match; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53248,53358],"source":"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[53469,53524],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[53629,53702],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.&lt;/p&gt;\\n","pos":[54240,54271],"source":"\\n<p>A time-out occurred.</p>\\n"},{"pos":[54670,54683],"content":"Match(String)","needQuote":true,"nodes":[{"content":"Match(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[55591,55629],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[55630,55636],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[55719,55782],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55901,55954],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[56117,56142],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[56143,56211],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[56725,56745],"content":"Match(String, Int32)","needQuote":true,"nodes":[{"content":"Match(String, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[57622,57660],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[57661,57667],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based character position at which to start the search.","pos":[57732,57800],"source":"\\n<p>The zero-based character position at which to start the search."},{"content":"&lt;/p&gt;\\n","pos":[57801,57807],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[57890,57953],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58072,58125],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[58242,58335],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[58498,58523],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[58524,58592],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[59152,59179],"content":"Match(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Match(String, Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[60145,60183],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[60184,60190],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based character position in the input string that defines the leftmost position to be searched.","pos":[60257,60366],"source":"\\n<p>The zero-based character position in the input string that defines the leftmost position to be searched."},{"content":"&lt;/p&gt;\\n","pos":[60367,60373],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the substring to include in the search.","pos":[60437,60509],"source":"\\n<p>The number of characters in the substring to include in the search."},{"content":"&lt;/p&gt;\\n","pos":[60510,60516],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[60599,60662],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60781,60834],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;beginning&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;length&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;beginning&lt;/em&gt;\\n&lt;strong&gt;+&lt;/strong&gt;\\n&lt;em&gt;length&lt;/em&gt;\\n&lt;strong&gt;–1&lt;/strong&gt; identifies a position that is outside the range of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[60951,61316],"source":"\\n<p>\\n<em>beginning</em> is less than zero or greater than the length of <em>input</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero or greater than the length of <em>input</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>beginning</em>\\n<strong>+</strong>\\n<em>length</em>\\n<strong>–1</strong> identifies a position that is outside the range of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[61479,61504],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[61505,61573],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[62104,62125],"content":"Match(String, String)","needQuote":true,"nodes":[{"content":"Match(String, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[62981,63019],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[63020,63026],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[63092,63137],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[63138,63144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[63227,63290],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[63401,63456],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63561,63634],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[63797,63822],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[63823,63891],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[64570,64605],"content":"Match(String, String, RegexOptions)","needQuote":true,"nodes":[{"content":"Match(String, String, RegexOptions)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[65581,65619],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[65620,65626],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[65692,65737],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[65738,65744],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.","pos":[65840,65927],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching."},{"content":"&lt;/p&gt;\\n","pos":[65928,65934],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[66017,66080],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[66191,66246],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[66351,66424],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[66883,66908],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[66909,66977],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[67718,67763],"content":"Match(String, String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Match(String, String, RegexOptions, TimeSpan)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[68827,68871],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[68937,68988],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.&lt;/p&gt;\\n","pos":[69084,69177],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains information about the match.&lt;/p&gt;\\n","pos":[69534,69597],"source":"\\n<p>An object that contains information about the match.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[69708,69763],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[69868,69941],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[70503,70528],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[70529,70597],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[71000,71015],"content":"Matches(String)","needQuote":true,"nodes":[{"content":"Matches(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[71818,71862],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[72302,72355],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"pos":[72745,72767],"content":"Matches(String, Int32)","needQuote":true,"nodes":[{"content":"Matches(String, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[73677,73715],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[73716,73722],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the input string at which to start the search.","pos":[73787,73864],"source":"\\n<p>The character position in the input string at which to start the search."},{"content":"&lt;/p&gt;\\n","pos":[73865,73871],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[74311,74364],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[74481,74574],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"pos":[74974,74997],"content":"Matches(String, String)","needQuote":true,"nodes":[{"content":"Matches(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[75874,75912],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[75913,75919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[75985,76030],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[76031,76037],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[76469,76524],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[76629,76702],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"pos":[77257,77294],"content":"Matches(String, String, RegexOptions)","needQuote":true,"nodes":[{"content":"Matches(String, String, RegexOptions)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[78301,78339],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[78340,78346],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[78412,78457],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[78458,78464],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for matching.","pos":[78560,78647],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for matching."},{"content":"&lt;/p&gt;\\n","pos":[78648,78654],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[79086,79141],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79246,79319],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"pos":[80232,80279],"content":"Matches(String, String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Matches(String, String, RegexOptions, TimeSpan)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[81374,81418],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[81484,81535],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that specify options for matching.&lt;/p&gt;\\n","pos":[81631,81724],"source":"\\n<p>A bitwise combination of the enumeration values that specify options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[82430,82485],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82590,82663],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"pos":[83509,83532],"content":"Replace(String, String)","needQuote":true,"nodes":[{"content":"Replace(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[84422,84460],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[84461,84467],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.","pos":[84537,84565],"source":"\\n<p>The replacement string."},{"content":"&lt;/p&gt;\\n","pos":[84566,84572],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[84632,84763],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[84764,84888]},{"content":"&lt;/p&gt;\\n","pos":[84889,84895],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85014,85091],"source":"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[85254,85279],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[85280,85348],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[85788,85818],"content":"Replace(String, String, Int32)","needQuote":true,"nodes":[{"content":"Replace(String, String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[86777,86815],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[86816,86822],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.","pos":[86892,86920],"source":"\\n<p>The replacement string."},{"content":"&lt;/p&gt;\\n","pos":[86921,86927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of times the replacement can occur.","pos":[86990,87049],"source":"\\n<p>The maximum number of times the replacement can occur."},{"content":"&lt;/p&gt;\\n","pos":[87050,87056],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[87116,87247],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.&lt;/p&gt;\\n","pos":[87248,87378],"source":" If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[87497,87574],"source":"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[87737,87762],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[87763,87831],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[88317,88354],"content":"Replace(String, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Replace(String, String, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[89363,89401],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[89402,89408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.","pos":[89478,89506],"source":"\\n<p>The replacement string."},{"content":"&lt;/p&gt;\\n","pos":[89507,89513],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Maximum number of times the replacement can occur.","pos":[89576,89631],"source":"\\n<p>Maximum number of times the replacement can occur."},{"content":"&lt;/p&gt;\\n","pos":[89632,89638],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the input string where the search begins.","pos":[89703,89775],"source":"\\n<p>The character position in the input string where the search begins."},{"content":"&lt;/p&gt;\\n","pos":[89776,89782],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[89842,89973],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[89974,90098]},{"content":"&lt;/p&gt;\\n","pos":[90099,90105],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[90224,90301],"source":"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90418,90511],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[90674,90699],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[90700,90768],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[91225,91256],"content":"Replace(String, String, String)","needQuote":true,"nodes":[{"content":"Replace(String, String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[92212,92250],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[92251,92257],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[92323,92368],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[92369,92375],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.","pos":[92445,92473],"source":"\\n<p>The replacement string."},{"content":"&lt;/p&gt;\\n","pos":[92474,92480],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[92540,92671],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.&lt;/p&gt;\\n","pos":[92672,92788],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[92899,92954],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[93059,93155],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[93318,93343],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[93344,93412],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[94017,94062],"content":"Replace(String, String, String, RegexOptions)","needQuote":true,"nodes":[{"content":"Replace(String, String, String, RegexOptions)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[95159,95197],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[95198,95204],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[95270,95315],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[95316,95322],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.","pos":[95392,95420],"source":"\\n<p>The replacement string."},{"content":"&lt;/p&gt;\\n","pos":[95421,95427],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.","pos":[95523,95610],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching."},{"content":"&lt;/p&gt;\\n","pos":[95611,95617],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[95677,95808],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.&lt;/p&gt;\\n","pos":[95809,95925],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[96036,96091],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[96196,96292],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[96751,96776],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[96777,96845],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[97638,97693],"content":"Replace(String, String, String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Replace(String, String, String, RegexOptions, TimeSpan)","pos":[0,55]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[98925,98969],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[99035,99086],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;The replacement string.&lt;/p&gt;\\n","pos":[99156,99190],"source":"\\n<p>The replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.&lt;/p&gt;\\n","pos":[99286,99379],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[99713,99844],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.","pos":[99845,99955],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged."},{"content":"&lt;/p&gt;\\n","pos":[99956,99962],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[100073,100128],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;replacement&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100233,100329],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[100891,100916],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[100917,100985],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[101704,101743],"content":"Replace(String, String, MatchEvaluator)","needQuote":true,"nodes":[{"content":"Replace(String, String, MatchEvaluator)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[102849,102887],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[102888,102894],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[102960,103005],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[103006,103012],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.&lt;/p&gt;\\n","pos":[103112,103235],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[103295,103424],"source":"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.","pos":[103425,103535],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged."},{"content":"&lt;/p&gt;\\n","pos":[103536,103542],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[103653,103708],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[103813,103907],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[104070,104095],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[104096,104164],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[105003,105056],"content":"Replace(String, String, MatchEvaluator, RegexOptions)","needQuote":true,"nodes":[{"content":"Replace(String, String, MatchEvaluator, RegexOptions)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[106303,106341],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[106342,106348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[106414,106459],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[106460,106466],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.","pos":[106566,106683],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string."},{"content":"&lt;/p&gt;\\n","pos":[106684,106690],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.","pos":[106786,106873],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching."},{"content":"&lt;/p&gt;\\n","pos":[106874,106880],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[106940,107069],"source":"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.&lt;/p&gt;\\n","pos":[107070,107186],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[107297,107352],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107457,107551],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[108010,108035],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[108036,108104],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[109120,109183],"content":"Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;The string to search for a match.&lt;/p&gt;\\n","pos":[110569,110613],"source":"\\n<p>The string to search for a match.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[110679,110730],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.&lt;/p&gt;\\n","pos":[110830,110953],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of enumeration values that provide options for matching.&lt;/p&gt;\\n","pos":[111049,111138],"source":"\\n<p>A bitwise combination of enumeration values that provide options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that the replacement string takes the place of each matched string.","pos":[111472,111603],"source":"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string."},{"content":"If &lt;em&gt;pattern&lt;/em&gt; is not matched in the current instance, the method returns the current instance unchanged.","pos":[111604,111714],"source":" If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged."},{"content":"&lt;/p&gt;\\n","pos":[111715,111721],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[111832,111887],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt;, &lt;em&gt;pattern&lt;/em&gt;, or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[111992,112086],"source":"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[112648,112673],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[112674,112742],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[113427,113458],"content":"Replace(String, MatchEvaluator)","needQuote":true,"nodes":[{"content":"Replace(String, MatchEvaluator)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[114501,114539],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[114540,114546],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.&lt;/p&gt;\\n","pos":[114646,114769],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[114829,114958],"source":"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[114959,115083]},{"content":"&lt;/p&gt;\\n","pos":[115084,115090],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[115209,115284],"source":"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[115447,115472],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[115473,115541],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[116215,116253],"content":"Replace(String, MatchEvaluator, Int32)","needQuote":true,"nodes":[{"content":"Replace(String, MatchEvaluator, Int32)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[117363,117401],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[117402,117408],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.&lt;/p&gt;\\n","pos":[117508,117631],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of times the replacement will occur.","pos":[117694,117754],"source":"\\n<p>The maximum number of times the replacement will occur."},{"content":"&lt;/p&gt;\\n","pos":[117755,117761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[117821,117950],"source":"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[117951,118075]},{"content":"&lt;/p&gt;\\n","pos":[118076,118082],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[118201,118276],"source":"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[118439,118464],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[118465,118533],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[119253,119298],"content":"Replace(String, MatchEvaluator, Int32, Int32)","needQuote":true,"nodes":[{"content":"Replace(String, MatchEvaluator, Int32, Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string to search for a match.","pos":[120458,120496],"source":"\\n<p>The string to search for a match."},{"content":"&lt;/p&gt;\\n","pos":[120497,120503],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A custom method that examines each match and returns either the original matched string or a replacement string.&lt;/p&gt;\\n","pos":[120603,120726],"source":"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of times the replacement will occur.","pos":[120789,120849],"source":"\\n<p>The maximum number of times the replacement will occur."},{"content":"&lt;/p&gt;\\n","pos":[120850,120856],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the input string where the search begins.","pos":[120921,120993],"source":"\\n<p>The character position in the input string where the search begins."},{"content":"&lt;/p&gt;\\n","pos":[120994,121000],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A new string that is identical to the input string, except that a replacement string takes the place of each matched string.","pos":[121060,121189],"source":"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string."},{"content":"If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.","pos":[121190,121314]},{"content":"&lt;/p&gt;\\n","pos":[121315,121321],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;evaluator&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[121440,121515],"source":"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[121632,121725],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[121888,121913],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[121914,121982],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[122487,122500],"content":"Split(String)","needQuote":true,"nodes":[{"content":"Split(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The string to split.","pos":[123435,123460],"source":"\\n<p>The string to split."},{"content":"&lt;/p&gt;\\n","pos":[123461,123467],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of strings.&lt;/p&gt;\\n","pos":[123529,123560],"source":"\\n<p>An array of strings.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[123679,123732],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[123895,123920],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[123921,123989],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[124371,124391],"content":"Split(String, Int32)","needQuote":true,"nodes":[{"content":"Split(String, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The string to be split.","pos":[125398,125426],"source":"\\n<p>The string to be split."},{"content":"&lt;/p&gt;\\n","pos":[125427,125433],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of times the split can occur.","pos":[125496,125549],"source":"\\n<p>The maximum number of times the split can occur."},{"content":"&lt;/p&gt;\\n","pos":[125550,125556],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of strings.&lt;/p&gt;\\n","pos":[125618,125649],"source":"\\n<p>An array of strings.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[125768,125821],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[125984,126009],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[126010,126078],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[126506,126533],"content":"Split(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Split(String, Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The string to be split.","pos":[127695,127723],"source":"\\n<p>The string to be split."},{"content":"&lt;/p&gt;\\n","pos":[127724,127730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of times the split can occur.","pos":[127793,127846],"source":"\\n<p>The maximum number of times the split can occur."},{"content":"&lt;/p&gt;\\n","pos":[127847,127853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character position in the input string where the search will begin.","pos":[127918,127994],"source":"\\n<p>The character position in the input string where the search will begin."},{"content":"&lt;/p&gt;\\n","pos":[127995,128001],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of strings.&lt;/p&gt;\\n","pos":[128063,128094],"source":"\\n<p>An array of strings.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[128213,128266],"source":"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startat&lt;/em&gt; is less than zero or greater than the length of &lt;em&gt;input&lt;/em&gt;.&lt;/p&gt;\\n","pos":[128383,128476],"source":"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[128639,128664],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[128665,128733],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[129132,129153],"content":"Split(String, String)","needQuote":true,"nodes":[{"content":"Split(String, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string to split.","pos":[130026,130051],"source":"\\n<p>The string to split."},{"content":"&lt;/p&gt;\\n","pos":[130052,130058],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[130124,130169],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[130170,130176],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of strings.&lt;/p&gt;\\n","pos":[130238,130269],"source":"\\n<p>An array of strings.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[130380,130435],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[130540,130613],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[130776,130801],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[130802,130870],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[131417,131452],"content":"Split(String, String, RegexOptions)","needQuote":true,"nodes":[{"content":"Split(String, String, RegexOptions)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The string to split.","pos":[132476,132501],"source":"\\n<p>The string to split."},{"content":"&lt;/p&gt;\\n","pos":[132502,132508],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.","pos":[132574,132619],"source":"\\n<p>The regular expression pattern to match."},{"content":"&lt;/p&gt;\\n","pos":[132620,132626],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.","pos":[132722,132809],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching."},{"content":"&lt;/p&gt;\\n","pos":[132810,132816],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of strings.&lt;/p&gt;\\n","pos":[132878,132909],"source":"\\n<p>An array of strings.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[133020,133075],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[133180,133253],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[133712,133737],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[133738,133806],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[134415,134460],"content":"Split(String, String, RegexOptions, TimeSpan)","needQuote":true,"nodes":[{"content":"Split(String, String, RegexOptions, TimeSpan)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The string to split.&lt;/p&gt;\\n","pos":[135620,135651],"source":"\\n<p>The string to split.</p>\\n"},{"content":"\\n&lt;p&gt;The regular expression pattern to match.&lt;/p&gt;\\n","pos":[135717,135768],"source":"\\n<p>The regular expression pattern to match.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that provide options for matching.&lt;/p&gt;\\n","pos":[135864,135957],"source":"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n"},{"content":"\\n&lt;p&gt;A string array.&lt;/p&gt;\\n","pos":[136293,136319],"source":"\\n<p>A string array.</p>\\n"},{"content":"\\n&lt;p&gt;A regular expression parsing error occurred.&lt;/p&gt;\\n","pos":[136430,136485],"source":"\\n<p>A regular expression parsing error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;input&lt;/em&gt; or &lt;em&gt;pattern&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[136590,136663],"source":"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A time-out occurred.","pos":[137225,137250],"source":"\\n<p>A time-out occurred."},{"content":"For more information about time-outs, see the Remarks section.&lt;/p&gt;\\n","pos":[137251,137319],"source":" For more information about time-outs, see the Remarks section.</p>\\n"},{"pos":[137680,137690],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;pattern&lt;/em&gt; parameter that was passed into the &lt;strong&gt;Regex&lt;/strong&gt; constructor.&lt;/p&gt;\\n","pos":[138455,138557],"source":"\\n<p>The <em>pattern</em> parameter that was passed into the <strong>Regex</strong> constructor.</p>\\n"},{"pos":[138970,138986],"content":"Unescape(String)","needQuote":true,"nodes":[{"content":"Unescape(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The input string containing the text to convert.","pos":[139755,139808],"source":"\\n<p>The input string containing the text to convert."},{"content":"&lt;/p&gt;\\n","pos":[139809,139815],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string of characters with any escaped characters converted to their unescaped form.&lt;/p&gt;\\n","pos":[139875,139971],"source":"\\n<p>A string of characters with any escaped characters converted to their unescaped form.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; includes an unrecognized escape sequence.&lt;/p&gt;\\n","pos":[140082,140149],"source":"\\n<p>\\n<em>str</em> includes an unrecognized escape sequence.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[140254,140305],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>.</p>\\n"},{"pos":[140660,140690],"content":"System.Text.RegularExpressions","needQuote":true,"nodes":[{"content":"System.Text.RegularExpressions","pos":[0,30]}]},{"pos":[140893,140899],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141072,141086],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[141205,141211],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[141278,141279],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141329,141335],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141395,141396],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141479,141485],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[141552,141553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[141603,141609],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[141669,141670],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[141884,141906],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[142054,142060],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[142127,142128],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142178,142184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[142245,142246]},{"pos":[142301,142307],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[142367,142368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[142465,142471],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[142538,142539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[142589,142595],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[142656,142657]},{"pos":[142712,142718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[142778,142779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143024,143055],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[143221,143236],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[143312,143313],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143363,143369],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[143430,143431]},{"pos":[143486,143492],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[143552,143553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[143659,143674],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[143750,143751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[143801,143807],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[143868,143869]},{"pos":[143924,143930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[143990,143991],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144221,144234],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[144335,144346],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[144418,144419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144446,144447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144520,144531],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[144603,144604],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[144631,144632],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[144807,144816],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[144909,144916],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[144984,144985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145012,145013],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145082,145089],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[145157,145158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145185,145186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145361,145378],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[145487,145502],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[145578,145579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145606,145607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145684,145699],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[145775,145776],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[145803,145804],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[145949,145955],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[146088,146096],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[146247,146253],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[146458,146476],"content":"RegexRunnerFactory","needQuote":true,"nodes":[{"content":"RegexRunnerFactory","pos":[0,18]}]},{"pos":[146759,146771],"content":"RegexOptions","needQuote":true,"nodes":[{"content":"RegexOptions","pos":[0,12]}]},{"pos":[146981,146986],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[147093,147101],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[147229,147235],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[147296,147298]},{"pos":[147363,147369],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[147429,147431],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[147597,147608],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[147780,147798],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[147966,147973],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[148085,148092],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[148216,148221],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[148281,148283]},{"pos":[148347,148352],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[148411,148413],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[148595,148600],"content":"Match","needQuote":true,"nodes":[{"content":"Match","pos":[0,5]}]},{"pos":[148847,148862],"content":"MatchCollection","needQuote":true,"nodes":[{"content":"MatchCollection","pos":[0,15]}]},{"pos":[149138,149152],"content":"MatchEvaluator","needQuote":true,"nodes":[{"content":"MatchEvaluator","pos":[0,14]}]},{"pos":[149384,149394],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[149489,149497],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[149566,149567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149594,149595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149665,149673],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[149742,149743],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149770,149771],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149937,149954],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[150130,150151],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[150345,150372],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[150595,150616],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[150833,150859],"content":"RegexMatchTimeoutException","needQuote":true,"nodes":[{"content":"RegexMatchTimeoutException","pos":[0,26]}]}],"content":"items:\n- uid: System.Text.RegularExpressions.Regex\n  commentId: T:System.Text.RegularExpressions.Regex\n  id: Regex\n  parent: System.Text.RegularExpressions\n  children:\n  - System.Text.RegularExpressions.Regex.#ctor\n  - System.Text.RegularExpressions.Regex.#ctor(System.String)\n  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.CacheSize\n  - System.Text.RegularExpressions.Regex.CapNames\n  - System.Text.RegularExpressions.Regex.Caps\n  - System.Text.RegularExpressions.Regex.capsize\n  - System.Text.RegularExpressions.Regex.capslist\n  - System.Text.RegularExpressions.Regex.Escape(System.String)\n  - System.Text.RegularExpressions.Regex.factory\n  - System.Text.RegularExpressions.Regex.GetGroupNames\n  - System.Text.RegularExpressions.Regex.GetGroupNumbers\n  - System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  - System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  - System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  - System.Text.RegularExpressions.Regex.InitializeReferences\n  - System.Text.RegularExpressions.Regex.internalMatchTimeout\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Match(System.String)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Matches(System.String)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.MatchTimeout\n  - System.Text.RegularExpressions.Regex.Options\n  - System.Text.RegularExpressions.Regex.pattern\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  - System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.RightToLeft\n  - System.Text.RegularExpressions.Regex.roptions\n  - System.Text.RegularExpressions.Regex.Split(System.String)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  - System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  - System.Text.RegularExpressions.Regex.ToString\n  - System.Text.RegularExpressions.Regex.Unescape(System.String)\n  - System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  langs:\n  - csharp\n  - vb\n  name: Regex\n  fullName: System.Text.RegularExpressions.Regex\n  type: Class\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Regex\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 70\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Represents an immutable regular expression.</p>\\n\"\n  syntax:\n    content: public class Regex\n    content.vb: Public Class Regex\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Regex\n- uid: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  commentId: F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  id: InfiniteMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: InfiniteMatchTimeout\n  fullName: System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InfiniteMatchTimeout\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 72\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Specifies that a pattern-matching operation should not time out.</p>\\n\"\n  syntax:\n    content: public static readonly TimeSpan InfiniteMatchTimeout\n    content.vb: Public Shared ReadOnly InfiniteMatchTimeout As TimeSpan\n    return:\n      type: System.TimeSpan\n  seealso:\n  - type: System.Text.RegularExpressions.Regex.MatchTimeout\n    commentId: P:System.Text.RegularExpressions.Regex.MatchTimeout\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Regex.InfiniteMatchTimeout\n- uid: System.Text.RegularExpressions.Regex.pattern\n  commentId: F:System.Text.RegularExpressions.Regex.pattern\n  id: pattern\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: pattern\n  fullName: System.Text.RegularExpressions.Regex.pattern\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: pattern\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 73\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected string pattern\n    content.vb: Protected pattern As String\n    return:\n      type: System.String\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.pattern\n- uid: System.Text.RegularExpressions.Regex.factory\n  commentId: F:System.Text.RegularExpressions.Regex.factory\n  id: factory\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: factory\n  fullName: System.Text.RegularExpressions.Regex.factory\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: factory\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 74\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected RegexRunnerFactory factory\n    content.vb: Protected factory As RegexRunnerFactory\n    return:\n      type: System.Text.RegularExpressions.RegexRunnerFactory\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.factory\n- uid: System.Text.RegularExpressions.Regex.roptions\n  commentId: F:System.Text.RegularExpressions.Regex.roptions\n  id: roptions\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: roptions\n  fullName: System.Text.RegularExpressions.Regex.roptions\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: roptions\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 75\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected RegexOptions roptions\n    content.vb: Protected roptions As RegexOptions\n    return:\n      type: System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.roptions\n- uid: System.Text.RegularExpressions.Regex.internalMatchTimeout\n  commentId: F:System.Text.RegularExpressions.Regex.internalMatchTimeout\n  id: internalMatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: internalMatchTimeout\n  fullName: System.Text.RegularExpressions.Regex.internalMatchTimeout\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: internalMatchTimeout\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 76\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>The maximum amount of time that can elapse in a pattern-matching operation before the operation times out.</p>\\n\"\n  syntax:\n    content: protected TimeSpan internalMatchTimeout\n    content.vb: Protected internalMatchTimeout As TimeSpan\n    return:\n      type: System.TimeSpan\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.internalMatchTimeout\n- uid: System.Text.RegularExpressions.Regex.capsize\n  commentId: F:System.Text.RegularExpressions.Regex.capsize\n  id: capsize\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: capsize\n  fullName: System.Text.RegularExpressions.Regex.capsize\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: capsize\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 77\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected int capsize\n    content.vb: Protected capsize As Integer\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.capsize\n- uid: System.Text.RegularExpressions.Regex.capslist\n  commentId: F:System.Text.RegularExpressions.Regex.capslist\n  id: capslist\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: capslist\n  fullName: System.Text.RegularExpressions.Regex.capslist\n  type: Field\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: capslist\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 78\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected string[] capslist\n    content.vb: Protected capslist As String()\n    return:\n      type: System.String[]\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.capslist\n- uid: System.Text.RegularExpressions.Regex.Caps\n  commentId: P:System.Text.RegularExpressions.Regex.Caps\n  id: Caps\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Caps\n  fullName: System.Text.RegularExpressions.Regex.Caps\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Caps\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 79\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: protected IDictionary Caps { get; set; }\n    content.vb: Protected Property Caps As IDictionary\n    parameters: []\n    return:\n      type: System.Collections.IDictionary\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.Caps\n- uid: System.Text.RegularExpressions.Regex.CapNames\n  commentId: P:System.Text.RegularExpressions.Regex.CapNames\n  id: CapNames\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: CapNames\n  fullName: System.Text.RegularExpressions.Regex.CapNames\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CapNames\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 80\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  syntax:\n    content: protected IDictionary CapNames { get; set; }\n    content.vb: Protected Property CapNames As IDictionary\n    parameters: []\n    return:\n      type: System.Collections.IDictionary\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.CapNames\n- uid: System.Text.RegularExpressions.Regex.#ctor\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor\n  id: '#ctor'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Regex()\n  fullName: System.Text.RegularExpressions.Regex.Regex()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 81\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Regex()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.Regex()\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Regex(String)\n  fullName: System.Text.RegularExpressions.Regex.Regex(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 82\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified regular expression.</p>\\n\"\n  syntax:\n    content: public Regex(string pattern)\n    content.vb: Public Sub New(pattern As String)\n    parameters:\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Regex(String)\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions)\n  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Regex(String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 83\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified regular expression, with options that modify the pattern.</p>\\n\"\n  syntax:\n    content: public Regex(string pattern, RegexOptions options)\n    content.vb: Public Sub New(pattern As String, options As RegexOptions)\n    parameters:\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that modify the regular expression. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> contains an invalid flag.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Regex(String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: '#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)'\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Regex(String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Regex(System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 84\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the specified regular expression, with options that modify the pattern and a value that specifies how long a pattern matching method should attempt a match before it times out.</p>\\n\"\n  syntax:\n    content: public Regex(string pattern, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Sub New(pattern As String, options As RegexOptions, matchTimeout As TimeSpan)\n    parameters:\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that modify the regular expression.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Regex(String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.CacheSize\n  commentId: P:System.Text.RegularExpressions.Regex.CacheSize\n  id: CacheSize\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: CacheSize\n  fullName: System.Text.RegularExpressions.Regex.CacheSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CacheSize\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 85\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets or sets the maximum number of entries in the current static cache of compiled regular expressions.</p>\\n\"\n  syntax:\n    content: public static int CacheSize { get; set; }\n    content.vb: Public Shared Property CacheSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of entries in the static cache.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value in a set operation is less than zero.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.CacheSize\n- uid: System.Text.RegularExpressions.Regex.MatchTimeout\n  commentId: P:System.Text.RegularExpressions.Regex.MatchTimeout\n  id: MatchTimeout\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: MatchTimeout\n  fullName: System.Text.RegularExpressions.Regex.MatchTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MatchTimeout\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 86\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the time-out interval of the current instance.</p>\\n\"\n  syntax:\n    content: public TimeSpan MatchTimeout { get; }\n    content.vb: Public ReadOnly Property MatchTimeout As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>The maximum time interval that can elapse in a pattern-matching operation before a <xref href=\\\"System.Text.RegularExpressions.RegexMatchTimeoutException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is thrown, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if time-outs are disabled.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Regex.MatchTimeout\n- uid: System.Text.RegularExpressions.Regex.Options\n  commentId: P:System.Text.RegularExpressions.Regex.Options\n  id: Options\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Options\n  fullName: System.Text.RegularExpressions.Regex.Options\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Options\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 87\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the options that were passed into the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor.</p>\\n\"\n  syntax:\n    content: public RegexOptions Options { get; }\n    content.vb: Public ReadOnly Property Options As RegexOptions\n    parameters: []\n    return:\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>One or more members of the <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration that represent options that were passed to the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor </p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.RegexOptions\n    commentId: T:System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Regex.Options\n- uid: System.Text.RegularExpressions.Regex.RightToLeft\n  commentId: P:System.Text.RegularExpressions.Regex.RightToLeft\n  id: RightToLeft\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: RightToLeft\n  fullName: System.Text.RegularExpressions.Regex.RightToLeft\n  type: Property\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RightToLeft\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 88\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets a value that indicates whether the regular expression searches from right to left.</p>\\n\"\n  syntax:\n    content: public bool RightToLeft { get; }\n    content.vb: Public ReadOnly Property RightToLeft As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression searches from right to left; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Regex.RightToLeft\n- uid: System.Text.RegularExpressions.Regex.InitializeReferences\n  commentId: M:System.Text.RegularExpressions.Regex.InitializeReferences\n  id: InitializeReferences\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: InitializeReferences()\n  fullName: System.Text.RegularExpressions.Regex.InitializeReferences()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InitializeReferences\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 89\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Used by a <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object generated by the <xref href=\\\"System.Text.RegularExpressions.Regex.CompileToAssembly\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  syntax:\n    content: protected void InitializeReferences()\n    content.vb: Protected Sub InitializeReferences\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>References have already been initialized. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Regex.InitializeReferences()\n- uid: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  id: ValidateMatchTimeout(System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: ValidateMatchTimeout(TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.ValidateMatchTimeout(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ValidateMatchTimeout\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 90\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Checks whether a time-out interval is within an acceptable range.</p>\\n\"\n  syntax:\n    content: protected static void ValidateMatchTimeout(TimeSpan matchTimeout)\n    content.vb: Protected Shared Sub ValidateMatchTimeout(matchTimeout As TimeSpan)\n    parameters:\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>The time-out interval to check.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  nameWithType: Regex.ValidateMatchTimeout(TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Escape(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Escape(System.String)\n  id: Escape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Escape(String)\n  fullName: System.Text.RegularExpressions.Regex.Escape(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Escape\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 91\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Escapes a minimal set of characters (\\\\, *, +, ?, |, {, [, (,), ^, $,., #, and white space) by replacing them with their escape codes. This instructs the regular expression engine to interpret these characters literally rather than as metacharacters.</p>\\n\"\n  syntax:\n    content: public static string Escape(string str)\n    content.vb: Public Shared Function Escape(str As String) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The input string that contains the text to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string of characters with metacharacters converted to their escaped form.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Regex.Unescape(System.String)\n    commentId: M:System.Text.RegularExpressions.Regex.Unescape(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Escape(String)\n- uid: System.Text.RegularExpressions.Regex.GetGroupNames\n  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNames\n  id: GetGroupNames\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: GetGroupNames()\n  fullName: System.Text.RegularExpressions.Regex.GetGroupNames()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGroupNames\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 92\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns an array of capturing group names for the regular expression.</p>\\n\"\n  syntax:\n    content: public string[] GetGroupNames()\n    content.vb: Public Function GetGroupNames As String()\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array of group names.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.GroupCollection\n    commentId: T:System.Text.RegularExpressions.GroupCollection\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.GetGroupNames()\n- uid: System.Text.RegularExpressions.Regex.GetGroupNumbers\n  commentId: M:System.Text.RegularExpressions.Regex.GetGroupNumbers\n  id: GetGroupNumbers\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: GetGroupNumbers()\n  fullName: System.Text.RegularExpressions.Regex.GetGroupNumbers()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGroupNumbers\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 93\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns an array of capturing group numbers that correspond to group names in an array.</p>\\n\"\n  syntax:\n    content: public int[] GetGroupNumbers()\n    content.vb: Public Function GetGroupNumbers As Integer()\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An integer array of group numbers.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.GroupCollection\n    commentId: T:System.Text.RegularExpressions.GroupCollection\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.GetGroupNumbers()\n- uid: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  id: GroupNameFromNumber(System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: GroupNameFromNumber(Int32)\n  fullName: System.Text.RegularExpressions.Regex.GroupNameFromNumber(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupNameFromNumber\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 94\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Gets the group name that corresponds to the specified group number.</p>\\n\"\n  syntax:\n    content: public string GroupNameFromNumber(int i)\n    content.vb: Public Function GroupNameFromNumber(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The group number to convert to the corresponding group name. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the group name associated with the specified group number. If there is no group name that corresponds to <em>i</em>, the method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.GroupCollection\n    commentId: T:System.Text.RegularExpressions.GroupCollection\n  - type: System.Text.RegularExpressions.Regex.GetGroupNumbers\n    commentId: M:System.Text.RegularExpressions.Regex.GetGroupNumbers\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.GroupNameFromNumber(Int32)\n- uid: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  id: GroupNumberFromName(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: GroupNumberFromName(String)\n  fullName: System.Text.RegularExpressions.Regex.GroupNumberFromName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GroupNumberFromName\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 95\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns the group number that corresponds to the specified group name.</p>\\n\"\n  syntax:\n    content: public int GroupNumberFromName(string name)\n    content.vb: Public Function GroupNumberFromName(name As String) As Integer\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The group name to convert to the corresponding group number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The group number that corresponds to the specified group name, or -1 if <em>name</em> is not a valid group name.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.GroupCollection\n    commentId: T:System.Text.RegularExpressions.GroupCollection\n  - type: System.Text.RegularExpressions.Regex.GetGroupNames\n    commentId: M:System.Text.RegularExpressions.Regex.GetGroupNames\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.GroupNumberFromName(String)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  id: IsMatch(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: IsMatch(String)\n  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 96\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Indicates whether the regular expression specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor finds a match in a specified input string.</p>\\n\"\n  syntax:\n    content: public bool IsMatch(string input)\n    content.vb: Public Function IsMatch(input As String) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.IsMatch(String)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.Int32)\n  id: IsMatch(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: IsMatch(String, Int32)\n  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 97\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Indicates whether the regular expression specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor finds a match in the specified input string, beginning at the specified starting position in the string.</p>\\n\"\n  syntax:\n    content: public bool IsMatch(string input, int startat)\n    content.vb: Public Function IsMatch(input As String, startat As Integer) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The character position at which to start the search. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.IsMatch(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String)\n  id: IsMatch(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: IsMatch(String, String)\n  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 98\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Indicates whether the specified regular expression finds a match in the specified input string.</p>\\n\"\n  syntax:\n    content: public static bool IsMatch(string input, string pattern)\n    content.vb: Public Shared Function IsMatch(input As String, pattern As String) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.IsMatch(String, String)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: IsMatch(String, String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 99\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options.</p>\\n\"\n  syntax:\n    content: public static bool IsMatch(string input, string pattern, RegexOptions options)\n    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  value.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.IsMatch(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: IsMatch(String, String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.IsMatch(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsMatch\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 100\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Indicates whether the specified regular expression finds a match in the specified input string, using the specified matching options and time-out interval.</p>\\n\"\n  syntax:\n    content: public static bool IsMatch(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function IsMatch(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Boolean\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the regular expression finds a match; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.IsMatch(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String)\n  id: Match(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 101\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for the first occurrence of the regular expression specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor.</p>\\n\"\n  syntax:\n    content: public Match Match(string input)\n    content.vb: Public Function Match(input As String) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Match.NextMatch\n    commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Match(String)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32)\n  id: Match(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 102\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position in the string.</p>\\n\"\n  syntax:\n    content: public Match Match(string input, int startat)\n    content.vb: Public Function Match(input As String, startat As Integer) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The zero-based character position at which to start the search. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Match.NextMatch\n    commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Match(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.Int32,System.Int32)\n  id: Match(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String, Int32, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 103\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the input string for the first occurrence of a regular expression, beginning at the specified starting position and searching only the specified number of characters.</p>\\n\"\n  syntax:\n    content: public Match Match(string input, int beginning, int length)\n    content.vb: Public Function Match(input As String, beginning As Integer, length As Integer) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: beginning\n      type: System.Int32\n      description: \"\\n<p>The zero-based character position in the input string that defines the leftmost position to be searched. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the substring to include in the search. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>beginning</em> is less than zero or greater than the length of <em>input</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>length</em> is less than zero or greater than the length of <em>input</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>beginning</em>\\n<strong>+</strong>\\n<em>length</em>\\n<strong>–1</strong> identifies a position that is outside the range of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Match.NextMatch\n    commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Match(String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String)\n  id: Match(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String, String)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 104\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for the first occurrence of the specified regular expression.</p>\\n\"\n  syntax:\n    content: public static Match Match(string input, string pattern)\n    content.vb: Public Shared Function Match(input As String, pattern As String) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Match.NextMatch\n    commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Match(String, String)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String, String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 105\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options.</p>\\n\"\n  syntax:\n    content: public static Match Match(string input, string pattern, RegexOptions options)\n    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Match.NextMatch\n    commentId: M:System.Text.RegularExpressions.Match.NextMatch\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Match(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Match(String, String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Match(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Match\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 106\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the input string for the first occurrence of the specified regular expression, using the specified matching options and time-out interval.</p>\\n\"\n  syntax:\n    content: public static Match Match(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function Match(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As Match\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.Match\n      description: \"\\n<p>An object that contains information about the match.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Match(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String)\n  id: Matches(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Matches(String)\n  fullName: System.Text.RegularExpressions.Regex.Matches(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 107\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for all occurrences of a regular expression.</p>\\n\"\n  syntax:\n    content: public MatchCollection Matches(string input)\n    content.vb: Public Function Matches(input As String) As MatchCollection\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: \"\\n<p>A collection of the <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Matches(String)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.Int32)\n  id: Matches(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Matches(String, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 108\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for all occurrences of a regular expression, beginning at the specified starting position in the string.</p>\\n\"\n  syntax:\n    content: public MatchCollection Matches(string input, int startat)\n    content.vb: Public Function Matches(input As String, startat As Integer) As MatchCollection\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The character position in the input string at which to start the search. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: \"\\n<p>A collection of the <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Matches(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String)\n  id: Matches(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Matches(String, String)\n  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 109\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for all occurrences of a specified regular expression.</p>\\n\"\n  syntax:\n    content: public static MatchCollection Matches(string input, string pattern)\n    content.vb: Public Shared Function Matches(input As String, pattern As String) As MatchCollection\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: \"\\n<p>A collection of the <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Matches(String, String)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Matches(String, String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 110\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options.</p>\\n\"\n  syntax:\n    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options)\n    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions) As MatchCollection\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for matching. </p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: \"\\n<p>A collection of the <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Matches(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Matches(String, String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Matches(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Matches\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 111\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Searches the specified input string for all occurrences of a specified regular expression, using the specified matching options and time-out interval.</p>\\n\"\n  syntax:\n    content: public static MatchCollection Matches(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function Matches(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As MatchCollection\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that specify options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.Text.RegularExpressions.MatchCollection\n      description: \"\\n<p>A collection of the <xref href=\\\"System.Text.RegularExpressions.Match\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects found by the search. If no matches are found, the method returns an empty collection object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Matches(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 112\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a regular expression pattern with a specified replacement string. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, string replacement)\n    content.vb: Public Function Replace(input As String, replacement As String) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, String)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32)\n  id: Replace(System.String,System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 113\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, string replacement, int count)\n    content.vb: Public Function Replace(input As String, replacement As String, count As Integer) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of times the replacement can occur. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Int32,System.Int32)\n  id: Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, Int32, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 114\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a specified replacement string. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, string replacement, int count, int startat)\n    content.vb: Public Function Replace(input As String, replacement As String, count As Integer, startat As Integer) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>Maximum number of times the replacement can occur. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The character position in the input string where the search begins. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String)\n  id: Replace(System.String,System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, String)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 115\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. </p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, string replacement)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, String)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 116\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Specified options modify the matching operation. </p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.RegexOptions\n    commentId: T:System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Replace(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 117\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a specified replacement string. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, string replacement, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, replacement As String, options As RegexOptions, matchTimeout As TimeSpan) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: replacement\n      type: System.String\n      description: \"\\n<p>The replacement string.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>replacement</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.RegexOptions\n    commentId: T:System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, MatchEvaluator)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 118\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate.</p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.MatchEvaluator\n    commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, MatchEvaluator)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, MatchEvaluator, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 119\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate. Specified options modify the matching operation.</p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.MatchEvaluator\n    commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  - type: System.Text.RegularExpressions.RegexOptions\n    commentId: T:System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Replace(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 120\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all substrings that match a specified regular expression with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\\n\"\n  syntax:\n    content: public static string Replace(string input, string pattern, MatchEvaluator evaluator, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function Replace(input As String, pattern As String, evaluator As MatchEvaluator, options As RegexOptions, matchTimeout As TimeSpan) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of enumeration values that provide options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that the replacement string takes the place of each matched string. If <em>pattern</em> is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em>, <em>pattern</em>, or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.RegexOptions\n    commentId: T:System.Text.RegularExpressions.RegexOptions\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Replace(String, String, MatchEvaluator, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, MatchEvaluator)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 121\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces all strings that match a specified regular expression with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, MatchEvaluator evaluator)\n    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.MatchEvaluator\n    commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, MatchEvaluator)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, MatchEvaluator, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 122\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input string, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, MatchEvaluator evaluator, int count)\n    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of times the replacement will occur. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.MatchEvaluator\n    commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32)\n- uid: System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  id: Replace(System.String,System.Text.RegularExpressions.MatchEvaluator,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, MatchEvaluator, Int32, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Replace(System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replace\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 123\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>In a specified input substring, replaces a specified maximum number of strings that match a regular expression pattern with a string returned by a <xref href=\\\"System.Text.RegularExpressions.MatchEvaluator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> delegate. </p>\\n\"\n  syntax:\n    content: public string Replace(string input, MatchEvaluator evaluator, int count, int startat)\n    content.vb: Public Function Replace(input As String, evaluator As MatchEvaluator, count As Integer, startat As Integer) As String\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to search for a match. </p>\\n\"\n    - id: evaluator\n      type: System.Text.RegularExpressions.MatchEvaluator\n      description: \"\\n<p>A custom method that examines each match and returns either the original matched string or a replacement string.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of times the replacement will occur. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The character position in the input string where the search begins. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A new string that is identical to the input string, except that a replacement string takes the place of each matched string. If the regular expression pattern is not matched in the current instance, the method returns the current instance unchanged. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>evaluator</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.MatchEvaluator\n    commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Replace(String, MatchEvaluator, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String)\n  id: Split(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 124\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor.</p>\\n\"\n  syntax:\n    content: public string[] Split(string input)\n    content.vb: Public Function Split(input As String) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to split. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Split(String)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32)\n  id: Split(System.String,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 125\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor.</p>\\n\"\n  syntax:\n    content: public string[] Split(string input, int count)\n    content.vb: Public Function Split(input As String, count As Integer) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to be split. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of times the split can occur. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Split(String, Int32)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.Int32,System.Int32)\n  id: Split(System.String,System.Int32,System.Int32)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String, Int32, Int32)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 126\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string a specified maximum number of times into an array of substrings, at the positions defined by a regular expression specified in the <xref href=\\\"System.Text.RegularExpressions.Regex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor. The search for the regular expression pattern starts at a specified character position in the input string.</p>\\n\"\n  syntax:\n    content: public string[] Split(string input, int count, int startat)\n    content.vb: Public Function Split(input As String, count As Integer, startat As Integer) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to be split. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The maximum number of times the split can occur. </p>\\n\"\n    - id: startat\n      type: System.Int32\n      description: \"\\n<p>The character position in the input string where the search will begin. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startat</em> is less than zero or greater than the length of <em>input</em>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Regex.Split(String, Int32, Int32)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String)\n  id: Split(System.String,System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String, String)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 127\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string into an array of substrings at the positions defined by a regular expression pattern.</p>\\n\"\n  syntax:\n    content: public static string[] Split(string input, string pattern)\n    content.vb: Public Shared Function Split(input As String, pattern As String) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to split. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Split(String, String)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String, String, RegexOptions)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 128\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Specified options modify the matching operation.</p>\\n\"\n  syntax:\n    content: public static string[] Split(string input, string pattern, RegexOptions options)\n    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to split. </p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match. </p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching. </p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Split(String, String, RegexOptions)\n- uid: System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  commentId: M:System.Text.RegularExpressions.Regex.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  id: Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.TimeSpan)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Split(String, String, RegexOptions, TimeSpan)\n  fullName: System.Text.RegularExpressions.Regex.Split(System.String, System.String, System.Text.RegularExpressions.RegexOptions, System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Split\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 129\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Splits an input string into an array of substrings at the positions defined by a specified regular expression pattern. Additional parameters specify options that modify the matching operation and a time-out interval if no match is found.</p>\\n\"\n  syntax:\n    content: public static string[] Split(string input, string pattern, RegexOptions options, TimeSpan matchTimeout)\n    content.vb: Public Shared Function Split(input As String, pattern As String, options As RegexOptions, matchTimeout As TimeSpan) As String()\n    parameters:\n    - id: input\n      type: System.String\n      description: \"\\n<p>The string to split.</p>\\n\"\n    - id: pattern\n      type: System.String\n      description: \"\\n<p>The regular expression pattern to match.</p>\\n\"\n    - id: options\n      type: System.Text.RegularExpressions.RegexOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that provide options for matching.</p>\\n\"\n    - id: matchTimeout\n      type: System.TimeSpan\n      description: \"\\n<p>A time-out interval, or <xref href=\\\"System.Text.RegularExpressions.Regex.InfiniteMatchTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to indicate that the method should not time out.</p>\\n\"\n    return:\n      type: System.String[]\n      description: \"\\n<p>A string array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A regular expression parsing error occurred.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>input</em> or <em>pattern</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>options</em> is not a valid bitwise combination of <xref href=\\\"System.Text.RegularExpressions.RegexOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n<p>-or-</p>\\n<p>\\n<em>matchTimeout</em> is negative, zero, or greater than approximately 24 days.</p>\\n\"\n  - type: System.Text.RegularExpressions.RegexMatchTimeoutException\n    commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n    description: \"\\n<p>A time-out occurred. For more information about time-outs, see the Remarks section.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Split(String, String, RegexOptions, TimeSpan)\n- uid: System.Text.RegularExpressions.Regex.ToString\n  commentId: M:System.Text.RegularExpressions.Regex.ToString\n  id: ToString\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Text.RegularExpressions.Regex.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 130\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Returns the regular expression pattern that was passed into the <strong>Regex</strong> constructor.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The <em>pattern</em> parameter that was passed into the <strong>Regex</strong> constructor.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Regex.ToString()\n- uid: System.Text.RegularExpressions.Regex.Unescape(System.String)\n  commentId: M:System.Text.RegularExpressions.Regex.Unescape(System.String)\n  id: Unescape(System.String)\n  parent: System.Text.RegularExpressions.Regex\n  langs:\n  - csharp\n  - vb\n  name: Unescape(String)\n  fullName: System.Text.RegularExpressions.Regex.Unescape(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Unescape\n    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs\n    startLine: 131\n  assemblies:\n  - System.Text.RegularExpressions\n  namespace: System.Text.RegularExpressions\n  summary: \"\\n<p>Converts any escaped characters in the input string.</p>\\n\"\n  syntax:\n    content: public static string Unescape(string str)\n    content.vb: Public Shared Function Unescape(str As String) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The input string containing the text to convert. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string of characters with any escaped characters converted to their unescaped form.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>str</em> includes an unrecognized escape sequence.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Text.RegularExpressions.Regex.Escape(System.String)\n    commentId: M:System.Text.RegularExpressions.Regex.Escape(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Regex.Unescape(String)\nreferences:\n- uid: System.Text.RegularExpressions\n  isExternal: false\n  name: System.Text.RegularExpressions\n  fullName: System.Text.RegularExpressions\n  commentId: N:System.Text.RegularExpressions\n  nameWithType: System.Text.RegularExpressions\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Text.RegularExpressions.RegexRunnerFactory\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexRunnerFactory\n  fullName: System.Text.RegularExpressions.RegexRunnerFactory\n  commentId: T:System.Text.RegularExpressions.RegexRunnerFactory\n  nameWithType: RegexRunnerFactory\n- uid: System.Text.RegularExpressions.RegexOptions\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: RegexOptions\n  fullName: System.Text.RegularExpressions.RegexOptions\n  commentId: T:System.Text.RegularExpressions.RegexOptions\n  nameWithType: RegexOptions\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  commentId: T:System.Collections.IDictionary\n  nameWithType: IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Text.RegularExpressions.Match\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: Match\n  fullName: System.Text.RegularExpressions.Match\n  commentId: T:System.Text.RegularExpressions.Match\n  nameWithType: Match\n- uid: System.Text.RegularExpressions.MatchCollection\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: MatchCollection\n  fullName: System.Text.RegularExpressions.MatchCollection\n  commentId: T:System.Text.RegularExpressions.MatchCollection\n  nameWithType: MatchCollection\n- uid: System.Text.RegularExpressions.MatchEvaluator\n  parent: System.Text.RegularExpressions\n  isExternal: false\n  name: MatchEvaluator\n  fullName: System.Text.RegularExpressions.MatchEvaluator\n  commentId: T:System.Text.RegularExpressions.MatchEvaluator\n  nameWithType: MatchEvaluator\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.Text.RegularExpressions.RegexMatchTimeoutException\n  isExternal: false\n  name: RegexMatchTimeoutException\n  fullName: System.Text.RegularExpressions.RegexMatchTimeoutException\n  commentId: T:System.Text.RegularExpressions.RegexMatchTimeoutException\n  nameWithType: RegexMatchTimeoutException\n"}