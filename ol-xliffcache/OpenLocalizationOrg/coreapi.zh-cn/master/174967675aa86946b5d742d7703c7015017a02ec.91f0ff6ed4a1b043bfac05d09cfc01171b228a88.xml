{"nodes":[{"pos":[2104,2114],"content":"Extensions","needQuote":true,"nodes":[{"content":"Extensions","pos":[0,10]}]},{"pos":[3434,3462],"content":"Ancestors<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,28],"source":"Ancestors<T>(IEnumerable<T>)"}]},{"pos":[6763,6798],"content":"Ancestors<T>(IEnumerable<T>, XName)","needQuote":true,"nodes":[{"content":"Ancestors&lt;T&gt;(IEnumerable&lt;T&gt;, XName)","pos":[0,35],"source":"Ancestors<T>(IEnumerable<T>, XName)"}]},{"pos":[10686,10725],"content":"AncestorsAndSelf(IEnumerable<XElement>)","needQuote":true,"nodes":[{"content":"AncestorsAndSelf(IEnumerable&lt;XElement&gt;)","pos":[0,39],"source":"AncestorsAndSelf(IEnumerable<XElement>)"}]},{"pos":[13952,13998],"content":"AncestorsAndSelf(IEnumerable<XElement>, XName)","needQuote":true,"nodes":[{"content":"AncestorsAndSelf(IEnumerable&lt;XElement&gt;, XName)","pos":[0,46],"source":"AncestorsAndSelf(IEnumerable<XElement>, XName)"}]},{"pos":[17719,17752],"content":"Attributes(IEnumerable<XElement>)","needQuote":true,"nodes":[{"content":"Attributes(IEnumerable&lt;XElement&gt;)","pos":[0,33],"source":"Attributes(IEnumerable<XElement>)"}]},{"pos":[20406,20446],"content":"Attributes(IEnumerable<XElement>, XName)","needQuote":true,"nodes":[{"content":"Attributes(IEnumerable&lt;XElement&gt;, XName)","pos":[0,40],"source":"Attributes(IEnumerable<XElement>, XName)"}]},{"pos":[23598,23632],"content":"DescendantNodes<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"DescendantNodes&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,34],"source":"DescendantNodes<T>(IEnumerable<T>)"}]},{"pos":[27422,27467],"content":"DescendantNodesAndSelf(IEnumerable<XElement>)","needQuote":true,"nodes":[{"content":"DescendantNodesAndSelf(IEnumerable&lt;XElement&gt;)","pos":[0,45],"source":"DescendantNodesAndSelf(IEnumerable<XElement>)"}]},{"pos":[31212,31242],"content":"Descendants<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Descendants&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,30],"source":"Descendants<T>(IEnumerable<T>)"}]},{"pos":[34992,35029],"content":"Descendants<T>(IEnumerable<T>, XName)","needQuote":true,"nodes":[{"content":"Descendants&lt;T&gt;(IEnumerable&lt;T&gt;, XName)","pos":[0,37],"source":"Descendants<T>(IEnumerable<T>, XName)"}]},{"pos":[39366,39407],"content":"DescendantsAndSelf(IEnumerable<XElement>)","needQuote":true,"nodes":[{"content":"DescendantsAndSelf(IEnumerable&lt;XElement&gt;)","pos":[0,41],"source":"DescendantsAndSelf(IEnumerable<XElement>)"}]},{"pos":[43031,43079],"content":"DescendantsAndSelf(IEnumerable<XElement>, XName)","needQuote":true,"nodes":[{"content":"DescendantsAndSelf(IEnumerable&lt;XElement&gt;, XName)","pos":[0,48],"source":"DescendantsAndSelf(IEnumerable<XElement>, XName)"}]},{"pos":[47115,47142],"content":"Elements<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Elements&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,27],"source":"Elements<T>(IEnumerable<T>)"}]},{"pos":[50398,50432],"content":"Elements<T>(IEnumerable<T>, XName)","needQuote":true,"nodes":[{"content":"Elements&lt;T&gt;(IEnumerable&lt;T&gt;, XName)","pos":[0,34],"source":"Elements<T>(IEnumerable<T>, XName)"}]},{"pos":[54222,54256],"content":"InDocumentOrder<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"InDocumentOrder&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,34],"source":"InDocumentOrder<T>(IEnumerable<T>)"}]},{"pos":[56941,56965],"content":"Nodes<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Nodes&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,24],"source":"Nodes<T>(IEnumerable<T>)"}]},{"pos":[59882,59913],"content":"Remove(IEnumerable<XAttribute>)","needQuote":true,"nodes":[{"content":"Remove(IEnumerable&lt;XAttribute&gt;)","pos":[0,31],"source":"Remove(IEnumerable<XAttribute>)"}]},{"pos":[62291,62316],"content":"Remove<T>(IEnumerable<T>)","needQuote":true,"nodes":[{"content":"Remove&lt;T&gt;(IEnumerable&lt;T&gt;)","pos":[0,25],"source":"Remove<T>(IEnumerable<T>)"}]},{"pos":[64532,64547],"content":"System.Xml.Linq","needQuote":true,"nodes":[{"content":"System.Xml.Linq","pos":[0,15]}]},{"pos":[64705,64711],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64871,64881],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[64976,64984],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65053,65054],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65081,65082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65152,65160],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[65229,65230],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65257,65258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65441,65455],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[65574,65580],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65647,65648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65698,65704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65764,65765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65848,65854],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65921,65922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65972,65978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66038,66039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66253,66275],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[66423,66429],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66496,66497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66547,66553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[66614,66615]},{"pos":[66670,66676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66736,66737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66834,66840],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[66907,66908],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66958,66964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67025,67026]},{"pos":[67081,67087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67147,67148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67393,67424],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[67590,67605],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[67681,67682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67732,67738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67799,67800]},{"pos":[67855,67861],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67921,67922],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68028,68043],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[68119,68120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68170,68176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68237,68238]},{"pos":[68293,68299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68359,68360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68590,68603],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[68704,68715],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68787,68788],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68815,68816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68889,68900],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[68972,68973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69000,69001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69176,69185],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[69278,69285],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[69353,69354],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69381,69382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69451,69458],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[69526,69527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69554,69555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69730,69747],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[69856,69871],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[69947,69948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69975,69976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70053,70068],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70144,70145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70172,70173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70318,70324],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[70540,70554],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[70773,70784],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[70848,70849],"content":"<","needQuote":true,"nodes":[]},{"pos":[70876,70877],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[70997,71008],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[71073,71076]},{"pos":[71110,71111],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[71138,71139],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71454,71475],"content":"IEnumerable<XElement>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XElement&gt;","pos":[0,21],"source":"IEnumerable<XElement>"}]},{"pos":[71747,71758],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[71843,71844],"content":"<","needQuote":true,"nodes":[]},{"pos":[71905,71913],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[72056,72067],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[72153,72156]},{"pos":[72224,72232],"content":"XElement","needQuote":true,"nodes":[{"content":"XElement","pos":[0,8]}]},{"pos":[72282,72283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72538,72552],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[72771,72782],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72846,72847],"content":"<","needQuote":true,"nodes":[]},{"pos":[72874,72875],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[72995,73006],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[73071,73074]},{"pos":[73108,73109],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[73136,73137],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73340,73366],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[73574,73579],"content":"XName","needQuote":true,"nodes":[{"content":"XName","pos":[0,5]}]},{"pos":[73847,73870],"content":"IEnumerable<XAttribute>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XAttribute&gt;","pos":[0,23],"source":"IEnumerable<XAttribute>"}]},{"pos":[74148,74159],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74244,74245],"content":"<","needQuote":true,"nodes":[]},{"pos":[74308,74318],"content":"XAttribute","needQuote":true,"nodes":[{"content":"XAttribute","pos":[0,10]}]},{"pos":[74463,74474],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[74560,74563]},{"pos":[74633,74643],"content":"XAttribute","needQuote":true,"nodes":[{"content":"XAttribute","pos":[0,10]}]},{"pos":[74695,74696],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75050,75068],"content":"IEnumerable<XNode>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;XNode&gt;","pos":[0,18],"source":"IEnumerable<XNode>"}]},{"pos":[75331,75342],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75427,75428],"content":"<","needQuote":true,"nodes":[]},{"pos":[75486,75491],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[75631,75642],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[75728,75731]},{"pos":[75796,75801],"content":"XNode","needQuote":true,"nodes":[{"content":"XNode","pos":[0,5]}]},{"pos":[75848,75849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Xml.Linq.Extensions\n  commentId: T:System.Xml.Linq.Extensions\n  id: Extensions\n  parent: System.Xml.Linq\n  children:\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  - System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  - System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  - System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  langs:\n  - csharp\n  - vb\n  name: Extensions\n  fullName: System.Xml.Linq.Extensions\n  type: Class\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Extensions\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 10\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Contains the LINQ to XML extension methods.</p>\\n\"\n  syntax:\n    content: public class Extensions\n    content.vb: Public Class Extensions\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Extensions\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  id: Ancestors``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Ancestors<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.Ancestors<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ancestors\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 12\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of elements that contains the ancestors of every node in the source collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Ancestors<T>(this IEnumerable<T> source)where T : XNode'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the ancestors of every node in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XNode.Ancestors\n    commentId: M:System.Xml.Linq.XNode.Ancestors\n  - type: System.Xml.Linq.XElement.AncestorsAndSelf\n    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf\n  - type: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Ancestors(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.Ancestors(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  id: Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Ancestors<T>(IEnumerable<T>, XName)\n  fullName: System.Xml.Linq.Extensions.Ancestors<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ancestors\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 13\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Ancestors<T>(this IEnumerable<T> source, XName name)where T : XNode'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Ancestors(Of T As XNode)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the ancestors of every node in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XNode.Ancestors\n    commentId: M:System.Xml.Linq.XNode.Ancestors\n  - type: System.Xml.Linq.XElement.AncestorsAndSelf\n    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf\n  - type: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Ancestors(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)\n  name.vb: Ancestors(Of T)(IEnumerable(Of T), XName)\n  nameWithType: Extensions.Ancestors<T>(IEnumerable<T>, XName)\n  nameWithType.vb: Extensions.Ancestors(Of T)(IEnumerable(Of T), XName)\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  id: AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: AncestorsAndSelf(IEnumerable<XElement>)\n  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AncestorsAndSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 14\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XElement> AncestorsAndSelf(this IEnumerable<XElement> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains every element in the source collection, and the ancestors of every element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XNode.Ancestors\n    commentId: M:System.Xml.Linq.XNode.Ancestors\n  - type: System.Xml.Linq.XElement.AncestorsAndSelf\n    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf\n  - type: System.Xml.Linq.Extensions.Ancestors\n    commentId: Overload:System.Xml.Linq.Extensions.Ancestors\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))\n  name.vb: AncestorsAndSelf(IEnumerable(Of XElement))\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>)\n  nameWithType.vb: Extensions.AncestorsAndSelf(IEnumerable(Of XElement))\n- uid: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  id: AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: AncestorsAndSelf(IEnumerable<XElement>, XName)\n  fullName: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AncestorsAndSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 15\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XElement> AncestorsAndSelf(this IEnumerable<XElement> source, XName name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function AncestorsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XNode.Ancestors\n    commentId: M:System.Xml.Linq.XNode.Ancestors\n  - type: System.Xml.Linq.XElement.AncestorsAndSelf\n    commentId: M:System.Xml.Linq.XElement.AncestorsAndSelf\n  - type: System.Xml.Linq.Extensions.Ancestors\n    commentId: Overload:System.Xml.Linq.Extensions.Ancestors\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)\n  name.vb: AncestorsAndSelf(IEnumerable(Of XElement), XName)\n  nameWithType: Extensions.AncestorsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType.vb: Extensions.AncestorsAndSelf(IEnumerable(Of XElement), XName)\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  id: Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Attributes(IEnumerable<XElement>)\n  fullName: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 16\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the attributes of every element in the source collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XAttribute> Attributes(this IEnumerable<XElement> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Attributes(source As IEnumerable(Of XElement)) As IEnumerable(Of XAttribute)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the attributes of every element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.Attributes\n    commentId: M:System.Xml.Linq.XElement.Attributes\n  - type: System.Xml.Linq.Extensions.Elements\n    commentId: Overload:System.Xml.Linq.Extensions.Elements\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))\n  name.vb: Attributes(IEnumerable(Of XElement))\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>)\n  nameWithType.vb: Extensions.Attributes(IEnumerable(Of XElement))\n- uid: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  id: Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Attributes(IEnumerable<XElement>, XName)\n  fullName: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 17\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XAttribute> Attributes(this IEnumerable<XElement> source, XName name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Attributes(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XAttribute)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.Attributes\n    commentId: M:System.Xml.Linq.XElement.Attributes\n  - type: System.Xml.Linq.Extensions.Elements\n    commentId: Overload:System.Xml.Linq.Extensions.Elements\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)\n  name.vb: Attributes(IEnumerable(Of XElement), XName)\n  nameWithType: Extensions.Attributes(IEnumerable<XElement>, XName)\n  nameWithType.vb: Extensions.Attributes(IEnumerable(Of XElement), XName)\n- uid: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  id: DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: DescendantNodes<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.DescendantNodes<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DescendantNodes\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 18\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the descendant nodes of every document and element in the source collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XNode> DescendantNodes<T>(this IEnumerable<T> source)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DescendantNodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the descendant nodes of every document and element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.DescendantNodes(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: DescendantNodes(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.DescendantNodes<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.DescendantNodes(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  commentId: M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  id: DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: DescendantNodesAndSelf(IEnumerable<XElement>)\n  fullName: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DescendantNodesAndSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 19\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XNode> DescendantNodesAndSelf(this IEnumerable<XElement> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DescendantNodesAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XNode)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))\n  name.vb: DescendantNodesAndSelf(IEnumerable(Of XElement))\n  nameWithType: Extensions.DescendantNodesAndSelf(IEnumerable<XElement>)\n  nameWithType.vb: Extensions.DescendantNodesAndSelf(IEnumerable(Of XElement))\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  id: Descendants``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Descendants<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.Descendants<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Descendants\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 20\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Descendants<T>(this IEnumerable<T> source)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the descendant elements of every element and document in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Descendants(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.Descendants(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  id: Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Descendants<T>(IEnumerable<T>, XName)\n  fullName: System.Xml.Linq.Extensions.Descendants<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Descendants\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 21\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Descendants<T>(this IEnumerable<T> source, XName name)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Descendants(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - type: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Descendants(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)\n  name.vb: Descendants(Of T)(IEnumerable(Of T), XName)\n  nameWithType: Extensions.Descendants<T>(IEnumerable<T>, XName)\n  nameWithType.vb: Extensions.Descendants(Of T)(IEnumerable(Of T), XName)\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  id: DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: DescendantsAndSelf(IEnumerable<XElement>)\n  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DescendantsAndSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 22\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XElement> DescendantsAndSelf(this IEnumerable<XElement> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement)) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains every element in the source collection, and the descendent elements of every element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement))\n  name.vb: DescendantsAndSelf(IEnumerable(Of XElement))\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>)\n  nameWithType.vb: Extensions.DescendantsAndSelf(IEnumerable(Of XElement))\n- uid: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  id: DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: DescendantsAndSelf(IEnumerable<XElement>, XName)\n  fullName: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DescendantsAndSelf\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 23\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: public static IEnumerable<XElement> DescendantsAndSelf(this IEnumerable<XElement> source, XName name)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function DescendantsAndSelf(source As IEnumerable(Of XElement), name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})\n  - type: System.Xml.Linq.Extensions.Descendants\n    commentId: Overload:System.Xml.Linq.Extensions.Descendants\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement), System.Xml.Linq.XName)\n  name.vb: DescendantsAndSelf(IEnumerable(Of XElement), XName)\n  nameWithType: Extensions.DescendantsAndSelf(IEnumerable<XElement>, XName)\n  nameWithType.vb: Extensions.DescendantsAndSelf(IEnumerable(Of XElement), XName)\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})\n  id: Elements``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Elements<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.Elements<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Elements\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 24\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the child elements of every element and document in the source collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Elements<T>(this IEnumerable<T> source)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the child elements of every element or document in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Elements(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.Elements(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  commentId: M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  id: Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Elements<T>(IEnumerable<T>, XName)\n  fullName: System.Xml.Linq.Extensions.Elements<T>(System.Collections.Generic.IEnumerable<T>, System.Xml.Linq.XName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Elements\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 25\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XElement> Elements<T>(this IEnumerable<T> source, XName name)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Elements(Of T As XContainer)(source As IEnumerable(Of T), name As XName) As IEnumerable(Of XElement)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    - id: name\n      type: System.Xml.Linq.XName\n      description: \"\\n<p>The <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to match.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XElement\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the child elements of every element and document in the source collection. Only elements that have a matching <xref href=\\\"System.Xml.Linq.XName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are included in the collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.DescendantNodesAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantNodesAndSelf\n  - type: System.Xml.Linq.XElement.DescendantsAndSelf\n    commentId: M:System.Xml.Linq.XElement.DescendantsAndSelf\n  - type: System.Xml.Linq.XContainer.DescendantNodes\n    commentId: M:System.Xml.Linq.XContainer.DescendantNodes\n  - type: System.Xml.Linq.XContainer.Descendants\n    commentId: M:System.Xml.Linq.XContainer.Descendants\n  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Elements(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Xml.Linq.XName)\n  name.vb: Elements(Of T)(IEnumerable(Of T), XName)\n  nameWithType: Extensions.Elements<T>(IEnumerable<T>, XName)\n  nameWithType.vb: Extensions.Elements(Of T)(IEnumerable(Of T), XName)\n- uid: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  id: InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: InDocumentOrder<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.InDocumentOrder<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InDocumentOrder\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 26\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<T> InDocumentOrder<T>(this IEnumerable<T> source)where T : XNode'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function InDocumentOrder(Of T As XNode)(source As IEnumerable(Of T)) As IEnumerable(Of T)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains all nodes in the source collection, sorted in document order.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.InDocumentOrder(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: InDocumentOrder(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.InDocumentOrder<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.InDocumentOrder(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  id: Nodes``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Nodes<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.Nodes<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Nodes\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 27\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Returns a collection of the child nodes of every document and element in the source collection.</p>\\n\"\n  syntax:\n    content: 'public static IEnumerable<XNode> Nodes<T>(this IEnumerable<T> source)where T : XContainer'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Function Nodes(Of T As XContainer)(source As IEnumerable(Of T)) As IEnumerable(Of XNode)\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XContainer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the child nodes of every document and element in the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XContainer.Nodes\n    commentId: M:System.Xml.Linq.XContainer.Nodes\n  - type: System.Xml.Linq.Extensions.Elements\n    commentId: Overload:System.Xml.Linq.Extensions.Elements\n  - type: System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n    commentId: M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Nodes(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Nodes(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.Nodes<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.Nodes(Of T)(IEnumerable(Of T))\n- uid: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  commentId: M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  id: Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Remove(IEnumerable<XAttribute>)\n  fullName: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 28\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Removes every attribute in the source collection from its parent element.</p>\\n\"\n  syntax:\n    content: public static void Remove(this IEnumerable<XAttribute> source)\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Sub Remove(source As IEnumerable(Of XAttribute))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.RemoveAttributes\n    commentId: M:System.Xml.Linq.XElement.RemoveAttributes\n  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.XAttribute.Remove\n    commentId: M:System.Xml.Linq.XAttribute.Remove\n  - type: System.Xml.Linq.XNode.Remove\n    commentId: M:System.Xml.Linq.XNode.Remove\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XAttribute))\n  name.vb: Remove(IEnumerable(Of XAttribute))\n  nameWithType: Extensions.Remove(IEnumerable<XAttribute>)\n  nameWithType.vb: Extensions.Remove(IEnumerable(Of XAttribute))\n- uid: System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  commentId: M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})\n  id: Remove``1(System.Collections.Generic.IEnumerable{``0})\n  isExtensionMethod: true\n  parent: System.Xml.Linq.Extensions\n  langs:\n  - csharp\n  - vb\n  name: Remove<T>(IEnumerable<T>)\n  fullName: System.Xml.Linq.Extensions.Remove<T>(System.Collections.Generic.IEnumerable<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs\n    startLine: 29\n  assemblies:\n  - System.Xml.XDocument\n  namespace: System.Xml.Linq\n  summary: \"\\n<p>Removes every node in the source collection from its parent node.</p>\\n\"\n  syntax:\n    content: 'public static void Remove<T>(this IEnumerable<T> source)where T : XNode'\n    content.vb: >-\n      <ExtensionAttribute>\n\n      Public Shared Sub Remove(Of T As XNode)(source As IEnumerable(Of T))\n    parameters:\n    - id: source\n      type: System.Collections.Generic.IEnumerable{{T}}\n      description: \"\\n<p>An <xref href=\\\"System.Collections.Generic.IEnumerable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the source collection.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of the objects in <em>source</em>, constrained to <xref href=\\\"System.Xml.Linq.XNode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Xml.Linq.XElement.RemoveAll\n    commentId: M:System.Xml.Linq.XElement.RemoveAll\n  - type: System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n    commentId: M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})\n  - type: System.Xml.Linq.XAttribute.Remove\n    commentId: M:System.Xml.Linq.XAttribute.Remove\n  - type: System.Xml.Linq.XNode.Remove\n    commentId: M:System.Xml.Linq.XNode.Remove\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Xml.Linq.Extensions.Remove(Of T)(System.Collections.Generic.IEnumerable(Of T))\n  name.vb: Remove(Of T)(IEnumerable(Of T))\n  nameWithType: Extensions.Remove<T>(IEnumerable<T>)\n  nameWithType.vb: Extensions.Remove(Of T)(IEnumerable(Of T))\nreferences:\n- uid: System.Xml.Linq\n  isExternal: false\n  name: System.Xml.Linq\n  fullName: System.Xml.Linq\n  commentId: N:System.Xml.Linq\n  nameWithType: System.Xml.Linq\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections.Generic.IEnumerable{{T}}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{`0}\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XElement>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XElement>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XElement)\n  name.vb: IEnumerable(Of XElement)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XElement\n    name: XElement\n    fullName: System.Xml.Linq.XElement\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement}\n  nameWithType: IEnumerable<XElement>\n  nameWithType.vb: IEnumerable(Of XElement)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Xml.Linq.XName\n  parent: System.Xml.Linq\n  isExternal: false\n  name: XName\n  fullName: System.Xml.Linq.XName\n  commentId: T:System.Xml.Linq.XName\n  nameWithType: XName\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XAttribute>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XAttribute>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XAttribute)\n  name.vb: IEnumerable(Of XAttribute)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XAttribute\n    name: XAttribute\n    fullName: System.Xml.Linq.XAttribute\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XAttribute\n    name: XAttribute\n    fullName: System.Xml.Linq.XAttribute\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute}\n  nameWithType: IEnumerable<XAttribute>\n  nameWithType.vb: IEnumerable(Of XAttribute)\n- uid: System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<XNode>\n  fullName: System.Collections.Generic.IEnumerable<System.Xml.Linq.XNode>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Xml.Linq.XNode)\n  name.vb: IEnumerable(Of XNode)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Xml.Linq.XNode\n    name: XNode\n    fullName: System.Xml.Linq.XNode\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Xml.Linq.XNode}\n  nameWithType: IEnumerable<XNode>\n  nameWithType.vb: IEnumerable(Of XNode)\n"}