{"nodes":[{"pos":[3069,3073],"content":"Math","needQuote":true,"nodes":[{"content":"Math","pos":[0,4]}]},{"pos":[4191,4203],"content":"Abs(Decimal)","needQuote":true,"nodes":[{"content":"Abs(Decimal)","pos":[0,12]}]},{"pos":[5616,5627],"content":"Abs(Double)","needQuote":true,"nodes":[{"content":"Abs(Double)","pos":[0,11]}]},{"pos":[7042,7052],"content":"Abs(Int16)","needQuote":true,"nodes":[{"content":"Abs(Int16)","pos":[0,10]}]},{"pos":[8603,8613],"content":"Abs(Int32)","needQuote":true,"nodes":[{"content":"Abs(Int32)","pos":[0,10]}]},{"pos":[10164,10174],"content":"Abs(Int64)","needQuote":true,"nodes":[{"content":"Abs(Int64)","pos":[0,10]}]},{"pos":[11721,11731],"content":"Abs(SByte)","needQuote":true,"nodes":[{"content":"Abs(SByte)","pos":[0,10]}]},{"pos":[13536,13547],"content":"Abs(Single)","needQuote":true,"nodes":[{"content":"Abs(Single)","pos":[0,11]}]},{"pos":[14966,14978],"content":"Acos(Double)","needQuote":true,"nodes":[{"content":"Acos(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A number representing a cosine, where &lt;em&gt;d&lt;/em&gt; must be greater than or equal to -1, but less than or equal to 1.","pos":[15628,15747],"source":"\\n<p>A number representing a cosine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1."},{"content":"&lt;/p&gt;\\n","pos":[15748,15754],"source":" </p>\\n"},{"pos":[16399,16411],"content":"Asin(Double)","needQuote":true,"nodes":[{"content":"Asin(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A number representing a sine, where &lt;em&gt;d&lt;/em&gt; must be greater than or equal to -1, but less than or equal to 1.","pos":[17059,17176],"source":"\\n<p>A number representing a sine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1."},{"content":"&lt;/p&gt;\\n","pos":[17177,17183],"source":" </p>\\n"},{"pos":[17834,17846],"content":"Atan(Double)","needQuote":true,"nodes":[{"content":"Atan(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A number representing a tangent.","pos":[18497,18534],"source":"\\n<p>A number representing a tangent."},{"content":"&lt;/p&gt;\\n","pos":[18535,18541],"source":" </p>\\n"},{"pos":[19531,19552],"content":"Atan2(Double, Double)","needQuote":true,"nodes":[{"content":"Atan2(Double, Double)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The y coordinate of a point.","pos":[20261,20294],"source":"\\n<p>The y coordinate of a point."},{"content":"&lt;/p&gt;\\n","pos":[20295,20301],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The x coordinate of a point.","pos":[20361,20394],"source":"\\n<p>The x coordinate of a point."},{"content":"&lt;/p&gt;\\n","pos":[20395,20401],"source":" </p>\\n"},{"pos":[22097,22113],"content":"Ceiling(Decimal)","needQuote":true,"nodes":[{"content":"Ceiling(Decimal)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A decimal number.","pos":[22788,22810],"source":"\\n<p>A decimal number."},{"content":"&lt;/p&gt;\\n","pos":[22811,22817],"source":" </p>\\n"},{"pos":[23596,23611],"content":"Ceiling(Double)","needQuote":true,"nodes":[{"content":"Ceiling(Double)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[24337,24383],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[24384,24390],"source":" </p>\\n"},{"pos":[25468,25479],"content":"Cos(Double)","needQuote":true,"nodes":[{"content":"Cos(Double)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[26113,26148],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[26149,26155],"source":" </p>\\n"},{"pos":[26926,26938],"content":"Cosh(Double)","needQuote":true,"nodes":[{"content":"Cosh(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[27598,27633],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[27634,27640],"source":" </p>\\n"},{"pos":[28553,28564],"content":"Exp(Double)","needQuote":true,"nodes":[{"content":"Exp(Double)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A number specifying a power.","pos":[29213,29246],"source":"\\n<p>A number specifying a power."},{"content":"&lt;/p&gt;\\n","pos":[29247,29253],"source":" </p>\\n"},{"pos":[30293,30307],"content":"Floor(Decimal)","needQuote":true,"nodes":[{"content":"Floor(Decimal)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A decimal number.","pos":[30955,30977],"source":"\\n<p>A decimal number."},{"content":"&lt;/p&gt;\\n","pos":[30978,30984],"source":" </p>\\n"},{"pos":[31835,31848],"content":"Floor(Double)","needQuote":true,"nodes":[{"content":"Floor(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number.","pos":[32549,32595],"source":"\\n<p>A double-precision floating-point number."},{"content":"&lt;/p&gt;\\n","pos":[32596,32602],"source":" </p>\\n"},{"pos":[33600,33629],"content":"IEEERemainder(Double, Double)","needQuote":true,"nodes":[{"content":"IEEERemainder(Double, Double)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A dividend.","pos":[34363,34379],"source":"\\n<p>A dividend."},{"content":"&lt;/p&gt;\\n","pos":[34380,34386],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A divisor.","pos":[34446,34461],"source":"\\n<p>A divisor."},{"content":"&lt;/p&gt;\\n","pos":[34462,34468],"source":" </p>\\n"},{"pos":[35312,35323],"content":"Log(Double)","needQuote":true,"nodes":[{"content":"Log(Double)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The number whose logarithm is to be found.","pos":[35993,36040],"source":"\\n<p>The number whose logarithm is to be found."},{"content":"&lt;/p&gt;\\n","pos":[36041,36047],"source":" </p>\\n"},{"pos":[37605,37624],"content":"Log(Double, Double)","needQuote":true,"nodes":[{"content":"Log(Double, Double)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The number whose logarithm is to be found.","pos":[38294,38341],"source":"\\n<p>The number whose logarithm is to be found."},{"content":"&lt;/p&gt;\\n","pos":[38342,38348],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The base of the logarithm.","pos":[38414,38445],"source":"\\n<p>The base of the logarithm."},{"content":"&lt;/p&gt;\\n","pos":[38446,38452],"source":" </p>\\n"},{"pos":[39249,39262],"content":"Log10(Double)","needQuote":true,"nodes":[{"content":"Log10(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A number whose logarithm is to be found.","pos":[39912,39957],"source":"\\n<p>A number whose logarithm is to be found."},{"content":"&lt;/p&gt;\\n","pos":[39958,39964],"source":" </p>\\n"},{"pos":[41337,41352],"content":"Max(Byte, Byte)","needQuote":true,"nodes":[{"content":"Max(Byte, Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The first of two 8-bit unsigned integers to compare.","pos":[42209,42266],"source":"\\n<p>The first of two 8-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[42267,42273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 8-bit unsigned integers to compare.","pos":[42334,42392],"source":"\\n<p>The second of two 8-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[42393,42399],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[42457,42530],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[42863,42884],"content":"Max(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Max(Decimal, Decimal)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first of two decimal numbers to compare.","pos":[43712,43761],"source":"\\n<p>The first of two decimal numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[43762,43768],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two decimal numbers to compare.","pos":[43832,43882],"source":"\\n<p>The second of two decimal numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[43883,43889],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[43950,44023],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[44356,44375],"content":"Max(Double, Double)","needQuote":true,"nodes":[{"content":"Max(Double, Double)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two double-precision floating-point numbers to compare.","pos":[45218,45291],"source":"\\n<p>The first of two double-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[45292,45298],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two double-precision floating-point numbers to compare.","pos":[45361,45435],"source":"\\n<p>The second of two double-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[45436,45442],"source":" </p>\\n"},{"pos":[46156,46173],"content":"Max(Int16, Int16)","needQuote":true,"nodes":[{"content":"Max(Int16, Int16)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 16-bit signed integers to compare.","pos":[47038,47094],"source":"\\n<p>The first of two 16-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[47095,47101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 16-bit signed integers to compare.","pos":[47163,47220],"source":"\\n<p>The second of two 16-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[47221,47227],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[47286,47359],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[47682,47699],"content":"Max(Int32, Int32)","needQuote":true,"nodes":[{"content":"Max(Int32, Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 32-bit signed integers to compare.","pos":[48564,48620],"source":"\\n<p>The first of two 32-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[48621,48627],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 32-bit signed integers to compare.","pos":[48689,48746],"source":"\\n<p>The second of two 32-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[48747,48753],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[48812,48885],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[49208,49225],"content":"Max(Int64, Int64)","needQuote":true,"nodes":[{"content":"Max(Int64, Int64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 64-bit signed integers to compare.","pos":[50084,50140],"source":"\\n<p>The first of two 64-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[50141,50147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 64-bit signed integers to compare.","pos":[50209,50266],"source":"\\n<p>The second of two 64-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[50267,50273],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[50332,50405],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[50728,50745],"content":"Max(SByte, SByte)","needQuote":true,"nodes":[{"content":"Max(SByte, SByte)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 8-bit signed integers to compare.","pos":[51667,51722],"source":"\\n<p>The first of two 8-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[51723,51729],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 8-bit signed integers to compare.","pos":[51791,51847],"source":"\\n<p>The second of two 8-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[51848,51854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[51913,51986],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[52490,52509],"content":"Max(Single, Single)","needQuote":true,"nodes":[{"content":"Max(Single, Single)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two single-precision floating-point numbers to compare.","pos":[53349,53422],"source":"\\n<p>The first of two single-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[53423,53429],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two single-precision floating-point numbers to compare.","pos":[53492,53566],"source":"\\n<p>The second of two single-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[53567,53573],"source":" </p>\\n"},{"pos":[54296,54315],"content":"Max(UInt16, UInt16)","needQuote":true,"nodes":[{"content":"Max(UInt16, UInt16)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 16-bit unsigned integers to compare.","pos":[55249,55307],"source":"\\n<p>The first of two 16-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[55308,55314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 16-bit unsigned integers to compare.","pos":[55377,55436],"source":"\\n<p>The second of two 16-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[55437,55443],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[55503,55576],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[56082,56101],"content":"Max(UInt32, UInt32)","needQuote":true,"nodes":[{"content":"Max(UInt32, UInt32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 32-bit unsigned integers to compare.","pos":[57035,57093],"source":"\\n<p>The first of two 32-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[57094,57100],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 32-bit unsigned integers to compare.","pos":[57163,57222],"source":"\\n<p>The second of two 32-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[57223,57229],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[57289,57362],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[57868,57887],"content":"Max(UInt64, UInt64)","needQuote":true,"nodes":[{"content":"Max(UInt64, UInt64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 64-bit unsigned integers to compare.","pos":[58815,58873],"source":"\\n<p>The first of two 64-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[58874,58880],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 64-bit unsigned integers to compare.","pos":[58943,59002],"source":"\\n<p>The second of two 64-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[59003,59009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is larger.&lt;/p&gt;\\n","pos":[59069,59142],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n"},{"pos":[59636,59651],"content":"Min(Byte, Byte)","needQuote":true,"nodes":[{"content":"Min(Byte, Byte)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The first of two 8-bit unsigned integers to compare.","pos":[60509,60566],"source":"\\n<p>The first of two 8-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[60567,60573],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 8-bit unsigned integers to compare.","pos":[60634,60692],"source":"\\n<p>The second of two 8-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[60693,60699],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[60757,60831],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[61164,61185],"content":"Min(Decimal, Decimal)","needQuote":true,"nodes":[{"content":"Min(Decimal, Decimal)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first of two decimal numbers to compare.","pos":[62014,62063],"source":"\\n<p>The first of two decimal numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[62064,62070],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two decimal numbers to compare.","pos":[62134,62184],"source":"\\n<p>The second of two decimal numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[62185,62191],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[62252,62326],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[62659,62678],"content":"Min(Double, Double)","needQuote":true,"nodes":[{"content":"Min(Double, Double)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two double-precision floating-point numbers to compare.","pos":[63522,63595],"source":"\\n<p>The first of two double-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[63596,63602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two double-precision floating-point numbers to compare.","pos":[63665,63739],"source":"\\n<p>The second of two double-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[63740,63746],"source":" </p>\\n"},{"pos":[64461,64478],"content":"Min(Int16, Int16)","needQuote":true,"nodes":[{"content":"Min(Int16, Int16)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 16-bit signed integers to compare.","pos":[65344,65400],"source":"\\n<p>The first of two 16-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[65401,65407],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 16-bit signed integers to compare.","pos":[65469,65526],"source":"\\n<p>The second of two 16-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[65527,65533],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[65592,65666],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[65989,66006],"content":"Min(Int32, Int32)","needQuote":true,"nodes":[{"content":"Min(Int32, Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 32-bit signed integers to compare.","pos":[66872,66928],"source":"\\n<p>The first of two 32-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[66929,66935],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 32-bit signed integers to compare.","pos":[66997,67054],"source":"\\n<p>The second of two 32-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[67055,67061],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[67120,67194],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[67517,67534],"content":"Min(Int64, Int64)","needQuote":true,"nodes":[{"content":"Min(Int64, Int64)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 64-bit signed integers to compare.","pos":[68394,68450],"source":"\\n<p>The first of two 64-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[68451,68457],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 64-bit signed integers to compare.","pos":[68519,68576],"source":"\\n<p>The second of two 64-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[68577,68583],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[68642,68716],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[69039,69056],"content":"Min(SByte, SByte)","needQuote":true,"nodes":[{"content":"Min(SByte, SByte)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The first of two 8-bit signed integers to compare.","pos":[69979,70034],"source":"\\n<p>The first of two 8-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[70035,70041],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 8-bit signed integers to compare.","pos":[70103,70159],"source":"\\n<p>The second of two 8-bit signed integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[70160,70166],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[70225,70299],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[70803,70822],"content":"Min(Single, Single)","needQuote":true,"nodes":[{"content":"Min(Single, Single)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two single-precision floating-point numbers to compare.","pos":[71663,71736],"source":"\\n<p>The first of two single-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[71737,71743],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two single-precision floating-point numbers to compare.","pos":[71806,71880],"source":"\\n<p>The second of two single-precision floating-point numbers to compare."},{"content":"&lt;/p&gt;\\n","pos":[71881,71887],"source":" </p>\\n"},{"pos":[72608,72627],"content":"Min(UInt16, UInt16)","needQuote":true,"nodes":[{"content":"Min(UInt16, UInt16)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 16-bit unsigned integers to compare.","pos":[73562,73620],"source":"\\n<p>The first of two 16-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[73621,73627],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 16-bit unsigned integers to compare.","pos":[73690,73749],"source":"\\n<p>The second of two 16-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[73750,73756],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[73816,73890],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[74396,74415],"content":"Min(UInt32, UInt32)","needQuote":true,"nodes":[{"content":"Min(UInt32, UInt32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 32-bit unsigned integers to compare.","pos":[75350,75408],"source":"\\n<p>The first of two 32-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[75409,75415],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 32-bit unsigned integers to compare.","pos":[75478,75537],"source":"\\n<p>The second of two 32-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[75538,75544],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[75604,75678],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[76184,76203],"content":"Min(UInt64, UInt64)","needQuote":true,"nodes":[{"content":"Min(UInt64, UInt64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The first of two 64-bit unsigned integers to compare.","pos":[77132,77190],"source":"\\n<p>The first of two 64-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[77191,77197],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second of two 64-bit unsigned integers to compare.","pos":[77260,77319],"source":"\\n<p>The second of two 64-bit unsigned integers to compare."},{"content":"&lt;/p&gt;\\n","pos":[77320,77326],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Parameter &lt;em&gt;val1&lt;/em&gt; or &lt;em&gt;val2&lt;/em&gt;, whichever is smaller.&lt;/p&gt;\\n","pos":[77386,77460],"source":"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n"},{"pos":[77966,77985],"content":"Pow(Double, Double)","needQuote":true,"nodes":[{"content":"Pow(Double, Double)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to be raised to a power.","pos":[78672,78742],"source":"\\n<p>A double-precision floating-point number to be raised to a power."},{"content":"&lt;/p&gt;\\n","pos":[78743,78749],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that specifies a power.","pos":[78809,78878],"source":"\\n<p>A double-precision floating-point number that specifies a power."},{"content":"&lt;/p&gt;\\n","pos":[78879,78885],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number &lt;em&gt;x&lt;/em&gt; raised to the power &lt;em&gt;y&lt;/em&gt;.&lt;/p&gt;\\n","pos":[78945,79009],"source":"\\n<p>The number <em>x</em> raised to the power <em>y</em>.</p>\\n"},{"pos":[79409,79423],"content":"Round(Decimal)","needQuote":true,"nodes":[{"content":"Round(Decimal)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A decimal number to be rounded.","pos":[80046,80082],"source":"\\n<p>A decimal number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[80083,80089],"source":" </p>\\n"},{"pos":[81350,81371],"content":"Round(Decimal, Int32)","needQuote":true,"nodes":[{"content":"Round(Decimal, Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A decimal number to be rounded.","pos":[82056,82092],"source":"\\n<p>A decimal number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[82093,82099],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of decimal places in the return value.","pos":[82165,82219],"source":"\\n<p>The number of decimal places in the return value."},{"content":"&lt;/p&gt;\\n","pos":[82220,82226],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number nearest to &lt;em&gt;d&lt;/em&gt; that contains a number of fractional digits equal to &lt;em&gt;decimals&lt;/em&gt;.","pos":[82287,82396],"source":"\\n<p>The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>."},{"content":"&lt;/p&gt;\\n","pos":[82397,82403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;decimals&lt;/em&gt; is less than 0 or greater than 28.","pos":[82534,82593],"source":"\\n<p>\\n<em>decimals</em> is less than 0 or greater than 28."},{"content":"&lt;/p&gt;\\n","pos":[82594,82600],"source":" </p>\\n"},{"pos":[83559,83598],"content":"Round(Decimal, Int32, MidpointRounding)","needQuote":true,"nodes":[{"content":"Round(Decimal, Int32, MidpointRounding)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A decimal number to be rounded.","pos":[84439,84475],"source":"\\n<p>A decimal number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[84476,84482],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of decimal places in the return value.","pos":[84548,84602],"source":"\\n<p>The number of decimal places in the return value."},{"content":"&lt;/p&gt;\\n","pos":[84603,84609],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Specification for how to round &lt;em&gt;d&lt;/em&gt; if it is midway between two other numbers.&lt;/p&gt;\\n","pos":[84682,84777],"source":"\\n<p>Specification for how to round <em>d</em> if it is midway between two other numbers.</p>\\n"},{"content":"\\n&lt;p&gt;The number nearest to &lt;em&gt;d&lt;/em&gt; that contains a number of fractional digits equal to &lt;em&gt;decimals&lt;/em&gt;.","pos":[84838,84947],"source":"\\n<p>The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>."},{"content":"If &lt;em&gt;d&lt;/em&gt; has fewer fractional digits than &lt;em&gt;decimals&lt;/em&gt;, &lt;em&gt;d&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[84948,85053],"source":" If <em>d</em> has fewer fractional digits than <em>decimals</em>, <em>d</em> is returned unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;decimals&lt;/em&gt; is less than 0 or greater than 28.","pos":[85184,85243],"source":"\\n<p>\\n<em>decimals</em> is less than 0 or greater than 28."},{"content":"&lt;/p&gt;\\n","pos":[85244,85250],"source":" </p>\\n"},{"pos":[86468,86500],"content":"Round(Decimal, MidpointRounding)","needQuote":true,"nodes":[{"content":"Round(Decimal, MidpointRounding)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;A decimal number to be rounded.","pos":[87272,87308],"source":"\\n<p>A decimal number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[87309,87315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Specification for how to round &lt;em&gt;d&lt;/em&gt; if it is midway between two other numbers.&lt;/p&gt;\\n","pos":[87388,87483],"source":"\\n<p>Specification for how to round <em>d</em> if it is midway between two other numbers.</p>\\n"},{"content":"\\n&lt;p&gt;The integer nearest &lt;em&gt;d&lt;/em&gt;.","pos":[87544,87580],"source":"\\n<p>The integer nearest <em>d</em>."},{"content":"If &lt;em&gt;d&lt;/em&gt; is halfway between two numbers, one of which is even and the other odd, then &lt;em&gt;mode&lt;/em&gt; determines which of the two is returned.","pos":[87581,87726],"source":" If <em>d</em> is halfway between two numbers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned."},{"content":"&lt;/p&gt;\\n","pos":[87727,87733],"source":" </p>\\n"},{"pos":[88857,88870],"content":"Round(Double)","needQuote":true,"nodes":[{"content":"Round(Double)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to be rounded.","pos":[89545,89605],"source":"\\n<p>A double-precision floating-point number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[89606,89612],"source":" </p>\\n"},{"pos":[90628,90648],"content":"Round(Double, Int32)","needQuote":true,"nodes":[{"content":"Round(Double, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to be rounded.","pos":[91359,91419],"source":"\\n<p>A double-precision floating-point number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[91420,91426],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of fractional digits in the return value.","pos":[91490,91547],"source":"\\n<p>The number of fractional digits in the return value."},{"content":"&lt;/p&gt;\\n","pos":[91548,91554],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number nearest to &lt;em&gt;value&lt;/em&gt; that contains a number of fractional digits equal to &lt;em&gt;digits&lt;/em&gt;.&lt;/p&gt;\\n","pos":[91614,91731],"source":"\\n<p>The number nearest to <em>value</em> that contains a number of fractional digits equal to <em>digits</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;digits&lt;/em&gt; is less than 0 or greater than 15.","pos":[91862,91919],"source":"\\n<p>\\n<em>digits</em> is less than 0 or greater than 15."},{"content":"&lt;/p&gt;\\n","pos":[91920,91926],"source":" </p>\\n"},{"pos":[92661,92699],"content":"Round(Double, Int32, MidpointRounding)","needQuote":true,"nodes":[{"content":"Round(Double, Int32, MidpointRounding)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to be rounded.","pos":[93566,93626],"source":"\\n<p>A double-precision floating-point number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[93627,93633],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of fractional digits in the return value.","pos":[93697,93754],"source":"\\n<p>The number of fractional digits in the return value."},{"content":"&lt;/p&gt;\\n","pos":[93755,93761],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Specification for how to round &lt;em&gt;value&lt;/em&gt; if it is midway between two other numbers.&lt;/p&gt;\\n","pos":[93834,93933],"source":"\\n<p>Specification for how to round <em>value</em> if it is midway between two other numbers.</p>\\n"},{"content":"\\n&lt;p&gt;The number nearest to &lt;em&gt;value&lt;/em&gt; that has a number of fractional digits equal to &lt;em&gt;digits&lt;/em&gt;.","pos":[93993,94099],"source":"\\n<p>The number nearest to <em>value</em> that has a number of fractional digits equal to <em>digits</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; has fewer fractional digits than &lt;em&gt;digits&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt; is returned unchanged.&lt;/p&gt;\\n","pos":[94100,94211],"source":" If <em>value</em> has fewer fractional digits than <em>digits</em>, <em>value</em> is returned unchanged.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;digits&lt;/em&gt; is less than 0 or greater than 15.","pos":[94342,94399],"source":"\\n<p>\\n<em>digits</em> is less than 0 or greater than 15."},{"content":"&lt;/p&gt;\\n","pos":[94400,94406],"source":" </p>\\n"},{"pos":[95400,95431],"content":"Round(Double, MidpointRounding)","needQuote":true,"nodes":[{"content":"Round(Double, MidpointRounding)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;A double-precision floating-point number to be rounded.","pos":[96233,96293],"source":"\\n<p>A double-precision floating-point number to be rounded."},{"content":"&lt;/p&gt;\\n","pos":[96294,96300],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Specification for how to round &lt;em&gt;value&lt;/em&gt; if it is midway between two other numbers.&lt;/p&gt;\\n","pos":[96373,96472],"source":"\\n<p>Specification for how to round <em>value</em> if it is midway between two other numbers.</p>\\n"},{"content":"\\n&lt;p&gt;The integer nearest &lt;em&gt;value&lt;/em&gt;.","pos":[96532,96572],"source":"\\n<p>The integer nearest <em>value</em>."},{"content":"If &lt;em&gt;value&lt;/em&gt; is halfway between two integers, one of which is even and the other odd, then &lt;em&gt;mode&lt;/em&gt; determines which of the two is returned.&lt;/p&gt;\\n","pos":[96573,96729],"source":" If <em>value</em> is halfway between two integers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned.</p>\\n"},{"pos":[97632,97645],"content":"Sign(Decimal)","needQuote":true,"nodes":[{"content":"Sign(Decimal)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A signed decimal number.","pos":[98282,98311],"source":"\\n<p>A signed decimal number."},{"content":"&lt;/p&gt;\\n","pos":[98312,98318],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[98377,98596],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[98597,98682],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[98683,98772],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[98773,98807],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[99093,99105],"content":"Sign(Double)","needQuote":true,"nodes":[{"content":"Sign(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[99762,99783],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[99784,99790],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[99849,100068],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[100069,100154],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[100155,100244],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[100245,100279],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[100795,100806],"content":"Sign(Int16)","needQuote":true,"nodes":[{"content":"Sign(Int16)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[101442,101463],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[101464,101470],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[101529,101748],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[101749,101834],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[101835,101924],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[101925,101959],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[102240,102251],"content":"Sign(Int32)","needQuote":true,"nodes":[{"content":"Sign(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[102887,102908],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[102909,102915],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[102974,103193],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[103194,103279],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[103280,103369],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[103370,103404],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[103685,103696],"content":"Sign(Int64)","needQuote":true,"nodes":[{"content":"Sign(Int64)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[104330,104351],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[104352,104358],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[104417,104636],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[104637,104722],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[104723,104812],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[104813,104847],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[105128,105139],"content":"Sign(SByte)","needQuote":true,"nodes":[{"content":"Sign(SByte)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[105851,105872],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[105873,105879],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[105938,106157],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[106158,106243],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[106244,106333],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[106334,106368],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[106827,106839],"content":"Sign(Single)","needQuote":true,"nodes":[{"content":"Sign(Single)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A signed number.","pos":[107495,107516],"source":"\\n<p>A signed number."},{"content":"&lt;/p&gt;\\n","pos":[107517,107523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A number that indicates the sign of &lt;em&gt;value&lt;/em&gt;, as shown in the following table.&lt;/p&gt;\\n&lt;p&gt;Return value &lt;/p&gt;\\n&lt;p&gt;Meaning &lt;/p&gt;\\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;-1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is less than zero.","pos":[107582,107801],"source":"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;0 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is equal to zero.","pos":[107802,107887],"source":" </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;\\n&lt;p&gt;1 &lt;/p&gt;\\n&lt;/td&gt;&lt;td&gt;\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is greater than zero.","pos":[107888,107977],"source":" </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero."},{"content":"&lt;/p&gt;\\n&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\\n","pos":[107978,108012],"source":" </p>\\n</td></tr></tbody></table>\\n"},{"pos":[108528,108539],"content":"Sin(Double)","needQuote":true,"nodes":[{"content":"Sin(Double)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[109171,109206],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[109207,109213],"source":" </p>\\n"},{"pos":[109982,109994],"content":"Sinh(Double)","needQuote":true,"nodes":[{"content":"Sinh(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[110652,110687],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[110688,110694],"source":" </p>\\n"},{"pos":[111505,111517],"content":"Sqrt(Double)","needQuote":true,"nodes":[{"content":"Sqrt(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The number whose square root is to be found.","pos":[112308,112357],"source":"\\n<p>The number whose square root is to be found."},{"content":"&lt;/p&gt;\\n","pos":[112358,112364],"source":" </p>\\n"},{"pos":[113672,113683],"content":"Tan(Double)","needQuote":true,"nodes":[{"content":"Tan(Double)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[114318,114353],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[114354,114360],"source":" </p>\\n"},{"pos":[115132,115144],"content":"Tanh(Double)","needQuote":true,"nodes":[{"content":"Tanh(Double)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An angle, measured in radians.","pos":[115805,115840],"source":"\\n<p>An angle, measured in radians."},{"content":"&lt;/p&gt;\\n","pos":[115841,115847],"source":" </p>\\n"},{"pos":[116749,116766],"content":"Truncate(Decimal)","needQuote":true,"nodes":[{"content":"Truncate(Decimal)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;A number to truncate.&lt;/p&gt;\\n","pos":[117408,117440],"source":"\\n<p>A number to truncate.</p>\\n"},{"content":"\\n&lt;p&gt;The integral part of &lt;em&gt;d&lt;/em&gt;; that is, the number that remains after any fractional digits have been discarded.&lt;/p&gt;\\n","pos":[117501,117626],"source":"\\n<p>The integral part of <em>d</em>; that is, the number that remains after any fractional digits have been discarded.</p>\\n"},{"pos":[118228,118244],"content":"Truncate(Double)","needQuote":true,"nodes":[{"content":"Truncate(Double)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A number to truncate.&lt;/p&gt;\\n","pos":[118904,118936],"source":"\\n<p>A number to truncate.</p>\\n"},{"pos":[120469,120471],"content":"PI","needQuote":true,"nodes":[{"content":"PI","pos":[0,2]}]},{"pos":[121295,121296],"content":"E","needQuote":true,"nodes":[{"content":"E","pos":[0,1]}]},{"pos":[122041,122047],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[122178,122184],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[122344,122354],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[122449,122457],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[122526,122527],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122554,122555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122625,122633],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[122702,122703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122730,122731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122914,122928],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[123047,123053],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123120,123121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123171,123177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123237,123238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123321,123327],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123394,123395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123445,123451],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[123511,123512],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123726,123748],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[123896,123902],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[123969,123970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124020,124026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124087,124088]},{"pos":[124143,124149],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124209,124210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124307,124313],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[124380,124381],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124431,124437],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[124498,124499]},{"pos":[124554,124560],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[124620,124621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124866,124897],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[125063,125078],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[125154,125155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125205,125211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[125272,125273]},{"pos":[125328,125334],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125394,125395],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125501,125516],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[125592,125593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[125643,125649],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[125710,125711]},{"pos":[125766,125772],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[125832,125833],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126063,126076],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[126177,126188],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[126260,126261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126288,126289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126362,126373],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[126445,126446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126473,126474],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126649,126658],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[126751,126758],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[126826,126827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126854,126855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[126924,126931],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[126999,127000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127027,127028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127203,127220],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[127329,127344],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[127420,127421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127448,127449],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127526,127541],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[127617,127618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127645,127646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127816,127823],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[127971,127977],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[128121,128126],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[128267,128272],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128413,128418],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[128559,128564],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[128706,128712],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[128855,128859],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[128998,129004],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[129149,129155],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[129300,129306],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[129461,129477],"content":"MidpointRounding","needQuote":true,"nodes":[{"content":"MidpointRounding","pos":[0,16]}]},{"pos":[129646,129663],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]},{"pos":[129845,129872],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[130091,130108],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[130299,130318],"content":"ArithmeticException","needQuote":true,"nodes":[{"content":"ArithmeticException","pos":[0,19]}]}],"content":"items:\n- uid: System.Math\n  commentId: T:System.Math\n  id: Math\n  parent: System\n  children:\n  - System.Math.Abs(System.Decimal)\n  - System.Math.Abs(System.Double)\n  - System.Math.Abs(System.Int16)\n  - System.Math.Abs(System.Int32)\n  - System.Math.Abs(System.Int64)\n  - System.Math.Abs(System.SByte)\n  - System.Math.Abs(System.Single)\n  - System.Math.Acos(System.Double)\n  - System.Math.Asin(System.Double)\n  - System.Math.Atan(System.Double)\n  - System.Math.Atan2(System.Double,System.Double)\n  - System.Math.Ceiling(System.Decimal)\n  - System.Math.Ceiling(System.Double)\n  - System.Math.Cos(System.Double)\n  - System.Math.Cosh(System.Double)\n  - System.Math.E\n  - System.Math.Exp(System.Double)\n  - System.Math.Floor(System.Decimal)\n  - System.Math.Floor(System.Double)\n  - System.Math.IEEERemainder(System.Double,System.Double)\n  - System.Math.Log(System.Double)\n  - System.Math.Log(System.Double,System.Double)\n  - System.Math.Log10(System.Double)\n  - System.Math.Max(System.Byte,System.Byte)\n  - System.Math.Max(System.Decimal,System.Decimal)\n  - System.Math.Max(System.Double,System.Double)\n  - System.Math.Max(System.Int16,System.Int16)\n  - System.Math.Max(System.Int32,System.Int32)\n  - System.Math.Max(System.Int64,System.Int64)\n  - System.Math.Max(System.SByte,System.SByte)\n  - System.Math.Max(System.Single,System.Single)\n  - System.Math.Max(System.UInt16,System.UInt16)\n  - System.Math.Max(System.UInt32,System.UInt32)\n  - System.Math.Max(System.UInt64,System.UInt64)\n  - System.Math.Min(System.Byte,System.Byte)\n  - System.Math.Min(System.Decimal,System.Decimal)\n  - System.Math.Min(System.Double,System.Double)\n  - System.Math.Min(System.Int16,System.Int16)\n  - System.Math.Min(System.Int32,System.Int32)\n  - System.Math.Min(System.Int64,System.Int64)\n  - System.Math.Min(System.SByte,System.SByte)\n  - System.Math.Min(System.Single,System.Single)\n  - System.Math.Min(System.UInt16,System.UInt16)\n  - System.Math.Min(System.UInt32,System.UInt32)\n  - System.Math.Min(System.UInt64,System.UInt64)\n  - System.Math.PI\n  - System.Math.Pow(System.Double,System.Double)\n  - System.Math.Round(System.Decimal)\n  - System.Math.Round(System.Decimal,System.Int32)\n  - System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  - System.Math.Round(System.Decimal,System.MidpointRounding)\n  - System.Math.Round(System.Double)\n  - System.Math.Round(System.Double,System.Int32)\n  - System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  - System.Math.Round(System.Double,System.MidpointRounding)\n  - System.Math.Sign(System.Decimal)\n  - System.Math.Sign(System.Double)\n  - System.Math.Sign(System.Int16)\n  - System.Math.Sign(System.Int32)\n  - System.Math.Sign(System.Int64)\n  - System.Math.Sign(System.SByte)\n  - System.Math.Sign(System.Single)\n  - System.Math.Sin(System.Double)\n  - System.Math.Sinh(System.Double)\n  - System.Math.Sqrt(System.Double)\n  - System.Math.Tan(System.Double)\n  - System.Math.Tanh(System.Double)\n  - System.Math.Truncate(System.Decimal)\n  - System.Math.Truncate(System.Double)\n  langs:\n  - csharp\n  - vb\n  name: Math\n  fullName: System.Math\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Math\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 22\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.</p>\\n\"\n  syntax:\n    content: public class Math\n    content.vb: Public Class Math\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Math\n- uid: System.Math.Abs(System.Decimal)\n  commentId: M:System.Math.Abs(System.Decimal)\n  id: Abs(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Decimal)\n  fullName: System.Math.Abs(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abs\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 310\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> number.</p>\\n\"\n  syntax:\n    content: public static decimal Abs(decimal value)\n    content.vb: Public Shared Function Abs(value As Decimal) As Decimal\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>A number that is greater than or equal to <xref href=\\\"System.Decimal.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>A decimal number, x, such that 0 ≤ x ≤<xref href=\\\"System.Decimal.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Decimal)\n- uid: System.Math.Abs(System.Double)\n  commentId: M:System.Math.Abs(System.Double)\n  id: Abs(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Double)\n  fullName: System.Math.Abs(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Abs(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Abs(value As Double) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A number that is greater than or equal to <xref href=\\\"System.Double.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\\\"System.Double.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Double)\n- uid: System.Math.Abs(System.Int16)\n  commentId: M:System.Math.Abs(System.Int16)\n  id: Abs(System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Int16)\n  fullName: System.Math.Abs(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abs\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 241\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static short Abs(short value)\n    content.vb: Public Shared Function Abs(value As Short) As Short\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>A number that is greater than <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A 16-bit signed integer, x, such that 0 ≤ x ≤<xref href=\\\"System.Int16.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> equals <xref href=\\\"System.Int16.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Int16)\n- uid: System.Math.Abs(System.Int32)\n  commentId: M:System.Math.Abs(System.Int32)\n  id: Abs(System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Int32)\n  fullName: System.Math.Abs(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abs\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 256\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int Abs(int value)\n    content.vb: Public Shared Function Abs(value As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A number that is greater than <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer, x, such that 0 ≤ x ≤<xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> equals <xref href=\\\"System.Int32.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Int32)\n- uid: System.Math.Abs(System.Int64)\n  commentId: M:System.Math.Abs(System.Int64)\n  id: Abs(System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Int64)\n  fullName: System.Math.Abs(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abs\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 271\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static long Abs(long value)\n    content.vb: Public Shared Function Abs(value As Long) As Long\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A number that is greater than <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer, x, such that 0 ≤ x ≤<xref href=\\\"System.Int64.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> equals <xref href=\\\"System.Int64.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Int64)\n- uid: System.Math.Abs(System.SByte)\n  commentId: M:System.Math.Abs(System.SByte)\n  id: Abs(System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(SByte)\n  fullName: System.Math.Abs(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Abs\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 224\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of an 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static sbyte Abs(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function Abs(value As SByte) As SByte\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>A number that is greater than <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>An 8-bit signed integer, x, such that 0 ≤ x ≤<xref href=\\\"System.SByte.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>\\n<em>value</em> equals <xref href=\\\"System.SByte.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(SByte)\n- uid: System.Math.Abs(System.Single)\n  commentId: M:System.Math.Abs(System.Single)\n  id: Abs(System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Abs(Single)\n  fullName: System.Math.Abs(System.Single)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the absolute value of a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static float Abs(float value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Abs(value As Single) As Single\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>A number that is greater than or equal to <xref href=\\\"System.Single.MinValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, but less than or equal to <xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>A single-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\\\"System.Single.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Abs(Single)\n- uid: System.Math.Acos(System.Double)\n  commentId: M:System.Math.Acos(System.Double)\n  id: Acos(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Acos(Double)\n  fullName: System.Math.Acos(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the angle whose cosine is the specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Acos(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Acos(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number representing a cosine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>An angle, θ, measured in radians, such that 0 ≤θ≤π</p>\\n<p>-or- </p>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>d</em> < -1 or <em>d</em> > 1 or <em>d</em> equals <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Acos(Double)\n- uid: System.Math.Asin(System.Double)\n  commentId: M:System.Math.Asin(System.Double)\n  id: Asin(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Asin(Double)\n  fullName: System.Math.Asin(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the angle whose sine is the specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Asin(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Asin(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number representing a sine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 </p>\\n<p>-or- </p>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>d</em> < -1 or <em>d</em> > 1 or <em>d</em> equals <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Asin(Double)\n- uid: System.Math.Atan(System.Double)\n  commentId: M:System.Math.Atan(System.Double)\n  id: Atan(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Atan(Double)\n  fullName: System.Math.Atan(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the angle whose tangent is the specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Atan(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Atan(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number representing a tangent. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.</p>\\n<p>-or- </p>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>d</em> equals <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, -π/2 rounded to double precision (-1.5707963267949) if <em>d</em> equals <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or π/2 rounded to double precision (1.5707963267949) if <em>d</em> equals <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Atan(Double)\n- uid: System.Math.Atan2(System.Double,System.Double)\n  commentId: M:System.Math.Atan2(System.Double,System.Double)\n  id: Atan2(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Atan2(Double, Double)\n  fullName: System.Math.Atan2(System.Double, System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the angle whose tangent is the quotient of two specified numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Atan2(double y, double x)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Atan2(y As Double, x As Double) As Double\n    parameters:\n    - id: y\n      type: System.Double\n      description: \"\\n<p>The y coordinate of a point. </p>\\n\"\n    - id: x\n      type: System.Double\n      description: \"\\n<p>The x coordinate of a point. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <em>y</em> / <em>x</em>, where (<em>x</em>, <em>y</em>) is a point in the Cartesian plane. Observe the following: </p>\\n<ul><li>\\n<p>For (<em>x</em>, <em>y</em>) in quadrant 1, 0 < θ < π/2.</p>\\n</li><li>\\n<p>For (<em>x</em>, <em>y</em>) in quadrant 2, π/2 < θ≤π.</p>\\n</li><li>\\n<p>For (<em>x</em>, <em>y</em>) in quadrant 3, -π < θ < -π/2.</p>\\n</li><li>\\n<p>For (<em>x</em>, <em>y</em>) in quadrant 4, -π/2 < θ < 0.</p>\\n</li></ul>\\n<p>For points on the boundaries of the quadrants, the return value is the following:</p>\\n<ul><li>\\n<p>If y is 0 and x is not negative, θ = 0.</p>\\n</li><li>\\n<p>If y is 0 and x is negative, θ = π.</p>\\n</li><li>\\n<p>If y is positive and x is 0, θ = π/2.</p>\\n</li><li>\\n<p>If y is negative and x is 0, θ = -π/2.</p>\\n</li><li>\\n<p>If y is 0 and x is 0, θ = 0. </p>\\n</li></ul>\\n<p>If <em>x</em> or <em>y</em> is <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or if <em>x</em> and <em>y</em> are either <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the method returns <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Atan2(Double, Double)\n- uid: System.Math.Ceiling(System.Decimal)\n  commentId: M:System.Math.Ceiling(System.Decimal)\n  id: Ceiling(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Ceiling(Decimal)\n  fullName: System.Math.Ceiling(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Ceiling\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 50\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smallest integral value that is greater than or equal to the specified decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal Ceiling(decimal d)\n    content.vb: Public Shared Function Ceiling(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The smallest integral value that is greater than or equal to <em>d</em>. Note that this method returns a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead of an integral type.</p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Floor(System.Decimal)\n    commentId: M:System.Math.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Ceiling(Decimal)\n- uid: System.Math.Ceiling(System.Double)\n  commentId: M:System.Math.Ceiling(System.Double)\n  id: Ceiling(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Ceiling(Double)\n  fullName: System.Math.Ceiling(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Ceiling(double a)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Ceiling(a As Double) As Double\n    parameters:\n    - id: a\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The smallest integral value that is greater than or equal to <em>a</em>. If <em>a</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, that value is returned. Note that this method returns a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead of an integral type.</p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Ceiling(Double)\n- uid: System.Math.Cos(System.Double)\n  commentId: M:System.Math.Cos(System.Double)\n  id: Cos(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Cos(Double)\n  fullName: System.Math.Cos(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the cosine of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Cos(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Cos(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The cosine of <em>d</em>. If <em>d</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Cos(Double)\n- uid: System.Math.Cosh(System.Double)\n  commentId: M:System.Math.Cosh(System.Double)\n  id: Cosh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Cosh(Double)\n  fullName: System.Math.Cosh(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the hyperbolic cosine of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Cosh(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Cosh(value As Double) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The hyperbolic cosine of <em>value</em>. If <em>value</em> is equal to <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned. If <em>value</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Cosh(Double)\n- uid: System.Math.Exp(System.Double)\n  commentId: M:System.Math.Exp(System.Double)\n  id: Exp(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Exp(Double)\n  fullName: System.Math.Exp(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns <strong>e</strong> raised to the specified power.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Exp(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Exp(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number specifying a power. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The number <strong>e</strong> raised to the power <em>d</em>. If <em>d</em> equals <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, that value is returned. If <em>d</em> equals <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, 0 is returned.</p>\\n\"\n  seealso:\n  - type: System.Math.E\n    commentId: F:System.Math.E\n  - type: System.Math.Pow(System.Double,System.Double)\n    commentId: M:System.Math.Pow(System.Double,System.Double)\n  - type: System.Math.Log(System.Double)\n    commentId: M:System.Math.Log(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Exp(Double)\n- uid: System.Math.Floor(System.Decimal)\n  commentId: M:System.Math.Floor(System.Decimal)\n  id: Floor(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Floor(Decimal)\n  fullName: System.Math.Floor(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Floor\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the largest integer less than or equal to the specified decimal number.</p>\\n\"\n  syntax:\n    content: public static decimal Floor(decimal d)\n    content.vb: Public Shared Function Floor(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The largest integer less than or equal to <em>d</em>.  Note that the method returns an integral value of type <xref href=\\\"System.Math\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Ceiling(System.Decimal)\n    commentId: M:System.Math.Ceiling(System.Decimal)\n  - type: System.Decimal.Floor(System.Decimal)\n    commentId: M:System.Decimal.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Floor(Decimal)\n- uid: System.Math.Floor(System.Double)\n  commentId: M:System.Math.Floor(System.Double)\n  id: Floor(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Floor(Double)\n  fullName: System.Math.Floor(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the largest integer less than or equal to the specified double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Floor(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Floor(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The largest integer less than or equal to <em>d</em>. If <em>d</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, that value is returned.</p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Floor(Double)\n- uid: System.Math.IEEERemainder(System.Double,System.Double)\n  commentId: M:System.Math.IEEERemainder(System.Double,System.Double)\n  id: IEEERemainder(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: IEEERemainder(Double, Double)\n  fullName: System.Math.IEEERemainder(System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IEEERemainder\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 184\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the remainder resulting from the division of a specified number by another specified number.</p>\\n\"\n  syntax:\n    content: public static double IEEERemainder(double x, double y)\n    content.vb: Public Shared Function IEEERemainder(x As Double, y As Double) As Double\n    parameters:\n    - id: x\n      type: System.Double\n      description: \"\\n<p>A dividend. </p>\\n\"\n    - id: y\n      type: System.Double\n      description: \"\\n<p>A divisor. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>A number equal to <em>x</em> - (<em>y</em> Q), where Q is the quotient of <em>x</em> / <em>y</em> rounded to the nearest integer (if <em>x</em> / <em>y</em> falls halfway between two integers, the even integer is returned).</p>\\n<p>If <em>x</em> - (<em>y</em> Q) is zero, the value +0 is returned if <em>x</em> is positive, or -0 if <em>x</em> is negative.</p>\\n<p>If <em>y</em> = 0, <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.IEEERemainder(Double, Double)\n- uid: System.Math.Log(System.Double)\n  commentId: M:System.Math.Log(System.Double)\n  id: Log(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Log(Double)\n  fullName: System.Math.Log(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Log(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Log(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>The number whose logarithm is to be found. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>One of the values in the following table. </p>\\n<p>\\n<em>d</em> parameter</p>\\n<p>Return value </p>\\n<table><tbody><tr><td>\\n<p>Positive </p>\\n</td><td>\\n<p>The natural logarithm of <em>d</em>; that is, ln <em>d</em>, or log e<em>d</em></p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Negative </p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equal to <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Math.E\n    commentId: F:System.Math.E\n  - type: System.Math.Exp(System.Double)\n    commentId: M:System.Math.Exp(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Log(Double)\n- uid: System.Math.Log(System.Double,System.Double)\n  commentId: M:System.Math.Log(System.Double,System.Double)\n  id: Log(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Log(Double, Double)\n  fullName: System.Math.Log(System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Log\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 482\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the logarithm of a specified number in a specified base.</p>\\n\"\n  syntax:\n    content: public static double Log(double a, double newBase)\n    content.vb: Public Shared Function Log(a As Double, newBase As Double) As Double\n    parameters:\n    - id: a\n      type: System.Double\n      description: \"\\n<p>The number whose logarithm is to be found. </p>\\n\"\n    - id: newBase\n      type: System.Double\n      description: \"\\n<p>The base of the logarithm. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>One of the values in the following table. (+Infinity denotes <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, -Infinity denotes <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and NaN denotes <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.)</p>\\n<p>\\n<em>a</em>\\n</p>\\n<p>\\n<em>newBase</em>\\n</p>\\n<p>Return value</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Log(Double, Double)\n- uid: System.Math.Log10(System.Double)\n  commentId: M:System.Math.Log10(System.Double)\n  id: Log10(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Log10(Double)\n  fullName: System.Math.Log10(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the base 10 logarithm of a specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Log10(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Log10(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number whose logarithm is to be found. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>One of the values in the following table. </p>\\n<p>\\n<em>d</em> parameter </p>\\n<p>Return value </p>\\n<table><tbody><tr><td>\\n<p>Positive </p>\\n</td><td>\\n<p>The base 10 log of <em>d</em>; that is, log 10<em>d</em>. </p>\\n</td></tr><tr><td>\\n<p>Zero </p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Negative </p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equal to <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Log10(Double)\n- uid: System.Math.Max(System.Byte,System.Byte)\n  commentId: M:System.Math.Max(System.Byte,System.Byte)\n  id: Max(System.Byte,System.Byte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Byte, Byte)\n  fullName: System.Math.Max(System.Byte, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 325\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 8-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static byte Max(byte val1, byte val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As Byte, val2 As Byte) As Byte\n    parameters:\n    - id: val1\n      type: System.Byte\n      description: \"\\n<p>The first of two 8-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Byte\n      description: \"\\n<p>The second of two 8-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Byte, Byte)\n- uid: System.Math.Max(System.Decimal,System.Decimal)\n  commentId: M:System.Math.Max(System.Decimal,System.Decimal)\n  id: Max(System.Decimal,System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Decimal, Decimal)\n  fullName: System.Math.Max(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 392\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two decimal numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static decimal Max(decimal val1, decimal val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Max(val1 As Decimal, val2 As Decimal) As Decimal\n    parameters:\n    - id: val1\n      type: System.Decimal\n      description: \"\\n<p>The first of two decimal numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Decimal\n      description: \"\\n<p>The second of two decimal numbers to compare. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Decimal, Decimal)\n- uid: System.Math.Max(System.Double,System.Double)\n  commentId: M:System.Math.Max(System.Double,System.Double)\n  id: Max(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Double, Double)\n  fullName: System.Math.Max(System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 381\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two double-precision floating-point numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static double Max(double val1, double val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Max(val1 As Double, val2 As Double) As Double\n    parameters:\n    - id: val1\n      type: System.Double\n      description: \"\\n<p>The first of two double-precision floating-point numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Double\n      description: \"\\n<p>The second of two double-precision floating-point numbers to compare. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Double, Double)\n- uid: System.Math.Max(System.Int16,System.Int16)\n  commentId: M:System.Math.Max(System.Int16,System.Int16)\n  id: Max(System.Int16,System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Int16, Int16)\n  fullName: System.Math.Max(System.Int16, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 331\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 16-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static short Max(short val1, short val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As Short, val2 As Short) As Short\n    parameters:\n    - id: val1\n      type: System.Int16\n      description: \"\\n<p>The first of two 16-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int16\n      description: \"\\n<p>The second of two 16-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Int16, Int16)\n- uid: System.Math.Max(System.Int32,System.Int32)\n  commentId: M:System.Math.Max(System.Int32,System.Int32)\n  id: Max(System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Int32, Int32)\n  fullName: System.Math.Max(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 344\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 32-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static int Max(int val1, int val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As Integer, val2 As Integer) As Integer\n    parameters:\n    - id: val1\n      type: System.Int32\n      description: \"\\n<p>The first of two 32-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int32\n      description: \"\\n<p>The second of two 32-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Int32, Int32)\n- uid: System.Math.Max(System.Int64,System.Int64)\n  commentId: M:System.Math.Max(System.Int64,System.Int64)\n  id: Max(System.Int64,System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Int64, Int64)\n  fullName: System.Math.Max(System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 357\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 64-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static long Max(long val1, long val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As Long, val2 As Long) As Long\n    parameters:\n    - id: val1\n      type: System.Int64\n      description: \"\\n<p>The first of two 64-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int64\n      description: \"\\n<p>The second of two 64-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Int64, Int64)\n- uid: System.Math.Max(System.SByte,System.SByte)\n  commentId: M:System.Math.Max(System.SByte,System.SByte)\n  id: Max(System.SByte,System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(SByte, SByte)\n  fullName: System.Math.Max(System.SByte, System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 318\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 8-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static sbyte Max(sbyte val1, sbyte val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As SByte, val2 As SByte) As SByte\n    parameters:\n    - id: val1\n      type: System.SByte\n      description: \"\\n<p>The first of two 8-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.SByte\n      description: \"\\n<p>The second of two 8-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(SByte, SByte)\n- uid: System.Math.Max(System.Single,System.Single)\n  commentId: M:System.Math.Max(System.Single,System.Single)\n  id: Max(System.Single,System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(Single, Single)\n  fullName: System.Math.Max(System.Single, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 370\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two single-precision floating-point numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static float Max(float val1, float val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Max(val1 As Single, val2 As Single) As Single\n    parameters:\n    - id: val1\n      type: System.Single\n      description: \"\\n<p>The first of two single-precision floating-point numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Single\n      description: \"\\n<p>The second of two single-precision floating-point numbers to compare. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger. If <em>val1</em>, or <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(Single, Single)\n- uid: System.Math.Max(System.UInt16,System.UInt16)\n  commentId: M:System.Math.Max(System.UInt16,System.UInt16)\n  id: Max(System.UInt16,System.UInt16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(UInt16, UInt16)\n  fullName: System.Math.Max(System.UInt16, System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 337\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 16-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static ushort Max(ushort val1, ushort val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As UShort, val2 As UShort) As UShort\n    parameters:\n    - id: val1\n      type: System.UInt16\n      description: \"\\n<p>The first of two 16-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt16\n      description: \"\\n<p>The second of two 16-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(UInt16, UInt16)\n- uid: System.Math.Max(System.UInt32,System.UInt32)\n  commentId: M:System.Math.Max(System.UInt32,System.UInt32)\n  id: Max(System.UInt32,System.UInt32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(UInt32, UInt32)\n  fullName: System.Math.Max(System.UInt32, System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 350\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 32-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static uint Max(uint val1, uint val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As UInteger, val2 As UInteger) As UInteger\n    parameters:\n    - id: val1\n      type: System.UInt32\n      description: \"\\n<p>The first of two 32-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt32\n      description: \"\\n<p>The second of two 32-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(UInt32, UInt32)\n- uid: System.Math.Max(System.UInt64,System.UInt64)\n  commentId: M:System.Math.Max(System.UInt64,System.UInt64)\n  id: Max(System.UInt64,System.UInt64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Max(UInt64, UInt64)\n  fullName: System.Math.Max(System.UInt64, System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Max\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 363\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the larger of two 64-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static ulong Max(ulong val1, ulong val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Max(val1 As ULong, val2 As ULong) As ULong\n    parameters:\n    - id: val1\n      type: System.UInt64\n      description: \"\\n<p>The first of two 64-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt64\n      description: \"\\n<p>The second of two 64-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is larger.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Max(UInt64, UInt64)\n- uid: System.Math.Min(System.Byte,System.Byte)\n  commentId: M:System.Math.Min(System.Byte,System.Byte)\n  id: Min(System.Byte,System.Byte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Byte, Byte)\n  fullName: System.Math.Min(System.Byte, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 407\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 8-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static byte Min(byte val1, byte val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As Byte, val2 As Byte) As Byte\n    parameters:\n    - id: val1\n      type: System.Byte\n      description: \"\\n<p>The first of two 8-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Byte\n      description: \"\\n<p>The second of two 8-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Byte, Byte)\n- uid: System.Math.Min(System.Decimal,System.Decimal)\n  commentId: M:System.Math.Min(System.Decimal,System.Decimal)\n  id: Min(System.Decimal,System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Decimal, Decimal)\n  fullName: System.Math.Min(System.Decimal, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 474\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two decimal numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static decimal Min(decimal val1, decimal val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Min(val1 As Decimal, val2 As Decimal) As Decimal\n    parameters:\n    - id: val1\n      type: System.Decimal\n      description: \"\\n<p>The first of two decimal numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Decimal\n      description: \"\\n<p>The second of two decimal numbers to compare. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Decimal, Decimal)\n- uid: System.Math.Min(System.Double,System.Double)\n  commentId: M:System.Math.Min(System.Double,System.Double)\n  id: Min(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Double, Double)\n  fullName: System.Math.Min(System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 463\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two double-precision floating-point numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static double Min(double val1, double val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Min(val1 As Double, val2 As Double) As Double\n    parameters:\n    - id: val1\n      type: System.Double\n      description: \"\\n<p>The first of two double-precision floating-point numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Double\n      description: \"\\n<p>The second of two double-precision floating-point numbers to compare. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Double, Double)\n- uid: System.Math.Min(System.Int16,System.Int16)\n  commentId: M:System.Math.Min(System.Int16,System.Int16)\n  id: Min(System.Int16,System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Int16, Int16)\n  fullName: System.Math.Min(System.Int16, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 413\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 16-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static short Min(short val1, short val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As Short, val2 As Short) As Short\n    parameters:\n    - id: val1\n      type: System.Int16\n      description: \"\\n<p>The first of two 16-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int16\n      description: \"\\n<p>The second of two 16-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Int16, Int16)\n- uid: System.Math.Min(System.Int32,System.Int32)\n  commentId: M:System.Math.Min(System.Int32,System.Int32)\n  id: Min(System.Int32,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Int32, Int32)\n  fullName: System.Math.Min(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 426\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 32-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static int Min(int val1, int val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As Integer, val2 As Integer) As Integer\n    parameters:\n    - id: val1\n      type: System.Int32\n      description: \"\\n<p>The first of two 32-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int32\n      description: \"\\n<p>The second of two 32-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Int32, Int32)\n- uid: System.Math.Min(System.Int64,System.Int64)\n  commentId: M:System.Math.Min(System.Int64,System.Int64)\n  id: Min(System.Int64,System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Int64, Int64)\n  fullName: System.Math.Min(System.Int64, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 439\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 64-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static long Min(long val1, long val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As Long, val2 As Long) As Long\n    parameters:\n    - id: val1\n      type: System.Int64\n      description: \"\\n<p>The first of two 64-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.Int64\n      description: \"\\n<p>The second of two 64-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Int64, Int64)\n- uid: System.Math.Min(System.SByte,System.SByte)\n  commentId: M:System.Math.Min(System.SByte,System.SByte)\n  id: Min(System.SByte,System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(SByte, SByte)\n  fullName: System.Math.Min(System.SByte, System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 400\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 8-bit signed integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static sbyte Min(sbyte val1, sbyte val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As SByte, val2 As SByte) As SByte\n    parameters:\n    - id: val1\n      type: System.SByte\n      description: \"\\n<p>The first of two 8-bit signed integers to compare. </p>\\n\"\n    - id: val2\n      type: System.SByte\n      description: \"\\n<p>The second of two 8-bit signed integers to compare. </p>\\n\"\n    return:\n      type: System.SByte\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(SByte, SByte)\n- uid: System.Math.Min(System.Single,System.Single)\n  commentId: M:System.Math.Min(System.Single,System.Single)\n  id: Min(System.Single,System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(Single, Single)\n  fullName: System.Math.Min(System.Single, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 452\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two single-precision floating-point numbers.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public static float Min(float val1, float val2)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Shared Function Min(val1 As Single, val2 As Single) As Single\n    parameters:\n    - id: val1\n      type: System.Single\n      description: \"\\n<p>The first of two single-precision floating-point numbers to compare. </p>\\n\"\n    - id: val2\n      type: System.Single\n      description: \"\\n<p>The second of two single-precision floating-point numbers to compare. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is returned.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(Single, Single)\n- uid: System.Math.Min(System.UInt16,System.UInt16)\n  commentId: M:System.Math.Min(System.UInt16,System.UInt16)\n  id: Min(System.UInt16,System.UInt16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(UInt16, UInt16)\n  fullName: System.Math.Min(System.UInt16, System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 419\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 16-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static ushort Min(ushort val1, ushort val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As UShort, val2 As UShort) As UShort\n    parameters:\n    - id: val1\n      type: System.UInt16\n      description: \"\\n<p>The first of two 16-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt16\n      description: \"\\n<p>The second of two 16-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt16\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(UInt16, UInt16)\n- uid: System.Math.Min(System.UInt32,System.UInt32)\n  commentId: M:System.Math.Min(System.UInt32,System.UInt32)\n  id: Min(System.UInt32,System.UInt32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(UInt32, UInt32)\n  fullName: System.Math.Min(System.UInt32, System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 432\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 32-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static uint Min(uint val1, uint val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As UInteger, val2 As UInteger) As UInteger\n    parameters:\n    - id: val1\n      type: System.UInt32\n      description: \"\\n<p>The first of two 32-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt32\n      description: \"\\n<p>The second of two 32-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt32\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(UInt32, UInt32)\n- uid: System.Math.Min(System.UInt64,System.UInt64)\n  commentId: M:System.Math.Min(System.UInt64,System.UInt64)\n  id: Min(System.UInt64,System.UInt64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Min(UInt64, UInt64)\n  fullName: System.Math.Min(System.UInt64, System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Min\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 445\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the smaller of two 64-bit unsigned integers.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static ulong Min(ulong val1, ulong val2)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function Min(val1 As ULong, val2 As ULong) As ULong\n    parameters:\n    - id: val1\n      type: System.UInt64\n      description: \"\\n<p>The first of two 64-bit unsigned integers to compare. </p>\\n\"\n    - id: val2\n      type: System.UInt64\n      description: \"\\n<p>The second of two 64-bit unsigned integers to compare. </p>\\n\"\n    return:\n      type: System.UInt64\n      description: \"\\n<p>Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Min(UInt64, UInt64)\n- uid: System.Math.Pow(System.Double,System.Double)\n  commentId: M:System.Math.Pow(System.Double,System.Double)\n  id: Pow(System.Double,System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Pow(Double, Double)\n  fullName: System.Math.Pow(System.Double, System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a specified number raised to the specified power.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Pow(double x, double y)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Pow(x As Double, y As Double) As Double\n    parameters:\n    - id: x\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to be raised to a power. </p>\\n\"\n    - id: y\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that specifies a power. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The number <em>x</em> raised to the power <em>y</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Sqrt(System.Double)\n    commentId: M:System.Math.Sqrt(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Pow(Double, Double)\n- uid: System.Math.Round(System.Decimal)\n  commentId: M:System.Math.Round(System.Decimal)\n  id: Round(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Decimal)\n  fullName: System.Math.Round(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 139\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a decimal value to the nearest integral value.</p>\\n\"\n  syntax:\n    content: public static decimal Round(decimal d)\n    content.vb: Public Shared Function Round(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number to be rounded. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The integer nearest parameter <em>d</em>. If the fractional component of <em>d</em> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead of an integral type.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The result is outside the range of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal)\n    commentId: M:System.Decimal.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Decimal)\n- uid: System.Math.Round(System.Decimal,System.Int32)\n  commentId: M:System.Math.Round(System.Decimal,System.Int32)\n  id: Round(System.Decimal,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Decimal, Int32)\n  fullName: System.Math.Round(System.Decimal, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 143\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a decimal value to a specified number of fractional digits.</p>\\n\"\n  syntax:\n    content: public static decimal Round(decimal d, int decimals)\n    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number to be rounded. </p>\\n\"\n    - id: decimals\n      type: System.Int32\n      description: \"\\n<p>The number of decimal places in the return value. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>decimals</em> is less than 0 or greater than 28. </p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The result is outside the range of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.Int32)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Decimal, Int32)\n- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  id: Round(System.Decimal,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Decimal, Int32, MidpointRounding)\n  fullName: System.Math.Round(System.Decimal, System.Int32, System.MidpointRounding)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 151\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</p>\\n\"\n  syntax:\n    content: public static decimal Round(decimal d, int decimals, MidpointRounding mode)\n    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number to be rounded. </p>\\n\"\n    - id: decimals\n      type: System.Int32\n      description: \"\\n<p>The number of decimal places in the return value. </p>\\n\"\n    - id: mode\n      type: System.MidpointRounding\n      description: \"\\n<p>Specification for how to round <em>d</em> if it is midway between two other numbers.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>. If <em>d</em> has fewer fractional digits than <em>decimals</em>, <em>d</em> is returned unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>decimals</em> is less than 0 or greater than 28. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mode</em> is not a valid value of <xref href=\\\"System.MidpointRounding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The result is outside the range of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Decimal, Int32, MidpointRounding)\n- uid: System.Math.Round(System.Decimal,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Decimal,System.MidpointRounding)\n  id: Round(System.Decimal,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Decimal, MidpointRounding)\n  fullName: System.Math.Round(System.Decimal, System.MidpointRounding)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 147\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</p>\\n\"\n  syntax:\n    content: public static decimal Round(decimal d, MidpointRounding mode)\n    content.vb: Public Shared Function Round(d As Decimal, mode As MidpointRounding) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A decimal number to be rounded. </p>\\n\"\n    - id: mode\n      type: System.MidpointRounding\n      description: \"\\n<p>Specification for how to round <em>d</em> if it is midway between two other numbers.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The integer nearest <em>d</em>. If <em>d</em> is halfway between two numbers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mode</em> is not a valid value of <xref href=\\\"System.MidpointRounding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>The result is outside the range of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.MidpointRounding)\n    commentId: M:System.Decimal.Round(System.Decimal,System.MidpointRounding)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Decimal, MidpointRounding)\n- uid: System.Math.Round(System.Double)\n  commentId: M:System.Math.Round(System.Double)\n  id: Round(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Double)\n  fullName: System.Math.Round(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a double-precision floating-point value to the nearest integral value.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Round(double a)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Round(a As Double) As Double\n    parameters:\n    - id: a\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to be rounded. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The integer nearest <em>a</em>. If the fractional component of <em>a</em> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instead of an integral type.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal)\n    commentId: M:System.Decimal.Round(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Double)\n- uid: System.Math.Round(System.Double,System.Int32)\n  commentId: M:System.Math.Round(System.Double,System.Int32)\n  id: Round(System.Double,System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Double, Int32)\n  fullName: System.Math.Round(System.Double, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 117\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a double-precision floating-point value to a specified number of fractional digits.</p>\\n\"\n  syntax:\n    content: public static double Round(double value, int digits)\n    content.vb: Public Shared Function Round(value As Double, digits As Integer) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to be rounded. </p>\\n\"\n    - id: digits\n      type: System.Int32\n      description: \"\\n<p>The number of fractional digits in the return value. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The number nearest to <em>value</em> that contains a number of fractional digits equal to <em>digits</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>digits</em> is less than 0 or greater than 15. </p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.Int32)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Double, Int32)\n- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)\n  id: Round(System.Double,System.Int32,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Double, Int32, MidpointRounding)\n  fullName: System.Math.Round(System.Double, System.Int32, System.MidpointRounding)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 129\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.</p>\\n\"\n  syntax:\n    content: public static double Round(double value, int digits, MidpointRounding mode)\n    content.vb: Public Shared Function Round(value As Double, digits As Integer, mode As MidpointRounding) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to be rounded. </p>\\n\"\n    - id: digits\n      type: System.Int32\n      description: \"\\n<p>The number of fractional digits in the return value. </p>\\n\"\n    - id: mode\n      type: System.MidpointRounding\n      description: \"\\n<p>Specification for how to round <em>value</em> if it is midway between two other numbers.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The number nearest to <em>value</em> that has a number of fractional digits equal to <em>digits</em>. If <em>value</em> has fewer fractional digits than <em>digits</em>, <em>value</em> is returned unchanged.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>digits</em> is less than 0 or greater than 15. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mode</em> is not a valid value of <xref href=\\\"System.MidpointRounding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)\n    commentId: M:System.Decimal.Round(System.Decimal,System.Int32,System.MidpointRounding)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Double, Int32, MidpointRounding)\n- uid: System.Math.Round(System.Double,System.MidpointRounding)\n  commentId: M:System.Math.Round(System.Double,System.MidpointRounding)\n  id: Round(System.Double,System.MidpointRounding)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Round(Double, MidpointRounding)\n  fullName: System.Math.Round(System.Double, System.MidpointRounding)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Round\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 125\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.</p>\\n\"\n  syntax:\n    content: public static double Round(double value, MidpointRounding mode)\n    content.vb: Public Shared Function Round(value As Double, mode As MidpointRounding) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number to be rounded. </p>\\n\"\n    - id: mode\n      type: System.MidpointRounding\n      description: \"\\n<p>Specification for how to round <em>value</em> if it is midway between two other numbers.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The integer nearest <em>value</em>. If <em>value</em> is halfway between two integers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>mode</em> is not a valid value of <xref href=\\\"System.MidpointRounding\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  - type: System.Decimal.Round(System.Decimal,System.MidpointRounding)\n    commentId: M:System.Decimal.Round(System.Decimal,System.MidpointRounding)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Round(Double, MidpointRounding)\n- uid: System.Math.Sign(System.Decimal)\n  commentId: M:System.Math.Sign(System.Decimal)\n  id: Sign(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Decimal)\n  fullName: System.Math.Sign(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 569\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a decimal number.</p>\\n\"\n  syntax:\n    content: public static int Sign(decimal value)\n    content.vb: Public Shared Function Sign(value As Decimal) As Integer\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>A signed decimal number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Decimal)\n- uid: System.Math.Sign(System.Double)\n  commentId: M:System.Math.Sign(System.Double)\n  id: Sign(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Double)\n  fullName: System.Math.Sign(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 558\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static int Sign(double value)\n    content.vb: Public Shared Function Sign(value As Double) As Integer\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArithmeticException\n    commentId: T:System.ArithmeticException\n    description: \"\\n<p>\\n<em>value</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Double)\n- uid: System.Math.Sign(System.Int16)\n  commentId: M:System.Math.Sign(System.Int16)\n  id: Sign(System.Int16)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Int16)\n  fullName: System.Math.Sign(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 515\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a 16-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int Sign(short value)\n    content.vb: Public Shared Function Sign(value As Short) As Integer\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Int16)\n- uid: System.Math.Sign(System.Int32)\n  commentId: M:System.Math.Sign(System.Int32)\n  id: Sign(System.Int32)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Int32)\n  fullName: System.Math.Sign(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 527\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int Sign(int value)\n    content.vb: Public Shared Function Sign(value As Integer) As Integer\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Int32)\n- uid: System.Math.Sign(System.Int64)\n  commentId: M:System.Math.Sign(System.Int64)\n  id: Sign(System.Int64)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Int64)\n  fullName: System.Math.Sign(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 537\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: public static int Sign(long value)\n    content.vb: Public Shared Function Sign(value As Long) As Integer\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Int64)\n- uid: System.Math.Sign(System.SByte)\n  commentId: M:System.Math.Sign(System.SByte)\n  id: Sign(System.SByte)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(SByte)\n  fullName: System.Math.Sign(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 501\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of an 8-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static int Sign(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function Sign(value As SByte) As Integer\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(SByte)\n- uid: System.Math.Sign(System.Single)\n  commentId: M:System.Math.Sign(System.Single)\n  id: Sign(System.Single)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sign(Single)\n  fullName: System.Math.Sign(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Sign\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 547\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns an integer that indicates the sign of a single-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static int Sign(float value)\n    content.vb: Public Shared Function Sign(value As Single) As Integer\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>A signed number. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A number that indicates the sign of <em>value</em>, as shown in the following table.</p>\\n<p>Return value </p>\\n<p>Meaning </p>\\n<table><tbody><tr><td>\\n<p>-1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is less than zero. </p>\\n</td></tr><tr><td>\\n<p>0 </p>\\n</td><td>\\n<p>\\n<em>value</em> is equal to zero. </p>\\n</td></tr><tr><td>\\n<p>1 </p>\\n</td><td>\\n<p>\\n<em>value</em> is greater than zero. </p>\\n</td></tr></tbody></table>\\n\"\n  exceptions:\n  - type: System.ArithmeticException\n    commentId: T:System.ArithmeticException\n    description: \"\\n<p>\\n<em>value</em> is equal to <xref href=\\\"System.Single.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sign(Single)\n- uid: System.Math.Sin(System.Double)\n  commentId: M:System.Math.Sin(System.Double)\n  id: Sin(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sin(Double)\n  fullName: System.Math.Sin(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the sine of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Sin(double a)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Sin(a As Double) As Double\n    parameters:\n    - id: a\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The sine of <em>a</em>. If <em>a</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sin(Double)\n- uid: System.Math.Sinh(System.Double)\n  commentId: M:System.Math.Sinh(System.Double)\n  id: Sinh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sinh(Double)\n  fullName: System.Math.Sinh(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the hyperbolic sine of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Sinh(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Sinh(value As Double) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The hyperbolic sine of <em>value</em>. If <em>value</em> is equal to <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> equal to <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sinh(Double)\n- uid: System.Math.Sqrt(System.Double)\n  commentId: M:System.Math.Sqrt(System.Double)\n  id: Sqrt(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Sqrt(Double)\n  fullName: System.Math.Sqrt(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the square root of a specified number.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Sqrt(double d)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Sqrt(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>The number whose square root is to be found. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>One of the values in the following table. </p>\\n<p>\\n<em>d</em> parameter </p>\\n<p>Return value </p>\\n<table><tbody><tr><td>\\n<p>Zero or positive </p>\\n</td><td>\\n<p>The positive square root of <em>d</em>. </p>\\n</td></tr><tr><td>\\n<p>Negative </p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equals <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>Equals <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Math.Pow(System.Double,System.Double)\n    commentId: M:System.Math.Pow(System.Double,System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Sqrt(Double)\n- uid: System.Math.Tan(System.Double)\n  commentId: M:System.Math.Tan(System.Double)\n  id: Tan(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Tan(Double)\n  fullName: System.Math.Tan(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the tangent of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Tan(double a)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Tan(a As Double) As Double\n    parameters:\n    - id: a\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The tangent of <em>a</em>. If <em>a</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Tan(Double)\n- uid: System.Math.Tanh(System.Double)\n  commentId: M:System.Math.Tanh(System.Double)\n  id: Tanh(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Tanh(Double)\n  fullName: System.Math.Tanh(System.Double)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns the hyperbolic tangent of the specified angle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static double Tanh(double value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function Tanh(value As Double) As Double\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>An angle, measured in radians. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The hyperbolic tangent of <em>value</em>. If <em>value</em> is equal to <xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns -1. If value is equal to <xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns 1. If <em>value</em> is equal to <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, this method returns <xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Tanh(Double)\n- uid: System.Math.Truncate(System.Decimal)\n  commentId: M:System.Math.Truncate(System.Decimal)\n  id: Truncate(System.Decimal)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Truncate(Decimal)\n  fullName: System.Math.Truncate(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Truncate\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 159\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Calculates the integral part of a specified decimal number. </p>\\n\"\n  syntax:\n    content: public static decimal Truncate(decimal d)\n    content.vb: Public Shared Function Truncate(d As Decimal) As Decimal\n    parameters:\n    - id: d\n      type: System.Decimal\n      description: \"\\n<p>A number to truncate.</p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The integral part of <em>d</em>; that is, the number that remains after any fractional digits have been discarded.</p>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Ceiling(System.Decimal)\n    commentId: M:System.Math.Ceiling(System.Decimal)\n  - type: System.Math.Floor(System.Decimal)\n    commentId: M:System.Math.Floor(System.Decimal)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Truncate(Decimal)\n- uid: System.Math.Truncate(System.Double)\n  commentId: M:System.Math.Truncate(System.Double)\n  id: Truncate(System.Double)\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: Truncate(Double)\n  fullName: System.Math.Truncate(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Truncate\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 163\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Calculates the integral part of a specified double-precision floating-point number. </p>\\n\"\n  syntax:\n    content: public static double Truncate(double d)\n    content.vb: Public Shared Function Truncate(d As Double) As Double\n    parameters:\n    - id: d\n      type: System.Double\n      description: \"\\n<p>A number to truncate.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The integral part of <em>d</em>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table. </p>\\n<p>\\n<em>d</em>\\n</p>\\n<p>Return value</p>\\n<table><tbody><tr><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NaN\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>\\n<xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.NegativeInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr><tr><td>\\n<p>\\n<xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td><td>\\n<p>\\n<xref href=\\\"System.Double.PositiveInfinity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n</td></tr></tbody></table>\\n\"\n  seealso:\n  - type: System.Math.Round(System.Decimal)\n    commentId: M:System.Math.Round(System.Decimal)\n  - type: System.Math.Ceiling(System.Double)\n    commentId: M:System.Math.Ceiling(System.Double)\n  - type: System.Math.Floor(System.Double)\n    commentId: M:System.Math.Floor(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Math.Truncate(Double)\n- uid: System.Math.PI\n  commentId: F:System.Math.PI\n  id: PI\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: PI\n  fullName: System.Math.PI\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PI\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π.</p>\\n\"\n  syntax:\n    content: public const double PI = 3.1415926535897931\n    content.vb: Public Const PI As Double = 3.1415926535897931\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Math.PI\n- uid: System.Math.E\n  commentId: F:System.Math.E\n  id: E\n  parent: System.Math\n  langs:\n  - csharp\n  - vb\n  name: E\n  fullName: System.Math.E\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Math.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: E\n    path: src/mscorlib/src/System/Math.cs\n    startLine: 35\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Represents the natural logarithmic base, specified by the constant, <strong>e</strong>.</p>\\n\"\n  syntax:\n    content: public const double E = 2.7182818284590451\n    content.vb: Public Const E As Double = 2.7182818284590451\n    return:\n      type: System.Double\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: Math.E\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.MidpointRounding\n  parent: System\n  isExternal: false\n  name: MidpointRounding\n  fullName: System.MidpointRounding\n  nameWithType: MidpointRounding\n  commentId: T:System.MidpointRounding\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArithmeticException\n  parent: System\n  isExternal: false\n  name: ArithmeticException\n  fullName: System.ArithmeticException\n  nameWithType: ArithmeticException\n  commentId: T:System.ArithmeticException\n"}