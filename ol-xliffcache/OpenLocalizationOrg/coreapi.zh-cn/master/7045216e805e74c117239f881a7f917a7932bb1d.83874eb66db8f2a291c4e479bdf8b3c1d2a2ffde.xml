{"nodes":[{"pos":[1008,1021],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[2902,2917],"content":"TaskScheduler()","needQuote":true,"nodes":[{"content":"TaskScheduler()","pos":[0,15]}]},{"pos":[3881,3888],"content":"Current","needQuote":true,"nodes":[{"content":"Current","pos":[0,7]}]},{"pos":[5235,5242],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[6557,6559],"content":"Id","needQuote":true,"nodes":[{"content":"Id","pos":[0,2]}]},{"pos":[7801,7824],"content":"MaximumConcurrencyLevel","needQuote":true,"nodes":[{"content":"MaximumConcurrencyLevel","pos":[0,23]}]},{"pos":[9305,9328],"content":"UnobservedTaskException","needQuote":true,"nodes":[{"content":"UnobservedTaskException","pos":[0,23]}]},{"pos":[10692,10727],"content":"FromCurrentSynchronizationContext()","needQuote":true,"nodes":[{"content":"FromCurrentSynchronizationContext()","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The current SynchronizationContext may not be used as a TaskScheduler.&lt;/p&gt;\\n","pos":[12204,12285],"source":"\\n<p>The current SynchronizationContext may not be used as a TaskScheduler.</p>\\n"},{"pos":[12671,12690],"content":"GetScheduledTasks()","needQuote":true,"nodes":[{"content":"GetScheduledTasks()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.&lt;/p&gt;\\n","pos":[13712,13817],"source":"\\n<p>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</p>\\n"},{"content":"\\n&lt;p&gt;This scheduler is unable to generate a list of queued tasks at this time.&lt;/p&gt;\\n","pos":[13936,14020],"source":"\\n<p>This scheduler is unable to generate a list of queued tasks at this time.</p>\\n"},{"pos":[14609,14624],"content":"QueueTask(Task)","needQuote":true,"nodes":[{"content":"QueueTask(Task)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;task&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[15741,15787],"source":"\\n<p>The <em>task</em> argument is null.</p>\\n"},{"pos":[16375,16391],"content":"TryDequeue(Task)","needQuote":true,"nodes":[{"content":"TryDequeue(Task)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A Boolean denoting whether the &lt;em&gt;task&lt;/em&gt; argument was successfully dequeued.&lt;/p&gt;\\n","pos":[17511,17602],"source":"\\n<p>A Boolean denoting whether the <em>task</em> argument was successfully dequeued.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;task&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[17721,17767],"source":"\\n<p>The <em>task</em> argument is null.</p>\\n"},{"pos":[18366,18386],"content":"TryExecuteTask(Task)","needQuote":true,"nodes":[{"content":"TryExecuteTask(Task)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A Boolean that is true if &lt;em&gt;task&lt;/em&gt; was successfully executed, false if it was not.","pos":[19491,19583],"source":"\\n<p>A Boolean that is true if <em>task</em> was successfully executed, false if it was not."},{"content":"A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.&lt;/p&gt;\\n","pos":[19584,19731],"source":" A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;task&lt;/em&gt; is not associated with this scheduler.&lt;/p&gt;\\n","pos":[19858,19925],"source":"\\n<p>The <em>task</em> is not associated with this scheduler.</p>\\n"},{"pos":[20563,20598],"content":"TryExecuteTaskInline(Task, Boolean)","needQuote":true,"nodes":[{"content":"TryExecuteTaskInline(Task, Boolean)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;A Boolean denoting whether or not task has previously been queued.","pos":[21900,21971],"source":"\\n<p>A Boolean denoting whether or not task has previously been queued."},{"content":"If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.&lt;/p&gt;\\n","pos":[21972,22205],"source":" If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</p>\\n"},{"content":"\\n&lt;p&gt;A Boolean value indicating whether the task was executed inline.&lt;/p&gt;\\n","pos":[22266,22341],"source":"\\n<p>A Boolean value indicating whether the task was executed inline.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;task&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[22460,22506],"source":"\\n<p>The <em>task</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;task&lt;/em&gt; was already executed.&lt;/p&gt;\\n","pos":[22619,22669],"source":"\\n<p>The <em>task</em> was already executed.</p>\\n"},{"pos":[23043,23065],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[23244,23250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23410,23420],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23515,23523],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23592,23593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23620,23621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23691,23699],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23768,23769],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23796,23797],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23980,23994],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24113,24119],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24186,24187],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24237,24243],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24303,24304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24387,24393],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24460,24461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24511,24517],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24577,24578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24792,24814],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[24962,24968],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25035,25036],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25086,25092],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25153,25154]},{"pos":[25209,25215],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25275,25276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25373,25379],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25446,25447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25497,25503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25564,25565]},{"pos":[25620,25626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25686,25687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25932,25963],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26129,26144],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26220,26221],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26271,26277],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26338,26339]},{"pos":[26394,26400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26460,26461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26567,26582],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26658,26659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26709,26715],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26776,26777]},{"pos":[26832,26838],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26898,26899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27129,27142],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27243,27254],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27326,27327],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27354,27355],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27428,27439],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27511,27512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27539,27540],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27715,27724],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27817,27824],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27892,27893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27920,27921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27990,27997],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28065,28066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28093,28094],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28269,28286],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28395,28410],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28486,28487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28514,28515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28592,28607],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28683,28684],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28711,28712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28857,28863],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29033,29046],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[29243,29248],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29469,29515],"content":"EventHandler<UnobservedTaskExceptionEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;UnobservedTaskExceptionEventArgs&gt;","pos":[0,46],"source":"EventHandler<UnobservedTaskExceptionEventArgs>"}]},{"pos":[29817,29829],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[29895,29896],"content":"<","needQuote":true,"nodes":[]},{"pos":[29988,30020],"content":"UnobservedTaskExceptionEventArgs","needQuote":true,"nodes":[{"content":"UnobservedTaskExceptionEventArgs","pos":[0,32]}]},{"pos":[30175,30187],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[30254,30257]},{"pos":[30356,30388],"content":"UnobservedTaskExceptionEventArgs","needQuote":true,"nodes":[{"content":"UnobservedTaskExceptionEventArgs","pos":[0,32]}]},{"pos":[30469,30470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30768,30792],"content":"EventHandler<TEventArgs>","needQuote":true,"nodes":[{"content":"EventHandler&lt;TEventArgs&gt;","pos":[0,24],"source":"EventHandler<TEventArgs>"}]},{"pos":[30982,30994],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[31039,31040],"content":"<","needQuote":true,"nodes":[]},{"pos":[31067,31077],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[31187,31199],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"content":"(Of","pos":[31245,31248]},{"pos":[31282,31292],"content":"TEventArgs","needQuote":true,"nodes":[{"content":"TEventArgs","pos":[0,10]}]},{"pos":[31328,31329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31646,31663],"content":"IEnumerable<Task>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Task&gt;","pos":[0,17],"source":"IEnumerable<Task>"}]},{"pos":[31937,31948],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[32033,32034],"content":"<","needQuote":true,"nodes":[]},{"pos":[32098,32102],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[32248,32259],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[32345,32348]},{"pos":[32419,32423],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[32476,32477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32727,32741],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[32960,32971],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33035,33036],"content":"<","needQuote":true,"nodes":[]},{"pos":[33063,33064],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33184,33195],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[33260,33263]},{"pos":[33297,33298],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[33325,33326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33529,33555],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[33776,33780],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[33952,33959],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[34126,34151],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[34368,34389],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[34577,34598],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Threading.Tasks.TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n  id: TaskScheduler\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.TaskScheduler.#ctor\n  - System.Threading.Tasks.TaskScheduler.Current\n  - System.Threading.Tasks.TaskScheduler.Default\n  - System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext\n  - System.Threading.Tasks.TaskScheduler.GetScheduledTasks\n  - System.Threading.Tasks.TaskScheduler.Id\n  - System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel\n  - System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)\n  - System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)\n  - System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)\n  - System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\n  - System.Threading.Tasks.TaskScheduler.UnobservedTaskException\n  langs:\n  - csharp\n  - vb\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TaskScheduler\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 41\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Represents an object that handles the low-level work of queuing tasks onto threads.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerDisplay(\"Id={Id}\")]\n\n      [DebuggerTypeProxy(typeof (TaskScheduler.SystemThreadingTasks_TaskSchedulerDebugView))]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Unrestricted = true)]\n\n      public abstract class TaskScheduler\n    content.vb: >-\n      <DebuggerDisplay(\"Id={Id}\")>\n\n      <DebuggerTypeProxy(GetType(TaskScheduler.SystemThreadingTasks_TaskSchedulerDebugView))>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Unrestricted:=True)>\n\n      Public MustInherit Class TaskScheduler\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TaskScheduler\n- uid: System.Threading.Tasks.TaskScheduler.#ctor\n  commentId: M:System.Threading.Tasks.TaskScheduler.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: TaskScheduler()\n  fullName: System.Threading.Tasks.TaskScheduler.TaskScheduler()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 302\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes the <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected TaskScheduler()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TaskScheduler.TaskScheduler()\n- uid: System.Threading.Tasks.TaskScheduler.Current\n  commentId: P:System.Threading.Tasks.TaskScheduler.Current\n  id: Current\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: Current\n  fullName: System.Threading.Tasks.TaskScheduler.Current\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Current\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 344\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the currently executing task.</p>\\n\"\n  syntax:\n    content: public static TaskScheduler Current { get; }\n    content.vb: Public Shared ReadOnly Property Current As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>Returns the <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the currently executing task.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TaskScheduler.Current\n- uid: System.Threading.Tasks.TaskScheduler.Default\n  commentId: P:System.Threading.Tasks.TaskScheduler.Default\n  id: Default\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Threading.Tasks.TaskScheduler.Default\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Default\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 329\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that is provided by the .NET Framework.</p>\\n\"\n  syntax:\n    content: public static TaskScheduler Default { get; }\n    content.vb: Public Shared ReadOnly Property Default As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>Returns the default <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: TaskScheduler.Default\n- uid: System.Threading.Tasks.TaskScheduler.Id\n  commentId: P:System.Threading.Tasks.TaskScheduler.Id\n  id: Id\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: Id\n  fullName: System.Threading.Tasks.TaskScheduler.Id\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Id\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 397\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the unique ID for this <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Id { get; }\n    content.vb: Public ReadOnly Property Id As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the unique ID for this <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TaskScheduler.Id\n- uid: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel\n  commentId: P:System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel\n  id: MaximumConcurrencyLevel\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: MaximumConcurrencyLevel\n  fullName: System.Threading.Tasks.TaskScheduler.MaximumConcurrencyLevel\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaximumConcurrencyLevel\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 166\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Indicates the maximum concurrency level this <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is able to support.</p>\\n\"\n  syntax:\n    content: public virtual int MaximumConcurrencyLevel { get; }\n    content.vb: Public Overridable ReadOnly Property MaximumConcurrencyLevel As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns an integer that represents the maximum concurrency level. The default scheduler returns <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: TaskScheduler.MaximumConcurrencyLevel\n- uid: System.Threading.Tasks.TaskScheduler.UnobservedTaskException\n  commentId: E:System.Threading.Tasks.TaskScheduler.UnobservedTaskException\n  id: UnobservedTaskException\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: UnobservedTaskException\n  fullName: System.Threading.Tasks.TaskScheduler.UnobservedTaskException\n  type: Event\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UnobservedTaskException\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 475\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Occurs when a faulted task's unobserved exception is about to trigger exception escalation policy, which, by default, would terminate the process.</p>\\n\"\n  syntax:\n    content: public static event EventHandler<UnobservedTaskExceptionEventArgs> UnobservedTaskException\n    content.vb: Public Shared Event UnobservedTaskException As EventHandler(Of UnobservedTaskExceptionEventArgs)\n    return:\n      type: System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TaskScheduler.UnobservedTaskException\n- uid: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext\n  commentId: M:System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext\n  id: FromCurrentSynchronizationContext\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: FromCurrentSynchronizationContext()\n  fullName: System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromCurrentSynchronizationContext\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 389\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the current <xref href=\\\"System.Threading.SynchronizationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TaskScheduler FromCurrentSynchronizationContext()\n    content.vb: Public Shared Function FromCurrentSynchronizationContext As TaskScheduler\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with the current <xref href=\\\"System.Threading.SynchronizationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, as determined by <xref href=\\\"System.Threading.SynchronizationContext.Current\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current SynchronizationContext may not be used as a TaskScheduler.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: TaskScheduler.FromCurrentSynchronizationContext()\n- uid: System.Threading.Tasks.TaskScheduler.GetScheduledTasks\n  commentId: M:System.Threading.Tasks.TaskScheduler.GetScheduledTasks\n  id: GetScheduledTasks\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: GetScheduledTasks()\n  fullName: System.Threading.Tasks.TaskScheduler.GetScheduledTasks()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetScheduledTasks\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 159\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>For debugger support only, generates an enumerable of <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances currently queued to the scheduler waiting to be executed.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      protected abstract IEnumerable<Task> GetScheduledTasks()\n    content.vb: >-\n      <SecurityCritical>\n\n      Protected MustOverride Function GetScheduledTasks As IEnumerable(Of Task)\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n      description: \"\\n<p>An enumerable that allows a debugger to traverse the tasks currently queued to this scheduler.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This scheduler is unable to generate a list of queued tasks at this time.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: TaskScheduler.GetScheduledTasks()\n- uid: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)\n  commentId: M:System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)\n  id: QueueTask(System.Threading.Tasks.Task)\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: QueueTask(Task)\n  fullName: System.Threading.Tasks.TaskScheduler.QueueTask(System.Threading.Tasks.Task)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: QueueTask\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 72\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Queues a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the scheduler. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      protected abstract void QueueTask(Task task)\n    content.vb: >-\n      <SecurityCritical>\n\n      Protected MustOverride Sub QueueTask(task As Task)\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be queued.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>task</em> argument is null.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: TaskScheduler.QueueTask(Task)\n- uid: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)\n  commentId: M:System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)\n  id: TryDequeue(System.Threading.Tasks.Task)\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: TryDequeue(Task)\n  fullName: System.Threading.Tasks.TaskScheduler.TryDequeue(System.Threading.Tasks.Task)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryDequeue\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 239\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Attempts to dequeue a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that was previously queued to this scheduler.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      protected virtual bool TryDequeue(Task task)\n    content.vb: >-\n      <SecurityCritical>\n\n      Protected Overridable Function TryDequeue(task As Task) As Boolean\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be dequeued.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A Boolean denoting whether the <em>task</em> argument was successfully dequeued.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>task</em> argument is null.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TaskScheduler.TryDequeue(Task)\n- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)\n  commentId: M:System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)\n  id: TryExecuteTask(System.Threading.Tasks.Task)\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: TryExecuteTask(Task)\n  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTask(System.Threading.Tasks.Task)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryExecuteTask\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 446\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Attempts to execute the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> on this scheduler.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      protected bool TryExecuteTask(Task task)\n    content.vb: >-\n      <SecurityCritical>\n\n      Protected Function TryExecuteTask(task As Task) As Boolean\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to be executed.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A Boolean that is true if <em>task</em> was successfully executed, false if it was not. A common reason for execution failure is that the task had previously been executed or is in the process of being executed by another thread.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>task</em> is not associated with this scheduler.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TaskScheduler.TryExecuteTask(Task)\n- uid: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\n  commentId: M:System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\n  id: TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)\n  parent: System.Threading.Tasks.TaskScheduler\n  langs:\n  - csharp\n  - vb\n  name: TryExecuteTaskInline(Task, Boolean)\n  fullName: System.Threading.Tasks.TaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryExecuteTaskInline\n    path: src/mscorlib/src/System/Threading/Tasks/TaskScheduler.cs\n    startLine: 115\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Determines whether the provided <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can be executed synchronously in this call, and if it can, executes it.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      protected abstract bool TryExecuteTaskInline(Task task, bool taskWasPreviouslyQueued)\n    content.vb: >-\n      <SecurityCritical>\n\n      Protected MustOverride Function TryExecuteTaskInline(task As Task, taskWasPreviouslyQueued As Boolean) As Boolean\n    parameters:\n    - id: task\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be executed.</p>\\n\"\n    - id: taskWasPreviouslyQueued\n      type: System.Boolean\n      description: \"\\n<p>A Boolean denoting whether or not task has previously been queued. If this parameter is True, then the task may have been previously queued (scheduled); if False, then the task is known not to have been queued, and this call is being made in order to execute the task inline without queuing it.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value indicating whether the task was executed inline.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>task</em> argument is null.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <em>task</em> was already executed.</p>\\n\"\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - protected\n  - abstract\n  modifiers.vb:\n  - Protected\n  - MustOverride\n  nameWithType: TaskScheduler.TryExecuteTaskInline(Task, Boolean)\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}\n  parent: System\n  definition: System.EventHandler`1\n  name: EventHandler<UnobservedTaskExceptionEventArgs>\n  fullName: System.EventHandler<System.Threading.Tasks.UnobservedTaskExceptionEventArgs>\n  fullname.vb: System.EventHandler(Of System.Threading.Tasks.UnobservedTaskExceptionEventArgs)\n  name.vb: EventHandler(Of UnobservedTaskExceptionEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n    name: UnobservedTaskExceptionEventArgs\n    fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n    name: UnobservedTaskExceptionEventArgs\n    fullName: System.Threading.Tasks.UnobservedTaskExceptionEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<UnobservedTaskExceptionEventArgs>\n  nameWithType.vb: EventHandler(Of UnobservedTaskExceptionEventArgs)\n  commentId: T:System.EventHandler{System.Threading.Tasks.UnobservedTaskExceptionEventArgs}\n- uid: System.EventHandler`1\n  isExternal: false\n  name: EventHandler<TEventArgs>\n  fullName: System.EventHandler<TEventArgs>\n  fullname.vb: System.EventHandler(Of TEventArgs)\n  name.vb: EventHandler(Of TEventArgs)\n  spec.csharp:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: <\n    fullName: <\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.EventHandler`1\n    name: EventHandler\n    fullName: System.EventHandler\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TEventArgs\n    fullName: TEventArgs\n  - name: )\n    fullName: )\n  nameWithType: EventHandler<TEventArgs>\n  nameWithType.vb: EventHandler(Of TEventArgs)\n  commentId: T:System.EventHandler`1\n- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Task>\n  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)\n  name.vb: IEnumerable(Of Task)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<Task>\n  nameWithType.vb: IEnumerable(Of Task)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}