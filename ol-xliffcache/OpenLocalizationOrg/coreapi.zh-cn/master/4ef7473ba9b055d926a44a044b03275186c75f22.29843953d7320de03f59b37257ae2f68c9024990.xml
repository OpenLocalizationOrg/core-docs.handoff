{"nodes":[{"pos":[852,881],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[2886,2895],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[4050,4064],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The other object to which to compare this instance.&lt;/p&gt;\\n","pos":[5034,5096],"source":"\\n<p>The other object to which to compare this instance.</p>\\n"},{"pos":[6130,6167],"content":"Equals(CancellationTokenRegistration)","needQuote":true,"nodes":[{"content":"Equals(CancellationTokenRegistration)","pos":[0,37]}]},{"pos":[8388,8401],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10072,10142],"content":"Equality(CancellationTokenRegistration, CancellationTokenRegistration)","needQuote":true,"nodes":[{"content":"Equality(CancellationTokenRegistration, CancellationTokenRegistration)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The first instance.&lt;/p&gt;\\n","pos":[11226,11256],"source":"\\n<p>The first instance.</p>\\n"},{"content":"\\n&lt;p&gt;The second instance.&lt;/p&gt;\\n","pos":[11353,11384],"source":"\\n<p>The second instance.</p>\\n"},{"content":"\\n&lt;p&gt;True if the instances are equal; otherwise, false.&lt;/p&gt;\\n","pos":[11445,11506],"source":"\\n<p>True if the instances are equal; otherwise, false.</p>\\n"},{"pos":[12246,12318],"content":"Inequality(CancellationTokenRegistration, CancellationTokenRegistration)","needQuote":true,"nodes":[{"content":"Inequality(CancellationTokenRegistration, CancellationTokenRegistration)","pos":[0,72]}]},{"content":"\\n&lt;p&gt;The first instance.&lt;/p&gt;\\n","pos":[13411,13441],"source":"\\n<p>The first instance.</p>\\n"},{"content":"\\n&lt;p&gt;The second instance.&lt;/p&gt;\\n","pos":[13538,13569],"source":"\\n<p>The second instance.</p>\\n"},{"content":"\\n&lt;p&gt;True if the instances are not equal; otherwise, false.&lt;/p&gt;\\n","pos":[13630,13695],"source":"\\n<p>True if the instances are not equal; otherwise, false.</p>\\n"},{"pos":[13960,13976],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[14142,14153],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[14379,14420],"content":"IEquatable<CancellationTokenRegistration>","needQuote":true,"nodes":[{"content":"IEquatable&lt;CancellationTokenRegistration&gt;","pos":[0,41],"source":"IEquatable<CancellationTokenRegistration>"}]},{"pos":[14693,14703],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[14767,14768],"content":"<","needQuote":true,"nodes":[]},{"pos":[14851,14880],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[15024,15034],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[15099,15102]},{"pos":[15192,15221],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[15293,15294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15602,15612],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[15713,15721],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15772,15773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15800,15801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15874,15882],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[15933,15934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15961,15962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16165,16187],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[16335,16341],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16408,16409],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16459,16465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16526,16527]},{"pos":[16582,16588],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16648,16649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16746,16752],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16819,16820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16870,16876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16937,16938]},{"pos":[16993,16999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17059,17060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17305,17336],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17502,17517],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17593,17594],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17644,17650],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17711,17712]},{"pos":[17767,17773],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17833,17834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17940,17955],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[18031,18032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18082,18088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18149,18150]},{"pos":[18205,18211],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18271,18272],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18498,18507],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18600,18607],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18675,18676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18703,18704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18773,18780],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18848,18849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18876,18877],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19006,19012],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19132,19145],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[19300,19310],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[19353,19354],"content":"<","needQuote":true,"nodes":[]},{"pos":[19381,19382],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19481,19491],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[19535,19538]},{"pos":[19572,19573],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[19600,19601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19788,19797],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[19951,19957],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20127,20136],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[20239,20246],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20298,20299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20326,20327],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20401,20408],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[20460,20461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20488,20489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20686,20700],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[20825,20831],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20880,20881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20931,20937],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20997,20998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21084,21090],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21139,21140],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21190,21196],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21256,21257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21436,21443],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[21782,21819],"content":"Equals(CancellationTokenRegistration)","needQuote":true,"nodes":[{"content":"Equals(CancellationTokenRegistration)","pos":[0,37]}]},{"pos":[22157,22163],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22282,22283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22366,22395],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[22467,22468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22546,22552],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22674,22675],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22758,22787],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[22859,22860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23320,23349],"content":"CancellationTokenRegistration","needQuote":true,"nodes":[{"content":"CancellationTokenRegistration","pos":[0,29]}]},{"pos":[23583,23592],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[23750,23756],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23809,23810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23837,23838],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[23865,23866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23944,23950],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24006,24007],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24034,24035],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[24062,24063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24303,24316],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[24423,24434],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24488,24489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24516,24517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24593,24604],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[24658,24659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24686,24687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24853,24858],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]}],"content":"items:\n- uid: System.Threading.CancellationTokenRegistration\n  commentId: T:System.Threading.CancellationTokenRegistration\n  id: CancellationTokenRegistration\n  parent: System.Threading\n  children:\n  - System.Threading.CancellationTokenRegistration.Dispose\n  - System.Threading.CancellationTokenRegistration.Equals(System.Object)\n  - System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)\n  - System.Threading.CancellationTokenRegistration.GetHashCode\n  - System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  - System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  langs:\n  - csharp\n  - vb\n  name: CancellationTokenRegistration\n  fullName: System.Threading.CancellationTokenRegistration\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancellationTokenRegistration\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 19\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Represents a callback delegate that has been registered with a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public struct CancellationTokenRegistration : IEquatable<CancellationTokenRegistration>, IDisposable\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Structure CancellationTokenRegistration\n          Implements IEquatable(Of CancellationTokenRegistration), IDisposable\n  implements:\n  - System.IDisposable\n  - System.IEquatable{System.Threading.CancellationTokenRegistration}\n  inheritedMembers:\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: CancellationTokenRegistration\n- uid: System.Threading.CancellationTokenRegistration.Dispose\n  commentId: M:System.Threading.CancellationTokenRegistration.Dispose\n  id: Dispose\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.CancellationTokenRegistration.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 61\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenRegistration.Dispose()\n- uid: System.Threading.CancellationTokenRegistration.Equals(System.Object)\n  commentId: M:System.Threading.CancellationTokenRegistration.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Threading.CancellationTokenRegistration.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 126\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is equal to the specified <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The other object to which to compare this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True, if both this and <em>obj</em> are equal. False, otherwise.</p>\\n<p>Two <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal if they both refer to the output of a single call to the same Register method of a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CancellationTokenRegistration.Equals(Object)\n- uid: System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)\n  commentId: M:System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)\n  id: Equals(System.Threading.CancellationTokenRegistration)\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: Equals(CancellationTokenRegistration)\n  fullName: System.Threading.CancellationTokenRegistration.Equals(System.Threading.CancellationTokenRegistration)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 141\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether the current <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is equal to the specified <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Equals(CancellationTokenRegistration other)\n    content.vb: Public Function Equals(other As CancellationTokenRegistration) As Boolean\n    parameters:\n    - id: other\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The other <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to compare this instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True, if both this and <em>other</em> are equal. False, otherwise.</p>\\n<p> Two <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal if they both refer to the output of a single call to the same Register method of a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.IEquatable{System.Threading.CancellationTokenRegistration}.Equals(System.Threading.CancellationTokenRegistration)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenRegistration.Equals(CancellationTokenRegistration)\n- uid: System.Threading.CancellationTokenRegistration.GetHashCode\n  commentId: M:System.Threading.CancellationTokenRegistration.GetHashCode\n  id: GetHashCode\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Threading.CancellationTokenRegistration.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 152\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Serves as a hash function for a <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: CancellationTokenRegistration.GetHashCode()\n- uid: System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  commentId: M:System.Threading.CancellationTokenRegistration.op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  id: op_Equality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: Equality(CancellationTokenRegistration, CancellationTokenRegistration)\n  fullName: System.Threading.CancellationTokenRegistration.Equality(System.Threading.CancellationTokenRegistration, System.Threading.CancellationTokenRegistration)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 100\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(CancellationTokenRegistration left, CancellationTokenRegistration right)\n    content.vb: Public Shared Operator =(left As CancellationTokenRegistration, right As CancellationTokenRegistration) As Boolean\n    parameters:\n    - id: left\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The first instance.</p>\\n\"\n    - id: right\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The second instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the instances are equal; otherwise, false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CancellationTokenRegistration.Equality(CancellationTokenRegistration, CancellationTokenRegistration)\n- uid: System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  commentId: M:System.Threading.CancellationTokenRegistration.op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  id: op_Inequality(System.Threading.CancellationTokenRegistration,System.Threading.CancellationTokenRegistration)\n  parent: System.Threading.CancellationTokenRegistration\n  langs:\n  - csharp\n  - vb\n  name: Inequality(CancellationTokenRegistration, CancellationTokenRegistration)\n  fullName: System.Threading.CancellationTokenRegistration.Inequality(System.Threading.CancellationTokenRegistration, System.Threading.CancellationTokenRegistration)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/Threading/CancellationTokenRegistration.cs\n    startLine: 111\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Determines whether two <xref href=\\\"System.Threading.CancellationTokenRegistration\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(CancellationTokenRegistration left, CancellationTokenRegistration right)\n    content.vb: Public Shared Operator <>(left As CancellationTokenRegistration, right As CancellationTokenRegistration) As Boolean\n    parameters:\n    - id: left\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The first instance.</p>\\n\"\n    - id: right\n      type: System.Threading.CancellationTokenRegistration\n      description: \"\\n<p>The second instance.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>True if the instances are not equal; otherwise, false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CancellationTokenRegistration.Inequality(CancellationTokenRegistration, CancellationTokenRegistration)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.IEquatable{System.Threading.CancellationTokenRegistration}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<CancellationTokenRegistration>\n  fullName: System.IEquatable<System.Threading.CancellationTokenRegistration>\n  fullname.vb: System.IEquatable(Of System.Threading.CancellationTokenRegistration)\n  name.vb: IEquatable(Of CancellationTokenRegistration)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.CancellationTokenRegistration\n    name: CancellationTokenRegistration\n    fullName: System.Threading.CancellationTokenRegistration\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.CancellationTokenRegistration\n    name: CancellationTokenRegistration\n    fullName: System.Threading.CancellationTokenRegistration\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<CancellationTokenRegistration>\n  nameWithType.vb: IEquatable(Of CancellationTokenRegistration)\n  commentId: T:System.IEquatable{System.Threading.CancellationTokenRegistration}\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n  commentId: T:System.IEquatable`1\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.IEquatable{System.Threading.CancellationTokenRegistration}.Equals(System.Threading.CancellationTokenRegistration)\n  parent: System.IEquatable{System.Threading.CancellationTokenRegistration}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(CancellationTokenRegistration)\n  fullName: System.IEquatable<System.Threading.CancellationTokenRegistration>.Equals(System.Threading.CancellationTokenRegistration)\n  fullname.vb: System.IEquatable(Of System.Threading.CancellationTokenRegistration).Equals(System.Threading.CancellationTokenRegistration)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Threading.CancellationTokenRegistration>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationTokenRegistration\n    name: CancellationTokenRegistration\n    fullName: System.Threading.CancellationTokenRegistration\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Threading.CancellationTokenRegistration).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.CancellationTokenRegistration\n    name: CancellationTokenRegistration\n    fullName: System.Threading.CancellationTokenRegistration\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<CancellationTokenRegistration>.Equals(CancellationTokenRegistration)\n  nameWithType.vb: IEquatable(Of CancellationTokenRegistration).Equals(CancellationTokenRegistration)\n  commentId: M:System.IEquatable{System.Threading.CancellationTokenRegistration}.Equals(System.Threading.CancellationTokenRegistration)\n- uid: System.Threading.CancellationTokenRegistration\n  parent: System.Threading\n  isExternal: false\n  name: CancellationTokenRegistration\n  fullName: System.Threading.CancellationTokenRegistration\n  nameWithType: CancellationTokenRegistration\n  commentId: T:System.Threading.CancellationTokenRegistration\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n  commentId: M:System.IEquatable`1.Equals(`0)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n"}