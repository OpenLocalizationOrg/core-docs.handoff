{"nodes":[{"pos":[13215,13226],"content":"TaskFactory","needQuote":true,"nodes":[{"content":"TaskFactory","pos":[0,11]}]},{"pos":[14679,14692],"content":"TaskFactory()","needQuote":true,"nodes":[{"content":"TaskFactory()","pos":[0,13]}]},{"pos":[15763,15793],"content":"TaskFactory(CancellationToken)","needQuote":true,"nodes":[{"content":"TaskFactory(CancellationToken)","pos":[0,30]}]},{"pos":[17848,17939],"content":"TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)","pos":[0,91]}]},{"pos":[21848,21905],"content":"TaskFactory(TaskCreationOptions, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"TaskFactory(TaskCreationOptions, TaskContinuationOptions)","pos":[0,57]}]},{"pos":[24597,24623],"content":"TaskFactory(TaskScheduler)","needQuote":true,"nodes":[{"content":"TaskFactory(TaskScheduler)","pos":[0,26]}]},{"pos":[26071,26088],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The default task cancellation token for this task factory.&lt;/p&gt;\\n","pos":[26854,26923],"source":"\\n<p>The default task cancellation token for this task factory.</p>\\n"},{"pos":[27288,27307],"content":"ContinuationOptions","needQuote":true,"nodes":[{"content":"ContinuationOptions","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The default task continuation options for this task factory.&lt;/p&gt;\\n","pos":[28112,28183],"source":"\\n<p>The default task continuation options for this task factory.</p>\\n"},{"pos":[28538,28553],"content":"CreationOptions","needQuote":true,"nodes":[{"content":"CreationOptions","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The default task creation options for this task factory.&lt;/p&gt;\\n","pos":[29326,29393],"source":"\\n<p>The default task creation options for this task factory.</p>\\n"},{"pos":[29726,29735],"content":"Scheduler","needQuote":true,"nodes":[{"content":"Scheduler","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The default task scheduler for this task factory.&lt;/p&gt;\\n","pos":[30459,30519],"source":"\\n<p>The default task scheduler for this task factory.</p>\\n"},{"pos":[31092,31131],"content":"ContinueWhenAll(Task[], Action<Task[]>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Action&lt;Task[]&gt;)","pos":[0,39],"source":"ContinueWhenAll(Task[], Action<Task[]>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[32168,32221],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[32329,32429],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[32503,32540],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[32663,32731],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32836,32985],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[33082,33152],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[34113,34171],"content":"ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Action&lt;Task[]&gt;, CancellationToken)","pos":[0,58],"source":"ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[35321,35374],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[35482,35582],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[35679,35752],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[35826,35863],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36361,36510],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[36607,36677],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[37983,38081],"content":"ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Action&lt;Task[]&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,98],"source":"ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[39463,39516],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[39624,39724],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[39821,39894],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.&lt;/p&gt;\\n","pos":[40005,40119],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The object that is used to schedule the new continuation task.&lt;/p&gt;\\n","pos":[40210,40283],"source":"\\n<p>The object that is used to schedule the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[40357,40394],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[40513,40741],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[40838,40908],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[42204,42268],"content":"ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Action&lt;Task[]&gt;, TaskContinuationOptions)","pos":[0,64],"source":"ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[43446,43499],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[43607,43707],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[43818,43926],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[43927,43976]},{"content":"&lt;/p&gt;\\n","pos":[43977,43983],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[44057,44094],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[44217,44285],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44390,44539],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.","pos":[44656,44730],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[44731,44737],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[44834,44904],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[45898,45953],"content":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TResult&gt;(Task[], Func&lt;Task[], TResult&gt;)","pos":[0,55],"source":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[47066,47119],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[47237,47354],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[47414,47548],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[47633,47670],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[47793,47861],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[47966,48117],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[48214,48284],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[49333,49407],"content":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TResult&gt;(Task[], Func&lt;Task[], TResult&gt;, CancellationToken)","pos":[0,74],"source":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[50633,50686],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[50804,50921],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[51018,51091],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[51151,51285],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[51370,51407],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51905,52056],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[52153,52223],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[53617,53731],"content":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TResult&gt;(Task[], Func&lt;Task[], TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,114],"source":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[55189,55242],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[55360,55477],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[55574,55647],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[55758,55866],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.&lt;/p&gt;\\n","pos":[55867,55922],"source":" The NotOn* and OnlyOn* members are not supported.</p>\\n"},{"content":"\\n&lt;p&gt;The object that is used to schedule the new continuation task.&lt;/p&gt;\\n","pos":[56013,56086],"source":"\\n<p>The object that is used to schedule the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[56146,56280],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[56365,56402],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[56521,56751],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[56848,56918],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[58302,58382],"content":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TResult&gt;(Task[], Func&lt;Task[], TResult&gt;, TaskContinuationOptions)","pos":[0,80],"source":"ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[59636,59689],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[59807,59924],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[60035,60143],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[60144,60193]},{"content":"&lt;/p&gt;\\n","pos":[60194,60200],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[60260,60394],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[60479,60516],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[60639,60707],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60812,60963],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.","pos":[61080,61154],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[61155,61161],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[61258,61328],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[62419,62515],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;[]&gt;)","pos":[0,96],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[63753,63806],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[63935,64035],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[64105,64172],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[64246,64283],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[64406,64474],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64579,64728],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[64825,64895],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[66150,66265],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;[]&gt;, CancellationToken)","pos":[0,115],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[67616,67669],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[67798,67898],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[67995,68068],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[68138,68205],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[68279,68316],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68814,68963],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[69060,69130],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[70730,70885],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;[]&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,155],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[72468,72521],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[72650,72750],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[72847,72920],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[73031,73139],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.&lt;/p&gt;\\n","pos":[73140,73195],"source":" The NotOn* and OnlyOn* members are not supported.</p>\\n"},{"content":"\\n&lt;p&gt;The object that is used to schedule the new continuation task.&lt;/p&gt;\\n","pos":[73286,73359],"source":"\\n<p>The object that is used to schedule the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73429,73496],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[73570,73607],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[73726,73954],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[74051,74121],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[75711,75832],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;[]&gt;, TaskContinuationOptions)","pos":[0,121],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[77211,77264],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[77393,77493],"source":"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[77604,77712],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[77713,77762]},{"content":"&lt;/p&gt;\\n","pos":[77763,77769],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[77839,77906],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[77980,78017],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[78140,78208],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[78313,78462],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.","pos":[78579,78653],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[78654,78660],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[78757,78827],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[80106,80218],"content":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;)","pos":[0,112],"source":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[81529,81582],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[81721,81838],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[81908,81975],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[82015,82149],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[82234,82271],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[82394,82462],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82567,82718],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[82815,82885],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[84210,84341],"content":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, CancellationToken)","pos":[0,131],"source":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[85765,85818],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[85957,86074],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[86171,86244],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[86314,86381],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[86421,86555],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[86640,86677],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[87175,87326],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[87423,87493],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[89163,89334],"content":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,171],"source":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[90990,91043],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[91182,91299],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to assign to the new continuation task.&lt;/p&gt;\\n","pos":[91396,91469],"source":"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[91580,91688],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[91689,91738]},{"content":"&lt;/p&gt;\\n","pos":[91739,91745],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object that is used to schedule the new continuation task.&lt;/p&gt;\\n","pos":[91836,91909],"source":"\\n<p>The object that is used to schedule the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[91979,92046],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[92086,92220],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[92305,92342],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[92461,92691],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[92788,92858],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.","pos":[92975,93049],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value."},{"content":"&lt;/p&gt;\\n","pos":[93050,93056],"source":" </p>\\n"},{"pos":[95095,95232],"content":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, TaskContinuationOptions)","pos":[0,137],"source":"ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[96684,96737],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[96876,96993],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values that control the behavior of the new continuation task.","pos":[97104,97212],"source":"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task."},{"content":"The NotOn* and OnlyOn* members are not supported.","pos":[97213,97262]},{"content":"&lt;/p&gt;\\n","pos":[97263,97269],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97339,97406],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result that is returned by the &lt;em&gt;continuationFunction&lt;/em&gt; delegate and associated with the created task.&lt;/p&gt;\\n","pos":[97446,97580],"source":"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[97665,97702],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;An element in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[97825,97893],"source":"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[97998,98149],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[98266,98346],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty or contains a null value.&lt;/p&gt;\\n","pos":[98443,98513],"source":"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n"},{"pos":[99805,99842],"content":"ContinueWhenAny(Task[], Action<Task>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Action&lt;Task&gt;)","pos":[0,37],"source":"ContinueWhenAny(Task[], Action<Task>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[100973,101050],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[101156,101250],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.","pos":[101567,101638],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed."},{"content":"&lt;/p&gt;\\n","pos":[101639,101645],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[101750,101805],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[101806,101894],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[101895,101901],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a &lt;strong&gt;null&lt;/strong&gt; value.","pos":[101998,102067],"source":"\\n<p>The <em>tasks</em> array contains a <strong>null</strong> value."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[102068,102130],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[103077,103133],"content":"ContinueWhenAny(Task[], Action<Task>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Action&lt;Task&gt;, CancellationToken)","pos":[0,56],"source":"ContinueWhenAny(Task[], Action<Task>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[104377,104454],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[104560,104654],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.","pos":[105229,105300],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.","pos":[105301,105378],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>cancellationToken</em> has already been disposed."},{"content":"&lt;/p&gt;\\n","pos":[105379,105385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[105490,105545],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationAction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[105546,105634],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[105635,105641],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a &lt;strong&gt;null&lt;/strong&gt; value.","pos":[105738,105807],"source":"\\n<p>The <em>tasks</em> array contains a <strong>null</strong> value."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty .&lt;/p&gt;\\n","pos":[105808,105871],"source":" </p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty .</p>\\n"},{"pos":[107163,107259],"content":"ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Action&lt;Task&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,96],"source":"ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[108735,108812],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[108918,109012],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[110306,110585],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[110682,110864],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[112146,112208],"content":"ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Action&lt;Task&gt;, TaskContinuationOptions)","pos":[0,62],"source":"ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[113480,113557],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[113663,113757],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[114456,114567],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[114672,114855],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid TaskContinuationOptions value.&lt;/p&gt;\\n","pos":[114972,115110],"source":"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[115207,115389],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[116369,116422],"content":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TResult&gt;(Task[], Func&lt;Task, TResult&gt;)","pos":[0,53],"source":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[117631,117708],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[117824,117935],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[118544,118655],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[118760,118945],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[119042,119224],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[120259,120331],"content":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TResult&gt;(Task[], Func&lt;Task, TResult&gt;, CancellationToken)","pos":[0,72],"source":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[121653,121730],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[121846,121957],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[123205,123390],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[123487,123669],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[125049,125161],"content":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TResult&gt;(Task[], Func&lt;Task, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,112],"source":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[126715,126792],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[126908,127019],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[128609,128890],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[128987,129169],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[130539,130617],"content":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TResult&gt;(Task[], Func&lt;Task, TResult&gt;, TaskContinuationOptions)","pos":[0,78],"source":"ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[131967,132044],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[132160,132271],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[133264,133375],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[133480,133665],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid TaskContinuationOptions value.&lt;/p&gt;\\n","pos":[133782,133920],"source":"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[134017,134199],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[135276,135370],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;&gt;)","pos":[0,94],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[136702,136779],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[136906,137000],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[137070,137137],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[137454,137565],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[137670,137853],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[137950,138132],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[139373,139486],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;&gt;, CancellationToken)","pos":[0,113],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[140931,141008],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[141135,141229],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[141557,141624],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[142322,142505],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[142602,142784],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[144370,144523],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,153],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[146200,146277],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[146404,146498],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[147551,147618],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[147931,148210],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[148307,148489],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[150065,150184],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Action&lt;Task&lt;TAntecedentResult&gt;&gt;, TaskContinuationOptions)","pos":[0,119],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[151657,151734],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate to execute when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[151861,151955],"source":"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[152407,152474],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[152791,152902],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationAction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[153007,153190],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid TaskContinuationOptions value.&lt;/p&gt;\\n","pos":[153307,153445],"source":"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[153542,153724],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[154989,155099],"content":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;)","pos":[0,110],"source":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[156506,156583],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[156720,156831],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[156901,156968],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[157557,157668],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[157773,157958],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[158055,158237],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[159548,159677],"content":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, CancellationToken)","pos":[0,129],"source":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[161197,161274],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[161411,161522],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[161850,161917],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[162887,163072],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[163169,163351],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[165007,165176],"content":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,169],"source":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[166928,167005],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[167142,167253],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[168308,168375],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[168960,169241],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[169338,169520],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[171166,171301],"content":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult, TResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, TaskContinuationOptions)","pos":[0,135],"source":"ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[172849,172926],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[173063,173174],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[173628,173695],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when one of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[174284,174395],"source":"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[174500,174685],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid TaskContinuationOptions value.&lt;/p&gt;\\n","pos":[174802,174940],"source":"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[175037,175219],"source":"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n"},{"pos":[176617,176699],"content":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)","needQuote":true,"nodes":[{"content":"FromAsync(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, Object)","pos":[0,82],"source":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[177913,177976],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[178065,178126],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[178190,178275],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[178622,178805],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[180075,180178],"content":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, Object, TaskCreationOptions)","pos":[0,103],"source":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[181513,181576],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[181665,181726],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[181790,181875],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[182496,182679],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;creationOptions&lt;/em&gt; argument specifies an invalid TaskCreationOptions value.&lt;/p&gt;\\n","pos":[182796,182926],"source":"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n"},{"pos":[183988,184033],"content":"FromAsync(IAsyncResult, Action<IAsyncResult>)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Action&lt;IAsyncResult&gt;)","pos":[0,45],"source":"FromAsync(IAsyncResult, Action<IAsyncResult>)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[185195,185296],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[185385,185466],"source":"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[185803,185986],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[186885,186951],"content":"FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Action&lt;IAsyncResult&gt;, TaskCreationOptions)","pos":[0,66],"source":"FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[188234,188335],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[188424,188505],"source":"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[189116,189299],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[190971,191052],"content":"FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Action&lt;IAsyncResult&gt;, TaskCreationOptions, TaskScheduler)","pos":[0,81],"source":"FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[192426,192527],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The action delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[192616,192697],"source":"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[193584,193863],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[195717,195820],"content":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, Object)","pos":[0,103],"source":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[197122,197185],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[197274,197335],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[197394,197468],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[197532,197617],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[197675,197761],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[198108,198291],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[199687,199811],"content":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, Object, TaskCreationOptions)","pos":[0,124],"source":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[201234,201297],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[201386,201447],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[201506,201580],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[201644,201729],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[202061,202147],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[202494,202677],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[204708,204806],"content":"FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TResult&gt;(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, Object)","pos":[0,98],"source":"FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[206095,206158],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[206255,206316],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[206380,206465],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[207040,207223],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[208581,208700],"content":"FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TResult&gt;(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, Object, TaskCreationOptions)","pos":[0,119],"source":"FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[210110,210173],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[210270,210331],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[210395,210480],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[211331,211514],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[213339,213400],"content":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TResult&gt;(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;)","pos":[0,61],"source":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[214639,214740],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[214837,214920],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[215485,215668],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[216655,216737],"content":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TResult&gt;(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;, TaskCreationOptions)","pos":[0,82],"source":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[218097,218198],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[218295,218378],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[219219,219402],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[221282,221379],"content":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TResult&gt;(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;, TaskCreationOptions, TaskScheduler)","pos":[0,97],"source":"FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The IAsyncResult whose completion should trigger the processing of the &lt;em&gt;endMethod&lt;/em&gt;.&lt;/p&gt;\\n","pos":[222830,222931],"source":"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[223028,223111],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;asyncResult&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[224218,224497],"source":"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[226448,226572],"content":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, TArg2, Object)","pos":[0,124],"source":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[227958,228021],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[228110,228171],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[228230,228304],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[228363,228438],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[228502,228587],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[228645,228728],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[228766,228852],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[229199,229382],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[230886,231031],"content":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, TArg2, Object, TaskCreationOptions)","pos":[0,145],"source":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[232538,232601],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[232690,232751],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[232810,232884],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[232943,233018],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[233082,233167],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[233499,233582],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[233620,233706],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[234053,234236],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[236375,236494],"content":"FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TResult&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, Object)","pos":[0,119],"source":"FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[237867,237930],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[238027,238088],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[238147,238221],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[238285,238370],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[238428,238514],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[239069,239252],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[240718,240858],"content":"FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TResult&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, Object, TaskCreationOptions)","pos":[0,140],"source":"FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[242352,242415],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[242512,242573],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[242632,242706],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[242770,242855],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[243189,243275],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[243830,244013],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[246174,246319],"content":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, TArg2, TArg3, Object)","pos":[0,145],"source":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[247789,247852],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[247941,248002],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248061,248135],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248194,248269],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248328,248402],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248466,248551],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248609,248692],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248730,248812],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[248850,248936],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[249283,249466],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[251078,251244],"content":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Action&lt;IAsyncResult&gt;, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","pos":[0,166],"source":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[252835,252898],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[252987,253048],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[253107,253181],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[253240,253315],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[253374,253448],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[253512,253597],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[253929,254012],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[254050,254132],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[254170,254256],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[254603,254786],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[257033,257173],"content":"FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TResult&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, Object)","pos":[0,140],"source":"FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[258630,258693],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[258790,258851],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[258910,258984],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[259043,259118],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[259182,259267],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[259325,259408],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[259446,259532],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[260087,260270],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[261844,262005],"content":"FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TResult&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, Object, TaskCreationOptions)","pos":[0,161],"source":"FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[263583,263646],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[263743,263804],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[263863,263937],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[263996,264071],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[264135,264220],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[264554,264637],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[264675,264761],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[265316,265499],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[267750,267911],"content":"FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, TArg3, Object)","pos":[0,161],"source":"FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[269452,269515],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[269612,269673],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[269732,269806],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[269865,269940],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[269999,270073],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[270137,270222],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[270280,270363],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[270401,270483],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[270521,270607],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[271162,271345],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[273027,273209],"content":"FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3, TResult&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","pos":[0,182],"source":"FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[274871,274934],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[275031,275092],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[275151,275225],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[275284,275359],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[275418,275492],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[275556,275641],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[275975,276058],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[276096,276178],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[276216,276302],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;beginMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;endMethod&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[276857,277040],"source":"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n"},{"pos":[278976,278992],"content":"StartNew(Action)","needQuote":true,"nodes":[{"content":"StartNew(Action)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[279791,279848],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[279922,279950],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[280069,280117],"source":"\\n<p>The <em>action</em> argument is null.</p>\\n"},{"pos":[280577,280612],"content":"StartNew(Action, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew(Action, CancellationToken)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[281607,281664],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[282485,282567],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n"},{"pos":[283286,283357],"content":"StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,71]}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[284564,284621],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[286132,286310],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[287524,287561],"content":"StartNew(Action, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew(Action, TaskCreationOptions)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[288564,288621],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[289196,289278],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;creationOptions&lt;/em&gt; argument specifies an invalid TaskCreationOptions value.&lt;/p&gt;\\n","pos":[289395,289525],"source":"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n"},{"pos":[289988,290020],"content":"StartNew(Action<Object>, Object)","needQuote":true,"nodes":[{"content":"StartNew(Action&lt;Object&gt;, Object)","pos":[0,32],"source":"StartNew(Action<Object>, Object)"}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.","pos":[290998,291049],"source":"\\n<p>The action delegate to execute asynchronously."},{"content":"&lt;/p&gt;\\n","pos":[291050,291056],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;action&lt;/em&gt; delegate.","pos":[291120,291194],"source":"\\n<p>An object containing data to be used by the <em>action</em> delegate."},{"content":"&lt;/p&gt;\\n","pos":[291195,291201],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;action&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.","pos":[291506,291565],"source":"\\n<p>The <em>action</em> argument is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[291566,291572],"source":" </p>\\n"},{"pos":[292356,292407],"content":"StartNew(Action<Object>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew(Action&lt;Object&gt;, Object, CancellationToken)","pos":[0,51],"source":"StartNew(Action<Object>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[293497,293554],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;action&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[293618,293698],"source":"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[294610,294692],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n"},{"pos":[295809,295896],"content":"StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew(Action&lt;Object&gt;, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,87],"source":"StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[297198,297255],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;action&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[297319,297399],"source":"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[298828,299006],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[300772,300825],"content":"StartNew(Action<Object>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew(Action&lt;Object&gt;, Object, TaskCreationOptions)","pos":[0,53],"source":"StartNew(Action<Object>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The action delegate to execute asynchronously.&lt;/p&gt;\\n","pos":[301923,301980],"source":"\\n<p>The action delegate to execute asynchronously.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;action&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[302044,302124],"source":"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;action&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[302699,302781],"source":"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;creationOptions&lt;/em&gt; argument specifies an invalid TaskCreationOptions value.&lt;/p&gt;\\n","pos":[302898,303028],"source":"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n"},{"pos":[303745,303777],"content":"StartNew<TResult>(Func<TResult>)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;TResult&gt;)","pos":[0,32],"source":"StartNew<TResult>(Func<TResult>)"}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[305455,305522],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[306232,306283],"content":"StartNew<TResult>(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;TResult&gt;, CancellationToken)","pos":[0,51],"source":"StartNew<TResult>(Func<TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[308691,308775],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n"},{"pos":[309818,309905],"content":"StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;TResult&gt;, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,87],"source":"StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[313046,313226],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[314918,314971],"content":"StartNew<TResult>(Func<TResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;TResult&gt;, TaskCreationOptions)","pos":[0,53],"source":"StartNew<TResult>(Func<TResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[317052,317136],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n"},{"pos":[318607,318655],"content":"StartNew<TResult>(Func<Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;Object, TResult&gt;, Object)","pos":[0,48],"source":"StartNew<TResult>(Func<Object, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[319964,320046],"source":"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[320578,320662],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n"},{"pos":[321534,321601],"content":"StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;Object, TResult&gt;, Object, CancellationToken)","pos":[0,67],"source":"StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[323023,323105],"source":"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[324245,324329],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n"},{"pos":[325534,325637],"content":"StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;Object, TResult&gt;, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,103],"source":"StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[327271,327353],"source":"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[329015,329195],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n"},{"pos":[331049,331118],"content":"StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew&lt;TResult&gt;(Func&lt;Object, TResult&gt;, Object, TaskCreationOptions)","pos":[0,69],"source":"StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[332548,332630],"source":"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The exception that is thrown when the &lt;em&gt;function&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[333436,333520],"source":"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n"},{"pos":[334787,334809],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[334988,334994],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[335154,335164],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[335259,335267],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[335336,335337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[335364,335365],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[335435,335443],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[335512,335513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[335540,335541],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[335724,335738],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[335857,335863],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[335930,335931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[335981,335987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[336047,336048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[336131,336137],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[336204,336205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[336255,336261],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[336321,336322],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[336536,336558],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[336706,336712],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[336779,336780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[336830,336836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[336897,336898]},{"pos":[336953,336959],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[337019,337020],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[337117,337123],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[337190,337191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[337241,337247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[337308,337309]},{"pos":[337364,337370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[337430,337431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[337676,337707],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[337873,337888],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[337964,337965],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[338015,338021],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[338082,338083]},{"pos":[338138,338144],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[338204,338205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[338311,338326],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[338402,338403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[338453,338459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[338520,338521]},{"pos":[338576,338582],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[338642,338643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[338873,338886],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[338987,338998],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[339070,339071],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[339098,339099],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[339172,339183],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[339255,339256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[339283,339284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[339459,339468],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[339561,339568],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[339636,339637],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[339664,339665],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[339734,339741],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[339809,339810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[339837,339838],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[340013,340030],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[340139,340154],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[340230,340231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[340258,340259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[340336,340351],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[340427,340428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[340455,340456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[340601,340607],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[340769,340786],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[340970,340986],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[341192,341211],"content":"TaskCreationOptions","needQuote":true,"nodes":[{"content":"TaskCreationOptions","pos":[0,19]}]},{"pos":[341476,341499],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[341766,341779],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[341956,341962],"content":"Task[]","needQuote":true,"nodes":[{"content":"Task[]","pos":[0,6]}]},{"pos":[342130,342134],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[342188,342190]},{"pos":[342269,342273],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[342326,342328],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[342502,342516],"content":"Action<Task[]>","needQuote":true,"nodes":[{"content":"Action&lt;Task[]&gt;","pos":[0,14],"source":"Action<Task[]>"}]},{"pos":[342716,342722],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[342782,342783],"content":"<","needQuote":true,"nodes":[]},{"pos":[342847,342851],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[342905,342907]},{"pos":[343006,343012],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[343073,343076]},{"pos":[343147,343151],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[343204,343206],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[343234,343235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[343476,343480],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[343636,343645],"content":"Action<T>","needQuote":true,"nodes":[{"content":"Action&lt;T&gt;","pos":[0,9],"source":"Action<T>"}]},{"pos":[343784,343790],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[343829,343830],"content":"<","needQuote":true,"nodes":[]},{"pos":[343857,343858],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[343953,343959],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[343999,344002]},{"pos":[344036,344037],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[344064,344065],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[344284,344305],"content":"Func<Task[], TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task[], TResult&gt;","pos":[0,21],"source":"Func<Task[], TResult>"}]},{"pos":[344524,344528],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[344586,344587],"content":"<","needQuote":true,"nodes":[]},{"pos":[344651,344655],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[344709,344711]},{"content":",","pos":[344743,344744]},{"pos":[344776,344783],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[344882,344886],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[344945,344948]},{"pos":[345019,345023],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[345076,345078],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[345107,345108]},{"pos":[345140,345147],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[345180,345181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[345473,345486],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[345683,345687],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[345740,345741],"content":"<","needQuote":true,"nodes":[]},{"pos":[345768,345775],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[345890,345894],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[345948,345951]},{"pos":[345985,345992],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[346025,346026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[346205,346221],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[346379,346383],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[346420,346421],"content":"<","needQuote":true,"nodes":[]},{"pos":[346448,346449],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[346477,346478]},{"pos":[346510,346517],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[346616,346620],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[346658,346661]},{"pos":[346695,346696],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[346724,346725]},{"pos":[346757,346764],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[346797,346798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[346981,346994],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[347191,347195],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[347248,347249],"content":"<","needQuote":true,"nodes":[]},{"pos":[347276,347283],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[347398,347402],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[347456,347459]},{"pos":[347493,347500],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[347533,347534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[347728,347753],"content":"Task<TAntecedentResult>[]","needQuote":true,"nodes":[{"content":"Task&lt;TAntecedentResult&gt;[]","pos":[0,25],"source":"Task<TAntecedentResult>[]"}]},{"pos":[347986,347990],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[348043,348044],"content":"<","needQuote":true,"nodes":[]},{"pos":[348071,348088],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":"[]","pos":[348164,348166]},{"pos":[348247,348251],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[348305,348308]},{"pos":[348342,348359],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[348402,348403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[348430,348432],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[348668,348701],"content":"Action<Task<TAntecedentResult>[]>","needQuote":true,"nodes":[{"content":"Action&lt;Task&lt;TAntecedentResult&gt;[]&gt;","pos":[0,33],"source":"Action<Task<TAntecedentResult>[]>"}]},{"pos":[348964,348970],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[349030,349031],"content":"<","needQuote":true,"nodes":[]},{"pos":[349097,349101],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[349154,349155],"content":"<","needQuote":true,"nodes":[]},{"pos":[349182,349199],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":"[]","pos":[349275,349277]},{"pos":[349376,349382],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[349443,349446]},{"pos":[349519,349523],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[349577,349580]},{"pos":[349614,349631],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[349674,349675],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[349702,349704],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[349732,349733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[350058,350098],"content":"Func<Task<TAntecedentResult>[], TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;","pos":[0,40],"source":"Func<Task<TAntecedentResult>[], TResult>"}]},{"pos":[350380,350384],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[350442,350443],"content":"<","needQuote":true,"nodes":[]},{"pos":[350509,350513],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[350566,350567],"content":"<","needQuote":true,"nodes":[]},{"pos":[350594,350611],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":"[]","pos":[350687,350689]},{"content":",","pos":[350721,350722]},{"pos":[350754,350761],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[350860,350864],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[350923,350926]},{"pos":[350999,351003],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[351057,351060]},{"pos":[351094,351111],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[351154,351155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[351182,351184],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[351213,351214]},{"pos":[351246,351253],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[351286,351287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[351599,351611],"content":"Action<Task>","needQuote":true,"nodes":[{"content":"Action&lt;Task&gt;","pos":[0,12],"source":"Action<Task>"}]},{"pos":[351805,351811],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[351871,351872],"content":"<","needQuote":true,"nodes":[]},{"pos":[351936,351940],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[352061,352067],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[352128,352131]},{"pos":[352202,352206],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[352259,352260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[352510,352529],"content":"Func<Task, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task, TResult&gt;","pos":[0,19],"source":"Func<Task, TResult>"}]},{"pos":[352742,352746],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[352804,352805],"content":"<","needQuote":true,"nodes":[]},{"pos":[352869,352873],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[352927,352928]},{"pos":[352960,352967],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[353066,353070],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[353129,353132]},{"pos":[353203,353207],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[353261,353262]},{"pos":[353294,353301],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[353334,353335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[353616,353647],"content":"Action<Task<TAntecedentResult>>","needQuote":true,"nodes":[{"content":"Action&lt;Task&lt;TAntecedentResult&gt;&gt;","pos":[0,31],"source":"Action<Task<TAntecedentResult>>"}]},{"pos":[353904,353910],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[353970,353971],"content":"<","needQuote":true,"nodes":[]},{"pos":[354037,354041],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[354094,354095],"content":"<","needQuote":true,"nodes":[]},{"pos":[354122,354139],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[354282,354288],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[354349,354352]},{"pos":[354425,354429],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[354483,354486]},{"pos":[354520,354537],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[354580,354581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[354608,354609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[354926,354964],"content":"Func<Task<TAntecedentResult>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;","pos":[0,38],"source":"Func<Task<TAntecedentResult>, TResult>"}]},{"pos":[355240,355244],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[355302,355303],"content":"<","needQuote":true,"nodes":[]},{"pos":[355369,355373],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[355426,355427],"content":"<","needQuote":true,"nodes":[]},{"pos":[355454,355471],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":",","pos":[355547,355548]},{"pos":[355580,355587],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[355686,355690],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[355749,355752]},{"pos":[355825,355829],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[355883,355886]},{"pos":[355920,355937],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[355980,355981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[356009,356010]},{"pos":[356042,356049],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[356082,356083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[356412,356453],"content":"Func<AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;AsyncCallback, Object, IAsyncResult&gt;","pos":[0,41],"source":"Func<AsyncCallback, Object, IAsyncResult>"}]},{"pos":[356728,356732],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[356790,356791],"content":"<","needQuote":true,"nodes":[]},{"pos":[356848,356861],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[356929,356930]},{"pos":[356985,356991],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[357052,357053]},{"pos":[357114,357126],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[357258,357262],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[357321,357324]},{"pos":[357388,357401],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[357469,357470]},{"pos":[357525,357531],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[357592,357593]},{"pos":[357654,357666],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[357732,357733],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[358052,358072],"content":"Action<IAsyncResult>","needQuote":true,"nodes":[{"content":"Action&lt;IAsyncResult&gt;","pos":[0,20],"source":"Action<IAsyncResult>"}]},{"pos":[358258,358264],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[358324,358325],"content":"<","needQuote":true,"nodes":[]},{"pos":[358381,358393],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[358527,358533],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[358594,358597]},{"pos":[358660,358672],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[358738,358739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[358935,358956],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[359129,359133],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[359170,359171],"content":"<","needQuote":true,"nodes":[]},{"pos":[359198,359200],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[359229,359230]},{"pos":[359262,359264],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[359293,359294]},{"pos":[359326,359333],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[359432,359436],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[359474,359477]},{"pos":[359511,359513],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[359542,359543]},{"pos":[359575,359577],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[359606,359607]},{"pos":[359639,359646],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[359679,359680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[359880,359892],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[360125,360173],"content":"Func<TArg1, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,48],"source":"Func<TArg1, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[360469,360473],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[360531,360532],"content":"<","needQuote":true,"nodes":[]},{"pos":[360559,360564],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[360596,360597]},{"pos":[360659,360672],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[360740,360741]},{"pos":[360796,360802],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[360863,360864]},{"pos":[360925,360937],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[361069,361073],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[361132,361135]},{"pos":[361169,361174],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[361206,361207]},{"pos":[361269,361282],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[361350,361351]},{"pos":[361406,361412],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[361473,361474]},{"pos":[361535,361547],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[361613,361614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[361899,361904],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"pos":[362017,362042],"content":"Func<T1, T2, T3, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, TResult&gt;","pos":[0,25],"source":"Func<T1, T2, T3, TResult>"}]},{"pos":[362227,362231],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[362268,362269],"content":"<","needQuote":true,"nodes":[]},{"pos":[362296,362298],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[362327,362328]},{"pos":[362360,362362],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[362391,362392]},{"pos":[362424,362426],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[362455,362456]},{"pos":[362488,362495],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[362594,362598],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[362636,362639]},{"pos":[362673,362675],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[362704,362705]},{"pos":[362737,362739],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[362768,362769]},{"pos":[362801,362803],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[362832,362833]},{"pos":[362865,362872],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[362905,362906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[363083,363088],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"pos":[363232,363259],"content":"Func<IAsyncResult, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;IAsyncResult, TResult&gt;","pos":[0,27],"source":"Func<IAsyncResult, TResult>"}]},{"pos":[363464,363468],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[363526,363527],"content":"<","needQuote":true,"nodes":[]},{"pos":[363583,363595],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"content":",","pos":[363662,363663]},{"pos":[363695,363702],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[363801,363805],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[363864,363867]},{"pos":[363930,363942],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"content":",","pos":[364009,364010]},{"pos":[364042,364049],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[364082,364083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[364390,364445],"content":"Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,55],"source":"Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[364762,364766],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[364824,364825],"content":"<","needQuote":true,"nodes":[]},{"pos":[364852,364857],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[364889,364890]},{"pos":[364922,364927],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[364959,364960]},{"pos":[365022,365035],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[365103,365104]},{"pos":[365159,365165],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[365226,365227]},{"pos":[365288,365300],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[365432,365436],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[365495,365498]},{"pos":[365532,365537],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[365569,365570]},{"pos":[365602,365607],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[365639,365640]},{"pos":[365702,365715],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[365783,365784]},{"pos":[365839,365845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[365906,365907]},{"pos":[365968,365980],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[366046,366047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[366350,366355],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"pos":[366468,366497],"content":"Func<T1, T2, T3, T4, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, TResult&gt;","pos":[0,29],"source":"Func<T1, T2, T3, T4, TResult>"}]},{"pos":[366694,366698],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[366735,366736],"content":"<","needQuote":true,"nodes":[]},{"pos":[366763,366765],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[366794,366795]},{"pos":[366827,366829],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[366858,366859]},{"pos":[366891,366893],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[366922,366923]},{"pos":[366955,366957],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[366986,366987]},{"pos":[367019,367026],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[367125,367129],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[367167,367170]},{"pos":[367204,367206],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[367235,367236]},{"pos":[367268,367270],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[367299,367300]},{"pos":[367332,367334],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[367363,367364]},{"pos":[367396,367398],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[367427,367428]},{"pos":[367460,367467],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[367500,367501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[367686,367691],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"pos":[367884,367946],"content":"Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,62],"source":"Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[368284,368288],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[368346,368347],"content":"<","needQuote":true,"nodes":[]},{"pos":[368374,368379],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[368411,368412]},{"pos":[368444,368449],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[368481,368482]},{"pos":[368514,368519],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"content":",","pos":[368551,368552]},{"pos":[368614,368627],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[368695,368696]},{"pos":[368751,368757],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[368818,368819]},{"pos":[368880,368892],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[369024,369028],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[369087,369090]},{"pos":[369124,369129],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[369161,369162]},{"pos":[369194,369199],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[369231,369232]},{"pos":[369264,369269],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"content":",","pos":[369301,369302]},{"pos":[369364,369377],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[369445,369446]},{"pos":[369501,369507],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[369568,369569]},{"pos":[369630,369642],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[369708,369709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[370030,370035],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"pos":[370148,370181],"content":"Func<T1, T2, T3, T4, T5, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, T5, TResult&gt;","pos":[0,33],"source":"Func<T1, T2, T3, T4, T5, TResult>"}]},{"pos":[370390,370394],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[370431,370432],"content":"<","needQuote":true,"nodes":[]},{"pos":[370459,370461],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[370490,370491]},{"pos":[370523,370525],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[370554,370555]},{"pos":[370587,370589],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[370618,370619]},{"pos":[370651,370653],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[370682,370683]},{"pos":[370715,370717],"content":"T5","needQuote":true,"nodes":[{"content":"T5","pos":[0,2]}]},{"content":",","pos":[370746,370747]},{"pos":[370779,370786],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[370885,370889],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[370927,370930]},{"pos":[370964,370966],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[370995,370996]},{"pos":[371028,371030],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[371059,371060]},{"pos":[371092,371094],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[371123,371124]},{"pos":[371156,371158],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[371187,371188]},{"pos":[371220,371222],"content":"T5","needQuote":true,"nodes":[{"content":"T5","pos":[0,2]}]},{"content":",","pos":[371251,371252]},{"pos":[371284,371291],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[371324,371325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[371518,371523],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"pos":[371630,371636],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[371806,371820],"content":"Action<Object>","needQuote":true,"nodes":[{"content":"Action&lt;Object&gt;","pos":[0,14],"source":"Action<Object>"}]},{"pos":[371988,371994],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[372054,372055],"content":"<","needQuote":true,"nodes":[]},{"pos":[372105,372111],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[372239,372245],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"content":"(Of","pos":[372306,372309]},{"pos":[372366,372372],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[372432,372433],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[372645,372658],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[372807,372811],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[372869,372870],"content":"<","needQuote":true,"nodes":[]},{"pos":[372897,372904],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[373003,373007],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[373066,373069]},{"pos":[373103,373110],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[373143,373144],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[373308,373321],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[373470,373474],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[373511,373512],"content":"<","needQuote":true,"nodes":[]},{"pos":[373539,373546],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[373645,373649],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[373687,373690]},{"pos":[373724,373731],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[373764,373765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[373974,373995],"content":"Func<Object, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Object, TResult&gt;","pos":[0,21],"source":"Func<Object, TResult>"}]},{"pos":[374182,374186],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[374244,374245],"content":"<","needQuote":true,"nodes":[]},{"pos":[374295,374301],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[374362,374363]},{"pos":[374395,374402],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[374501,374505],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[374564,374567]},{"pos":[374624,374630],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[374691,374692]},{"pos":[374724,374731],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[374764,374765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[374979,375006],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[375214,375237],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[375431,375452],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[375653,375670],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.Tasks.TaskFactory\n  commentId: T:System.Threading.Tasks.TaskFactory\n  id: TaskFactory\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.TaskFactory.#ctor\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.CancellationToken\n  - System.Threading.Tasks.TaskFactory.ContinuationOptions\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory.CreationOptions\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.Scheduler\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory\n  fullName: System.Threading.Tasks.TaskFactory\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TaskFactory\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 39\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides support for creating and scheduling <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects. </p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class TaskFactory\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class TaskFactory\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TaskFactory\n- uid: System.Threading.Tasks.TaskFactory.#ctor\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory()\n  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 88\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the default configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.TaskFactory()\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)\n  id: '#ctor(System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 109\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(CancellationToken cancellationToken)\n    content.vb: Public Sub New(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to tasks created by this <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.TaskFactory(CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 204\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to tasks created by this <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use when creating tasks with this TaskFactory.</p>\\n<p></p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\\n<p></p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 164\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)\n    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)\n    parameters:\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use when creating tasks with this TaskFactory.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The default <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p>-or-</p>\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskScheduler)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 133\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(TaskScheduler scheduler)\n    content.vb: Public Sub New(scheduler As TaskScheduler)\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.TaskFactory(TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.CancellationToken\n  commentId: P:System.Threading.Tasks.TaskFactory.CancellationToken\n  id: CancellationToken\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: CancellationToken\n  fullName: System.Threading.Tasks.TaskFactory.CancellationToken\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancellationToken\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 243\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default cancellation token for this task factory.</p>\\n\"\n  syntax:\n    content: public CancellationToken CancellationToken { get; }\n    content.vb: Public ReadOnly Property CancellationToken As CancellationToken\n    parameters: []\n    return:\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The default task cancellation token for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TaskFactory.CancellationToken\n- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory.ContinuationOptions\n  id: ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinuationOptions\n  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinuationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 275\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default task continuation options for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskContinuationOptions ContinuationOptions { get; }\n    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The default task continuation options for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TaskFactory.ContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory.CreationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: CreationOptions\n  fullName: System.Threading.Tasks.TaskFactory.CreationOptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 265\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default task creation options for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskCreationOptions CreationOptions { get; }\n    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The default task creation options for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TaskFactory.CreationOptions\n- uid: System.Threading.Tasks.TaskFactory.Scheduler\n  commentId: P:System.Threading.Tasks.TaskFactory.Scheduler\n  id: Scheduler\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: Scheduler\n  fullName: System.Threading.Tasks.TaskFactory.Scheduler\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Scheduler\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 255\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default task scheduler for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskScheduler Scheduler { get; }\n    content.vb: Public ReadOnly Property Scheduler As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The default task scheduler for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TaskFactory.Scheduler\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Action<Task[]>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1800\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task())) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()))\n  name.vb: ContinueWhenAll(Task(), Action(Of Task()))\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1832\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1916\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The object that is used to schedule the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1869\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2096\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))\n  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2132\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2224\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The object that is used to schedule the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2173\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1944\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()))\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1977\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2065\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The object that is used to schedule the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2016\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}\n      description: \"\\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2257\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))\n  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2293\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2389\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to assign to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The object that is used to schedule the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2336\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>An element in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Action<Task>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2530\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task)) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task))\n  name.vb: ContinueWhenAny(Task(), Action(Of Task))\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2561\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\\n<p>-or-</p>\\n<p>\\n<em>cancellationToken</em> has already been disposed. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty .</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2645\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2598\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2677\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))\n  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2712\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2804\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2753\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2995\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)))\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 3027\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 3115\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 3066\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationAction\n      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}\n      description: \"\\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2836\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))\n  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2870\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2966\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 2913\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be started upon the completion of any Task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that controls the behavior of the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 952\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state)\n    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object)\n  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 982\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 852\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method action when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult))\n  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult))\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)\n  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult))\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 880\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method action when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 913\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method action when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the task that executes the end method.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1011\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state)\n    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object)\n  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1047\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1322\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)\n    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)\n  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1354\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1230\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))\n  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)\n  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1260\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1294\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the task that executes the end method.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1081\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1120\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1385\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)\n  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1421\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1158\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1201\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Action{System.IAsyncResult}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1455\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1494\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1533\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 1577\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  id: StartNew(System.Action)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 295\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action action)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.StartNew(Action)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)\n  id: StartNew(System.Action,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 322\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action action, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 393\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 352\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action action, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)\n  id: StartNew(System.Action{System.Object},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action<Object>, Object)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 429\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action<object> action, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action(Of Object), state As Object) As Task\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The action delegate to execute asynchronously. </p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>action</em> delegate. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>action</em> argument is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object)\n  name.vb: StartNew(Action(Of Object), Object)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object)\n  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action<Object>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 460\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken) As Task\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)\n  name.vb: StartNew(Action(Of Object), Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)\n  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 535\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Action<Object>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 492\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task\n    parameters:\n    - id: action\n      type: System.Action{System.Object}\n      description: \"\\n<p>The action delegate to execute asynchronously.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: StartNew(Action(Of Object), Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})\n  id: StartNew``1(System.Func{``0})\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<TResult>)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 564\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<TResult> function)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult))\n  name.vb: StartNew(Of TResult)(Func(Of TResult))\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult))\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 597\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 676\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 631\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<Object, TResult>, Object)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 706\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object)\n  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 741\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new <xref href=\\\"System.Threading.Tasks.Task\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 824\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskFactory.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The provided <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n<p>-or-</p>\\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory\n  langs:\n  - csharp\n  - vb\n  name: StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs\n    startLine: 777\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the result available through the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\\\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)\n  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  commentId: T:System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.Task[]\n  name: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  fullname.vb: System.Threading.Tasks.Task()\n  name.vb: Task()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  nameWithType: Task[]\n  nameWithType.vb: Task()\n- uid: System.Action{System.Threading.Tasks.Task[]}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task[]>\n  fullName: System.Action<System.Threading.Tasks.Task[]>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task())\n  name.vb: Action(Of Task())\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Action<Task[]>\n  nameWithType.vb: Action(Of Task())\n  commentId: T:System.Action{System.Threading.Tasks.Task[]}\n- uid: System.Threading.Tasks.Task\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: Task\n  fullName: System.Threading.Tasks.Task\n  nameWithType: Task\n  commentId: T:System.Threading.Tasks.Task\n- uid: System.Action`1\n  isExternal: false\n  name: Action<T>\n  fullName: System.Action<T>\n  fullname.vb: System.Action(Of T)\n  name.vb: Action(Of T)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: Action<T>\n  nameWithType.vb: Action(Of T)\n  commentId: T:System.Action`1\n- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task[], TResult>\n  fullName: System.Func<System.Threading.Tasks.Task[], TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)\n  name.vb: Func(Of Task(), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task[], TResult>\n  nameWithType.vb: Func(Of Task(), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task[],``0}\n- uid: System.Threading.Tasks.Task{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task{`0}\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n  commentId: T:System.Func`2\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n  name: Task<TAntecedentResult>[]\n  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]\n  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()\n  name.vb: Task(Of TAntecedentResult)()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  nameWithType: Task<TAntecedentResult>[]\n  nameWithType.vb: Task(Of TAntecedentResult)()\n- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task<TAntecedentResult>[]>\n  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)())\n  name.vb: Action(Of Task(Of TAntecedentResult)())\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: Action<Task<TAntecedentResult>[]>\n  nameWithType.vb: Action(Of Task(Of TAntecedentResult)())\n  commentId: T:System.Action{System.Threading.Tasks.Task{``0}[]}\n- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task<TAntecedentResult>[], TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)\n  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TAntecedentResult>[], TResult>\n  nameWithType.vb: Func(Of Task(Of TAntecedentResult)(), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task{``0}[],``1}\n- uid: System.Action{System.Threading.Tasks.Task}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task>\n  fullName: System.Action<System.Threading.Tasks.Task>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task)\n  name.vb: Action(Of Task)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: )\n    fullName: )\n  nameWithType: Action<Task>\n  nameWithType.vb: Action(Of Task)\n  commentId: T:System.Action{System.Threading.Tasks.Task}\n- uid: System.Func{System.Threading.Tasks.Task,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)\n  name.vb: Func(Of Task, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task, TResult>\n  nameWithType.vb: Func(Of Task, TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task,``0}\n- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}\n  parent: System\n  definition: System.Action`1\n  name: Action<Task<TAntecedentResult>>\n  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>\n  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult))\n  name.vb: Action(Of Task(Of TAntecedentResult))\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  nameWithType: Action<Task<TAntecedentResult>>\n  nameWithType.vb: Action(Of Task(Of TAntecedentResult))\n  commentId: T:System.Action{System.Threading.Tasks.Task{``0}}\n- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task<TAntecedentResult>, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)\n  name.vb: Func(Of Task(Of TAntecedentResult), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TAntecedentResult>, TResult>\n  nameWithType.vb: Func(Of Task(Of TAntecedentResult), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task{``0},``1}\n- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`3\n  name: Func<AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: System.Action{System.IAsyncResult}\n  parent: System\n  definition: System.Action`1\n  name: Action<IAsyncResult>\n  fullName: System.Action<System.IAsyncResult>\n  fullname.vb: System.Action(Of System.IAsyncResult)\n  name.vb: Action(Of IAsyncResult)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<IAsyncResult>\n  nameWithType.vb: Action(Of IAsyncResult)\n  commentId: T:System.Action{System.IAsyncResult}\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n  commentId: T:System.Func`3\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  fullName: System.IAsyncResult\n  nameWithType: IAsyncResult\n  commentId: T:System.IAsyncResult\n- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`4\n  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg1}'\n  definition: TArg1\n  name: TArg1\n  fullName: TArg1\n  nameWithType: TArg1\n  commentId: '!:TArg1'\n- uid: System.Func`4\n  isExternal: false\n  name: Func<T1, T2, T3, TResult>\n  fullName: System.Func<T1, T2, T3, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, TResult)\n  name.vb: Func(Of T1, T2, T3, TResult)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, TResult)\n  commentId: T:System.Func`4\n- uid: TArg1\n  isExternal: false\n  name: TArg1\n  fullName: TArg1\n  nameWithType: TArg1\n- uid: System.Func{System.IAsyncResult,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<IAsyncResult, TResult>\n  fullName: System.Func<System.IAsyncResult, TResult>\n  fullname.vb: System.Func(Of System.IAsyncResult, TResult)\n  name.vb: Func(Of IAsyncResult, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<IAsyncResult, TResult>\n  nameWithType.vb: Func(Of IAsyncResult, TResult)\n  commentId: T:System.Func{System.IAsyncResult,``0}\n- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`5\n  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg2}'\n  definition: TArg2\n  name: TArg2\n  fullName: TArg2\n  nameWithType: TArg2\n  commentId: '!:TArg2'\n- uid: System.Func`5\n  isExternal: false\n  name: Func<T1, T2, T3, T4, TResult>\n  fullName: System.Func<T1, T2, T3, T4, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, TResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, T4, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)\n  commentId: T:System.Func`5\n- uid: TArg2\n  isExternal: false\n  name: TArg2\n  fullName: TArg2\n  nameWithType: TArg2\n- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`6\n  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - name: TArg3\n    fullName: TArg3\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - name: TArg3\n    fullName: TArg3\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg3}'\n  definition: TArg3\n  name: TArg3\n  fullName: TArg3\n  nameWithType: TArg3\n  commentId: '!:TArg3'\n- uid: System.Func`6\n  isExternal: false\n  name: Func<T1, T2, T3, T4, T5, TResult>\n  fullName: System.Func<T1, T2, T3, T4, T5, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: T5\n    fullName: T5\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: T5\n    fullName: T5\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, T4, T5, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)\n  commentId: T:System.Func`6\n- uid: TArg3\n  isExternal: false\n  name: TArg3\n  fullName: TArg3\n  nameWithType: TArg3\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  fullName: System.Action\n  nameWithType: Action\n  commentId: T:System.Action\n- uid: System.Action{System.Object}\n  parent: System\n  definition: System.Action`1\n  name: Action<Object>\n  fullName: System.Action<System.Object>\n  fullname.vb: System.Action(Of System.Object)\n  name.vb: Action(Of Object)\n  spec.csharp:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Action`1\n    name: Action\n    fullName: System.Action\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Action<Object>\n  nameWithType.vb: Action(Of Object)\n  commentId: T:System.Action{System.Object}\n- uid: System.Func{{TResult}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Func{System.Object,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Object, TResult>\n  fullName: System.Func<System.Object, TResult>\n  fullname.vb: System.Func(Of System.Object, TResult)\n  name.vb: Func(Of Object, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Object, TResult>\n  nameWithType.vb: Func(Of Object, TResult)\n  commentId: T:System.Func{System.Object,`0}\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}