{"nodes":[{"pos":[1897,1912],"content":"WindowsIdentity","needQuote":true,"nodes":[{"content":"WindowsIdentity","pos":[0,15]}]},{"pos":[5194,5207],"content":"DefaultIssuer","needQuote":true,"nodes":[{"content":"DefaultIssuer","pos":[0,13]}]},{"pos":[6429,6452],"content":"WindowsIdentity(IntPtr)","needQuote":true,"nodes":[{"content":"WindowsIdentity(IntPtr)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The account token for the user on whose behalf the code is running.","pos":[7383,7455],"source":"\\n<p>The account token for the user on whose behalf the code is running."},{"content":"&lt;/p&gt;\\n","pos":[7456,7462],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;userToken&lt;/em&gt; is 0.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;userToken&lt;/em&gt; is duplicated and invalid for impersonation.&lt;/p&gt;\\n","pos":[7573,7697],"source":"\\n<p>\\n<em>userToken</em> is 0.</p>\\n<p>-or-</p>\\n<p>\\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the correct permissions.","pos":[7812,7866],"source":"\\n<p>The caller does not have the correct permissions."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[7867,7918],"source":" </p>\\n<p>-or-</p>\\n<p>A Win32 error occurred.</p>\\n"},{"pos":[8589,8620],"content":"WindowsIdentity(IntPtr, String)","needQuote":true,"nodes":[{"content":"WindowsIdentity(IntPtr, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The account token for the user on whose behalf the code is running.","pos":[9633,9705],"source":"\\n<p>The account token for the user on whose behalf the code is running."},{"content":"&lt;/p&gt;\\n","pos":[9706,9712],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;(Informational use only.) The type of authentication used to identify the user.","pos":[9775,9859],"source":"\\n<p>(Informational use only.) The type of authentication used to identify the user."},{"content":"For more information, see Remarks.&lt;/p&gt;\\n","pos":[9860,9900],"source":" For more information, see Remarks.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;userToken&lt;/em&gt; is 0.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;userToken&lt;/em&gt; is duplicated and invalid for impersonation.&lt;/p&gt;\\n","pos":[10011,10135],"source":"\\n<p>\\n<em>userToken</em> is 0.</p>\\n<p>-or-</p>\\n<p>\\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the correct permissions.","pos":[10250,10304],"source":"\\n<p>The caller does not have the correct permissions."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[10305,10356],"source":" </p>\\n<p>-or-</p>\\n<p>A Win32 error occurred.</p>\\n"},{"pos":[10993,11016],"content":"WindowsIdentity(String)","needQuote":true,"nodes":[{"content":"WindowsIdentity(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The UPN for the user on whose behalf the code is running.","pos":[11978,12040],"source":"\\n<p>The UPN for the user on whose behalf the code is running."},{"content":"&lt;/p&gt;\\n","pos":[12041,12047],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Windows returned the Windows NT status code STATUS_ACCESS_DENIED.&lt;/p&gt;\\n","pos":[12178,12254],"source":"\\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[12357,12407],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the correct permissions.","pos":[12522,12576],"source":"\\n<p>The caller does not have the correct permissions."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The computer is not attached to a Windows 2003 or later domain.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The computer is not running Windows 2003 or later.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The user is not a member of the domain the computer is attached to.&lt;/p&gt;\\n","pos":[12577,12829],"source":" </p>\\n<p>-or-</p>\\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\\n<p>-or-</p>\\n<p>The computer is not running Windows 2003 or later.</p>\\n<p>-or-</p>\\n<p>The user is not a member of the domain the computer is attached to.</p>\\n"},{"pos":[13429,13440],"content":"AccessToken","needQuote":true,"nodes":[{"content":"AccessToken","pos":[0,11]}]},{"pos":[15029,15047],"content":"AuthenticationType","needQuote":true,"nodes":[{"content":"AuthenticationType","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The type of authentication used to identify the user.&lt;/p&gt;\\n","pos":[15883,15947],"source":"\\n<p>The type of authentication used to identify the user.</p>\\n"},{"content":"\\n&lt;p&gt;Windows returned the Windows NT status code STATUS_ACCESS_DENIED.&lt;/p&gt;\\n","pos":[16149,16225],"source":"\\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\\n"},{"content":"\\n&lt;p&gt;There is insufficient memory available.&lt;/p&gt;\\n","pos":[16328,16378],"source":"\\n<p>There is insufficient memory available.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the correct permissions.","pos":[16493,16547],"source":"\\n<p>The caller does not have the correct permissions."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The computer is not attached to a Windows 2003 or later domain.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The computer is not running Windows 2003 or later.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The user is not a member of the domain the computer is attached to.&lt;/p&gt;\\n","pos":[16548,16800],"source":" </p>\\n<p>-or-</p>\\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\\n<p>-or-</p>\\n<p>The computer is not running Windows 2003 or later.</p>\\n<p>-or-</p>\\n<p>The user is not a member of the domain the computer is attached to.</p>\\n"},{"pos":[17209,17215],"content":"Claims","needQuote":true,"nodes":[{"content":"Claims","pos":[0,6]}]},{"pos":[18649,18655],"content":"Groups","needQuote":true,"nodes":[{"content":"Groups","pos":[0,6]}]},{"content":"\\n&lt;p&gt;An object representing the groups the current Windows user belongs to.&lt;/p&gt;\\n","pos":[19478,19559],"source":"\\n<p>An object representing the groups the current Windows user belongs to.</p>\\n"},{"pos":[19935,19953],"content":"ImpersonationLevel","needQuote":true,"nodes":[{"content":"ImpersonationLevel","pos":[0,18]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the impersonation level.","pos":[20802,20876],"source":"\\n<p>One of the enumeration values that specifies the impersonation level."},{"content":"&lt;/p&gt;\\n","pos":[20877,20883],"source":" </p>\\n"},{"pos":[21250,21261],"content":"IsAnonymous","needQuote":true,"nodes":[{"content":"IsAnonymous","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the user account is an anonymous account; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22095,22209],"source":"\\n<p>\\n<strong>true</strong> if the user account is an anonymous account; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[22609,22624],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the user was authenticated; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23443,23543],"source":"\\n<p>\\n<strong>true</strong> if the user was authenticated; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23990,23997],"content":"IsGuest","needQuote":true,"nodes":[{"content":"IsGuest","pos":[0,7]}]},{"pos":[25500,25508],"content":"IsSystem","needQuote":true,"nodes":[{"content":"IsSystem","pos":[0,8]}]},{"pos":[27006,27010],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The Windows logon name of the user on whose behalf the code is being run.&lt;/p&gt;\\n","pos":[27745,27829],"source":"\\n<p>The Windows logon name of the user on whose behalf the code is being run.</p>\\n"},{"pos":[28248,28253],"content":"Owner","needQuote":true,"nodes":[{"content":"Owner","pos":[0,5]}]},{"content":"\\n&lt;p&gt;An object for the token owner.&lt;/p&gt;\\n","pos":[29048,29089],"source":"\\n<p>An object for the token owner.</p>\\n"},{"pos":[29422,29426],"content":"User","needQuote":true,"nodes":[{"content":"User","pos":[0,4]}]},{"content":"\\n&lt;p&gt;An object for the user.&lt;/p&gt;\\n","pos":[30210,30244],"source":"\\n<p>An object for the user.</p>\\n"},{"pos":[30579,30586],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A copy of the current instance.&lt;/p&gt;\\n","pos":[31356,31398],"source":"\\n<p>A copy of the current instance.</p>\\n"},{"pos":[31806,31815],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[32952,32968],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[33904,34041],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[34042,34048],"source":" </p>\\n"},{"pos":[34429,34443],"content":"GetAnonymous()","needQuote":true,"nodes":[{"content":"GetAnonymous()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object that represents an anonymous user.&lt;/p&gt;\\n","pos":[35489,35544],"source":"\\n<p>An object that represents an anonymous user.</p>\\n"},{"pos":[35905,35917],"content":"GetCurrent()","needQuote":true,"nodes":[{"content":"GetCurrent()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;An object that represents the current user.&lt;/p&gt;\\n","pos":[36807,36861],"source":"\\n<p>An object that represents the current user.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the correct permissions.","pos":[36990,37044],"source":"\\n<p>The caller does not have the correct permissions."},{"content":"&lt;/p&gt;\\n","pos":[37045,37051],"source":" </p>\\n"},{"pos":[37586,37605],"content":"GetCurrent(Boolean)","needQuote":true,"nodes":[{"content":"GetCurrent(Boolean)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An object that represents a Windows user.&lt;/p&gt;\\n","pos":[39292,39344],"source":"\\n<p>An object that represents a Windows user.</p>\\n"},{"pos":[39973,40002],"content":"GetCurrent(TokenAccessLevels)","needQuote":true,"nodes":[{"content":"GetCurrent(TokenAccessLevels)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;A bitwise combination of the enumeration values.","pos":[41080,41133],"source":"\\n<p>A bitwise combination of the enumeration values."},{"content":"&lt;/p&gt;\\n","pos":[41134,41140],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the current user.&lt;/p&gt;\\n","pos":[41228,41282],"source":"\\n<p>An object that represents the current user.</p>\\n"},{"pos":[41996,42042],"content":"RunImpersonated(SafeAccessTokenHandle, Action)","needQuote":true,"nodes":[{"content":"RunImpersonated(SafeAccessTokenHandle, Action)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The SafeAccessTokenHandle of the impersonated Windows identity.&lt;/p&gt;\\n","pos":[43487,43561],"source":"\\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\\n"},{"content":"\\n&lt;p&gt;The System.Action to run.","pos":[43626,43656],"source":"\\n<p>The System.Action to run."},{"content":"&lt;/p&gt;\\n","pos":[43657,43663],"source":" </p>\\n"},{"pos":[44284,44334],"content":"RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)","needQuote":true,"nodes":[{"content":"RunImpersonated&lt;T&gt;(SafeAccessTokenHandle, Func&lt;T&gt;)","pos":[0,50],"source":"RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)"}]},{"content":"\\n&lt;p&gt;The SafeAccessTokenHandle of the impersonated Windows identity.&lt;/p&gt;\\n","pos":[45802,45876],"source":"\\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\\n"},{"content":"\\n&lt;p&gt;The System.Func to run.&lt;/p&gt;\\n","pos":[45942,45976],"source":"\\n<p>The System.Func to run.</p>\\n"},{"content":"\\n&lt;p&gt;The type of object used by and returned by the function.&lt;/p&gt;\\n","pos":[46030,46097],"source":"\\n<p>The type of object used by and returned by the function.</p>\\n"},{"content":"\\n&lt;p&gt;Returns the result of the function.&lt;/p&gt;\\n","pos":[46149,46195],"source":"\\n<p>Returns the result of the function.</p>\\n"},{"pos":[46742,46767],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[46955,46961],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47146,47160],"content":"ClaimsIdentity","needQuote":true,"nodes":[{"content":"ClaimsIdentity","pos":[0,14]}]},{"pos":[47402,47411],"content":"IIdentity","needQuote":true,"nodes":[{"content":"IIdentity","pos":[0,9]}]},{"pos":[47608,47619],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[47855,47875],"content":"DefaultNameClaimType","needQuote":true,"nodes":[{"content":"DefaultNameClaimType","pos":[0,20]}]},{"pos":[48215,48235],"content":"DefaultRoleClaimType","needQuote":true,"nodes":[{"content":"DefaultRoleClaimType","pos":[0,20]}]},{"pos":[48593,48608],"content":"AddClaim(Claim)","needQuote":true,"nodes":[{"content":"AddClaim(Claim)","pos":[0,15]}]},{"pos":[48809,48817],"content":"AddClaim","needQuote":true,"nodes":[{"content":"AddClaim","pos":[0,8]}]},{"pos":[48889,48890],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48955,48960],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[49014,49015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49139,49147],"content":"AddClaim","needQuote":true,"nodes":[{"content":"AddClaim","pos":[0,8]}]},{"pos":[49219,49220],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49285,49290],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[49344,49345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49701,49730],"content":"AddClaims(IEnumerable<Claim>)","needQuote":true,"nodes":[{"content":"AddClaims(IEnumerable&lt;Claim&gt;)","pos":[0,29],"source":"AddClaims(IEnumerable<Claim>)"}]},{"pos":[50193,50202],"content":"AddClaims","needQuote":true,"nodes":[{"content":"AddClaims","pos":[0,9]}]},{"pos":[50275,50276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50353,50364],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[50449,50450],"content":"<","needQuote":true,"nodes":[]},{"pos":[50515,50520],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[50606,50607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50772,50781],"content":"AddClaims","needQuote":true,"nodes":[{"content":"AddClaims","pos":[0,9]}]},{"pos":[50854,50855],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50932,50943],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[51029,51032]},{"pos":[51104,51109],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[51163,51164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51191,51192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51636,51657],"content":"TryRemoveClaim(Claim)","needQuote":true,"nodes":[{"content":"TryRemoveClaim(Claim)","pos":[0,21]}]},{"pos":[51870,51884],"content":"TryRemoveClaim","needQuote":true,"nodes":[{"content":"TryRemoveClaim","pos":[0,14]}]},{"pos":[51962,51963],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52028,52033],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[52087,52088],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52218,52232],"content":"TryRemoveClaim","needQuote":true,"nodes":[{"content":"TryRemoveClaim","pos":[0,14]}]},{"pos":[52310,52311],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52376,52381],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[52435,52436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52767,52785],"content":"RemoveClaim(Claim)","needQuote":true,"nodes":[{"content":"RemoveClaim(Claim)","pos":[0,18]}]},{"pos":[52992,53003],"content":"RemoveClaim","needQuote":true,"nodes":[{"content":"RemoveClaim","pos":[0,11]}]},{"pos":[53078,53079],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53144,53149],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[53203,53204],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53331,53342],"content":"RemoveClaim","needQuote":true,"nodes":[{"content":"RemoveClaim","pos":[0,11]}]},{"pos":[53417,53418],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53483,53488],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[53542,53543],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53881,53906],"content":"FindAll(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindAll(Predicate&lt;Claim&gt;)","pos":[0,25],"source":"FindAll(Predicate<Claim>)"}]},{"pos":[54293,54300],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[54371,54372],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54427,54436],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[54499,54500],"content":"<","needQuote":true,"nodes":[]},{"pos":[54565,54570],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[54656,54657],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54798,54805],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[54876,54877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54932,54941],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[55005,55008]},{"pos":[55080,55085],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[55139,55140],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55167,55168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55557,55572],"content":"FindAll(String)","needQuote":true,"nodes":[{"content":"FindAll(String)","pos":[0,15]}]},{"pos":[55741,55748],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[55819,55820],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55870,55876],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[55936,55937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56045,56052],"content":"FindAll","needQuote":true,"nodes":[{"content":"FindAll","pos":[0,7]}]},{"pos":[56123,56124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56174,56180],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[56240,56241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56558,56584],"content":"HasClaim(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"HasClaim(Predicate&lt;Claim&gt;)","pos":[0,26],"source":"HasClaim(Predicate<Claim>)"}]},{"pos":[56975,56983],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[57055,57056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57111,57120],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[57183,57184],"content":"<","needQuote":true,"nodes":[]},{"pos":[57249,57254],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[57340,57341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57483,57491],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[57563,57564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57619,57628],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[57692,57695]},{"pos":[57767,57772],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[57826,57827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57854,57855],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58262,58286],"content":"HasClaim(String, String)","needQuote":true,"nodes":[{"content":"HasClaim(String, String)","pos":[0,24]}]},{"pos":[58486,58494],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[58566,58567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58617,58623],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[58684,58685]},{"pos":[58740,58746],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58806,58807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58930,58938],"content":"HasClaim","needQuote":true,"nodes":[{"content":"HasClaim","pos":[0,8]}]},{"pos":[59010,59011],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59061,59067],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[59128,59129]},{"pos":[59184,59190],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[59250,59251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59593,59620],"content":"FindFirst(Predicate<Claim>)","needQuote":true,"nodes":[{"content":"FindFirst(Predicate&lt;Claim&gt;)","pos":[0,27],"source":"FindFirst(Predicate<Claim>)"}]},{"pos":[60015,60024],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[60097,60098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60153,60162],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"pos":[60225,60226],"content":"<","needQuote":true,"nodes":[]},{"pos":[60291,60296],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[60382,60383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60526,60535],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[60608,60609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60664,60673],"content":"Predicate","needQuote":true,"nodes":[{"content":"Predicate","pos":[0,9]}]},{"content":"(Of","pos":[60737,60740]},{"pos":[60812,60817],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[60871,60872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60899,60900],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61297,61314],"content":"FindFirst(String)","needQuote":true,"nodes":[{"content":"FindFirst(String)","pos":[0,17]}]},{"pos":[61487,61496],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[61569,61570],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61620,61626],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61686,61687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61797,61806],"content":"FindFirst","needQuote":true,"nodes":[{"content":"FindFirst","pos":[0,9]}]},{"pos":[61879,61880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61930,61936],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[61996,61997],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62369,62419],"content":"GetObjectData(SerializationInfo, StreamingContext)","needQuote":true,"nodes":[{"content":"GetObjectData(SerializationInfo, StreamingContext)","pos":[0,50]}]},{"pos":[62759,62772],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[62870,62871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62954,62971],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[63065,63066]},{"pos":[63153,63169],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[63261,63262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63455,63468],"content":"GetObjectData","needQuote":true,"nodes":[{"content":"GetObjectData","pos":[0,13]}]},{"pos":[63566,63567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63650,63667],"content":"SerializationInfo","needQuote":true,"nodes":[{"content":"SerializationInfo","pos":[0,17]}]},{"content":",","pos":[63761,63762]},{"pos":[63849,63865],"content":"StreamingContext","needQuote":true,"nodes":[{"content":"StreamingContext","pos":[0,16]}]},{"pos":[63957,63958],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64374,64399],"content":"CreateClaim(BinaryReader)","needQuote":true,"nodes":[{"content":"CreateClaim(BinaryReader)","pos":[0,25]}]},{"pos":[64594,64605],"content":"CreateClaim","needQuote":true,"nodes":[{"content":"CreateClaim","pos":[0,11]}]},{"pos":[64680,64681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64740,64752],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[64821,64822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64943,64954],"content":"CreateClaim","needQuote":true,"nodes":[{"content":"CreateClaim","pos":[0,11]}]},{"pos":[65029,65030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65089,65101],"content":"BinaryReader","needQuote":true,"nodes":[{"content":"BinaryReader","pos":[0,12]}]},{"pos":[65170,65171],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65486,65507],"content":"WriteTo(BinaryWriter)","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter)","pos":[0,21]}]},{"pos":[65694,65701],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[65772,65773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65832,65844],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[65913,65914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66031,66038],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[66109,66110],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66169,66181],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"pos":[66250,66251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66572,66601],"content":"WriteTo(BinaryWriter, Byte[])","needQuote":true,"nodes":[{"content":"WriteTo(BinaryWriter, Byte[])","pos":[0,29]}]},{"pos":[66958,66965],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[67036,67037],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67096,67108],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"content":",","pos":[67178,67179]},{"pos":[67232,67236],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[67295,67297]},{"pos":[67328,67329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67460,67467],"content":"WriteTo","needQuote":true,"nodes":[{"content":"WriteTo","pos":[0,7]}]},{"pos":[67538,67539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67598,67610],"content":"BinaryWriter","needQuote":true,"nodes":[{"content":"BinaryWriter","pos":[0,12]}]},{"content":",","pos":[67680,67681]},{"pos":[67734,67738],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[67796,67798],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[67826,67827],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68195,68200],"content":"Actor","needQuote":true,"nodes":[{"content":"Actor","pos":[0,5]}]},{"pos":[68491,68507],"content":"BootstrapContext","needQuote":true,"nodes":[{"content":"BootstrapContext","pos":[0,16]}]},{"pos":[68838,68861],"content":"CustomSerializationData","needQuote":true,"nodes":[{"content":"CustomSerializationData","pos":[0,23]}]},{"pos":[69195,69200],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[69488,69501],"content":"NameClaimType","needQuote":true,"nodes":[{"content":"NameClaimType","pos":[0,13]}]},{"pos":[69813,69826],"content":"RoleClaimType","needQuote":true,"nodes":[{"content":"RoleClaimType","pos":[0,13]}]},{"pos":[70084,70094],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[70189,70197],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[70266,70267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70294,70295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70365,70373],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[70442,70443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70470,70471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70654,70668],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[70787,70793],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70860,70861],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70911,70917],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70977,70978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71061,71067],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[71134,71135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71185,71191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71251,71252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71466,71488],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[71636,71642],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[71709,71710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71760,71766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71827,71828]},{"pos":[71883,71889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71949,71950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72047,72053],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[72120,72121],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72171,72177],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[72238,72239]},{"pos":[72294,72300],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72360,72361],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72606,72637],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[72803,72818],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[72894,72895],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72945,72951],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73012,73013]},{"pos":[73068,73074],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73134,73135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73241,73256],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[73332,73333],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73383,73389],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[73450,73451]},{"pos":[73506,73512],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73572,73573],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73803,73816],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[73917,73928],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[74000,74001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74028,74029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74102,74113],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[74185,74186],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74213,74214],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74389,74398],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[74491,74498],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[74566,74567],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74594,74595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74664,74671],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[74739,74740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74767,74768],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74943,74960],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[75069,75084],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[75160,75161],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75188,75189],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75266,75281],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[75357,75358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75385,75386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75531,75537],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[75660,75682],"content":"System.Security.Claims","needQuote":true,"nodes":[{"content":"System.Security.Claims","pos":[0,22]}]},{"pos":[75861,75867],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[76012,76018],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[76220,76241],"content":"SafeAccessTokenHandle","needQuote":true,"nodes":[{"content":"SafeAccessTokenHandle","pos":[0,21]}]},{"pos":[76470,76497],"content":"Microsoft.Win32.SafeHandles","needQuote":true,"nodes":[{"content":"Microsoft.Win32.SafeHandles","pos":[0,27]}]},{"pos":[76765,76783],"content":"AuthenticationType","needQuote":true,"nodes":[{"content":"AuthenticationType","pos":[0,18]}]},{"pos":[77103,77109],"content":"Claims","needQuote":true,"nodes":[{"content":"Claims","pos":[0,6]}]},{"pos":[77441,77459],"content":"IEnumerable<Claim>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;Claim&gt;","pos":[0,18],"source":"IEnumerable<Claim>"}]},{"pos":[77736,77747],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77832,77833],"content":"<","needQuote":true,"nodes":[]},{"pos":[77898,77903],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[78050,78061],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[78147,78150]},{"pos":[78222,78227],"content":"Claim","needQuote":true,"nodes":[{"content":"Claim","pos":[0,5]}]},{"pos":[78281,78282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78535,78549],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[78768,78779],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[78843,78844],"content":"<","needQuote":true,"nodes":[]},{"pos":[78871,78872],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[78992,79003],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[79068,79071]},{"pos":[79105,79106],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[79133,79134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79337,79363],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[79613,79640],"content":"IdentityReferenceCollection","needQuote":true,"nodes":[{"content":"IdentityReferenceCollection","pos":[0,27]}]},{"pos":[79941,79964],"content":"TokenImpersonationLevel","needQuote":true,"nodes":[{"content":"TokenImpersonationLevel","pos":[0,23]}]},{"pos":[80199,80206],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[80425,80440],"content":"IsAuthenticated","needQuote":true,"nodes":[{"content":"IsAuthenticated","pos":[0,15]}]},{"pos":[80749,80753],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[81019,81037],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[81317,81324],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[81461,81466],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[81535,81536],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81563,81564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81655,81660],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[81729,81730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81757,81758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81964,81973],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[82076,82083],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[82135,82136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82163,82164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82238,82245],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[82297,82298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82325,82326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82536,82551],"content":"WindowsIdentity","needQuote":true,"nodes":[{"content":"WindowsIdentity","pos":[0,15]}]},{"pos":[82810,82827],"content":"TokenAccessLevels","needQuote":true,"nodes":[{"content":"TokenAccessLevels","pos":[0,17]}]},{"pos":[83043,83049],"content":"Action","needQuote":true,"nodes":[{"content":"Action","pos":[0,6]}]},{"pos":[83205,83212],"content":"Func<T>","needQuote":true,"nodes":[{"content":"Func&lt;T&gt;","pos":[0,7],"source":"Func<T>"}]},{"pos":[83343,83347],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[83384,83385],"content":"<","needQuote":true,"nodes":[]},{"pos":[83412,83413],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83506,83510],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[83548,83551]},{"pos":[83585,83586],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83613,83614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83754,83755],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[83856,83869],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[84018,84022],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[84059,84060],"content":"<","needQuote":true,"nodes":[]},{"pos":[84087,84094],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[84193,84197],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[84235,84238]},{"pos":[84272,84279],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[84312,84313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84462,84463],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[84573,84590],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[84771,84788],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[85005,85032],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[85237,85257],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]}],"content":"items:\n- uid: System.Security.Principal.WindowsIdentity\n  commentId: T:System.Security.Principal.WindowsIdentity\n  id: WindowsIdentity\n  parent: System.Security.Principal\n  children:\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  - System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  - System.Security.Principal.WindowsIdentity.AccessToken\n  - System.Security.Principal.WindowsIdentity.AuthenticationType\n  - System.Security.Principal.WindowsIdentity.Claims\n  - System.Security.Principal.WindowsIdentity.Clone\n  - System.Security.Principal.WindowsIdentity.DefaultIssuer\n  - System.Security.Principal.WindowsIdentity.Dispose\n  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  - System.Security.Principal.WindowsIdentity.GetAnonymous\n  - System.Security.Principal.WindowsIdentity.GetCurrent\n  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  - System.Security.Principal.WindowsIdentity.Groups\n  - System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  - System.Security.Principal.WindowsIdentity.IsAnonymous\n  - System.Security.Principal.WindowsIdentity.IsAuthenticated\n  - System.Security.Principal.WindowsIdentity.IsGuest\n  - System.Security.Principal.WindowsIdentity.IsSystem\n  - System.Security.Principal.WindowsIdentity.Name\n  - System.Security.Principal.WindowsIdentity.Owner\n  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})\n  - System.Security.Principal.WindowsIdentity.User\n  langs:\n  - csharp\n  - vb\n  name: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WindowsIdentity\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 190\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Represents a Windows user.</p>\\n\"\n  syntax:\n    content: 'public class WindowsIdentity : ClaimsIdentity, IIdentity, IDisposable'\n    content.vb: >-\n      Public Class WindowsIdentity\n          Inherits ClaimsIdentity\n          Implements IIdentity, IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Claims.ClaimsIdentity\n  implements:\n  - System.Security.Principal.IIdentity\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  - System.Security.Claims.ClaimsIdentity.Actor\n  - System.Security.Claims.ClaimsIdentity.BootstrapContext\n  - System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  - System.Security.Claims.ClaimsIdentity.Label\n  - System.Security.Claims.ClaimsIdentity.NameClaimType\n  - System.Security.Claims.ClaimsIdentity.RoleClaimType\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: WindowsIdentity\n- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer\n  commentId: F:System.Security.Principal.WindowsIdentity.DefaultIssuer\n  id: DefaultIssuer\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: DefaultIssuer\n  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultIssuer\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 192\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Identifies the name of the default <xref href=\\\"System.Security.Claims.ClaimsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> issuer.</p>\\n\"\n  syntax:\n    content: public const string DefaultIssuer = \"AD AUTHORITY\"\n    content.vb: Public Const DefaultIssuer As String = \"AD AUTHORITY\"\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: WindowsIdentity.DefaultIssuer\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: WindowsIdentity(IntPtr)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 193\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the user represented by the specified Windows account token.</p>\\n\"\n  syntax:\n    content: public WindowsIdentity(IntPtr userToken)\n    content.vb: Public Sub New(userToken As IntPtr)\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: \"\\n<p>The account token for the user on whose behalf the code is running. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>userToken</em> is 0.</p>\\n<p>-or-</p>\\n<p>\\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the correct permissions. </p>\\n<p>-or-</p>\\n<p>A Win32 error occurred.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)\n  id: '#ctor(System.IntPtr,System.String)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: WindowsIdentity(IntPtr, String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 194\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the user represented by the specified Windows account token and the specified authentication type.</p>\\n\"\n  syntax:\n    content: public WindowsIdentity(IntPtr userToken, string type)\n    content.vb: Public Sub New(userToken As IntPtr, type As String)\n    parameters:\n    - id: userToken\n      type: System.IntPtr\n      description: \"\\n<p>The account token for the user on whose behalf the code is running. </p>\\n\"\n    - id: type\n      type: System.String\n      description: \"\\n<p>(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>userToken</em> is 0.</p>\\n<p>-or-</p>\\n<p>\\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the correct permissions. </p>\\n<p>-or-</p>\\n<p>A Win32 error occurred.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr, String)\n- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: WindowsIdentity(String)\n  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 195\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class for the user represented by the specified User Principal Name (UPN).</p>\\n\"\n  syntax:\n    content: public WindowsIdentity(string sUserPrincipalName)\n    content.vb: Public Sub New(sUserPrincipalName As String)\n    parameters:\n    - id: sUserPrincipalName\n      type: System.String\n      description: \"\\n<p>The UPN for the user on whose behalf the code is running. </p>\\n\"\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the correct permissions. </p>\\n<p>-or-</p>\\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\\n<p>-or-</p>\\n<p>The computer is not running Windows 2003 or later.</p>\\n<p>-or-</p>\\n<p>The user is not a member of the domain the computer is attached to.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WindowsIdentity.WindowsIdentity(String)\n- uid: System.Security.Principal.WindowsIdentity.AccessToken\n  commentId: P:System.Security.Principal.WindowsIdentity.AccessToken\n  id: AccessToken\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: AccessToken\n  fullName: System.Security.Principal.WindowsIdentity.AccessToken\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AccessToken\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 196\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets this <xref href=\\\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for this <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  syntax:\n    content: >-\n      public SafeAccessTokenHandle AccessToken\n\n      {\n          [SecurityCritical]\n          get;\n      }\n    content.vb: Public ReadOnly Property AccessToken As SafeAccessTokenHandle\n    parameters: []\n    return:\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: \"\\n<p>Returns a <xref href=\\\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: WindowsIdentity.AccessToken\n- uid: System.Security.Principal.WindowsIdentity.AuthenticationType\n  commentId: P:System.Security.Principal.WindowsIdentity.AuthenticationType\n  id: AuthenticationType\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: AuthenticationType\n  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuthenticationType\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 197\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the type of authentication used to identify the user.</p>\\n\"\n  syntax:\n    content: public override sealed string AuthenticationType { get; }\n    content.vb: Public NotOverridable Overrides ReadOnly Property AuthenticationType As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The type of authentication used to identify the user.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsIdentity.AuthenticationType\n  exceptions:\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is insufficient memory available.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the correct permissions. </p>\\n<p>-or-</p>\\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\\n<p>-or-</p>\\n<p>The computer is not running Windows 2003 or later.</p>\\n<p>-or-</p>\\n<p>The user is not a member of the domain the computer is attached to.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  - ReadOnly\n  nameWithType: WindowsIdentity.AuthenticationType\n- uid: System.Security.Principal.WindowsIdentity.Claims\n  commentId: P:System.Security.Principal.WindowsIdentity.Claims\n  id: Claims\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Claims\n  fullName: System.Security.Principal.WindowsIdentity.Claims\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Claims\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 198\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets all claims for the user represented by this Windows identity.</p>\\n\"\n  syntax:\n    content: public override IEnumerable<Claim> Claims { get; }\n    content.vb: Public Overrides ReadOnly Property Claims As IEnumerable(Of Claim)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n      description: \"\\n<p>A collection of claims for this <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsIdentity.Claims\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: WindowsIdentity.Claims\n- uid: System.Security.Principal.WindowsIdentity.Groups\n  commentId: P:System.Security.Principal.WindowsIdentity.Groups\n  id: Groups\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Groups\n  fullName: System.Security.Principal.WindowsIdentity.Groups\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Groups\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 199\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the groups the current Windows user belongs to.</p>\\n\"\n  syntax:\n    content: public IdentityReferenceCollection Groups { get; }\n    content.vb: Public ReadOnly Property Groups As IdentityReferenceCollection\n    parameters: []\n    return:\n      type: System.Security.Principal.IdentityReferenceCollection\n      description: \"\\n<p>An object representing the groups the current Windows user belongs to.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: WindowsIdentity.Groups\n- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  commentId: P:System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  id: ImpersonationLevel\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: ImpersonationLevel\n  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImpersonationLevel\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 200\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the impersonation level for the user.</p>\\n\"\n  syntax:\n    content: public TokenImpersonationLevel ImpersonationLevel { get; }\n    content.vb: Public ReadOnly Property ImpersonationLevel As TokenImpersonationLevel\n    parameters: []\n    return:\n      type: System.Security.Principal.TokenImpersonationLevel\n      description: \"\\n<p>One of the enumeration values that specifies the impersonation level. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: WindowsIdentity.ImpersonationLevel\n- uid: System.Security.Principal.WindowsIdentity.IsAnonymous\n  commentId: P:System.Security.Principal.WindowsIdentity.IsAnonymous\n  id: IsAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: IsAnonymous\n  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAnonymous\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 201\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets a value that indicates whether the user account is identified as an anonymous account by the system.</p>\\n\"\n  syntax:\n    content: public virtual bool IsAnonymous { get; }\n    content.vb: Public Overridable ReadOnly Property IsAnonymous As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the user account is an anonymous account; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: WindowsIdentity.IsAnonymous\n- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated\n  commentId: P:System.Security.Principal.WindowsIdentity.IsAuthenticated\n  id: IsAuthenticated\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: IsAuthenticated\n  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsAuthenticated\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 202\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets a value indicating whether the user has been authenticated by Windows.</p>\\n\"\n  syntax:\n    content: public override bool IsAuthenticated { get; }\n    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the user was authenticated; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: WindowsIdentity.IsAuthenticated\n- uid: System.Security.Principal.WindowsIdentity.IsGuest\n  commentId: P:System.Security.Principal.WindowsIdentity.IsGuest\n  id: IsGuest\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: IsGuest\n  fullName: System.Security.Principal.WindowsIdentity.IsGuest\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsGuest\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 203\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets a value indicating whether the user account is identified as a <xref href=\\\"System.Security.Principal.WindowsAccountType.Guest\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> account by the system.</p>\\n\"\n  syntax:\n    content: public virtual bool IsGuest { get; }\n    content.vb: Public Overridable ReadOnly Property IsGuest As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the user account is a <xref href=\\\"System.Security.Principal.WindowsAccountType.Guest\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> account; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: WindowsIdentity.IsGuest\n- uid: System.Security.Principal.WindowsIdentity.IsSystem\n  commentId: P:System.Security.Principal.WindowsIdentity.IsSystem\n  id: IsSystem\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: IsSystem\n  fullName: System.Security.Principal.WindowsIdentity.IsSystem\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSystem\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 204\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets a value indicating whether the user account is identified as a <xref href=\\\"System.Security.Principal.WindowsAccountType.System\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> account by the system.</p>\\n\"\n  syntax:\n    content: public virtual bool IsSystem { get; }\n    content.vb: Public Overridable ReadOnly Property IsSystem As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the user account is a <xref href=\\\"System.Security.Principal.WindowsAccountType.System\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> account; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: WindowsIdentity.IsSystem\n- uid: System.Security.Principal.WindowsIdentity.Name\n  commentId: P:System.Security.Principal.WindowsIdentity.Name\n  id: Name\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Security.Principal.WindowsIdentity.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 205\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the user's Windows logon name.</p>\\n\"\n  syntax:\n    content: public override string Name { get; }\n    content.vb: Public Overrides ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The Windows logon name of the user on whose behalf the code is being run.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsIdentity.Name\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: WindowsIdentity.Name\n- uid: System.Security.Principal.WindowsIdentity.Owner\n  commentId: P:System.Security.Principal.WindowsIdentity.Owner\n  id: Owner\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Owner\n  fullName: System.Security.Principal.WindowsIdentity.Owner\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Owner\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 206\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the security identifier (SID) for the token owner.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier Owner { get; }\n    content.vb: Public ReadOnly Property Owner As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>An object for the token owner.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: WindowsIdentity.Owner\n- uid: System.Security.Principal.WindowsIdentity.User\n  commentId: P:System.Security.Principal.WindowsIdentity.User\n  id: User\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: User\n  fullName: System.Security.Principal.WindowsIdentity.User\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: User\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 207\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the security identifier (SID) for the user.</p>\\n\"\n  syntax:\n    content: public SecurityIdentifier User { get; }\n    content.vb: Public ReadOnly Property User As SecurityIdentifier\n    parameters: []\n    return:\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>An object for the user.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: WindowsIdentity.User\n- uid: System.Security.Principal.WindowsIdentity.Clone\n  commentId: M:System.Security.Principal.WindowsIdentity.Clone\n  id: Clone\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Security.Principal.WindowsIdentity.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clone\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 208\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Creates a new  object that is a copy of the current instance.</p>\\n\"\n  syntax:\n    content: public override ClaimsIdentity Clone()\n    content.vb: Public Overrides Function Clone As ClaimsIdentity\n    return:\n      type: System.Security.Claims.ClaimsIdentity\n      description: \"\\n<p>A copy of the current instance.</p>\\n\"\n  overridden: System.Security.Claims.ClaimsIdentity.Clone\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: WindowsIdentity.Clone()\n- uid: System.Security.Principal.WindowsIdentity.Dispose\n  commentId: M:System.Security.Principal.WindowsIdentity.Dispose\n  id: Dispose\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Security.Principal.WindowsIdentity.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 209\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Releases all resources used by the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: WindowsIdentity.Dispose()\n- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  commentId: M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 210\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally releases the managed resources. </p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: WindowsIdentity.Dispose(Boolean)\n- uid: System.Security.Principal.WindowsIdentity.GetAnonymous\n  commentId: M:System.Security.Principal.WindowsIdentity.GetAnonymous\n  id: GetAnonymous\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: GetAnonymous()\n  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAnonymous\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 211\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.</p>\\n\"\n  syntax:\n    content: public static WindowsIdentity GetAnonymous()\n    content.vb: Public Shared Function GetAnonymous As WindowsIdentity\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: \"\\n<p>An object that represents an anonymous user.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WindowsIdentity.GetAnonymous()\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent\n  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent\n  id: GetCurrent\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: GetCurrent()\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCurrent\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 212\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the current Windows user.</p>\\n\"\n  syntax:\n    content: public static WindowsIdentity GetCurrent()\n    content.vb: Public Shared Function GetCurrent As WindowsIdentity\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: \"\\n<p>An object that represents the current user.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the correct permissions. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WindowsIdentity.GetCurrent()\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  id: GetCurrent(System.Boolean)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: GetCurrent(Boolean)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCurrent\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 213\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <em>ifImpersonating</em> parameter.</p>\\n\"\n  syntax:\n    content: public static WindowsIdentity GetCurrent(bool ifImpersonating)\n    content.vb: Public Shared Function GetCurrent(ifImpersonating As Boolean) As WindowsIdentity\n    parameters:\n    - id: ifImpersonating\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to return the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> only if the thread is currently impersonating; <strong>false</strong> to return the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>   of the thread if it is impersonating or the <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the process if the thread is not currently impersonating.</p>\\n\"\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: \"\\n<p>An object that represents a Windows user.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WindowsIdentity.GetCurrent(Boolean)\n- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  id: GetCurrent(System.Security.Principal.TokenAccessLevels)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: GetCurrent(TokenAccessLevels)\n  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCurrent\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 214\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Security.Principal.WindowsIdentity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the current Windows user, using the specified desired token access level.</p>\\n\"\n  syntax:\n    content: public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess)\n    content.vb: Public Shared Function GetCurrent(desiredAccess As TokenAccessLevels) As WindowsIdentity\n    parameters:\n    - id: desiredAccess\n      type: System.Security.Principal.TokenAccessLevels\n      description: \"\\n<p>A bitwise combination of the enumeration values. </p>\\n\"\n    return:\n      type: System.Security.Principal.WindowsIdentity\n      description: \"\\n<p>An object that represents the current user.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: RunImpersonated(SafeAccessTokenHandle, Action)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Action)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RunImpersonated\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 215\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\\\"System.Security.Principal.WindowsImpersonationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, you can use <xref href=\\\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and provide your function directly as a parameter.</p>\\n\"\n  syntax:\n    content: public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)\n    content.vb: Public Shared Sub RunImpersonated(safeAccessTokenHandle As SafeAccessTokenHandle, action As Action)\n    parameters:\n    - id: safeAccessTokenHandle\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: \"\\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\\n\"\n    - id: action\n      type: System.Action\n      description: \"\\n<p>The System.Action to run. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle, Action)\n- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})\n  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})\n  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})\n  parent: System.Security.Principal.WindowsIdentity\n  langs:\n  - csharp\n  - vb\n  name: RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)\n  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<T>)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RunImpersonated\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 216\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\\\"System.Security.Principal.WindowsImpersonationContext\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, you can use <xref href=\\\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and provide your function directly as a parameter.</p>\\n\"\n  syntax:\n    content: public static T RunImpersonated<T>(SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func)\n    content.vb: Public Shared Function RunImpersonated(Of T)(safeAccessTokenHandle As SafeAccessTokenHandle, func As Func(Of T)) As T\n    parameters:\n    - id: safeAccessTokenHandle\n      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n      description: \"\\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\\n\"\n    - id: func\n      type: System.Func{{T}}\n      description: \"\\n<p>The System.Func to run.</p>\\n\"\n    typeParameters:\n    - id: T\n      description: \"\\n<p>The type of object used by and returned by the function.</p>\\n\"\n    return:\n      type: '{T}'\n      description: \"\\n<p>Returns the result of the function.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.Principal.WindowsIdentity.RunImpersonated(Of T)(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func(Of T))\n  name.vb: RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))\n  nameWithType: WindowsIdentity.RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)\n  nameWithType.vb: WindowsIdentity.RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))\nreferences:\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Claims.ClaimsIdentity\n  parent: System.Security.Claims\n  isExternal: false\n  name: ClaimsIdentity\n  fullName: System.Security.Claims.ClaimsIdentity\n  commentId: T:System.Security.Claims.ClaimsIdentity\n  nameWithType: ClaimsIdentity\n- uid: System.Security.Principal.IIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: IIdentity\n  fullName: System.Security.Principal.IIdentity\n  commentId: T:System.Security.Principal.IIdentity\n  nameWithType: IIdentity\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: DefaultNameClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\n  nameWithType: ClaimsIdentity.DefaultNameClaimType\n- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: DefaultRoleClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\n  nameWithType: ClaimsIdentity.DefaultRoleClaimType\n- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: AddClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n    name: AddClaim\n    fullName: System.Security.Claims.ClaimsIdentity.AddClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n    name: AddClaim\n    fullName: System.Security.Claims.ClaimsIdentity.AddClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)\n  nameWithType: ClaimsIdentity.AddClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: AddClaims(IEnumerable<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))\n  name.vb: AddClaims(IEnumerable(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n    name: AddClaims\n    fullName: System.Security.Claims.ClaimsIdentity.AddClaims\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n    name: AddClaims\n    fullName: System.Security.Claims.ClaimsIdentity.AddClaims\n  - name: (\n    fullName: (\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})\n  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)\n  nameWithType.vb: ClaimsIdentity.AddClaims(IEnumerable(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: TryRemoveClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n    name: TryRemoveClaim\n    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n    name: TryRemoveClaim\n    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\n  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: RemoveClaim(Claim)\n  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n    name: RemoveClaim\n    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n    name: RemoveClaim\n    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim\n  - name: (\n    fullName: (\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\n  nameWithType: ClaimsIdentity.RemoveClaim(Claim)\n- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: FindAll(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindAll(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsIdentity.FindAll\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsIdentity.FindAll\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.FindAll(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: FindAll(String)\n  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsIdentity.FindAll\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n    name: FindAll\n    fullName: System.Security.Claims.ClaimsIdentity.FindAll\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)\n  nameWithType: ClaimsIdentity.FindAll(String)\n- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: HasClaim(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: HasClaim(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsIdentity.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsIdentity.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.HasClaim(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: HasClaim(String, String)\n  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsIdentity.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n    name: HasClaim\n    fullName: System.Security.Claims.ClaimsIdentity.HasClaim\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)\n  nameWithType: ClaimsIdentity.HasClaim(String, String)\n- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: FindFirst(Predicate<Claim>)\n  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)\n  fullname.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))\n  name.vb: FindFirst(Predicate(Of Claim))\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsIdentity.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsIdentity.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.Predicate`1\n    name: Predicate\n    fullName: System.Predicate\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})\n  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)\n  nameWithType.vb: ClaimsIdentity.FindFirst(Predicate(Of Claim))\n- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: FindFirst(String)\n  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsIdentity.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n    name: FindFirst\n    fullName: System.Security.Claims.ClaimsIdentity.FindFirst\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)\n  nameWithType: ClaimsIdentity.FindFirst(String)\n- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: GetObjectData(SerializationInfo, StreamingContext)\n  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n    name: GetObjectData\n    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Runtime.Serialization.SerializationInfo\n    name: SerializationInfo\n    fullName: System.Runtime.Serialization.SerializationInfo\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Runtime.Serialization.StreamingContext\n    name: StreamingContext\n    fullName: System.Runtime.Serialization.StreamingContext\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\n  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo, StreamingContext)\n- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: CreateClaim(BinaryReader)\n  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n    name: CreateClaim\n    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryReader\n    name: BinaryReader\n    fullName: System.IO.BinaryReader\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n    name: CreateClaim\n    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryReader\n    name: BinaryReader\n    fullName: System.IO.BinaryReader\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)\n  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)\n- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: WriteTo(BinaryWriter)\n  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsIdentity.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsIdentity.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)\n  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)\n- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: true\n  name: WriteTo(BinaryWriter, Byte[])\n  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])\n  fullname.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())\n  name.vb: WriteTo(BinaryWriter, Byte())\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsIdentity.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n    name: WriteTo\n    fullName: System.Security.Claims.ClaimsIdentity.WriteTo\n  - name: (\n    fullName: (\n  - uid: System.IO.BinaryWriter\n    name: BinaryWriter\n    fullName: System.IO.BinaryWriter\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])\n  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter, Byte[])\n  nameWithType.vb: ClaimsIdentity.WriteTo(BinaryWriter, Byte())\n- uid: System.Security.Claims.ClaimsIdentity.Actor\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: Actor\n  fullName: System.Security.Claims.ClaimsIdentity.Actor\n  commentId: P:System.Security.Claims.ClaimsIdentity.Actor\n  nameWithType: ClaimsIdentity.Actor\n- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: BootstrapContext\n  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext\n  commentId: P:System.Security.Claims.ClaimsIdentity.BootstrapContext\n  nameWithType: ClaimsIdentity.BootstrapContext\n- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: CustomSerializationData\n  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  commentId: P:System.Security.Claims.ClaimsIdentity.CustomSerializationData\n  nameWithType: ClaimsIdentity.CustomSerializationData\n- uid: System.Security.Claims.ClaimsIdentity.Label\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: Label\n  fullName: System.Security.Claims.ClaimsIdentity.Label\n  commentId: P:System.Security.Claims.ClaimsIdentity.Label\n  nameWithType: ClaimsIdentity.Label\n- uid: System.Security.Claims.ClaimsIdentity.NameClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: NameClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType\n  commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType\n  nameWithType: ClaimsIdentity.NameClaimType\n- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: RoleClaimType\n  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType\n  commentId: P:System.Security.Claims.ClaimsIdentity.RoleClaimType\n  nameWithType: ClaimsIdentity.RoleClaimType\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Claims\n  isExternal: false\n  name: System.Security.Claims\n  fullName: System.Security.Claims\n  commentId: N:System.Security.Claims\n  nameWithType: System.Security.Claims\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  commentId: T:System.IntPtr\n  nameWithType: IntPtr\n- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  parent: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: SafeAccessTokenHandle\n  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  commentId: T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\n  nameWithType: SafeAccessTokenHandle\n- uid: Microsoft.Win32.SafeHandles\n  isExternal: false\n  name: Microsoft.Win32.SafeHandles\n  fullName: Microsoft.Win32.SafeHandles\n  commentId: N:Microsoft.Win32.SafeHandles\n  nameWithType: Microsoft.Win32.SafeHandles\n- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: AuthenticationType\n  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType\n  commentId: P:System.Security.Claims.ClaimsIdentity.AuthenticationType\n  nameWithType: ClaimsIdentity.AuthenticationType\n- uid: System.Security.Claims.ClaimsIdentity.Claims\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: Claims\n  fullName: System.Security.Claims.ClaimsIdentity.Claims\n  commentId: P:System.Security.Claims.ClaimsIdentity.Claims\n  nameWithType: ClaimsIdentity.Claims\n- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<Claim>\n  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)\n  name.vb: IEnumerable(Of Claim)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Claims.Claim\n    name: Claim\n    fullName: System.Security.Claims.Claim\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}\n  nameWithType: IEnumerable<Claim>\n  nameWithType.vb: IEnumerable(Of Claim)\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Collections.Generic.IEnumerable`1\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n  nameWithType: System.Collections.Generic\n- uid: System.Security.Principal.IdentityReferenceCollection\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReferenceCollection\n  fullName: System.Security.Principal.IdentityReferenceCollection\n  commentId: T:System.Security.Principal.IdentityReferenceCollection\n  nameWithType: IdentityReferenceCollection\n- uid: System.Security.Principal.TokenImpersonationLevel\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenImpersonationLevel\n  fullName: System.Security.Principal.TokenImpersonationLevel\n  commentId: T:System.Security.Principal.TokenImpersonationLevel\n  nameWithType: TokenImpersonationLevel\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: IsAuthenticated\n  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  commentId: P:System.Security.Claims.ClaimsIdentity.IsAuthenticated\n  nameWithType: ClaimsIdentity.IsAuthenticated\n- uid: System.Security.Claims.ClaimsIdentity.Name\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: Name\n  fullName: System.Security.Claims.ClaimsIdentity.Name\n  commentId: P:System.Security.Claims.ClaimsIdentity.Name\n  nameWithType: ClaimsIdentity.Name\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Claims.ClaimsIdentity.Clone\n  parent: System.Security.Claims.ClaimsIdentity\n  isExternal: false\n  name: Clone()\n  fullName: System.Security.Claims.ClaimsIdentity.Clone()\n  spec.csharp:\n  - uid: System.Security.Claims.ClaimsIdentity.Clone\n    name: Clone\n    fullName: System.Security.Claims.ClaimsIdentity.Clone\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Claims.ClaimsIdentity.Clone\n    name: Clone\n    fullName: System.Security.Claims.ClaimsIdentity.Clone\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Claims.ClaimsIdentity.Clone\n  nameWithType: ClaimsIdentity.Clone()\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Security.Principal.WindowsIdentity\n  parent: System.Security.Principal\n  isExternal: false\n  name: WindowsIdentity\n  fullName: System.Security.Principal.WindowsIdentity\n  commentId: T:System.Security.Principal.WindowsIdentity\n  nameWithType: WindowsIdentity\n- uid: System.Security.Principal.TokenAccessLevels\n  parent: System.Security.Principal\n  isExternal: false\n  name: TokenAccessLevels\n  fullName: System.Security.Principal.TokenAccessLevels\n  commentId: T:System.Security.Principal.TokenAccessLevels\n  nameWithType: TokenAccessLevels\n- uid: System.Action\n  parent: System\n  isExternal: false\n  name: Action\n  fullName: System.Action\n  commentId: T:System.Action\n  nameWithType: Action\n- uid: System.Func{{T}}\n  parent: System\n  definition: System.Func`1\n  name: Func<T>\n  fullName: System.Func<T>\n  fullname.vb: System.Func(Of T)\n  name.vb: Func(Of T)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Func{``0}\n  nameWithType: Func<T>\n  nameWithType.vb: Func(Of T)\n- uid: '{T}'\n  definition: T\n  name: T\n  fullName: T\n  commentId: '!:T'\n  nameWithType: T\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Func`1\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n- uid: T\n  isExternal: false\n  name: T\n  fullName: T\n  nameWithType: T\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n"}