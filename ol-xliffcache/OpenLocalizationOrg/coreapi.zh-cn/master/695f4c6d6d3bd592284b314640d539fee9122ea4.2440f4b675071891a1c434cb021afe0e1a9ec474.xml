{"nodes":[{"pos":[501,524],"content":"ICspAsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"ICspAsymmetricAlgorithm","pos":[0,23]}]},{"pos":[1846,1865],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[3492,3514],"content":"ExportCspBlob(Boolean)","needQuote":true,"nodes":[{"content":"ExportCspBlob(Boolean)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include the private key; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4496,4593],"source":"\\n<p>\\n<strong>true</strong> to include the private key; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5230,5251],"content":"ImportCspBlob(Byte[])","needQuote":true,"nodes":[{"content":"ImportCspBlob(Byte[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A byte array that represents an asymmetric key blob.&lt;/p&gt;\\n","pos":[6038,6101],"source":"\\n<p>A byte array that represents an asymmetric key blob.</p>\\n"},{"pos":[6436,6464],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[6718,6737],"content":"CspKeyContainerInfo","needQuote":true,"nodes":[{"content":"CspKeyContainerInfo","pos":[0,19]}]},{"pos":[6966,6973],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[7084,7090],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[7210,7214],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[7273,7275]},{"pos":[7338,7342],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[7400,7402],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[7511,7517],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]}],"content":"items:\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.ICspAsymmetricAlgorithm\n  id: ICspAsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  - System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ICspAsymmetricAlgorithm\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  type: Interface\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ICspAsymmetricAlgorithm\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 52\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Defines methods that allow an <xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to enumerate key container information, and import and export Microsoft Cryptographic API (CAPI)â€“compatible key blobs.</p>\\n\"\n  syntax:\n    content: public interface ICspAsymmetricAlgorithm\n    content.vb: Public Interface ICspAsymmetricAlgorithm\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: ICspAsymmetricAlgorithm\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  commentId: P:System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  id: CspKeyContainerInfo\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.CspKeyContainerInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CspKeyContainerInfo\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 54\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Security.Cryptography.CspKeyContainerInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes additional information about a cryptographic key pair.</p>\\n\"\n  syntax:\n    content: CspKeyContainerInfo CspKeyContainerInfo { get; }\n    content.vb: ReadOnly Property CspKeyContainerInfo As CspKeyContainerInfo\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CspKeyContainerInfo\n      description: \"\\n<p>A <xref href=\\\"System.Security.Cryptography.CspKeyContainerInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that describes additional information about a cryptographic key pair.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: ICspAsymmetricAlgorithm.CspKeyContainerInfo\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  commentId: M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  id: ExportCspBlob(System.Boolean)\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ExportCspBlob(Boolean)\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ExportCspBlob(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportCspBlob\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 55\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Exports a blob that contains the key information associated with an <xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.  </p>\\n\"\n  syntax:\n    content: byte[] ExportCspBlob(bool includePrivateParameters)\n    content.vb: Function ExportCspBlob(includePrivateParameters As Boolean) As Byte()\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include the private key; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that contains the key information associated with an <xref href=\\\"System.Security.Cryptography.AsymmetricAlgorithm\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  nameWithType: ICspAsymmetricAlgorithm.ExportCspBlob(Boolean)\n- uid: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  commentId: M:System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  id: ImportCspBlob(System.Byte[])\n  parent: System.Security.Cryptography.ICspAsymmetricAlgorithm\n  langs:\n  - csharp\n  - vb\n  name: ImportCspBlob(Byte[])\n  fullName: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportCspBlob\n    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs\n    startLine: 56\n  assemblies:\n  - System.Security.Cryptography.Csp\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Imports a blob that represents asymmetric key information.  </p>\\n\"\n  syntax:\n    content: void ImportCspBlob(byte[] rawData)\n    content.vb: Sub ImportCspBlob(rawData As Byte())\n    parameters:\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>A byte array that represents an asymmetric key blob.</p>\\n\"\n  fullName.vb: System.Security.Cryptography.ICspAsymmetricAlgorithm.ImportCspBlob(System.Byte())\n  name.vb: ImportCspBlob(Byte())\n  nameWithType: ICspAsymmetricAlgorithm.ImportCspBlob(Byte[])\n  nameWithType.vb: ICspAsymmetricAlgorithm.ImportCspBlob(Byte())\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Security.Cryptography.CspKeyContainerInfo\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CspKeyContainerInfo\n  fullName: System.Security.Cryptography.CspKeyContainerInfo\n  commentId: T:System.Security.Cryptography.CspKeyContainerInfo\n  nameWithType: CspKeyContainerInfo\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n"}