{"nodes":[{"pos":[1208,1228],"content":"ManualResetEventSlim","needQuote":true,"nodes":[{"content":"ManualResetEventSlim","pos":[0,20]}]},{"pos":[2932,2954],"content":"ManualResetEventSlim()","needQuote":true,"nodes":[{"content":"ManualResetEventSlim()","pos":[0,22]}]},{"pos":[4034,4063],"content":"ManualResetEventSlim(Boolean)","needQuote":true,"nodes":[{"content":"ManualResetEventSlim(Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;true to set the initial state signaled; false to set the initial state to nonsignaled.&lt;/p&gt;\\n","pos":[4951,5048],"source":"\\n<p>true to set the initial state signaled; false to set the initial state to nonsignaled.</p>\\n"},{"pos":[5469,5505],"content":"ManualResetEventSlim(Boolean, Int32)","needQuote":true,"nodes":[{"content":"ManualResetEventSlim(Boolean, Int32)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;true to set the initial state to signaled; false to set the initial state to nonsignaled.&lt;/p&gt;\\n","pos":[6471,6571],"source":"\\n<p>true to set the initial state to signaled; false to set the initial state to nonsignaled.</p>\\n"},{"content":"\\n&lt;p&gt;The number of spin waits that will occur before falling back to a kernel-based wait operation.&lt;/p&gt;\\n","pos":[6638,6743],"source":"\\n<p>The number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;spinCount&lt;/em&gt; is less than 0 or greater than the maximum allowed value.&lt;/p&gt;\\n","pos":[6874,6963],"source":"\\n<p>\\n<em>spinCount</em> is less than 0 or greater than the maximum allowed value.</p>\\n"},{"pos":[7302,7307],"content":"IsSet","needQuote":true,"nodes":[{"content":"IsSet","pos":[0,5]}]},{"content":"\\n&lt;p&gt;true if the event has is set; otherwise, false.&lt;/p&gt;\\n","pos":[7951,8009],"source":"\\n<p>true if the event has is set; otherwise, false.</p>\\n"},{"pos":[8350,8359],"content":"SpinCount","needQuote":true,"nodes":[{"content":"SpinCount","pos":[0,9]}]},{"content":"\\n&lt;p&gt;Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.&lt;/p&gt;\\n","pos":[9085,9198],"source":"\\n<p>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\\n"},{"pos":[9546,9556],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[11009,11018],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[12102,12118],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;true to release both managed and unmanaged resources; false to release only unmanaged resources.&lt;/p&gt;\\n","pos":[12979,13086],"source":"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n"},{"pos":[13439,13446],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The object has already been disposed.&lt;/p&gt;\\n","pos":[14145,14193],"source":"\\n<p>The object has already been disposed.</p>\\n"},{"pos":[14497,14502],"content":"Set()","needQuote":true,"nodes":[{"content":"Set()","pos":[0,5]}]},{"pos":[15407,15413],"content":"Wait()","needQuote":true,"nodes":[{"content":"Wait()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.&lt;/p&gt;\\n","pos":[16187,16246],"source":"\\n<p>The maximum number of waiters has been exceeded.</p>\\n"},{"content":"\\n&lt;p&gt;The object has already been disposed.&lt;/p&gt;\\n","pos":[16355,16403],"source":"\\n<p>The object has already been disposed.</p>\\n"},{"pos":[16751,16762],"content":"Wait(Int32)","needQuote":true,"nodes":[{"content":"Wait(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[18189,18305],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[18418,18486],"source":"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The object has already been disposed.&lt;/p&gt;\\n","pos":[18595,18643],"source":"\\n<p>The object has already been disposed.</p>\\n"},{"pos":[19101,19131],"content":"Wait(Int32, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(Int32, CancellationToken)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[21001,21054],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[21171,21287],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[21400,21468],"source":"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n"},{"pos":[22229,22252],"content":"Wait(CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(CancellationToken)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.&lt;/p&gt;\\n","pos":[23494,23553],"source":"\\n<p>The maximum number of waiters has been exceeded.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[23668,23721],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"pos":[24418,24432],"content":"Wait(TimeSpan)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[26394,26462],"source":"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The object has already been disposed.&lt;/p&gt;\\n","pos":[26571,26619],"source":"\\n<p>The object has already been disposed.</p>\\n"},{"pos":[27089,27122],"content":"Wait(TimeSpan, CancellationToken)","needQuote":true,"nodes":[{"content":"Wait(TimeSpan, CancellationToken)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cancellationToken&lt;/em&gt; was canceled.&lt;/p&gt;\\n","pos":[29128,29181],"source":"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of waiters has been exceeded.","pos":[29697,29750],"source":"\\n<p>The maximum number of waiters has been exceeded."},{"content":"&lt;/p&gt;\\n","pos":[29751,29757],"source":" </p>\\n"},{"pos":[30275,30291],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[30452,30458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30608,30619],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[30794,30804],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30899,30907],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30976,30977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31004,31005],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31075,31083],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[31152,31153],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31180,31181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31364,31378],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31497,31503],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31570,31571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31621,31627],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31687,31688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31771,31777],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31844,31845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31895,31901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31961,31962],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32176,32198],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32346,32352],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32419,32420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32470,32476],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32537,32538]},{"pos":[32593,32599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32659,32660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32757,32763],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32830,32831],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32881,32887],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32948,32949]},{"pos":[33004,33010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33070,33071],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33316,33347],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33513,33528],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33604,33605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33655,33661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33722,33723]},{"pos":[33778,33784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33844,33845],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33951,33966],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[34042,34043],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34093,34099],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[34160,34161]},{"pos":[34216,34222],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34282,34283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34513,34526],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34627,34638],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34710,34711],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34738,34739],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34812,34823],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34895,34896],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34923,34924],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35099,35108],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35201,35208],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35276,35277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35304,35305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35374,35381],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35449,35450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35477,35478],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35653,35670],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35779,35794],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35870,35871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35898,35899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35976,35991],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[36067,36068],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36095,36096],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36241,36247],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36379,36386],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36533,36538],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36704,36714],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[36916,36925],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[37028,37035],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37087,37088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37115,37116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37190,37197],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[37249,37250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37277,37278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37472,37489],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[37689,37697],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[37852,37879],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[38087,38110],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[38325,38350],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[38572,38598],"content":"OperationCanceledException","needQuote":true,"nodes":[{"content":"OperationCanceledException","pos":[0,26]}]}],"content":"items:\n- uid: System.Threading.ManualResetEventSlim\n  commentId: T:System.Threading.ManualResetEventSlim\n  id: ManualResetEventSlim\n  parent: System.Threading\n  children:\n  - System.Threading.ManualResetEventSlim.#ctor\n  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  - System.Threading.ManualResetEventSlim.Dispose\n  - System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  - System.Threading.ManualResetEventSlim.IsSet\n  - System.Threading.ManualResetEventSlim.Reset\n  - System.Threading.ManualResetEventSlim.Set\n  - System.Threading.ManualResetEventSlim.SpinCount\n  - System.Threading.ManualResetEventSlim.Wait\n  - System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  - System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  - System.Threading.ManualResetEventSlim.WaitHandle\n  langs:\n  - csharp\n  - vb\n  name: ManualResetEventSlim\n  fullName: System.Threading.ManualResetEventSlim\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ManualResetEventSlim\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 47\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides a slimmed down version of <xref href=\\\"System.Threading.ManualResetEvent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [DebuggerDisplay(\"Set = {IsSet}\")]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class ManualResetEventSlim : IDisposable\n    content.vb: >-\n      <ComVisible(False)>\n\n      <DebuggerDisplay(\"Set = {IsSet}\")>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class ManualResetEventSlim\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ManualResetEventSlim\n- uid: System.Threading.ManualResetEventSlim.#ctor\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor\n  id: '#ctor'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: ManualResetEventSlim()\n  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 186\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with an initial state of nonsignaled.</p>\\n\"\n  syntax:\n    content: public ManualResetEventSlim()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim()\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: ManualResetEventSlim(Boolean)\n  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 198\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a Boolean value indicating whether to set the intial state to signaled.</p>\\n\"\n  syntax:\n    content: public ManualResetEventSlim(bool initialState)\n    content.vb: Public Sub New(initialState As Boolean)\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: \"\\n<p>true to set the initial state signaled; false to set the initial state to nonsignaled.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean)\n- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)\n  id: '#ctor(System.Boolean,System.Int32)'\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: ManualResetEventSlim(Boolean, Int32)\n  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(System.Boolean, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 216\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</p>\\n\"\n  syntax:\n    content: public ManualResetEventSlim(bool initialState, int spinCount)\n    content.vb: Public Sub New(initialState As Boolean, spinCount As Integer)\n    parameters:\n    - id: initialState\n      type: System.Boolean\n      description: \"\\n<p>true to set the initial state to signaled; false to set the initial state to nonsignaled.</p>\\n\"\n    - id: spinCount\n      type: System.Int32\n      description: \"\\n<p>The number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>spinCount</em> is less than 0 or greater than the maximum allowed value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.ManualResetEventSlim(Boolean, Int32)\n- uid: System.Threading.ManualResetEventSlim.IsSet\n  commentId: P:System.Threading.ManualResetEventSlim.IsSet\n  id: IsSet\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: IsSet\n  fullName: System.Threading.ManualResetEventSlim.IsSet\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSet\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 121\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether the event is set.</p>\\n\"\n  syntax:\n    content: public bool IsSet { get; }\n    content.vb: Public ReadOnly Property IsSet As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the event has is set; otherwise, false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ManualResetEventSlim.IsSet\n- uid: System.Threading.ManualResetEventSlim.SpinCount\n  commentId: P:System.Threading.ManualResetEventSlim.SpinCount\n  id: SpinCount\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: SpinCount\n  fullName: System.Threading.ManualResetEventSlim.SpinCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinCount\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 137\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\\n\"\n  syntax:\n    content: public int SpinCount { get; }\n    content.vb: Public ReadOnly Property SpinCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Returns the number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ManualResetEventSlim.SpinCount\n- uid: System.Threading.ManualResetEventSlim.WaitHandle\n  commentId: P:System.Threading.ManualResetEventSlim.WaitHandle\n  id: WaitHandle\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: WaitHandle\n  fullName: System.Threading.ManualResetEventSlim.WaitHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WaitHandle\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 101\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the underlying <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for this <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public WaitHandle WaitHandle { get; }\n    content.vb: Public ReadOnly Property WaitHandle As WaitHandle\n    parameters: []\n    return:\n      type: System.Threading.WaitHandle\n      description: \"\\n<p>The underlying <xref href=\\\"System.Threading.WaitHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event object fore this <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ManualResetEventSlim.WaitHandle\n- uid: System.Threading.ManualResetEventSlim.Dispose\n  commentId: M:System.Threading.ManualResetEventSlim.Dispose\n  id: Dispose\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.ManualResetEventSlim.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 686\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Dispose()\n- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  commentId: M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 702\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: ManualResetEventSlim.Dispose(Boolean)\n- uid: System.Threading.ManualResetEventSlim.Reset\n  commentId: M:System.Threading.ManualResetEventSlim.Reset\n  id: Reset\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Threading.ManualResetEventSlim.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 387\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets the state of the event to nonsignaled, which causes threads to block.</p>\\n\"\n  syntax:\n    content: public void Reset()\n    content.vb: Public Sub Reset\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Reset()\n- uid: System.Threading.ManualResetEventSlim.Set\n  commentId: M:System.Threading.ManualResetEventSlim.Set\n  id: Set\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Set()\n  fullName: System.Threading.ManualResetEventSlim.Set()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Set\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 319\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</p>\\n\"\n  syntax:\n    content: public void Set()\n    content.vb: Public Sub Set\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Set()\n- uid: System.Threading.ManualResetEventSlim.Wait\n  commentId: M:System.Threading.ManualResetEventSlim.Wait\n  id: Wait\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait()\n  fullName: System.Threading.ManualResetEventSlim.Wait()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 421\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set.</p>\\n\"\n  syntax:\n    content: public void Wait()\n    content.vb: Public Sub Wait\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait()\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  id: Wait(System.Int32)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32)\n  fullName: System.Threading.ManualResetEventSlim.Wait(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 516\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a 32-bit signed integer to measure the time interval.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait(Int32)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)\n  id: Wait(System.Int32,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(Int32, CancellationToken)\n  fullName: System.Threading.ManualResetEventSlim.Wait(System.Int32, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 539\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>(-1) to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed or the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait(Int32, CancellationToken)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  id: Wait(System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(CancellationToken)\n  fullName: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 441\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> receives a signal, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Wait(CancellationToken cancellationToken)\n    content.vb: Public Sub Wait(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded.</p>\\n\"\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed or the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait(CancellationToken)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  id: Wait(System.TimeSpan)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan)\n  fullName: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 461\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the time interval.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout)\n    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>The number of milliseconds in <em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded.</p>\\n<p></p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan)\n- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)\n  id: Wait(System.TimeSpan,System.Threading.CancellationToken)\n  parent: System.Threading.ManualResetEventSlim\n  langs:\n  - csharp\n  - vb\n  name: Wait(TimeSpan, CancellationToken)\n  fullName: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Wait\n    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs\n    startLine: 492\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Blocks the current thread until the current <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set, using a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to measure the time interval, while observing a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)\n    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to observe.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Threading.ManualResetEventSlim\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was set; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.OperationCanceledException\n    commentId: T:System.OperationCanceledException\n    description: \"\\n<p>\\n<em>cancellationToken</em> was canceled.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\\n<p>-or-</p>\\n<p>The number of milliseconds in <em>timeout</em> is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The maximum number of waiters has been exceeded. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The object has already been disposed or the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ManualResetEventSlim.Wait(TimeSpan, CancellationToken)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.OperationCanceledException\n  parent: System\n  isExternal: false\n  name: OperationCanceledException\n  fullName: System.OperationCanceledException\n  nameWithType: OperationCanceledException\n  commentId: T:System.OperationCanceledException\n"}