{"nodes":[{"pos":[3913,3938],"content":"X509CertificateCollection","needQuote":true,"nodes":[{"content":"X509CertificateCollection","pos":[0,25]}]},{"pos":[6088,6115],"content":"X509CertificateCollection()","needQuote":true,"nodes":[{"content":"X509CertificateCollection()","pos":[0,27]}]},{"pos":[7642,7686],"content":"X509CertificateCollection(X509Certificate[])","needQuote":true,"nodes":[{"content":"X509CertificateCollection(X509Certificate[])","pos":[0,44]}]},{"pos":[10164,10216],"content":"X509CertificateCollection(X509CertificateCollection)","needQuote":true,"nodes":[{"content":"X509CertificateCollection(X509CertificateCollection)","pos":[0,52]}]},{"pos":[12219,12230],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;index&lt;/em&gt; parameter is outside the valid range of indexes for the collection.","pos":[14022,14113],"source":"\\n<p>The <em>index</em> parameter is outside the valid range of indexes for the collection."},{"content":"&lt;/p&gt;\\n","pos":[14114,14120],"source":" </p>\\n"},{"pos":[14926,14946],"content":"Add(X509Certificate)","needQuote":true,"nodes":[{"content":"Add(X509Certificate)","pos":[0,20]}]},{"pos":[17811,17838],"content":"AddRange(X509Certificate[])","needQuote":true,"nodes":[{"content":"AddRange(X509Certificate[])","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19545,19604],"source":"\\n<p>The <em>value</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19605,19611],"source":" </p>\\n"},{"pos":[20865,20900],"content":"AddRange(X509CertificateCollection)","needQuote":true,"nodes":[{"content":"AddRange(X509CertificateCollection)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[22513,22572],"source":"\\n<p>The <em>value</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[22573,22579],"source":" </p>\\n"},{"pos":[23538,23563],"content":"Contains(X509Certificate)","needQuote":true,"nodes":[{"content":"Contains(X509Certificate)","pos":[0,25]}]},{"pos":[26267,26299],"content":"CopyTo(X509Certificate[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(X509Certificate[], Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The index into &lt;em&gt;array&lt;/em&gt; to begin copying.","pos":[28036,28088],"source":"\\n<p>The index into <em>array</em> to begin copying."},{"content":"&lt;/p&gt;\\n","pos":[28089,28095],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;array&lt;/em&gt; parameter is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28651,28710],"source":"\\n<p>The <em>array</em> parameter is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28711,28717],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;arrayIndex&lt;/em&gt; parameter is less than the &lt;em&gt;array&lt;/em&gt; parameter's lower bound.","pos":[28834,28929],"source":"\\n<p>The <em>arrayIndex</em> parameter is less than the <em>array</em> parameter's lower bound."},{"content":"&lt;/p&gt;\\n","pos":[28930,28936],"source":" </p>\\n"},{"pos":[29761,29776],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[31693,31706],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[33589,33613],"content":"IndexOf(X509Certificate)","needQuote":true,"nodes":[{"content":"IndexOf(X509Certificate)","pos":[0,24]}]},{"pos":[36413,36443],"content":"Insert(Int32, X509Certificate)","needQuote":true,"nodes":[{"content":"Insert(Int32, X509Certificate)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The zero-based index where &lt;em&gt;value&lt;/em&gt; should be inserted.","pos":[37664,37730],"source":"\\n<p>The zero-based index where <em>value</em> should be inserted."},{"content":"&lt;/p&gt;\\n","pos":[37731,37737],"source":" </p>\\n"},{"pos":[38945,38968],"content":"Remove(X509Certificate)","needQuote":true,"nodes":[{"content":"Remove(X509Certificate)","pos":[0,23]}]},{"pos":[41362,41367],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[42750,42776],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[44475,44495],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[46131,46148],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[47754,47770],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[49391,49408],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"pos":[51080,51087],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[52355,52382],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[53938,53953],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[55414,55446],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[57177,57194],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"pos":[58801,58823],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"pos":[60475,60496],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"pos":[62172,62199],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"pos":[63893,63913],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"pos":[65138,65183],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[65431,65437],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65605,65610],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[65805,65816],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[66029,66040],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[66239,66249],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[66344,66352],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66421,66422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66449,66450],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66520,66528],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[66597,66598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66625,66626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66809,66823],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[66942,66948],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67015,67016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67066,67072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67132,67133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67216,67222],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67289,67290],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67340,67346],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67406,67407],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67621,67643],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[67791,67797],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[67864,67865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67915,67921],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[67982,67983]},{"pos":[68038,68044],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68104,68105],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68202,68208],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[68275,68276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68326,68332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[68393,68394]},{"pos":[68449,68455],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[68515,68516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68761,68792],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[68958,68973],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69049,69050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69100,69106],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69167,69168]},{"pos":[69223,69229],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69289,69290],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69396,69411],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[69487,69488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69538,69544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[69605,69606]},{"pos":[69661,69667],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69727,69728],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69954,69963],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[70056,70063],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70131,70132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70159,70160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70229,70236],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[70304,70305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70332,70333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70508,70525],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[70634,70649],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70725,70726],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70753,70754],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70831,70846],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[70922,70923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70950,70951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71246,71259],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[71376,71387],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71446,71447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71474,71475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71556,71567],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[71626,71627],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71654,71655],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72010,72022],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[72155,72165],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[72232,72233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72260,72261],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72350,72360],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[72427,72428],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72455,72456],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72797,72812],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[73016,73029],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[73091,73092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73119,73120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73198,73214],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[73279,73280],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73307,73308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73686,73703],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[73915,73930],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[73994,73995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74022,74023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74103,74121],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[74188,74189],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74216,74217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74452,74458],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[74577,74595],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[74796,74820],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[74999,75010],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[75069,75070],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75137,75148],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75225,75226],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75339,75350],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[75409,75410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75477,75488],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[75565,75566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75794,75803],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[76009,76032],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[76227,76237],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[76304,76305],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76372,76383],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[76460,76461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76582,76592],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[76659,76660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76727,76738],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[76815,76816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77069,77087],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[77309,77335],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[77642,77655],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[77717,77718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77785,77796],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77873,77874],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77984,78000],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[78065,78066],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78133,78144],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[78221,78222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78511,78521],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[78721,78749],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[79064,79079],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[79143,79144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79211,79222],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[79299,79300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79412,79430],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[79497,79498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79565,79576],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[79653,79654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79916,79927],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[80086,80103],"content":"X509Certificate[]","needQuote":true,"nodes":[{"content":"X509Certificate[]","pos":[0,17]}]},{"pos":[80384,80399],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"content":"[]","pos":[80487,80489]},{"pos":[80602,80617],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[80704,80706],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[80958,80983],"content":"X509CertificateCollection","needQuote":true,"nodes":[{"content":"X509CertificateCollection","pos":[0,25]}]},{"pos":[81262,81267],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81496,81511],"content":"X509Certificate","needQuote":true,"nodes":[{"content":"X509Certificate","pos":[0,15]}]},{"pos":[81762,81769],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[82040,82091],"content":"X509CertificateCollection.X509CertificateEnumerator","needQuote":true,"nodes":[{"content":"X509CertificateCollection.X509CertificateEnumerator","pos":[0,51]}]},{"pos":[82467,82480],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[82581,82592],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[82664,82665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82692,82693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82766,82777],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[82849,82850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82877,82878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83086,83091],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[83349,83363],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[83642,83650],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[83902,83913],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[84155,84165],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[84411,84422],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[84639,84643],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[84699,84700]},{"pos":[84752,84757],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[84817,84818]},{"pos":[84912,84916],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[84971,84972],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85021,85026],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[85085,85086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85334,85341],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[85452,85457],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[85513,85514],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85541,85542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85620,85625],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[85681,85682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85709,85710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85924,85939],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[86078,86091],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[86161,86162],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86189,86190],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86282,86295],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[86365,86366],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86393,86394],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86610,86621],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[86856,86871],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[87014,87022],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[87081,87082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87131,87136],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87195,87196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87291,87299],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[87358,87359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87408,87413],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[87472,87473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87731,87751],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[87929,87935],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[87998,87999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88048,88053],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[88092,88093]},{"pos":[88147,88152],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88211,88212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88324,88330],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[88393,88394],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88443,88448],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[88487,88488]},{"pos":[88542,88547],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88606,88607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88818,88823],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[89012,89023],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[89158,89161],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[89215,89216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89266,89272],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89332,89333],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89424,89427],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[89481,89482],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89532,89538],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89598,89599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89827,89843],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[89988,89996],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[90055,90056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90106,90112],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90172,90173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90269,90277],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[90336,90337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90387,90393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90453,90454],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90691,90706],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[90849,90856],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[90914,90915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90965,90971],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91031,91032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91127,91134],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[91192,91193],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91243,91249],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91309,91310],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91557,91578],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[91746,91752],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[91809,91810],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91859,91864],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[91924,91925]},{"pos":[91980,91986],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92046,92047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92154,92160],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[92217,92218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92267,92272],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[92332,92333]},{"pos":[92388,92394],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[92454,92455],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92707,92721],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[92862,92868],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[92925,92926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92976,92982],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93042,93043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93137,93143],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[93200,93201],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93251,93257],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[93317,93318],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93504,93531],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[93737,93758],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[93959,93976],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  id: X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Clear\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Count\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.RemoveAt(System.Int32)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#IsSynchronized\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#SyncRoot\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IEnumerable#GetEnumerator\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Add(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Contains(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IndexOf(System.Object)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsFixedSize\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsReadOnly\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Item(System.Int32)\n  - System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509CertificateCollection\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 19\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Defines a collection that stores <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: 'public class X509CertificateCollection : IList, ICollection, IEnumerable'\n    content.vb: >-\n      Public Class X509CertificateCollection\n          Implements IList, ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: X509CertificateCollection\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: X509CertificateCollection()\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateCollection()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 192\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509CertificateCollection()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.X509CertificateCollection()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509Certificate[])'\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: X509CertificateCollection(X509Certificate[])\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateCollection(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 193\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from an array of <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: public X509CertificateCollection(X509Certificate[] value)\n    content.vb: Public Sub New(value As X509Certificate())\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate[]\n      description: \"\\n<p>The array of <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects with which to initialize the new object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateCollection(System.Security.Cryptography.X509Certificates.X509Certificate())\n  name.vb: X509CertificateCollection(X509Certificate())\n  nameWithType: X509CertificateCollection.X509CertificateCollection(X509Certificate[])\n  nameWithType.vb: X509CertificateCollection.X509CertificateCollection(X509Certificate())\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  id: '#ctor(System.Security.Cryptography.X509Certificates.X509CertificateCollection)'\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: X509CertificateCollection(X509CertificateCollection)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateCollection(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 194\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from another <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public X509CertificateCollection(X509CertificateCollection value)\n    content.vb: Public Sub New(value As X509CertificateCollection)\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with which to initialize the new object. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.X509CertificateCollection(X509CertificateCollection)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 195\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets or sets the entry at the specified index of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public X509Certificate this[int index] { get; set; }\n    content.vb: Public Property Item(index As Integer) As X509Certificate\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry to locate in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>index</em> parameter is outside the valid range of indexes for the collection. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: X509CertificateCollection.Item[Int32]\n  nameWithType.vb: X509CertificateCollection.Item(Int32)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Add(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 196\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Adds an <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified value to the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int Add(X509Certificate value)\n    content.vb: Public Function Add(value As X509Certificate) As Integer\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to add to the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index into the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at which the new <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was inserted.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.Add(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  id: AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: AddRange(X509Certificate[])\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddRange\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 197\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Copies the elements of an array of type <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the end of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void AddRange(X509Certificate[] value)\n    content.vb: Public Sub AddRange(value As X509Certificate())\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate[]\n      description: \"\\n<p>The array of type <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the objects to add to the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>value</em> parameter is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509Certificate())\n  name.vb: AddRange(X509Certificate())\n  nameWithType: X509CertificateCollection.AddRange(X509Certificate[])\n  nameWithType.vb: X509CertificateCollection.AddRange(X509Certificate())\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  id: AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: AddRange(X509CertificateCollection)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.AddRange(System.Security.Cryptography.X509Certificates.X509CertificateCollection)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddRange\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 198\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Copies the elements of the specified <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the end of the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void AddRange(X509CertificateCollection value)\n    content.vb: Public Sub AddRange(value As X509CertificateCollection)\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the objects to add to the collection. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>value</em> parameter is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.AddRange(X509CertificateCollection)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Contains(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Contains\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 199\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains the specified <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Contains(X509Certificate value)\n    content.vb: Public Function Contains(value As X509Certificate) As Boolean\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is contained in this collection; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.Contains(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)\n  id: CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[],System.Int32)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(X509Certificate[], Int32)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 200\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(X509Certificate[] array, int index)\n    content.vb: Public Sub CopyTo(array As X509Certificate(), index As Integer)\n    parameters:\n    - id: array\n      type: System.Security.Cryptography.X509Certificates.X509Certificate[]\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the values copied from <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index into <em>array</em> to begin copying. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>array</em> parameter is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space between <em>arrayIndex</em> and the end of <em>array</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>array</em> parameter is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>arrayIndex</em> parameter is less than the <em>array</em> parameter's lower bound. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509CertificateCollection.CopyTo(System.Security.Cryptography.X509Certificates.X509Certificate(), System.Int32)\n  name.vb: CopyTo(X509Certificate(), Int32)\n  nameWithType: X509CertificateCollection.CopyTo(X509Certificate[], Int32)\n  nameWithType.vb: X509CertificateCollection.CopyTo(X509Certificate(), Int32)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator\n  id: GetEnumerator\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 201\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns an enumerator that can iterate through the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public X509CertificateCollection.X509CertificateEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As X509CertificateCollection.X509CertificateEnumerator\n    return:\n      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator\n      description: \"\\n<p>An enumerator of the subelements of <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> you can use to iterate through the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.GetEnumerator()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 202\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Builds a hash value based on all values contained in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash value based on all values contained in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509CertificateCollection.GetHashCode()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IndexOf(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.IndexOf(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IndexOf\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 203\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Returns the index of the specified <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public int IndexOf(X509Certificate value)\n    content.vb: Public Function IndexOf(value As X509Certificate) As Integer\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified by the <em>value</em> parameter in the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Contains(System.Security.Cryptography.X509Certificates.X509Certificate)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.IndexOf(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: Insert(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Insert(System.Int32, System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Insert\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 204\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Inserts a <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> into the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public void Insert(int index, X509Certificate value)\n    content.vb: Public Sub Insert(index As Integer, value As X509Certificate)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index where <em>value</em> should be inserted. </p>\\n\"\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert. </p>\\n\"\n  seealso:\n  - type: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n    commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Add(System.Security.Cryptography.X509Certificates.X509Certificate)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.Insert(Int32, X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)\n  id: Remove(System.Security.Cryptography.X509Certificates.X509Certificate)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Remove(X509Certificate)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Remove(System.Security.Cryptography.X509Certificates.X509Certificate)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 205\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Removes a specific <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public void Remove(X509Certificate value)\n    content.vb: Public Sub Remove(value As X509Certificate)\n    parameters:\n    - id: value\n      type: System.Security.Cryptography.X509Certificates.X509Certificate\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Certificate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> specified by the <em>value</em> parameter is not found in the current <xref href=\\\"System.Security.Cryptography.X509Certificates.X509CertificateCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.Remove(X509Certificate)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Count\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Count\n  id: Count\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 21\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509CertificateCollection.Count\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 22\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: X509CertificateCollection.ICollection.IsSynchronized\n  nameWithType.vb: X509CertificateCollection.System.Collections.ICollection.IsSynchronized\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 23\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: X509CertificateCollection.ICollection.SyncRoot\n  nameWithType.vb: X509CertificateCollection.System.Collections.ICollection.SyncRoot\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsFixedSize\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 24\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: X509CertificateCollection.IList.IsFixedSize\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.IsFixedSize\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsReadOnly\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 25\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: X509CertificateCollection.IList.IsReadOnly\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.IsReadOnly\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.this[]\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 26\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n    return:\n      type: System.Object\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: X509CertificateCollection.IList.Item[Int32]\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.Item(Int32)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Clear\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.Clear\n  id: Clear\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 27\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.Clear()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 28\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: X509CertificateCollection.IEnumerable.GetEnumerator()\n  nameWithType.vb: X509CertificateCollection.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.RemoveAt(System.Int32)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveAt\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 29\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509CertificateCollection.RemoveAt(Int32)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 30\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n    - id: index\n      type: System.Int32\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: X509CertificateCollection.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: X509CertificateCollection.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Add\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 31\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: X509CertificateCollection.IList.Add(Object)\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.Add(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Contains\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 32\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Boolean\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: X509CertificateCollection.IList.Contains(Object)\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.Contains(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.IndexOf\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 33\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n    return:\n      type: System.Int32\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: X509CertificateCollection.IList.IndexOf(Object)\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.IndexOf(Object)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Insert\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 34\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n    - id: value\n      type: System.Object\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: X509CertificateCollection.IList.Insert(Int32, Object)\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.Insert(Int32, Object)\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509CertificateCollection.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IList.Remove\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.Manual.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: X509CertificateCollection.IList.Remove(Object)\n  nameWithType.vb: X509CertificateCollection.System.Collections.IList.Remove(Object)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  commentId: T:System.Collections.IList\n  nameWithType: IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  commentId: T:System.Collections.ICollection\n  nameWithType: ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate[]\n  name: X509Certificate[]\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate[]\n  fullname.vb: System.Security.Cryptography.X509Certificates.X509Certificate()\n  name.vb: X509Certificate()\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate\n    name: X509Certificate\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Certificate\n    name: X509Certificate\n    fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  - name: ()\n    fullName: ()\n  nameWithType: X509Certificate[]\n  nameWithType.vb: X509Certificate()\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection\n  nameWithType: X509CertificateCollection\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.X509Certificates.X509Certificate\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Certificate\n  fullName: System.Security.Cryptography.X509Certificates.X509Certificate\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate\n  nameWithType: X509Certificate\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509CertificateCollection.X509CertificateEnumerator\n  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator\n  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator\n  nameWithType: X509CertificateCollection.X509CertificateEnumerator\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Collections.IList.Item(System.Int32)\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.Clear\n  nameWithType: IList.Clear()\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n  nameWithType: IEnumerable.GetEnumerator()\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  commentId: T:System.Collections.IEnumerator\n  nameWithType: IEnumerator\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n  nameWithType: IList.RemoveAt(Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  nameWithType: ICollection.CopyTo(Array, Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  commentId: T:System.Array\n  nameWithType: Array\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.Add(System.Object)\n  nameWithType: IList.Add(Object)\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.Contains(System.Object)\n  nameWithType: IList.Contains(Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n  nameWithType: IList.IndexOf(Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n  nameWithType: IList.Insert(Int32, Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Collections.IList.Remove(System.Object)\n  nameWithType: IList.Remove(Object)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}