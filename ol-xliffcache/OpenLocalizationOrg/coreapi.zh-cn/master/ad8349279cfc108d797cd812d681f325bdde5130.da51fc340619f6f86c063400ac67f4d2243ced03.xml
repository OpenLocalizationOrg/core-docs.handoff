{"nodes":[{"pos":[1015,1035],"content":"MethodImplAttributes","needQuote":true,"nodes":[{"content":"MethodImplAttributes","pos":[0,20]}]},{"pos":[2198,2216],"content":"AggressiveInlining","needQuote":true,"nodes":[{"content":"AggressiveInlining","pos":[0,18]}]},{"pos":[3331,3343],"content":"CodeTypeMask","needQuote":true,"nodes":[{"content":"CodeTypeMask","pos":[0,12]}]},{"pos":[4283,4293],"content":"ForwardRef","needQuote":true,"nodes":[{"content":"ForwardRef","pos":[0,10]}]},{"pos":[5211,5213],"content":"IL","needQuote":true,"nodes":[{"content":"IL","pos":[0,2]}]},{"pos":[6173,6185],"content":"InternalCall","needQuote":true,"nodes":[{"content":"InternalCall","pos":[0,12]}]},{"pos":[7114,7121],"content":"Managed","needQuote":true,"nodes":[{"content":"Managed","pos":[0,7]}]},{"pos":[8069,8080],"content":"ManagedMask","needQuote":true,"nodes":[{"content":"ManagedMask","pos":[0,11]}]},{"pos":[9045,9051],"content":"Native","needQuote":true,"nodes":[{"content":"Native","pos":[0,6]}]},{"pos":[9986,9996],"content":"NoInlining","needQuote":true,"nodes":[{"content":"NoInlining","pos":[0,10]}]},{"pos":[10952,10966],"content":"NoOptimization","needQuote":true,"nodes":[{"content":"NoOptimization","pos":[0,14]}]},{"pos":[12039,12044],"content":"OPTIL","needQuote":true,"nodes":[{"content":"OPTIL","pos":[0,5]}]},{"pos":[13014,13025],"content":"PreserveSig","needQuote":true,"nodes":[{"content":"PreserveSig","pos":[0,11]}]},{"pos":[13990,13997],"content":"Runtime","needQuote":true,"nodes":[{"content":"Runtime","pos":[0,7]}]},{"pos":[14959,14971],"content":"Synchronized","needQuote":true,"nodes":[{"content":"Synchronized","pos":[0,12]}]},{"pos":[16158,16167],"content":"Unmanaged","needQuote":true,"nodes":[{"content":"Unmanaged","pos":[0,9]}]},{"pos":[16964,16981],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[17181,17201],"content":"MethodImplAttributes","needQuote":true,"nodes":[{"content":"MethodImplAttributes","pos":[0,20]}]}],"content":"items:\n- uid: System.Reflection.MethodImplAttributes\n  commentId: T:System.Reflection.MethodImplAttributes\n  id: MethodImplAttributes\n  parent: System.Reflection\n  children:\n  - System.Reflection.MethodImplAttributes.AggressiveInlining\n  - System.Reflection.MethodImplAttributes.CodeTypeMask\n  - System.Reflection.MethodImplAttributes.ForwardRef\n  - System.Reflection.MethodImplAttributes.IL\n  - System.Reflection.MethodImplAttributes.InternalCall\n  - System.Reflection.MethodImplAttributes.Managed\n  - System.Reflection.MethodImplAttributes.ManagedMask\n  - System.Reflection.MethodImplAttributes.Native\n  - System.Reflection.MethodImplAttributes.NoInlining\n  - System.Reflection.MethodImplAttributes.NoOptimization\n  - System.Reflection.MethodImplAttributes.OPTIL\n  - System.Reflection.MethodImplAttributes.PreserveSig\n  - System.Reflection.MethodImplAttributes.Runtime\n  - System.Reflection.MethodImplAttributes.Synchronized\n  - System.Reflection.MethodImplAttributes.Unmanaged\n  langs:\n  - csharp\n  - vb\n  name: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MethodImplAttributes\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 11\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies flags for the attributes of a method implementation.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public enum MethodImplAttributes\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Enum MethodImplAttributes\n  seealso:\n  - type: System.Reflection\n    commentId: N:System.Reflection\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: MethodImplAttributes\n- uid: System.Reflection.MethodImplAttributes.AggressiveInlining\n  commentId: F:System.Reflection.MethodImplAttributes.AggressiveInlining\n  id: AggressiveInlining\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: AggressiveInlining\n  fullName: System.Reflection.MethodImplAttributes.AggressiveInlining\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AggressiveInlining\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 38\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method should be inlined wherever possible.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      AggressiveInlining = 256\n    content.vb: >-\n      <ComVisible(False)>\n\n      AggressiveInlining = 256\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.AggressiveInlining\n- uid: System.Reflection.MethodImplAttributes.CodeTypeMask\n  commentId: F:System.Reflection.MethodImplAttributes.CodeTypeMask\n  id: CodeTypeMask\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: CodeTypeMask\n  fullName: System.Reflection.MethodImplAttributes.CodeTypeMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CodeTypeMask\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 16\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies flags about code type.</p>\\n\"\n  syntax:\n    content: CodeTypeMask = 3\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.CodeTypeMask\n- uid: System.Reflection.MethodImplAttributes.ForwardRef\n  commentId: F:System.Reflection.MethodImplAttributes.ForwardRef\n  id: ForwardRef\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: ForwardRef\n  fullName: System.Reflection.MethodImplAttributes.ForwardRef\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ForwardRef\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method is not defined.</p>\\n\"\n  syntax:\n    content: ForwardRef = 16\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.ForwardRef\n- uid: System.Reflection.MethodImplAttributes.IL\n  commentId: F:System.Reflection.MethodImplAttributes.IL\n  id: IL\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: IL\n  fullName: System.Reflection.MethodImplAttributes.IL\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IL\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method implementation is in Microsoft intermediate language (MSIL).</p>\\n\"\n  syntax:\n    content: IL = 0\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.IL\n- uid: System.Reflection.MethodImplAttributes.InternalCall\n  commentId: F:System.Reflection.MethodImplAttributes.InternalCall\n  id: InternalCall\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: InternalCall\n  fullName: System.Reflection.MethodImplAttributes.InternalCall\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InternalCall\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 34\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies an internal call.</p>\\n\"\n  syntax:\n    content: InternalCall = 4096\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.InternalCall\n- uid: System.Reflection.MethodImplAttributes.Managed\n  commentId: F:System.Reflection.MethodImplAttributes.Managed\n  id: Managed\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: Managed\n  fullName: System.Reflection.MethodImplAttributes.Managed\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Managed\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method is implemented in managed code.</p>\\n\"\n  syntax:\n    content: Managed = 0\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.Managed\n- uid: System.Reflection.MethodImplAttributes.ManagedMask\n  commentId: F:System.Reflection.MethodImplAttributes.ManagedMask\n  id: ManagedMask\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: ManagedMask\n  fullName: System.Reflection.MethodImplAttributes.ManagedMask\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ManagedMask\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 25\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies whether the method is implemented in managed or unmanaged code.</p>\\n\"\n  syntax:\n    content: ManagedMask = 4\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.ManagedMask\n- uid: System.Reflection.MethodImplAttributes.Native\n  commentId: F:System.Reflection.MethodImplAttributes.Native\n  id: Native\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: Native\n  fullName: System.Reflection.MethodImplAttributes.Native\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Native\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 18\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method implementation is native.</p>\\n\"\n  syntax:\n    content: Native = 1\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.Native\n- uid: System.Reflection.MethodImplAttributes.NoInlining\n  commentId: F:System.Reflection.MethodImplAttributes.NoInlining\n  id: NoInlining\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: NoInlining\n  fullName: System.Reflection.MethodImplAttributes.NoInlining\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NoInlining\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 37\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method cannot be inlined.</p>\\n\"\n  syntax:\n    content: NoInlining = 8\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.NoInlining\n- uid: System.Reflection.MethodImplAttributes.NoOptimization\n  commentId: F:System.Reflection.MethodImplAttributes.NoOptimization\n  id: NoOptimization\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: NoOptimization\n  fullName: System.Reflection.MethodImplAttributes.NoOptimization\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NoOptimization\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 40\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method is not optimized by the just-in-time (JIT) compiler or by native code generation (see Ngen.exe) when debugging possible code generation problems.</p>\\n\"\n  syntax:\n    content: NoOptimization = 64\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.NoOptimization\n- uid: System.Reflection.MethodImplAttributes.OPTIL\n  commentId: F:System.Reflection.MethodImplAttributes.OPTIL\n  id: OPTIL\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: OPTIL\n  fullName: System.Reflection.MethodImplAttributes.OPTIL\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OPTIL\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 20\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method implementation is in Optimized Intermediate Language (OPTIL).</p>\\n\"\n  syntax:\n    content: OPTIL = 2\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.OPTIL\n- uid: System.Reflection.MethodImplAttributes.PreserveSig\n  commentId: F:System.Reflection.MethodImplAttributes.PreserveSig\n  id: PreserveSig\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: PreserveSig\n  fullName: System.Reflection.MethodImplAttributes.PreserveSig\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PreserveSig\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 32\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method signature is exported exactly as declared.</p>\\n\"\n  syntax:\n    content: PreserveSig = 128\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.PreserveSig\n- uid: System.Reflection.MethodImplAttributes.Runtime\n  commentId: F:System.Reflection.MethodImplAttributes.Runtime\n  id: Runtime\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: Runtime\n  fullName: System.Reflection.MethodImplAttributes.Runtime\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Runtime\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method implementation is provided by the runtime.</p>\\n\"\n  syntax:\n    content: Runtime = 3\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.Runtime\n- uid: System.Reflection.MethodImplAttributes.Synchronized\n  commentId: F:System.Reflection.MethodImplAttributes.Synchronized\n  id: Synchronized\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: Synchronized\n  fullName: System.Reflection.MethodImplAttributes.Synchronized\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 36\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method is single-threaded through the body. Static methods (<strong>Shared</strong> in Visual Basic) lock on the type, whereas instance methods lock on the instance. You can also use the C# lock statement or the Visual Basic SyncLock statement for this purpose. </p>\\n\"\n  syntax:\n    content: Synchronized = 32\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.Synchronized\n- uid: System.Reflection.MethodImplAttributes.Unmanaged\n  commentId: F:System.Reflection.MethodImplAttributes.Unmanaged\n  id: Unmanaged\n  parent: System.Reflection.MethodImplAttributes\n  langs:\n  - csharp\n  - vb\n  name: Unmanaged\n  fullName: System.Reflection.MethodImplAttributes.Unmanaged\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Unmanaged\n    path: src/mscorlib/src/System/Reflection/MethodImplAttributes.cs\n    startLine: 26\n  assemblies:\n  - System.Reflection.Primitives\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the method is implemented in unmanaged code.</p>\\n\"\n  syntax:\n    content: Unmanaged = 4\n    return:\n      type: System.Reflection.MethodImplAttributes\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: MethodImplAttributes.Unmanaged\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.MethodImplAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: MethodImplAttributes\n  fullName: System.Reflection.MethodImplAttributes\n  nameWithType: MethodImplAttributes\n  commentId: T:System.Reflection.MethodImplAttributes\n"}