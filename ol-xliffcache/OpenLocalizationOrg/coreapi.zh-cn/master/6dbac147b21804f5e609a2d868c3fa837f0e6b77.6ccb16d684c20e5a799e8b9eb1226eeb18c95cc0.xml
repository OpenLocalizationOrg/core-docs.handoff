{"nodes":[{"pos":[2515,2533],"content":"PropertyDescriptor","needQuote":true,"nodes":[{"content":"PropertyDescriptor","pos":[0,18]}]},{"pos":[5214,5250],"content":"PropertyDescriptor(MemberDescriptor)","needQuote":true,"nodes":[{"content":"PropertyDescriptor(MemberDescriptor)","pos":[0,36]}]},{"pos":[7163,7212],"content":"PropertyDescriptor(MemberDescriptor, Attribute[])","needQuote":true,"nodes":[{"content":"PropertyDescriptor(MemberDescriptor, Attribute[])","pos":[0,49]}]},{"pos":[9903,9942],"content":"PropertyDescriptor(String, Attribute[])","needQuote":true,"nodes":[{"content":"PropertyDescriptor(String, Attribute[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The name of the property.","pos":[10919,10949],"source":"\\n<p>The name of the property."},{"content":"&lt;/p&gt;\\n","pos":[10950,10956],"source":" </p>\\n"},{"pos":[11859,11872],"content":"ComponentType","needQuote":true,"nodes":[{"content":"ComponentType","pos":[0,13]}]},{"pos":[13600,13609],"content":"Converter","needQuote":true,"nodes":[{"content":"Converter","pos":[0,9]}]},{"pos":[15150,15163],"content":"IsLocalizable","needQuote":true,"nodes":[{"content":"IsLocalizable","pos":[0,13]}]},{"pos":[16851,16861],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the property is read-only; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17698,17797],"source":"\\n<p>\\n<strong>true</strong> if the property is read-only; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18307,18319],"content":"PropertyType","needQuote":true,"nodes":[{"content":"PropertyType","pos":[0,12]}]},{"pos":[19673,19693],"content":"SupportsChangeEvents","needQuote":true,"nodes":[{"content":"SupportsChangeEvents","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20601,20752],"source":"\\n<p>\\n<strong>true</strong> if value change notifications may originate from outside the property descriptor; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[21266,21303],"content":"AddValueChanged(Object, EventHandler)","needQuote":true,"nodes":[{"content":"AddValueChanged(Object, EventHandler)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The component to add the handler for.","pos":[22217,22259],"source":"\\n<p>The component to add the handler for."},{"content":"&lt;/p&gt;\\n","pos":[22260,22266],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate to add as a listener.","pos":[22338,22377],"source":"\\n<p>The delegate to add as a listener."},{"content":"&lt;/p&gt;\\n","pos":[22378,22384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;component&lt;/em&gt; or &lt;em&gt;handler&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22503,22580],"source":"\\n<p>\\n<em>component</em> or <em>handler</em> is <strong>null</strong>.</p>\\n"},{"pos":[23024,23045],"content":"CanResetValue(Object)","needQuote":true,"nodes":[{"content":"CanResetValue(Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The component to test for reset capability.","pos":[23927,23975],"source":"\\n<p>The component to test for reset capability."},{"content":"&lt;/p&gt;\\n","pos":[23976,23982],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if resetting the component changes its value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24043,24158],"source":"\\n<p>\\n<strong>true</strong> if resetting the component changes its value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[24705,24725],"content":"CreateInstance(Type)","needQuote":true,"nodes":[{"content":"CreateInstance(Type)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A new instance of the type.&lt;/p&gt;\\n","pos":[25706,25744],"source":"\\n<p>A new instance of the type.</p>\\n"},{"pos":[26467,26481],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the values are equivalent; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27490,27589],"source":"\\n<p>\\n<strong>true</strong> if the values are equivalent; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[28120,28141],"content":"FillAttributes(IList)","needQuote":true,"nodes":[{"content":"FillAttributes(IList)","pos":[0,21]}]},{"pos":[29808,29828],"content":"GetChildProperties()","needQuote":true,"nodes":[{"content":"GetChildProperties()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A collection of property descriptor.&lt;/p&gt;\\n","pos":[30757,30804],"source":"\\n<p>A collection of property descriptor.</p>\\n"},{"pos":[31747,31778],"content":"GetChildProperties(Attribute[])","needQuote":true,"nodes":[{"content":"GetChildProperties(Attribute[])","pos":[0,31]}]},{"pos":[34344,34370],"content":"GetChildProperties(Object)","needQuote":true,"nodes":[{"content":"GetChildProperties(Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A component to get the properties for.","pos":[35342,35385],"source":"\\n<p>A component to get the properties for."},{"content":"&lt;/p&gt;\\n","pos":[35386,35392],"source":" </p>\\n"},{"pos":[36652,36691],"content":"GetChildProperties(Object, Attribute[])","needQuote":true,"nodes":[{"content":"GetChildProperties(Object, Attribute[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;A component to get the properties for.","pos":[37796,37839],"source":"\\n<p>A component to get the properties for."},{"content":"&lt;/p&gt;\\n","pos":[37840,37846],"source":" </p>\\n"},{"pos":[39527,39542],"content":"GetEditor(Type)","needQuote":true,"nodes":[{"content":"GetEditor(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The base type of editor, which is used to differentiate between multiple editors that a property supports.","pos":[40361,40472],"source":"\\n<p>The base type of editor, which is used to differentiate between multiple editors that a property supports."},{"content":"&lt;/p&gt;\\n","pos":[40473,40479],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An instance of the requested editor type, or &lt;strong&gt;null&lt;/strong&gt; if an editor cannot be found.&lt;/p&gt;\\n","pos":[40539,40646],"source":"\\n<p>An instance of the requested editor type, or <strong>null</strong> if an editor cannot be found.</p>\\n"},{"pos":[41017,41030],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for this object.&lt;/p&gt;\\n","pos":[41773,41814],"source":"\\n<p>The hash code for this object.</p>\\n"},{"pos":[42352,42385],"content":"GetInvocationTarget(Type, Object)","needQuote":true,"nodes":[{"content":"GetInvocationTarget(Type, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The potential invocation target.&lt;/p&gt;\\n","pos":[43493,43536],"source":"\\n<p>The potential invocation target.</p>\\n"},{"pos":[44285,44308],"content":"GetTypeFromName(String)","needQuote":true,"nodes":[{"content":"GetTypeFromName(String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The assembly-qualified name of the type to retrieve.","pos":[45116,45173],"source":"\\n<p>The assembly-qualified name of the type to retrieve."},{"content":"&lt;/p&gt;\\n","pos":[45174,45180],"source":" </p>\\n"},{"pos":[45802,45818],"content":"GetValue(Object)","needQuote":true,"nodes":[{"content":"GetValue(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The component with the property for which to retrieve the value.","pos":[46681,46750],"source":"\\n<p>The component with the property for which to retrieve the value."},{"content":"&lt;/p&gt;\\n","pos":[46751,46757],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of a property for a given component.&lt;/p&gt;\\n","pos":[46817,46874],"source":"\\n<p>The value of a property for a given component.</p>\\n"},{"pos":[47326,47356],"content":"GetValueChangedHandler(Object)","needQuote":true,"nodes":[{"content":"GetValueChangedHandler(Object)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The component for which to retrieve event handlers.&lt;/p&gt;\\n","pos":[48275,48337],"source":"\\n<p>The component for which to retrieve event handlers.</p>\\n"},{"content":"\\n&lt;p&gt;A combined multicast event handler, or &lt;strong&gt;null&lt;/strong&gt; if no event handlers are currently assigned to &lt;em&gt;component&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48403,48541],"source":"\\n<p>A combined multicast event handler, or <strong>null</strong> if no event handlers are currently assigned to <em>component</em>.</p>\\n"},{"pos":[49010,49043],"content":"OnValueChanged(Object, EventArgs)","needQuote":true,"nodes":[{"content":"OnValueChanged(Object, EventArgs)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The object that raises the event.","pos":[50124,50162],"source":"\\n<p>The object that raises the event."},{"content":"&lt;/p&gt;\\n","pos":[50163,50169],"source":" </p>\\n"},{"pos":[50874,50914],"content":"RemoveValueChanged(Object, EventHandler)","needQuote":true,"nodes":[{"content":"RemoveValueChanged(Object, EventHandler)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The component to remove the handler for.","pos":[51840,51885],"source":"\\n<p>The component to remove the handler for."},{"content":"&lt;/p&gt;\\n","pos":[51886,51892],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The delegate to remove as a listener.","pos":[51964,52006],"source":"\\n<p>The delegate to remove as a listener."},{"content":"&lt;/p&gt;\\n","pos":[52007,52013],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;component&lt;/em&gt; or &lt;em&gt;handler&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52132,52209],"source":"\\n<p>\\n<em>component</em> or <em>handler</em> is <strong>null</strong>.</p>\\n"},{"pos":[52647,52665],"content":"ResetValue(Object)","needQuote":true,"nodes":[{"content":"ResetValue(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The component with the property value that is to be reset to the default value.","pos":[53538,53622],"source":"\\n<p>The component with the property value that is to be reset to the default value."},{"content":"&lt;/p&gt;\\n","pos":[53623,53629],"source":" </p>\\n"},{"pos":[54161,54184],"content":"SerializationVisibility","needQuote":true,"nodes":[{"content":"SerializationVisibility","pos":[0,23]}]},{"pos":[56197,56221],"content":"SetValue(Object, Object)","needQuote":true,"nodes":[{"content":"SetValue(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The component with the property value that is to be set.","pos":[57112,57173],"source":"\\n<p>The component with the property value that is to be set."},{"content":"&lt;/p&gt;\\n","pos":[57174,57180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new value.","pos":[57244,57263],"source":"\\n<p>The new value."},{"content":"&lt;/p&gt;\\n","pos":[57264,57270],"source":" </p>\\n"},{"pos":[57844,57872],"content":"ShouldSerializeValue(Object)","needQuote":true,"nodes":[{"content":"ShouldSerializeValue(Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The component with the property to be examined for persistence.","pos":[58815,58883],"source":"\\n<p>The component with the property to be examined for persistence."},{"content":"&lt;/p&gt;\\n","pos":[58884,58890],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the property should be persisted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58951,59057],"source":"\\n<p>\\n<strong>true</strong> if the property should be persisted; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[59412,59433],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[59609,59615],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59800,59816],"content":"MemberDescriptor","needQuote":true,"nodes":[{"content":"MemberDescriptor","pos":[0,16]}]},{"pos":[60093,60107],"content":"AttributeArray","needQuote":true,"nodes":[{"content":"AttributeArray","pos":[0,14]}]},{"pos":[60425,60435],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[60739,60747],"content":"Category","needQuote":true,"nodes":[{"content":"Category","pos":[0,8]}]},{"pos":[61048,61059],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[61372,61386],"content":"DesignTimeOnly","needQuote":true,"nodes":[{"content":"DesignTimeOnly","pos":[0,14]}]},{"pos":[61705,61716],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"pos":[62026,62037],"content":"IsBrowsable","needQuote":true,"nodes":[{"content":"IsBrowsable","pos":[0,11]}]},{"pos":[62340,62344],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[62634,62646],"content":"NameHashCode","needQuote":true,"nodes":[{"content":"NameHashCode","pos":[0,12]}]},{"pos":[62973,63000],"content":"CreateAttributeCollection()","needQuote":true,"nodes":[{"content":"CreateAttributeCollection()","pos":[0,27]}]},{"pos":[63179,63204],"content":"CreateAttributeCollection","needQuote":true,"nodes":[{"content":"CreateAttributeCollection","pos":[0,25]}]},{"pos":[63294,63295],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63322,63323],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63435,63460],"content":"CreateAttributeCollection","needQuote":true,"nodes":[{"content":"CreateAttributeCollection","pos":[0,25]}]},{"pos":[63550,63551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63578,63579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63923,63961],"content":"FindMethod(Type, String, Type[], Type)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type)","pos":[0,38]}]},{"pos":[64388,64398],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[64473,64474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64522,64526],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[64585,64586]},{"pos":[64641,64647],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[64708,64709]},{"pos":[64762,64766],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[64825,64827]},{"content":",","pos":[64859,64860]},{"pos":[64913,64917],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[64975,64976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65126,65136],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[65211,65212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65260,65264],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[65323,65324]},{"pos":[65379,65385],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[65446,65447]},{"pos":[65500,65504],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[65562,65564],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[65593,65594]},{"pos":[65647,65651],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[65709,65710],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66193,66240],"content":"FindMethod(Type, String, Type[], Type, Boolean)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type, Boolean)","pos":[0,47]}]},{"pos":[66723,66733],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[66808,66809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66857,66861],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[66920,66921]},{"pos":[66976,66982],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[67043,67044]},{"pos":[67097,67101],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[67160,67162]},{"content":",","pos":[67194,67195]},{"pos":[67248,67252],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[67311,67312]},{"pos":[67368,67375],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[67436,67437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67602,67612],"content":"FindMethod","needQuote":true,"nodes":[{"content":"FindMethod","pos":[0,10]}]},{"pos":[67687,67688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67736,67740],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[67799,67800]},{"pos":[67855,67861],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[67922,67923]},{"pos":[67976,67980],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[68038,68040],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[68069,68070]},{"pos":[68123,68127],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[68186,68187]},{"pos":[68243,68250],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68311,68312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68772,68787],"content":"GetSite(Object)","needQuote":true,"nodes":[{"content":"GetSite(Object)","pos":[0,15]}]},{"pos":[68958,68965],"content":"GetSite","needQuote":true,"nodes":[{"content":"GetSite","pos":[0,7]}]},{"pos":[69037,69038],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69088,69094],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69154,69155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69264,69271],"content":"GetSite","needQuote":true,"nodes":[{"content":"GetSite","pos":[0,7]}]},{"pos":[69343,69344],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69394,69400],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[69460,69461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69685,69695],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[69790,69798],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[69867,69868],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69895,69896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69966,69974],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[70043,70044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70071,70072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70269,70291],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[70439,70445],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70512,70513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70563,70569],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70630,70631]},{"pos":[70686,70692],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70752,70753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70850,70856],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70923,70924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70974,70980],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71041,71042]},{"pos":[71097,71103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71163,71164],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71409,71440],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[71606,71621],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71697,71698],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71748,71754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71815,71816]},{"pos":[71871,71877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71937,71938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72044,72059],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[72135,72136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72186,72192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[72253,72254]},{"pos":[72309,72315],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72375,72376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72602,72611],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[72704,72711],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72779,72780],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72807,72808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72877,72884],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72952,72953],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72980,72981],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73156,73173],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[73282,73297],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73373,73374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73401,73402],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73479,73494],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73570,73571],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73598,73599],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73744,73750],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[73849,73860],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[74000,74009],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[74073,74075]},{"pos":[74143,74152],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[74215,74217],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74360,74366],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74509,74513],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[74689,74702],"content":"TypeConverter","needQuote":true,"nodes":[{"content":"TypeConverter","pos":[0,13]}]},{"pos":[74899,74906],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[75060,75072],"content":"EventHandler","needQuote":true,"nodes":[{"content":"EventHandler","pos":[0,12]}]},{"pos":[75313,75327],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75496,75502],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75573,75574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75624,75630],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75690,75691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75799,75805],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75876,75877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75927,75933],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75993,75994],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76298,76319],"content":"FillAttributes(IList)","needQuote":true,"nodes":[{"content":"FillAttributes(IList)","pos":[0,21]}]},{"pos":[76526,76540],"content":"FillAttributes","needQuote":true,"nodes":[{"content":"FillAttributes","pos":[0,14]}]},{"pos":[76619,76620],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76681,76686],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[76757,76758],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76885,76899],"content":"FillAttributes","needQuote":true,"nodes":[{"content":"FillAttributes","pos":[0,14]}]},{"pos":[76978,76979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77040,77045],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[77116,77117],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77373,77378],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[77532,77550],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[77769,77797],"content":"PropertyDescriptorCollection","needQuote":true,"nodes":[{"content":"PropertyDescriptorCollection","pos":[0,28]}]},{"pos":[78107,78120],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[78271,78282],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[78358,78359],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78386,78387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78485,78496],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[78572,78573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78600,78601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78796,78801],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79046,79079],"content":"GetInvocationTarget(Type, Object)","needQuote":true,"nodes":[{"content":"GetInvocationTarget(Type, Object)","pos":[0,33]}]},{"pos":[79299,79318],"content":"GetInvocationTarget","needQuote":true,"nodes":[{"content":"GetInvocationTarget","pos":[0,19]}]},{"pos":[79402,79403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79451,79455],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[79514,79515]},{"pos":[79570,79576],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79636,79637],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79770,79789],"content":"GetInvocationTarget","needQuote":true,"nodes":[{"content":"GetInvocationTarget","pos":[0,19]}]},{"pos":[79873,79874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79922,79926],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[79985,79986]},{"pos":[80041,80047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80107,80108],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80362,80371],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[80580,80611],"content":"DesignerSerializationVisibility","needQuote":true,"nodes":[{"content":"DesignerSerializationVisibility","pos":[0,31]}]},{"pos":[80859,80880],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.PropertyDescriptor\n  commentId: T:System.ComponentModel.PropertyDescriptor\n  id: PropertyDescriptor\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  - System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])\n  - System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)\n  - System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)\n  - System.ComponentModel.PropertyDescriptor.ComponentType\n  - System.ComponentModel.PropertyDescriptor.Converter\n  - System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)\n  - System.ComponentModel.PropertyDescriptor.Equals(System.Object)\n  - System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)\n  - System.ComponentModel.PropertyDescriptor.GetChildProperties\n  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])\n  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)\n  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])\n  - System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)\n  - System.ComponentModel.PropertyDescriptor.GetHashCode\n  - System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)\n  - System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)\n  - System.ComponentModel.PropertyDescriptor.GetValue(System.Object)\n  - System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)\n  - System.ComponentModel.PropertyDescriptor.IsLocalizable\n  - System.ComponentModel.PropertyDescriptor.IsReadOnly\n  - System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)\n  - System.ComponentModel.PropertyDescriptor.PropertyType\n  - System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)\n  - System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)\n  - System.ComponentModel.PropertyDescriptor.SerializationVisibility\n  - System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)\n  - System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)\n  - System.ComponentModel.PropertyDescriptor.SupportsChangeEvents\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptor\n  fullName: System.ComponentModel.PropertyDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropertyDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 15\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides an abstraction of a property on a class.</p>\\n\"\n  syntax:\n    content: 'public abstract class PropertyDescriptor : MemberDescriptor'\n    content.vb: >-\n      Public MustInherit Class PropertyDescriptor\n          Inherits MemberDescriptor\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor\n    commentId: T:System.ComponentModel.MemberDescriptor\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  - type: System.ComponentModel.DefaultValueAttribute\n    commentId: T:System.ComponentModel.DefaultValueAttribute\n  inheritance:\n  - System.Object\n  - System.ComponentModel.MemberDescriptor\n  inheritedMembers:\n  - System.ComponentModel.MemberDescriptor.AttributeArray\n  - System.ComponentModel.MemberDescriptor.Attributes\n  - System.ComponentModel.MemberDescriptor.Category\n  - System.ComponentModel.MemberDescriptor.Description\n  - System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  - System.ComponentModel.MemberDescriptor.DisplayName\n  - System.ComponentModel.MemberDescriptor.IsBrowsable\n  - System.ComponentModel.MemberDescriptor.Name\n  - System.ComponentModel.MemberDescriptor.NameHashCode\n  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: PropertyDescriptor\n- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  commentId: M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  id: '#ctor(System.ComponentModel.MemberDescriptor)'\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptor(MemberDescriptor)\n  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(System.ComponentModel.MemberDescriptor)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 42\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name and attributes in the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected PropertyDescriptor(MemberDescriptor descr)\n    content.vb: Protected Sub New(descr As MemberDescriptor)\n    parameters:\n    - id: descr\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the name of the property and its attributes. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor\n    commentId: T:System.ComponentModel.MemberDescriptor\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)\n- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  commentId: M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptor(MemberDescriptor, Attribute[])\n  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 55\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name in the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the attributes in both the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: protected PropertyDescriptor(MemberDescriptor descr, Attribute[] attrs)\n    content.vb: Protected Sub New(descr As MemberDescriptor, attrs As Attribute())\n    parameters:\n    - id: descr\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the name of the member and its attributes. </p>\\n\"\n    - id: attrs\n      type: System.Attribute[]\n      description: \"\\n<p>An <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array containing the attributes you want to associate with the property. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor\n    commentId: T:System.ComponentModel.MemberDescriptor\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute())\n  name.vb: PropertyDescriptor(MemberDescriptor, Attribute())\n  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor, Attribute[])\n  nameWithType.vb: PropertyDescriptor.PropertyDescriptor(MemberDescriptor, Attribute())\n- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])\n  commentId: M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])\n  id: '#ctor(System.String,System.Attribute[])'\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PropertyDescriptor(String, Attribute[])\n  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(System.String, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 31\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name and attributes.</p>\\n\"\n  syntax:\n    content: protected PropertyDescriptor(string name, Attribute[] attrs)\n    content.vb: Protected Sub New(name As String, attrs As Attribute())\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the property. </p>\\n\"\n    - id: attrs\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the property attributes. </p>\\n\"\n  seealso:\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(System.String, System.Attribute())\n  name.vb: PropertyDescriptor(String, Attribute())\n  nameWithType: PropertyDescriptor.PropertyDescriptor(String, Attribute[])\n  nameWithType.vb: PropertyDescriptor.PropertyDescriptor(String, Attribute())\n- uid: System.ComponentModel.PropertyDescriptor.ComponentType\n  commentId: P:System.ComponentModel.PropertyDescriptor.ComponentType\n  id: ComponentType\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ComponentType\n  fullName: System.ComponentModel.PropertyDescriptor.ComponentType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ComponentType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 67\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets the type of the component this property is bound to.</p>\\n\"\n  syntax:\n    content: public abstract Type ComponentType { get; }\n    content.vb: Public MustOverride ReadOnly Property ComponentType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type of component this property is bound to. When the <xref href=\\\"System.ComponentModel.PropertyDescriptor.GetValue(System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> methods are invoked, the object specified might be an instance of this type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyDescriptor.ComponentType\n- uid: System.ComponentModel.PropertyDescriptor.Converter\n  commentId: P:System.ComponentModel.PropertyDescriptor.Converter\n  id: Converter\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Converter\n  fullName: System.ComponentModel.PropertyDescriptor.Converter\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Converter\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 74\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the type converter for this property.</p>\\n\"\n  syntax:\n    content: public virtual TypeConverter Converter { get; }\n    content.vb: Public Overridable ReadOnly Property Converter As TypeConverter\n    parameters: []\n    return:\n      type: System.ComponentModel.TypeConverter\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.TypeConverter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to convert the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of this property.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeConverter\n    commentId: T:System.ComponentModel.TypeConverter\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: PropertyDescriptor.Converter\n- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable\n  commentId: P:System.ComponentModel.PropertyDescriptor.IsLocalizable\n  id: IsLocalizable\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsLocalizable\n  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsLocalizable\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 110\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether this property should be localized, as specified in the <xref href=\\\"System.ComponentModel.LocalizableAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool IsLocalizable { get; }\n    content.vb: Public Overridable ReadOnly Property IsLocalizable As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the member is marked with the <xref href=\\\"System.ComponentModel.LocalizableAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> set to <strong>true</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.LocalizableAttribute\n    commentId: T:System.ComponentModel.LocalizableAttribute\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: PropertyDescriptor.IsLocalizable\n- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly\n  commentId: P:System.ComponentModel.PropertyDescriptor.IsReadOnly\n  id: IsReadOnly\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 125\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets a value indicating whether this property is read-only.</p>\\n\"\n  syntax:\n    content: public abstract bool IsReadOnly { get; }\n    content.vb: Public MustOverride ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the property is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.ReadOnlyAttribute\n    commentId: T:System.ComponentModel.ReadOnlyAttribute\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyDescriptor.IsReadOnly\n- uid: System.ComponentModel.PropertyDescriptor.PropertyType\n  commentId: P:System.ComponentModel.PropertyDescriptor.PropertyType\n  id: PropertyType\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: PropertyType\n  fullName: System.ComponentModel.PropertyDescriptor.PropertyType\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropertyType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 148\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets the type of the property.</p>\\n\"\n  syntax:\n    content: public abstract Type PropertyType { get; }\n    content.vb: Public MustOverride ReadOnly Property PropertyType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type of the property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: PropertyDescriptor.PropertyType\n- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents\n  commentId: P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents\n  id: SupportsChangeEvents\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SupportsChangeEvents\n  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SupportsChangeEvents\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 527\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.</p>\\n\"\n  syntax:\n    content: public virtual bool SupportsChangeEvents { get; }\n    content.vb: Public Overridable ReadOnly Property SupportsChangeEvents As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if value change notifications may originate from outside the property descriptor; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: PropertyDescriptor.SupportsChangeEvents\n- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)\n  commentId: M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)\n  id: AddValueChanged(System.Object,System.EventHandler)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: AddValueChanged(Object, EventHandler)\n  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object, System.EventHandler)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddValueChanged\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 153\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Enables other objects to be notified when this property changes.</p>\\n\"\n  syntax:\n    content: public virtual void AddValueChanged(object component, EventHandler handler)\n    content.vb: Public Overridable Sub AddValueChanged(component As Object, handler As EventHandler)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component to add the handler for. </p>\\n\"\n    - id: handler\n      type: System.EventHandler\n      description: \"\\n<p>The delegate to add as a listener. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>component</em> or <em>handler</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptor.AddValueChanged(Object, EventHandler)\n- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)\n  id: CanResetValue(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CanResetValue(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanResetValue\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 174\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, returns whether resetting an object changes its value.</p>\\n\"\n  syntax:\n    content: public abstract bool CanResetValue(object component)\n    content.vb: Public MustOverride Function CanResetValue(component As Object) As Boolean\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component to test for reset capability. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if resetting the component changes its value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyDescriptor.CanResetValue(Object)\n- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)\n  commentId: M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)\n  id: CreateInstance(System.Type)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(Type)\n  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 220\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates an instance of the specified type.</p>\\n\"\n  syntax:\n    content: protected object CreateInstance(Type type)\n    content.vb: Protected Function CreateInstance(type As Type) As Object\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type to create. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>A new instance of the type.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeConverter\n    commentId: T:System.ComponentModel.TypeConverter\n  - type: System.Drawing.Design.UITypeEditor\n    commentId: T:System.Drawing.Design.UITypeEditor\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: PropertyDescriptor.CreateInstance(Type)\n- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 183\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Compares this to another object to see if they are equivalent.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to this <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the values are equivalent; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PropertyDescriptor.Equals(Object)\n- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)\n  commentId: M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)\n  id: FillAttributes(System.Collections.IList)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: FillAttributes(IList)\n  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FillAttributes\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 237\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Adds the attributes of the <xref href=\\\"System.ComponentModel.PropertyDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to the specified list of attributes in the parent class.</p>\\n\"\n  syntax:\n    content: protected override void FillAttributes(IList attributeList)\n    content.vb: Protected Overrides Sub FillAttributes(attributeList As IList)\n    parameters:\n    - id: attributeList\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that lists the attributes in the parent class. Initially, this is empty.</p>\\n\"\n  overridden: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: PropertyDescriptor.FillAttributes(IList)\n- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetChildProperties\n  id: GetChildProperties\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetChildProperties()\n  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChildProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 253\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the default <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection GetChildProperties()\n    content.vb: Public Function GetChildProperties As PropertyDescriptorCollection\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A collection of property descriptor.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptor.GetChildProperties()\n- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])\n  id: GetChildProperties(System.Attribute[])\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetChildProperties(Attribute[])\n  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChildProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 261\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using a specified array of attributes as a filter.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection GetChildProperties(Attribute[] filter)\n    content.vb: Public Function GetChildProperties(filter As Attribute()) As PropertyDescriptorCollection\n    parameters:\n    - id: filter\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as a filter. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that match the specified attributes.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute())\n  name.vb: GetChildProperties(Attribute())\n  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])\n  nameWithType.vb: PropertyDescriptor.GetChildProperties(Attribute())\n- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)\n  id: GetChildProperties(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetChildProperties(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChildProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 269\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for a given object.</p>\\n\"\n  syntax:\n    content: public PropertyDescriptorCollection GetChildProperties(object instance)\n    content.vb: Public Function GetChildProperties(instance As Object) As PropertyDescriptorCollection\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>A component to get the properties for. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties for the specified component.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: PropertyDescriptor.GetChildProperties(Object)\n- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])\n  id: GetChildProperties(System.Object,System.Attribute[])\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetChildProperties(Object, Attribute[])\n  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object, System.Attribute[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChildProperties\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 277\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for a given object using a specified array of attributes as a filter.</p>\\n\"\n  syntax:\n    content: public virtual PropertyDescriptorCollection GetChildProperties(object instance, Attribute[] filter)\n    content.vb: Public Overridable Function GetChildProperties(instance As Object, filter As Attribute()) As PropertyDescriptorCollection\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>A component to get the properties for. </p>\\n\"\n    - id: filter\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as a filter. </p>\\n\"\n    return:\n      type: System.ComponentModel.PropertyDescriptorCollection\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.PropertyDescriptorCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the properties that match the specified attributes for the specified component.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.PropertyDescriptorCollection\n    commentId: T:System.ComponentModel.PropertyDescriptorCollection\n  - type: System.Attribute\n    commentId: T:System.Attribute\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object, System.Attribute())\n  name.vb: GetChildProperties(Object, Attribute())\n  nameWithType: PropertyDescriptor.GetChildProperties(Object, Attribute[])\n  nameWithType.vb: PropertyDescriptor.GetChildProperties(Object, Attribute())\n- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)\n  id: GetEditor(System.Type)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetEditor(Type)\n  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEditor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 295\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an editor of the specified type.</p>\\n\"\n  syntax:\n    content: public virtual object GetEditor(Type editorBaseType)\n    content.vb: Public Overridable Function GetEditor(editorBaseType As Type) As Object\n    parameters:\n    - id: editorBaseType\n      type: System.Type\n      description: \"\\n<p>The base type of editor, which is used to differentiate between multiple editors that a property supports. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An instance of the requested editor type, or <strong>null</strong> if an editor cannot be found.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptor.GetEditor(Type)\n- uid: System.ComponentModel.PropertyDescriptor.GetHashCode\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 380\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the hash code for this object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this object.</p>\\n\"\n  overridden: System.ComponentModel.MemberDescriptor.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: PropertyDescriptor.GetHashCode()\n- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)\n  id: GetInvocationTarget(System.Type,System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetInvocationTarget(Type, Object)\n  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInvocationTarget\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 391\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>This method returns the object that should be used during invocation of members.</p>\\n\"\n  syntax:\n    content: protected override object GetInvocationTarget(Type type, object instance)\n    content.vb: Protected Overrides Function GetInvocationTarget(type As Type, instance As Object) As Object\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the invocation target.</p>\\n\"\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The potential invocation target.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that should be used during invocation of members.</p>\\n\"\n  overridden: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: PropertyDescriptor.GetInvocationTarget(Type, Object)\n- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)\n  id: GetTypeFromName(System.String)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetTypeFromName(String)\n  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypeFromName\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 406\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns a type using its name.</p>\\n\"\n  syntax:\n    content: protected Type GetTypeFromName(string typeName)\n    content.vb: Protected Function GetTypeFromName(typeName As String) As Type\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The assembly-qualified name of the type to retrieve. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that matches the given type name, or <strong>null</strong> if a match cannot be found.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: PropertyDescriptor.GetTypeFromName(String)\n- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)\n  id: GetValue(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 443\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, gets the current value of the property on a component.</p>\\n\"\n  syntax:\n    content: public abstract object GetValue(object component)\n    content.vb: Public MustOverride Function GetValue(component As Object) As Object\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component with the property for which to retrieve the value. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value of a property for a given component.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyDescriptor.GetValue(Object)\n- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)\n  id: GetValueChangedHandler(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetValueChangedHandler(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValueChangedHandler\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 486\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Retrieves the current set of <code>ValueChanged</code> event handlers for a specific component</p>\\n\"\n  syntax:\n    content: protected EventHandler GetValueChangedHandler(object component)\n    content.vb: Protected Function GetValueChangedHandler(component As Object) As EventHandler\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component for which to retrieve event handlers.</p>\\n\"\n    return:\n      type: System.EventHandler\n      description: \"\\n<p>A combined multicast event handler, or <strong>null</strong> if no event handlers are currently assigned to <em>component</em>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)\n- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)\n  commentId: M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)\n  id: OnValueChanged(System.Object,System.EventArgs)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: OnValueChanged(Object, EventArgs)\n  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object, System.EventArgs)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnValueChanged\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 449\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Raises the <code>ValueChanged</code> event that you implemented.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Security\", \"CA2109:ReviewVisibleEventHandlers\")]\n\n      protected virtual void OnValueChanged(object component, EventArgs e)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Security\", \"CA2109:ReviewVisibleEventHandlers\")>\n\n      Protected Overridable Sub OnValueChanged(component As Object, e As EventArgs)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The object that raises the event. </p>\\n\"\n    - id: e\n      type: System.EventArgs\n      description: \"\\n<p>An <xref href=\\\"System.EventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the event data. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: PropertyDescriptor.OnValueChanged(Object, EventArgs)\n- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)\n  commentId: M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)\n  id: RemoveValueChanged(System.Object,System.EventHandler)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: RemoveValueChanged(Object, EventHandler)\n  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object, System.EventHandler)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveValueChanged\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 461\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Enables other objects to be notified when this property changes.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveValueChanged(object component, EventHandler handler)\n    content.vb: Public Overridable Sub RemoveValueChanged(component As Object, handler As EventHandler)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component to remove the handler for. </p>\\n\"\n    - id: handler\n      type: System.EventHandler\n      description: \"\\n<p>The delegate to remove as a listener. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>component</em> or <em>handler</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: PropertyDescriptor.RemoveValueChanged(Object, EventHandler)\n- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)\n  id: ResetValue(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ResetValue(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ResetValue\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 503\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, resets the value for this property of the component to the default value.</p>\\n\"\n  syntax:\n    content: public abstract void ResetValue(object component)\n    content.vb: Public MustOverride Sub ResetValue(component As Object)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component with the property value that is to be reset to the default value. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyDescriptor.ResetValue(Object)\n- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility\n  commentId: P:System.ComponentModel.PropertyDescriptor.SerializationVisibility\n  id: SerializationVisibility\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SerializationVisibility\n  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SerializationVisibility\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 133\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether this property should be serialized, as specified in the <xref href=\\\"System.ComponentModel.DesignerSerializationVisibilityAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public DesignerSerializationVisibility SerializationVisibility { get; }\n    content.vb: Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility\n    parameters: []\n    return:\n      type: DesignerSerializationVisibility\n      description: \"\\n<p>One of the <xref href=\\\"System.ComponentModel.DesignerSerializationVisibility\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration values that specifies whether this property should be serialized.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.DesignerSerializationVisibilityAttribute\n    commentId: T:System.ComponentModel.DesignerSerializationVisibilityAttribute\n  - type: System.ComponentModel.DesignerSerializationVisibility\n    commentId: T:System.ComponentModel.DesignerSerializationVisibility\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: PropertyDescriptor.SerializationVisibility\n- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)\n  id: SetValue(System.Object,System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: SetValue(Object, Object)\n  fullName: System.ComponentModel.PropertyDescriptor.SetValue(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SetValue\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 511\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, sets the value of the component to a different value.</p>\\n\"\n  syntax:\n    content: public abstract void SetValue(object component, object value)\n    content.vb: Public MustOverride Sub SetValue(component As Object, value As Object)\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component with the property value that is to be set. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new value. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyDescriptor.SetValue(Object, Object)\n- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)\n  commentId: M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)\n  id: ShouldSerializeValue(System.Object)\n  parent: System.ComponentModel.PropertyDescriptor\n  langs:\n  - csharp\n  - vb\n  name: ShouldSerializeValue(Object)\n  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldSerializeValue\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptor.cs\n    startLine: 519\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.</p>\\n\"\n  syntax:\n    content: public abstract bool ShouldSerializeValue(object component)\n    content.vb: Public MustOverride Function ShouldSerializeValue(component As Object) As Boolean\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component with the property to be examined for persistence. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the property should be persisted; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.Design.ComponentDesigner\n    commentId: T:System.ComponentModel.Design.ComponentDesigner\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n  nameWithType: MemberDescriptor\n  commentId: T:System.ComponentModel.MemberDescriptor\n- uid: System.ComponentModel.MemberDescriptor.AttributeArray\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: AttributeArray\n  fullName: System.ComponentModel.MemberDescriptor.AttributeArray\n  nameWithType: MemberDescriptor.AttributeArray\n  commentId: P:System.ComponentModel.MemberDescriptor.AttributeArray\n- uid: System.ComponentModel.MemberDescriptor.Attributes\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Attributes\n  fullName: System.ComponentModel.MemberDescriptor.Attributes\n  nameWithType: MemberDescriptor.Attributes\n  commentId: P:System.ComponentModel.MemberDescriptor.Attributes\n- uid: System.ComponentModel.MemberDescriptor.Category\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Category\n  fullName: System.ComponentModel.MemberDescriptor.Category\n  nameWithType: MemberDescriptor.Category\n  commentId: P:System.ComponentModel.MemberDescriptor.Category\n- uid: System.ComponentModel.MemberDescriptor.Description\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Description\n  fullName: System.ComponentModel.MemberDescriptor.Description\n  nameWithType: MemberDescriptor.Description\n  commentId: P:System.ComponentModel.MemberDescriptor.Description\n- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: DesignTimeOnly\n  fullName: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  nameWithType: MemberDescriptor.DesignTimeOnly\n  commentId: P:System.ComponentModel.MemberDescriptor.DesignTimeOnly\n- uid: System.ComponentModel.MemberDescriptor.DisplayName\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: DisplayName\n  fullName: System.ComponentModel.MemberDescriptor.DisplayName\n  nameWithType: MemberDescriptor.DisplayName\n  commentId: P:System.ComponentModel.MemberDescriptor.DisplayName\n- uid: System.ComponentModel.MemberDescriptor.IsBrowsable\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: IsBrowsable\n  fullName: System.ComponentModel.MemberDescriptor.IsBrowsable\n  nameWithType: MemberDescriptor.IsBrowsable\n  commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n- uid: System.ComponentModel.MemberDescriptor.Name\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: Name\n  fullName: System.ComponentModel.MemberDescriptor.Name\n  nameWithType: MemberDescriptor.Name\n  commentId: P:System.ComponentModel.MemberDescriptor.Name\n- uid: System.ComponentModel.MemberDescriptor.NameHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: NameHashCode\n  fullName: System.ComponentModel.MemberDescriptor.NameHashCode\n  nameWithType: MemberDescriptor.NameHashCode\n  commentId: P:System.ComponentModel.MemberDescriptor.NameHashCode\n- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: CreateAttributeCollection()\n  fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection()\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n    name: CreateAttributeCollection\n    fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n    name: CreateAttributeCollection\n    fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.CreateAttributeCollection()\n  commentId: M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FindMethod(Type, String, Type[], Type)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type)\n  fullname.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type)\n  name.vb: FindMethod(Type, String, Type(), Type)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FindMethod(Type, String, Type[], Type, Boolean)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type, System.Boolean)\n  fullname.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type, System.Boolean)\n  name.vb: FindMethod(Type, String, Type(), Type, Boolean)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n    name: FindMethod\n    fullName: System.ComponentModel.MemberDescriptor.FindMethod\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type, Boolean)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n- uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: GetSite(Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n    name: GetSite\n    fullName: System.ComponentModel.MemberDescriptor.GetSite\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n    name: GetSite\n    fullName: System.ComponentModel.MemberDescriptor.GetSite\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetSite(Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.ComponentModel.TypeConverter\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeConverter\n  fullName: System.ComponentModel.TypeConverter\n  nameWithType: TypeConverter\n  commentId: T:System.ComponentModel.TypeConverter\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.EventHandler\n  parent: System\n  isExternal: false\n  name: EventHandler\n  fullName: System.EventHandler\n  nameWithType: EventHandler\n  commentId: T:System.EventHandler\n- uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n    name: Equals\n    fullName: System.ComponentModel.MemberDescriptor.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n    name: Equals\n    fullName: System.ComponentModel.MemberDescriptor.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.Equals(Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.Equals(System.Object)\n- uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: FillAttributes(IList)\n  fullName: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n    name: FillAttributes\n    fullName: System.ComponentModel.MemberDescriptor.FillAttributes\n  - name: (\n    fullName: (\n  - uid: System.Collections.IList\n    name: IList\n    fullName: System.Collections.IList\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n    name: FillAttributes\n    fullName: System.ComponentModel.MemberDescriptor.FillAttributes\n  - name: (\n    fullName: (\n  - uid: System.Collections.IList\n    name: IList\n    fullName: System.Collections.IList\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.FillAttributes(IList)\n  commentId: M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ComponentModel.PropertyDescriptorCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: PropertyDescriptorCollection\n  fullName: System.ComponentModel.PropertyDescriptorCollection\n  nameWithType: PropertyDescriptorCollection\n  commentId: T:System.ComponentModel.PropertyDescriptorCollection\n- uid: System.ComponentModel.MemberDescriptor.GetHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ComponentModel.MemberDescriptor.GetHashCode()\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetHashCode\n    name: GetHashCode\n    fullName: System.ComponentModel.MemberDescriptor.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetHashCode\n    name: GetHashCode\n    fullName: System.ComponentModel.MemberDescriptor.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetHashCode()\n  commentId: M:System.ComponentModel.MemberDescriptor.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  isExternal: true\n  name: GetInvocationTarget(Type, Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type, System.Object)\n  spec.csharp:\n  - uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n    name: GetInvocationTarget\n    fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n    name: GetInvocationTarget\n    fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberDescriptor.GetInvocationTarget(Type, Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.ComponentModel.DesignerSerializationVisibility\n  parent: System.ComponentModel\n  isExternal: false\n  name: DesignerSerializationVisibility\n  fullName: System.ComponentModel.DesignerSerializationVisibility\n  nameWithType: DesignerSerializationVisibility\n  commentId: T:System.ComponentModel.DesignerSerializationVisibility\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}