{"nodes":[{"pos":[851,862],"content":"Environment","needQuote":true,"nodes":[{"content":"Environment","pos":[0,11]}]},{"pos":[2141,2163],"content":"CurrentManagedThreadId","needQuote":true,"nodes":[{"content":"CurrentManagedThreadId","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer that represents a unique identifier for this managed thread.&lt;/p&gt;\\n","pos":[2965,3047],"source":"\\n<p>An integer that represents a unique identifier for this managed thread.</p>\\n"},{"pos":[3388,3406],"content":"HasShutdownStarted","needQuote":true,"nodes":[{"content":"HasShutdownStarted","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current application domain is being unloaded or the CLR is shutting down; otherwise, &lt;strong&gt;false.&lt;/strong&gt;&lt;/p&gt;\\n","pos":[4113,4263],"source":"\\n<p>\\n<strong>true</strong> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <strong>false.</strong></p>\\n"},{"pos":[4695,4706],"content":"MachineName","needQuote":true,"nodes":[{"content":"MachineName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;A string containing the name of this computer.&lt;/p&gt;\\n","pos":[5410,5467],"source":"\\n<p>A string containing the name of this computer.</p>\\n"},{"content":"\\n&lt;p&gt;The name of this computer cannot be obtained.&lt;/p&gt;\\n","pos":[5594,5650],"source":"\\n<p>The name of this computer cannot be obtained.</p>\\n"},{"pos":[6081,6088],"content":"NewLine","needQuote":true,"nodes":[{"content":"NewLine","pos":[0,7]}]},{"pos":[7150,7164],"content":"ProcessorCount","needQuote":true,"nodes":[{"content":"ProcessorCount","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The 32-bit signed integer that specifies the number of processors on the current machine.","pos":[7885,7979],"source":"\\n<p>The 32-bit signed integer that specifies the number of processors on the current machine."},{"content":"There is no default.","pos":[7980,8000]},{"content":"If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).&lt;/p&gt;\\n","pos":[8001,8185],"source":" If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</p>\\n"},{"pos":[8494,8504],"content":"StackTrace","needQuote":true,"nodes":[{"content":"StackTrace","pos":[0,10]}]},{"pos":[9787,9796],"content":"TickCount","needQuote":true,"nodes":[{"content":"TickCount","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started.","pos":[10398,10534],"source":"\\n<p>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started."},{"content":"&lt;/p&gt;\\n","pos":[10535,10541],"source":" </p>\\n"},{"pos":[10938,10972],"content":"ExpandEnvironmentVariables(String)","needQuote":true,"nodes":[{"content":"ExpandEnvironmentVariables(String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;A string containing the names of zero or more environment variables.","pos":[11899,11972],"source":"\\n<p>A string containing the names of zero or more environment variables."},{"content":"Each environment variable is quoted with the percent sign character (%).&lt;/p&gt;\\n","pos":[11973,12051],"source":" Each environment variable is quoted with the percent sign character (%).</p>\\n"},{"content":"\\n&lt;p&gt;A string with each environment variable replaced by its value.&lt;/p&gt;\\n","pos":[12111,12184],"source":"\\n<p>A string with each environment variable replaced by its value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12303,12355],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"pos":[12821,12832],"content":"Exit(Int32)","needQuote":true,"nodes":[{"content":"Exit(Int32)","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The exit code to return to the operating system.","pos":[13757,13810],"source":"\\n<p>The exit code to return to the operating system."},{"content":"Use 0 (zero) to indicate that the process completed successfully.&lt;/p&gt;\\n","pos":[13811,13882],"source":" Use 0 (zero) to indicate that the process completed successfully.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have sufficient security permission to perform this function.","pos":[14011,14097],"source":"\\n<p>The caller does not have sufficient security permission to perform this function."},{"content":"&lt;/p&gt;\\n","pos":[14098,14104],"source":" </p>\\n"},{"pos":[14556,14572],"content":"FailFast(String)","needQuote":true,"nodes":[{"content":"FailFast(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A message that explains why the process was terminated, or &lt;strong&gt;null&lt;/strong&gt; if no explanation is provided.&lt;/p&gt;\\n","pos":[15336,15458],"source":"\\n<p>A message that explains why the process was terminated, or <strong>null</strong> if no explanation is provided.</p>\\n"},{"pos":[16098,16125],"content":"FailFast(String, Exception)","needQuote":true,"nodes":[{"content":"FailFast(String, Exception)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;A message that explains why the process was terminated, or &lt;strong&gt;null&lt;/strong&gt; if no explanation is provided.&lt;/p&gt;\\n","pos":[16978,17100],"source":"\\n<p>A message that explains why the process was terminated, or <strong>null</strong> if no explanation is provided.</p>\\n"},{"content":"\\n&lt;p&gt;An exception that represents the error that caused the termination.","pos":[17171,17243],"source":"\\n<p>An exception that represents the error that caused the termination."},{"content":"This is typically the exception in a &lt;strong&gt;catch&lt;/strong&gt; block.&lt;/p&gt;\\n","pos":[17244,17316],"source":" This is typically the exception in a <strong>catch</strong> block.</p>\\n"},{"pos":[17958,17988],"content":"GetEnvironmentVariable(String)","needQuote":true,"nodes":[{"content":"GetEnvironmentVariable(String)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The name of the environment variable.&lt;/p&gt;\\n","pos":[18813,18861],"source":"\\n<p>The name of the environment variable.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the environment variable specified by &lt;em&gt;variable&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt; if the environment variable is not found.&lt;/p&gt;\\n","pos":[18921,19068],"source":"\\n<p>The value of the environment variable specified by <em>variable</em>, or <strong>null</strong> if the environment variable is not found.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;variable&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19187,19243],"source":"\\n<p>\\n<em>variable</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission to perform this operation.","pos":[19358,19438],"source":"\\n<p>The caller does not have the required permission to perform this operation."},{"content":"&lt;/p&gt;\\n","pos":[19439,19445],"source":" </p>\\n"},{"pos":[20308,20333],"content":"GetEnvironmentVariables()","needQuote":true,"nodes":[{"content":"GetEnvironmentVariables()","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.&lt;/p&gt;\\n","pos":[21128,21284],"source":"\\n<p>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission to perform this operation.&lt;/p&gt;\\n","pos":[21413,21499],"source":"\\n<p>The caller does not have the required permission to perform this operation.</p>\\n"},{"content":"\\n&lt;p&gt;The buffer is out of memory.&lt;/p&gt;\\n","pos":[21602,21641],"source":"\\n<p>The buffer is out of memory.</p>\\n"},{"pos":[22349,22387],"content":"SetEnvironmentVariable(String, String)","needQuote":true,"nodes":[{"content":"SetEnvironmentVariable(String, String)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The name of an environment variable.&lt;/p&gt;\\n","pos":[23252,23299],"source":"\\n<p>The name of an environment variable.</p>\\n"},{"content":"\\n&lt;p&gt;A value to assign to &lt;em&gt;variable&lt;/em&gt;.&lt;/p&gt;\\n","pos":[23363,23413],"source":"\\n<p>A value to assign to <em>variable</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;variable&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[23532,23588],"source":"\\n<p>\\n<em>variable</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permission to perform this operation.&lt;/p&gt;\\n","pos":[24131,24217],"source":"\\n<p>The caller does not have the required permission to perform this operation.</p>\\n"},{"pos":[24952,24972],"content":"GetCommandLineArgs()","needQuote":true,"nodes":[{"content":"GetCommandLineArgs()","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An array of string where each element contains a command-line argument.","pos":[25728,25804],"source":"\\n<p>An array of string where each element contains a command-line argument."},{"content":"The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.&lt;/p&gt;\\n","pos":[25805,25943],"source":" The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</p>\\n"},{"content":"\\n&lt;p&gt;The system does not support command-line arguments.&lt;/p&gt;\\n","pos":[26062,26124],"source":"\\n<p>The system does not support command-line arguments.</p>\\n"},{"pos":[26543,26549],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[26680,26686],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26846,26856],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26951,26959],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27028,27029],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27056,27057],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27127,27135],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27204,27205],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27232,27233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27416,27430],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27549,27555],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27622,27623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27673,27679],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27739,27740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27823,27829],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27896,27897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27947,27953],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28013,28014],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28228,28250],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28398,28404],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28471,28472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28522,28528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28589,28590]},{"pos":[28645,28651],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28711,28712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28809,28815],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28882,28883],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28933,28939],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29000,29001]},{"pos":[29056,29062],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29122,29123],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29368,29399],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[29565,29580],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29656,29657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29707,29713],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29774,29775]},{"pos":[29830,29836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29896,29897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30003,30018],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30094,30095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30145,30151],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30212,30213]},{"pos":[30268,30274],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30334,30335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30565,30578],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[30679,30690],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30762,30763],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30790,30791],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30864,30875],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30947,30948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30975,30976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31151,31160],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31253,31260],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31328,31329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31356,31357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31426,31433],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31501,31502],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31529,31530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31705,31722],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31831,31846],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31922,31923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31950,31951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32028,32043],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32119,32120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32147,32148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32316,32321],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[32464,32471],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32619,32625],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[32773,32782],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[32965,32976],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[33148,33166],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[33298,33306],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[33434,33440],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[33501,33503]},{"pos":[33568,33574],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[33634,33636],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33792,33817],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[34017,34038],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[34231,34248],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[34441,34461],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[34659,34676],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[34869,34890],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Environment\n  commentId: T:System.Environment\n  id: Environment\n  parent: System\n  children:\n  - System.Environment.CurrentManagedThreadId\n  - System.Environment.Exit(System.Int32)\n  - System.Environment.ExpandEnvironmentVariables(System.String)\n  - System.Environment.FailFast(System.String)\n  - System.Environment.FailFast(System.String,System.Exception)\n  - System.Environment.GetCommandLineArgs\n  - System.Environment.GetEnvironmentVariable(System.String)\n  - System.Environment.GetEnvironmentVariables\n  - System.Environment.HasShutdownStarted\n  - System.Environment.MachineName\n  - System.Environment.NewLine\n  - System.Environment.ProcessorCount\n  - System.Environment.SetEnvironmentVariable(System.String,System.String)\n  - System.Environment.StackTrace\n  - System.Environment.TickCount\n  langs:\n  - csharp\n  - vb\n  name: Environment\n  fullName: System.Environment\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Environment\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 42\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class Environment\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class Environment\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Environment\n- uid: System.Environment.CurrentManagedThreadId\n  commentId: P:System.Environment.CurrentManagedThreadId\n  id: CurrentManagedThreadId\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: CurrentManagedThreadId\n  fullName: System.Environment.CurrentManagedThreadId\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CurrentManagedThreadId\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 1757\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a unique identifier for the current managed thread.</p>\\n\"\n  syntax:\n    content: >-\n      public static int CurrentManagedThreadId\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property CurrentManagedThreadId As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents a unique identifier for this managed thread.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.CurrentManagedThreadId\n- uid: System.Environment.HasShutdownStarted\n  commentId: P:System.Environment.HasShutdownStarted\n  id: HasShutdownStarted\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: HasShutdownStarted\n  fullName: System.Environment.HasShutdownStarted\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down. </p>\\n\"\n  syntax:\n    content: >-\n      public static bool HasShutdownStarted\n\n      {\n          [SecuritySafeCritical]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property HasShutdownStarted As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current application domain is being unloaded or the CLR is shutting down; otherwise, <strong>false.</strong></p>\\n\"\n  seealso:\n  - type: System.AppDomain.IsFinalizingForUnload\n    commentId: M:System.AppDomain.IsFinalizingForUnload\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.HasShutdownStarted\n- uid: System.Environment.MachineName\n  commentId: P:System.Environment.MachineName\n  id: MachineName\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: MachineName\n  fullName: System.Environment.MachineName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MachineName\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 520\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets the NetBIOS name of this local computer.</p>\\n\"\n  syntax:\n    content: >-\n      public static string MachineName\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property MachineName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the name of this computer.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The name of this computer cannot be obtained.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.MachineName\n- uid: System.Environment.NewLine\n  commentId: P:System.Environment.NewLine\n  id: NewLine\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: NewLine\n  fullName: System.Environment.NewLine\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NewLine\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 1063\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets the newline string defined for this environment.</p>\\n\"\n  syntax:\n    content: public static string NewLine { get; }\n    content.vb: Public Shared ReadOnly Property NewLine As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing \\\"\\\\r\\\\n\\\" for non-Unix platforms, or a string containing \\\"\\\\n\\\" for Unix platforms.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.NewLine\n- uid: System.Environment.ProcessorCount\n  commentId: P:System.Environment.ProcessorCount\n  id: ProcessorCount\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: ProcessorCount\n  fullName: System.Environment.ProcessorCount\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ProcessorCount\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 549\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets the number of processors on the current machine.</p>\\n\"\n  syntax:\n    content: >-\n      public static int ProcessorCount\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property ProcessorCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer that specifies the number of processors on the current machine. There is no default. If the current machine contains multiple processor groups, this property returns the number of logical processors that are available for use by the common language runtime (CLR).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.ProcessorCount\n- uid: System.Environment.StackTrace\n  commentId: P:System.Environment.StackTrace\n  id: StackTrace\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: StackTrace\n  fullName: System.Environment.StackTrace\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StackTrace\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 1223\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets current stack trace information.</p>\\n\"\n  syntax:\n    content: >-\n      public static string StackTrace\n\n      {\n          [SecuritySafeCritical]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property StackTrace As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing stack trace information. This value can be <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.StackTrace\n- uid: System.Environment.TickCount\n  commentId: P:System.Environment.TickCount\n  id: TickCount\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: TickCount\n  fullName: System.Environment.TickCount\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Gets the number of milliseconds elapsed since the system started.</p>\\n\"\n  syntax:\n    content: >-\n      public static int TickCount\n\n      {\n          [SecuritySafeCritical]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property TickCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer containing the amount of time in milliseconds that has passed since the last time the computer was started. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Environment.TickCount\n- uid: System.Environment.ExpandEnvironmentVariables(System.String)\n  commentId: M:System.Environment.ExpandEnvironmentVariables(System.String)\n  id: ExpandEnvironmentVariables(System.String)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: ExpandEnvironmentVariables(String)\n  fullName: System.Environment.ExpandEnvironmentVariables(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ExpandEnvironmentVariables\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 401\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string ExpandEnvironmentVariables(string name)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function ExpandEnvironmentVariables(name As String) As String\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A string containing the names of zero or more environment variables. Each environment variable is quoted with the percent sign character (%).</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string with each environment variable replaced by its value.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.ExpandEnvironmentVariables(String)\n- uid: System.Environment.Exit(System.Int32)\n  commentId: M:System.Environment.Exit(System.Int32)\n  id: Exit(System.Int32)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: Exit(Int32)\n  fullName: System.Environment.Exit(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exit\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 261\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Terminates this process and returns an exit code to the operating system.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]\n\n      public static void Exit(int exitCode)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>\n\n      Public Shared Sub Exit(exitCode As Integer)\n    parameters:\n    - id: exitCode\n      type: System.Int32\n      description: \"\\n<p>The exit code to return to the operating system. Use 0 (zero) to indicate that the process completed successfully.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have sufficient security permission to perform this function. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.Exit(Int32)\n- uid: System.Environment.FailFast(System.String)\n  commentId: M:System.Environment.FailFast(System.String)\n  id: FailFast(System.String)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: FailFast(String)\n  fullName: System.Environment.FailFast(System.String)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static void FailFast(string message)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Sub FailFast(message As String)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message that explains why the process was terminated, or <strong>null</strong> if no explanation is provided.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.FailFast(String)\n- uid: System.Environment.FailFast(System.String,System.Exception)\n  commentId: M:System.Environment.FailFast(System.String,System.Exception)\n  id: FailFast(System.String,System.Exception)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: FailFast(String, Exception)\n  fullName: System.Environment.FailFast(System.String, System.Exception)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static void FailFast(string message, Exception exception)\n    content.vb: >-\n      <SecurityCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Sub FailFast(message As String, exception As Exception)\n    parameters:\n    - id: message\n      type: System.String\n      description: \"\\n<p>A message that explains why the process was terminated, or <strong>null</strong> if no explanation is provided.</p>\\n\"\n    - id: exception\n      type: System.Exception\n      description: \"\\n<p>An exception that represents the error that caused the termination. This is typically the exception in a <strong>catch</strong> block.</p>\\n\"\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.FailFast(String, Exception)\n- uid: System.Environment.GetEnvironmentVariable(System.String)\n  commentId: M:System.Environment.GetEnvironmentVariable(System.String)\n  id: GetEnvironmentVariable(System.String)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: GetEnvironmentVariable(String)\n  fullName: System.Environment.GetEnvironmentVariable(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnvironmentVariable\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 625\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Retrieves the value of an environment variable from the current process. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string GetEnvironmentVariable(string variable)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetEnvironmentVariable(variable As String) As String\n    parameters:\n    - id: variable\n      type: System.String\n      description: \"\\n<p>The name of the environment variable.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the environment variable specified by <em>variable</em>, or <strong>null</strong> if the environment variable is not found.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>variable</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission to perform this operation. </p>\\n\"\n  seealso:\n  - type: System.Environment.GetEnvironmentVariables\n    commentId: M:System.Environment.GetEnvironmentVariables\n  - type: System.Environment.SetEnvironmentVariable(System.String,System.String)\n    commentId: M:System.Environment.SetEnvironmentVariable(System.String,System.String)\n  - type: System.EnvironmentVariableTarget\n    commentId: T:System.EnvironmentVariableTarget\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.GetEnvironmentVariable(String)\n- uid: System.Environment.GetEnvironmentVariables\n  commentId: M:System.Environment.GetEnvironmentVariables\n  id: GetEnvironmentVariables\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: GetEnvironmentVariables()\n  fullName: System.Environment.GetEnvironmentVariables()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnvironmentVariables\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 761\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Retrieves all environment variable names and their values from the current process.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static IDictionary GetEnvironmentVariables()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetEnvironmentVariables As IDictionary\n    return:\n      type: System.Collections.IDictionary\n      description: \"\\n<p>A dictionary that contains all environment variable names and their values; otherwise, an empty dictionary if no environment variables are found.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission to perform this operation.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>The buffer is out of memory.</p>\\n\"\n  seealso:\n  - type: System.Environment.GetEnvironmentVariable(System.String)\n    commentId: M:System.Environment.GetEnvironmentVariable(System.String)\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.GetEnvironmentVariables()\n- uid: System.Environment.SetEnvironmentVariable(System.String,System.String)\n  commentId: M:System.Environment.SetEnvironmentVariable(System.String,System.String)\n  id: SetEnvironmentVariable(System.String,System.String)\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: SetEnvironmentVariable(String, String)\n  fullName: System.Environment.SetEnvironmentVariable(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetEnvironmentVariable\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 890\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Creates, modifies, or deletes an environment variable stored in the current process.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void SetEnvironmentVariable(string variable, string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub SetEnvironmentVariable(variable As String, value As String)\n    parameters:\n    - id: variable\n      type: System.String\n      description: \"\\n<p>The name of an environment variable.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>A value to assign to <em>variable</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>variable</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>variable</em> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (\\\"=\\\"). </p>\\n<p>-or-</p>\\n<p>The length of <em>variable</em> or <em>value</em> is greater than or equal to 32,767 characters.</p>\\n<p>-or-</p>\\n<p>An error occurred during the execution of this operation.</p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permission to perform this operation.</p>\\n\"\n  seealso:\n  - type: System.Environment.GetEnvironmentVariable(System.String)\n    commentId: M:System.Environment.GetEnvironmentVariable(System.String)\n  - type: System.Environment.GetEnvironmentVariables\n    commentId: M:System.Environment.GetEnvironmentVariables\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.SetEnvironmentVariable(String, String)\n- uid: System.Environment.GetCommandLineArgs\n  commentId: M:System.Environment.GetCommandLineArgs\n  id: GetCommandLineArgs\n  parent: System.Environment\n  langs:\n  - csharp\n  - vb\n  name: GetCommandLineArgs()\n  fullName: System.Environment.GetCommandLineArgs()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Environment.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCommandLineArgs\n    path: src/mscorlib/src/System/Environment.cs\n    startLine: 573\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System\n  summary: \"\\n<p>Returns a string array containing the command-line arguments for the current process.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string[] GetCommandLineArgs()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetCommandLineArgs As String()\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of string where each element contains a command-line argument. The first element is the executable file name, and the following zero or more elements contain the remaining command-line arguments.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The system does not support command-line arguments.</p>\\n\"\n  seealso:\n  - type: System.Environment.CommandLine\n    commentId: P:System.Environment.CommandLine\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Environment.GetCommandLineArgs()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}