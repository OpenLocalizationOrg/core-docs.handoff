{"nodes":[{"pos":[6364,6383],"content":"XmlDictionaryWriter","needQuote":true,"nodes":[{"content":"XmlDictionaryWriter","pos":[0,19]}]},{"pos":[7603,7624],"content":"XmlDictionaryWriter()","needQuote":true,"nodes":[{"content":"XmlDictionaryWriter()","pos":[0,21]}]},{"pos":[8667,8682],"content":"CanCanonicalize","needQuote":true,"nodes":[{"content":"CanCanonicalize","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;false&lt;/strong&gt; in all cases.&lt;/p&gt;\\n","pos":[9547,9596],"source":"\\n<p>\\n<strong>false</strong> in all cases.</p>\\n"},{"pos":[10034,10060],"content":"CreateBinaryWriter(Stream)","needQuote":true,"nodes":[{"content":"CreateBinaryWriter(Stream)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[10990,11024],"source":"\\n<p>The stream to write to.</p>\\n"},{"pos":[11718,11760],"content":"CreateBinaryWriter(Stream, IXmlDictionary)","needQuote":true,"nodes":[{"content":"CreateBinaryWriter(Stream, IXmlDictionary)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[12774,12808],"source":"\\n<p>The stream to write to.</p>\\n"},{"pos":[13833,13899],"content":"CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession)","needQuote":true,"nodes":[{"content":"CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[15015,15049],"source":"\\n<p>The stream to write to.</p>\\n"},{"pos":[16345,16420],"content":"CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession, Boolean)","needQuote":true,"nodes":[{"content":"CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession, Boolean)","pos":[0,75]}]},{"content":"\\n&lt;p&gt;The stream from which to read.&lt;/p&gt;\\n","pos":[17592,17633],"source":"\\n<p>The stream from which to read.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that the stream is closed by the writer when done; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18118,18249],"source":"\\n<p>\\n<strong>true</strong> to indicate that the stream is closed by the writer when done; otherwise <strong>false</strong>.</p>\\n"},{"pos":[18938,18971],"content":"CreateDictionaryWriter(XmlWriter)","needQuote":true,"nodes":[{"content":"CreateDictionaryWriter(XmlWriter)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;writer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20415,20469],"source":"\\n<p>\\n<em>writer</em> is <strong>null</strong>.</p>\\n"},{"pos":[20892,20916],"content":"CreateTextWriter(Stream)","needQuote":true,"nodes":[{"content":"CreateTextWriter(Stream)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[21825,21859],"source":"\\n<p>The stream to write to.</p>\\n"},{"pos":[22530,22564],"content":"CreateTextWriter(Stream, Encoding)","needQuote":true,"nodes":[{"content":"CreateTextWriter(Stream, Encoding)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[23536,23570],"source":"\\n<p>The stream to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The character encoding of the output.&lt;/p&gt;\\n","pos":[23644,23692],"source":"\\n<p>The character encoding of the output.</p>\\n"},{"pos":[24418,24461],"content":"CreateTextWriter(Stream, Encoding, Boolean)","needQuote":true,"nodes":[{"content":"CreateTextWriter(Stream, Encoding, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[25489,25523],"source":"\\n<p>The stream to write to.</p>\\n"},{"content":"\\n&lt;p&gt;The character encoding of the stream.&lt;/p&gt;\\n","pos":[25597,25645],"source":"\\n<p>The character encoding of the stream.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that the stream is closed by the writer when done; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25715,25846],"source":"\\n<p>\\n<strong>true</strong> to indicate that the stream is closed by the writer when done; otherwise <strong>false</strong>.</p>\\n"},{"pos":[26428,26449],"content":"EndCanonicalization()","needQuote":true,"nodes":[{"content":"EndCanonicalization()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;Method is not implemented yet.&lt;/p&gt;\\n","pos":[27424,27465],"source":"\\n<p>Method is not implemented yet.</p>\\n"},{"pos":[27990,28038],"content":"StartCanonicalization(Stream, Boolean, String[])","needQuote":true,"nodes":[{"content":"StartCanonicalization(Stream, Boolean, String[])","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The stream to write to.&lt;/p&gt;\\n","pos":[29005,29039],"source":"\\n<p>The stream to write to.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include comments; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29114,29204],"source":"\\n<p>\\n<strong>true</strong> to include comments; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The prefixes to be included.&lt;/p&gt;\\n","pos":[29282,29321],"source":"\\n<p>The prefixes to be included.</p>\\n"},{"content":"\\n&lt;p&gt;Method is not implemented yet.&lt;/p&gt;\\n","pos":[29440,29481],"source":"\\n<p>Method is not implemented yet.</p>\\n"},{"pos":[30378,30437],"content":"WriteArray(String, String, String, Boolean[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Boolean[], Int32, Int32)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[31499,31531],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[31599,31640],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[31711,31755],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the data.&lt;/p&gt;\\n","pos":[31822,31866],"source":"\\n<p>The array that contains the data.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[31930,31973],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of values to write from the array.&lt;/p&gt;\\n","pos":[32036,32092],"source":"\\n<p>The number of values to write from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32211,32264],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[32381,32444],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[32561,32645],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[33607,33667],"content":"WriteArray(String, String, String, DateTime[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, DateTime[], Int32, Int32)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[34732,34764],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[34832,34873],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[34944,34988],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[35056,35101],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[35165,35208],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[35271,35324],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35443,35496],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[35613,35676],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35793,35877],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[36840,36899],"content":"WriteArray(String, String, String, Decimal[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Decimal[], Int32, Int32)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[37964,37996],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[38064,38105],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[38176,38220],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[38287,38332],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[38396,38439],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[38502,38555],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[38674,38727],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[38844,38907],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39024,39108],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[40064,40122],"content":"WriteArray(String, String, String, Double[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Double[], Int32, Int32)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[41183,41215],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[41283,41324],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[41395,41439],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[41505,41550],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[41614,41657],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[41720,41773],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41892,41945],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[42062,42125],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[42242,42326],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[43272,43328],"content":"WriteArray(String, String, String, Guid[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Guid[], Int32, Int32)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[44381,44413],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[44481,44522],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[44593,44637],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[44701,44746],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[44810,44853],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[44916,44969],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45088,45141],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[45258,45321],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45438,45522],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[46463,46520],"content":"WriteArray(String, String, String, Int16[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Int16[], Int32, Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[47577,47609],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[47677,47718],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[47789,47833],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[47898,47943],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[48007,48050],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[48113,48166],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48285,48338],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[48455,48518],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48635,48719],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[49664,49721],"content":"WriteArray(String, String, String, Int32[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Int32[], Int32, Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[50778,50810],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[50878,50919],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[50990,51034],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[51099,51144],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[51208,51251],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[51314,51367],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51486,51539],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[51656,51719],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[51836,51920],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[52865,52922],"content":"WriteArray(String, String, String, Int64[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Int64[], Int32, Int32)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[53977,54009],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[54077,54118],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[54189,54233],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[54298,54343],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[54407,54450],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[54513,54566],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54685,54738],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[54855,54918],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[55035,55119],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[56067,56125],"content":"WriteArray(String, String, String, Single[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, Single[], Int32, Int32)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[57185,57217],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[57285,57326],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[57397,57441],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[57507,57552],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[57616,57659],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[57722,57775],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[57894,57947],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[58064,58127],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[58244,58328],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[59286,59346],"content":"WriteArray(String, String, String, TimeSpan[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, String, String, TimeSpan[], Int32, Int32)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[60415,60447],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[60515,60556],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[60627,60671],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[60739,60784],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[60848,60891],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[60954,61007],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61126,61179],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[61296,61359],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[61476,61560],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[62625,62710],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)","pos":[0,85]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[63858,63890],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[63975,64016],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[64104,64148],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[64215,64260],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[64324,64367],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[64430,64483],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[64602,64655],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[64772,64835],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[64952,65036],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[66212,66298],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)","pos":[0,86]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[67449,67481],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[67566,67607],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[67695,67739],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[67807,67852],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[67916,67959],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[68022,68075],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[68194,68247],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[68364,68427],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[68544,68628],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[69805,69890],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)","pos":[0,85]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[71041,71073],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[71158,71199],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[71287,71331],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[71398,71443],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[71507,71550],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[71613,71666],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71785,71838],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[71955,72018],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[72135,72219],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[73389,73473],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)","pos":[0,84]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[74620,74652],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[74737,74778],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[74866,74910],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[74976,75021],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[75085,75128],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[75191,75244],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[75363,75416],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[75533,75596],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[75713,75797],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[76957,77039],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)","pos":[0,82]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[78178,78210],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[78295,78336],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[78424,78468],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[78532,78577],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[78641,78684],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[78747,78800],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[78919,78972],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[79089,79152],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79269,79353],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[80508,80591],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)","pos":[0,83]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[81734,81766],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[81851,81892],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[81980,82024],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[82089,82134],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[82198,82241],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[82304,82357],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82476,82529],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[82646,82709],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[82826,82910],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[84069,84152],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)","pos":[0,83]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[85295,85327],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[85412,85453],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[85541,85585],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[85650,85695],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[85759,85802],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[85865,85918],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[86037,86090],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[86207,86270],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[86387,86471],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[87630,87713],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)","pos":[0,83]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[88854,88886],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[88971,89012],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[89100,89144],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[89209,89254],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[89318,89361],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[89424,89477],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[89596,89649],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[89766,89829],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[89946,90030],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[91192,91276],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)","pos":[0,84]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[92422,92454],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[92539,92580],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[92668,92712],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[92778,92823],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[92887,92930],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[92993,93046],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[93165,93218],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[93335,93398],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[93515,93599],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[94771,94857],"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)","needQuote":true,"nodes":[{"content":"WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)","pos":[0,86]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[96012,96044],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[96129,96170],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[96258,96302],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The array that contains the nodes.&lt;/p&gt;\\n","pos":[96370,96415],"source":"\\n<p>The array that contains the nodes.</p>\\n"},{"content":"\\n&lt;p&gt;The starting index in the array.&lt;/p&gt;\\n","pos":[96479,96522],"source":"\\n<p>The starting index in the array.</p>\\n"},{"content":"\\n&lt;p&gt;The number of nodes to get from the array.&lt;/p&gt;\\n","pos":[96585,96638],"source":"\\n<p>The number of nodes to get from the array.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[96757,96810],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;offset&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length.&lt;/p&gt;\\n","pos":[96927,96990],"source":"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is &lt; 0 or &gt; &lt;em&gt;array&lt;/em&gt; length minus &lt;em&gt;offset&lt;/em&gt;.&lt;/p&gt;\\n","pos":[97107,97191],"source":"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n"},{"pos":[98311,98389],"content":"WriteAttributeString(String, XmlDictionaryString, XmlDictionaryString, String)","needQuote":true,"nodes":[{"content":"WriteAttributeString(String, XmlDictionaryString, XmlDictionaryString, String)","pos":[0,78]}]},{"content":"\\n&lt;p&gt;The prefix of the attribute.&lt;/p&gt;\\n","pos":[99407,99446],"source":"\\n<p>The prefix of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[99531,99574],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[99662,99708],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The attribute.&lt;/p&gt;\\n","pos":[99772,99797],"source":"\\n<p>The attribute.</p>\\n"},{"pos":[100432,100502],"content":"WriteAttributeString(XmlDictionaryString, XmlDictionaryString, String)","needQuote":true,"nodes":[{"content":"WriteAttributeString(XmlDictionaryString, XmlDictionaryString, String)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[101492,101535],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[101623,101669],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The attribute.&lt;/p&gt;\\n","pos":[101733,101758],"source":"\\n<p>The attribute.</p>\\n"},{"pos":[102421,102497],"content":"WriteElementString(String, XmlDictionaryString, XmlDictionaryString, String)","needQuote":true,"nodes":[{"content":"WriteElementString(String, XmlDictionaryString, XmlDictionaryString, String)","pos":[0,76]}]},{"content":"\\n&lt;p&gt;The prefix of the element.&lt;/p&gt;\\n","pos":[103500,103537],"source":"\\n<p>The prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[103622,103663],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[103751,103795],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The element content.&lt;/p&gt;\\n","pos":[103859,103890],"source":"\\n<p>The element content.</p>\\n"},{"pos":[104517,104585],"content":"WriteElementString(XmlDictionaryString, XmlDictionaryString, String)","needQuote":true,"nodes":[{"content":"WriteElementString(XmlDictionaryString, XmlDictionaryString, String)","pos":[0,68]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[105560,105601],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[105689,105733],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The element content.&lt;/p&gt;\\n","pos":[105797,105828],"source":"\\n<p>The element content.</p>\\n"},{"pos":[106330,106369],"content":"WriteNode(XmlDictionaryReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteNode(XmlDictionaryReader, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to copy the default attributes from the &lt;strong&gt;XmlReader&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107482,107619],"source":"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107738,107792],"source":"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n"},{"pos":[108263,108292],"content":"WriteNode(XmlReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteNode(XmlReader, Boolean)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reader&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[109654,109708],"source":"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n"},{"pos":[110273,110333],"content":"WriteQualifiedName(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteQualifiedName(XmlDictionaryString, XmlDictionaryString)","pos":[0,60]}]},{"content":"\\n&lt;p&gt;The local name of the qualified name.&lt;/p&gt;\\n","pos":[111358,111406],"source":"\\n<p>The local name of the qualified name.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the qualified name.&lt;/p&gt;\\n","pos":[111494,111545],"source":"\\n<p>The namespace URI of the qualified name.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[111664,111721],"source":"\\n<p>\\n<em>localName</em> is <strong>null</strong>.</p>\\n"},{"pos":[112363,112432],"content":"WriteStartAttribute(String, XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteStartAttribute(String, XmlDictionaryString, XmlDictionaryString)","pos":[0,69]}]},{"content":"\\n&lt;p&gt;The namespace prefix.&lt;/p&gt;\\n","pos":[113465,113497],"source":"\\n<p>The namespace prefix.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[113582,113625],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[113713,113759],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"pos":[114368,114429],"content":"WriteStartAttribute(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteStartAttribute(XmlDictionaryString, XmlDictionaryString)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[115406,115449],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the attribute.&lt;/p&gt;\\n","pos":[115537,115583],"source":"\\n<p>The namespace URI of the attribute.</p>\\n"},{"pos":[116192,116259],"content":"WriteStartElement(String, XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteStartElement(String, XmlDictionaryString, XmlDictionaryString)","pos":[0,67]}]},{"content":"\\n&lt;p&gt;The prefix of the element.&lt;/p&gt;\\n","pos":[117279,117316],"source":"\\n<p>The prefix of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[117401,117442],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[117530,117574],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[117701,117733],"source":"\\n<p>The writer is closed.</p>\\n"},{"pos":[118334,118393],"content":"WriteStartElement(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteStartElement(XmlDictionaryString, XmlDictionaryString)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The local name of the element.&lt;/p&gt;\\n","pos":[119354,119395],"source":"\\n<p>The local name of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace URI of the element.&lt;/p&gt;\\n","pos":[119483,119527],"source":"\\n<p>The namespace URI of the element.</p>\\n"},{"content":"\\n&lt;p&gt;The writer is closed.&lt;/p&gt;\\n","pos":[119654,119686],"source":"\\n<p>The writer is closed.</p>\\n"},{"pos":[120140,120172],"content":"WriteString(XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteString(XmlDictionaryString)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The text to write.&lt;/p&gt;\\n","pos":[120970,120999],"source":"\\n<p>The text to write.</p>\\n"},{"pos":[121505,121548],"content":"WriteTextNode(XmlDictionaryReader, Boolean)","needQuote":true,"nodes":[{"content":"WriteTextNode(XmlDictionaryReader, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that the reader is positioned on an attribute value or element content; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[122742,122895],"source":"\\n<p>\\n<strong>true</strong> to indicate that the reader is positioned on an attribute value or element content; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[123307,123323],"content":"WriteValue(Guid)","needQuote":true,"nodes":[{"content":"WriteValue(Guid)","pos":[0,16]}]},{"pos":[124599,124619],"content":"WriteValue(TimeSpan)","needQuote":true,"nodes":[{"content":"WriteValue(TimeSpan)","pos":[0,20]}]},{"pos":[125935,125955],"content":"WriteValue(UniqueId)","needQuote":true,"nodes":[{"content":"WriteValue(UniqueId)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The Unique Id value to write.&lt;/p&gt;\\n","pos":[126700,126740],"source":"\\n<p>The Unique Id value to write.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[126859,126912],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[127352,127383],"content":"WriteValue(XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteValue(XmlDictionaryString)","pos":[0,31]}]},{"pos":[128828,128861],"content":"WriteXmlAttribute(String, String)","needQuote":true,"nodes":[{"content":"WriteXmlAttribute(String, String)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[129703,129746],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[129810,129848],"source":"\\n<p>The value of the attribute.</p>\\n"},{"pos":[130415,130474],"content":"WriteXmlAttribute(XmlDictionaryString, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteXmlAttribute(XmlDictionaryString, XmlDictionaryString)","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The local name of the attribute.&lt;/p&gt;\\n","pos":[131411,131454],"source":"\\n<p>The local name of the attribute.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the attribute.&lt;/p&gt;\\n","pos":[131535,131573],"source":"\\n<p>The value of the attribute.</p>\\n"},{"pos":[132070,132105],"content":"WriteXmlnsAttribute(String, String)","needQuote":true,"nodes":[{"content":"WriteXmlnsAttribute(String, String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The prefix that is bound to the given namespace.&lt;/p&gt;\\n","pos":[132949,133008],"source":"\\n<p>The prefix that is bound to the given namespace.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace to which the prefix is bound.&lt;/p&gt;\\n","pos":[133079,133133],"source":"\\n<p>The namespace to which the prefix is bound.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[133252,133312],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[133836,133884],"content":"WriteXmlnsAttribute(String, XmlDictionaryString)","needQuote":true,"nodes":[{"content":"WriteXmlnsAttribute(String, XmlDictionaryString)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The prefix that is bound to the given namespace.&lt;/p&gt;\\n","pos":[134771,134830],"source":"\\n<p>The prefix that is bound to the given namespace.</p>\\n"},{"content":"\\n&lt;p&gt;The namespace to which the prefix is bound.&lt;/p&gt;\\n","pos":[134918,134972],"source":"\\n<p>The namespace to which the prefix is bound.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;namespaceUri&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[135091,135151],"source":"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n"},{"pos":[135382,135392],"content":"System.Xml","needQuote":true,"nodes":[{"content":"System.Xml","pos":[0,10]}]},{"pos":[135535,135541],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[135662,135668],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[135800,135807],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[135961,135967],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[136139,136158],"content":"XmlDictionaryWriter","needQuote":true,"nodes":[{"content":"XmlDictionaryWriter","pos":[0,19]}]},{"pos":[136329,136338],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[136494,136508],"content":"IXmlDictionary","needQuote":true,"nodes":[{"content":"IXmlDictionary","pos":[0,14]}]},{"pos":[136709,136731],"content":"XmlBinaryWriterSession","needQuote":true,"nodes":[{"content":"XmlBinaryWriterSession","pos":[0,22]}]},{"pos":[136943,136952],"content":"XmlWriter","needQuote":true,"nodes":[{"content":"XmlWriter","pos":[0,9]}]},{"pos":[137126,137134],"content":"Encoding","needQuote":true,"nodes":[{"content":"Encoding","pos":[0,8]}]},{"pos":[137276,137287],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[137398,137406],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[137534,137540],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[137601,137603]},{"pos":[137668,137674],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[137734,137736],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[137873,137879],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[137990,137999],"content":"Boolean[]","needQuote":true,"nodes":[{"content":"Boolean[]","pos":[0,9]}]},{"pos":[138131,138138],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"content":"[]","pos":[138200,138202]},{"pos":[138268,138275],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[138336,138338],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[138476,138481],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[138590,138600],"content":"DateTime[]","needQuote":true,"nodes":[{"content":"DateTime[]","pos":[0,10]}]},{"pos":[138736,138744],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":"[]","pos":[138807,138809]},{"pos":[138876,138884],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[138946,138948],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[139055,139064],"content":"Decimal[]","needQuote":true,"nodes":[{"content":"Decimal[]","pos":[0,9]}]},{"pos":[139196,139203],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"content":"[]","pos":[139265,139267]},{"pos":[139333,139340],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[139401,139403],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[139507,139515],"content":"Double[]","needQuote":true,"nodes":[{"content":"Double[]","pos":[0,8]}]},{"pos":[139643,139649],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"content":"[]","pos":[139710,139712]},{"pos":[139777,139783],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[139843,139845],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[139945,139951],"content":"Guid[]","needQuote":true,"nodes":[{"content":"Guid[]","pos":[0,6]}]},{"pos":[140071,140075],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"content":"[]","pos":[140134,140136]},{"pos":[140199,140203],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[140261,140263],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[140360,140367],"content":"Int16[]","needQuote":true,"nodes":[{"content":"Int16[]","pos":[0,7]}]},{"pos":[140491,140496],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"content":"[]","pos":[140556,140558]},{"pos":[140622,140627],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[140686,140688],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[140787,140794],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[140918,140923],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[140983,140985]},{"pos":[141049,141054],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[141113,141115],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[141214,141221],"content":"Int64[]","needQuote":true,"nodes":[{"content":"Int64[]","pos":[0,7]}]},{"pos":[141345,141350],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"content":"[]","pos":[141410,141412]},{"pos":[141476,141481],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[141540,141542],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[141642,141650],"content":"Single[]","needQuote":true,"nodes":[{"content":"Single[]","pos":[0,8]}]},{"pos":[141778,141784],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"content":"[]","pos":[141845,141847]},{"pos":[141912,141918],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[141978,141980],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[142084,142094],"content":"TimeSpan[]","needQuote":true,"nodes":[{"content":"TimeSpan[]","pos":[0,10]}]},{"pos":[142230,142238],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":"[]","pos":[142280,142282]},{"pos":[142349,142357],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[142398,142400],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[142562,142581],"content":"XmlDictionaryString","needQuote":true,"nodes":[{"content":"XmlDictionaryString","pos":[0,19]}]},{"pos":[142794,142813],"content":"XmlDictionaryReader","needQuote":true,"nodes":[{"content":"XmlDictionaryReader","pos":[0,19]}]},{"pos":[143016,143025],"content":"XmlReader","needQuote":true,"nodes":[{"content":"XmlReader","pos":[0,9]}]},{"pos":[143185,143189],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[143330,143338],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[143499,143507],"content":"UniqueId","needQuote":true,"nodes":[{"content":"UniqueId","pos":[0,8]}]},{"pos":[143664,143685],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[143890,143911],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[144105,144132],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[144359,144384],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Xml.XmlDictionaryWriter\n  commentId: T:System.Xml.XmlDictionaryWriter\n  id: XmlDictionaryWriter\n  parent: System.Xml\n  children:\n  - System.Xml.XmlDictionaryWriter.#ctor\n  - System.Xml.XmlDictionaryWriter.CanCanonicalize\n  - System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)\n  - System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)\n  - System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)\n  - System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)\n  - System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)\n  - System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)\n  - System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)\n  - System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  - System.Xml.XmlDictionaryWriter.EndCanonicalization\n  - System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  - System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  - System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  - System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  - System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)\n  - System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)\n  - System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)\n  - System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  - System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)\n  - System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)\n  langs:\n  - csharp\n  - vb\n  name: XmlDictionaryWriter\n  fullName: System.Xml.XmlDictionaryWriter\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: XmlDictionaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 280\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Represents an abstract class that Windows Communication Foundation (WCF) derives from <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to do serialization and deserialization.</p>\\n\"\n  syntax:\n    content: 'public abstract class XmlDictionaryWriter : XmlWriter'\n    content.vb: >-\n      Public MustInherit Class XmlDictionaryWriter\n          Inherits XmlWriter\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: XmlDictionaryWriter\n- uid: System.Xml.XmlDictionaryWriter.#ctor\n  commentId: M:System.Xml.XmlDictionaryWriter.#ctor\n  id: '#ctor'\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: XmlDictionaryWriter()\n  fullName: System.Xml.XmlDictionaryWriter.XmlDictionaryWriter()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 282\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected XmlDictionaryWriter()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: XmlDictionaryWriter.XmlDictionaryWriter()\n- uid: System.Xml.XmlDictionaryWriter.CanCanonicalize\n  commentId: P:System.Xml.XmlDictionaryWriter.CanCanonicalize\n  id: CanCanonicalize\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CanCanonicalize\n  fullName: System.Xml.XmlDictionaryWriter.CanCanonicalize\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CanCanonicalize\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 283\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>This property always returns <strong>false</strong>. Its derived classes can override to return <strong>true</strong> if they support canonicalization.</p>\\n\"\n  syntax:\n    content: public virtual bool CanCanonicalize { get; }\n    content.vb: Public Overridable ReadOnly Property CanCanonicalize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>false</strong> in all cases.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: XmlDictionaryWriter.CanCanonicalize\n- uid: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)\n  id: CreateBinaryWriter(System.IO.Stream)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryWriter(Stream)\n  fullName: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 284\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes WCF binary XML format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateBinaryWriter(Stream stream)\n    content.vb: Public Shared Function CreateBinaryWriter(stream As Stream) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateBinaryWriter(Stream)\n- uid: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)\n  id: CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryWriter(Stream, IXmlDictionary)\n  fullName: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 285\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes WCF binary XML format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary)\n    content.vb: Public Shared Function CreateBinaryWriter(stream As Stream, dictionary As IXmlDictionary) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the shared dictionary.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateBinaryWriter(Stream, IXmlDictionary)\n- uid: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)\n  id: CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession)\n  fullName: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 286\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes WCF binary XML format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session)\n    content.vb: Public Shared Function CreateBinaryWriter(stream As Stream, dictionary As IXmlDictionary, session As XmlBinaryWriterSession) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the shared dictionary.</p>\\n\"\n    - id: session\n      type: System.Xml.XmlBinaryWriterSession\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlBinaryWriterSession\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession)\n- uid: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)\n  id: CreateBinaryWriter(System.IO.Stream,System.Xml.IXmlDictionary,System.Xml.XmlBinaryWriterSession,System.Boolean)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession, Boolean)\n  fullName: System.Xml.XmlDictionaryWriter.CreateBinaryWriter(System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateBinaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 287\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes WCF binary XML format.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateBinaryWriter(Stream stream, IXmlDictionary dictionary, XmlBinaryWriterSession session, bool ownsStream)\n    content.vb: Public Shared Function CreateBinaryWriter(stream As Stream, dictionary As IXmlDictionary, session As XmlBinaryWriterSession, ownsStream As Boolean) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream from which to read.</p>\\n\"\n    - id: dictionary\n      type: System.Xml.IXmlDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use as the shared dictionary.</p>\\n\"\n    - id: session\n      type: System.Xml.XmlBinaryWriterSession\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlBinaryWriterSession\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use.</p>\\n\"\n    - id: ownsStream\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that the stream is closed by the writer when done; otherwise <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateBinaryWriter(Stream, IXmlDictionary, XmlBinaryWriterSession, Boolean)\n- uid: System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)\n  id: CreateDictionaryWriter(System.Xml.XmlWriter)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateDictionaryWriter(XmlWriter)\n  fullName: System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateDictionaryWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 288\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> from an existing <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateDictionaryWriter(XmlWriter writer)\n    content.vb: Public Shared Function CreateDictionaryWriter(writer As XmlWriter) As XmlDictionaryWriter\n    parameters:\n    - id: writer\n      type: System.Xml.XmlWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>writer</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateDictionaryWriter(XmlWriter)\n- uid: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)\n  id: CreateTextWriter(System.IO.Stream)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateTextWriter(Stream)\n  fullName: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 289\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes text XML.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateTextWriter(Stream stream)\n    content.vb: Public Shared Function CreateTextWriter(stream As Stream) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateTextWriter(Stream)\n- uid: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding)\n  id: CreateTextWriter(System.IO.Stream,System.Text.Encoding)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateTextWriter(Stream, Encoding)\n  fullName: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream, System.Text.Encoding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 290\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes text XML.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding)\n    content.vb: Public Shared Function CreateTextWriter(stream As Stream, encoding As Encoding) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding of the output.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateTextWriter(Stream, Encoding)\n- uid: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  commentId: M:System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  id: CreateTextWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: CreateTextWriter(Stream, Encoding, Boolean)\n  fullName: System.Xml.XmlDictionaryWriter.CreateTextWriter(System.IO.Stream, System.Text.Encoding, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateTextWriter\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 291\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Creates an instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that writes text XML.</p>\\n\"\n  syntax:\n    content: public static XmlDictionaryWriter CreateTextWriter(Stream stream, Encoding encoding, bool ownsStream)\n    content.vb: Public Shared Function CreateTextWriter(stream As Stream, encoding As Encoding, ownsStream As Boolean) As XmlDictionaryWriter\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    - id: encoding\n      type: System.Text.Encoding\n      description: \"\\n<p>The character encoding of the stream.</p>\\n\"\n    - id: ownsStream\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that the stream is closed by the writer when done; otherwise <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Xml.XmlDictionaryWriter\n      description: \"\\n<p>An instance of <xref href=\\\"System.Xml.XmlDictionaryWriter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: XmlDictionaryWriter.CreateTextWriter(Stream, Encoding, Boolean)\n- uid: System.Xml.XmlDictionaryWriter.EndCanonicalization\n  commentId: M:System.Xml.XmlDictionaryWriter.EndCanonicalization\n  id: EndCanonicalization\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: EndCanonicalization()\n  fullName: System.Xml.XmlDictionaryWriter.EndCanonicalization()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EndCanonicalization\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 292\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>When implemented by a derived class, it stops the canonicalization started by the matching <xref href=\\\"System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> call.</p>\\n\"\n  syntax:\n    content: public virtual void EndCanonicalization()\n    content.vb: Public Overridable Sub\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Method is not implemented yet.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.EndCanonicalization()\n- uid: System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  commentId: M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  id: StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: StartCanonicalization(Stream, Boolean, String[])\n  fullName: System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream, System.Boolean, System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: StartCanonicalization\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 293\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>When implemented by a derived class, it starts the canonicalization.</p>\\n\"\n  syntax:\n    content: public virtual void StartCanonicalization(Stream stream, bool includeComments, string[] inclusivePrefixes)\n    content.vb: Public Overridable Sub StartCanonicalization(stream As Stream, includeComments As Boolean, inclusivePrefixes As String())\n    parameters:\n    - id: stream\n      type: System.IO.Stream\n      description: \"\\n<p>The stream to write to.</p>\\n\"\n    - id: includeComments\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include comments; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: inclusivePrefixes\n      type: System.String[]\n      description: \"\\n<p>The prefixes to be included.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>Method is not implemented yet.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream, System.Boolean, System.String())\n  name.vb: StartCanonicalization(Stream, Boolean, String())\n  nameWithType: XmlDictionaryWriter.StartCanonicalization(Stream, Boolean, String[])\n  nameWithType.vb: XmlDictionaryWriter.StartCanonicalization(Stream, Boolean, String())\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Boolean[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Boolean[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 294\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, bool[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Boolean(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Boolean[]\n      description: \"\\n<p>The array that contains the data.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of values to write from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Boolean(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Boolean(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Boolean[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Boolean(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, DateTime[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.DateTime[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 295\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, DateTime[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Date(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.DateTime[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.DateTime(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, DateTime(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, DateTime[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, DateTime(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Decimal[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Decimal[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 296\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, decimal[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Decimal(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Decimal[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Decimal(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Decimal(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Decimal[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Decimal(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Double[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Double[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, double[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Double(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Double[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Double(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Double(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Double[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Double(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Guid[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Guid[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 298\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, Guid[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Guid(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Guid[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Guid(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Guid(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Guid[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Guid(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Int16[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int16[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 299\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, short[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Short(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int16[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int16(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Int16(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Int16[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Int16(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Int32[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int32[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 300\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, int[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Integer(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int32[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int32(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Int32(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Int32[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Int32(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Int64[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int64[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 301\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, long[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Long(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int64[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Int64(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Int64(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Int64[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Int64(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, Single[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Single[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 302\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, float[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As Single(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.Single(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, Single(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, Single[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, Single(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, String, String, TimeSpan[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.TimeSpan[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 303\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, string localName, string namespaceUri, TimeSpan[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As String, namespaceUri As String, array As TimeSpan(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.TimeSpan[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.String, System.String, System.TimeSpan(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, String, String, TimeSpan(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, String, String, TimeSpan[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, String, String, TimeSpan(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Boolean[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 304\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, bool[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Boolean(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Boolean[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Boolean(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Boolean(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 305\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, DateTime[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Date(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.DateTime[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.DateTime(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, DateTime(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 306\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, decimal[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Decimal(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Decimal[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Decimal(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Decimal(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 307\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Double\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, double[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Double(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Double[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Double(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Double(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 308\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, Guid[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Guid(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Guid[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Guid(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Guid(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 309\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int16\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, short[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Short(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int16[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int16(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int16(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 310\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, int[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Integer(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int32[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int32(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 311\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, long[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Long(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Int64[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int64(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Int64(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 312\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.Single\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, float[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As Single(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.Single[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Single(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, Single(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  id: WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)\n  fullName: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteArray\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 313\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes nodes from a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public virtual void WriteArray(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, TimeSpan[] array, int offset, int count)\n    content.vb: Public Overridable Sub WriteArray(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, array As TimeSpan(), offset As Integer, count As Integer)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: array\n      type: System.TimeSpan[]\n      description: \"\\n<p>The array that contains the nodes.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The starting index in the array.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of nodes to get from the array.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is < 0 or > <em>array</em> length.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> is < 0 or > <em>array</em> length minus <em>offset</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Xml.XmlDictionaryWriter.WriteArray(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.TimeSpan(), System.Int32, System.Int32)\n  name.vb: WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan(), Int32, Int32)\n  nameWithType: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan[], Int32, Int32)\n  nameWithType.vb: XmlDictionaryWriter.WriteArray(String, XmlDictionaryString, XmlDictionaryString, TimeSpan(), Int32, Int32)\n- uid: System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  id: WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeString(String, XmlDictionaryString, XmlDictionaryString, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 314\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an attribute qualified name and value.</p>\\n\"\n  syntax:\n    content: public void WriteAttributeString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)\n    content.vb: Public Sub WriteAttributeString(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, value As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the attribute.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteAttributeString(String, XmlDictionaryString, XmlDictionaryString, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  id: WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteAttributeString(XmlDictionaryString, XmlDictionaryString, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteAttributeString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 315\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an attribute qualified name and value.</p>\\n\"\n  syntax:\n    content: public void WriteAttributeString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)\n    content.vb: Public Sub WriteAttributeString(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, value As String)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteAttributeString(XmlDictionaryString, XmlDictionaryString, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  id: WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementString(String, XmlDictionaryString, XmlDictionaryString, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteElementString(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 316\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an element with a text content.</p>\\n\"\n  syntax:\n    content: public void WriteElementString(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)\n    content.vb: Public Sub WriteElementString(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, value As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The element content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteElementString(String, XmlDictionaryString, XmlDictionaryString, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  id: WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteElementString(XmlDictionaryString, XmlDictionaryString, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteElementString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 317\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an element with a text content.</p>\\n\"\n  syntax:\n    content: public void WriteElementString(XmlDictionaryString localName, XmlDictionaryString namespaceUri, string value)\n    content.vb: Public Sub WriteElementString(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString, value As String)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The element content.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteElementString(XmlDictionaryString, XmlDictionaryString, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  id: WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNode(XmlDictionaryReader, Boolean)\n  fullName: System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNode\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 318\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the current XML node from an <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual void WriteNode(XmlDictionaryReader reader, bool defattr)\n    content.vb: Public Overridable Sub WriteNode(reader As XmlDictionaryReader, defattr As Boolean)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <strong>XmlReader</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteNode(XmlDictionaryReader, Boolean)\n- uid: System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)\n  id: WriteNode(System.Xml.XmlReader,System.Boolean)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteNode(XmlReader, Boolean)\n  fullName: System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteNode\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 319\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the current XML node from an <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override void WriteNode(XmlReader reader, bool defattr)\n    content.vb: Public Overrides Sub WriteNode(reader As XmlReader, defattr As Boolean)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlReader\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: defattr\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to copy the default attributes from the <xref href=\\\"System.Xml.XmlReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reader</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: XmlDictionaryWriter.WriteNode(XmlReader, Boolean)\n- uid: System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteQualifiedName(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteQualifiedName\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 320\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes out the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</p>\\n\"\n  syntax:\n    content: public virtual void WriteQualifiedName(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub WriteQualifiedName(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the qualified name.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the qualified name.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localName</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteQualifiedName(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttribute(String, XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 321\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the start of an attribute with the specified prefix, local name, and namespace URI.</p>\\n\"\n  syntax:\n    content: public virtual void WriteStartAttribute(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub WriteStartAttribute(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The namespace prefix.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteStartAttribute(String, XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartAttribute(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 322\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the start of an attribute with the specified local name, and namespace URI.</p>\\n\"\n  syntax:\n    content: public void WriteStartAttribute(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Sub WriteStartAttribute(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteStartAttribute(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElement(String, XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteStartElement(System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 323\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the specified start tag and associates it with the given namespace and prefix.</p>\\n\"\n  syntax:\n    content: public virtual void WriteStartElement(string prefix, XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub WriteStartElement(prefix As String, localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix of the element.</p>\\n\"\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteStartElement(String, XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteStartElement(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteStartElement\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 324\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the specified start tag and associates it with the given namespace.</p>\\n\"\n  syntax:\n    content: public void WriteStartElement(XmlDictionaryString localName, XmlDictionaryString namespaceUri)\n    content.vb: Public Sub WriteStartElement(localName As XmlDictionaryString, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the element.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace URI of the element.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The writer is closed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: XmlDictionaryWriter.WriteStartElement(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)\n  id: WriteString(System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteString(XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteString\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 325\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the given text content.</p>\\n\"\n  syntax:\n    content: public virtual void WriteString(XmlDictionaryString value)\n    content.vb: Public Overridable Sub WriteString(value As XmlDictionaryString)\n    parameters:\n    - id: value\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The text to write.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteString(XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  id: WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteTextNode(XmlDictionaryReader, Boolean)\n  fullName: System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteTextNode\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 326\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes the text node that an <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is currently positioned on.</p>\\n\"\n  syntax:\n    content: protected virtual void WriteTextNode(XmlDictionaryReader reader, bool isAttribute)\n    content.vb: Protected Overridable Sub WriteTextNode(reader As XmlDictionaryReader, isAttribute As Boolean)\n    parameters:\n    - id: reader\n      type: System.Xml.XmlDictionaryReader\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get the text value from.</p>\\n\"\n    - id: isAttribute\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that the reader is positioned on an attribute value or element content; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteTextNode(XmlDictionaryReader, Boolean)\n- uid: System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)\n  id: WriteValue(System.Guid)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(Guid)\n  fullName: System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(Guid value)\n    content.vb: Public Overridable Sub WriteValue(value As Guid)\n    parameters:\n    - id: value\n      type: System.Guid\n      description: \"\\n<p>The <xref href=\\\"System.Guid\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteValue(Guid)\n- uid: System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)\n  id: WriteValue(System.TimeSpan)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(TimeSpan)\n  fullName: System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 328\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(TimeSpan value)\n    content.vb: Public Overridable Sub WriteValue(value As TimeSpan)\n    parameters:\n    - id: value\n      type: System.TimeSpan\n      description: \"\\n<p>The <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to write.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteValue(TimeSpan)\n- uid: System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)\n  id: WriteValue(System.Xml.UniqueId)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(UniqueId)\n  fullName: System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 329\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a Unique Id value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(UniqueId value)\n    content.vb: Public Overridable Sub WriteValue(value As UniqueId)\n    parameters:\n    - id: value\n      type: System.Xml.UniqueId\n      description: \"\\n<p>The Unique Id value to write.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteValue(UniqueId)\n- uid: System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)\n  id: WriteValue(System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteValue(XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteValue\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 330\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  syntax:\n    content: public virtual void WriteValue(XmlDictionaryString value)\n    content.vb: Public Overridable Sub WriteValue(value As XmlDictionaryString)\n    parameters:\n    - id: value\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The <xref href=\\\"System.Xml.XmlDictionaryString\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteValue(XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)\n  id: WriteXmlAttribute(System.String,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteXmlAttribute(String, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteXmlAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 331\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a standard XML attribute in the current node.</p>\\n\"\n  syntax:\n    content: public virtual void WriteXmlAttribute(string localName, string value)\n    content.vb: Public Overridable Sub WriteXmlAttribute(localName As String, value As String)\n    parameters:\n    - id: localName\n      type: System.String\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteXmlAttribute(String, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  id: WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteXmlAttribute(XmlDictionaryString, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteXmlAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 332\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes an XML attribute in the current node.</p>\\n\"\n  syntax:\n    content: public virtual void WriteXmlAttribute(XmlDictionaryString localName, XmlDictionaryString value)\n    content.vb: Public Overridable Sub WriteXmlAttribute(localName As XmlDictionaryString, value As XmlDictionaryString)\n    parameters:\n    - id: localName\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The local name of the attribute.</p>\\n\"\n    - id: value\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The value of the attribute.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteXmlAttribute(XmlDictionaryString, XmlDictionaryString)\n- uid: System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)\n  id: WriteXmlnsAttribute(System.String,System.String)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteXmlnsAttribute(String, String)\n  fullName: System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteXmlnsAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 333\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a namespace declaration attribute.</p>\\n\"\n  syntax:\n    content: public virtual void WriteXmlnsAttribute(string prefix, string namespaceUri)\n    content.vb: Public Overridable Sub WriteXmlnsAttribute(prefix As String, namespaceUri As String)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix that is bound to the given namespace.</p>\\n\"\n    - id: namespaceUri\n      type: System.String\n      description: \"\\n<p>The namespace to which the prefix is bound.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteXmlnsAttribute(String, String)\n- uid: System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)\n  commentId: M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)\n  id: WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)\n  parent: System.Xml.XmlDictionaryWriter\n  langs:\n  - csharp\n  - vb\n  name: WriteXmlnsAttribute(String, XmlDictionaryString)\n  fullName: System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String, System.Xml.XmlDictionaryString)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WriteXmlnsAttribute\n    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs\n    startLine: 334\n  assemblies:\n  - System.Runtime.Serialization.Xml\n  namespace: System.Xml\n  summary: \"\\n<p>Writes a namespace declaration attribute.</p>\\n\"\n  syntax:\n    content: public virtual void WriteXmlnsAttribute(string prefix, XmlDictionaryString namespaceUri)\n    content.vb: Public Overridable Sub WriteXmlnsAttribute(prefix As String, namespaceUri As XmlDictionaryString)\n    parameters:\n    - id: prefix\n      type: System.String\n      description: \"\\n<p>The prefix that is bound to the given namespace.</p>\\n\"\n    - id: namespaceUri\n      type: System.Xml.XmlDictionaryString\n      description: \"\\n<p>The namespace to which the prefix is bound.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>namespaceUri</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: XmlDictionaryWriter.WriteXmlnsAttribute(String, XmlDictionaryString)\nreferences:\n- uid: System.Xml\n  isExternal: false\n  name: System.Xml\n  fullName: System.Xml\n  commentId: N:System.Xml\n  nameWithType: System.Xml\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.Xml.XmlDictionaryWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryWriter\n  fullName: System.Xml.XmlDictionaryWriter\n  commentId: T:System.Xml.XmlDictionaryWriter\n  nameWithType: XmlDictionaryWriter\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Xml.IXmlDictionary\n  parent: System.Xml\n  isExternal: false\n  name: IXmlDictionary\n  fullName: System.Xml.IXmlDictionary\n  commentId: T:System.Xml.IXmlDictionary\n  nameWithType: IXmlDictionary\n- uid: System.Xml.XmlBinaryWriterSession\n  parent: System.Xml\n  isExternal: false\n  name: XmlBinaryWriterSession\n  fullName: System.Xml.XmlBinaryWriterSession\n  commentId: T:System.Xml.XmlBinaryWriterSession\n  nameWithType: XmlBinaryWriterSession\n- uid: System.Xml.XmlWriter\n  parent: System.Xml\n  isExternal: false\n  name: XmlWriter\n  fullName: System.Xml.XmlWriter\n  commentId: T:System.Xml.XmlWriter\n  nameWithType: XmlWriter\n- uid: System.Text.Encoding\n  parent: System.Text\n  isExternal: false\n  name: Encoding\n  fullName: System.Text.Encoding\n  commentId: T:System.Text.Encoding\n  nameWithType: Encoding\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  commentId: N:System.Text\n  nameWithType: System.Text\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Boolean[]\n  name: Boolean[]\n  fullName: System.Boolean[]\n  fullname.vb: System.Boolean()\n  name.vb: Boolean()\n  spec.csharp:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Boolean[]\n  nameWithType.vb: Boolean()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.DateTime[]\n  name: DateTime[]\n  fullName: System.DateTime[]\n  fullname.vb: System.DateTime()\n  name.vb: DateTime()\n  spec.csharp:\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: DateTime[]\n  nameWithType.vb: DateTime()\n- uid: System.Decimal[]\n  name: Decimal[]\n  fullName: System.Decimal[]\n  fullname.vb: System.Decimal()\n  name.vb: Decimal()\n  spec.csharp:\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Decimal\n    name: Decimal\n    fullName: System.Decimal\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Decimal[]\n  nameWithType.vb: Decimal()\n- uid: System.Double[]\n  name: Double[]\n  fullName: System.Double[]\n  fullname.vb: System.Double()\n  name.vb: Double()\n  spec.csharp:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Double[]\n  nameWithType.vb: Double()\n- uid: System.Guid[]\n  name: Guid[]\n  fullName: System.Guid[]\n  fullname.vb: System.Guid()\n  name.vb: Guid()\n  spec.csharp:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Guid\n    name: Guid\n    fullName: System.Guid\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Guid[]\n  nameWithType.vb: Guid()\n- uid: System.Int16[]\n  name: Int16[]\n  fullName: System.Int16[]\n  fullname.vb: System.Int16()\n  name.vb: Int16()\n  spec.csharp:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int16\n    name: Int16\n    fullName: System.Int16\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int16[]\n  nameWithType.vb: Int16()\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Int64[]\n  name: Int64[]\n  fullName: System.Int64[]\n  fullname.vb: System.Int64()\n  name.vb: Int64()\n  spec.csharp:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int64\n    name: Int64\n    fullName: System.Int64\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int64[]\n  nameWithType.vb: Int64()\n- uid: System.Single[]\n  name: Single[]\n  fullName: System.Single[]\n  fullname.vb: System.Single()\n  name.vb: Single()\n  spec.csharp:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Single\n    name: Single\n    fullName: System.Single\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Single[]\n  nameWithType.vb: Single()\n- uid: System.TimeSpan[]\n  name: TimeSpan[]\n  fullName: System.TimeSpan[]\n  fullname.vb: System.TimeSpan()\n  name.vb: TimeSpan()\n  spec.csharp:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n  - name: ()\n    fullName: ()\n  nameWithType: TimeSpan[]\n  nameWithType.vb: TimeSpan()\n- uid: System.Xml.XmlDictionaryString\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryString\n  fullName: System.Xml.XmlDictionaryString\n  commentId: T:System.Xml.XmlDictionaryString\n  nameWithType: XmlDictionaryString\n- uid: System.Xml.XmlDictionaryReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlDictionaryReader\n  fullName: System.Xml.XmlDictionaryReader\n  commentId: T:System.Xml.XmlDictionaryReader\n  nameWithType: XmlDictionaryReader\n- uid: System.Xml.XmlReader\n  parent: System.Xml\n  isExternal: false\n  name: XmlReader\n  fullName: System.Xml.XmlReader\n  commentId: T:System.Xml.XmlReader\n  nameWithType: XmlReader\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  commentId: T:System.Guid\n  nameWithType: Guid\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.Xml.UniqueId\n  parent: System.Xml\n  isExternal: false\n  name: UniqueId\n  fullName: System.Xml.UniqueId\n  commentId: T:System.Xml.UniqueId\n  nameWithType: UniqueId\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}