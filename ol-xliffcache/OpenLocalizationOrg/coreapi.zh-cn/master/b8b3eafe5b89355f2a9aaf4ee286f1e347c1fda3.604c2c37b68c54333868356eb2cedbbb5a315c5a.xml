{"nodes":[{"pos":[706,714],"content":"SpinLock","needQuote":true,"nodes":[{"content":"SpinLock","pos":[0,8]}]},{"pos":[2681,2698],"content":"SpinLock(Boolean)","needQuote":true,"nodes":[{"content":"SpinLock(Boolean)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;Whether to capture and use thread IDs for debugging purposes.&lt;/p&gt;\\n","pos":[3538,3610],"source":"\\n<p>Whether to capture and use thread IDs for debugging purposes.</p>\\n"},{"pos":[3885,3891],"content":"IsHeld","needQuote":true,"nodes":[{"content":"IsHeld","pos":[0,6]}]},{"content":"\\n&lt;p&gt;true if the lock is currently held by any thread; otherwise false.&lt;/p&gt;\\n","pos":[4637,4714],"source":"\\n<p>true if the lock is currently held by any thread; otherwise false.</p>\\n"},{"pos":[5044,5065],"content":"IsHeldByCurrentThread","needQuote":true,"nodes":[{"content":"IsHeldByCurrentThread","pos":[0,21]}]},{"content":"\\n&lt;p&gt;true if the lock is held by the current thread; otherwise false.&lt;/p&gt;\\n","pos":[5869,5944],"source":"\\n<p>true if the lock is held by the current thread; otherwise false.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is disabled.&lt;/p&gt;\\n","pos":[6071,6120],"source":"\\n<p>Thread ownership tracking is disabled.</p>\\n"},{"pos":[6486,6514],"content":"IsThreadOwnerTrackingEnabled","needQuote":true,"nodes":[{"content":"IsThreadOwnerTrackingEnabled","pos":[0,28]}]},{"content":"\\n&lt;p&gt;true if thread ownership tracking is enabled for this instance; otherwise false.&lt;/p&gt;\\n","pos":[7362,7453],"source":"\\n<p>true if thread ownership tracking is enabled for this instance; otherwise false.</p>\\n"},{"pos":[7808,7826],"content":"Enter(ref Boolean)","needQuote":true,"nodes":[{"content":"Enter(ref Boolean)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;True if the lock is acquired; otherwise, false.","pos":[8630,8682],"source":"\\n<p>True if the lock is acquired; otherwise, false."},{"content":"&lt;em&gt;lockTaken&lt;/em&gt; must be initialized to false prior to calling this method.&lt;/p&gt;\\n","pos":[8683,8766],"source":" <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;lockTaken&lt;/em&gt; argument must be initialized to false prior to calling Enter.&lt;/p&gt;\\n","pos":[8877,8972],"source":"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling Enter.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread has already acquired this lock.&lt;/p&gt;\\n","pos":[9099,9202],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n"},{"pos":[9622,9628],"content":"Exit()","needQuote":true,"nodes":[{"content":"Exit()","pos":[0,6]}]},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread is not the owner of this lock.&lt;/p&gt;\\n","pos":[10429,10531],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\\n"},{"pos":[10837,10850],"content":"Exit(Boolean)","needQuote":true,"nodes":[{"content":"Exit(Boolean)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.&lt;/p&gt;\\n","pos":[11654,11804],"source":"\\n<p>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread is not the owner of this lock.&lt;/p&gt;\\n","pos":[11957,12059],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\\n"},{"pos":[12387,12408],"content":"TryEnter(ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(ref Boolean)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;True if the lock is acquired; otherwise, false.","pos":[13235,13287],"source":"\\n<p>True if the lock is acquired; otherwise, false."},{"content":"&lt;em&gt;lockTaken&lt;/em&gt; must be initialized to false prior to calling this method.&lt;/p&gt;\\n","pos":[13288,13371],"source":" <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;lockTaken&lt;/em&gt; argument must be initialized to false prior to calling TryEnter.&lt;/p&gt;\\n","pos":[13482,13580],"source":"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread has already acquired this lock.&lt;/p&gt;\\n","pos":[13707,13810],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n"},{"pos":[14344,14372],"content":"TryEnter(Int32, ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(Int32, ref Boolean)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;True if the lock is acquired; otherwise, false.","pos":[15517,15569],"source":"\\n<p>True if the lock is acquired; otherwise, false."},{"content":"&lt;em&gt;lockTaken&lt;/em&gt; must be initialized to false prior to calling this method.&lt;/p&gt;\\n","pos":[15570,15653],"source":" <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsTimeout&lt;/em&gt; is a negative number other than -1, which represents an infinite time-out.&lt;/p&gt;\\n","pos":[15784,15900],"source":"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;lockTaken&lt;/em&gt; argument must be initialized to false prior to calling TryEnter.&lt;/p&gt;\\n","pos":[15997,16095],"source":"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread has already acquired this lock.&lt;/p&gt;\\n","pos":[16222,16325],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n"},{"pos":[16903,16934],"content":"TryEnter(TimeSpan, ref Boolean)","needQuote":true,"nodes":[{"content":"TryEnter(TimeSpan, ref Boolean)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;True if the lock is acquired; otherwise, false.","pos":[18160,18212],"source":"\\n<p>True if the lock is acquired; otherwise, false."},{"content":"&lt;em&gt;lockTaken&lt;/em&gt; must be initialized to false prior to calling this method.&lt;/p&gt;\\n","pos":[18213,18296],"source":" <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;lockTaken&lt;/em&gt; argument must be initialized to false prior to calling TryEnter.&lt;/p&gt;\\n","pos":[18765,18863],"source":"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n"},{"content":"\\n&lt;p&gt;Thread ownership tracking is enabled, and the current thread has already acquired this lock.&lt;/p&gt;\\n","pos":[18990,19093],"source":"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n"},{"pos":[19470,19486],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[19681,19695],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[19820,19826],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19875,19876],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19926,19932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19992,19993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20079,20085],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20134,20135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20185,20191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20251,20252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20455,20468],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[20575,20586],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20640,20641],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20668,20669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20745,20756],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[20810,20811],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20838,20839],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21028,21038],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21139,21147],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21198,21199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21226,21227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21300,21308],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21359,21360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21387,21388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21591,21613],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[21761,21767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[21834,21835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21885,21891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21952,21953]},{"pos":[22008,22014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22074,22075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22172,22178],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22245,22246],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22296,22302],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22363,22364]},{"pos":[22419,22425],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22485,22486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22731,22762],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[22928,22943],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23019,23020],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23070,23076],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23137,23138]},{"pos":[23193,23199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23259,23260],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23366,23381],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23457,23458],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23508,23514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23575,23576]},{"pos":[23631,23637],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23697,23698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23924,23933],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[24026,24033],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24101,24102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24129,24130],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24199,24206],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24274,24275],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24302,24303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24459,24468],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[24622,24628],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24749,24755],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24887,24894],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25041,25046],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25190,25198],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[25368,25393],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[25606,25623],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[25810,25832],"content":"LockRecursionException","needQuote":true,"nodes":[{"content":"LockRecursionException","pos":[0,22]}]},{"pos":[26060,26088],"content":"SynchronizationLockException","needQuote":true,"nodes":[{"content":"SynchronizationLockException","pos":[0,28]}]},{"pos":[26323,26350],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Threading.SpinLock\n  commentId: T:System.Threading.SpinLock\n  id: SpinLock\n  parent: System.Threading\n  children:\n  - System.Threading.SpinLock.#ctor(System.Boolean)\n  - System.Threading.SpinLock.Enter(System.Boolean@)\n  - System.Threading.SpinLock.Exit\n  - System.Threading.SpinLock.Exit(System.Boolean)\n  - System.Threading.SpinLock.IsHeld\n  - System.Threading.SpinLock.IsHeldByCurrentThread\n  - System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  - System.Threading.SpinLock.TryEnter(System.Boolean@)\n  - System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  - System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  langs:\n  - csharp\n  - vb\n  name: SpinLock\n  fullName: System.Threading.SpinLock\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SpinLock\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 56\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Provides a mutual exclusion lock primitive where a thread trying to acquire the lock waits in a loop repeatedly checking until the lock becomes available.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      [DebuggerTypeProxy(typeof (SpinLock.SystemThreading_SpinLockDebugView))]\n\n      [DebuggerDisplay(\"IsHeld = {IsHeld}\")]\n\n      public struct SpinLock\n    content.vb: >-\n      <ComVisible(False)>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      <DebuggerTypeProxy(GetType(SpinLock.SystemThreading_SpinLockDebugView))>\n\n      <DebuggerDisplay(\"IsHeld = {IsHeld}\")>\n\n      Public Structure SpinLock\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: SpinLock\n- uid: System.Threading.SpinLock.#ctor(System.Boolean)\n  commentId: M:System.Threading.SpinLock.#ctor(System.Boolean)\n  id: '#ctor(System.Boolean)'\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: SpinLock(Boolean)\n  fullName: System.Threading.SpinLock.SpinLock(System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 119\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.SpinLock\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with the option to track thread IDs to improve debugging.</p>\\n\"\n  syntax:\n    content: public SpinLock(bool enableThreadOwnerTracking)\n    content.vb: Public Sub New(enableThreadOwnerTracking As Boolean)\n    parameters:\n    - id: enableThreadOwnerTracking\n      type: System.Boolean\n      description: \"\\n<p>Whether to capture and use thread IDs for debugging purposes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SpinLock.SpinLock(Boolean)\n- uid: System.Threading.SpinLock.IsHeld\n  commentId: P:System.Threading.SpinLock.IsHeld\n  id: IsHeld\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: IsHeld\n  fullName: System.Threading.SpinLock.IsHeld\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsHeld\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 635\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether the lock is currently held by any thread.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsHeld\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsHeld As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the lock is currently held by any thread; otherwise false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SpinLock.IsHeld\n- uid: System.Threading.SpinLock.IsHeldByCurrentThread\n  commentId: P:System.Threading.SpinLock.IsHeldByCurrentThread\n  id: IsHeldByCurrentThread\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: IsHeldByCurrentThread\n  fullName: System.Threading.SpinLock.IsHeldByCurrentThread\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsHeldByCurrentThread\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 661\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether the lock is held by the current thread.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsHeldByCurrentThread\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsHeldByCurrentThread As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the lock is held by the current thread; otherwise false.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>Thread ownership tracking is disabled.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SpinLock.IsHeldByCurrentThread\n- uid: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  commentId: P:System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  id: IsThreadOwnerTrackingEnabled\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: IsThreadOwnerTrackingEnabled\n  fullName: System.Threading.SpinLock.IsThreadOwnerTrackingEnabled\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsThreadOwnerTrackingEnabled\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 675\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether thread ownership tracking is enabled for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      public bool IsThreadOwnerTrackingEnabled\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          get;\n      }\n    content.vb: Public ReadOnly Property IsThreadOwnerTrackingEnabled As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if thread ownership tracking is enabled for this instance; otherwise false.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: SpinLock.IsThreadOwnerTrackingEnabled\n- uid: System.Threading.SpinLock.Enter(System.Boolean@)\n  commentId: M:System.Threading.SpinLock.Enter(System.Boolean@)\n  id: Enter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: Enter(ref Boolean)\n  fullName: System.Threading.SpinLock.Enter(ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Enter\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 157\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Acquires the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\\n\"\n  syntax:\n    content: public void Enter(ref bool lockTaken)\n    content.vb: Public Sub Enter(ByRef lockTaken As Boolean)\n    parameters:\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling Enter.</p>\\n\"\n  - type: System.Threading.LockRecursionException\n    commentId: T:System.Threading.LockRecursionException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.SpinLock.Enter(ByRef System.Boolean)\n  name.vb: Enter(ByRef Boolean)\n  nameWithType: SpinLock.Enter(ref Boolean)\n  nameWithType.vb: SpinLock.Enter(ByRef Boolean)\n- uid: System.Threading.SpinLock.Exit\n  commentId: M:System.Threading.SpinLock.Exit\n  id: Exit\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: Exit()\n  fullName: System.Threading.SpinLock.Exit()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exit\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 544\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the lock.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void Exit()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub Exit\n  exceptions:\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SpinLock.Exit()\n- uid: System.Threading.SpinLock.Exit(System.Boolean)\n  commentId: M:System.Threading.SpinLock.Exit(System.Boolean)\n  id: Exit(System.Boolean)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: Exit(Boolean)\n  fullName: System.Threading.SpinLock.Exit(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Exit\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 575\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the lock.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      public void Exit(bool useMemoryBarrier)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      Public Sub Exit(useMemoryBarrier As Boolean)\n    parameters:\n    - id: useMemoryBarrier\n      type: System.Boolean\n      description: \"\\n<p>A Boolean value that indicates whether a memory fence should be issued in order to immediately publish the exit operation to other threads.</p>\\n\"\n  exceptions:\n  - type: System.Threading.SynchronizationLockException\n    commentId: T:System.Threading.SynchronizationLockException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread is not the owner of this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SpinLock.Exit(Boolean)\n- uid: System.Threading.SpinLock.TryEnter(System.Boolean@)\n  commentId: M:System.Threading.SpinLock.TryEnter(System.Boolean@)\n  id: TryEnter(System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(ref Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 189\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\\n\"\n  syntax:\n    content: public void TryEnter(ref bool lockTaken)\n    content.vb: Public Sub TryEnter(ByRef lockTaken As Boolean)\n    parameters:\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n\"\n  - type: System.Threading.LockRecursionException\n    commentId: T:System.Threading.LockRecursionException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.SpinLock.TryEnter(ByRef System.Boolean)\n  name.vb: TryEnter(ByRef Boolean)\n  nameWithType: SpinLock.TryEnter(ref Boolean)\n  nameWithType.vb: SpinLock.TryEnter(ByRef Boolean)\n- uid: System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  commentId: M:System.Threading.SpinLock.TryEnter(System.Int32,System.Boolean@)\n  id: TryEnter(System.Int32,System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(Int32, ref Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(System.Int32, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 256\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\\n\"\n  syntax:\n    content: public void TryEnter(int millisecondsTimeout, ref bool lockTaken)\n    content.vb: Public Sub TryEnter(millisecondsTimeout As Integer, ByRef lockTaken As Boolean)\n    parameters:\n    - id: millisecondsTimeout\n      type: System.Int32\n      description: \"\\n<p>The number of milliseconds to wait, or <xref href=\\\"System.Threading.Timeout.Infinite\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> (-1) to wait indefinitely.</p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n\"\n  - type: System.Threading.LockRecursionException\n    commentId: T:System.Threading.LockRecursionException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.SpinLock.TryEnter(System.Int32, ByRef System.Boolean)\n  name.vb: TryEnter(Int32, ByRef Boolean)\n  nameWithType: SpinLock.TryEnter(Int32, ref Boolean)\n  nameWithType.vb: SpinLock.TryEnter(Int32, ByRef Boolean)\n- uid: System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  commentId: M:System.Threading.SpinLock.TryEnter(System.TimeSpan,System.Boolean@)\n  id: TryEnter(System.TimeSpan,System.Boolean@)\n  parent: System.Threading.SpinLock\n  langs:\n  - csharp\n  - vb\n  name: TryEnter(TimeSpan, ref Boolean)\n  fullName: System.Threading.SpinLock.TryEnter(System.TimeSpan, ref System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/SpinLock.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryEnter\n    path: src/mscorlib/src/System/Threading/SpinLock.cs\n    startLine: 220\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Attempts to acquire the lock in a reliable manner, such that even if an exception occurs within the method call, <em>lockTaken</em> can be examined reliably to determine whether the lock was acquired.</p>\\n\"\n  syntax:\n    content: public void TryEnter(TimeSpan timeout, ref bool lockTaken)\n    content.vb: Public Sub TryEnter(timeout As TimeSpan, ByRef lockTaken As Boolean)\n    parameters:\n    - id: timeout\n      type: System.TimeSpan\n      description: \"\\n<p>A <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the number of milliseconds to wait, or a <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\\n\"\n    - id: lockTaken\n      type: System.Boolean\n      description: \"\\n<p>True if the lock is acquired; otherwise, false. <em>lockTaken</em> must be initialized to false prior to calling this method.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> milliseconds.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>lockTaken</em> argument must be initialized to false prior to calling TryEnter.</p>\\n\"\n  - type: System.Threading.LockRecursionException\n    commentId: T:System.Threading.LockRecursionException\n    description: \"\\n<p>Thread ownership tracking is enabled, and the current thread has already acquired this lock.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.SpinLock.TryEnter(System.TimeSpan, ByRef System.Boolean)\n  name.vb: TryEnter(TimeSpan, ByRef Boolean)\n  nameWithType: SpinLock.TryEnter(TimeSpan, ref Boolean)\n  nameWithType.vb: SpinLock.TryEnter(TimeSpan, ByRef Boolean)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Threading.LockRecursionException\n  isExternal: false\n  name: LockRecursionException\n  fullName: System.Threading.LockRecursionException\n  nameWithType: LockRecursionException\n  commentId: T:System.Threading.LockRecursionException\n- uid: System.Threading.SynchronizationLockException\n  isExternal: false\n  name: SynchronizationLockException\n  fullName: System.Threading.SynchronizationLockException\n  nameWithType: SynchronizationLockException\n  commentId: T:System.Threading.SynchronizationLockException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}