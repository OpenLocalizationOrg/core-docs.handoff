{"nodes":[{"pos":[1538,1544],"content":"RSACng","needQuote":true,"nodes":[{"content":"RSACng","pos":[0,6]}]},{"pos":[4928,4936],"content":"RSACng()","needQuote":true,"nodes":[{"content":"RSACng()","pos":[0,8]}]},{"pos":[6006,6019],"content":"RSACng(Int32)","needQuote":true,"nodes":[{"content":"RSACng(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The size of the key to generate in bits.","pos":[6897,6942],"source":"\\n<p>The size of the key to generate in bits."},{"content":"&lt;/p&gt;\\n","pos":[6943,6949],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keySize&lt;/em&gt; is not valid.","pos":[7114,7151],"source":"\\n<p>\\n<em>keySize</em> is not valid."},{"content":"&lt;/p&gt;\\n","pos":[7152,7158],"source":" </p>\\n"},{"pos":[7567,7581],"content":"RSACng(CngKey)","needQuote":true,"nodes":[{"content":"RSACng(CngKey)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key to use for RSA operations.","pos":[8466,8505],"source":"\\n<p>The key to use for RSA operations."},{"content":"&lt;/p&gt;\\n","pos":[8506,8512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is not a valid RSA key.","pos":[8623,8666],"source":"\\n<p>\\n<em>key</em> is not a valid RSA key."},{"content":"&lt;/p&gt;\\n","pos":[8667,8673],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[8778,8823],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[8824,8830],"source":" </p>\\n"},{"pos":[9121,9124],"content":"Key","needQuote":true,"nodes":[{"content":"Key","pos":[0,3]}]},{"pos":[10600,10613],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[11950,11987],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to decrypt.&lt;/p&gt;\\n","pos":[12882,12913],"source":"\\n<p>The data to decrypt.</p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.&lt;/p&gt;\\n","pos":[13015,13043],"source":"\\n<p>The padding mode.</p>\\n"},{"content":"\\n&lt;p&gt;The decrypted data.&lt;/p&gt;\\n","pos":[13103,13133],"source":"\\n<p>The decrypted data.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13372,13418],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13419,13485],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13486,13492],"source":" </p>\\n"},{"pos":[14729,14745],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[16051,16088],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The data to encrypt.&lt;/p&gt;\\n","pos":[16982,17013],"source":"\\n<p>The data to encrypt.</p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.&lt;/p&gt;\\n","pos":[17115,17143],"source":"\\n<p>The padding mode.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;data&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17534,17580],"source":"\\n<p>\\n<em>data</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17581,17653],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n"},{"pos":[18747,18772],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to include private parameters; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[19769,19863],"source":"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19864,19870],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key used by the RSA object.","pos":[19959,19995],"source":"\\n<p>The key used by the RSA object."},{"content":"&lt;/p&gt;\\n","pos":[19996,20002],"source":" </p>\\n"},{"pos":[20690,20739],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[22840,22875],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[24447,24478],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The RSA parameters.","pos":[25527,25551],"source":"\\n<p>The RSA parameters."},{"content":"&lt;/p&gt;\\n","pos":[25552,25558],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;parameters&lt;/em&gt; contains neither an exponent nor a modulus.","pos":[25777,25847],"source":"\\n<p>\\n<em>parameters</em> contains neither an exponent nor a modulus."},{"content":"&lt;/p&gt;\\n","pos":[25848,25854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;parameters&lt;/em&gt; is not a valid RSA key.","pos":[26005,26055],"source":"\\n<p>\\n<em>parameters</em> is not a valid RSA key."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;parameters&lt;/em&gt; is a full key pair and the default KSP is used.","pos":[26056,26147],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> is a full key pair and the default KSP is used."},{"content":"&lt;/p&gt;\\n","pos":[26148,26154],"source":" </p>\\n"},{"pos":[26837,26893],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"content":"\\n&lt;p&gt;The hash to sign.&lt;/p&gt;\\n","pos":[27938,27966],"source":"\\n<p>The hash to sign.</p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm name.&lt;/p&gt;\\n","pos":[28071,28106],"source":"\\n<p>The hash algorithm name.</p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.&lt;/p&gt;\\n","pos":[28207,28235],"source":"\\n<p>The padding mode.</p>\\n"},{"content":"\\n&lt;p&gt;The signed data.&lt;/p&gt;\\n","pos":[28295,28322],"source":"\\n<p>The signed data.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28608,28654],"source":"\\n<p>\\n<em>hash</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28655,28727],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n"},{"pos":[30616,30682],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;The hash to verify.","pos":[31799,31823],"source":"\\n<p>The hash to verify."},{"content":"&lt;/p&gt;\\n","pos":[31824,31830],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The signature of the data.","pos":[31898,31929],"source":"\\n<p>The signature of the data."},{"content":"&lt;/p&gt;\\n","pos":[31930,31936],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The hash algorithm name.","pos":[32041,32070],"source":"\\n<p>The hash algorithm name."},{"content":"&lt;/p&gt;\\n","pos":[32071,32077],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The padding mode.","pos":[32178,32200],"source":"\\n<p>The padding mode."},{"content":"&lt;/p&gt;\\n","pos":[32201,32207],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the signature verifies for the hash; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[32268,32371],"source":"\\n<p>\\n<strong>true</strong> if the signature verifies for the hash; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32372,32378],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;hash&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32680,32726],"source":"\\n<p>\\n<em>hash</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[32727,32795],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;padding&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32796,32868],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n"},{"pos":[34291,34319],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[34516,34522],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34724,34743],"content":"AsymmetricAlgorithm","needQuote":true,"nodes":[{"content":"AsymmetricAlgorithm","pos":[0,19]}]},{"pos":[35012,35015],"content":"RSA","needQuote":true,"nodes":[{"content":"RSA","pos":[0,3]}]},{"pos":[35200,35211],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[35422,35430],"content":"Create()","needQuote":true,"nodes":[{"content":"Create()","pos":[0,8]}]},{"pos":[35559,35565],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[35651,35652],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35679,35680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35767,35773],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[35859,35860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35887,35888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36121,36135],"content":"Create(String)","needQuote":true,"nodes":[{"content":"Create(String)","pos":[0,14]}]},{"pos":[36292,36298],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[36384,36385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36435,36441],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36501,36502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36604,36610],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[36696,36697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36747,36753],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36813,36814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37166,37222],"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[37815,37823],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[37911,37912],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37960,37964],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[38023,38025]},{"content":",","pos":[38057,38058]},{"pos":[38146,38163],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[38257,38258]},{"pos":[38348,38367],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[38462,38463],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38663,38671],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[38759,38760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38808,38812],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[38870,38872],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[38901,38902]},{"pos":[38990,39007],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[39101,39102]},{"pos":[39192,39211],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[39306,39307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39905,39975],"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)","pos":[0,70]}]},{"pos":[40664,40672],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[40760,40761],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40809,40813],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[40872,40874]},{"content":",","pos":[40906,40907]},{"pos":[40961,40966],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[41026,41027]},{"pos":[41081,41086],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[41146,41147]},{"pos":[41235,41252],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[41346,41347]},{"pos":[41437,41456],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[41551,41552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41778,41786],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[41874,41875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41923,41927],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41985,41987],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[42016,42017]},{"pos":[42071,42076],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[42136,42137]},{"pos":[42191,42196],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[42256,42257]},{"pos":[42345,42362],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[42456,42457]},{"pos":[42547,42566],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[42661,42662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43291,43347],"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignData(Stream, HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[43708,43716],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[43804,43805],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43858,43864],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[43928,43929]},{"pos":[44017,44034],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[44128,44129]},{"pos":[44219,44238],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[44333,44334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44537,44545],"content":"SignData","needQuote":true,"nodes":[{"content":"SignData","pos":[0,8]}]},{"pos":[44633,44634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44687,44693],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[44757,44758]},{"pos":[44846,44863],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[44957,44958]},{"pos":[45048,45067],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[45162,45163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45674,45740],"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[46393,46403],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[46493,46494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46542,46546],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[46605,46607]},{"content":",","pos":[46639,46640]},{"pos":[46693,46697],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[46756,46758]},{"content":",","pos":[46790,46791]},{"pos":[46879,46896],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[46990,46991]},{"pos":[47081,47100],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[47195,47196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47412,47422],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[47512,47513],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47561,47565],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47623,47625],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[47654,47655]},{"pos":[47708,47712],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[47770,47772],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[47801,47802]},{"pos":[47890,47907],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[48001,48002]},{"pos":[48092,48111],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[48206,48207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48857,48937],"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,80]}]},{"pos":[49686,49696],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[49786,49787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49835,49839],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[49898,49900]},{"content":",","pos":[49932,49933]},{"pos":[49987,49992],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[50052,50053]},{"pos":[50107,50112],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[50172,50173]},{"pos":[50226,50230],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[50289,50291]},{"content":",","pos":[50323,50324]},{"pos":[50412,50429],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[50523,50524]},{"pos":[50614,50633],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[50728,50729],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50971,50981],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[51071,51072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51120,51124],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51182,51184],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[51213,51214]},{"pos":[51268,51273],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[51333,51334]},{"pos":[51388,51393],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[51453,51454]},{"pos":[51507,51511],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[51569,51571],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[51600,51601]},{"pos":[51689,51706],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[51800,51801]},{"pos":[51891,51910],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[52005,52006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52687,52753],"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[53415,53425],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[53515,53516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53569,53575],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[53639,53640]},{"pos":[53693,53697],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[53756,53758]},{"content":",","pos":[53790,53791]},{"pos":[53879,53896],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[53990,53991]},{"pos":[54081,54100],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[54195,54196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54415,54425],"content":"VerifyData","needQuote":true,"nodes":[{"content":"VerifyData","pos":[0,10]}]},{"pos":[54515,54516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54569,54575],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[54639,54640]},{"pos":[54693,54697],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[54755,54757],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[54786,54787]},{"pos":[54875,54892],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[54986,54987]},{"pos":[55077,55096],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[55191,55192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55711,55731],"content":"DecryptValue(Byte[])","needQuote":true,"nodes":[{"content":"DecryptValue(Byte[])","pos":[0,20]}]},{"pos":[56008,56020],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[56112,56113],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56161,56165],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[56224,56226]},{"pos":[56257,56258],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56366,56378],"content":"DecryptValue","needQuote":true,"nodes":[{"content":"DecryptValue","pos":[0,12]}]},{"pos":[56470,56471],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56519,56523],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[56581,56583],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[56611,56612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56928,56948],"content":"EncryptValue(Byte[])","needQuote":true,"nodes":[{"content":"EncryptValue(Byte[])","pos":[0,20]}]},{"pos":[57225,57237],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[57329,57330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57378,57382],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[57441,57443]},{"pos":[57474,57475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57583,57595],"content":"EncryptValue","needQuote":true,"nodes":[{"content":"EncryptValue","pos":[0,12]}]},{"pos":[57687,57688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57736,57740],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[57798,57800],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[57828,57829],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58146,58167],"content":"FromXmlString(String)","needQuote":true,"nodes":[{"content":"FromXmlString(String)","pos":[0,21]}]},{"pos":[58338,58351],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[58444,58445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58495,58501],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58561,58562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58671,58684],"content":"FromXmlString","needQuote":true,"nodes":[{"content":"FromXmlString","pos":[0,13]}]},{"pos":[58777,58778],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58828,58834],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[58894,58895],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59169,59189],"content":"ToXmlString(Boolean)","needQuote":true,"nodes":[{"content":"ToXmlString(Boolean)","pos":[0,20]}]},{"pos":[59358,59369],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[59460,59461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59512,59519],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[59580,59581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59689,59700],"content":"ToXmlString","needQuote":true,"nodes":[{"content":"ToXmlString","pos":[0,11]}]},{"pos":[59791,59792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59843,59850],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[59911,59912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60177,60197],"content":"KeyExchangeAlgorithm","needQuote":true,"nodes":[{"content":"KeyExchangeAlgorithm","pos":[0,20]}]},{"pos":[60503,60521],"content":"SignatureAlgorithm","needQuote":true,"nodes":[{"content":"SignatureAlgorithm","pos":[0,18]}]},{"pos":[60847,60859],"content":"KeySizeValue","needQuote":true,"nodes":[{"content":"KeySizeValue","pos":[0,12]}]},{"pos":[61221,61239],"content":"LegalKeySizesValue","needQuote":true,"nodes":[{"content":"LegalKeySizesValue","pos":[0,18]}]},{"pos":[61608,61617],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[61780,61787],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[61890,61891],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61918,61919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62023,62030],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[62133,62134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62161,62162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62445,62452],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[62611,62616],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[62717,62718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62745,62746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62848,62853],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[62954,62955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62982,62983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63264,63271],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[63538,63548],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[63643,63651],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[63720,63721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63748,63749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63819,63827],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[63896,63897],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63924,63925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64108,64122],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[64241,64247],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64314,64315],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64365,64371],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64431,64432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64515,64521],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[64588,64589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64639,64645],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[64705,64706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64920,64942],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[65090,65096],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65163,65164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65214,65220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65281,65282]},{"pos":[65337,65343],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65403,65404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65501,65507],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[65574,65575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65625,65631],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[65692,65693]},{"pos":[65748,65754],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[65814,65815],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66060,66091],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[66257,66272],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[66348,66349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66399,66405],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[66466,66467]},{"pos":[66522,66528],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66588,66589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66695,66710],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[66786,66787],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66837,66843],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[66904,66905]},{"pos":[66960,66966],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[67026,67027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67257,67270],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[67371,67382],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[67454,67455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67482,67483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67556,67567],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[67639,67640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67667,67668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67843,67852],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[67945,67952],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[68020,68021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68048,68049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68118,68125],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[68193,68194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68221,68222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68397,68414],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[68523,68538],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[68614,68615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68642,68643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68720,68735],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[68811,68812],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68839,68840],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68985,68991],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[69121,69126],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[69312,69318],"content":"CngKey","needQuote":true,"nodes":[{"content":"CngKey","pos":[0,6]}]},{"pos":[69597,69610],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[69869,69879],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[70081,70089],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[70153,70155]},{"pos":[70244,70252],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[70315,70317],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[70575,70612],"content":"Decrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Decrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[71043,71050],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[71137,71138],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71186,71190],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[71249,71251]},{"content":",","pos":[71283,71284]},{"pos":[71375,71395],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[71491,71492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71645,71652],"content":"Decrypt","needQuote":true,"nodes":[{"content":"Decrypt","pos":[0,7]}]},{"pos":[71739,71740],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71788,71792],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[71850,71852],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[71881,71882]},{"pos":[71973,71993],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[72089,72090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72376,72382],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[72502,72506],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[72565,72567]},{"pos":[72630,72634],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[72692,72694],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[72885,72905],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[73236,73252],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[73445,73452],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[73555,73556],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73607,73614],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[73675,73676],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73796,73803],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[73906,73907],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73958,73965],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74026,74027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74252,74259],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74524,74561],"content":"Encrypt(Byte[], RSAEncryptionPadding)","needQuote":true,"nodes":[{"content":"Encrypt(Byte[], RSAEncryptionPadding)","pos":[0,37]}]},{"pos":[74992,74999],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[75086,75087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75135,75139],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[75198,75200]},{"content":",","pos":[75232,75233]},{"pos":[75324,75344],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[75440,75441],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75594,75601],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[75688,75689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75737,75741],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[75799,75801],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[75830,75831]},{"pos":[75922,75942],"content":"RSAEncryptionPadding","needQuote":true,"nodes":[{"content":"RSAEncryptionPadding","pos":[0,20]}]},{"pos":[76038,76039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76439,76464],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[76643,76659],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[76755,76756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76807,76814],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[76875,76876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76989,77005],"content":"ExportParameters","needQuote":true,"nodes":[{"content":"ExportParameters","pos":[0,16]}]},{"pos":[77101,77102],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77153,77160],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[77221,77222],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77483,77496],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[77847,77896],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[78415,78423],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[78511,78512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78560,78564],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[78623,78625]},{"content":",","pos":[78657,78658]},{"pos":[78712,78717],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78777,78778]},{"pos":[78832,78837],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[78897,78898]},{"pos":[78986,79003],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[79096,79097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79274,79282],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[79370,79371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79419,79423],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[79481,79483],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[79512,79513]},{"pos":[79567,79572],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79632,79633]},{"pos":[79687,79692],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[79752,79753]},{"pos":[79841,79858],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[79951,79952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80378,80395],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[80735,80770],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[81032,81040],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[81128,81129],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81182,81188],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[81252,81253]},{"pos":[81341,81358],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[81451,81452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81606,81614],"content":"HashData","needQuote":true,"nodes":[{"content":"HashData","pos":[0,8]}]},{"pos":[81702,81703],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81756,81762],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"content":",","pos":[81826,81827]},{"pos":[81915,81932],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[82025,82026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82293,82299],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[82429,82438],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[82683,82714],"content":"ImportParameters(RSAParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(RSAParameters)","pos":[0,31]}]},{"pos":[82949,82965],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[83061,83062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83141,83154],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[83243,83244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83385,83401],"content":"ImportParameters","needQuote":true,"nodes":[{"content":"ImportParameters","pos":[0,16]}]},{"pos":[83497,83498],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83577,83590],"content":"RSAParameters","needQuote":true,"nodes":[{"content":"RSAParameters","pos":[0,13]}]},{"pos":[83679,83680],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84088,84144],"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,56]}]},{"pos":[84737,84745],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[84833,84834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84882,84886],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[84945,84947]},{"content":",","pos":[84979,84980]},{"pos":[85068,85085],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[85179,85180]},{"pos":[85270,85289],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[85384,85385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85585,85593],"content":"SignHash","needQuote":true,"nodes":[{"content":"SignHash","pos":[0,8]}]},{"pos":[85681,85682],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85730,85734],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[85792,85794],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[85823,85824]},{"pos":[85912,85929],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[86023,86024]},{"pos":[86114,86133],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[86228,86229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86694,86713],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[87121,87187],"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)","pos":[0,66]}]},{"pos":[87840,87850],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[87940,87941],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87989,87993],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[88052,88054]},{"content":",","pos":[88086,88087]},{"pos":[88140,88144],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[88203,88205]},{"content":",","pos":[88237,88238]},{"pos":[88326,88343],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[88437,88438]},{"pos":[88528,88547],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[88642,88643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88859,88869],"content":"VerifyHash","needQuote":true,"nodes":[{"content":"VerifyHash","pos":[0,10]}]},{"pos":[88959,88960],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89008,89012],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89070,89072],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[89101,89102]},{"pos":[89155,89159],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[89217,89219],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[89248,89249]},{"pos":[89337,89354],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"content":",","pos":[89448,89449]},{"pos":[89539,89558],"content":"RSASignaturePadding","needQuote":true,"nodes":[{"content":"RSASignaturePadding","pos":[0,19]}]},{"pos":[89653,89654],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90119,90141],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]},{"pos":[90389,90406],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[90582,90603],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Security.Cryptography.RSACng\n  commentId: T:System.Security.Cryptography.RSACng\n  id: RSACng\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.RSACng.#ctor\n  - System.Security.Cryptography.RSACng.#ctor(System.Int32)\n  - System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)\n  - System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACng.Dispose(System.Boolean)\n  - System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  - System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.RSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)\n  - System.Security.Cryptography.RSACng.Key\n  - System.Security.Cryptography.RSACng.LegalKeySizes\n  - System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  langs:\n  - csharp\n  - vb\n  name: RSACng\n  fullName: System.Security.Cryptography.RSACng\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RSACng\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 273\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Provides a Cryptography Next Generation (CNG) implementation of the RSA algorithm. </p>\\n\"\n  syntax:\n    content: 'public sealed class RSACng : RSA, IDisposable'\n    content.vb: >-\n      Public NotInheritable Class RSACng\n          Inherits RSA\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.AsymmetricAlgorithm\n  - System.Security.Cryptography.RSA\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.RSA.Create\n  - System.Security.Cryptography.RSA.Create(System.String)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  - System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  - System.Security.Cryptography.RSA.FromXmlString(System.String)\n  - System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  - System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  - System.Security.Cryptography.RSA.SignatureAlgorithm\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  - System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: RSACng\n- uid: System.Security.Cryptography.RSACng.#ctor\n  commentId: M:System.Security.Cryptography.RSACng.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: RSACng()\n  fullName: System.Security.Cryptography.RSACng.RSACng()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 275\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a random 2,048-bit key pair. </p>\\n\"\n  syntax:\n    content: public RSACng()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACng.RSACng()\n- uid: System.Security.Cryptography.RSACng.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.RSACng.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: RSACng(Int32)\n  fullName: System.Security.Cryptography.RSACng.RSACng(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 276\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a randomly generated key of the specified size. </p>\\n\"\n  syntax:\n    content: public RSACng(int keySize)\n    content.vb: Public Sub New(keySize As Integer)\n    parameters:\n    - id: keySize\n      type: System.Int32\n      description: \"\\n<p>The size of the key to generate in bits. </p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>keySize</em> is not valid. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACng.RSACng(Int32)\n- uid: System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)\n  commentId: M:System.Security.Cryptography.RSACng.#ctor(System.Security.Cryptography.CngKey)\n  id: '#ctor(System.Security.Cryptography.CngKey)'\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: RSACng(CngKey)\n  fullName: System.Security.Cryptography.RSACng.RSACng(System.Security.Cryptography.CngKey)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 277\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.RSACng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified key. </p>\\n\"\n  syntax:\n    content: public RSACng(CngKey key)\n    content.vb: Public Sub New(key As CngKey)\n    parameters:\n    - id: key\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>The key to use for RSA operations. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>key</em> is not a valid RSA key. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RSACng.RSACng(CngKey)\n- uid: System.Security.Cryptography.RSACng.Key\n  commentId: P:System.Security.Cryptography.RSACng.Key\n  id: Key\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: Key\n  fullName: System.Security.Cryptography.RSACng.Key\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Key\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 278\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the key that will be used by the <xref href=\\\"System.Security.Cryptography.RSACng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for any cryptographic operation that it performs. </p>\\n\"\n  syntax:\n    content: public CngKey Key { get; }\n    content.vb: Public ReadOnly Property Key As CngKey\n    parameters: []\n    return:\n      type: System.Security.Cryptography.CngKey\n      description: \"\\n<p>The key used by the <xref href=\\\"System.Security.Cryptography.RSACng\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RSACng.Key\n- uid: System.Security.Cryptography.RSACng.LegalKeySizes\n  commentId: P:System.Security.Cryptography.RSACng.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.RSACng.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 279\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: RSACng.LegalKeySizes\n- uid: System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACng.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSACng.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Decrypt\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 280\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Decrypts input data using the specified padding mode.</p>\\n\"\n  syntax:\n    content: public override byte[] Decrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Decrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to decrypt.</p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding mode.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The decrypted data.</p>\\n\"\n  overridden: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or else the <xref href=\\\"System.Security.Cryptography.RSAEncryptionPadding.Mode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of <em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.    </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACng.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSACng.Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSACng.Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSACng.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACng.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.RSACng.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 281\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  overridden: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: RSACng.Dispose(Boolean)\n- uid: System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  commentId: M:System.Security.Cryptography.RSACng.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  id: Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSACng.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 282\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Encrypts the input data using the specified padding.</p>\\n\"\n  syntax:\n    content: public override byte[] Encrypt(byte[] data, RSAEncryptionPadding padding)\n    content.vb: Public Overrides Function Encrypt(data As Byte(), padding As RSAEncryptionPadding) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n      description: \"\\n<p>The data to encrypt.</p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSAEncryptionPadding\n      description: \"\\n<p>The padding mode.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>Returns <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> .</p>\\n\"\n  overridden: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>data</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pss\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACng.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  nameWithType: RSACng.Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSACng.Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSACng.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 283\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Exports the key used by the RSA object into an <xref href=\\\"System.Security.Cryptography.RSAParameters\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  syntax:\n    content: public override RSAParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As RSAParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to include private parameters; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The key used by the RSA object. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSACng.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSACng.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 284\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACng.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  nameWithType: RSACng.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: RSACng.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.RSACng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSACng.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 285\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  overridden: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: RSACng.HashData(Stream, HashAlgorithmName)\n- uid: System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)\n  commentId: M:System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)\n  id: ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSACng.ImportParameters(System.Security.Cryptography.RSAParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 286\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Replaces the existing key that the current instance is working with by creating a new <xref href=\\\"System.Security.Cryptography.CngKey\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the parameters structure. </p>\\n\"\n  syntax:\n    content: public override void ImportParameters(RSAParameters parameters)\n    content.vb: Public Overrides Sub ImportParameters(parameters As RSAParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.RSAParameters\n      description: \"\\n<p>The RSA parameters. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>parameters</em> contains neither an exponent nor a modulus. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>parameters</em> is not a valid RSA key. </p>\\n<p>-or-</p>\\n<p>\\n<em>parameters</em> is a full key pair and the default KSP is used. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: RSACng.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACng.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSACng.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 287\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Signs data that was hashed by using the specified hashing algorithm and padding mode.</p>\\n\"\n  syntax:\n    content: public override byte[] SignHash(byte[] hash, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function SignHash(hash As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash to sign.</p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm name.</p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode.</p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The signed data.</p>\\n\"\n  overridden: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pss\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACng.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACng.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSACng.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  commentId: M:System.Security.Cryptography.RSACng.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  id: VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSACng\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSACng.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs\n    startLine: 288\n  assemblies:\n  - System.Security.Cryptography.Cng\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Verifies data that was signed and already hashed with the specified algorithm and padding mode. </p>\\n\"\n  syntax:\n    content: public override bool VerifyHash(byte[] hash, byte[] signature, HashAlgorithmName hashAlgorithm, RSASignaturePadding padding)\n    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName, padding As RSASignaturePadding) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n      description: \"\\n<p>The hash to verify. </p>\\n\"\n    - id: signature\n      type: System.Byte[]\n      description: \"\\n<p>The signature of the data. </p>\\n\"\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The hash algorithm name. </p>\\n\"\n    - id: padding\n      type: System.Security.Cryptography.RSASignaturePadding\n      description: \"\\n<p>The padding mode. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the signature verifies for the hash; otherwise, <strong>false</strong>. </p>\\n\"\n  overridden: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>hash</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>signature</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>padding</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The value of the <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>hashAlgorithm</em> is <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>\\n<em>padding</em> does not equal <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pkcs1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Security.Cryptography.RSASignaturePadding.Pss\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.RSACng.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  nameWithType: RSACng.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSACng.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.AsymmetricAlgorithm\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsymmetricAlgorithm\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm\n  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm\n  nameWithType: AsymmetricAlgorithm\n- uid: System.Security.Cryptography.RSA\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSA\n  fullName: System.Security.Cryptography.RSA\n  commentId: T:System.Security.Cryptography.RSA\n  nameWithType: RSA\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.RSA.Create\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create()\n  fullName: System.Security.Cryptography.RSA.Create()\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Create\n  nameWithType: RSA.Create()\n- uid: System.Security.Cryptography.RSA.Create(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Create(String)\n  fullName: System.Security.Cryptography.RSA.Create(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Create(System.String)\n    name: Create\n    fullName: System.Security.Cryptography.RSA.Create\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Create(System.String)\n  nameWithType: RSA.Create(String)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Byte[], Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignData(Byte(), Int32, Int32, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignData\n    fullName: System.Security.Cryptography.RSA.SignData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignData(Stream, HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyData\n    fullName: System.Security.Cryptography.RSA.VerifyData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyData(Stream, Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyData(Stream, Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: DecryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  fullname.vb: System.Security.Cryptography.RSA.DecryptValue(System.Byte())\n  name.vb: DecryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n    name: DecryptValue\n    fullName: System.Security.Cryptography.RSA.DecryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])\n  nameWithType: RSA.DecryptValue(Byte[])\n  nameWithType.vb: RSA.DecryptValue(Byte())\n- uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: EncryptValue(Byte[])\n  fullName: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  fullname.vb: System.Security.Cryptography.RSA.EncryptValue(System.Byte())\n  name.vb: EncryptValue(Byte())\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n    name: EncryptValue\n    fullName: System.Security.Cryptography.RSA.EncryptValue\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])\n  nameWithType: RSA.EncryptValue(Byte[])\n  nameWithType.vb: RSA.EncryptValue(Byte())\n- uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: FromXmlString(String)\n  fullName: System.Security.Cryptography.RSA.FromXmlString(System.String)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.FromXmlString(System.String)\n    name: FromXmlString\n    fullName: System.Security.Cryptography.RSA.FromXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.FromXmlString(System.String)\n  nameWithType: RSA.FromXmlString(String)\n- uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ToXmlString(Boolean)\n  fullName: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n    name: ToXmlString\n    fullName: System.Security.Cryptography.RSA.ToXmlString\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)\n  nameWithType: RSA.ToXmlString(Boolean)\n- uid: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: KeyExchangeAlgorithm\n  fullName: System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm\n  nameWithType: RSA.KeyExchangeAlgorithm\n- uid: System.Security.Cryptography.RSA.SignatureAlgorithm\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignatureAlgorithm\n  fullName: System.Security.Cryptography.RSA.SignatureAlgorithm\n  commentId: P:System.Security.Cryptography.RSA.SignatureAlgorithm\n  nameWithType: RSA.SignatureAlgorithm\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySizeValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue\n  nameWithType: AsymmetricAlgorithm.KeySizeValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizesValue\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue\n  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n  nameWithType: AsymmetricAlgorithm.Dispose()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Clear()\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    name: Clear\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear\n  nameWithType: AsymmetricAlgorithm.Clear()\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: KeySize\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize\n  nameWithType: AsymmetricAlgorithm.KeySize\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.CngKey\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: CngKey\n  fullName: System.Security.Cryptography.CngKey\n  commentId: T:System.Security.Cryptography.CngKey\n  nameWithType: CngKey\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: LegalKeySizes\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes\n  nameWithType: AsymmetricAlgorithm.LegalKeySizes\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    fullName: ()\n  nameWithType: KeySizes[]\n  nameWithType.vb: KeySizes()\n- uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Decrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Decrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Decrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Decrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Decrypt\n    fullName: System.Security.Cryptography.RSA.Decrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType: RSA.Decrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Decrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Cryptography.RSAEncryptionPadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAEncryptionPadding\n  fullName: System.Security.Cryptography.RSAEncryptionPadding\n  commentId: T:System.Security.Cryptography.RSAEncryptionPadding\n  nameWithType: RSAEncryptionPadding\n- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.AsymmetricAlgorithm\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)\n  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: Encrypt(Byte[], RSAEncryptionPadding)\n  fullName: System.Security.Cryptography.RSA.Encrypt(System.Byte[], System.Security.Cryptography.RSAEncryptionPadding)\n  fullname.vb: System.Security.Cryptography.RSA.Encrypt(System.Byte(), System.Security.Cryptography.RSAEncryptionPadding)\n  name.vb: Encrypt(Byte(), RSAEncryptionPadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n    name: Encrypt\n    fullName: System.Security.Cryptography.RSA.Encrypt\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSAEncryptionPadding\n    name: RSAEncryptionPadding\n    fullName: System.Security.Cryptography.RSAEncryptionPadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)\n  nameWithType: RSA.Encrypt(Byte[], RSAEncryptionPadding)\n  nameWithType.vb: RSA.Encrypt(Byte(), RSAEncryptionPadding)\n- uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n    name: ExportParameters\n    fullName: System.Security.Cryptography.RSA.ExportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)\n  nameWithType: RSA.ExportParameters(Boolean)\n- uid: System.Security.Cryptography.RSAParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSAParameters\n  fullName: System.Security.Cryptography.RSAParameters\n  commentId: T:System.Security.Cryptography.RSAParameters\n  nameWithType: RSAParameters\n- uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  fullname.vb: System.Security.Cryptography.RSA.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  nameWithType: RSA.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType.vb: RSA.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.RSA.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n    name: HashData\n    fullName: System.Security.Cryptography.RSA.HashData\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  nameWithType: RSA.HashData(Stream, HashAlgorithmName)\n- uid: System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  fullName: System.IO.Stream\n  commentId: T:System.IO.Stream\n  nameWithType: Stream\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  commentId: N:System.IO\n  nameWithType: System.IO\n- uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: ImportParameters(RSAParameters)\n  fullName: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n    name: ImportParameters\n    fullName: System.Security.Cryptography.RSA.ImportParameters\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.RSAParameters\n    name: RSAParameters\n    fullName: System.Security.Cryptography.RSAParameters\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)\n  nameWithType: RSA.ImportParameters(RSAParameters)\n- uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.SignHash(System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.SignHash(System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: SignHash\n    fullName: System.Security.Cryptography.RSA.SignHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.SignHash(Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.SignHash(Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.RSASignaturePadding\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: RSASignaturePadding\n  fullName: System.Security.Cryptography.RSASignaturePadding\n  commentId: T:System.Security.Cryptography.RSASignaturePadding\n  nameWithType: RSASignaturePadding\n- uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  parent: System.Security.Cryptography.RSA\n  isExternal: true\n  name: VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  fullName: System.Security.Cryptography.RSA.VerifyHash(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  fullname.vb: System.Security.Cryptography.RSA.VerifyHash(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.RSASignaturePadding)\n  name.vb: VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n  spec.csharp:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n    name: VerifyHash\n    fullName: System.Security.Cryptography.RSA.VerifyHash\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Security.Cryptography.RSASignaturePadding\n    name: RSASignaturePadding\n    fullName: System.Security.Cryptography.RSASignaturePadding\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)\n  nameWithType: RSA.VerifyHash(Byte[], Byte[], HashAlgorithmName, RSASignaturePadding)\n  nameWithType.vb: RSA.VerifyHash(Byte(), Byte(), HashAlgorithmName, RSASignaturePadding)\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}