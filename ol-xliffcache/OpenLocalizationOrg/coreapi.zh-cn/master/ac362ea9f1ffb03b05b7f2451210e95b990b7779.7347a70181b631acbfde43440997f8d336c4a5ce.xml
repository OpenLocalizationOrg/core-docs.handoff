{"nodes":[{"pos":[3297,3307],"content":"HttpClient","needQuote":true,"nodes":[{"content":"HttpClient","pos":[0,10]}]},{"pos":[4732,4744],"content":"HttpClient()","needQuote":true,"nodes":[{"content":"HttpClient()","pos":[0,12]}]},{"pos":[5718,5748],"content":"HttpClient(HttpMessageHandler)","needQuote":true,"nodes":[{"content":"HttpClient(HttpMessageHandler)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The HTTP handler stack to use for sending requests.","pos":[6558,6614],"source":"\\n<p>The HTTP handler stack to use for sending requests."},{"content":"&lt;/p&gt;\\n","pos":[6615,6621],"source":" </p>\\n"},{"pos":[7066,7105],"content":"HttpClient(HttpMessageHandler, Boolean)","needQuote":true,"nodes":[{"content":"HttpClient(HttpMessageHandler, Boolean)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the inner handler should be disposed of by Dispose(),&lt;strong&gt;false&lt;/strong&gt; if you intend to reuse the inner handler.&lt;/p&gt;\\n","pos":[8217,8372],"source":"\\n<p>\\n<strong>true</strong> if the inner handler should be disposed of by Dispose(),<strong>false</strong> if you intend to reuse the inner handler.</p>\\n"},{"pos":[8689,8700],"content":"BaseAddress","needQuote":true,"nodes":[{"content":"BaseAddress","pos":[0,11]}]},{"pos":[9939,9960],"content":"DefaultRequestHeaders","needQuote":true,"nodes":[{"content":"DefaultRequestHeaders","pos":[0,21]}]},{"pos":[11255,11283],"content":"MaxResponseContentBufferSize","needQuote":true,"nodes":[{"content":"MaxResponseContentBufferSize","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The size specified is less than or equal to zero.&lt;/p&gt;\\n","pos":[12376,12436],"source":"\\n<p>The size specified is less than or equal to zero.</p>\\n"},{"content":"\\n&lt;p&gt;An operation has already been started on the current instance.","pos":[12549,12616],"source":"\\n<p>An operation has already been started on the current instance."},{"content":"&lt;/p&gt;\\n","pos":[12617,12623],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current instance has been disposed.","pos":[12732,12776],"source":"\\n<p>The current instance has been disposed."},{"content":"&lt;/p&gt;\\n","pos":[12777,12783],"source":" </p>\\n"},{"pos":[13093,13100],"content":"Timeout","needQuote":true,"nodes":[{"content":"Timeout","pos":[0,7]}]},{"content":"\\n&lt;p&gt;An operation has already been started on the current instance.","pos":[14316,14383],"source":"\\n<p>An operation has already been started on the current instance."},{"content":"&lt;/p&gt;\\n","pos":[14384,14390],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current instance has been disposed.&lt;/p&gt;\\n","pos":[14499,14549],"source":"\\n<p>The current instance has been disposed.</p>\\n"},{"pos":[14880,14903],"content":"CancelPendingRequests()","needQuote":true,"nodes":[{"content":"CancelPendingRequests()","pos":[0,23]}]},{"pos":[15815,15834],"content":"DeleteAsync(String)","needQuote":true,"nodes":[{"content":"DeleteAsync(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[16582,16624],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17028,17089],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[17474,17615],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[18062,18100],"content":"DeleteAsync(String, CancellationToken)","needQuote":true,"nodes":[{"content":"DeleteAsync(String, CancellationToken)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[18987,19029],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[19126,19237],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19641,19702],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[20087,20228],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[20580,20596],"content":"DeleteAsync(Uri)","needQuote":true,"nodes":[{"content":"DeleteAsync(Uri)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[21332,21374],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21778,21839],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[22224,22365],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[22800,22835],"content":"DeleteAsync(Uri, CancellationToken)","needQuote":true,"nodes":[{"content":"DeleteAsync(Uri, CancellationToken)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[23710,23752],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[23849,23960],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24364,24425],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[24810,24951],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[25300,25316],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to releases only unmanaged resources.&lt;/p&gt;\\n","pos":[26122,26266],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n"},{"pos":[26702,26718],"content":"GetAsync(String)","needQuote":true,"nodes":[{"content":"GetAsync(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[27451,27493],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[27897,27958],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[28079,28220],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[28661,28699],"content":"GetAsync(String, HttpCompletionOption)","needQuote":true,"nodes":[{"content":"GetAsync(String, HttpCompletionOption)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[29582,29624],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;An HTTP completion option value that indicates when the operation should be considered completed.&lt;/p&gt;\\n","pos":[29722,29830],"source":"\\n<p>An HTTP completion option value that indicates when the operation should be considered completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30169,30230],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[30351,30492],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[31060,31117],"content":"GetAsync(String, HttpCompletionOption, CancellationToken)","needQuote":true,"nodes":[{"content":"GetAsync(String, HttpCompletionOption, CancellationToken)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[32138,32180],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;An HTTP  completion option value that indicates when the operation should be considered completed.&lt;/p&gt;\\n","pos":[32278,32387],"source":"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[32484,32595],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32934,32995],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[33116,33257],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[33733,33768],"content":"GetAsync(String, CancellationToken)","needQuote":true,"nodes":[{"content":"GetAsync(String, CancellationToken)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[34640,34682],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[34779,34890],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35229,35290],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[35411,35552],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[35892,35905],"content":"GetAsync(Uri)","needQuote":true,"nodes":[{"content":"GetAsync(Uri)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[36626,36668],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[37072,37133],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[37254,37395],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[37824,37859],"content":"GetAsync(Uri, HttpCompletionOption)","needQuote":true,"nodes":[{"content":"GetAsync(Uri, HttpCompletionOption)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[38730,38772],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;An HTTP  completion option value that indicates when the operation should be considered completed.&lt;/p&gt;\\n","pos":[38870,38979],"source":"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39383,39444],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[39565,39706],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[40262,40316],"content":"GetAsync(Uri, HttpCompletionOption, CancellationToken)","needQuote":true,"nodes":[{"content":"GetAsync(Uri, HttpCompletionOption, CancellationToken)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[41325,41367],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;An HTTP  completion option value that indicates when the operation should be considered completed.&lt;/p&gt;\\n","pos":[41465,41574],"source":"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[41671,41782],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[42186,42247],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[42368,42509],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[42973,43005],"content":"GetAsync(Uri, CancellationToken)","needQuote":true,"nodes":[{"content":"GetAsync(Uri, CancellationToken)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[43865,43907],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[44004,44115],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44519,44580],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[44701,44842],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[45215,45240],"content":"GetByteArrayAsync(String)","needQuote":true,"nodes":[{"content":"GetByteArrayAsync(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[46028,46070],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[46452,46513],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[46634,46775],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[47132,47154],"content":"GetByteArrayAsync(Uri)","needQuote":true,"nodes":[{"content":"GetByteArrayAsync(Uri)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[47930,47972],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48354,48415],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[48536,48677],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[49031,49053],"content":"GetStreamAsync(String)","needQuote":true,"nodes":[{"content":"GetStreamAsync(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[49825,49867],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[50252,50313],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[50434,50575],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[50920,50939],"content":"GetStreamAsync(Uri)","needQuote":true,"nodes":[{"content":"GetStreamAsync(Uri)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[51699,51741],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[52126,52187],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[52308,52449],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[52800,52822],"content":"GetStringAsync(String)","needQuote":true,"nodes":[{"content":"GetStringAsync(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[53594,53636],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54018,54079],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[54200,54341],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[54686,54705],"content":"GetStringAsync(Uri)","needQuote":true,"nodes":[{"content":"GetStringAsync(Uri)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[55465,55507],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55889,55950],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[56071,56212],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[56632,56662],"content":"PostAsync(String, HttpContent)","needQuote":true,"nodes":[{"content":"PostAsync(String, HttpContent)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[57474,57516],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[57596,57651],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[58055,58116],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[58237,58378],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[58914,58963],"content":"PostAsync(String, HttpContent, CancellationToken)","needQuote":true,"nodes":[{"content":"PostAsync(String, HttpContent, CancellationToken)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[59893,59935],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[60015,60070],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[60167,60278],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60682,60743],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[60864,61005],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[61446,61473],"content":"PostAsync(Uri, HttpContent)","needQuote":true,"nodes":[{"content":"PostAsync(Uri, HttpContent)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[62273,62315],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[62395,62450],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[62854,62915],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[63036,63177],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[63701,63747],"content":"PostAsync(Uri, HttpContent, CancellationToken)","needQuote":true,"nodes":[{"content":"PostAsync(Uri, HttpContent, CancellationToken)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[64665,64707],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[64787,64842],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[64939,65050],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65454,65515],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[65636,65777],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[66221,66250],"content":"PutAsync(String, HttpContent)","needQuote":true,"nodes":[{"content":"PutAsync(String, HttpContent)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[67057,67099],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[67179,67234],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[67638,67699],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[67820,67961],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[68493,68541],"content":"PutAsync(String, HttpContent, CancellationToken)","needQuote":true,"nodes":[{"content":"PutAsync(String, HttpContent, CancellationToken)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[69466,69508],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[69588,69643],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[69740,69851],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[70255,70316],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[70437,70578],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[71015,71041],"content":"PutAsync(Uri, HttpContent)","needQuote":true,"nodes":[{"content":"PutAsync(Uri, HttpContent)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[71836,71878],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[71958,72013],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[72417,72478],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[72599,72740],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[73260,73305],"content":"PutAsync(Uri, HttpContent, CancellationToken)","needQuote":true,"nodes":[{"content":"PutAsync(Uri, HttpContent, CancellationToken)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The Uri the request is sent to.&lt;/p&gt;\\n","pos":[74218,74260],"source":"\\n<p>The Uri the request is sent to.</p>\\n"},{"content":"\\n&lt;p&gt;The HTTP request content sent to the server.&lt;/p&gt;\\n","pos":[74340,74395],"source":"\\n<p>The HTTP request content sent to the server.</p>\\n"},{"content":"\\n&lt;p&gt;A cancellation token that can be used by other objects or threads to receive notice of cancellation.&lt;/p&gt;\\n","pos":[74492,74603],"source":"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;requestUri&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[75007,75068],"source":"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[75189,75330],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[75755,75784],"content":"SendAsync(HttpRequestMessage)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The HTTP request message to send.&lt;/p&gt;\\n","pos":[76559,76603],"source":"\\n<p>The HTTP request message to send.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;request&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[77007,77065],"source":"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[77450,77591],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[78111,78162],"content":"SendAsync(HttpRequestMessage, HttpCompletionOption)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, HttpCompletionOption)","pos":[0,51]}]},{"content":"\\n&lt;p&gt;The HTTP request message to send.&lt;/p&gt;\\n","pos":[79057,79101],"source":"\\n<p>The HTTP request message to send.</p>\\n"},{"content":"\\n&lt;p&gt;When the operation should complete (as soon as a response is available or after reading the whole response content).&lt;/p&gt;\\n","pos":[79199,79326],"source":"\\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;request&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[79730,79788],"source":"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[80173,80314],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[80961,81031],"content":"SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)","pos":[0,70]}]},{"content":"\\n&lt;p&gt;The HTTP request message to send.&lt;/p&gt;\\n","pos":[82038,82082],"source":"\\n<p>The HTTP request message to send.</p>\\n"},{"content":"\\n&lt;p&gt;When the operation should complete (as soon as a response is available or after reading the whole response content).&lt;/p&gt;\\n","pos":[82180,82307],"source":"\\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to cancel operation.&lt;/p&gt;\\n","pos":[82404,82458],"source":"\\n<p>The cancellation token to cancel operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;request&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[82862,82920],"source":"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[83305,83446],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[84001,84049],"content":"SendAsync(HttpRequestMessage, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, CancellationToken)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The HTTP request message to send.&lt;/p&gt;\\n","pos":[84956,85000],"source":"\\n<p>The HTTP request message to send.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token to cancel operation.&lt;/p&gt;\\n","pos":[85097,85151],"source":"\\n<p>The cancellation token to cancel operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;request&lt;/em&gt; was &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85685,85743],"source":"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.&lt;/p&gt;\\n","pos":[86128,86269],"source":"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n"},{"pos":[86495,86510],"content":"System.Net.Http","needQuote":true,"nodes":[{"content":"System.Net.Http","pos":[0,15]}]},{"pos":[86668,86674],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[86849,86867],"content":"HttpMessageInvoker","needQuote":true,"nodes":[{"content":"HttpMessageInvoker","pos":[0,18]}]},{"pos":[87071,87082],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[87299,87308],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[87443,87450],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[87518,87519],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87546,87547],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87637,87644],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[87712,87713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87740,87741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87942,87952],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[88047,88055],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88124,88125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88152,88153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88223,88231],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[88300,88301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88328,88329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88512,88526],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[88645,88651],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88718,88719],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88769,88775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[88835,88836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88919,88925],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[88992,88993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89043,89049],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89109,89110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89324,89346],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[89494,89500],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89567,89568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89618,89624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[89685,89686]},{"pos":[89741,89747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[89807,89808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89905,89911],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[89978,89979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90029,90035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90096,90097]},{"pos":[90152,90158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90218,90219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90464,90495],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[90661,90676],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[90752,90753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90803,90809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[90870,90871]},{"pos":[90926,90932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[90992,90993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91099,91114],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[91190,91191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91241,91247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[91308,91309]},{"pos":[91364,91370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[91430,91431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91661,91674],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[91775,91786],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[91858,91859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91886,91887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91960,91971],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[92043,92044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92071,92072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92247,92256],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[92349,92356],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92424,92425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92452,92453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92522,92529],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[92597,92598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92625,92626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92801,92818],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[92927,92942],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[93018,93019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93046,93047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93124,93139],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[93215,93216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93243,93244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[93389,93395],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[93556,93574],"content":"HttpMessageHandler","needQuote":true,"nodes":[{"content":"HttpMessageHandler","pos":[0,18]}]},{"pos":[93774,93781],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[93926,93929],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"pos":[94111,94129],"content":"HttpRequestHeaders","needQuote":true,"nodes":[{"content":"HttpRequestHeaders","pos":[0,18]}]},{"pos":[94337,94360],"content":"System.Net.Http.Headers","needQuote":true,"nodes":[{"content":"System.Net.Http.Headers","pos":[0,23]}]},{"pos":[94541,94546],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[94690,94698],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[94849,94855],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[95091,95116],"content":"Task<HttpResponseMessage>","needQuote":true,"nodes":[{"content":"Task&lt;HttpResponseMessage&gt;","pos":[0,25],"source":"Task<HttpResponseMessage>"}]},{"pos":[95381,95385],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[95459,95460],"content":"<","needQuote":true,"nodes":[]},{"pos":[95532,95551],"content":"HttpResponseMessage","needQuote":true,"nodes":[{"content":"HttpResponseMessage","pos":[0,19]}]},{"pos":[95694,95698],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[95773,95776]},{"pos":[95855,95874],"content":"HttpResponseMessage","needQuote":true,"nodes":[{"content":"HttpResponseMessage","pos":[0,19]}]},{"pos":[95935,95936],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96188,96201],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[96398,96402],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[96455,96456],"content":"<","needQuote":true,"nodes":[]},{"pos":[96483,96490],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[96605,96609],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[96663,96666]},{"pos":[96700,96707],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[96740,96741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96927,96949],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[97159,97176],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[97360,97376],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[97609,97625],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[97790,97797],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[97865,97866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97917,97924],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[97985,97986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98092,98099],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[98167,98168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98219,98226],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[98287,98288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98529,98549],"content":"HttpCompletionOption","needQuote":true,"nodes":[{"content":"HttpCompletionOption","pos":[0,20]}]},{"pos":[98823,98835],"content":"Task<Byte[]>","needQuote":true,"nodes":[{"content":"Task&lt;Byte[]&gt;","pos":[0,12],"source":"Task<Byte[]>"}]},{"pos":[99043,99047],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[99121,99122],"content":"<","needQuote":true,"nodes":[]},{"pos":[99170,99174],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[99233,99235]},{"pos":[99348,99352],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[99427,99430]},{"pos":[99485,99489],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[99547,99549],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[99577,99578],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99855,99867],"content":"Task<Stream>","needQuote":true,"nodes":[{"content":"Task&lt;Stream&gt;","pos":[0,12],"source":"Task<Stream>"}]},{"pos":[100081,100085],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[100159,100160],"content":"<","needQuote":true,"nodes":[]},{"pos":[100213,100219],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[100364,100368],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[100443,100446]},{"pos":[100506,100512],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[100575,100576],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100853,100865],"content":"Task<String>","needQuote":true,"nodes":[{"content":"Task&lt;String&gt;","pos":[0,12],"source":"Task<String>"}]},{"pos":[101073,101077],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[101151,101152],"content":"<","needQuote":true,"nodes":[]},{"pos":[101202,101208],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[101350,101354],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[101429,101432]},{"pos":[101489,101495],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[101555,101556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101784,101795],"content":"HttpContent","needQuote":true,"nodes":[{"content":"HttpContent","pos":[0,11]}]},{"pos":[102003,102021],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"pos":[102349,102397],"content":"SendAsync(HttpRequestMessage, CancellationToken)","needQuote":true,"nodes":[{"content":"SendAsync(HttpRequestMessage, CancellationToken)","pos":[0,48]}]},{"pos":[102677,102686],"content":"SendAsync","needQuote":true,"nodes":[{"content":"SendAsync","pos":[0,9]}]},{"pos":[102756,102757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102828,102846],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[102907,102908]},{"pos":[102984,103001],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[103082,103083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103246,103255],"content":"SendAsync","needQuote":true,"nodes":[{"content":"SendAsync","pos":[0,9]}]},{"pos":[103325,103326],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103397,103415],"content":"HttpRequestMessage","needQuote":true,"nodes":[{"content":"HttpRequestMessage","pos":[0,18]}]},{"content":",","pos":[103476,103477]},{"pos":[103553,103570],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[103651,103652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103954,103981],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[104208,104233],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[104435,104458],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[104652,104673],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[104869,104889],"content":"HttpRequestException","needQuote":true,"nodes":[{"content":"HttpRequestException","pos":[0,20]}]}],"content":"items:\n- uid: System.Net.Http.HttpClient\n  commentId: T:System.Net.Http.HttpClient\n  id: HttpClient\n  parent: System.Net.Http\n  children:\n  - System.Net.Http.HttpClient.#ctor\n  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  - System.Net.Http.HttpClient.BaseAddress\n  - System.Net.Http.HttpClient.CancelPendingRequests\n  - System.Net.Http.HttpClient.DefaultRequestHeaders\n  - System.Net.Http.HttpClient.DeleteAsync(System.String)\n  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.Dispose(System.Boolean)\n  - System.Net.Http.HttpClient.GetAsync(System.String)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  - System.Net.Http.HttpClient.GetStringAsync(System.String)\n  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  - System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  - System.Net.Http.HttpClient.Timeout\n  langs:\n  - csharp\n  - vb\n  name: HttpClient\n  fullName: System.Net.Http.HttpClient\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HttpClient\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 35\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Provides a base class for sending HTTP requests and receiving HTTP responses from a resource identified by a URI. </p>\\n\"\n  syntax:\n    content: 'public class HttpClient : HttpMessageInvoker, IDisposable'\n    content.vb: >-\n      Public Class HttpClient\n          Inherits HttpMessageInvoker\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Net.Http.HttpMessageInvoker\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Net.Http.HttpMessageInvoker.Dispose\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: HttpClient\n- uid: System.Net.Http.HttpClient.#ctor\n  commentId: M:System.Net.Http.HttpClient.#ctor\n  id: '#ctor'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: HttpClient()\n  fullName: System.Net.Http.HttpClient.HttpClient()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 37\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public HttpClient()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.HttpClient()\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)\n  id: '#ctor(System.Net.Http.HttpMessageHandler)'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: HttpClient(HttpMessageHandler)\n  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 38\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a specific handler.</p>\\n\"\n  syntax:\n    content: public HttpClient(HttpMessageHandler handler)\n    content.vb: Public Sub New(handler As HttpMessageHandler)\n    parameters:\n    - id: handler\n      type: System.Net.Http.HttpMessageHandler\n      description: \"\\n<p>The HTTP handler stack to use for sending requests. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler)\n- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  commentId: M:System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)\n  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: HttpClient(HttpMessageHandler, Boolean)\n  fullName: System.Net.Http.HttpClient.HttpClient(System.Net.Http.HttpMessageHandler, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 39\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with a specific handler.</p>\\n\"\n  syntax:\n    content: public HttpClient(HttpMessageHandler handler, bool disposeHandler)\n    content.vb: Public Sub New(handler As HttpMessageHandler, disposeHandler As Boolean)\n    parameters:\n    - id: handler\n      type: System.Net.Http.HttpMessageHandler\n      description: \"\\n<p>The <xref href=\\\"System.Net.Http.HttpMessageHandler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> responsible for processing the HTTP response messages.</p>\\n\"\n    - id: disposeHandler\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the inner handler should be disposed of by Dispose(),<strong>false</strong> if you intend to reuse the inner handler.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.HttpClient(HttpMessageHandler, Boolean)\n- uid: System.Net.Http.HttpClient.BaseAddress\n  commentId: P:System.Net.Http.HttpClient.BaseAddress\n  id: BaseAddress\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: BaseAddress\n  fullName: System.Net.Http.HttpClient.BaseAddress\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseAddress\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 40\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</p>\\n\"\n  syntax:\n    content: public Uri BaseAddress { get; set; }\n    content.vb: Public Property BaseAddress As Uri\n    parameters: []\n    return:\n      type: System.Uri\n      description: \"\\n<p>Returns <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The base address of Uniform Resource Identifier (URI) of the Internet resource used when sending requests.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.BaseAddress\n- uid: System.Net.Http.HttpClient.DefaultRequestHeaders\n  commentId: P:System.Net.Http.HttpClient.DefaultRequestHeaders\n  id: DefaultRequestHeaders\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: DefaultRequestHeaders\n  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DefaultRequestHeaders\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 41\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets the headers which should be sent with each request.</p>\\n\"\n  syntax:\n    content: public HttpRequestHeaders DefaultRequestHeaders { get; }\n    content.vb: Public ReadOnly Property DefaultRequestHeaders As HttpRequestHeaders\n    parameters: []\n    return:\n      type: System.Net.Http.Headers.HttpRequestHeaders\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Http.Headers.HttpRequestHeaders\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The headers which should be sent with each request.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HttpClient.DefaultRequestHeaders\n- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  commentId: P:System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  id: MaxResponseContentBufferSize\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: MaxResponseContentBufferSize\n  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxResponseContentBufferSize\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 42\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the maximum number of bytes to buffer when reading the response content.</p>\\n\"\n  syntax:\n    content: public long MaxResponseContentBufferSize { get; set; }\n    content.vb: Public Property MaxResponseContentBufferSize As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>Returns <xref href=\\\"System.Int32\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The maximum number of bytes to buffer when reading the response content. The default value for this property is 2 gigabytes.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The size specified is less than or equal to zero.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An operation has already been started on the current instance. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.MaxResponseContentBufferSize\n- uid: System.Net.Http.HttpClient.Timeout\n  commentId: P:System.Net.Http.HttpClient.Timeout\n  id: Timeout\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: Timeout\n  fullName: System.Net.Http.HttpClient.Timeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Timeout\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 43\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Gets or sets the timespan to wait before the request times out.</p>\\n\"\n  syntax:\n    content: public TimeSpan Timeout { get; set; }\n    content.vb: Public Property Timeout As TimeSpan\n    parameters: []\n    return:\n      type: System.TimeSpan\n      description: \"\\n<p>Returns <xref href=\\\"System.TimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The timespan to wait before the request times out.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The timeout specified is less than or equal to zero and is not <xref href=\\\"System.Threading.Timeout.InfiniteTimeSpan\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>An operation has already been started on the current instance. </p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The current instance has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.Timeout\n- uid: System.Net.Http.HttpClient.CancelPendingRequests\n  commentId: M:System.Net.Http.HttpClient.CancelPendingRequests\n  id: CancelPendingRequests\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: CancelPendingRequests()\n  fullName: System.Net.Http.HttpClient.CancelPendingRequests()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CancelPendingRequests\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 44\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Cancel all pending requests on this instance.</p>\\n\"\n  syntax:\n    content: public void CancelPendingRequests()\n    content.vb: Public Sub CancelPendingRequests\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.CancelPendingRequests()\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String)\n  id: DeleteAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: DeleteAsync(String)\n  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeleteAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 45\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a DELETE request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri)\n    content.vb: Public Function DeleteAsync(requestUri As String) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.DeleteAsync(String)\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)\n  id: DeleteAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: DeleteAsync(String, CancellationToken)\n  fullName: System.Net.Http.HttpClient.DeleteAsync(System.String, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeleteAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 46\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> DeleteAsync(string requestUri, CancellationToken cancellationToken)\n    content.vb: Public Function DeleteAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.DeleteAsync(String, CancellationToken)\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  id: DeleteAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: DeleteAsync(Uri)\n  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeleteAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 47\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a DELETE request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri)\n    content.vb: Public Function DeleteAsync(requestUri As Uri) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.DeleteAsync(Uri)\n- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: DeleteAsync(Uri, CancellationToken)\n  fullName: System.Net.Http.HttpClient.DeleteAsync(System.Uri, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DeleteAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 48\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a DELETE request to the specified Uri with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> DeleteAsync(Uri requestUri, CancellationToken cancellationToken)\n    content.vb: Public Function DeleteAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.DeleteAsync(Uri, CancellationToken)\n- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)\n  commentId: M:System.Net.Http.HttpClient.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.Http.HttpClient.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 49\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and optionally disposes of the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n\"\n  overridden: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: HttpClient.Dispose(Boolean)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String)\n  id: GetAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(String)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 50\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(string requestUri)\n    content.vb: Public Function GetAsync(requestUri As String) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(String)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(String, HttpCompletionOption)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 51\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption)\n    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>An HTTP completion option value that indicates when the operation should be considered completed.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(String, HttpCompletionOption, CancellationToken)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 52\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(string requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n    content.vb: Public Function GetAsync(requestUri As String, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(String, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)\n  id: GetAsync(System.String,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(String, CancellationToken)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.String, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 53\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(string requestUri, CancellationToken cancellationToken)\n    content.vb: Public Function GetAsync(requestUri As String, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(String, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri)\n  id: GetAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(Uri)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 54\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri)\n    content.vb: Public Function GetAsync(requestUri As Uri) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(Uri)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(Uri, HttpCompletionOption)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 55\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with an HTTP completion option as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption)\n    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(Uri, HttpCompletionOption, CancellationToken)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 56\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with an HTTP completion option and a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n    content.vb: Public Function GetAsync(requestUri As Uri, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>An HTTP  completion option value that indicates when the operation should be considered completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(Uri, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)\n  id: GetAsync(System.Uri,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetAsync(Uri, CancellationToken)\n  fullName: System.Net.Http.HttpClient.GetAsync(System.Uri, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 57\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> GetAsync(Uri requestUri, CancellationToken cancellationToken)\n    content.vb: Public Function GetAsync(requestUri As Uri, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetAsync(Uri, CancellationToken)\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  id: GetByteArrayAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetByteArrayAsync(String)\n  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByteArrayAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 58\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<byte[]> GetByteArrayAsync(string requestUri)\n    content.vb: Public Function GetByteArrayAsync(requestUri As String) As Task(Of Byte())\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetByteArrayAsync(String)\n- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  id: GetByteArrayAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetByteArrayAsync(Uri)\n  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByteArrayAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 59\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a byte array in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<byte[]> GetByteArrayAsync(Uri requestUri)\n    content.vb: Public Function GetByteArrayAsync(requestUri As Uri) As Task(Of Byte())\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Byte[]}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetByteArrayAsync(Uri)\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  id: GetStreamAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetStreamAsync(String)\n  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStreamAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 60\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<Stream> GetStreamAsync(string requestUri)\n    content.vb: Public Function GetStreamAsync(requestUri As String) As Task(Of Stream)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetStreamAsync(String)\n- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  id: GetStreamAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetStreamAsync(Uri)\n  fullName: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStreamAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 61\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<Stream> GetStreamAsync(Uri requestUri)\n    content.vb: Public Function GetStreamAsync(requestUri As Uri) As Task(Of Stream)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.IO.Stream}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetStreamAsync(Uri)\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)\n  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.String)\n  id: GetStringAsync(System.String)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetStringAsync(String)\n  fullName: System.Net.Http.HttpClient.GetStringAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStringAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 62\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<string> GetStringAsync(string requestUri)\n    content.vb: Public Function GetStringAsync(requestUri As String) As Task(Of String)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetStringAsync(String)\n- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  commentId: M:System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  id: GetStringAsync(System.Uri)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: GetStringAsync(Uri)\n  fullName: System.Net.Http.HttpClient.GetStringAsync(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetStringAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 63\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a GET request to the specified Uri and return the response body as a string in an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<string> GetStringAsync(Uri requestUri)\n    content.vb: Public Function GetStringAsync(requestUri As Uri) As Task(Of String)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.String}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.GetStringAsync(Uri)\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)\n  id: PostAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PostAsync(String, HttpContent)\n  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 64\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a POST request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content)\n    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PostAsync(String, HttpContent)\n- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PostAsync(String, HttpContent, CancellationToken)\n  fullName: System.Net.Http.HttpClient.PostAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 65\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a POST request with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PostAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)\n    content.vb: Public Function PostAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PostAsync(String, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)\n  id: PostAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PostAsync(Uri, HttpContent)\n  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 66\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a POST request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content)\n    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent)\n- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PostAsync(Uri, HttpContent, CancellationToken)\n  fullName: System.Net.Http.HttpClient.PostAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PostAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 67\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a POST request with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PostAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)\n    content.vb: Public Function PostAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PostAsync(Uri, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)\n  id: PutAsync(System.String,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PutAsync(String, HttpContent)\n  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PutAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 68\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a PUT request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content)\n    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PutAsync(String, HttpContent)\n- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PutAsync(String, HttpContent, CancellationToken)\n  fullName: System.Net.Http.HttpClient.PutAsync(System.String, System.Net.Http.HttpContent, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PutAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 69\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a PUT request with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PutAsync(string requestUri, HttpContent content, CancellationToken cancellationToken)\n    content.vb: Public Function PutAsync(requestUri As String, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.String\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PutAsync(String, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)\n  id: PutAsync(System.Uri,System.Net.Http.HttpContent)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PutAsync(Uri, HttpContent)\n  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PutAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 70\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a PUT request to the specified Uri as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content)\n    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent)\n- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: PutAsync(Uri, HttpContent, CancellationToken)\n  fullName: System.Net.Http.HttpClient.PutAsync(System.Uri, System.Net.Http.HttpContent, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PutAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 71\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send a PUT request with a cancellation token as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> PutAsync(Uri requestUri, HttpContent content, CancellationToken cancellationToken)\n    content.vb: Public Function PutAsync(requestUri As Uri, content As HttpContent, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: requestUri\n      type: System.Uri\n      description: \"\\n<p>The Uri the request is sent to.</p>\\n\"\n    - id: content\n      type: System.Net.Http.HttpContent\n      description: \"\\n<p>The HTTP request content sent to the server.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>A cancellation token that can be used by other objects or threads to receive notice of cancellation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>requestUri</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.PutAsync(Uri, HttpContent, CancellationToken)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  id: SendAsync(System.Net.Http.HttpRequestMessage)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(HttpRequestMessage)\n  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 72\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send an HTTP request as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request)\n    content.vb: Public Function SendAsync(request As HttpRequestMessage) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: \"\\n<p>The HTTP request message to send.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption)\n  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 73\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send an HTTP request as an asynchronous operation. </p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption)\n    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: \"\\n<p>The HTTP request message to send.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Net.Http.HttpCompletionOption, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 74\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send an HTTP request as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, HttpCompletionOption completionOption, CancellationToken cancellationToken)\n    content.vb: Public Function SendAsync(request As HttpRequestMessage, completionOption As HttpCompletionOption, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: \"\\n<p>The HTTP request message to send.</p>\\n\"\n    - id: completionOption\n      type: System.Net.Http.HttpCompletionOption\n      description: \"\\n<p>When the operation should complete (as soon as a response is available or after reading the whole response content).</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to cancel operation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, HttpCompletionOption, CancellationToken)\n- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  commentId: M:System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpClient\n  langs:\n  - csharp\n  - vb\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Http/ref/System.Net.Http.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendAsync\n    path: src/System.Net.Http/ref/System.Net.Http.cs\n    startLine: 75\n  assemblies:\n  - System.Net.Http\n  namespace: System.Net.Http\n  summary: \"\\n<p>Send an HTTP request as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    content.vb: Public Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)\n    parameters:\n    - id: request\n      type: System.Net.Http.HttpRequestMessage\n      description: \"\\n<p>The HTTP request message to send.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token to cancel operation.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  overridden: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>request</em> was <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The request message was already sent by the <xref href=\\\"System.Net.Http.HttpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  - type: System.Net.Http.HttpRequestException\n    commentId: T:System.Net.Http.HttpRequestException\n    description: \"\\n<p>The request failed due to an underlying issue such as network connectivity, DNS failure, server certificate validation or timeout.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HttpClient.SendAsync(HttpRequestMessage, CancellationToken)\nreferences:\n- uid: System.Net.Http\n  isExternal: false\n  name: System.Net.Http\n  fullName: System.Net.Http\n  commentId: N:System.Net.Http\n  nameWithType: System.Net.Http\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.Http.HttpMessageInvoker\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpMessageInvoker\n  fullName: System.Net.Http.HttpMessageInvoker\n  commentId: T:System.Net.Http.HttpMessageInvoker\n  nameWithType: HttpMessageInvoker\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Net.Http.HttpMessageInvoker.Dispose\n  parent: System.Net.Http.HttpMessageInvoker\n  isExternal: false\n  name: Dispose()\n  fullName: System.Net.Http.HttpMessageInvoker.Dispose()\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageInvoker.Dispose\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageInvoker.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageInvoker.Dispose\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageInvoker.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageInvoker.Dispose\n  nameWithType: HttpMessageInvoker.Dispose()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.Http.HttpMessageHandler\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpMessageHandler\n  fullName: System.Net.Http.HttpMessageHandler\n  commentId: T:System.Net.Http.HttpMessageHandler\n  nameWithType: HttpMessageHandler\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  fullName: System.Uri\n  commentId: T:System.Uri\n  nameWithType: Uri\n- uid: System.Net.Http.Headers.HttpRequestHeaders\n  parent: System.Net.Http.Headers\n  isExternal: false\n  name: HttpRequestHeaders\n  fullName: System.Net.Http.Headers.HttpRequestHeaders\n  commentId: T:System.Net.Http.Headers.HttpRequestHeaders\n  nameWithType: HttpRequestHeaders\n- uid: System.Net.Http.Headers\n  isExternal: false\n  name: System.Net.Http.Headers\n  fullName: System.Net.Http.Headers\n  commentId: N:System.Net.Http.Headers\n  nameWithType: System.Net.Http.Headers\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  commentId: T:System.TimeSpan\n  nameWithType: TimeSpan\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<HttpResponseMessage>\n  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)\n  name.vb: Task(Of HttpResponseMessage)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Http.HttpResponseMessage\n    name: HttpResponseMessage\n    fullName: System.Net.Http.HttpResponseMessage\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}\n  nameWithType: Task<HttpResponseMessage>\n  nameWithType.vb: Task(Of HttpResponseMessage)\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  commentId: T:System.Threading.CancellationToken\n  nameWithType: CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  commentId: N:System.Threading\n  nameWithType: System.Threading\n- uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n  parent: System.Net.Http.HttpMessageInvoker\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageInvoker.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Net.Http.HttpMessageInvoker.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageInvoker.Dispose(System.Boolean)\n  nameWithType: HttpMessageInvoker.Dispose(Boolean)\n- uid: System.Net.Http.HttpCompletionOption\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpCompletionOption\n  fullName: System.Net.Http.HttpCompletionOption\n  commentId: T:System.Net.Http.HttpCompletionOption\n  nameWithType: HttpCompletionOption\n- uid: System.Threading.Tasks.Task{System.Byte[]}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Byte[]>\n  fullName: System.Threading.Tasks.Task<System.Byte[]>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Byte())\n  name.vb: Task(Of Byte())\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Byte[]}\n  nameWithType: Task<Byte[]>\n  nameWithType.vb: Task(Of Byte())\n- uid: System.Threading.Tasks.Task{System.IO.Stream}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Stream>\n  fullName: System.Threading.Tasks.Task<System.IO.Stream>\n  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)\n  name.vb: Task(Of Stream)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IO.Stream\n    name: Stream\n    fullName: System.IO.Stream\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}\n  nameWithType: Task<Stream>\n  nameWithType.vb: Task(Of Stream)\n- uid: System.Threading.Tasks.Task{System.String}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<String>\n  fullName: System.Threading.Tasks.Task<System.String>\n  fullname.vb: System.Threading.Tasks.Task(Of System.String)\n  name.vb: Task(Of String)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.String}\n  nameWithType: Task<String>\n  nameWithType.vb: Task(Of String)\n- uid: System.Net.Http.HttpContent\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpContent\n  fullName: System.Net.Http.HttpContent\n  commentId: T:System.Net.Http.HttpContent\n  nameWithType: HttpContent\n- uid: System.Net.Http.HttpRequestMessage\n  parent: System.Net.Http\n  isExternal: false\n  name: HttpRequestMessage\n  fullName: System.Net.Http.HttpRequestMessage\n  commentId: T:System.Net.Http.HttpRequestMessage\n  nameWithType: HttpRequestMessage\n- uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  parent: System.Net.Http.HttpMessageInvoker\n  isExternal: true\n  name: SendAsync(HttpRequestMessage, CancellationToken)\n  fullName: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)\n  spec.csharp:\n  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n    name: SendAsync\n    fullName: System.Net.Http.HttpMessageInvoker.SendAsync\n  - name: (\n    fullName: (\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n    name: SendAsync\n    fullName: System.Net.Http.HttpMessageInvoker.SendAsync\n  - name: (\n    fullName: (\n  - uid: System.Net.Http.HttpRequestMessage\n    name: HttpRequestMessage\n    fullName: System.Net.Http.HttpRequestMessage\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Net.Http.HttpMessageInvoker.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)\n  nameWithType: HttpMessageInvoker.SendAsync(HttpRequestMessage, CancellationToken)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Net.Http.HttpRequestException\n  isExternal: false\n  name: HttpRequestException\n  fullName: System.Net.Http.HttpRequestException\n  commentId: T:System.Net.Http.HttpRequestException\n  nameWithType: HttpRequestException\n"}