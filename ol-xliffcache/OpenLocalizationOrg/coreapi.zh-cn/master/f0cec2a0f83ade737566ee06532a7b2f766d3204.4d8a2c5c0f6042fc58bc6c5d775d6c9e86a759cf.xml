{"nodes":[{"pos":[1041,1059],"content":"Rfc2898DeriveBytes","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes","pos":[0,18]}]},{"pos":[2957,2998],"content":"Rfc2898DeriveBytes(Byte[], Byte[], Int32)","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes(Byte[], Byte[], Int32)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The password used to derive the key.","pos":[4079,4120],"source":"\\n<p>The password used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[4121,4127],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key salt used to derive the key.&lt;/p&gt;\\n","pos":[4190,4237],"source":"\\n<p>The key salt used to derive the key.</p>\\n"},{"content":"\\n&lt;p&gt;The number of iterations for the operation.","pos":[4305,4353],"source":"\\n<p>The number of iterations for the operation."},{"content":"&lt;/p&gt;\\n","pos":[4354,4360],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes or the iteration count is less than 1.","pos":[4471,4562],"source":"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[4563,4569],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password or salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[4674,4725],"source":"\\n<p>The password or salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[4726,4732],"source":" </p>\\n"},{"pos":[5452,5486],"content":"Rfc2898DeriveBytes(String, Byte[])","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes(String, Byte[])","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The password used to derive the key.","pos":[6489,6530],"source":"\\n<p>The password used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[6531,6537],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key salt used to derive the key.","pos":[6600,6641],"source":"\\n<p>The key salt used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[6642,6648],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes or the iteration count is less than 1.","pos":[6759,6850],"source":"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[6851,6857],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password or salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[6962,7013],"source":"\\n<p>The password or salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[7014,7020],"source":" </p>\\n"},{"pos":[7744,7785],"content":"Rfc2898DeriveBytes(String, Byte[], Int32)","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes(String, Byte[], Int32)","pos":[0,41]}]},{"content":"\\n&lt;p&gt;The password used to derive the key.","pos":[8866,8907],"source":"\\n<p>The password used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[8908,8914],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The key salt used to derive the key.","pos":[8977,9018],"source":"\\n<p>The key salt used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[9019,9025],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of iterations for the operation.","pos":[9093,9141],"source":"\\n<p>The number of iterations for the operation."},{"content":"&lt;/p&gt;\\n","pos":[9142,9148],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes or the iteration count is less than 1.","pos":[9259,9350],"source":"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[9351,9357],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password or salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[9462,9513],"source":"\\n<p>The password or salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[9514,9520],"source":" </p>\\n"},{"pos":[10237,10270],"content":"Rfc2898DeriveBytes(String, Int32)","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes(String, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The password used to derive the key.","pos":[11285,11326],"source":"\\n<p>The password used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[11327,11333],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The size of the random salt that you want the class to generate.","pos":[11399,11468],"source":"\\n<p>The size of the random salt that you want the class to generate."},{"content":"&lt;/p&gt;\\n","pos":[11469,11475],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes.","pos":[11586,11639],"source":"\\n<p>The specified salt size is smaller than 8 bytes."},{"content":"&lt;/p&gt;\\n","pos":[11640,11646],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password or salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[11751,11802],"source":"\\n<p>The password or salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11803,11809],"source":" </p>\\n"},{"pos":[12298,12338],"content":"Rfc2898DeriveBytes(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Rfc2898DeriveBytes(String, Int32, Int32)","pos":[0,40]}]},{"content":"\\n&lt;p&gt;The password used to derive the key.","pos":[13429,13470],"source":"\\n<p>The password used to derive the key."},{"content":"&lt;/p&gt;\\n","pos":[13471,13477],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The size of the random salt that you want the class to generate.","pos":[13543,13612],"source":"\\n<p>The size of the random salt that you want the class to generate."},{"content":"&lt;/p&gt;\\n","pos":[13613,13619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of iterations for the operation.","pos":[13687,13735],"source":"\\n<p>The number of iterations for the operation."},{"content":"&lt;/p&gt;\\n","pos":[13736,13742],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes or the iteration count is less than 1.","pos":[13853,13944],"source":"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[13945,13951],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The password or salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14056,14107],"source":"\\n<p>The password or salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14108,14114],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;iterations &lt;/em&gt;is out of range.","pos":[14231,14274],"source":"\\n<p>\\n<em>iterations </em>is out of range."},{"content":"This parameter requires a non-negative number.&lt;/p&gt;\\n","pos":[14275,14327],"source":" This parameter requires a non-negative number.</p>\\n"},{"pos":[14725,14739],"content":"IterationCount","needQuote":true,"nodes":[{"content":"IterationCount","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of iterations for the operation.&lt;/p&gt;\\n","pos":[15548,15602],"source":"\\n<p>The number of iterations for the operation.</p>\\n"},{"content":"\\n&lt;p&gt;The number of iterations is less than 1.","pos":[15733,15778],"source":"\\n<p>The number of iterations is less than 1."},{"content":"&lt;/p&gt;\\n","pos":[15779,15785],"source":" </p>\\n"},{"pos":[16143,16147],"content":"Salt","needQuote":true,"nodes":[{"content":"Salt","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The key salt value for the operation.&lt;/p&gt;\\n","pos":[16913,16961],"source":"\\n<p>The key salt value for the operation.</p>\\n"},{"content":"\\n&lt;p&gt;The specified salt size is smaller than 8 bytes.","pos":[17072,17125],"source":"\\n<p>The specified salt size is smaller than 8 bytes."},{"content":"&lt;/p&gt;\\n","pos":[17126,17132],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The salt is &lt;strong&gt;null&lt;/strong&gt;.","pos":[17237,17276],"source":"\\n<p>The salt is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17277,17283],"source":" </p>\\n"},{"pos":[17688,17704],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.","pos":[18689,18826],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources."},{"content":"&lt;/p&gt;\\n","pos":[18827,18833],"source":" </p>\\n"},{"pos":[19343,19358],"content":"GetBytes(Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The number of pseudo-random key bytes to generate.","pos":[20173,20228],"source":"\\n<p>The number of pseudo-random key bytes to generate."},{"content":"&lt;/p&gt;\\n","pos":[20229,20235],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A byte array filled with pseudo-random key bytes.&lt;/p&gt;\\n","pos":[20295,20355],"source":"\\n<p>A byte array filled with pseudo-random key bytes.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cb &lt;/em&gt;is out of range.","pos":[20564,20599],"source":"\\n<p>\\n<em>cb </em>is out of range."},{"content":"This parameter requires a non-negative number.&lt;/p&gt;\\n","pos":[20600,20652],"source":" This parameter requires a non-negative number.</p>\\n"},{"pos":[21025,21032],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[21964,21992],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[22189,22195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22389,22400],"content":"DeriveBytes","needQuote":true,"nodes":[{"content":"DeriveBytes","pos":[0,11]}]},{"pos":[22609,22620],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[22849,22858],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[23005,23012],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[23086,23087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23114,23115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23211,23218],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[23292,23293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23320,23321],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23521,23531],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23626,23634],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23703,23704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23731,23732],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23802,23810],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[23879,23880],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23907,23908],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24091,24105],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[24224,24230],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24297,24298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24348,24354],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24414,24415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24498,24504],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24571,24572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24622,24628],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24688,24689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24903,24925],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25073,25079],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25146,25147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25197,25203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25264,25265]},{"pos":[25320,25326],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25386,25387],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25484,25490],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25557,25558],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25608,25614],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25675,25676]},{"pos":[25731,25737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25797,25798],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26043,26074],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26240,26255],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26331,26332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26382,26388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26449,26450]},{"pos":[26505,26511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26571,26572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26678,26693],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26769,26770],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26820,26826],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26887,26888]},{"pos":[26943,26949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27009,27010],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27240,27253],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27354,27365],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27437,27438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27465,27466],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27539,27550],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27622,27623],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27650,27651],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27826,27835],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27928,27935],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28003,28004],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28031,28032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28101,28108],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[28176,28177],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28204,28205],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28380,28397],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[28506,28521],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28597,28598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28625,28626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28703,28718],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[28794,28795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28822,28823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28968,28974],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[29068,29074],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[29194,29198],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[29257,29259]},{"pos":[29322,29326],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29384,29386],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29518,29523],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[29665,29671],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29900,29916],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[30093,30100],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30174,30175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30226,30233],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30294,30295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30407,30414],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[30488,30489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30540,30547],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30608,30609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30818,30825],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31056,31071],"content":"GetBytes(Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32)","pos":[0,15]}]},{"pos":[31246,31254],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[31329,31330],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31379,31384],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31443,31444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31555,31563],"content":"GetBytes","needQuote":true,"nodes":[{"content":"GetBytes","pos":[0,8]}]},{"pos":[31638,31639],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31688,31693],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31752,31753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32026,32033],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[32176,32181],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[32253,32254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32281,32282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32376,32381],"content":"Reset","needQuote":true,"nodes":[{"content":"Reset","pos":[0,5]}]},{"pos":[32453,32454],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32481,32482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32674,32691],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[32867,32888],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[33082,33109],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes\n  commentId: T:System.Security.Cryptography.Rfc2898DeriveBytes\n  id: Rfc2898DeriveBytes\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])\n  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)\n  - System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount\n  - System.Security.Cryptography.Rfc2898DeriveBytes.Reset\n  - System.Security.Cryptography.Rfc2898DeriveBytes.Salt\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Rfc2898DeriveBytes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 191\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <xref href=\\\"System.Security.Cryptography.HMACSHA1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: 'public class Rfc2898DeriveBytes : DeriveBytes, IDisposable'\n    content.vb: >-\n      Public Class Rfc2898DeriveBytes\n          Inherits DeriveBytes\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.DeriveBytes\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Security.Cryptography.DeriveBytes.Dispose\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Rfc2898DeriveBytes\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)\n  id: '#ctor(System.Byte[],System.Byte[],System.Int32)'\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes(Byte[], Byte[], Int32)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.Byte[], System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 193\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a password, a salt, and number of iterations to derive the key.</p>\\n\"\n  syntax:\n    content: public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations)\n    content.vb: Public Sub New(password As Byte(), salt As Byte(), iterations As Integer)\n    parameters:\n    - id: password\n      type: System.Byte[]\n      description: \"\\n<p>The password used to derive the key. </p>\\n\"\n    - id: salt\n      type: System.Byte[]\n      description: \"\\n<p>The key salt used to derive the key.</p>\\n\"\n    - id: iterations\n      type: System.Int32\n      description: \"\\n<p>The number of iterations for the operation. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password or salt is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.Byte(), System.Byte(), System.Int32)\n  name.vb: Rfc2898DeriveBytes(Byte(), Byte(), Int32)\n  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte[], Byte[], Int32)\n  nameWithType.vb: Rfc2898DeriveBytes.Rfc2898DeriveBytes(Byte(), Byte(), Int32)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])\n  id: '#ctor(System.String,System.Byte[])'\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes(String, Byte[])\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 194\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a password and salt to derive the key.</p>\\n\"\n  syntax:\n    content: public Rfc2898DeriveBytes(string password, byte[] salt)\n    content.vb: Public Sub New(password As String, salt As Byte())\n    parameters:\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password used to derive the key. </p>\\n\"\n    - id: salt\n      type: System.Byte[]\n      description: \"\\n<p>The key salt used to derive the key. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password or salt is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte())\n  name.vb: Rfc2898DeriveBytes(String, Byte())\n  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Byte[])\n  nameWithType.vb: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Byte())\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)\n  id: '#ctor(System.String,System.Byte[],System.Int32)'\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes(String, Byte[], Int32)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte[], System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 195\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a password, a salt, and number of iterations to derive the key.</p>\\n\"\n  syntax:\n    content: public Rfc2898DeriveBytes(string password, byte[] salt, int iterations)\n    content.vb: Public Sub New(password As String, salt As Byte(), iterations As Integer)\n    parameters:\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password used to derive the key. </p>\\n\"\n    - id: salt\n      type: System.Byte[]\n      description: \"\\n<p>The key salt used to derive the key. </p>\\n\"\n    - id: iterations\n      type: System.Int32\n      description: \"\\n<p>The number of iterations for the operation. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password or salt is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte(), System.Int32)\n  name.vb: Rfc2898DeriveBytes(String, Byte(), Int32)\n  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Byte[], Int32)\n  nameWithType.vb: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Byte(), Int32)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes(String, Int32)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 196\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the password and salt size to derive the key.</p>\\n\"\n  syntax:\n    content: public Rfc2898DeriveBytes(string password, int saltSize)\n    content.vb: Public Sub New(password As String, saltSize As Integer)\n    parameters:\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password used to derive the key. </p>\\n\"\n    - id: saltSize\n      type: System.Int32\n      description: \"\\n<p>The size of the random salt that you want the class to generate. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password or salt is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Int32)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32)'\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Rfc2898DeriveBytes(String, Int32, Int32)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 197\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a password, a salt size, and number of iterations to derive the key.</p>\\n\"\n  syntax:\n    content: public Rfc2898DeriveBytes(string password, int saltSize, int iterations)\n    content.vb: Public Sub New(password As String, saltSize As Integer, iterations As Integer)\n    parameters:\n    - id: password\n      type: System.String\n      description: \"\\n<p>The password used to derive the key. </p>\\n\"\n    - id: saltSize\n      type: System.Int32\n      description: \"\\n<p>The size of the random salt that you want the class to generate. </p>\\n\"\n    - id: iterations\n      type: System.Int32\n      description: \"\\n<p>The number of iterations for the operation. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes or the iteration count is less than 1. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password or salt is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>iterations </em>is out of range. This parameter requires a non-negative number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Rfc2898DeriveBytes.Rfc2898DeriveBytes(String, Int32, Int32)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount\n  commentId: P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount\n  id: IterationCount\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: IterationCount\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IterationCount\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 198\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the number of iterations for the operation.</p>\\n\"\n  syntax:\n    content: public int IterationCount { get; set; }\n    content.vb: Public Property IterationCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of iterations for the operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The number of iterations is less than 1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Rfc2898DeriveBytes.IterationCount\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt\n  commentId: P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt\n  id: Salt\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Salt\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Salt\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 199\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets or sets the key salt value for the operation.</p>\\n\"\n  syntax:\n    content: public byte[] Salt { get; set; }\n    content.vb: Public Property Salt As Byte()\n    parameters: []\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>The key salt value for the operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The specified salt size is smaller than 8 bytes. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The salt is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Rfc2898DeriveBytes.Salt\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 200\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Security.Cryptography.Rfc2898DeriveBytes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\\n\"\n  overridden: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  nameWithType: Rfc2898DeriveBytes.Dispose(Boolean)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)\n  id: GetBytes(System.Int32)\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32)\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBytes\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 201\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns the pseudo-random key for this object.</p>\\n\"\n  syntax:\n    content: public override byte[] GetBytes(int cb)\n    content.vb: Public Overrides Function GetBytes(cb As Integer) As Byte()\n    parameters:\n    - id: cb\n      type: System.Int32\n      description: \"\\n<p>The number of pseudo-random key bytes to generate. </p>\\n\"\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A byte array filled with pseudo-random key bytes.</p>\\n\"\n  overridden: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>cb </em>is out of range. This parameter requires a non-negative number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Rfc2898DeriveBytes.GetBytes(Int32)\n- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset\n  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset\n  id: Reset\n  parent: System.Security.Cryptography.Rfc2898DeriveBytes\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reset\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 202\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Resets the state of the operation.</p>\\n\"\n  syntax:\n    content: public override void Reset()\n    content.vb: Public Overrides Sub Reset\n  overridden: System.Security.Cryptography.DeriveBytes.Reset\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Rfc2898DeriveBytes.Reset()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.DeriveBytes\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: DeriveBytes\n  fullName: System.Security.Cryptography.DeriveBytes\n  commentId: T:System.Security.Cryptography.DeriveBytes\n  nameWithType: DeriveBytes\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Security.Cryptography.DeriveBytes.Dispose\n  parent: System.Security.Cryptography.DeriveBytes\n  isExternal: false\n  name: Dispose()\n  fullName: System.Security.Cryptography.DeriveBytes.Dispose()\n  spec.csharp:\n  - uid: System.Security.Cryptography.DeriveBytes.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.DeriveBytes.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.DeriveBytes.Dispose\n    name: Dispose\n    fullName: System.Security.Cryptography.DeriveBytes.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.DeriveBytes.Dispose\n  nameWithType: DeriveBytes.Dispose()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n  parent: System.Security.Cryptography.DeriveBytes\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.DeriveBytes.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Security.Cryptography.DeriveBytes.Dispose\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)\n  nameWithType: DeriveBytes.Dispose(Boolean)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n  parent: System.Security.Cryptography.DeriveBytes\n  isExternal: true\n  name: GetBytes(Int32)\n  fullName: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n  spec.csharp:\n  - uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n    name: GetBytes\n    fullName: System.Security.Cryptography.DeriveBytes.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n    name: GetBytes\n    fullName: System.Security.Cryptography.DeriveBytes.GetBytes\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)\n  nameWithType: DeriveBytes.GetBytes(Int32)\n- uid: System.Security.Cryptography.DeriveBytes.Reset\n  parent: System.Security.Cryptography.DeriveBytes\n  isExternal: false\n  name: Reset()\n  fullName: System.Security.Cryptography.DeriveBytes.Reset()\n  spec.csharp:\n  - uid: System.Security.Cryptography.DeriveBytes.Reset\n    name: Reset\n    fullName: System.Security.Cryptography.DeriveBytes.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.DeriveBytes.Reset\n    name: Reset\n    fullName: System.Security.Cryptography.DeriveBytes.Reset\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.DeriveBytes.Reset\n  nameWithType: DeriveBytes.Reset()\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}