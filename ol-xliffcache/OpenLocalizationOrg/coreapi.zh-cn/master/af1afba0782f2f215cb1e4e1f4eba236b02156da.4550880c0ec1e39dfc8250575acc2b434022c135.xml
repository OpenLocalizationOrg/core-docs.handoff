{"nodes":[{"pos":[842,851],"content":"CommonAcl","needQuote":true,"nodes":[{"content":"CommonAcl","pos":[0,9]}]},{"pos":[3628,3640],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[5449,5454],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[6942,6953],"content":"IsCanonical","needQuote":true,"nodes":[{"content":"IsCanonical","pos":[0,11]}]},{"pos":[8442,8453],"content":"IsContainer","needQuote":true,"nodes":[{"content":"IsContainer","pos":[0,11]}]},{"pos":[9783,9787],"content":"IsDS","needQuote":true,"nodes":[{"content":"IsDS","pos":[0,4]}]},{"pos":[11175,11186],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[13060,13068],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[14634,14662],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[15906,15957],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[16771,16796],"content":"Purge(SecurityIdentifier)","needQuote":true,"nodes":[{"content":"Purge(SecurityIdentifier)","pos":[0,25]}]},{"pos":[18376,18397],"content":"RemoveInheritedAces()","needQuote":true,"nodes":[{"content":"RemoveInheritedAces()","pos":[0,21]}]},{"pos":[19362,19391],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[19591,19597],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19792,19802],"content":"GenericAcl","needQuote":true,"nodes":[{"content":"GenericAcl","pos":[0,10]}]},{"pos":[20034,20045],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[20258,20269],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[20526,20537],"content":"AclRevision","needQuote":true,"nodes":[{"content":"AclRevision","pos":[0,11]}]},{"pos":[20851,20864],"content":"AclRevisionDS","needQuote":true,"nodes":[{"content":"AclRevisionDS","pos":[0,13]}]},{"pos":[21186,21201],"content":"MaxBinaryLength","needQuote":true,"nodes":[{"content":"MaxBinaryLength","pos":[0,15]}]},{"pos":[21528,21542],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[21860,21868],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[22222,22249],"content":"CopyTo(GenericAce[], Int32)","needQuote":true,"nodes":[{"content":"CopyTo(GenericAce[], Int32)","pos":[0,27]}]},{"pos":[22667,22673],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[22746,22747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22824,22834],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"content":"[]","pos":[22901,22903]},{"content":",","pos":[22935,22936]},{"pos":[22990,22995],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23054,23055],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23207,23213],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[23286,23287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23364,23374],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[23440,23442],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[23471,23472]},{"pos":[23526,23531],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23590,23591],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23982,23997],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[24156,24169],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[24249,24250],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24277,24278],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24380,24393],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[24473,24474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24501,24502],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24823,24855],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"pos":[25178,25196],"content":"ICollection.CopyTo","needQuote":true,"nodes":[{"content":"ICollection.CopyTo","pos":[0,18]}]},{"pos":[25300,25301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25350,25355],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[25415,25416]},{"pos":[25470,25475],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25534,25535],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25688,25725],"content":"System.Collections.ICollection.CopyTo","needQuote":true,"nodes":[{"content":"System.Collections.ICollection.CopyTo","pos":[0,37]}]},{"pos":[25829,25830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25879,25884],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[25944,25945]},{"pos":[25999,26004],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26063,26064],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26516,26543],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[26822,26847],"content":"IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator","pos":[0,25]}]},{"pos":[26958,26959],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26986,26987],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27120,27164],"content":"System.Collections.IEnumerable.GetEnumerator","needQuote":true,"nodes":[{"content":"System.Collections.IEnumerable.GetEnumerator","pos":[0,44]}]},{"pos":[27275,27276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27303,27304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27635,27645],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27740,27748],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27817,27818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27845,27846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27916,27924],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27993,27994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28021,28022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28205,28219],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28338,28344],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28411,28412],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28462,28468],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28528,28529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28612,28618],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28685,28686],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28736,28742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28802,28803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29017,29039],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[29187,29193],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29260,29261],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29311,29317],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29378,29379]},{"pos":[29434,29440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29500,29501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29598,29604],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29671,29672],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29722,29728],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29789,29790]},{"pos":[29845,29851],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29911,29912],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30157,30188],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30354,30369],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30445,30446],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30496,30502],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30563,30564]},{"pos":[30619,30625],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30685,30686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30792,30807],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30883,30884],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30934,30940],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31001,31002]},{"pos":[31057,31063],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31123,31124],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31354,31367],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31468,31479],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31551,31552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31579,31580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31653,31664],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31736,31737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31764,31765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31940,31949],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[32042,32049],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32117,32118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32145,32146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32215,32222],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32290,32291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32318,32319],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32494,32511],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32620,32635],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32711,32712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32739,32740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32817,32832],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32908,32909],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32936,32937],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33232,33245],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[33362,33373],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33432,33433],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33460,33461],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33542,33553],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[33612,33613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33640,33641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33996,34008],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[34141,34151],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34218,34219],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34246,34247],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34336,34346],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[34413,34414],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34441,34442],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34783,34798],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[35002,35015],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[35077,35078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35105,35106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35184,35200],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[35265,35266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35293,35294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35672,35689],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[35901,35916],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[35980,35981],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36008,36009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36089,36107],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[36174,36175],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36202,36203],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36438,36444],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36563,36581],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[36782,36806],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[36985,36996],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37055,37056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37123,37134],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37211,37212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37325,37336],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[37395,37396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37463,37474],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[37551,37552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37780,37789],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[37995,38018],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[38213,38223],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38290,38291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38358,38369],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38446,38447],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38568,38578],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[38645,38646],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38713,38724],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[38801,38802],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39055,39073],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[39295,39321],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[39628,39641],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[39703,39704],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39771,39782],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[39859,39860],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39970,39986],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[40051,40052],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40119,40130],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[40207,40208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40497,40507],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[40707,40735],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[41050,41065],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[41129,41130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41197,41208],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41285,41286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41398,41416],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[41483,41484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41551,41562],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[41639,41640],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41902,41913],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[42133,42145],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[42386,42391],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[42600,42605],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[42827,42834],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43061,43072],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[43337,43341],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[43413,43414]},{"pos":[43466,43471],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[43531,43532]},{"pos":[43642,43646],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[43717,43718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43767,43772],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[43831,43832],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44121,44131],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[44404,44412],"content":"Revision","needQuote":true,"nodes":[{"content":"Revision","pos":[0,8]}]},{"pos":[44640,44644],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[44885,44913],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"pos":[45266,45279],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[45359,45360],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45408,45412],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[45471,45473]},{"content":",","pos":[45505,45506]},{"pos":[45560,45565],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[45624,45625],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45755,45768],"content":"GetBinaryForm","needQuote":true,"nodes":[{"content":"GetBinaryForm","pos":[0,13]}]},{"pos":[45848,45849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45897,45901],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[45959,45961],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[45990,45991]},{"pos":[46045,46050],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46109,46110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46369,46375],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[46495,46499],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[46558,46560]},{"pos":[46623,46627],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[46685,46687],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[46870,46888],"content":"SecurityIdentifier","needQuote":true,"nodes":[{"content":"SecurityIdentifier","pos":[0,18]}]},{"pos":[47102,47127],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]}],"content":"items:\n- uid: System.Security.AccessControl.CommonAcl\n  commentId: T:System.Security.AccessControl.CommonAcl\n  id: CommonAcl\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.CommonAcl.BinaryLength\n  - System.Security.AccessControl.CommonAcl.Count\n  - System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.CommonAcl.IsCanonical\n  - System.Security.AccessControl.CommonAcl.IsContainer\n  - System.Security.AccessControl.CommonAcl.IsDS\n  - System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  - System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  - System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  - System.Security.AccessControl.CommonAcl.Revision\n  langs:\n  - csharp\n  - vb\n  name: CommonAcl\n  fullName: System.Security.AccessControl.CommonAcl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CommonAcl\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 147\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an access control list (ACL) and is the base class for the <xref href=\\\"System.Security.AccessControl.DiscretionaryAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.AccessControl.SystemAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> classes.</p>\\n\"\n  syntax:\n    content: 'public abstract class CommonAcl : GenericAcl, ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class CommonAcl\n          Inherits GenericAcl\n          Implements ICollection, IEnumerable\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.GenericAcl\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Security.AccessControl.GenericAcl.AclRevision\n  - System.Security.AccessControl.GenericAcl.AclRevisionDS\n  - System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  - System.Security.AccessControl.GenericAcl.IsSynchronized\n  - System.Security.AccessControl.GenericAcl.SyncRoot\n  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  - System.Security.AccessControl.GenericAcl.GetEnumerator\n  - System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: CommonAcl\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Security.AccessControl.CommonAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.CommonAcl.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.CommonAcl.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 150\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the access control list (ACL) into a binary array by using the <xref href=\\\"System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public override sealed int BinaryLength { get; }\n    content.vb: Public NotOverridable Overrides ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.BinaryLength\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  - ReadOnly\n  nameWithType: CommonAcl.BinaryLength\n- uid: System.Security.AccessControl.CommonAcl.Count\n  commentId: P:System.Security.AccessControl.CommonAcl.Count\n  id: Count\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Security.AccessControl.CommonAcl.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 151\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the number of access control entries (ACEs) in the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override sealed int Count { get; }\n    content.vb: Public NotOverridable Overrides ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of ACEs in the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Count\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  - ReadOnly\n  nameWithType: CommonAcl.Count\n- uid: System.Security.AccessControl.CommonAcl.IsCanonical\n  commentId: P:System.Security.AccessControl.CommonAcl.IsCanonical\n  id: IsCanonical\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: IsCanonical\n  fullName: System.Security.AccessControl.CommonAcl.IsCanonical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsCanonical\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 152\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether the access control entries (ACEs) in the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are in canonical order.</p>\\n\"\n  syntax:\n    content: public bool IsCanonical { get; }\n    content.vb: Public ReadOnly Property IsCanonical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the ACEs in the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object are in canonical order; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonAcl.IsCanonical\n- uid: System.Security.AccessControl.CommonAcl.IsContainer\n  commentId: P:System.Security.AccessControl.CommonAcl.IsContainer\n  id: IsContainer\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: IsContainer\n  fullName: System.Security.AccessControl.CommonAcl.IsContainer\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsContainer\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 153\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets whether the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container. </p>\\n\"\n  syntax:\n    content: public bool IsContainer { get; }\n    content.vb: Public ReadOnly Property IsContainer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a container.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonAcl.IsContainer\n- uid: System.Security.AccessControl.CommonAcl.IsDS\n  commentId: P:System.Security.AccessControl.CommonAcl.IsDS\n  id: IsDS\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: IsDS\n  fullName: System.Security.AccessControl.CommonAcl.IsDS\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDS\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 154\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Sets whether the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object access control list (ACL).</p>\\n\"\n  syntax:\n    content: public bool IsDS { get; }\n    content.vb: Public ReadOnly Property IsDS As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is a directory object ACL.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CommonAcl.IsDS\n- uid: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  commentId: P:System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.CommonAcl.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 155\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public override sealed GenericAce this[int index] { get; set; }\n    content.vb: Public NotOverridable Overrides Property Item(index As Integer) As GenericAce\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to get or set.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.CommonAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  fullName.vb: System.Security.AccessControl.CommonAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: CommonAcl.Item[Int32]\n  nameWithType.vb: CommonAcl.Item(Int32)\n- uid: System.Security.AccessControl.CommonAcl.Revision\n  commentId: P:System.Security.AccessControl.CommonAcl.Revision\n  id: Revision\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: Revision\n  fullName: System.Security.AccessControl.CommonAcl.Revision\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Revision\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 156\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the revision level of the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override sealed byte Revision { get; }\n    content.vb: Public NotOverridable Overrides ReadOnly Property Revision As Byte\n    parameters: []\n    return:\n      type: System.Byte\n      description: \"\\n<p>A byte value that specifies the revision level of the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.Revision\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  - ReadOnly\n  nameWithType: CommonAcl.Revision\n- uid: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 157\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public override sealed void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public NotOverridable Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  overridden: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  fullName.vb: System.Security.AccessControl.CommonAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: CommonAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: CommonAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  commentId: M:System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  id: Purge(System.Security.Principal.SecurityIdentifier)\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: Purge(SecurityIdentifier)\n  fullName: System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Purge\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 158\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all access control entries (ACEs) contained by this <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that are associated with the specified <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void Purge(SecurityIdentifier sid)\n    content.vb: Public Sub Purge(sid As SecurityIdentifier)\n    parameters:\n    - id: sid\n      type: System.Security.Principal.SecurityIdentifier\n      description: \"\\n<p>The <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to check for.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonAcl.Purge(SecurityIdentifier)\n- uid: System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  commentId: M:System.Security.AccessControl.CommonAcl.RemoveInheritedAces\n  id: RemoveInheritedAces\n  parent: System.Security.AccessControl.CommonAcl\n  langs:\n  - csharp\n  - vb\n  name: RemoveInheritedAces()\n  fullName: System.Security.AccessControl.CommonAcl.RemoveInheritedAces()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RemoveInheritedAces\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 159\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Removes all inherited access control entries (ACEs) from this <xref href=\\\"System.Security.AccessControl.CommonAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public void RemoveInheritedAces()\n    content.vb: Public Sub RemoveInheritedAces\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CommonAcl.RemoveInheritedAces()\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.GenericAcl\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAcl\n  fullName: System.Security.AccessControl.GenericAcl\n  commentId: T:System.Security.AccessControl.GenericAcl\n  nameWithType: GenericAcl\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  commentId: T:System.Collections.ICollection\n  nameWithType: ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  commentId: T:System.Collections.IEnumerable\n  nameWithType: IEnumerable\n- uid: System.Security.AccessControl.GenericAcl.AclRevision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevision\n  fullName: System.Security.AccessControl.GenericAcl.AclRevision\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision\n  nameWithType: GenericAcl.AclRevision\n- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: AclRevisionDS\n  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS\n  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS\n  nameWithType: GenericAcl.AclRevisionDS\n- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: MaxBinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength\n  nameWithType: GenericAcl.MaxBinaryLength\n- uid: System.Security.AccessControl.GenericAcl.IsSynchronized\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized\n  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized\n  nameWithType: GenericAcl.IsSynchronized\n- uid: System.Security.AccessControl.GenericAcl.SyncRoot\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Security.AccessControl.GenericAcl.SyncRoot\n  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot\n  nameWithType: GenericAcl.SyncRoot\n- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: CopyTo(GenericAce[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)\n  name.vb: CopyTo(GenericAce(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n    name: CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Security.AccessControl.GenericAce\n    name: GenericAce\n    fullName: System.Security.AccessControl.GenericAce\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)\n  nameWithType: GenericAcl.CopyTo(GenericAce[], Int32)\n  nameWithType.vb: GenericAcl.CopyTo(GenericAce(), Int32)\n- uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator\n  nameWithType: GenericAcl.GetEnumerator()\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n    name: System.Collections.ICollection.CopyTo\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  nameWithType: GenericAcl.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: GenericAcl.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n    name: System.Collections.IEnumerable.GetEnumerator\n    fullName: System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.System#Collections#IEnumerable#GetEnumerator\n  nameWithType: GenericAcl.IEnumerable.GetEnumerator()\n  nameWithType.vb: GenericAcl.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable()\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  commentId: N:System.Collections\n  nameWithType: System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  commentId: T:System.Linq.Queryable\n  nameWithType: Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  commentId: T:System.Linq.Enumerable\n  nameWithType: Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Security.AccessControl.GenericAcl.BinaryLength\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAcl.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAcl.BinaryLength\n  nameWithType: GenericAcl.BinaryLength\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.GenericAcl.Count\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: Count\n  fullName: System.Security.AccessControl.GenericAcl.Count\n  commentId: P:System.Security.AccessControl.GenericAcl.Count\n  nameWithType: GenericAcl.Count\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]\n  fullname.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.GenericAcl.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)\n    name: Item\n    fullName: System.Security.AccessControl.GenericAcl.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: P:System.Security.AccessControl.GenericAcl.Item(System.Int32)\n  nameWithType: GenericAcl.Item[Int32]\n  nameWithType.vb: GenericAcl.Item(Int32)\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.GenericAcl.Revision\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: false\n  name: Revision\n  fullName: System.Security.AccessControl.GenericAcl.Revision\n  commentId: P:System.Security.AccessControl.GenericAcl.Revision\n  nameWithType: GenericAcl.Revision\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAcl\n  isExternal: true\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)\n  fullname.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  spec.csharp:\n  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n    name: GetBinaryForm\n    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm\n  - name: (\n    fullName: (\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)\n  nameWithType: GenericAcl.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAcl.GetBinaryForm(Byte(), Int32)\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Security.Principal.SecurityIdentifier\n  parent: System.Security.Principal\n  isExternal: false\n  name: SecurityIdentifier\n  fullName: System.Security.Principal.SecurityIdentifier\n  commentId: T:System.Security.Principal.SecurityIdentifier\n  nameWithType: SecurityIdentifier\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n"}