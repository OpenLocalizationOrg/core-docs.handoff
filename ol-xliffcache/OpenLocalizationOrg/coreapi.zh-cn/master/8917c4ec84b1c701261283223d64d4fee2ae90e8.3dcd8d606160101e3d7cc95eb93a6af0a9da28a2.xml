{"nodes":[{"pos":[1107,1111],"content":"Path","needQuote":true,"nodes":[{"content":"Path","pos":[0,4]}]},{"pos":[2442,2467],"content":"AltDirectorySeparatorChar","needQuote":true,"nodes":[{"content":"AltDirectorySeparatorChar","pos":[0,25]}]},{"pos":[3544,3566],"content":"DirectorySeparatorChar","needQuote":true,"nodes":[{"content":"DirectorySeparatorChar","pos":[0,22]}]},{"pos":[4591,4604],"content":"PathSeparator","needQuote":true,"nodes":[{"content":"PathSeparator","pos":[0,13]}]},{"pos":[5554,5573],"content":"VolumeSeparatorChar","needQuote":true,"nodes":[{"content":"VolumeSeparatorChar","pos":[0,19]}]},{"pos":[6588,6619],"content":"ChangeExtension(String, String)","needQuote":true,"nodes":[{"content":"ChangeExtension(String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The new extension (with or without a leading period).","pos":[7601,7659],"source":"\\n<p>The new extension (with or without a leading period)."},{"content":"Specify &lt;strong&gt;null&lt;/strong&gt; to remove an existing extension from &lt;em&gt;path&lt;/em&gt;.","pos":[7660,7741],"source":" Specify <strong>null</strong> to remove an existing extension from <em>path</em>."},{"content":"&lt;/p&gt;\\n","pos":[7742,7748],"source":" </p>\\n"},{"pos":[8965,8988],"content":"Combine(String, String)","needQuote":true,"nodes":[{"content":"Combine(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The first path to combine.","pos":[9664,9695],"source":"\\n<p>The first path to combine."},{"content":"&lt;/p&gt;\\n","pos":[9696,9702],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second path to combine.","pos":[9766,9798],"source":"\\n<p>The second path to combine."},{"content":"&lt;/p&gt;\\n","pos":[9799,9805],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The combined paths.","pos":[9865,9889],"source":"\\n<p>The combined paths."},{"content":"If one of the specified paths is a zero-length string, this method returns the other path.","pos":[9890,9980]},{"content":"If &lt;em&gt;path2&lt;/em&gt; contains an absolute path, this method returns &lt;em&gt;path2&lt;/em&gt;.&lt;/p&gt;\\n","pos":[9981,10067],"source":" If <em>path2</em> contains an absolute path, this method returns <em>path2</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path1&lt;/em&gt; or &lt;em&gt;path2&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10483,10548],"source":"\\n<p>\\n<em>path1</em> or <em>path2</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10549,10555],"source":" </p>\\n"},{"pos":[10953,10984],"content":"Combine(String, String, String)","needQuote":true,"nodes":[{"content":"Combine(String, String, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first path to combine.","pos":[11708,11739],"source":"\\n<p>The first path to combine."},{"content":"&lt;/p&gt;\\n","pos":[11740,11746],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second path to combine.","pos":[11810,11842],"source":"\\n<p>The second path to combine."},{"content":"&lt;/p&gt;\\n","pos":[11843,11849],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third path to combine.&lt;/p&gt;\\n","pos":[11913,11950],"source":"\\n<p>The third path to combine.</p>\\n"},{"content":"\\n&lt;p&gt;The combined paths.&lt;/p&gt;\\n","pos":[12010,12040],"source":"\\n<p>The combined paths.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path1&lt;/em&gt;, &lt;em&gt;path2&lt;/em&gt;, or &lt;em&gt;path3&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12473,12555],"source":"\\n<p>\\n<em>path1</em>, <em>path2</em>, or <em>path3</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12556,12562],"source":" </p>\\n"},{"pos":[12890,12907],"content":"Combine(String[])","needQuote":true,"nodes":[{"content":"Combine(String[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;An array of parts of the path.&lt;/p&gt;\\n","pos":[13571,13612],"source":"\\n<p>An array of parts of the path.</p>\\n"},{"content":"\\n&lt;p&gt;The combined paths.&lt;/p&gt;\\n","pos":[13672,13702],"source":"\\n<p>The combined paths.</p>\\n"},{"content":"\\n&lt;p&gt;One of the strings in the array is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14115,14177],"source":"\\n<p>One of the strings in the array is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14178,14184],"source":" </p>\\n"},{"pos":[14645,14669],"content":"GetDirectoryName(String)","needQuote":true,"nodes":[{"content":"GetDirectoryName(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The path of a file or directory.","pos":[15362,15399],"source":"\\n<p>The path of a file or directory."},{"content":"&lt;/p&gt;\\n","pos":[15400,15406],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;path&lt;/em&gt; parameter contains invalid characters, is empty, or contains only white spaces.","pos":[15852,15954],"source":"\\n<p>The <em>path</em> parameter contains invalid characters, is empty, or contains only white spaces."},{"content":"&lt;/p&gt;\\n","pos":[15955,15961],"source":" </p>\\n"},{"pos":[16752,16772],"content":"GetExtension(String)","needQuote":true,"nodes":[{"content":"GetExtension(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The path string from which to get the extension.","pos":[17436,17489],"source":"\\n<p>The path string from which to get the extension."},{"content":"&lt;/p&gt;\\n","pos":[17490,17496],"source":" </p>\\n"},{"pos":[18781,18800],"content":"GetFileName(String)","needQuote":true,"nodes":[{"content":"GetFileName(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The path string from which to obtain the file name and extension.","pos":[19475,19545],"source":"\\n<p>The path string from which to obtain the file name and extension."},{"content":"&lt;/p&gt;\\n","pos":[19546,19552],"source":" </p>\\n"},{"pos":[20624,20659],"content":"GetFileNameWithoutExtension(String)","needQuote":true,"nodes":[{"content":"GetFileNameWithoutExtension(String)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The path of the file.","pos":[21406,21432],"source":"\\n<p>The path of the file."},{"content":"&lt;/p&gt;\\n","pos":[21433,21439],"source":" </p>\\n"},{"pos":[22323,22342],"content":"GetFullPath(String)","needQuote":true,"nodes":[{"content":"GetFullPath(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The file or directory for which to obtain absolute path information.","pos":[23085,23158],"source":"\\n<p>The file or directory for which to obtain absolute path information."},{"content":"&lt;/p&gt;\\n","pos":[23159,23165],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions.","pos":[23843,23898],"source":"\\n<p>The caller does not have the required permissions."},{"content":"&lt;/p&gt;\\n","pos":[23899,23905],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;path&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[24010,24056],"source":"\\n<p>\\n<em>path</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24057,24063],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The specified path, file name, or both exceed the system-defined maximum length.","pos":[24394,24479],"source":"\\n<p>The specified path, file name, or both exceed the system-defined maximum length."},{"content":"For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.","pos":[24480,24609]},{"content":"&lt;/p&gt;\\n","pos":[24610,24616],"source":" </p>\\n"},{"pos":[25053,25078],"content":"GetInvalidFileNameChars()","needQuote":true,"nodes":[{"content":"GetInvalidFileNameChars()","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An array containing the characters that are not allowed in file names.&lt;/p&gt;\\n","pos":[25751,25832],"source":"\\n<p>An array containing the characters that are not allowed in file names.</p>\\n"},{"pos":[26139,26160],"content":"GetInvalidPathChars()","needQuote":true,"nodes":[{"content":"GetInvalidPathChars()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An array containing the characters that are not allowed in path names.&lt;/p&gt;\\n","pos":[26817,26898],"source":"\\n<p>An array containing the characters that are not allowed in path names.</p>\\n"},{"pos":[27222,27241],"content":"GetPathRoot(String)","needQuote":true,"nodes":[{"content":"GetPathRoot(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The path from which to obtain root directory information.","pos":[27909,27971],"source":"\\n<p>The path from which to obtain root directory information."},{"content":"&lt;/p&gt;\\n","pos":[27972,27978],"source":" </p>\\n"},{"pos":[28972,28991],"content":"GetRandomFileName()","needQuote":true,"nodes":[{"content":"GetRandomFileName()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A random folder name or file name.&lt;/p&gt;\\n","pos":[29686,29731],"source":"\\n<p>A random folder name or file name.</p>\\n"},{"pos":[30020,30037],"content":"GetTempFileName()","needQuote":true,"nodes":[{"content":"GetTempFileName()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The full path of the temporary file.&lt;/p&gt;\\n","pos":[30780,30827],"source":"\\n<p>The full path of the temporary file.</p>\\n"},{"content":"\\n&lt;p&gt;An I/O error occurs, such as no unique temporary file name is available.&lt;/p&gt;\\n&lt;p&gt;- or -&lt;/p&gt;\\n&lt;p&gt;This method was unable to create a temporary file.&lt;/p&gt;\\n","pos":[30932,31089],"source":"\\n<p>An I/O error occurs, such as no unique temporary file name is available.</p>\\n<p>- or -</p>\\n<p>This method was unable to create a temporary file.</p>\\n"},{"pos":[31488,31501],"content":"GetTempPath()","needQuote":true,"nodes":[{"content":"GetTempPath()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The path to the temporary folder, ending with a backslash.&lt;/p&gt;\\n","pos":[32186,32255],"source":"\\n<p>The path to the temporary folder, ending with a backslash.</p>\\n"},{"content":"\\n&lt;p&gt;The caller does not have the required permissions.","pos":[32384,32439],"source":"\\n<p>The caller does not have the required permissions."},{"content":"&lt;/p&gt;\\n","pos":[32440,32446],"source":" </p>\\n"},{"pos":[32899,32919],"content":"HasExtension(String)","needQuote":true,"nodes":[{"content":"HasExtension(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The path to search for an extension.","pos":[33589,33630],"source":"\\n<p>The path to search for an extension."},{"content":"&lt;/p&gt;\\n","pos":[33631,33637],"source":" </p>\\n"},{"pos":[34549,34569],"content":"IsPathRooted(String)","needQuote":true,"nodes":[{"content":"IsPathRooted(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The path to test.","pos":[35256,35278],"source":"\\n<p>The path to test."},{"content":"&lt;/p&gt;\\n","pos":[35279,35285],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;path&lt;/em&gt; contains a root; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[35346,35449],"source":"\\n<p>\\n<strong>true</strong> if <em>path</em> contains a root; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[35922,35931],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[36071,36077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36237,36247],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[36342,36350],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36419,36420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36447,36448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36518,36526],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[36595,36596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36623,36624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36807,36821],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[36940,36946],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37013,37014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37064,37070],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37130,37131],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37214,37220],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37287,37288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37338,37344],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[37404,37405],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37619,37641],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[37789,37795],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[37862,37863],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37913,37919],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[37980,37981]},{"pos":[38036,38042],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38102,38103],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38200,38206],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[38273,38274],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38324,38330],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[38391,38392]},{"pos":[38447,38453],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38513,38514],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38759,38790],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[38956,38971],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39047,39048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39098,39104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39165,39166]},{"pos":[39221,39227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39287,39288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39394,39409],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[39485,39486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39536,39542],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[39603,39604]},{"pos":[39659,39665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[39725,39726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39956,39969],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[40070,40081],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40153,40154],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40181,40182],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40255,40266],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[40338,40339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40366,40367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40542,40551],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[40644,40651],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40719,40720],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40747,40748],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40817,40824],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[40892,40893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40920,40921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41096,41113],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[41222,41237],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41313,41314],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41341,41342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41419,41434],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[41510,41511],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41538,41539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41684,41690],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[41819,41823],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[41962,41968],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42078,42086],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[42214,42220],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[42281,42283]},{"pos":[42348,42354],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[42414,42416],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[42516,42522],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[42642,42646],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[42705,42707]},{"pos":[42770,42774],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[42832,42834],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[42968,42975],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43134,43151],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[43327,43348],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[43538,43558],"content":"PathTooLongException","needQuote":true,"nodes":[{"content":"PathTooLongException","pos":[0,20]}]},{"pos":[43754,43771],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]},{"pos":[43982,44003],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[44204,44215],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]}],"content":"items:\n- uid: System.IO.Path\n  commentId: T:System.IO.Path\n  id: Path\n  parent: System.IO\n  children:\n  - System.IO.Path.AltDirectorySeparatorChar\n  - System.IO.Path.ChangeExtension(System.String,System.String)\n  - System.IO.Path.Combine(System.String,System.String)\n  - System.IO.Path.Combine(System.String,System.String,System.String)\n  - System.IO.Path.Combine(System.String[])\n  - System.IO.Path.DirectorySeparatorChar\n  - System.IO.Path.GetDirectoryName(System.String)\n  - System.IO.Path.GetExtension(System.String)\n  - System.IO.Path.GetFileName(System.String)\n  - System.IO.Path.GetFileNameWithoutExtension(System.String)\n  - System.IO.Path.GetFullPath(System.String)\n  - System.IO.Path.GetInvalidFileNameChars\n  - System.IO.Path.GetInvalidPathChars\n  - System.IO.Path.GetPathRoot(System.String)\n  - System.IO.Path.GetRandomFileName\n  - System.IO.Path.GetTempFileName\n  - System.IO.Path.GetTempPath\n  - System.IO.Path.HasExtension(System.String)\n  - System.IO.Path.IsPathRooted(System.String)\n  - System.IO.Path.PathSeparator\n  - System.IO.Path.VolumeSeparatorChar\n  langs:\n  - csharp\n  - vb\n  name: Path\n  fullName: System.IO.Path\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Path\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Performs operations on <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public class Path\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Class Path\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Path\n- uid: System.IO.Path.AltDirectorySeparatorChar\n  commentId: F:System.IO.Path.AltDirectorySeparatorChar\n  id: AltDirectorySeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: AltDirectorySeparatorChar\n  fullName: System.IO.Path.AltDirectorySeparatorChar\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AltDirectorySeparatorChar\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 51\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\\n\"\n  syntax:\n    content: public static readonly char AltDirectorySeparatorChar\n    content.vb: Public Shared ReadOnly AltDirectorySeparatorChar As Char\n    return:\n      type: System.Char\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Path.AltDirectorySeparatorChar\n- uid: System.IO.Path.DirectorySeparatorChar\n  commentId: F:System.IO.Path.DirectorySeparatorChar\n  id: DirectorySeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: DirectorySeparatorChar\n  fullName: System.IO.Path.DirectorySeparatorChar\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DirectorySeparatorChar\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\\n\"\n  syntax:\n    content: public static readonly char DirectorySeparatorChar\n    content.vb: Public Shared ReadOnly DirectorySeparatorChar As Char\n    return:\n      type: System.Char\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Path.DirectorySeparatorChar\n- uid: System.IO.Path.PathSeparator\n  commentId: F:System.IO.Path.PathSeparator\n  id: PathSeparator\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: PathSeparator\n  fullName: System.IO.Path.PathSeparator\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: PathSeparator\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 100\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>A platform-specific separator character used to separate path strings in environment variables.</p>\\n\"\n  syntax:\n    content: public static readonly char PathSeparator\n    content.vb: Public Shared ReadOnly PathSeparator As Char\n    return:\n      type: System.Char\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Path.PathSeparator\n- uid: System.IO.Path.VolumeSeparatorChar\n  commentId: F:System.IO.Path.VolumeSeparatorChar\n  id: VolumeSeparatorChar\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: VolumeSeparatorChar\n  fullName: System.IO.Path.VolumeSeparatorChar\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: VolumeSeparatorChar\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 58\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Provides a platform-specific volume separator character.</p>\\n\"\n  syntax:\n    content: public static readonly char VolumeSeparatorChar\n    content.vb: Public Shared ReadOnly VolumeSeparatorChar As Char\n    return:\n      type: System.Char\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Path.VolumeSeparatorChar\n- uid: System.IO.Path.ChangeExtension(System.String,System.String)\n  commentId: M:System.IO.Path.ChangeExtension(System.String,System.String)\n  id: ChangeExtension(System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: ChangeExtension(String, String)\n  fullName: System.IO.Path.ChangeExtension(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ChangeExtension\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 128\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Changes the extension of a path string.</p>\\n\"\n  syntax:\n    content: public static string ChangeExtension(string path, string extension)\n    content.vb: Public Shared Function ChangeExtension(path As String, extension As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path information to modify. The path cannot contain any of the characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: extension\n      type: System.String\n      description: \"\\n<p>The new extension (with or without a leading period). Specify <strong>null</strong> to remove an existing extension from <em>path</em>. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The modified path information.</p>\\n<p>On Windows-based desktop platforms, if <em>path</em> is <strong>null</strong> or an empty string (\\\"\\\"), the path information is returned unmodified. If <em>extension</em> is <strong>null</strong>, the returned string contains the specified path with its extension removed. If <em>path</em> has no extension, and <em>extension</em> is not <strong>null</strong>, the returned path string contains <em>extension</em> appended to the end of <em>path</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.ChangeExtension(String, String)\n- uid: System.IO.Path.Combine(System.String,System.String)\n  commentId: M:System.IO.Path.Combine(System.String,System.String)\n  id: Combine(System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: Combine(String, String)\n  fullName: System.IO.Path.Combine(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Combine\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1214\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Combines two strings into a path.</p>\\n\"\n  syntax:\n    content: public static string Combine(string path1, string path2)\n    content.vb: Public Shared Function Combine(path1 As String, path2 As String) As String\n    parameters:\n    - id: path1\n      type: System.String\n      description: \"\\n<p>The first path to combine. </p>\\n\"\n    - id: path2\n      type: System.String\n      description: \"\\n<p>The second path to combine. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <em>path2</em> contains an absolute path, this method returns <em>path2</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path1</em> or <em>path2</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path1</em> or <em>path2</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.Combine(String, String)\n- uid: System.IO.Path.Combine(System.String,System.String,System.String)\n  commentId: M:System.IO.Path.Combine(System.String,System.String,System.String)\n  id: Combine(System.String,System.String,System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: Combine(String, String, String)\n  fullName: System.IO.Path.Combine(System.String, System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Combine\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1224\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Combines three strings into a path.</p>\\n\"\n  syntax:\n    content: public static string Combine(string path1, string path2, string path3)\n    content.vb: Public Shared Function Combine(path1 As String, path2 As String, path3 As String) As String\n    parameters:\n    - id: path1\n      type: System.String\n      description: \"\\n<p>The first path to combine. </p>\\n\"\n    - id: path2\n      type: System.String\n      description: \"\\n<p>The second path to combine. </p>\\n\"\n    - id: path3\n      type: System.String\n      description: \"\\n<p>The third path to combine.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The combined paths.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path1</em>, <em>path2</em>, or <em>path3</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path1</em>, <em>path2</em>, or <em>path3</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.Combine(String, String, String)\n- uid: System.IO.Path.Combine(System.String[])\n  commentId: M:System.IO.Path.Combine(System.String[])\n  id: Combine(System.String[])\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: Combine(String[])\n  fullName: System.IO.Path.Combine(System.String[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Combine\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1247\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Combines an array of strings into a path.</p>\\n\"\n  syntax:\n    content: public static string Combine(params string[] paths)\n    content.vb: Public Shared Function Combine(ParamArray paths As String()) As String\n    parameters:\n    - id: paths\n      type: System.String[]\n      description: \"\\n<p>An array of parts of the path.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The combined paths.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>One of the strings in the array contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>One of the strings in the array is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IO.Path.Combine(System.String())\n  name.vb: Combine(String())\n  nameWithType: Path.Combine(String[])\n  nameWithType.vb: Path.Combine(String())\n- uid: System.IO.Path.GetDirectoryName(System.String)\n  commentId: M:System.IO.Path.GetDirectoryName(System.String)\n  id: GetDirectoryName(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetDirectoryName(String)\n  fullName: System.IO.Path.GetDirectoryName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDirectoryName\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 158\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the directory information for the specified path string.</p>\\n\"\n  syntax:\n    content: public static string GetDirectoryName(string path)\n    content.vb: Public Shared Function GetDirectoryName(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path of a file or directory. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>Directory information for <em>path</em>, or <strong>null</strong> if <em>path</em> denotes a root directory or is null. Returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>path</em> does not contain directory information.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>path</em> parameter contains invalid characters, is empty, or contains only white spaces. </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The <em>path</em> parameter is longer than the system-defined maximum length.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetDirectoryName(String)\n- uid: System.IO.Path.GetExtension(System.String)\n  commentId: M:System.IO.Path.GetExtension(System.String)\n  id: GetExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetExtension(String)\n  fullName: System.IO.Path.GetExtension(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetExtension\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 301\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the extension of the specified path string.</p>\\n\"\n  syntax:\n    content: public static string GetExtension(string path)\n    content.vb: Public Shared Function GetExtension(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path string from which to get the extension. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The extension of the specified path (including the period \\\".\\\"), or <strong>null</strong>, or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>path</em> is <strong>null</strong>, <xref href=\\\"System.IO.Path.GetExtension(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>null</strong>. If <em>path</em> does not have extension information, <xref href=\\\"System.IO.Path.GetExtension(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetExtension(String)\n- uid: System.IO.Path.GetFileName(System.String)\n  commentId: M:System.IO.Path.GetFileName(System.String)\n  id: GetFileName(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetFileName(String)\n  fullName: System.IO.Path.GetFileName(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFileName\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1019\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the file name and extension of the specified path string.</p>\\n\"\n  syntax:\n    content: public static string GetFileName(string path)\n    content.vb: Public Shared Function GetFileName(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path string from which to obtain the file name and extension. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The characters after the last directory character in <em>path</em>. If the last character of <em>path</em> is a directory or volume separator character, this method returns <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If <em>path</em> is <strong>null</strong>, this method returns <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetFileName(String)\n- uid: System.IO.Path.GetFileNameWithoutExtension(System.String)\n  commentId: M:System.IO.Path.GetFileNameWithoutExtension(System.String)\n  id: GetFileNameWithoutExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetFileNameWithoutExtension(String)\n  fullName: System.IO.Path.GetFileNameWithoutExtension(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFileNameWithoutExtension\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1035\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the file name of the specified path string without the extension.</p>\\n\"\n  syntax:\n    content: public static string GetFileNameWithoutExtension(string path)\n    content.vb: Public Shared Function GetFileNameWithoutExtension(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path of the file. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string returned by <xref href=\\\"System.IO.Path.GetFileName(System.String)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, minus the last period (.) and all characters following it.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetFileNameWithoutExtension(String)\n- uid: System.IO.Path.GetFullPath(System.String)\n  commentId: M:System.IO.Path.GetFullPath(System.String)\n  id: GetFullPath(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetFullPath(String)\n  fullName: System.IO.Path.GetFullPath(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFullPath\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 327\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the absolute path for the specified path string.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string GetFullPath(string path)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetFullPath(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The file or directory for which to obtain absolute path information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The fully qualified location of <em>path</em>, such as \\\"C:\\\\MyFile.txt\\\".</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The system could not retrieve the absolute path. </p>\\n\"\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>path</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>path</em> contains a colon (\\\":\\\") that is not part of a volume identifier (for example, \\\"c:\\\\\\\"). </p>\\n\"\n  - type: System.IO.PathTooLongException\n    commentId: T:System.IO.PathTooLongException\n    description: \"\\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetFullPath(String)\n- uid: System.IO.Path.GetInvalidFileNameChars\n  commentId: M:System.IO.Path.GetInvalidFileNameChars\n  id: GetInvalidFileNameChars\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetInvalidFileNameChars()\n  fullName: System.IO.Path.GetInvalidFileNameChars()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetInvalidFileNameChars\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 291\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Gets an array containing the characters that are not allowed in file names.</p>\\n\"\n  syntax:\n    content: public static char[] GetInvalidFileNameChars()\n    content.vb: Public Shared Function GetInvalidFileNameChars As Char()\n    return:\n      type: System.Char[]\n      description: \"\\n<p>An array containing the characters that are not allowed in file names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetInvalidFileNameChars()\n- uid: System.IO.Path.GetInvalidPathChars\n  commentId: M:System.IO.Path.GetInvalidPathChars\n  id: GetInvalidPathChars\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetInvalidPathChars()\n  fullName: System.IO.Path.GetInvalidPathChars()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetInvalidPathChars\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 286\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Gets an array containing the characters that are not allowed in path names.</p>\\n\"\n  syntax:\n    content: public static char[] GetInvalidPathChars()\n    content.vb: Public Shared Function GetInvalidPathChars As Char()\n    return:\n      type: System.Char[]\n      description: \"\\n<p>An array containing the characters that are not allowed in path names.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetInvalidPathChars()\n- uid: System.IO.Path.GetPathRoot(System.String)\n  commentId: M:System.IO.Path.GetPathRoot(System.String)\n  id: GetPathRoot(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetPathRoot(String)\n  fullName: System.IO.Path.GetPathRoot(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetPathRoot\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1060\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Gets the root directory information of the specified path.</p>\\n\"\n  syntax:\n    content: public static string GetPathRoot(string path)\n    content.vb: Public Shared Function GetPathRoot(path As String) As String\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path from which to obtain root directory information. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The root directory of <em>path</em>, such as \\\"C:\\\\\\\", or <strong>null</strong> if <em>path</em> is <strong>null</strong>, or an empty string if <em>path</em> does not contain root directory information.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was passed to <em>path</em>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetPathRoot(String)\n- uid: System.IO.Path.GetRandomFileName\n  commentId: M:System.IO.Path.GetRandomFileName\n  id: GetRandomFileName\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetRandomFileName()\n  fullName: System.IO.Path.GetRandomFileName()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRandomFileName\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1097\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns a random folder name or file name.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string GetRandomFileName()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetRandomFileName As String\n    return:\n      type: System.String\n      description: \"\\n<p>A random folder name or file name.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetRandomFileName()\n- uid: System.IO.Path.GetTempFileName\n  commentId: M:System.IO.Path.GetTempFileName\n  id: GetTempFileName\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetTempFileName()\n  fullName: System.IO.Path.GetTempFileName()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTempFileName\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1134\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string GetTempFileName()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetTempFileName As String\n    return:\n      type: System.String\n      description: \"\\n<p>The full path of the temporary file.</p>\\n\"\n  exceptions:\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>An I/O error occurs, such as no unique temporary file name is available.</p>\\n<p>- or -</p>\\n<p>This method was unable to create a temporary file.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.FileIOPermission\n    commentId: T:System.Security.Permissions.FileIOPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetTempFileName()\n- uid: System.IO.Path.GetTempPath\n  commentId: M:System.IO.Path.GetTempPath\n  id: GetTempPath\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: GetTempPath()\n  fullName: System.IO.Path.GetTempPath()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTempPath\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1070\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Returns the path of the current user's temporary folder.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static string GetTempPath()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function GetTempPath As String\n    return:\n      type: System.String\n      description: \"\\n<p>The path to the temporary folder, ending with a backslash.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The caller does not have the required permissions. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.EnvironmentPermission\n    commentId: T:System.Security.Permissions.EnvironmentPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.GetTempPath()\n- uid: System.IO.Path.HasExtension(System.String)\n  commentId: M:System.IO.Path.HasExtension(System.String)\n  id: HasExtension(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: HasExtension(String)\n  fullName: System.IO.Path.HasExtension(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasExtension\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1175\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Determines whether a path includes a file name extension.</p>\\n\"\n  syntax:\n    content: public static bool HasExtension(string path)\n    content.vb: Public Shared Function HasExtension(path As String) As Boolean\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to search for an extension. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the characters that follow the last directory separator (\\\\\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.HasExtension(String)\n- uid: System.IO.Path.IsPathRooted(System.String)\n  commentId: M:System.IO.Path.IsPathRooted(System.String)\n  id: IsPathRooted(System.String)\n  parent: System.IO.Path\n  langs:\n  - csharp\n  - vb\n  name: IsPathRooted(String)\n  fullName: System.IO.Path.IsPathRooted(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/Path.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPathRooted\n    path: src/mscorlib/src/System/IO/Path.cs\n    startLine: 1197\n  assemblies:\n  - System.Runtime.Extensions\n  namespace: System.IO\n  summary: \"\\n<p>Gets a value indicating whether the specified path string contains a root.</p>\\n\"\n  syntax:\n    content: public static bool IsPathRooted(string path)\n    content.vb: Public Shared Function IsPathRooted(path As String) As Boolean\n    parameters:\n    - id: path\n      type: System.String\n      description: \"\\n<p>The path to test. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>path</em> contains a root; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\\\"System.IO.Path.GetInvalidPathChars\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Path.IsPathRooted(String)\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.IO.PathTooLongException\n  isExternal: false\n  name: PathTooLongException\n  fullName: System.IO.PathTooLongException\n  nameWithType: PathTooLongException\n  commentId: T:System.IO.PathTooLongException\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n"}