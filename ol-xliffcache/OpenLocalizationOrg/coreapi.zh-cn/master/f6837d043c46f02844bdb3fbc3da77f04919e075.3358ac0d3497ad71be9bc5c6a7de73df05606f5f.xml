{"nodes":[{"pos":[855,876],"content":"ThreadPoolBoundHandle","needQuote":true,"nodes":[{"content":"ThreadPoolBoundHandle","pos":[0,21]}]},{"pos":[2224,2230],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[3457,3519],"content":"AllocateNativeOverlapped(IOCompletionCallback, Object, Object)","needQuote":true,"nodes":[{"content":"AllocateNativeOverlapped(IOCompletionCallback, Object, Object)","pos":[0,62]}]},{"pos":[5363,5411],"content":"AllocateNativeOverlapped(PreAllocatedOverlapped)","needQuote":true,"nodes":[{"content":"AllocateNativeOverlapped(PreAllocatedOverlapped)","pos":[0,48]}]},{"pos":[7043,7065],"content":"BindHandle(SafeHandle)","needQuote":true,"nodes":[{"content":"BindHandle(SafeHandle)","pos":[0,22]}]},{"pos":[8238,8247],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[9274,9313],"content":"FreeNativeOverlapped(NativeOverlapped*)","needQuote":true,"nodes":[{"content":"FreeNativeOverlapped(NativeOverlapped*)","pos":[0,39]}]},{"pos":[10819,10862],"content":"GetNativeOverlappedState(NativeOverlapped*)","needQuote":true,"nodes":[{"content":"GetNativeOverlappedState(NativeOverlapped*)","pos":[0,43]}]},{"pos":[12202,12218],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[12376,12382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12537,12548],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[12727,12737],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12866,12874],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[12977,12978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13025,13026],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13116,13124],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13227,13228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13275,13276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13458,13472],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[13629,13635],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13734,13735],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13805,13811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13896,13897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14000,14006],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14105,14106],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14176,14182],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14267,14268],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14478,14500],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[14694,14700],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[14799,14800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14870,14876],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14962,14963]},{"pos":[15041,15047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15132,15133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15250,15256],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15355,15356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15426,15432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[15518,15519]},{"pos":[15597,15603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15688,15689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15917,15948],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[16169,16184],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16301,16302],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16372,16378],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16464,16465]},{"pos":[16543,16549],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16634,16635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16761,16776],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[16893,16894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16964,16970],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17056,17057]},{"pos":[17135,17141],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17226,17227],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17389,17402],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17540,17551],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17660,17661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17708,17709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17802,17813],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[17922,17923],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17970,17971],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18125,18134],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18260,18267],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18368,18369],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18416,18417],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18506,18513],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18614,18615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18662,18663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18833,18850],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19000,19015],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19132,19133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19180,19181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19278,19293],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19410,19411],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19458,19459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19560,19566],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[19784,19794],"content":"SafeHandle","needQuote":true,"nodes":[{"content":"SafeHandle","pos":[0,10]}]},{"pos":[19988,20018],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[20262,20282],"content":"IOCompletionCallback","needQuote":true,"nodes":[{"content":"IOCompletionCallback","pos":[0,20]}]},{"pos":[20420,20437],"content":"NativeOverlapped*","needQuote":true,"nodes":[{"content":"NativeOverlapped*","pos":[0,17]}]},{"pos":[20587,20603],"content":"NativeOverlapped","needQuote":true,"nodes":[{"content":"NativeOverlapped","pos":[0,16]}]},{"pos":[20805,20821],"content":"NativeOverlapped","needQuote":true,"nodes":[{"content":"NativeOverlapped","pos":[0,16]}]},{"pos":[21116,21138],"content":"PreAllocatedOverlapped","needQuote":true,"nodes":[{"content":"PreAllocatedOverlapped","pos":[0,22]}]},{"pos":[21385,21406],"content":"ThreadPoolBoundHandle","needQuote":true,"nodes":[{"content":"ThreadPoolBoundHandle","pos":[0,21]}]},{"pos":[21629,21638],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[21779,21786],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[21876,21877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21924,21925],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22019,22026],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[22116,22117],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22164,22165],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Threading.ThreadPoolBoundHandle\n  commentId: T:System.Threading.ThreadPoolBoundHandle\n  id: ThreadPoolBoundHandle\n  parent: System.Threading\n  children:\n  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)\n  - System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)\n  - System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)\n  - System.Threading.ThreadPoolBoundHandle.Dispose\n  - System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)\n  - System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)\n  - System.Threading.ThreadPoolBoundHandle.Handle\n  langs:\n  - csharp\n  - vb\n  name: ThreadPoolBoundHandle\n  nameWithType: ThreadPoolBoundHandle\n  fullName: System.Threading.ThreadPoolBoundHandle\n  type: Class\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ThreadPoolBoundHandle\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 28\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: 'public sealed class ThreadPoolBoundHandle : IDisposable'\n    content.vb: >-\n      Public NotInheritable Class ThreadPoolBoundHandle\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n- uid: System.Threading.ThreadPoolBoundHandle.Handle\n  commentId: P:System.Threading.ThreadPoolBoundHandle.Handle\n  id: Handle\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: Handle\n  nameWithType: ThreadPoolBoundHandle.Handle\n  fullName: System.Threading.ThreadPoolBoundHandle.Handle\n  type: Property\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Handle\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 31\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: public SafeHandle Handle { get; }\n    content.vb: Public ReadOnly Property Handle As SafeHandle\n    parameters: []\n    return:\n      type: System.Runtime.InteropServices.SafeHandle\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)\n  commentId: M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)\n  id: AllocateNativeOverlapped(System.Threading.IOCompletionCallback,System.Object,System.Object)\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: AllocateNativeOverlapped(IOCompletionCallback, Object, Object)\n  nameWithType: ThreadPoolBoundHandle.AllocateNativeOverlapped(IOCompletionCallback, Object, Object)\n  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.IOCompletionCallback, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AllocateNativeOverlapped\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 32\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public NativeOverlapped*AllocateNativeOverlapped(IOCompletionCallback callback, object state, object pinData)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function AllocateNativeOverlapped(callback As IOCompletionCallback, state As Object, pinData As Object) As NativeOverlapped\n    parameters:\n    - id: callback\n      type: System.Threading.IOCompletionCallback\n    - id: state\n      type: System.Object\n    - id: pinData\n      type: System.Object\n    return:\n      type: System.Threading.NativeOverlapped*\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)\n  commentId: M:System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)\n  id: AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: AllocateNativeOverlapped(PreAllocatedOverlapped)\n  nameWithType: ThreadPoolBoundHandle.AllocateNativeOverlapped(PreAllocatedOverlapped)\n  fullName: System.Threading.ThreadPoolBoundHandle.AllocateNativeOverlapped(System.Threading.PreAllocatedOverlapped)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AllocateNativeOverlapped\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 34\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public NativeOverlapped*AllocateNativeOverlapped(PreAllocatedOverlapped preAllocated)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function AllocateNativeOverlapped(preAllocated As PreAllocatedOverlapped) As NativeOverlapped\n    parameters:\n    - id: preAllocated\n      type: System.Threading.PreAllocatedOverlapped\n    return:\n      type: System.Threading.NativeOverlapped*\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)\n  commentId: M:System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)\n  id: BindHandle(System.Runtime.InteropServices.SafeHandle)\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: BindHandle(SafeHandle)\n  nameWithType: ThreadPoolBoundHandle.BindHandle(SafeHandle)\n  fullName: System.Threading.ThreadPoolBoundHandle.BindHandle(System.Runtime.InteropServices.SafeHandle)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BindHandle\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 36\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: public static ThreadPoolBoundHandle BindHandle(SafeHandle handle)\n    content.vb: Public Shared Function BindHandle(handle As SafeHandle) As ThreadPoolBoundHandle\n    parameters:\n    - id: handle\n      type: System.Runtime.InteropServices.SafeHandle\n    return:\n      type: System.Threading.ThreadPoolBoundHandle\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n- uid: System.Threading.ThreadPoolBoundHandle.Dispose\n  commentId: M:System.Threading.ThreadPoolBoundHandle.Dispose\n  id: Dispose\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  nameWithType: ThreadPoolBoundHandle.Dispose()\n  fullName: System.Threading.ThreadPoolBoundHandle.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 37\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)\n  commentId: M:System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)\n  id: FreeNativeOverlapped(System.Threading.NativeOverlapped*)\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: FreeNativeOverlapped(NativeOverlapped*)\n  nameWithType: ThreadPoolBoundHandle.FreeNativeOverlapped(NativeOverlapped*)\n  fullName: System.Threading.ThreadPoolBoundHandle.FreeNativeOverlapped(System.Threading.NativeOverlapped*)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FreeNativeOverlapped\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 38\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public void FreeNativeOverlapped(NativeOverlapped*overlapped)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub FreeNativeOverlapped(overlapped As NativeOverlapped *)\n    parameters:\n    - id: overlapped\n      type: System.Threading.NativeOverlapped*\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)\n  commentId: M:System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)\n  id: GetNativeOverlappedState(System.Threading.NativeOverlapped*)\n  parent: System.Threading.ThreadPoolBoundHandle\n  langs:\n  - csharp\n  - vb\n  name: GetNativeOverlappedState(NativeOverlapped*)\n  nameWithType: ThreadPoolBoundHandle.GetNativeOverlappedState(NativeOverlapped*)\n  fullName: System.Threading.ThreadPoolBoundHandle.GetNativeOverlappedState(System.Threading.NativeOverlapped*)\n  type: Method\n  source:\n    remote:\n      path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetNativeOverlappedState\n    path: src/System.Threading.Overlapped/ref/System.Threading.Overlapped.cs\n    startLine: 40\n  assemblies:\n  - System.Threading.Overlapped\n  namespace: System.Threading\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static object GetNativeOverlappedState(NativeOverlapped*overlapped)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Function GetNativeOverlappedState(overlapped As NativeOverlapped *) As Object\n    parameters:\n    - id: overlapped\n      type: System.Threading.NativeOverlapped*\n    return:\n      type: System.Object\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\nreferences:\n- uid: System.Threading\n  commentId: N:System.Threading\n  isExternal: false\n  name: System.Threading\n  nameWithType: System.Threading\n  fullName: System.Threading\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System.IDisposable\n  commentId: T:System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  nameWithType: IDisposable\n  fullName: System.IDisposable\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  nameWithType: Object.ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    nameWithType: Object.ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: Object.Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  nameWithType: Object.GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    nameWithType: Object.GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  nameWithType: Object.MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    nameWithType: Object.MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Runtime.InteropServices.SafeHandle\n  commentId: T:System.Runtime.InteropServices.SafeHandle\n  parent: System.Runtime.InteropServices\n  isExternal: false\n  name: SafeHandle\n  nameWithType: SafeHandle\n  fullName: System.Runtime.InteropServices.SafeHandle\n- uid: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n- uid: System.Threading.IOCompletionCallback\n  commentId: T:System.Threading.IOCompletionCallback\n  parent: System.Threading\n  isExternal: false\n  name: IOCompletionCallback\n  nameWithType: IOCompletionCallback\n  fullName: System.Threading.IOCompletionCallback\n- uid: System.Threading.NativeOverlapped*\n  name: NativeOverlapped*\n  nameWithType: NativeOverlapped*\n  fullName: System.Threading.NativeOverlapped*\n  spec.csharp:\n  - uid: System.Threading.NativeOverlapped\n    name: NativeOverlapped\n    nameWithType: NativeOverlapped\n    fullName: System.Threading.NativeOverlapped\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Threading.NativeOverlapped\n    name: NativeOverlapped\n    nameWithType: NativeOverlapped\n    fullName: System.Threading.NativeOverlapped\n  - name: '*'\n    nameWithType: '*'\n    fullName: '*'\n- uid: System.Threading.PreAllocatedOverlapped\n  commentId: T:System.Threading.PreAllocatedOverlapped\n  parent: System.Threading\n  isExternal: false\n  name: PreAllocatedOverlapped\n  nameWithType: PreAllocatedOverlapped\n  fullName: System.Threading.PreAllocatedOverlapped\n- uid: System.Threading.ThreadPoolBoundHandle\n  commentId: T:System.Threading.ThreadPoolBoundHandle\n  parent: System.Threading\n  isExternal: false\n  name: ThreadPoolBoundHandle\n  nameWithType: ThreadPoolBoundHandle\n  fullName: System.Threading.ThreadPoolBoundHandle\n- uid: System.IDisposable.Dispose\n  commentId: M:System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  nameWithType: IDisposable.Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    nameWithType: IDisposable.Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n"}