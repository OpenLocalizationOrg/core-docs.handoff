{"nodes":[{"pos":[1137,1166],"content":"X509BasicConstraintsExtension","needQuote":true,"nodes":[{"content":"X509BasicConstraintsExtension","pos":[0,29]}]},{"pos":[2742,2773],"content":"X509BasicConstraintsExtension()","needQuote":true,"nodes":[{"content":"X509BasicConstraintsExtension()","pos":[0,31]}]},{"pos":[4317,4380],"content":"X509BasicConstraintsExtension(Boolean, Boolean, Int32, Boolean)","needQuote":true,"nodes":[{"content":"X509BasicConstraintsExtension(Boolean, Boolean, Int32, Boolean)","pos":[0,63]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate is a certificate authority (CA) certificate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5995,6128],"source":"\\n<p>\\n<strong>true</strong> if the certificate is a certificate authority (CA) certificate; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate has a restriction on the number of path levels it allows; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6211,6357],"source":"\\n<p>\\n<strong>true</strong> if the certificate has a restriction on the number of path levels it allows; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The number of levels allowed in a certificate's path.&lt;/p&gt;\\n","pos":[6435,6499],"source":"\\n<p>The number of levels allowed in a certificate's path.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6567,6666],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[7337,7391],"content":"X509BasicConstraintsExtension(AsnEncodedData, Boolean)","needQuote":true,"nodes":[{"content":"X509BasicConstraintsExtension(AsnEncodedData, Boolean)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The encoded data to use to create the extension.&lt;/p&gt;\\n","pos":[8786,8845],"source":"\\n<p>The encoded data to use to create the extension.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8913,9012],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9537,9557],"content":"CertificateAuthority","needQuote":true,"nodes":[{"content":"CertificateAuthority","pos":[0,20]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate is a certificate authority (CA) certificate, otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10505,10638],"source":"\\n<p>\\n<strong>true</strong> if the certificate is a certificate authority (CA) certificate, otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11159,11182],"content":"HasPathLengthConstraint","needQuote":true,"nodes":[{"content":"HasPathLengthConstraint","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the certificate has a restriction on the number of path levels it allows, otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12155,12301],"source":"\\n<p>\\n<strong>true</strong> if the certificate has a restriction on the number of path levels it allows, otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The extension cannot be decoded.","pos":[12466,12503],"source":"\\n<p>The extension cannot be decoded."},{"content":"&lt;/p&gt;\\n","pos":[12504,12510],"source":" </p>\\n"},{"pos":[13025,13045],"content":"PathLengthConstraint","needQuote":true,"nodes":[{"content":"PathLengthConstraint","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An integer indicating the number of levels allowed in a certificate's path.&lt;/p&gt;\\n","pos":[13958,14044],"source":"\\n<p>An integer indicating the number of levels allowed in a certificate's path.</p>\\n"},{"content":"\\n&lt;p&gt;The extension cannot be decoded.","pos":[14209,14246],"source":"\\n<p>The extension cannot be decoded."},{"content":"&lt;/p&gt;\\n","pos":[14247,14253],"source":" </p>\\n"},{"pos":[14864,14888],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The encoded data to use to create the extension.&lt;/p&gt;\\n","pos":[16126,16185],"source":"\\n<p>The encoded data to use to create the extension.</p>\\n"},{"pos":[16564,16609],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[16857,16863],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17093,17106],"content":"X509Extension","needQuote":true,"nodes":[{"content":"X509Extension","pos":[0,13]}]},{"pos":[17458,17466],"content":"Critical","needQuote":true,"nodes":[{"content":"Critical","pos":[0,8]}]},{"pos":[17713,17719],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[17851,17858],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[18005,18010],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[18204,18218],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[18429,18457],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[18806,18830],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"pos":[19105,19113],"content":"CopyFrom","needQuote":true,"nodes":[{"content":"CopyFrom","pos":[0,8]}]},{"pos":[19207,19208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19288,19302],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[19392,19393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19554,19562],"content":"CopyFrom","needQuote":true,"nodes":[{"content":"CopyFrom","pos":[0,8]}]},{"pos":[19656,19657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19737,19751],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[19841,19842],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20130,20152],"content":"CryptographicException","needQuote":true,"nodes":[{"content":"CryptographicException","pos":[0,22]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  commentId: T:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  id: X509BasicConstraintsExtension\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint\n  - System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint\n  langs:\n  - csharp\n  - vb\n  name: X509BasicConstraintsExtension\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509BasicConstraintsExtension\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Defines the constraints set on a certificate. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: 'public sealed class X509BasicConstraintsExtension : X509Extension'\n    content.vb: >-\n      Public NotInheritable Class X509BasicConstraintsExtension\n          Inherits X509Extension\n  inheritance:\n  - System.Object\n  - System.Security.Cryptography.X509Certificates.X509Extension\n  inheritedMembers:\n  - System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: X509BasicConstraintsExtension\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: X509BasicConstraintsExtension()\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.X509BasicConstraintsExtension()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509BasicConstraintsExtension()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509BasicConstraintsExtension.X509BasicConstraintsExtension()\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)\n  id: '#ctor(System.Boolean,System.Boolean,System.Int32,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: X509BasicConstraintsExtension(Boolean, Boolean, Int32, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.X509BasicConstraintsExtension(System.Boolean, System.Boolean, System.Int32, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 88\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. Parameters specify a value that indicates whether a certificate is a certificate authority (CA) certificate, a value that indicates whether the certificate has a restriction on the number of path levels it allows, the number of levels allowed in a certificate's path, and a value that indicates whether the extension is critical.  </p>\\n\"\n  syntax:\n    content: public X509BasicConstraintsExtension(bool certificateAuthority, bool hasPathLengthConstraint, int pathLengthConstraint, bool critical)\n    content.vb: Public Sub New(certificateAuthority As Boolean, hasPathLengthConstraint As Boolean, pathLengthConstraint As Integer, critical As Boolean)\n    parameters:\n    - id: certificateAuthority\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate is a certificate authority (CA) certificate; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: hasPathLengthConstraint\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate has a restriction on the number of path levels it allows; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: pathLengthConstraint\n      type: System.Int32\n      description: \"\\n<p>The number of levels allowed in a certificate's path.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509BasicConstraintsExtension.X509BasicConstraintsExtension(Boolean, Boolean, Int32, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: X509BasicConstraintsExtension(AsnEncodedData, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.X509BasicConstraintsExtension(System.Security.Cryptography.AsnEncodedData, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 89\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and a value that identifies whether the extension is critical. </p>\\n\"\n  syntax:\n    content: public X509BasicConstraintsExtension(AsnEncodedData encodedBasicConstraints, bool critical)\n    content.vb: Public Sub New(encodedBasicConstraints As AsnEncodedData, critical As Boolean)\n    parameters:\n    - id: encodedBasicConstraints\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The encoded data to use to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509BasicConstraintsExtension.X509BasicConstraintsExtension(AsnEncodedData, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority\n  commentId: P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority\n  id: CertificateAuthority\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: CertificateAuthority\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CertificateAuthority\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CertificateAuthority\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 90\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a value indicating whether a certificate is a certificate authority (CA) certificate.</p>\\n\"\n  syntax:\n    content: public bool CertificateAuthority { get; }\n    content.vb: Public ReadOnly Property CertificateAuthority As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate is a certificate authority (CA) certificate, otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509BasicConstraintsExtension.CertificateAuthority\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint\n  commentId: P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint\n  id: HasPathLengthConstraint\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: HasPathLengthConstraint\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.HasPathLengthConstraint\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HasPathLengthConstraint\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 91\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a value indicating whether a certificate has a restriction on the number of path levels it allows.</p>\\n\"\n  syntax:\n    content: public bool HasPathLengthConstraint { get; }\n    content.vb: Public ReadOnly Property HasPathLengthConstraint As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the certificate has a restriction on the number of path levels it allows, otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The extension cannot be decoded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509BasicConstraintsExtension.HasPathLengthConstraint\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint\n  commentId: P:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint\n  id: PathLengthConstraint\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: PathLengthConstraint\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.PathLengthConstraint\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PathLengthConstraint\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 92\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets the number of levels allowed in a certificate's path.</p>\\n\"\n  syntax:\n    content: public int PathLengthConstraint { get; }\n    content.vb: Public ReadOnly Property PathLengthConstraint As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer indicating the number of levels allowed in a certificate's path.</p>\\n\"\n  exceptions:\n  - type: System.Security.Cryptography.CryptographicException\n    commentId: T:System.Security.Cryptography.CryptographicException\n    description: \"\\n<p>The extension cannot be decoded. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: X509BasicConstraintsExtension.PathLengthConstraint\n- uid: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  id: CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\n  langs:\n  - csharp\n  - vb\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyFrom\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 93\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509BasicConstraintsExtension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using an <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override void CopyFrom(AsnEncodedData asnEncodedData)\n    content.vb: Public Overrides Sub CopyFrom(asnEncodedData As AsnEncodedData)\n    parameters:\n    - id: asnEncodedData\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The encoded data to use to create the extension.</p>\\n\"\n  overridden: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509BasicConstraintsExtension.CopyFrom(AsnEncodedData)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.Cryptography.X509Certificates.X509Extension\n  parent: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: X509Extension\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Extension\n  nameWithType: X509Extension\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  isExternal: false\n  name: Critical\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  nameWithType: X509Extension.Critical\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.Cryptography.AsnEncodedData\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  nameWithType: AsnEncodedData\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  isExternal: true\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  spec.csharp:\n  - uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n    name: CopyFrom\n    fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.AsnEncodedData\n    name: AsnEncodedData\n    fullName: System.Security.Cryptography.AsnEncodedData\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n    name: CopyFrom\n    fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.AsnEncodedData\n    name: AsnEncodedData\n    fullName: System.Security.Cryptography.AsnEncodedData\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  nameWithType: X509Extension.CopyFrom(AsnEncodedData)\n- uid: System.Security.Cryptography.CryptographicException\n  isExternal: false\n  name: CryptographicException\n  fullName: System.Security.Cryptography.CryptographicException\n  commentId: T:System.Security.Cryptography.CryptographicException\n  nameWithType: CryptographicException\n"}