{"nodes":[{"pos":[4588,4601],"content":"StringBuilder","needQuote":true,"nodes":[{"content":"StringBuilder","pos":[0,13]}]},{"pos":[6013,6028],"content":"StringBuilder()","needQuote":true,"nodes":[{"content":"StringBuilder()","pos":[0,15]}]},{"pos":[6945,6965],"content":"StringBuilder(Int32)","needQuote":true,"nodes":[{"content":"StringBuilder(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The suggested starting size of this instance.","pos":[7719,7769],"source":"\\n<p>The suggested starting size of this instance."},{"content":"&lt;/p&gt;\\n","pos":[7770,7776],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[7907,7950],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[7951,7957],"source":" </p>\\n"},{"pos":[8428,8455],"content":"StringBuilder(Int32, Int32)","needQuote":true,"nodes":[{"content":"StringBuilder(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The maximum number of characters the current string can contain.","pos":[9512,9581],"source":"\\n<p>The maximum number of characters the current string can contain."},{"content":"&lt;/p&gt;\\n","pos":[9582,9588],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maxCapacity&lt;/em&gt; is less than one, &lt;em&gt;capacity&lt;/em&gt; is less than zero, or &lt;em&gt;capacity&lt;/em&gt; is greater than &lt;em&gt;maxCapacity&lt;/em&gt;.","pos":[9719,9860],"source":"\\n<p>\\n<em>maxCapacity</em> is less than one, <em>capacity</em> is less than zero, or <em>capacity</em> is greater than <em>maxCapacity</em>."},{"content":"&lt;/p&gt;\\n","pos":[9861,9867],"source":" </p>\\n"},{"pos":[10412,10433],"content":"StringBuilder(String)","needQuote":true,"nodes":[{"content":"StringBuilder(String)","pos":[0,21]}]},{"pos":[11887,11915],"content":"StringBuilder(String, Int32)","needQuote":true,"nodes":[{"content":"StringBuilder(String, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[13395,13438],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[13439,13445],"source":" </p>\\n"},{"pos":[14005,14047],"content":"StringBuilder(String, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"StringBuilder(String, Int32, Int32, Int32)","pos":[0,42]}]},{"content":"\\n&lt;p&gt;The position within &lt;em&gt;value&lt;/em&gt; where the substring begins.","pos":[15472,15539],"source":"\\n<p>The position within <em>value</em> where the substring begins."},{"content":"&lt;/p&gt;\\n","pos":[15540,15546],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the substring.","pos":[15610,15657],"source":"\\n<p>The number of characters in the substring."},{"content":"&lt;/p&gt;\\n","pos":[15658,15664],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; plus &lt;em&gt;length&lt;/em&gt; is not a position within &lt;em&gt;value&lt;/em&gt;.","pos":[15994,16143],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>length</em> is not a position within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[16144,16150],"source":" </p>\\n"},{"pos":[16569,16577],"content":"Capacity","needQuote":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The value specified for a set operation is less than the current length of this instance.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The value specified for a set operation is greater than the maximum capacity.","pos":[17735,17929],"source":"\\n<p>The value specified for a set operation is less than the current length of this instance.</p>\\n<p>-or- </p>\\n<p>The value specified for a set operation is greater than the maximum capacity."},{"content":"&lt;/p&gt;\\n","pos":[17930,17936],"source":" </p>\\n"},{"pos":[18262,18274],"content":"Chars[Int32]","needQuote":true,"nodes":[{"content":"Chars[Int32]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The position of the character.","pos":[19038,19073],"source":"\\n<p>The position of the character."},{"content":"&lt;/p&gt;\\n","pos":[19074,19080],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Unicode character at position &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19138,19198],"source":"\\n<p>The Unicode character at position <em>index</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the bounds of this instance while setting a character.","pos":[19329,19416],"source":"\\n<p>\\n<em>index</em> is outside the bounds of this instance while setting a character."},{"content":"&lt;/p&gt;\\n","pos":[19417,19423],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the bounds of this instance while getting a character.","pos":[19534,19621],"source":"\\n<p>\\n<em>index</em> is outside the bounds of this instance while getting a character."},{"content":"&lt;/p&gt;\\n","pos":[19622,19628],"source":" </p>\\n"},{"pos":[20337,20343],"content":"Length","needQuote":true,"nodes":[{"content":"Length","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The length of this instance.&lt;/p&gt;\\n","pos":[21043,21082],"source":"\\n<p>The length of this instance.</p>\\n"},{"pos":[21697,21708],"content":"MaxCapacity","needQuote":true,"nodes":[{"content":"MaxCapacity","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The maximum number of characters this instance can hold.&lt;/p&gt;\\n","pos":[22343,22410],"source":"\\n<p>The maximum number of characters this instance can hold.</p>\\n"},{"pos":[22753,22768],"content":"Append(Boolean)","needQuote":true,"nodes":[{"content":"Append(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The Boolean value to append.","pos":[23465,23498],"source":"\\n<p>The Boolean value to append."},{"content":"&lt;/p&gt;\\n","pos":[23499,23505],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[23577,23658],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[24334,24346],"content":"Append(Byte)","needQuote":true,"nodes":[{"content":"Append(Byte)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[25043,25068],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[25069,25075],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[25147,25228],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[25895,25907],"content":"Append(Char)","needQuote":true,"nodes":[{"content":"Append(Char)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The UTF-16-encoded code unit to append.","pos":[26660,26704],"source":"\\n<p>The UTF-16-encoded code unit to append."},{"content":"&lt;/p&gt;\\n","pos":[26705,26711],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[26783,26864],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[27573,27593],"content":"Append(Char*, Int32)","needQuote":true,"nodes":[{"content":"Append(Char*, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A pointer to an array of characters.","pos":[28477,28518],"source":"\\n<p>A pointer to an array of characters."},{"content":"&lt;/p&gt;\\n","pos":[28519,28525],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in the array.","pos":[28593,28636],"source":"\\n<p>The number of characters in the array."},{"content":"&lt;/p&gt;\\n","pos":[28637,28643],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.","pos":[28715,28790],"source":"\\n<p>A reference to this instance after the append operation has completed."},{"content":"&lt;/p&gt;\\n","pos":[28791,28797],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is a null pointer.","pos":[29258,29298],"source":"\\n<p>\\n<em>value</em> is a null pointer."},{"content":"&lt;/p&gt;\\n","pos":[29299,29305],"source":" </p>\\n"},{"pos":[29969,29988],"content":"Append(Char, Int32)","needQuote":true,"nodes":[{"content":"Append(Char, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The character to append.","pos":[30757,30786],"source":"\\n<p>The character to append."},{"content":"&lt;/p&gt;\\n","pos":[30787,30793],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of times to append &lt;em&gt;value&lt;/em&gt;.","pos":[30862,30912],"source":"\\n<p>The number of times to append <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[30913,30919],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[30991,31072],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;Out of memory.&lt;/p&gt;\\n","pos":[31530,31555],"source":"\\n<p>Out of memory.</p>\\n"},{"pos":[31944,31958],"content":"Append(Char[])","needQuote":true,"nodes":[{"content":"Append(Char[])","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The array of characters to append.","pos":[32750,32789],"source":"\\n<p>The array of characters to append."},{"content":"&lt;/p&gt;\\n","pos":[32790,32796],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[32868,32949],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[33777,33805],"content":"Append(Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Append(Char[], Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A character array.","pos":[34700,34723],"source":"\\n<p>A character array."},{"content":"&lt;/p&gt;\\n","pos":[34724,34730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position in &lt;em&gt;value&lt;/em&gt;.","pos":[34798,34843],"source":"\\n<p>The starting position in <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[34844,34850],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to append.","pos":[34917,34957],"source":"\\n<p>The number of characters to append."},{"content":"&lt;/p&gt;\\n","pos":[34958,34964],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[35036,35117],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; are not zero.","pos":[35236,35344],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero."},{"content":"&lt;/p&gt;\\n","pos":[35345,35351],"source":" </p>\\n"},{"pos":[36458,36473],"content":"Append(Decimal)","needQuote":true,"nodes":[{"content":"Append(Decimal)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[37174,37199],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[37200,37206],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[37278,37359],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[38041,38055],"content":"Append(Double)","needQuote":true,"nodes":[{"content":"Append(Double)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[38776,38801],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[38802,38808],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[38880,38961],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[39637,39650],"content":"Append(Int16)","needQuote":true,"nodes":[{"content":"Append(Int16)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[40350,40375],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[40376,40382],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[40454,40535],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[41208,41221],"content":"Append(Int32)","needQuote":true,"nodes":[{"content":"Append(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[41921,41946],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[41947,41953],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[42025,42106],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[42779,42792],"content":"Append(Int64)","needQuote":true,"nodes":[{"content":"Append(Int64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[43490,43515],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[43516,43522],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[43594,43675],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[44351,44365],"content":"Append(Object)","needQuote":true,"nodes":[{"content":"Append(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to append.","pos":[45054,45080],"source":"\\n<p>The object to append."},{"content":"&lt;/p&gt;\\n","pos":[45081,45087],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[45159,45240],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[45916,45929],"content":"Append(SByte)","needQuote":true,"nodes":[{"content":"Append(SByte)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[46704,46729],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[46730,46736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[46808,46889],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[47740,47754],"content":"Append(Single)","needQuote":true,"nodes":[{"content":"Append(Single)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[48474,48499],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[48500,48506],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[48578,48659],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[49338,49352],"content":"Append(String)","needQuote":true,"nodes":[{"content":"Append(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The string to append.","pos":[50102,50128],"source":"\\n<p>The string to append."},{"content":"&lt;/p&gt;\\n","pos":[50129,50135],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[50207,50288],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[51045,51073],"content":"Append(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Append(String, Int32, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The string that contains the substring to append.","pos":[51920,51974],"source":"\\n<p>The string that contains the substring to append."},{"content":"&lt;/p&gt;\\n","pos":[51975,51981],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting position of the substring within &lt;em&gt;value&lt;/em&gt;.","pos":[52049,52115],"source":"\\n<p>The starting position of the substring within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[52116,52122],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters in &lt;em&gt;value&lt;/em&gt; to append.","pos":[52185,52243],"source":"\\n<p>The number of characters in <em>value</em> to append."},{"content":"&lt;/p&gt;\\n","pos":[52244,52250],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[52322,52403],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; are not zero.","pos":[52522,52626],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>count</em> are not zero."},{"content":"&lt;/p&gt;\\n","pos":[52627,52633],"source":" </p>\\n"},{"pos":[53534,53548],"content":"Append(UInt16)","needQuote":true,"nodes":[{"content":"Append(UInt16)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[54330,54355],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[54356,54362],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[54434,54515],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[55369,55383],"content":"Append(UInt32)","needQuote":true,"nodes":[{"content":"Append(UInt32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[56165,56190],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[56191,56197],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[56269,56350],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[57204,57218],"content":"Append(UInt64)","needQuote":true,"nodes":[{"content":"Append(UInt64)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The value to append.","pos":[57998,58023],"source":"\\n<p>The value to append."},{"content":"&lt;/p&gt;\\n","pos":[58024,58030],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[58102,58183],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[59166,59211],"content":"AppendFormat(IFormatProvider, String, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(IFormatProvider, String, Object)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[60232,60301],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[60302,60308],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[60373,60418],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[60419,60425],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to format.","pos":[60488,60514],"source":"\\n<p>The object to format."},{"content":"&lt;/p&gt;\\n","pos":[60515,60521],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.","pos":[60593,60668],"source":"\\n<p>A reference to this instance after the append operation has completed."},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of &lt;em&gt;format&lt;/em&gt; in which any format specification is replaced by the string representation of &lt;em&gt;arg0&lt;/em&gt;.","pos":[60669,60894],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> in which any format specification is replaced by the string representation of <em>arg0</em>."},{"content":"&lt;/p&gt;\\n","pos":[60895,60901],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[61020,61068],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[61069,61075],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[61168,61202],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to one (1).","pos":[61203,61311],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to one (1)."},{"content":"&lt;/p&gt;\\n","pos":[61312,61318],"source":" </p>\\n"},{"pos":[62116,62169],"content":"AppendFormat(IFormatProvider, String, Object, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(IFormatProvider, String, Object, Object)","pos":[0,53]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[63239,63308],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[63309,63315],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[63380,63425],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[63426,63432],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[63495,63527],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[63528,63534],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[63597,63630],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[63631,63637],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.","pos":[63709,63784],"source":"\\n<p>A reference to this instance after the append operation has completed."},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of &lt;em&gt;format&lt;/em&gt; where any format specification is replaced by the string representation of the corresponding object argument.","pos":[63785,64027],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument."},{"content":"&lt;/p&gt;\\n","pos":[64028,64034],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[64153,64201],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[64202,64208],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[64301,64335],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to 2 (two).","pos":[64336,64444],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2 (two)."},{"content":"&lt;/p&gt;\\n","pos":[64445,64451],"source":" </p>\\n"},{"pos":[65299,65360],"content":"AppendFormat(IFormatProvider, String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(IFormatProvider, String, Object, Object, Object)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[66476,66545],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[66546,66552],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[66617,66662],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[66663,66669],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[66732,66764],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[66765,66771],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[66834,66867],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[66868,66874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format.","pos":[66937,66969],"source":"\\n<p>The third object to format."},{"content":"&lt;/p&gt;\\n","pos":[66970,66976],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.","pos":[67048,67123],"source":"\\n<p>A reference to this instance after the append operation has completed."},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of &lt;em&gt;format&lt;/em&gt; where any format specification is replaced by the string representation of the corresponding object argument.","pos":[67124,67366],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument."},{"content":"&lt;/p&gt;\\n","pos":[67367,67373],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[67492,67540],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[67541,67547],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[67640,67674],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to 3 (three).","pos":[67675,67785],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3 (three)."},{"content":"&lt;/p&gt;\\n","pos":[67786,67792],"source":" </p>\\n"},{"pos":[68570,68617],"content":"AppendFormat(IFormatProvider, String, Object[])","needQuote":true,"nodes":[{"content":"AppendFormat(IFormatProvider, String, Object[])","pos":[0,47]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.","pos":[69689,69758],"source":"\\n<p>An object that supplies culture-specific formatting information."},{"content":"&lt;/p&gt;\\n","pos":[69759,69765],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[69830,69875],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[69876,69882],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of objects to format.&lt;/p&gt;\\n","pos":[69947,69988],"source":"\\n<p>An array of objects to format.</p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.","pos":[70060,70135],"source":"\\n<p>A reference to this instance after the append operation has completed."},{"content":"After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of &lt;em&gt;format&lt;/em&gt; where any format specification is replaced by the string representation of the corresponding object argument.","pos":[70136,70378],"source":" After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument."},{"content":"&lt;/p&gt;\\n","pos":[70379,70385],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70504,70552],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70553,70559],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[70652,70686],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the length of the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[70687,70831],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\\n"},{"pos":[71770,71798],"content":"AppendFormat(String, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(String, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[72694,72739],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[72740,72746],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An object to format.","pos":[72809,72834],"source":"\\n<p>An object to format."},{"content":"&lt;/p&gt;\\n","pos":[72835,72841],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;format&lt;/em&gt; appended.","pos":[72913,72977],"source":"\\n<p>A reference to this instance with <em>format</em> appended."},{"content":"Each format item in &lt;em&gt;format&lt;/em&gt; is replaced by the string representation of &lt;em&gt;arg0&lt;/em&gt;.&lt;/p&gt;\\n","pos":[72978,73078],"source":" Each format item in <em>format</em> is replaced by the string representation of <em>arg0</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[73197,73245],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[73246,73252],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[73345,73379],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to 1.&lt;/p&gt;\\n","pos":[73380,73488],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 1.</p>\\n"},{"pos":[74200,74236],"content":"AppendFormat(String, Object, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(String, Object, Object)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[75182,75227],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[75228,75234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[75297,75329],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[75330,75336],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[75399,75432],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[75433,75439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;format&lt;/em&gt; appended.","pos":[75511,75575],"source":"\\n<p>A reference to this instance with <em>format</em> appended."},{"content":"Each format item in &lt;em&gt;format&lt;/em&gt; is replaced by the string representation of the corresponding object argument.&lt;/p&gt;\\n","pos":[75576,75696],"source":" Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[75815,75863],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[75864,75870],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to 2.","pos":[75963,76099],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2."},{"content":"&lt;/p&gt;\\n","pos":[76100,76106],"source":" </p>\\n"},{"pos":[76868,76912],"content":"AppendFormat(String, Object, Object, Object)","needQuote":true,"nodes":[{"content":"AppendFormat(String, Object, Object, Object)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[77904,77949],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[77950,77956],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The first object to format.","pos":[78019,78051],"source":"\\n<p>The first object to format."},{"content":"&lt;/p&gt;\\n","pos":[78052,78058],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to format.","pos":[78121,78154],"source":"\\n<p>The second object to format."},{"content":"&lt;/p&gt;\\n","pos":[78155,78161],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The third object to format.","pos":[78224,78256],"source":"\\n<p>The third object to format."},{"content":"&lt;/p&gt;\\n","pos":[78257,78263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;format&lt;/em&gt; appended.","pos":[78335,78399],"source":"\\n<p>A reference to this instance with <em>format</em> appended."},{"content":"Each format item in &lt;em&gt;format&lt;/em&gt; is replaced by the string representation of the corresponding object argument.&lt;/p&gt;\\n","pos":[78400,78520],"source":" Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[78639,78687],"source":"\\n<p>\\n<em>format</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[78688,78694],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to 3.&lt;/p&gt;\\n","pos":[78787,78929],"source":"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3.</p>\\n"},{"pos":[79621,79651],"content":"AppendFormat(String, Object[])","needQuote":true,"nodes":[{"content":"AppendFormat(String, Object[])","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A composite format string (see Remarks).","pos":[80599,80644],"source":"\\n<p>A composite format string (see Remarks)."},{"content":"&lt;/p&gt;\\n","pos":[80645,80651],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of objects to format.","pos":[80716,80751],"source":"\\n<p>An array of objects to format."},{"content":"&lt;/p&gt;\\n","pos":[80752,80758],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;format&lt;/em&gt; appended.","pos":[80830,80894],"source":"\\n<p>A reference to this instance with <em>format</em> appended."},{"content":"Each format item in &lt;em&gt;format&lt;/em&gt; is replaced by the string representation of the corresponding object argument.&lt;/p&gt;\\n","pos":[80895,81015],"source":" Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; or &lt;em&gt;args&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[81134,81199],"source":"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[81200,81206],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is invalid.","pos":[81299,81333],"source":"\\n<p>\\n<em>format</em> is invalid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The index of a format item is less than 0 (zero), or greater than or equal to the length of the &lt;em&gt;args&lt;/em&gt; array.&lt;/p&gt;\\n","pos":[81334,81478],"source":" </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\\n"},{"pos":[82249,82261],"content":"AppendLine()","needQuote":true,"nodes":[{"content":"AppendLine()","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[83070,83151],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[83840,83858],"content":"AppendLine(String)","needQuote":true,"nodes":[{"content":"AppendLine(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The string to append.","pos":[84760,84786],"source":"\\n<p>The string to append."},{"content":"&lt;/p&gt;\\n","pos":[84787,84793],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the append operation has completed.&lt;/p&gt;\\n","pos":[84865,84946],"source":"\\n<p>A reference to this instance after the append operation has completed.</p>\\n"},{"pos":[85581,85588],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[86849,86884],"content":"CopyTo(Int32, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Int32, Char[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The starting position in this instance where characters will be copied from.","pos":[87963,88044],"source":"\\n<p>The starting position in this instance where characters will be copied from."},{"content":"The index is zero-based.&lt;/p&gt;\\n","pos":[88045,88075],"source":" The index is zero-based.</p>\\n"},{"content":"\\n&lt;p&gt;The array where characters will be copied.&lt;/p&gt;\\n","pos":[88145,88198],"source":"\\n<p>The array where characters will be copied.</p>\\n"},{"content":"\\n&lt;p&gt;The starting position in &lt;em&gt;destination&lt;/em&gt; where characters will be copied.","pos":[88272,88355],"source":"\\n<p>The starting position in <em>destination</em> where characters will be copied."},{"content":"The index is zero-based.&lt;/p&gt;\\n","pos":[88356,88386],"source":" The index is zero-based.</p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to be copied.&lt;/p&gt;\\n","pos":[88449,88498],"source":"\\n<p>The number of characters to be copied.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;destination&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[88617,88676],"source":"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt;, &lt;em&gt;destinationIndex&lt;/em&gt;, or &lt;em&gt;count&lt;/em&gt;, is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt; is greater than the length of this instance.&lt;/p&gt;\\n","pos":[88793,88981],"source":"\\n<p>\\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em>, is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>sourceIndex</em> is greater than the length of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;sourceIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; is greater than the length of this instance.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;destinationIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; is greater than the length of &lt;em&gt;destination&lt;/em&gt;.&lt;/p&gt;\\n","pos":[89078,89291],"source":"\\n<p>\\n<em>sourceIndex</em> + <em>count</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> + <em>count</em> is greater than the length of <em>destination</em>.</p>\\n"},{"pos":[89876,89897],"content":"EnsureCapacity(Int32)","needQuote":true,"nodes":[{"content":"EnsureCapacity(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The minimum capacity to ensure.","pos":[90698,90734],"source":"\\n<p>The minimum capacity to ensure."},{"content":"&lt;/p&gt;\\n","pos":[90735,90741],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new capacity of this instance.&lt;/p&gt;\\n","pos":[90800,90845],"source":"\\n<p>The new capacity of this instance.</p>\\n"},{"pos":[91562,91583],"content":"Equals(StringBuilder)","needQuote":true,"nodes":[{"content":"Equals(StringBuilder)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[92294,92365],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[92366,92372],"source":" </p>\\n"},{"pos":[93131,93153],"content":"Insert(Int32, Boolean)","needQuote":true,"nodes":[{"content":"Insert(Int32, Boolean)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[93920,93978],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[93979,93985],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[94050,94075],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[94076,94082],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[94154,94235],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.&lt;/p&gt;\\n","pos":[94366,94456],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance.</p>\\n"},{"pos":[95149,95168],"content":"Insert(Int32, Byte)","needQuote":true,"nodes":[{"content":"Insert(Int32, Byte)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[95948,96006],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[96007,96013],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[96075,96100],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[96101,96107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[96179,96260],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[96391,96475],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[96476,96482],"source":" </p>\\n"},{"pos":[97166,97185],"content":"Insert(Int32, Char)","needQuote":true,"nodes":[{"content":"Insert(Int32, Char)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[98038,98096],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[98097,98103],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[98165,98190],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[98191,98197],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[98269,98350],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"pos":[99171,99192],"content":"Insert(Int32, Char[])","needQuote":true,"nodes":[{"content":"Insert(Int32, Char[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[99983,100041],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[100042,100048],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to insert.","pos":[100112,100147],"source":"\\n<p>The character array to insert."},{"content":"&lt;/p&gt;\\n","pos":[100148,100154],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[100226,100307],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"pos":[101311,101346],"content":"Insert(Int32, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"Insert(Int32, Char[], Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[102322,102380],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[102381,102387],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A character array.","pos":[102451,102474],"source":"\\n<p>A character array."},{"content":"&lt;/p&gt;\\n","pos":[102475,102481],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The starting index within &lt;em&gt;value&lt;/em&gt;.","pos":[102549,102595],"source":"\\n<p>The starting index within <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[102596,102602],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to insert.","pos":[102669,102709],"source":"\\n<p>The number of characters to insert."},{"content":"&lt;/p&gt;\\n","pos":[102710,102716],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[102788,102869],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; are not zero.","pos":[102988,103096],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero."},{"content":"&lt;/p&gt;\\n","pos":[103097,103103],"source":" </p>\\n"},{"pos":[104281,104303],"content":"Insert(Int32, Decimal)","needQuote":true,"nodes":[{"content":"Insert(Int32, Decimal)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[105074,105132],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[105133,105139],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[105204,105229],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[105230,105236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[105308,105389],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[105520,105604],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[105605,105611],"source":" </p>\\n"},{"pos":[106310,106331],"content":"Insert(Int32, Double)","needQuote":true,"nodes":[{"content":"Insert(Int32, Double)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[107123,107181],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[107182,107188],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[107252,107277],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[107278,107284],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[107356,107437],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[107568,107652],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[107653,107659],"source":" </p>\\n"},{"pos":[108352,108372],"content":"Insert(Int32, Int16)","needQuote":true,"nodes":[{"content":"Insert(Int32, Int16)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[109154,109212],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[109213,109219],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[109282,109307],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[109308,109314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[109386,109467],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[109598,109682],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[109683,109689],"source":" </p>\\n"},{"pos":[110379,110399],"content":"Insert(Int32, Int32)","needQuote":true,"nodes":[{"content":"Insert(Int32, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[111181,111239],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[111240,111246],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[111309,111334],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[111335,111341],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[111413,111494],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[111625,111709],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[111710,111716],"source":" </p>\\n"},{"pos":[112406,112426],"content":"Insert(Int32, Int64)","needQuote":true,"nodes":[{"content":"Insert(Int32, Int64)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[113196,113254],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[113255,113261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[113324,113349],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[113350,113356],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[113428,113509],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[113640,113724],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[113725,113731],"source":" </p>\\n"},{"pos":[114424,114445],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[115206,115264],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[115265,115271],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The object to insert, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[115335,115387],"source":"\\n<p>The object to insert, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[115388,115394],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[115466,115547],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[115678,115762],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[115763,115769],"source":" </p>\\n"},{"pos":[116462,116482],"content":"Insert(Int32, SByte)","needQuote":true,"nodes":[{"content":"Insert(Int32, SByte)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[117339,117397],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[117398,117404],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[117467,117492],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[117493,117499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[117571,117652],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[117783,117867],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[117868,117874],"source":" </p>\\n"},{"pos":[118742,118763],"content":"Insert(Int32, Single)","needQuote":true,"nodes":[{"content":"Insert(Int32, Single)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[119554,119612],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[119613,119619],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[119683,119708],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[119709,119715],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[119787,119868],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[119999,120083],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[120084,120090],"source":" </p>\\n"},{"pos":[120786,120807],"content":"Insert(Int32, String)","needQuote":true,"nodes":[{"content":"Insert(Int32, String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[121616,121674],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[121675,121681],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to insert.","pos":[121745,121771],"source":"\\n<p>The string to insert."},{"content":"&lt;/p&gt;\\n","pos":[121772,121778],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[121850,121931],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"pos":[122916,122944],"content":"Insert(Int32, String, Int32)","needQuote":true,"nodes":[{"content":"Insert(Int32, String, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[123827,123885],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[123886,123892],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string to insert.","pos":[123956,123982],"source":"\\n<p>The string to insert."},{"content":"&lt;/p&gt;\\n","pos":[123983,123989],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of times to insert &lt;em&gt;value&lt;/em&gt;.","pos":[124052,124102],"source":"\\n<p>The number of times to insert <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[124103,124109],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after insertion has completed.&lt;/p&gt;\\n","pos":[124181,124251],"source":"\\n<p>A reference to this instance after insertion has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the current length of this instance.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[124382,124532],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the current length of this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[124533,124539],"source":" </p>\\n"},{"pos":[125375,125396],"content":"Insert(Int32, UInt16)","needQuote":true,"nodes":[{"content":"Insert(Int32, UInt16)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[126249,126307],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[126308,126314],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[126378,126403],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[126404,126410],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[126482,126563],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[126694,126778],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[126779,126785],"source":" </p>\\n"},{"pos":[127656,127677],"content":"Insert(Int32, UInt32)","needQuote":true,"nodes":[{"content":"Insert(Int32, UInt32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[128530,128588],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[128589,128595],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[128659,128684],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[128685,128691],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[128763,128844],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[128975,129059],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[129060,129066],"source":" </p>\\n"},{"pos":[129937,129958],"content":"Insert(Int32, UInt64)","needQuote":true,"nodes":[{"content":"Insert(Int32, UInt64)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The position in this instance where insertion begins.","pos":[130809,130867],"source":"\\n<p>The position in this instance where insertion begins."},{"content":"&lt;/p&gt;\\n","pos":[130868,130874],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value to insert.","pos":[130938,130963],"source":"\\n<p>The value to insert."},{"content":"&lt;/p&gt;\\n","pos":[130964,130970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the insert operation has completed.&lt;/p&gt;\\n","pos":[131042,131123],"source":"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero or greater than the length of this instance.","pos":[131254,131338],"source":"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[131339,131345],"source":" </p>\\n"},{"pos":[132213,132233],"content":"Remove(Int32, Int32)","needQuote":true,"nodes":[{"content":"Remove(Int32, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based position in this instance where removal begins.","pos":[132966,133033],"source":"\\n<p>The zero-based position in this instance where removal begins."},{"content":"&lt;/p&gt;\\n","pos":[133034,133040],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to remove.","pos":[133104,133144],"source":"\\n<p>The number of characters to remove."},{"content":"&lt;/p&gt;\\n","pos":[133145,133151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance after the excise operation has completed.&lt;/p&gt;\\n","pos":[133223,133304],"source":"\\n<p>A reference to this instance after the excise operation has completed.</p>\\n"},{"content":"\\n&lt;p&gt;If &lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero, or &lt;em&gt;startIndex&lt;/em&gt; + &lt;em&gt;length&lt;/em&gt; is greater than the length of this instance.","pos":[133435,133586],"source":"\\n<p>If <em>startIndex</em> or <em>length</em> is less than zero, or <em>startIndex</em> + <em>length</em> is greater than the length of this instance."},{"content":"&lt;/p&gt;\\n","pos":[133587,133593],"source":" </p>\\n"},{"pos":[134118,134137],"content":"Replace(Char, Char)","needQuote":true,"nodes":[{"content":"Replace(Char, Char)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The character to replace.","pos":[134900,134930],"source":"\\n<p>The character to replace."},{"content":"&lt;/p&gt;\\n","pos":[134931,134937],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character that replaces &lt;em&gt;oldChar&lt;/em&gt;.","pos":[135001,135051],"source":"\\n<p>The character that replaces <em>oldChar</em>."},{"content":"&lt;/p&gt;\\n","pos":[135052,135058],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;oldChar&lt;/em&gt; replaced by &lt;em&gt;newChar&lt;/em&gt;.&lt;/p&gt;\\n","pos":[135130,135221],"source":"\\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em>.</p>\\n"},{"pos":[135659,135692],"content":"Replace(Char, Char, Int32, Int32)","needQuote":true,"nodes":[{"content":"Replace(Char, Char, Int32, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The character to replace.","pos":[136572,136602],"source":"\\n<p>The character to replace."},{"content":"&lt;/p&gt;\\n","pos":[136603,136609],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character that replaces &lt;em&gt;oldChar&lt;/em&gt;.","pos":[136673,136723],"source":"\\n<p>The character that replaces <em>oldChar</em>."},{"content":"&lt;/p&gt;\\n","pos":[136724,136730],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position in this instance where the substring begins.","pos":[136798,136860],"source":"\\n<p>The position in this instance where the substring begins."},{"content":"&lt;/p&gt;\\n","pos":[136861,136867],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the substring.","pos":[136930,136963],"source":"\\n<p>The length of the substring."},{"content":"&lt;/p&gt;\\n","pos":[136964,136970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with &lt;em&gt;oldChar&lt;/em&gt; replaced by &lt;em&gt;newChar&lt;/em&gt; in the range from &lt;em&gt;startIndex&lt;/em&gt; to &lt;em&gt;startIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; -1.&lt;/p&gt;\\n","pos":[137042,137214],"source":"\\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> -1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; is greater than the length of the value of this instance.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.","pos":[137345,137527],"source":"\\n<p>\\n<em>startIndex</em> + <em>count</em> is greater than the length of the value of this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> or <em>count</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[137528,137534],"source":" </p>\\n"},{"pos":[137920,137943],"content":"Replace(String, String)","needQuote":true,"nodes":[{"content":"Replace(String, String)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The string to replace.","pos":[138719,138746],"source":"\\n<p>The string to replace."},{"content":"&lt;/p&gt;\\n","pos":[138747,138753],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that replaces &lt;em&gt;oldValue&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[138820,138894],"source":"\\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[138895,138901],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with all instances of &lt;em&gt;oldValue&lt;/em&gt; replaced by &lt;em&gt;newValue&lt;/em&gt;.&lt;/p&gt;\\n","pos":[138973,139083],"source":"\\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;oldValue&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[139202,139252],"source":"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[139253,139259],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;oldValue&lt;/em&gt; is zero.","pos":[139356,139401],"source":"\\n<p>The length of <em>oldValue</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[139402,139408],"source":" </p>\\n"},{"pos":[140297,140334],"content":"Replace(String, String, Int32, Int32)","needQuote":true,"nodes":[{"content":"Replace(String, String, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The string to replace.","pos":[141227,141254],"source":"\\n<p>The string to replace."},{"content":"&lt;/p&gt;\\n","pos":[141255,141261],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string that replaces &lt;em&gt;oldValue&lt;/em&gt;, or &lt;strong&gt;null&lt;/strong&gt;.","pos":[141328,141402],"source":"\\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[141403,141409],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The position in this instance where the substring begins.","pos":[141477,141539],"source":"\\n<p>The position in this instance where the substring begins."},{"content":"&lt;/p&gt;\\n","pos":[141540,141546],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the substring.","pos":[141609,141642],"source":"\\n<p>The length of the substring."},{"content":"&lt;/p&gt;\\n","pos":[141643,141649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A reference to this instance with all instances of &lt;em&gt;oldValue&lt;/em&gt; replaced by &lt;em&gt;newValue&lt;/em&gt; in the range from &lt;em&gt;startIndex&lt;/em&gt; to &lt;em&gt;startIndex&lt;/em&gt; + &lt;em&gt;count&lt;/em&gt; - 1.&lt;/p&gt;\\n","pos":[141721,141913],"source":"\\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;oldValue&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[142032,142082],"source":"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[142083,142089],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of &lt;em&gt;oldValue&lt;/em&gt; is zero.","pos":[142186,142231],"source":"\\n<p>The length of <em>oldValue</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[142232,142238],"source":" </p>\\n"},{"pos":[143181,143191],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string whose value is the same as this instance.&lt;/p&gt;\\n","pos":[143951,144012],"source":"\\n<p>A string whose value is the same as this instance.</p>\\n"},{"pos":[144436,144458],"content":"ToString(Int32, Int32)","needQuote":true,"nodes":[{"content":"ToString(Int32, Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The starting position of the substring in this instance.","pos":[145332,145393],"source":"\\n<p>The starting position of the substring in this instance."},{"content":"&lt;/p&gt;\\n","pos":[145394,145400],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The length of the substring.","pos":[145464,145497],"source":"\\n<p>The length of the substring."},{"content":"&lt;/p&gt;\\n","pos":[145498,145504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string whose value is the same as the specified substring of this instance.&lt;/p&gt;\\n","pos":[145564,145652],"source":"\\n<p>A string whose value is the same as the specified substring of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;startIndex&lt;/em&gt; or &lt;em&gt;length&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The sum of &lt;em&gt;startIndex&lt;/em&gt; and &lt;em&gt;length&lt;/em&gt; is greater than the length of the current instance.","pos":[145783,145972],"source":"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the length of the current instance."},{"content":"&lt;/p&gt;\\n","pos":[145973,145979],"source":" </p>\\n"},{"pos":[146151,146162],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[146308,146314],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[146487,146501],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[146620,146626],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[146693,146694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[146744,146750],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[146810,146811],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[146894,146900],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[146967,146968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147018,147024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[147084,147085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147299,147321],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[147469,147475],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[147542,147543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[147593,147599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[147660,147661]},{"pos":[147716,147722],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[147782,147783],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[147880,147886],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[147953,147954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148004,148010],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[148071,148072]},{"pos":[148127,148133],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[148193,148194],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[148439,148470],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[148636,148651],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[148727,148728],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[148778,148784],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[148845,148846]},{"pos":[148901,148907],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[148967,148968],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149074,149089],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[149165,149166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149216,149222],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[149283,149284]},{"pos":[149339,149345],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[149405,149406],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149636,149649],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[149750,149761],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[149833,149834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[149861,149862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[149935,149946],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[150018,150019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150046,150047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150222,150231],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[150324,150331],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[150399,150400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150427,150428],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150497,150504],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[150572,150573],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[150600,150601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[150776,150793],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[150902,150917],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[150993,150994],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151021,151022],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151099,151114],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[151190,151191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[151218,151219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[151364,151370],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[151500,151505],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[151647,151653],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[151796,151800],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[151940,151947],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[152112,152125],"content":"StringBuilder","needQuote":true,"nodes":[{"content":"StringBuilder","pos":[0,13]}]},{"pos":[152299,152303],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[152404,152409],"content":"Char*","needQuote":true,"nodes":[{"content":"Char*","pos":[0,5]}]},{"pos":[152481,152485],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[152607,152611],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[152742,152748],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[152868,152872],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[152931,152933]},{"pos":[152996,153000],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[153058,153060],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[153194,153201],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[153349,153355],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[153499,153504],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[153645,153650],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[153791,153796],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[153938,153944],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[154089,154095],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[154240,154246],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[154391,154397],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[154551,154566],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[154703,154711],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[154839,154845],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[154906,154908]},{"pos":[154973,154979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[155039,155041],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[155193,155203],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[155298,155306],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[155375,155376],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155403,155404],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155474,155482],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[155551,155552],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[155579,155580],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[155739,155766],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[155975,155999],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]},{"pos":[156197,156219],"content":"NullReferenceException","needQuote":true,"nodes":[{"content":"NullReferenceException","pos":[0,22]}]},{"pos":[156409,156429],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[156614,156635],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[156834,156849],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[157032,157049],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Text.StringBuilder\n  commentId: T:System.Text.StringBuilder\n  id: StringBuilder\n  parent: System.Text\n  children:\n  - System.Text.StringBuilder.#ctor\n  - System.Text.StringBuilder.#ctor(System.Int32)\n  - System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  - System.Text.StringBuilder.#ctor(System.String)\n  - System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  - System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.Boolean)\n  - System.Text.StringBuilder.Append(System.Byte)\n  - System.Text.StringBuilder.Append(System.Char)\n  - System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  - System.Text.StringBuilder.Append(System.Char,System.Int32)\n  - System.Text.StringBuilder.Append(System.Char[])\n  - System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.Decimal)\n  - System.Text.StringBuilder.Append(System.Double)\n  - System.Text.StringBuilder.Append(System.Int16)\n  - System.Text.StringBuilder.Append(System.Int32)\n  - System.Text.StringBuilder.Append(System.Int64)\n  - System.Text.StringBuilder.Append(System.Object)\n  - System.Text.StringBuilder.Append(System.SByte)\n  - System.Text.StringBuilder.Append(System.Single)\n  - System.Text.StringBuilder.Append(System.String)\n  - System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Append(System.UInt16)\n  - System.Text.StringBuilder.Append(System.UInt32)\n  - System.Text.StringBuilder.Append(System.UInt64)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  - System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  - System.Text.StringBuilder.AppendLine\n  - System.Text.StringBuilder.AppendLine(System.String)\n  - System.Text.StringBuilder.Capacity\n  - System.Text.StringBuilder.Chars(System.Int32)\n  - System.Text.StringBuilder.Clear\n  - System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  - System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  - System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  - System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  - System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  - System.Text.StringBuilder.Insert(System.Int32,System.String)\n  - System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  - System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  - System.Text.StringBuilder.Length\n  - System.Text.StringBuilder.MaxCapacity\n  - System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  - System.Text.StringBuilder.Replace(System.Char,System.Char)\n  - System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  - System.Text.StringBuilder.Replace(System.String,System.String)\n  - System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  - System.Text.StringBuilder.ToString\n  - System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder\n  fullName: System.Text.StringBuilder\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringBuilder\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Represents a mutable string of characters. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public sealed class StringBuilder : ISerializable\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public NotInheritable Class StringBuilder\n          Implements ISerializable\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: StringBuilder\n- uid: System.Text.StringBuilder.#ctor\n  commentId: M:System.Text.StringBuilder.#ctor\n  id: '#ctor'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder()\n  fullName: System.Text.StringBuilder.StringBuilder()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 83\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public StringBuilder()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder()\n- uid: System.Text.StringBuilder.#ctor(System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder(Int32)\n  fullName: System.Text.StringBuilder.StringBuilder(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified capacity.</p>\\n\"\n  syntax:\n    content: public StringBuilder(int capacity)\n    content.vb: Public Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The suggested starting size of this instance. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Capacity\n    commentId: P:System.Text.StringBuilder.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder(Int32)\n- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder(Int32, Int32)\n  fullName: System.Text.StringBuilder.StringBuilder(System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 154\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that starts with a specified capacity and can grow to a specified maximum.</p>\\n\"\n  syntax:\n    content: public StringBuilder(int capacity, int maxCapacity)\n    content.vb: Public Sub New(capacity As Integer, maxCapacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The suggested starting size of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: maxCapacity\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters the current string can contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>maxCapacity</em> is less than one, <em>capacity</em> is less than zero, or <em>capacity</em> is greater than <em>maxCapacity</em>. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Capacity\n    commentId: P:System.Text.StringBuilder.Capacity\n  - type: System.Text.StringBuilder.MaxCapacity\n    commentId: P:System.Text.StringBuilder.MaxCapacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder(Int32, Int32)\n- uid: System.Text.StringBuilder.#ctor(System.String)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder(String)\n  fullName: System.Text.StringBuilder.StringBuilder(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 98\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified string.</p>\\n\"\n  syntax:\n    content: public StringBuilder(string value)\n    content.vb: Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will contain the empty string (that is, it contains <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder(String)\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder(String, Int32)\n  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 108\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using the specified string and capacity.</p>\\n\"\n  syntax:\n    content: public StringBuilder(string value, int capacity)\n    content.vb: Public Sub New(value As String, capacity As Integer)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will contain the empty string (that is, it contains <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The suggested starting size of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Capacity\n    commentId: P:System.Text.StringBuilder.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder(String, Int32)\n- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32)'\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: StringBuilder(String, Int32, Int32, Int32)\n  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 115\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class from the specified substring and capacity.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder(string value, int startIndex, int length, int capacity)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(value As String, startIndex As Integer, length As Integer, capacity As Integer)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string that contains the substring used to initialize the value of this instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will contain the empty string (that is, it contains <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>). </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The position within <em>value</em> where the substring begins. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the substring. </p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The suggested starting size of the <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>length</em> is not a position within <em>value</em>. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Capacity\n    commentId: P:System.Text.StringBuilder.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.StringBuilder(String, Int32, Int32, Int32)\n- uid: System.Text.StringBuilder.Capacity\n  commentId: P:System.Text.StringBuilder.Capacity\n  id: Capacity\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Capacity\n  fullName: System.Text.StringBuilder.Capacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Capacity\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 283\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</p>\\n\"\n  syntax:\n    content: public int Capacity { get; set; }\n    content.vb: Public Property Capacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\\\"System.Text.StringBuilder.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified for a set operation is less than the current length of this instance.</p>\\n<p>-or- </p>\\n<p>The value specified for a set operation is greater than the maximum capacity. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Capacity\n- uid: System.Text.StringBuilder.Chars(System.Int32)\n  commentId: P:System.Text.StringBuilder.Chars(System.Int32)\n  id: Chars(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Chars[Int32]\n  fullName: System.Text.StringBuilder.Chars[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 511\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets the character at the specified character position in this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [IndexerName(\"Chars\")]\n\n      public char this[int index] { get; set; }\n    content.vb: >-\n      <IndexerName(\"Chars\")>\n\n      Public Property Chars(index As Integer) As Char\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position of the character. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The Unicode character at position <em>index</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the bounds of this instance while setting a character. </p>\\n\"\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the bounds of this instance while getting a character. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  attributes:\n  - type: System.Runtime.CompilerServices.IndexerNameAttribute\n    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: Chars\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.Chars(System.Int32)\n  name.vb: Chars(Int32)\n  nameWithType: StringBuilder.Chars[Int32]\n  nameWithType.vb: StringBuilder.Chars(Int32)\n- uid: System.Text.StringBuilder.Length\n  commentId: P:System.Text.StringBuilder.Length\n  id: Length\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Length\n  fullName: System.Text.StringBuilder.Length\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Length\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 453\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets the length of the current <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int Length { get; set; }\n    content.vb: Public Property Length As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length of this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified for a set operation is less than zero or greater than <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Length\n- uid: System.Text.StringBuilder.MaxCapacity\n  commentId: P:System.Text.StringBuilder.MaxCapacity\n  id: MaxCapacity\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: MaxCapacity\n  fullName: System.Text.StringBuilder.MaxCapacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxCapacity\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 306\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Gets the maximum capacity of this instance.</p>\\n\"\n  syntax:\n    content: public int MaxCapacity { get; }\n    content.vb: Public ReadOnly Property MaxCapacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The maximum number of characters this instance can hold.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StringBuilder.MaxCapacity\n- uid: System.Text.StringBuilder.Append(System.Boolean)\n  commentId: M:System.Text.StringBuilder.Append(System.Boolean)\n  id: Append(System.Boolean)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Boolean)\n  fullName: System.Text.StringBuilder.Append(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 870\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified Boolean value to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(bool value)\n    content.vb: Public Function Append(value As Boolean) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The Boolean value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Boolean)\n- uid: System.Text.StringBuilder.Append(System.Byte)\n  commentId: M:System.Text.StringBuilder.Append(System.Byte)\n  id: Append(System.Byte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Byte)\n  fullName: System.Text.StringBuilder.Append(System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 885\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 8-bit unsigned integer to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(byte value)\n    content.vb: Public Function Append(value As Byte) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Byte)\n- uid: System.Text.StringBuilder.Append(System.Char)\n  commentId: M:System.Text.StringBuilder.Append(System.Char)\n  id: Append(System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Char)\n  fullName: System.Text.StringBuilder.Append(System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 891\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(char value)\n    content.vb: Public Function Append(value As Char) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The UTF-16-encoded code unit to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Char)\n- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char*,System.Int32)\n  id: Append(System.Char*,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Char*, Int32)\n  fullName: System.Text.StringBuilder.Append(System.Char*, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1612\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends an array of Unicode characters starting at a specified address to this instance. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      public StringBuilder Append(char *value, int valueCount)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      Public Function Append(value As Char *, valueCount As Integer) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Char*\n      description: \"\\n<p>A pointer to an array of characters. </p>\\n\"\n    - id: valueCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters in the array. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>valueCount</em> is less than zero. </p>\\n<p>-or-</p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NullReferenceException\n    commentId: T:System.NullReferenceException\n    description: \"\\n<p>\\n<em>value</em> is a null pointer. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Char*, Int32)\n- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char,System.Int32)\n  id: Append(System.Char,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Char, Int32)\n  fullName: System.Text.StringBuilder.Append(System.Char, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 549\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends a specified number of copies of the string representation of a Unicode character to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(char value, int repeatCount)\n    content.vb: Public Function Append(value As Char, repeatCount As Integer) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The character to append. </p>\\n\"\n    - id: repeatCount\n      type: System.Int32\n      description: \"\\n<p>The number of times to append <em>value</em>. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>repeatCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Out of memory.</p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Char, Int32)\n- uid: System.Text.StringBuilder.Append(System.Char[])\n  commentId: M:System.Text.StringBuilder.Append(System.Char[])\n  id: Append(System.Char[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Char[])\n  fullName: System.Text.StringBuilder.Append(System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 978\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of the Unicode characters in a specified array to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Append(char[] value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Append(value As Char()) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>The array of characters to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.Append(System.Char())\n  name.vb: Append(Char())\n  nameWithType: StringBuilder.Append(Char[])\n  nameWithType.vb: StringBuilder.Append(Char())\n- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)\n  id: Append(System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Char[], Int32, Int32)\n  fullName: System.Text.StringBuilder.Append(System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 581\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified subarray of Unicode characters to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Append(char[] value, int startIndex, int charCount)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Append(value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>A character array. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position in <em>value</em>. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> + <em>charCount</em> is greater than the length of <em>value</em>.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.Append(System.Char(), System.Int32, System.Int32)\n  name.vb: Append(Char(), Int32, Int32)\n  nameWithType: StringBuilder.Append(Char[], Int32, Int32)\n  nameWithType.vb: StringBuilder.Append(Char(), Int32, Int32)\n- uid: System.Text.StringBuilder.Append(System.Decimal)\n  commentId: M:System.Text.StringBuilder.Append(System.Decimal)\n  id: Append(System.Decimal)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Decimal)\n  fullName: System.Text.StringBuilder.Append(System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 936\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified decimal number to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(decimal value)\n    content.vb: Public Function Append(value As Decimal) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Decimal)\n- uid: System.Text.StringBuilder.Append(System.Double)\n  commentId: M:System.Text.StringBuilder.Append(System.Double)\n  id: Append(System.Double)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Double)\n  fullName: System.Text.StringBuilder.Append(System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 931\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified double-precision floating-point number to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(double value)\n    content.vb: Public Function Append(value As Double) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Double)\n- uid: System.Text.StringBuilder.Append(System.Int16)\n  commentId: M:System.Text.StringBuilder.Append(System.Int16)\n  id: Append(System.Int16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Int16)\n  fullName: System.Text.StringBuilder.Append(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 903\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 16-bit signed integer to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(short value)\n    content.vb: Public Function Append(value As Short) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Int16)\n- uid: System.Text.StringBuilder.Append(System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.Int32)\n  id: Append(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Int32)\n  fullName: System.Text.StringBuilder.Append(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 910\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 32-bit signed integer to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(int value)\n    content.vb: Public Function Append(value As Integer) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Int32)\n- uid: System.Text.StringBuilder.Append(System.Int64)\n  commentId: M:System.Text.StringBuilder.Append(System.Int64)\n  id: Append(System.Int64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Int64)\n  fullName: System.Text.StringBuilder.Append(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 917\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 64-bit signed integer to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(long value)\n    content.vb: Public Function Append(value As Long) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Int64)\n- uid: System.Text.StringBuilder.Append(System.Object)\n  commentId: M:System.Text.StringBuilder.Append(System.Object)\n  id: Append(System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Object)\n  fullName: System.Text.StringBuilder.Append(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 967\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified object to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(object value)\n    content.vb: Public Function Append(value As Object) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Object)\n- uid: System.Text.StringBuilder.Append(System.SByte)\n  commentId: M:System.Text.StringBuilder.Append(System.SByte)\n  id: Append(System.SByte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(SByte)\n  fullName: System.Text.StringBuilder.Append(System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 877\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 8-bit signed integer to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Append(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Append(value As SByte) As StringBuilder\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(SByte)\n- uid: System.Text.StringBuilder.Append(System.Single)\n  commentId: M:System.Text.StringBuilder.Append(System.Single)\n  id: Append(System.Single)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(Single)\n  fullName: System.Text.StringBuilder.Append(System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 924\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified single-precision floating-point number to this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Append(float value)\n    content.vb: Public Function Append(value As Single) As StringBuilder\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(Single)\n- uid: System.Text.StringBuilder.Append(System.String)\n  commentId: M:System.Text.StringBuilder.Append(System.String)\n  id: Append(System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(String)\n  fullName: System.Text.StringBuilder.Append(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 614\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends a copy of the specified string to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Append(string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Append(value As String) As StringBuilder\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(String)\n- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)\n  id: Append(System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(String, Int32, Int32)\n  fullName: System.Text.StringBuilder.Append(System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 671\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends a copy of a specified substring to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Append(string value, int startIndex, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Append(value As String, startIndex As Integer, count As Integer) As StringBuilder\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string that contains the substring to append. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position of the substring within <em>value</em>. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters in <em>value</em> to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>count</em> are not zero. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>count</em> less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> + <em>count</em> is greater than the length of <em>value</em>.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(String, Int32, Int32)\n- uid: System.Text.StringBuilder.Append(System.UInt16)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt16)\n  id: Append(System.UInt16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(UInt16)\n  fullName: System.Text.StringBuilder.Append(System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 943\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 16-bit unsigned integer to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Append(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Append(value As UShort) As StringBuilder\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(UInt16)\n- uid: System.Text.StringBuilder.Append(System.UInt32)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt32)\n  id: Append(System.UInt32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(UInt32)\n  fullName: System.Text.StringBuilder.Append(System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 951\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 32-bit unsigned integer to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Append(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Append(value As UInteger) As StringBuilder\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(UInt32)\n- uid: System.Text.StringBuilder.Append(System.UInt64)\n  commentId: M:System.Text.StringBuilder.Append(System.UInt64)\n  id: Append(System.UInt64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Append(UInt64)\n  fullName: System.Text.StringBuilder.Append(System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 959\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string representation of a specified 64-bit unsigned integer to this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Append(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Append(value As ULong) As StringBuilder\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Append(UInt64)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(IFormatProvider, String, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1252\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider. </p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0)\n    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object) As StringBuilder\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> in which any format specification is replaced by the string representation of <em>arg0</em>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to one (1). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(IFormatProvider, String, Object, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1257\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1)\n    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As StringBuilder\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2 (two). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(IFormatProvider, String, Object, Object, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1262\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1, object arg2)\n    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3 (three). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  id: AppendFormat(System.IFormatProvider,System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(IFormatProvider, String, Object[])\n  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1267\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, params object[] args)\n    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, ParamArray args As Object()) As StringBuilder\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information. </p>\\n\"\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of objects to format.</p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object())\n  name.vb: AppendFormat(IFormatProvider, String, Object())\n  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object[])\n  nameWithType.vb: StringBuilder.AppendFormat(IFormatProvider, String, Object())\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)\n  id: AppendFormat(System.String,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(String, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1224\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(string format, object arg0)\n    content.vb: Public Function AppendFormat(format As String, arg0 As Object) As StringBuilder\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>An object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of <em>arg0</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 1.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(String, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)\n  id: AppendFormat(System.String,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(String, Object, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1229\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(string format, object arg0, object arg1)\n    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object) As StringBuilder\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)\n  id: AppendFormat(System.String,System.Object,System.Object,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(String, Object, Object, Object)\n  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1234\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)\n    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: arg0\n      type: System.Object\n      description: \"\\n<p>The first object to format. </p>\\n\"\n    - id: arg1\n      type: System.Object\n      description: \"\\n<p>The second object to format. </p>\\n\"\n    - id: arg2\n      type: System.Object\n      description: \"\\n<p>The third object to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid.</p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendFormat(String, Object, Object, Object)\n- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])\n  id: AppendFormat(System.String,System.Object[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendFormat(String, Object[])\n  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendFormat\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1239\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</p>\\n\"\n  syntax:\n    content: public StringBuilder AppendFormat(string format, params object[] args)\n    content.vb: Public Function AppendFormat(format As String, ParamArray args As Object()) As StringBuilder\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A composite format string (see Remarks). </p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of objects to format. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is invalid. </p>\\n<p>-or-</p>\\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The length of the expanded string would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.AppendFormat(System.String, System.Object())\n  name.vb: AppendFormat(String, Object())\n  nameWithType: StringBuilder.AppendFormat(String, Object[])\n  nameWithType.vb: StringBuilder.AppendFormat(String, Object())\n- uid: System.Text.StringBuilder.AppendLine\n  commentId: M:System.Text.StringBuilder.AppendLine\n  id: AppendLine\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendLine()\n  fullName: System.Text.StringBuilder.AppendLine()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendLine\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 706\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends the default line terminator to the end of the current <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public StringBuilder AppendLine()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function AppendLine As StringBuilder\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendLine()\n- uid: System.Text.StringBuilder.AppendLine(System.String)\n  commentId: M:System.Text.StringBuilder.AppendLine(System.String)\n  id: AppendLine(System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AppendLine(String)\n  fullName: System.Text.StringBuilder.AppendLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AppendLine\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 712\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public StringBuilder AppendLine(string value)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Function AppendLine(value As String) As StringBuilder\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to append. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the append operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.AppendLine(String)\n- uid: System.Text.StringBuilder.Clear\n  commentId: M:System.Text.StringBuilder.Clear\n  id: Clear\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Text.StringBuilder.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 444\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Removes all characters from the current <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Clear()\n    content.vb: Public Function Clear As StringBuilder\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>An object whose <xref href=\\\"System.Text.StringBuilder.Length\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is 0 (zero).</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Clear()\n- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Int32, Char[], Int32, Int32)\n  fullName: System.Text.StringBuilder.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 719\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\\\"System.Char\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [SecuritySafeCritical]\n\n      public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)\n    content.vb: >-\n      <ComVisible(False)>\n\n      <SecuritySafeCritical>\n\n      Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)\n    parameters:\n    - id: sourceIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position in this instance where characters will be copied from. The index is zero-based.</p>\\n\"\n    - id: destination\n      type: System.Char[]\n      description: \"\\n<p>The array where characters will be copied.</p>\\n\"\n    - id: destinationIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position in <em>destination</em> where characters will be copied. The index is zero-based.</p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to be copied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>destination</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em>, is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>sourceIndex</em> is greater than the length of this instance.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>sourceIndex</em> + <em>count</em> is greater than the length of this instance.</p>\\n<p>-or-</p>\\n<p>\\n<em>destinationIndex</em> + <em>count</em> is greater than the length of <em>destination</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)\n  name.vb: CopyTo(Int32, Char(), Int32, Int32)\n  nameWithType: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)\n  nameWithType.vb: StringBuilder.CopyTo(Int32, Char(), Int32, Int32)\n- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  commentId: M:System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  id: EnsureCapacity(System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: EnsureCapacity(Int32)\n  fullName: System.Text.StringBuilder.EnsureCapacity(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EnsureCapacity\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 315\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Ensures that the capacity of this instance of <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is at least the specified value.</p>\\n\"\n  syntax:\n    content: public int EnsureCapacity(int capacity)\n    content.vb: Public Function EnsureCapacity(capacity As Integer) As Integer\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The minimum capacity to ensure. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The new capacity of this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.EnsureCapacity(Int32)\n- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  commentId: M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  id: Equals(System.Text.StringBuilder)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Equals(StringBuilder)\n  fullName: System.Text.StringBuilder.Equals(System.Text.StringBuilder)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1440\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public bool Equals(StringBuilder sb)\n    content.vb: Public Function Equals(sb As StringBuilder) As Boolean\n    parameters:\n    - id: sb\n      type: System.Text.StringBuilder\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this instance and <em>sb</em> have equal string, <xref href=\\\"System.Text.StringBuilder.Capacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Equals(StringBuilder)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)\n  id: Insert(System.Int32,System.Boolean)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Boolean)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1024\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a Boolean value into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, bool value)\n    content.vb: Public Function Insert(index As Integer, value As Boolean) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Boolean\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Boolean\n    commentId: T:System.Boolean\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Boolean)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)\n  id: Insert(System.Int32,System.Byte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Byte)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1045\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, byte value)\n    content.vb: Public Function Insert(index As Integer, value As Byte) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Byte\n    commentId: T:System.Byte\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Byte)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char)\n  id: Insert(System.Int32,System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Char)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1064\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Insert(int index, char value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Insert(index As Integer, value As Char) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Char\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Char\n    commentId: T:System.Char\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Char)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])\n  id: Insert(System.Int32,System.Char[])\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Char[])\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1079\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, char[] value)\n    content.vb: Public Function Insert(index As Integer, value As Char()) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>The character array to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char())\n  name.vb: Insert(Int32, Char())\n  nameWithType: StringBuilder.Insert(Int32, Char[])\n  nameWithType.vb: StringBuilder.Insert(Int32, Char())\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  id: Insert(System.Int32,System.Char[],System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Char[], Int32, Int32)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1095\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Insert(int index, char[] value, int startIndex, int charCount)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Insert(index As Integer, value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Char[]\n      description: \"\\n<p>A character array. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting index within <em>value</em>. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em>, <em>startIndex</em>, or <em>charCount</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> is greater than the length of this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>charCount</em> is not a position within <em>value</em>.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char(), System.Int32, System.Int32)\n  name.vb: Insert(Int32, Char(), Int32, Int32)\n  nameWithType: StringBuilder.Insert(Int32, Char[], Int32, Int32)\n  nameWithType.vb: StringBuilder.Insert(Int32, Char(), Int32, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)\n  id: Insert(System.Int32,System.Decimal)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Decimal)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Decimal)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1176\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a decimal number into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, decimal value)\n    content.vb: Public Function Insert(index As Integer, value As Decimal) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Decimal\n    commentId: T:System.Decimal\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Decimal)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Double)\n  id: Insert(System.Int32,System.Double)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Double)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1171\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, double value)\n    content.vb: Public Function Insert(index As Integer, value As Double) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Double)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)\n  id: Insert(System.Int32,System.Int16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Int16)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1055\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, short value)\n    content.vb: Public Function Insert(index As Integer, value As Short) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Int16\n    commentId: T:System.Int16\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Int16)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)\n  id: Insert(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Int32)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1141\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, int value)\n    content.vb: Public Function Insert(index As Integer, value As Integer) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Int32\n    commentId: T:System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)\n  id: Insert(System.Int32,System.Int64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Int64)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1151\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, long value)\n    content.vb: Public Function Insert(index As Integer, value As Long) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Int64\n    commentId: T:System.Int64\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Int64)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Object)\n  id: Insert(System.Int32,System.Object)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Object)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1216\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of an object into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, object value)\n    content.vb: Public Function Insert(index As Integer, value As Object) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to insert, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Object\n    commentId: T:System.Object\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Object)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)\n  id: Insert(System.Int32,System.SByte)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, SByte)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1034\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Insert(int index, sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Insert(index As Integer, value As SByte) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.SByte\n    commentId: T:System.SByte\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, SByte)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Single)\n  id: Insert(System.Int32,System.Single)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, Single)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1161\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: public StringBuilder Insert(int index, float value)\n    content.vb: Public Function Insert(index As Integer, value As Single) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Single\n    commentId: T:System.Single\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, Single)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String)\n  id: Insert(System.Int32,System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, String)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1001\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts a string into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Insert(int index, string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Insert(index As Integer, value As String) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the current length of this instance. </p>\\n<p>-or-</p>\\n<p>The current length of this <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object plus the length of <em>value</em> exceeds <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, String)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)\n  id: Insert(System.Int32,System.String,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, String, Int32)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 784\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts one or more copies of a specified string into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public StringBuilder Insert(int index, string value, int count)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Insert(index As Integer, value As String, count As Integer) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to insert. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of times to insert <em>value</em>. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after insertion has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the current length of this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>count</em> is less than zero. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>The current length of this <xref href=\\\"System.Text.StringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object plus the length of <em>value</em> times <em>count</em> exceeds <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, String, Int32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)\n  id: Insert(System.Int32,System.UInt16)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, UInt16)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1185\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Insert(int index, ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Insert(index As Integer, value As UShort) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.UInt16\n    commentId: T:System.UInt16\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, UInt16)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)\n  id: Insert(System.Int32,System.UInt32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, UInt32)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1195\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Insert(int index, uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Insert(index As Integer, value As UInteger) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.UInt32\n    commentId: T:System.UInt32\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, UInt32)\n- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)\n  id: Insert(System.Int32,System.UInt64)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Insert(Int32, UInt64)\n  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Insert\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1205\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public StringBuilder Insert(int index, ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Function Insert(index As Integer, value As ULong) As StringBuilder\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where insertion begins. </p>\\n\"\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to insert. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the insert operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero or greater than the length of this instance. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.UInt64\n    commentId: T:System.UInt64\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Insert(Int32, UInt64)\n- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  id: Remove(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Remove(Int32, Int32)\n  fullName: System.Text.StringBuilder.Remove(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 830\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Removes the specified range of characters from this instance.</p>\\n\"\n  syntax:\n    content: public StringBuilder Remove(int startIndex, int length)\n    content.vb: Public Function Remove(startIndex As Integer, length As Integer) As StringBuilder\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based position in this instance where removal begins. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of characters to remove. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance after the excise operation has completed.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>If <em>startIndex</em> or <em>length</em> is less than zero, or <em>startIndex</em> + <em>length</em> is greater than the length of this instance. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Replace(System.String,System.String)\n    commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Remove(Int32, Int32)\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)\n  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char)\n  id: Replace(System.Char,System.Char)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Replace(Char, Char)\n  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1570\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Replaces all occurrences of a specified character in this instance with another specified character.</p>\\n\"\n  syntax:\n    content: public StringBuilder Replace(char oldChar, char newChar)\n    content.vb: Public Function Replace(oldChar As Char, newChar As Char) As StringBuilder\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: \"\\n<p>The character to replace. </p>\\n\"\n    - id: newChar\n      type: System.Char\n      description: \"\\n<p>The character that replaces <em>oldChar</em>. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Replace(Char, Char)\n- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)\n  id: Replace(System.Char,System.Char,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Replace(Char, Char, Int32, Int32)\n  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1573\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</p>\\n\"\n  syntax:\n    content: public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count)\n    content.vb: Public Function Replace(oldChar As Char, newChar As Char, startIndex As Integer, count As Integer) As StringBuilder\n    parameters:\n    - id: oldChar\n      type: System.Char\n      description: \"\\n<p>The character to replace. </p>\\n\"\n    - id: newChar\n      type: System.Char\n      description: \"\\n<p>The character that replaces <em>oldChar</em>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where the substring begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the substring. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> + <em>count</em> is greater than the length of the value of this instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> or <em>count</em> is less than zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Replace(Char, Char, Int32, Int32)\n- uid: System.Text.StringBuilder.Replace(System.String,System.String)\n  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)\n  id: Replace(System.String,System.String)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String)\n  fullName: System.Text.StringBuilder.Replace(System.String, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1435\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Replaces all occurrences of a specified string in this instance with another specified string.</p>\\n\"\n  syntax:\n    content: public StringBuilder Replace(string oldValue, string newValue)\n    content.vb: Public Function Replace(oldValue As String, newValue As String) As StringBuilder\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: \"\\n<p>The string to replace. </p>\\n\"\n    - id: newValue\n      type: System.String\n      description: \"\\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of <em>oldValue</em> is zero. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Replace(String, String)\n- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)\n  id: Replace(System.String,System.String,System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Replace(String, String, Int32, Int32)\n  fullName: System.Text.StringBuilder.Replace(System.String, System.String, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Replace\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 1485\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</p>\\n\"\n  syntax:\n    content: public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count)\n    content.vb: Public Function Replace(oldValue As String, newValue As String, startIndex As Integer, count As Integer) As StringBuilder\n    parameters:\n    - id: oldValue\n      type: System.String\n      description: \"\\n<p>The string to replace. </p>\\n\"\n    - id: newValue\n      type: System.String\n      description: \"\\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\\n\"\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The position in this instance where the substring begins. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The length of the substring. </p>\\n\"\n    return:\n      type: System.Text.StringBuilder\n      description: \"\\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>oldValue</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The length of <em>oldValue</em> is zero. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>startIndex</em> plus <em>count</em> indicates a character position not within this instance.</p>\\n<p>-or- </p>\\n<p>Enlarging the value of this instance would exceed <xref href=\\\"System.Text.StringBuilder.MaxCapacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.Replace(String, String, Int32, Int32)\n- uid: System.Text.StringBuilder.ToString\n  commentId: M:System.Text.StringBuilder.ToString\n  id: ToString\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Text.StringBuilder.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 326\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Converts the value of this instance to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string whose value is the same as this instance.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringBuilder.ToString()\n- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  commentId: M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)\n  id: ToString(System.Int32,System.Int32)\n  parent: System.Text.StringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ToString(Int32, Int32)\n  fullName: System.Text.StringBuilder.ToString(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/StringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Text/StringBuilder.cs\n    startLine: 369\n  assemblies:\n  - System.Runtime\n  namespace: System.Text\n  summary: \"\\n<p>Converts the value of a substring of this instance to a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(int startIndex, int length)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(startIndex As Integer, length As Integer) As String\n    parameters:\n    - id: startIndex\n      type: System.Int32\n      description: \"\\n<p>The starting position of the substring in this instance. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The length of the substring. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string whose value is the same as the specified substring of this instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the length of the current instance. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringBuilder.ToString(Int32, Int32)\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Text.StringBuilder\n  parent: System.Text\n  isExternal: false\n  name: StringBuilder\n  fullName: System.Text.StringBuilder\n  nameWithType: StringBuilder\n  commentId: T:System.Text.StringBuilder\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Char*\n  name: Char*\n  fullName: System.Char*\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Char*\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  nameWithType: UInt16\n  commentId: T:System.UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  nameWithType: UInt32\n  commentId: T:System.UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  nameWithType: UInt64\n  commentId: T:System.UInt64\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  nameWithType: IFormatProvider\n  commentId: T:System.IFormatProvider\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n- uid: System.NullReferenceException\n  isExternal: false\n  name: NullReferenceException\n  fullName: System.NullReferenceException\n  nameWithType: NullReferenceException\n  commentId: T:System.NullReferenceException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}