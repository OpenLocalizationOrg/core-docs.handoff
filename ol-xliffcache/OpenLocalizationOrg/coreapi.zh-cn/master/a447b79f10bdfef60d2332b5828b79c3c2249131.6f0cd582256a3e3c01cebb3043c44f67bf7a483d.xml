{"nodes":[{"pos":[778,793],"content":"HandleCollector","needQuote":true,"nodes":[{"content":"HandleCollector","pos":[0,15]}]},{"pos":[2291,2321],"content":"HandleCollector(String, Int32)","needQuote":true,"nodes":[{"content":"HandleCollector(String, Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;A name for the collector.","pos":[3304,3334],"source":"\\n<p>A name for the collector."},{"content":"This parameter allows you to name collectors that track handle types separately.&lt;/p&gt;\\n","pos":[3335,3421],"source":" This parameter allows you to name collectors that track handle types separately.</p>\\n"},{"content":"\\n&lt;p&gt;A value that specifies the point at which collections should begin.&lt;/p&gt;\\n","pos":[3495,3573],"source":"\\n<p>A value that specifies the point at which collections should begin.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;initialThreshold&lt;/em&gt; parameter is less than 0.&lt;/p&gt;\\n","pos":[3704,3770],"source":"\\n<p>The <em>initialThreshold</em> parameter is less than 0.</p>\\n"},{"pos":[4250,4287],"content":"HandleCollector(String, Int32, Int32)","needQuote":true,"nodes":[{"content":"HandleCollector(String, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;A name for the collector.","pos":[5387,5417],"source":"\\n<p>A name for the collector."},{"content":"This parameter allows you to name collectors that track handle types separately.&lt;/p&gt;\\n","pos":[5419,5505],"source":"  This parameter allows you to name collectors that track handle types separately.</p>\\n"},{"content":"\\n&lt;p&gt;A value that specifies the point at which collections should begin.&lt;/p&gt;\\n","pos":[5579,5657],"source":"\\n<p>A value that specifies the point at which collections should begin.</p>\\n"},{"content":"\\n&lt;p&gt;A value that specifies the point at which collections must occur.","pos":[5731,5801],"source":"\\n<p>A value that specifies the point at which collections must occur."},{"content":"This should be set to the maximum number of available handles.&lt;/p&gt;\\n","pos":[5802,5870],"source":" This should be set to the maximum number of available handles.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;initialThreshold&lt;/em&gt; parameter is less than 0.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;maximumThreshold&lt;/em&gt; parameter is less than 0.&lt;/p&gt;\\n","pos":[6001,6144],"source":"\\n<p>The <em>initialThreshold</em> parameter is less than 0.</p>\\n<p>-or-</p>\\n<p>The <em>maximumThreshold</em> parameter is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;maximumThreshold&lt;/em&gt; parameter is less than the &lt;em&gt;initialThreshold&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[6241,6345],"source":"\\n<p>The <em>maximumThreshold</em> parameter is less than the <em>initialThreshold</em> parameter.</p>\\n"},{"pos":[6707,6712],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The number of handles collected.&lt;/p&gt;\\n","pos":[7426,7469],"source":"\\n<p>The number of handles collected.</p>\\n"},{"pos":[7853,7869],"content":"InitialThreshold","needQuote":true,"nodes":[{"content":"InitialThreshold","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A value that specifies the point at which collections should begin.&lt;/p&gt;\\n","pos":[8662,8740],"source":"\\n<p>A value that specifies the point at which collections should begin.</p>\\n"},{"pos":[9135,9151],"content":"MaximumThreshold","needQuote":true,"nodes":[{"content":"MaximumThreshold","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A value that specifies the point at which collections must occur.&lt;/p&gt;\\n","pos":[9942,10018],"source":"\\n<p>A value that specifies the point at which collections must occur.</p>\\n"},{"pos":[10377,10381],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[11736,11741],"content":"Add()","needQuote":true,"nodes":[{"content":"Add()","pos":[0,5]}]},{"pos":[12949,12957],"content":"Remove()","needQuote":true,"nodes":[{"content":"Remove()","pos":[0,8]}]},{"pos":[14023,14053],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[14256,14262],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14422,14432],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[14527,14535],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14604,14605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14632,14633],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14703,14711],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[14780,14781],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14808,14809],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14992,15006],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15125,15131],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15198,15199],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15249,15255],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15315,15316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15399,15405],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[15472,15473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15523,15529],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[15589,15590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15804,15826],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[15974,15980],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16047,16048],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16098,16104],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16165,16166]},{"pos":[16221,16227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16287,16288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16385,16391],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[16458,16459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16509,16515],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[16576,16577]},{"pos":[16632,16638],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[16698,16699],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16944,16975],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[17141,17156],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17232,17233],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17283,17289],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17350,17351]},{"pos":[17406,17412],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17472,17473],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17579,17594],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[17670,17671],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17721,17727],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17788,17789]},{"pos":[17844,17850],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[17910,17911],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18141,18154],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[18255,18266],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18338,18339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18366,18367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18440,18451],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[18523,18524],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18551,18552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[18727,18736],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[18829,18836],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[18904,18905],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18932,18933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19002,19009],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[19077,19078],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19105,19106],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19281,19298],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[19407,19422],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19498,19499],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19526,19527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19604,19619],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[19695,19696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19723,19724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19869,19875],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[20006,20012],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[20156,20161],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20307,20334],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[20553,20570],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[20767,20792],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.HandleCollector\n  commentId: T:System.Runtime.InteropServices.HandleCollector\n  id: HandleCollector\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)\n  - System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)\n  - System.Runtime.InteropServices.HandleCollector.Add\n  - System.Runtime.InteropServices.HandleCollector.Count\n  - System.Runtime.InteropServices.HandleCollector.InitialThreshold\n  - System.Runtime.InteropServices.HandleCollector.MaximumThreshold\n  - System.Runtime.InteropServices.HandleCollector.Name\n  - System.Runtime.InteropServices.HandleCollector.Remove\n  langs:\n  - csharp\n  - vb\n  name: HandleCollector\n  fullName: System.Runtime.InteropServices.HandleCollector\n  type: Class\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HandleCollector\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 294\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.</p>\\n\"\n  syntax:\n    content: public sealed class HandleCollector\n    content.vb: Public NotInheritable Class HandleCollector\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: HandleCollector\n- uid: System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)\n  commentId: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)\n  id: '#ctor(System.String,System.Int32)'\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: HandleCollector(String, Int32)\n  fullName: System.Runtime.InteropServices.HandleCollector.HandleCollector(System.String, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 296\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.HandleCollector\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a name and a threshold at which to begin handle collection. </p>\\n\"\n  syntax:\n    content: public HandleCollector(string name, int initialThreshold)\n    content.vb: Public Sub New(name As String, initialThreshold As Integer)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A name for the collector. This parameter allows you to name collectors that track handle types separately.</p>\\n\"\n    - id: initialThreshold\n      type: System.Int32\n      description: \"\\n<p>A value that specifies the point at which collections should begin.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>initialThreshold</em> parameter is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HandleCollector.HandleCollector(String, Int32)\n- uid: System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)\n  commentId: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)\n  id: '#ctor(System.String,System.Int32,System.Int32)'\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: HandleCollector(String, Int32, Int32)\n  fullName: System.Runtime.InteropServices.HandleCollector.HandleCollector(System.String, System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 297\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.HandleCollector\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur. </p>\\n\"\n  syntax:\n    content: public HandleCollector(string name, int initialThreshold, int maximumThreshold)\n    content.vb: Public Sub New(name As String, initialThreshold As Integer, maximumThreshold As Integer)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>A name for the collector.  This parameter allows you to name collectors that track handle types separately.</p>\\n\"\n    - id: initialThreshold\n      type: System.Int32\n      description: \"\\n<p>A value that specifies the point at which collections should begin.</p>\\n\"\n    - id: maximumThreshold\n      type: System.Int32\n      description: \"\\n<p>A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>initialThreshold</em> parameter is less than 0.</p>\\n<p>-or-</p>\\n<p>The <em>maximumThreshold</em> parameter is less than 0.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>maximumThreshold</em> parameter is less than the <em>initialThreshold</em> parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HandleCollector.HandleCollector(String, Int32, Int32)\n- uid: System.Runtime.InteropServices.HandleCollector.Count\n  commentId: P:System.Runtime.InteropServices.HandleCollector.Count\n  id: Count\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Runtime.InteropServices.HandleCollector.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 298\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the number of handles collected.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of handles collected.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HandleCollector.Count\n- uid: System.Runtime.InteropServices.HandleCollector.InitialThreshold\n  commentId: P:System.Runtime.InteropServices.HandleCollector.InitialThreshold\n  id: InitialThreshold\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: InitialThreshold\n  fullName: System.Runtime.InteropServices.HandleCollector.InitialThreshold\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InitialThreshold\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 299\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets a value that specifies the point at which collections should begin.</p>\\n\"\n  syntax:\n    content: public int InitialThreshold { get; }\n    content.vb: Public ReadOnly Property InitialThreshold As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value that specifies the point at which collections should begin.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HandleCollector.InitialThreshold\n- uid: System.Runtime.InteropServices.HandleCollector.MaximumThreshold\n  commentId: P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold\n  id: MaximumThreshold\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: MaximumThreshold\n  fullName: System.Runtime.InteropServices.HandleCollector.MaximumThreshold\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaximumThreshold\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 300\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets a value that specifies the point at which collections must occur.</p>\\n\"\n  syntax:\n    content: public int MaximumThreshold { get; }\n    content.vb: Public ReadOnly Property MaximumThreshold As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>A value that specifies the point at which collections must occur.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HandleCollector.MaximumThreshold\n- uid: System.Runtime.InteropServices.HandleCollector.Name\n  commentId: P:System.Runtime.InteropServices.HandleCollector.Name\n  id: Name\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Runtime.InteropServices.HandleCollector.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 301\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the name of a <xref href=\\\"System.Runtime.InteropServices.HandleCollector\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>This <xref href=\\\"System.Runtime.InteropServices.HandleCollector.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property allows you to name collectors that track handle types separately.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HandleCollector.Name\n- uid: System.Runtime.InteropServices.HandleCollector.Add\n  commentId: M:System.Runtime.InteropServices.HandleCollector.Add\n  id: Add\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: Add()\n  fullName: System.Runtime.InteropServices.HandleCollector.Add()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 302\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Increments the current handle count.</p>\\n\"\n  syntax:\n    content: public void Add()\n    content.vb: Public Sub Add\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.HandleCollector.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HandleCollector.Add()\n- uid: System.Runtime.InteropServices.HandleCollector.Remove\n  commentId: M:System.Runtime.InteropServices.HandleCollector.Remove\n  id: Remove\n  parent: System.Runtime.InteropServices.HandleCollector\n  langs:\n  - csharp\n  - vb\n  name: Remove()\n  fullName: System.Runtime.InteropServices.HandleCollector.Remove()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs\n    startLine: 303\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Decrements the current handle count.</p>\\n\"\n  syntax:\n    content: public void Remove()\n    content.vb: Public Sub Remove\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Runtime.InteropServices.HandleCollector.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HandleCollector.Remove()\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}