{"nodes":[{"pos":[910,923],"content":"X509Extension","needQuote":true,"nodes":[{"content":"X509Extension","pos":[0,13]}]},{"pos":[2117,2132],"content":"X509Extension()","needQuote":true,"nodes":[{"content":"X509Extension()","pos":[0,15]}]},{"pos":[3548,3586],"content":"X509Extension(AsnEncodedData, Boolean)","needQuote":true,"nodes":[{"content":"X509Extension(AsnEncodedData, Boolean)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The encoded data to be used to create the extension.&lt;/p&gt;\\n","pos":[4714,4777],"source":"\\n<p>The encoded data to be used to create the extension.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4845,4943],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n"},{"pos":[5534,5569],"content":"X509Extension(Oid, Byte[], Boolean)","needQuote":true,"nodes":[{"content":"X509Extension(Oid, Byte[], Boolean)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The object identifier used to identify the extension.&lt;/p&gt;\\n","pos":[6664,6728],"source":"\\n<p>The object identifier used to identify the extension.</p>\\n"},{"content":"\\n&lt;p&gt;The encoded data used to create the extension.&lt;/p&gt;\\n","pos":[6794,6851],"source":"\\n<p>The encoded data used to create the extension.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[6919,7017],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;oid&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7136,7187],"source":"\\n<p>\\n<em>oid</em> is <strong>null</strong>.</p>\\n"},{"pos":[8137,8175],"content":"X509Extension(String, Byte[], Boolean)","needQuote":true,"nodes":[{"content":"X509Extension(String, Byte[], Boolean)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;A string representing the object identifier.&lt;/p&gt;\\n","pos":[9238,9293],"source":"\\n<p>A string representing the object identifier.</p>\\n"},{"content":"\\n&lt;p&gt;The encoded data used to create the extension.&lt;/p&gt;\\n","pos":[9359,9416],"source":"\\n<p>The encoded data used to create the extension.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9484,9582],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n"},{"pos":[10248,10256],"content":"Critical","needQuote":true,"nodes":[{"content":"Critical","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the extension is critical; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11113,11212],"source":"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11742,11766],"content":"CopyFrom(AsnEncodedData)","needQuote":true,"nodes":[{"content":"CopyFrom(AsnEncodedData)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;asnEncodedData&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[13104,13160],"source":"\\n<p>\\n<em>asnEncodedData</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[13161,13167],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;asnEncodedData&lt;/em&gt; does not have a valid X.509 extension.&lt;/p&gt;\\n","pos":[13264,13339],"source":"\\n<p>\\n<em>asnEncodedData</em> does not have a valid X.509 extension.</p>\\n"},{"pos":[13574,13619],"content":"System.Security.Cryptography.X509Certificates","needQuote":true,"nodes":[{"content":"System.Security.Cryptography.X509Certificates","pos":[0,45]}]},{"pos":[13867,13873],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13994,14000],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14183,14197],"content":"AsnEncodedData","needQuote":true,"nodes":[{"content":"AsnEncodedData","pos":[0,14]}]},{"pos":[14411,14418],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[14564,14592],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[14830,14833],"content":"Oid","needQuote":true,"nodes":[{"content":"Oid","pos":[0,3]}]},{"pos":[14976,14982],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[15102,15106],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[15165,15167]},{"pos":[15230,15234],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[15292,15294],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[15427,15433],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[15576,15597],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[15798,15815],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.Cryptography.X509Certificates.X509Extension\n  commentId: T:System.Security.Cryptography.X509Certificates.X509Extension\n  id: X509Extension\n  parent: System.Security.Cryptography.X509Certificates\n  children:\n  - System.Security.Cryptography.X509Certificates.X509Extension.#ctor\n  - System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)\n  - System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  - System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  langs:\n  - csharp\n  - vb\n  name: X509Extension\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: X509Extension\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 323\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Represents an X509 extension.</p>\\n\"\n  syntax:\n    content: 'public class X509Extension : AsnEncodedData'\n    content.vb: >-\n      Public Class X509Extension\n          Inherits AsnEncodedData\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: X509Extension\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.#ctor\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: X509Extension()\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 325\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected X509Extension()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: X509Extension.X509Extension()\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)\n  id: '#ctor(System.Security.Cryptography.AsnEncodedData,System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: X509Extension(AsnEncodedData, Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension(System.Security.Cryptography.AsnEncodedData, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 326\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509Extension(AsnEncodedData encodedExtension, bool critical)\n    content.vb: Public Sub New(encodedExtension As AsnEncodedData, critical As Boolean)\n    parameters:\n    - id: encodedExtension\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The encoded data to be used to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: X509Extension.X509Extension(AsnEncodedData, Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)\n  id: '#ctor(System.Security.Cryptography.Oid,System.Byte[],System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: X509Extension(Oid, Byte[], Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension(System.Security.Cryptography.Oid, System.Byte[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 327\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509Extension(Oid oid, byte[] rawData, bool critical)\n    content.vb: Public Sub New(oid As Oid, rawData As Byte(), critical As Boolean)\n    parameters:\n    - id: oid\n      type: System.Security.Cryptography.Oid\n      description: \"\\n<p>The object identifier used to identify the extension.</p>\\n\"\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>The encoded data used to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>oid</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>oid</em> is an empty string (\\\"\\\").</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension(System.Security.Cryptography.Oid, System.Byte(), System.Boolean)\n  name.vb: X509Extension(Oid, Byte(), Boolean)\n  nameWithType: X509Extension.X509Extension(Oid, Byte[], Boolean)\n  nameWithType.vb: X509Extension.X509Extension(Oid, Byte(), Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.#ctor(System.String,System.Byte[],System.Boolean)\n  id: '#ctor(System.String,System.Byte[],System.Boolean)'\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: X509Extension(String, Byte[], Boolean)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension(System.String, System.Byte[], System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 328\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.X509Certificates.X509Extension\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public X509Extension(string oid, byte[] rawData, bool critical)\n    content.vb: Public Sub New(oid As String, rawData As Byte(), critical As Boolean)\n    parameters:\n    - id: oid\n      type: System.String\n      description: \"\\n<p>A string representing the object identifier.</p>\\n\"\n    - id: rawData\n      type: System.Byte[]\n      description: \"\\n<p>The encoded data used to create the extension.</p>\\n\"\n    - id: critical\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Security.Cryptography.X509Certificates.X509Extension.X509Extension(System.String, System.Byte(), System.Boolean)\n  name.vb: X509Extension(String, Byte(), Boolean)\n  nameWithType: X509Extension.X509Extension(String, Byte[], Boolean)\n  nameWithType.vb: X509Extension.X509Extension(String, Byte(), Boolean)\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  commentId: P:System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  id: Critical\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: Critical\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.Critical\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Critical\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 329\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Gets a Boolean value indicating whether the extension is critical.</p>\\n\"\n  syntax:\n    content: public bool Critical { get; set; }\n    content.vb: Public Property Critical As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the extension is critical; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: X509Extension.Critical\n- uid: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  commentId: M:System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  id: CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  parent: System.Security.Cryptography.X509Certificates.X509Extension\n  langs:\n  - csharp\n  - vb\n  name: CopyFrom(AsnEncodedData)\n  fullName: System.Security.Cryptography.X509Certificates.X509Extension.CopyFrom(System.Security.Cryptography.AsnEncodedData)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyFrom\n    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs\n    startLine: 330\n  assemblies:\n  - System.Security.Cryptography.X509Certificates\n  namespace: System.Security.Cryptography.X509Certificates\n  summary: \"\\n<p>Copies the extension properties of the specified <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override void CopyFrom(AsnEncodedData asnEncodedData)\n    content.vb: Public Overrides Sub CopyFrom(asnEncodedData As AsnEncodedData)\n    parameters:\n    - id: asnEncodedData\n      type: System.Security.Cryptography.AsnEncodedData\n      description: \"\\n<p>The <xref href=\\\"System.Security.Cryptography.AsnEncodedData\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>asnEncodedData</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>asnEncodedData</em> does not have a valid X.509 extension.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: X509Extension.CopyFrom(AsnEncodedData)\nreferences:\n- uid: System.Security.Cryptography.X509Certificates\n  isExternal: false\n  name: System.Security.Cryptography.X509Certificates\n  fullName: System.Security.Cryptography.X509Certificates\n  commentId: N:System.Security.Cryptography.X509Certificates\n  nameWithType: System.Security.Cryptography.X509Certificates\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Cryptography.AsnEncodedData\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: AsnEncodedData\n  fullName: System.Security.Cryptography.AsnEncodedData\n  commentId: T:System.Security.Cryptography.AsnEncodedData\n  nameWithType: AsnEncodedData\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.Security.Cryptography.Oid\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: Oid\n  fullName: System.Security.Cryptography.Oid\n  commentId: T:System.Security.Cryptography.Oid\n  nameWithType: Oid\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}