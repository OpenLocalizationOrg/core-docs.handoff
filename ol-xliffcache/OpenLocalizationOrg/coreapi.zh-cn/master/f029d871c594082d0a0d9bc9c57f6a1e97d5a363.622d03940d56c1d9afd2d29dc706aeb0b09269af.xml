{"nodes":[{"pos":[3250,3261],"content":"ILGenerator","needQuote":true,"nodes":[{"content":"ILGenerator","pos":[0,11]}]},{"pos":[4811,4819],"content":"ILOffset","needQuote":true,"nodes":[{"content":"ILOffset","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The offset in the MSIL stream at which the next instruction will be emitted.","pos":[5691,5772],"source":"\\n<p>The offset in the MSIL stream at which the next instruction will be emitted."},{"content":"&lt;/p&gt;\\n","pos":[5773,5779],"source":" </p>\\n"},{"pos":[6190,6211],"content":"BeginCatchBlock(Type)","needQuote":true,"nodes":[{"content":"BeginCatchBlock(Type)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The catch block is within a filtered exception.","pos":[7185,7237],"source":"\\n<p>The catch block is within a filtered exception."},{"content":"&lt;/p&gt;\\n","pos":[7238,7244],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;exceptionType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located.","pos":[7349,7544],"source":"\\n<p>\\n<em>exceptionType</em> is <strong>null</strong>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located."},{"content":"&lt;/p&gt;\\n","pos":[7545,7551],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","pos":[7656,7759],"source":"\\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block."},{"content":"&lt;/p&gt;\\n","pos":[7760,7766],"source":" </p>\\n"},{"pos":[8151,8175],"content":"BeginExceptFilterBlock()","needQuote":true,"nodes":[{"content":"BeginExceptFilterBlock()","pos":[0,24]}]},{"pos":[9673,9694],"content":"BeginExceptionBlock()","needQuote":true,"nodes":[{"content":"BeginExceptionBlock()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The label for the end of the block.","pos":[10433,10473],"source":"\\n<p>The label for the end of the block."},{"content":"This will leave you in the correct place to execute finally blocks or to finish the try.&lt;/p&gt;\\n","pos":[10474,10568],"source":" This will leave you in the correct place to execute finally blocks or to finish the try.</p>\\n"},{"pos":[10932,10949],"content":"BeginFaultBlock()","needQuote":true,"nodes":[{"content":"BeginFaultBlock()","pos":[0,17]}]},{"pos":[12406,12425],"content":"BeginFinallyBlock()","needQuote":true,"nodes":[{"content":"BeginFinallyBlock()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL being generated is not currently in an exception block.","pos":[13219,13288],"source":"\\n<p>The MSIL being generated is not currently in an exception block."},{"content":"&lt;/p&gt;\\n","pos":[13289,13295],"source":" </p>\\n"},{"pos":[13642,13654],"content":"BeginScope()","needQuote":true,"nodes":[{"content":"BeginScope()","pos":[0,12]}]},{"pos":[14961,14979],"content":"DeclareLocal(Type)","needQuote":true,"nodes":[{"content":"DeclareLocal(Type)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The declared local variable.&lt;/p&gt;\\n","pos":[15971,16010],"source":"\\n<p>The declared local variable.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16129,16180],"source":"\\n<p>\\n<em>localType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16181,16187],"source":" </p>\\n"},{"pos":[16905,16932],"content":"DeclareLocal(Type, Boolean)","needQuote":true,"nodes":[{"content":"DeclareLocal(Type, Boolean)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to pin the object in memory; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18014,18112],"source":"\\n<p>\\n<strong>true</strong> to pin the object in memory; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18464,18515],"source":"\\n<p>\\n<em>localType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18516,18522],"source":" </p>\\n"},{"pos":[19770,19783],"content":"DefineLabel()","needQuote":true,"nodes":[{"content":"DefineLabel()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;Returns a new label that can be used as a token for branching.&lt;/p&gt;\\n","pos":[20457,20530],"source":"\\n<p>Returns a new label that can be used as a token for branching.</p>\\n"},{"pos":[20946,20958],"content":"Emit(OpCode)","needQuote":true,"nodes":[{"content":"Emit(OpCode)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream.","pos":[21712,21798],"source":"\\n<p>The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[21799,21805],"source":" </p>\\n"},{"pos":[22256,22274],"content":"Emit(OpCode, Byte)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Byte)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[23126,23178],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[23179,23185],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character argument pushed onto the stream immediately after the instruction.","pos":[23245,23330],"source":"\\n<p>The character argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[23331,23337],"source":" </p>\\n"},{"pos":[23800,23820],"content":"Emit(OpCode, Double)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Double)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[24756,24808],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"Defined in the &lt;strong&gt;OpCodes&lt;/strong&gt; enumeration.","pos":[24809,24861],"source":" Defined in the <strong>OpCodes</strong> enumeration."},{"content":"&lt;/p&gt;\\n","pos":[24862,24868],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numerical argument pushed onto the stream immediately after the instruction.","pos":[24930,25015],"source":"\\n<p>The numerical argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[25016,25022],"source":" </p>\\n"},{"pos":[25634,25653],"content":"Emit(OpCode, Int16)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Int16)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[26508,26564],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[26565,26571],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Int&lt;/strong&gt; argument pushed onto the stream immediately after the instruction.","pos":[26632,26728],"source":"\\n<p>The <strong>Int</strong> argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[26729,26735],"source":" </p>\\n"},{"pos":[27196,27215],"content":"Emit(OpCode, Int32)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[28070,28122],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[28123,28129],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numerical argument pushed onto the stream immediately after the instruction.","pos":[28190,28275],"source":"\\n<p>The numerical argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[28276,28282],"source":" </p>\\n"},{"pos":[28743,28762],"content":"Emit(OpCode, Int64)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Int64)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[29615,29667],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[29668,29674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The numerical argument pushed onto the stream immediately after the instruction.","pos":[29735,29820],"source":"\\n<p>The numerical argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[29821,29827],"source":" </p>\\n"},{"pos":[30351,30380],"content":"Emit(OpCode, ConstructorInfo)","needQuote":true,"nodes":[{"content":"Emit(OpCode, ConstructorInfo)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[31432,31488],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[31489,31495],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;ConstructorInfo&lt;/strong&gt; representing a constructor.","pos":[31577,31644],"source":"\\n<p>A <strong>ConstructorInfo</strong> representing a constructor."},{"content":"&lt;/p&gt;\\n","pos":[31645,31651],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;con&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[31770,31815],"source":"\\n<p>\\n<em>con</em> is <strong>null</strong>."},{"content":"This exception is new in the .NET Framework 4.&lt;/p&gt;\\n","pos":[31816,31868],"source":" This exception is new in the .NET Framework 4.</p>\\n"},{"pos":[32537,32556],"content":"Emit(OpCode, Label)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Label)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[33448,33504],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[33505,33511],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The label to which to branch from this location.","pos":[33590,33643],"source":"\\n<p>The label to which to branch from this location."},{"content":"&lt;/p&gt;\\n","pos":[33644,33650],"source":" </p>\\n"},{"pos":[34165,34186],"content":"Emit(OpCode, Label[])","needQuote":true,"nodes":[{"content":"Emit(OpCode, Label[])","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[35086,35142],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[35143,35149],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The array of label objects to which to branch from this location.","pos":[35231,35301],"source":"\\n<p>The array of label objects to which to branch from this location."},{"content":"All of the labels will be used.","pos":[35302,35333]},{"content":"&lt;/p&gt;\\n","pos":[35334,35340],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;con&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35459,35504],"source":"\\n<p>\\n<em>con</em> is <strong>null</strong>."},{"content":"This exception is new in the .NET Framework 4.&lt;/p&gt;\\n","pos":[35505,35557],"source":" This exception is new in the .NET Framework 4.</p>\\n"},{"pos":[36293,36319],"content":"Emit(OpCode, LocalBuilder)","needQuote":true,"nodes":[{"content":"Emit(OpCode, LocalBuilder)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[37226,37282],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[37283,37289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A local variable.","pos":[37375,37397],"source":"\\n<p>A local variable."},{"content":"&lt;/p&gt;\\n","pos":[37398,37404],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;local&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[37824,37871],"source":"\\n<p>\\n<em>local</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[37872,37878],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;opcode&lt;/em&gt; is a single-byte instruction, and &lt;em&gt;local&lt;/em&gt; represents a local variable with an index greater than &lt;strong&gt;Byte.MaxValue&lt;/strong&gt;.","pos":[37991,38149],"source":"\\n<p>\\n<em>opcode</em> is a single-byte instruction, and <em>local</em> represents a local variable with an index greater than <strong>Byte.MaxValue</strong>."},{"content":"&lt;/p&gt;\\n","pos":[38150,38156],"source":" </p>\\n"},{"pos":[38702,38731],"content":"Emit(OpCode, SignatureHelper)","needQuote":true,"nodes":[{"content":"Emit(OpCode, SignatureHelper)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[39643,39699],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[39700,39706],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A helper for constructing a signature token.","pos":[39799,39848],"source":"\\n<p>A helper for constructing a signature token."},{"content":"&lt;/p&gt;\\n","pos":[39849,39855],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;signature&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[39974,40025],"source":"\\n<p>\\n<em>signature</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[40026,40032],"source":" </p>\\n"},{"pos":[40548,40571],"content":"Emit(OpCode, FieldInfo)","needQuote":true,"nodes":[{"content":"Emit(OpCode, FieldInfo)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[41473,41529],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[41530,41536],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;FieldInfo&lt;/strong&gt; representing a field.","pos":[41614,41669],"source":"\\n<p>A <strong>FieldInfo</strong> representing a field."},{"content":"&lt;/p&gt;\\n","pos":[41670,41676],"source":" </p>\\n"},{"pos":[42189,42213],"content":"Emit(OpCode, MethodInfo)","needQuote":true,"nodes":[{"content":"Emit(OpCode, MethodInfo)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[43187,43243],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[43244,43250],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;MethodInfo&lt;/strong&gt; representing a method.","pos":[43328,43385],"source":"\\n<p>A <strong>MethodInfo</strong> representing a method."},{"content":"&lt;/p&gt;\\n","pos":[43386,43392],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;meth&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43511,43557],"source":"\\n<p>\\n<em>meth</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43558,43564],"source":" </p>\\n"},{"pos":[44496,44515],"content":"Emit(OpCode, SByte)","needQuote":true,"nodes":[{"content":"Emit(OpCode, SByte)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[45426,45478],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[45479,45485],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character argument pushed onto the stream immediately after the instruction.","pos":[45546,45631],"source":"\\n<p>The character argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[45632,45638],"source":" </p>\\n"},{"pos":[46249,46269],"content":"Emit(OpCode, Single)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Single)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[47204,47256],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[47257,47263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Single&lt;/strong&gt; argument pushed onto the stream immediately after the instruction.","pos":[47325,47424],"source":"\\n<p>The <strong>Single</strong> argument pushed onto the stream immediately after the instruction."},{"content":"&lt;/p&gt;\\n","pos":[47425,47431],"source":" </p>\\n"},{"pos":[48046,48066],"content":"Emit(OpCode, String)","needQuote":true,"nodes":[{"content":"Emit(OpCode, String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be emitted onto the stream.","pos":[48937,48993],"source":"\\n<p>The MSIL instruction to be emitted onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[48994,49000],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The &lt;strong&gt;String&lt;/strong&gt; to be emitted.","pos":[49062,49109],"source":"\\n<p>The <strong>String</strong> to be emitted."},{"content":"&lt;/p&gt;\\n","pos":[49110,49116],"source":" </p>\\n"},{"pos":[49575,49593],"content":"Emit(OpCode, Type)","needQuote":true,"nodes":[{"content":"Emit(OpCode, Type)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The MSIL instruction to be put onto the stream.","pos":[50534,50586],"source":"\\n<p>The MSIL instruction to be put onto the stream."},{"content":"&lt;/p&gt;\\n","pos":[50587,50593],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Type&lt;/strong&gt;.","pos":[50653,50682],"source":"\\n<p>A <strong>Type</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50683,50689],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;cls&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50808,50853],"source":"\\n<p>\\n<em>cls</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50854,50860],"source":" </p>\\n"},{"pos":[51572,51608],"content":"EmitCall(OpCode, MethodInfo, Type[])","needQuote":true,"nodes":[{"content":"EmitCall(OpCode, MethodInfo, Type[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;varargs&lt;/strong&gt; method to be called.","pos":[53173,53227],"source":"\\n<p>The <strong>varargs</strong> method to be called."},{"content":"&lt;/p&gt;\\n","pos":[53228,53234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The types of the optional arguments if the method is a &lt;strong&gt;varargs&lt;/strong&gt; method; otherwise, &lt;strong&gt;null&lt;/strong&gt;.","pos":[53315,53441],"source":"\\n<p>The types of the optional arguments if the method is a <strong>varargs</strong> method; otherwise, <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53442,53448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;opcode&lt;/em&gt; does not specify a method call.&lt;/p&gt;\\n","pos":[53559,53619],"source":"\\n<p>\\n<em>opcode</em> does not specify a method call.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;methodInfo&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[53724,53776],"source":"\\n<p>\\n<em>methodInfo</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[53777,53783],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The calling convention for the method is not &lt;strong&gt;varargs&lt;/strong&gt;, but optional parameter types are supplied.","pos":[53896,54014],"source":"\\n<p>The calling convention for the method is not <strong>varargs</strong>, but optional parameter types are supplied."},{"content":"This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.&lt;/p&gt;\\n","pos":[54015,54137],"source":" This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</p>\\n"},{"pos":[55223,55282],"content":"EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])","needQuote":true,"nodes":[{"content":"EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])","pos":[0,59]}]},{"content":"\\n&lt;p&gt;The managed calling convention to be used.","pos":[56884,56931],"source":"\\n<p>The managed calling convention to be used."},{"content":"&lt;/p&gt;\\n","pos":[56932,56938],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The types of the required arguments to the instruction.","pos":[57180,57240],"source":"\\n<p>The types of the required arguments to the instruction."},{"content":"&lt;/p&gt;\\n","pos":[57241,57247],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The types of the optional arguments for &lt;strong&gt;varargs&lt;/strong&gt; calls.","pos":[57328,57404],"source":"\\n<p>The types of the optional arguments for <strong>varargs</strong> calls."},{"content":"&lt;/p&gt;\\n","pos":[57405,57411],"source":" </p>\\n"},{"pos":[58766,58793],"content":"EmitWriteLine(LocalBuilder)","needQuote":true,"nodes":[{"content":"EmitWriteLine(LocalBuilder)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The local variable whose value is to be written to the console.","pos":[59745,59813],"source":"\\n<p>The local variable whose value is to be written to the console."},{"content":"&lt;/p&gt;\\n","pos":[59814,59820],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localBuilder&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[60482,60536],"source":"\\n<p>\\n<em>localBuilder</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[60537,60543],"source":" </p>\\n"},{"pos":[60994,61018],"content":"EmitWriteLine(FieldInfo)","needQuote":true,"nodes":[{"content":"EmitWriteLine(FieldInfo)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The field whose value is to be written to the console.","pos":[61912,61971],"source":"\\n<p>The field whose value is to be written to the console."},{"content":"&lt;/p&gt;\\n","pos":[61972,61978],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;fld&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62371,62416],"source":"\\n<p>\\n<em>fld</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62417,62423],"source":" </p>\\n"},{"pos":[63189,63210],"content":"EmitWriteLine(String)","needQuote":true,"nodes":[{"content":"EmitWriteLine(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The string to be printed.","pos":[64059,64089],"source":"\\n<p>The string to be printed."},{"content":"&lt;/p&gt;\\n","pos":[64090,64096],"source":" </p>\\n"},{"pos":[64466,64485],"content":"EndExceptionBlock()","needQuote":true,"nodes":[{"content":"EndExceptionBlock()","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The end exception block occurs in an unexpected place in the code stream.","pos":[65204,65282],"source":"\\n<p>The end exception block occurs in an unexpected place in the code stream."},{"content":"&lt;/p&gt;\\n","pos":[65283,65289],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The Microsoft intermediate language (MSIL) being generated is not currently in an exception block.","pos":[65394,65497],"source":"\\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block."},{"content":"&lt;/p&gt;\\n","pos":[65498,65504],"source":" </p>\\n"},{"pos":[65845,65855],"content":"EndScope()","needQuote":true,"nodes":[{"content":"EndScope()","pos":[0,10]}]},{"pos":[67183,67199],"content":"MarkLabel(Label)","needQuote":true,"nodes":[{"content":"MarkLabel(Label)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The label for which to set an index.","pos":[67994,68035],"source":"\\n<p>The label for which to set an index."},{"content":"&lt;/p&gt;\\n","pos":[68036,68042],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;loc&lt;/em&gt; represents an invalid index into the label array.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;An index for &lt;em&gt;loc&lt;/em&gt; has already been defined.","pos":[68153,68296],"source":"\\n<p>\\n<em>loc</em> represents an invalid index into the label array.</p>\\n<p>-or- </p>\\n<p>An index for <em>loc</em> has already been defined."},{"content":"&lt;/p&gt;\\n","pos":[68297,68303],"source":" </p>\\n"},{"pos":[68698,68718],"content":"ThrowException(Type)","needQuote":true,"nodes":[{"content":"ThrowException(Type)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The class of the type of exception to throw.","pos":[69456,69505],"source":"\\n<p>The class of the type of exception to throw."},{"content":"&lt;/p&gt;\\n","pos":[69506,69512],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;excType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[70020,70069],"source":"\\n<p>\\n<em>excType</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[70070,70076],"source":" </p>\\n"},{"pos":[70481,70503],"content":"UsingNamespace(String)","needQuote":true,"nodes":[{"content":"UsingNamespace(String)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The namespace to be used in evaluating locals and watches for the current active lexical scope &lt;/p&gt;\\n","pos":[71332,71438],"source":"\\n<p>The namespace to be used in evaluating locals and watches for the current active lexical scope </p>\\n"},{"content":"\\n&lt;p&gt;Length of &lt;em&gt;usingNamespace&lt;/em&gt; is zero.","pos":[71549,71596],"source":"\\n<p>Length of <em>usingNamespace</em> is zero."},{"content":"&lt;/p&gt;\\n","pos":[71597,71603],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;usingNamespace&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[71708,71764],"source":"\\n<p>\\n<em>usingNamespace</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[71765,71771],"source":" </p>\\n"},{"pos":[72306,72328],"content":"System.Reflection.Emit","needQuote":true,"nodes":[{"content":"System.Reflection.Emit","pos":[0,22]}]},{"pos":[72507,72513],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72673,72683],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[72778,72786],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[72855,72856],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72883,72884],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72954,72962],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[73031,73032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73059,73060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73243,73257],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[73376,73382],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73449,73450],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73500,73506],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73566,73567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73650,73656],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[73723,73724],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73774,73780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[73840,73841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74055,74077],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[74225,74231],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74298,74299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74349,74355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74416,74417]},{"pos":[74472,74478],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74538,74539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74636,74642],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[74709,74710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74760,74766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[74827,74828]},{"pos":[74883,74889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[74949,74950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75195,75226],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[75392,75407],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[75483,75484],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75534,75540],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[75601,75602]},{"pos":[75657,75663],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75723,75724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75830,75845],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[75921,75922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75972,75978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[76039,76040]},{"pos":[76095,76101],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[76161,76162],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76392,76405],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[76506,76517],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[76589,76590],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76617,76618],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76691,76702],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[76774,76775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76802,76803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76978,76987],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[77080,77087],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[77155,77156],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77183,77184],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77253,77260],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[77328,77329],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77356,77357],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77532,77549],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[77658,77673],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[77749,77750],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77777,77778],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77855,77870],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[77946,77947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77974,77975],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78120,78126],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[78256,78261],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78401,78405],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[78575,78580],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[78792,78804],"content":"LocalBuilder","needQuote":true,"nodes":[{"content":"LocalBuilder","pos":[0,12]}]},{"pos":[79000,79007],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[79187,79193],"content":"OpCode","needQuote":true,"nodes":[{"content":"OpCode","pos":[0,6]}]},{"pos":[79368,79372],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[79511,79517],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[79661,79666],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[79807,79812],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[79985,80000],"content":"ConstructorInfo","needQuote":true,"nodes":[{"content":"ConstructorInfo","pos":[0,15]}]},{"pos":[80181,80198],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[80342,80349],"content":"Label[]","needQuote":true,"nodes":[{"content":"Label[]","pos":[0,7]}]},{"pos":[80521,80526],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"content":"[]","pos":[80581,80583]},{"pos":[80663,80668],"content":"Label","needQuote":true,"nodes":[{"content":"Label","pos":[0,5]}]},{"pos":[80722,80724],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[80900,80915],"content":"SignatureHelper","needQuote":true,"nodes":[{"content":"SignatureHelper","pos":[0,15]}]},{"pos":[81144,81153],"content":"FieldInfo","needQuote":true,"nodes":[{"content":"FieldInfo","pos":[0,9]}]},{"pos":[81355,81365],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[81543,81548],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[81690,81696],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[81841,81847],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[81955,81961],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[82081,82085],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[82123,82125]},{"pos":[82188,82192],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[82229,82231],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[82398,82416],"content":"CallingConventions","needQuote":true,"nodes":[{"content":"CallingConventions","pos":[0,18]}]},{"pos":[82630,82647],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[82823,82844],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[83049,83070],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[83279,83304],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]}],"content":"items:\n- uid: System.Reflection.Emit.ILGenerator\n  commentId: T:System.Reflection.Emit.ILGenerator\n  id: ILGenerator\n  parent: System.Reflection.Emit\n  children:\n  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  - System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  - System.Reflection.Emit.ILGenerator.BeginScope\n  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  - System.Reflection.Emit.ILGenerator.DefineLabel\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  - System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  - System.Reflection.Emit.ILGenerator.EndScope\n  - System.Reflection.Emit.ILGenerator.ILOffset\n  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  langs:\n  - csharp\n  - vb\n  name: ILGenerator\n  fullName: System.Reflection.Emit.ILGenerator\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ILGenerator\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Generates Microsoft intermediate language (MSIL) instructions.</p>\\n\"\n  syntax:\n    content: >-\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_ILGenerator))]\n\n      [ComVisible(true)]\n\n      public class ILGenerator : _ILGenerator\n    content.vb: >-\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_ILGenerator))>\n\n      <ComVisible(True)>\n\n      Public Class ILGenerator\n          Implements _ILGenerator\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ILGenerator\n- uid: System.Reflection.Emit.ILGenerator.ILOffset\n  commentId: P:System.Reflection.Emit.ILGenerator.ILOffset\n  id: ILOffset\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: ILOffset\n  fullName: System.Reflection.Emit.ILGenerator.ILOffset\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ILOffset\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1353\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual int ILOffset { get; }\n    content.vb: Public Overridable ReadOnly Property ILOffset As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The offset in the MSIL stream at which the next instruction will be emitted. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ILGenerator.ILOffset\n- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  id: BeginCatchBlock(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginCatchBlock(Type)\n  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginCatchBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1035\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins a catch block.</p>\\n\"\n  syntax:\n    content: public virtual void BeginCatchBlock(Type exceptionType)\n    content.vb: Public Overridable Sub BeginCatchBlock(exceptionType As Type)\n    parameters:\n    - id: exceptionType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the exception. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The catch block is within a filtered exception. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>exceptionType</em> is <strong>null</strong>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginCatchBlock(Type)\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock\n  id: BeginExceptFilterBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginExceptFilterBlock()\n  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginExceptFilterBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1020\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins an exception block for a filtered exception.</p>\\n\"\n  syntax:\n    content: public virtual void BeginExceptFilterBlock()\n    content.vb: Public Overridable Sub BeginExceptFilterBlock\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\\n<p>-or-</p>\\n<p>This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginExceptFilterBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock\n  id: BeginExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginExceptionBlock()\n  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginExceptionBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 938\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins an exception block for a non-filtered exception.</p>\\n\"\n  syntax:\n    content: public virtual Label BeginExceptionBlock()\n    content.vb: Public Overridable Function BeginExceptionBlock As Label\n    return:\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginExceptionBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock\n  id: BeginFaultBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginFaultBlock()\n  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginFaultBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1064\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</p>\\n\"\n  syntax:\n    content: public virtual void BeginFaultBlock()\n    content.vb: Public Overridable Sub BeginFaultBlock\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The MSIL being generated is not currently in an exception block. </p>\\n<p>-or-</p>\\n<p>This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginFaultBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock\n  id: BeginFinallyBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginFinallyBlock()\n  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginFinallyBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1078\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</p>\\n\"\n  syntax:\n    content: public virtual void BeginFinallyBlock()\n    content.vb: Public Overridable Sub BeginFinallyBlock\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The MSIL being generated is not currently in an exception block. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginFinallyBlock()\n- uid: System.Reflection.Emit.ILGenerator.BeginScope\n  commentId: M:System.Reflection.Emit.ILGenerator.BeginScope\n  id: BeginScope\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: BeginScope()\n  fullName: System.Reflection.Emit.ILGenerator.BeginScope()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BeginScope\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1343\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Begins a lexical scope.</p>\\n\"\n  syntax:\n    content: public virtual void BeginScope()\n    content.vb: Public Overridable Sub BeginScope\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.BeginScope()\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  id: DeclareLocal(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: DeclareLocal(Type)\n  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclareLocal\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1262\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Declares a local variable of the specified type.</p>\\n\"\n  syntax:\n    content: public virtual LocalBuilder DeclareLocal(Type localType)\n    content.vb: Public Overridable Function DeclareLocal(localType As Type) As LocalBuilder\n    parameters:\n    - id: localType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the type of the local variable. </p>\\n\"\n    return:\n      type: System.Reflection.Emit.LocalBuilder\n      description: \"\\n<p>The declared local variable.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The containing type has been created by the <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.DeclareLocal(Type)\n- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\n  id: DeclareLocal(System.Type,System.Boolean)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: DeclareLocal(Type, Boolean)\n  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclareLocal\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1267\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</p>\\n\"\n  syntax:\n    content: public virtual LocalBuilder DeclareLocal(Type localType, bool pinned)\n    content.vb: Public Overridable Function DeclareLocal(localType As Type, pinned As Boolean) As LocalBuilder\n    parameters:\n    - id: localType\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the type of the local variable.</p>\\n\"\n    - id: pinned\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to pin the object in memory; otherwise, <strong>false</strong>.</p>\\n\"\n    return:\n      type: System.Reflection.Emit.LocalBuilder\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.Emit.LocalBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the local variable.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localType</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The containing type has been created by the <xref href=\\\"System.Reflection.Emit.TypeBuilder.CreateType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n<p>-or-</p>\\n<p>The method body of the enclosing method has been created by the <xref href=\\\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The method with which this <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is associated is not represented by a <xref href=\\\"System.Reflection.Emit.MethodBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.DeclareLocal(Type, Boolean)\n- uid: System.Reflection.Emit.ILGenerator.DefineLabel\n  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel\n  id: DefineLabel\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: DefineLabel()\n  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DefineLabel\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1110\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Declares a new label.</p>\\n\"\n  syntax:\n    content: public virtual Label DefineLabel()\n    content.vb: Public Overridable Function DefineLabel As Label\n    return:\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>Returns a new label that can be used as a token for branching.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.DefineLabel()\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  id: Emit(System.Reflection.Emit.OpCode)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 429\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)\n  id: Emit(System.Reflection.Emit.OpCode,System.Byte)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Byte)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Byte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 436\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, byte arg)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Byte)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: arg\n      type: System.Byte\n      description: \"\\n<p>The character argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Byte)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)\n  id: Emit(System.Reflection.Emit.OpCode,System.Double)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Double)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 763\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Emit(OpCode opcode, double arg)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Emit(opcode As OpCode, arg As Double)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. Defined in the <strong>OpCodes</strong> enumeration. </p>\\n\"\n    - id: arg\n      type: System.Double\n      description: \"\\n<p>The numerical argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Double)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int16)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Int16)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 457\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, short arg)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Short)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: arg\n      type: System.Int16\n      description: \"\\n<p>The <strong>Int</strong> argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Int16)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int32)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Int32)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 466\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, int arg)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Integer)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: arg\n      type: System.Int32\n      description: \"\\n<p>The numerical argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Int32)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)\n  id: Emit(System.Reflection.Emit.OpCode,System.Int64)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Int64)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 739\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, long arg)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Long)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: arg\n      type: System.Int64\n      description: \"\\n<p>The numerical argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Int64)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, ConstructorInfo)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 668\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ComVisible(true)]\n\n      public virtual void Emit(OpCode opcode, ConstructorInfo con)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ComVisible(True)>\n\n      Public Overridable Sub Emit(opcode As OpCode, con As ConstructorInfo)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: con\n      type: System.Reflection.ConstructorInfo\n      description: \"\\n<p>A <strong>ConstructorInfo</strong> representing a constructor. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>con</em> is <strong>null</strong>. This exception is new in the .NET Framework 4.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, ConstructorInfo)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Label)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 778\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, Label label)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, label As Label)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: label\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The label to which to branch from this location. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Label)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Label[])\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 804\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, Label[] labels)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, labels As Label())\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: labels\n      type: System.Reflection.Emit.Label[]\n      description: \"\\n<p>The array of label objects to which to branch from this location. All of the labels will be used. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>con</em> is <strong>null</strong>. This exception is new in the .NET Framework 4.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label())\n  name.vb: Emit(OpCode, Label())\n  nameWithType: ILGenerator.Emit(OpCode, Label[])\n  nameWithType.vb: ILGenerator.Emit(OpCode, Label())\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, LocalBuilder)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 850\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, LocalBuilder local)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, local As LocalBuilder)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: local\n      type: System.Reflection.Emit.LocalBuilder\n      description: \"\\n<p>A local variable. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The parent method of the <em>local</em> parameter does not match the method associated with this <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>local</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>opcode</em> is a single-byte instruction, and <em>local</em> represents a local variable with an index greater than <strong>Byte.MaxValue</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, LocalBuilder)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, SignatureHelper)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 633\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, SignatureHelper signature)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, signature As SignatureHelper)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: signature\n      type: System.Reflection.Emit.SignatureHelper\n      description: \"\\n<p>A helper for constructing a signature token. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>signature</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, SignatureHelper)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, FieldInfo)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 827\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, FieldInfo field)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, field As FieldInfo)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: field\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>A <strong>FieldInfo</strong> representing a field. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, FieldInfo)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, MethodInfo)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 474\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Emit(OpCode opcode, MethodInfo meth)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Emit(opcode As OpCode, meth As MethodInfo)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: meth\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <strong>MethodInfo</strong> representing a method. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>meth</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>\\n<em>meth</em> is a generic method for which the <xref href=\\\"System.Reflection.MethodInfo.IsGenericMethodDefinition\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is <strong>false</strong>.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, MethodInfo)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)\n  id: Emit(System.Reflection.Emit.OpCode,System.SByte)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, SByte)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.SByte)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 443\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public void Emit(OpCode opcode, sbyte arg)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Sub Emit(opcode As OpCode, arg As SByte)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: arg\n      type: System.SByte\n      description: \"\\n<p>The character argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ILGenerator.Emit(OpCode, SByte)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)\n  id: Emit(System.Reflection.Emit.OpCode,System.Single)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Single)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Single)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 752\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Emit(OpCode opcode, float arg)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Emit(opcode As OpCode, arg As Single)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: arg\n      type: System.Single\n      description: \"\\n<p>The <strong>Single</strong> argument pushed onto the stream immediately after the instruction. </p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Single)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)\n  id: Emit(System.Reflection.Emit.OpCode,System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, String)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 837\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</p>\\n\"\n  syntax:\n    content: public virtual void Emit(OpCode opcode, string str)\n    content.vb: Public Overridable Sub Emit(opcode As OpCode, str As String)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. </p>\\n\"\n    - id: str\n      type: System.String\n      description: \"\\n<p>The <strong>String</strong> to be emitted. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, String)\n- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)\n  id: Emit(System.Reflection.Emit.OpCode,System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: Emit(OpCode, Type)\n  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Emit\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 712\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void Emit(OpCode opcode, Type cls)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub Emit(opcode As OpCode, cls As Type)\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be put onto the stream. </p>\\n\"\n    - id: cls\n      type: System.Type\n      description: \"\\n<p>A <strong>Type</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>cls</em> is <strong>null</strong>. </p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.Emit(OpCode, Type)\n- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EmitCall(OpCode, MethodInfo, Type[])\n  fullName: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmitCall\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 595\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts a <strong>call</strong> or <strong>callvirt</strong> instruction onto the Microsoft intermediate language (MSIL) stream to call a <strong>varargs</strong> method.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub EmitCall(opcode As OpCode, methodInfo As MethodInfo, optionalParameterTypes As Type())\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. Must be <xref href=\\\"System.Reflection.Emit.OpCodes.Call\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, <xref href=\\\"System.Reflection.Emit.OpCodes.Callvirt\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <xref href=\\\"System.Reflection.Emit.OpCodes.Newobj\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: methodInfo\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>The <strong>varargs</strong> method to be called. </p>\\n\"\n    - id: optionalParameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the optional arguments if the method is a <strong>varargs</strong> method; otherwise, <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>opcode</em> does not specify a method call.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>methodInfo</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The calling convention for the method is not <strong>varargs</strong>, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type())\n  name.vb: EmitCall(OpCode, MethodInfo, Type())\n  nameWithType: ILGenerator.EmitCall(OpCode, MethodInfo, Type[])\n  nameWithType.vb: ILGenerator.EmitCall(OpCode, MethodInfo, Type())\n- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmitCalli\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 506\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Puts a <xref href=\\\"System.Reflection.Emit.OpCodes.Calli\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overridable Sub EmitCalli(opcode As OpCode, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), optionalParameterTypes As Type())\n    parameters:\n    - id: opcode\n      type: System.Reflection.Emit.OpCode\n      description: \"\\n<p>The MSIL instruction to be emitted onto the stream. Must be <xref href=\\\"System.Reflection.Emit.OpCodes.Calli\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: callingConvention\n      type: System.Reflection.CallingConventions\n      description: \"\\n<p>The managed calling convention to be used. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the result. </p>\\n\"\n    - id: parameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the required arguments to the instruction. </p>\\n\"\n    - id: optionalParameterTypes\n      type: System.Type[]\n      description: \"\\n<p>The types of the optional arguments for <strong>varargs</strong> calls. </p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>\\n<em>optionalParameterTypes</em> is not <strong>null</strong>, but <em>callingConvention</em> does not include the <xref href=\\\"System.Reflection.CallingConventions.VarArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> flag.</p>\\n\"\n  attributes:\n  - type: System.Security.SecuritySafeCriticalAttribute\n    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type())\n  name.vb: EmitCalli(OpCode, CallingConventions, Type, Type(), Type())\n  nameWithType: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])\n  nameWithType.vb: ILGenerator.EmitCalli(OpCode, CallingConventions, Type, Type(), Type())\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EmitWriteLine(LocalBuilder)\n  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmitWriteLine\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1192\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\\\"System.Console.WriteLine\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given local variable.</p>\\n\"\n  syntax:\n    content: public virtual void EmitWriteLine(LocalBuilder localBuilder)\n    content.vb: Public Overridable Sub EmitWriteLine(localBuilder As LocalBuilder)\n    parameters:\n    - id: localBuilder\n      type: System.Reflection.Emit.LocalBuilder\n      description: \"\\n<p>The local variable whose value is to be written to the console. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The type of <em>localBuilder</em> is <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Reflection.Emit.EnumBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which are not supported. </p>\\n<p>-or-</p>\\n<p>There is no overload of <xref href=\\\"System.Console.WriteLine\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that accepts the type of <em>localBuilder</em>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localBuilder</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  id: EmitWriteLine(System.Reflection.FieldInfo)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EmitWriteLine(FieldInfo)\n  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmitWriteLine\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1222\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Emits the Microsoft intermediate language (MSIL) necessary to call <xref href=\\\"System.Console.WriteLine\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the given field.</p>\\n\"\n  syntax:\n    content: public virtual void EmitWriteLine(FieldInfo fld)\n    content.vb: Public Overridable Sub EmitWriteLine(fld As FieldInfo)\n    parameters:\n    - id: fld\n      type: System.Reflection.FieldInfo\n      description: \"\\n<p>The field whose value is to be written to the console. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>There is no overload of the <xref href=\\\"System.Console.WriteLine\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method that accepts the type of the specified field. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>fld</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The type of the field is <xref href=\\\"System.Reflection.Emit.TypeBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Reflection.Emit.EnumBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which are not supported. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)\n- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  id: EmitWriteLine(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EmitWriteLine(String)\n  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmitWriteLine\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1181\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Emits the Microsoft intermediate language (MSIL) to call <xref href=\\\"System.Console.WriteLine\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with a string.</p>\\n\"\n  syntax:\n    content: public virtual void EmitWriteLine(string value)\n    content.vb: Public Overridable Sub EmitWriteLine(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The string to be printed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.EmitWriteLine(String)\n- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  commentId: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock\n  id: EndExceptionBlock\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EndExceptionBlock()\n  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndExceptionBlock\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 982\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Ends an exception block.</p>\\n\"\n  syntax:\n    content: public virtual void EndExceptionBlock()\n    content.vb: Public Overridable Sub\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The end exception block occurs in an unexpected place in the code stream. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.EndExceptionBlock()\n- uid: System.Reflection.Emit.ILGenerator.EndScope\n  commentId: M:System.Reflection.Emit.ILGenerator.EndScope\n  id: EndScope\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: EndScope()\n  fullName: System.Reflection.Emit.ILGenerator.EndScope()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EndScope\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1348\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Ends a lexical scope.</p>\\n\"\n  syntax:\n    content: public virtual void EndScope()\n    content.vb: Public Overridable Sub\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.EndScope()\n- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  id: MarkLabel(System.Reflection.Emit.Label)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: MarkLabel(Label)\n  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MarkLabel\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1128\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</p>\\n\"\n  syntax:\n    content: public virtual void MarkLabel(Label loc)\n    content.vb: Public Overridable Sub MarkLabel(loc As Label)\n    parameters:\n    - id: loc\n      type: System.Reflection.Emit.Label\n      description: \"\\n<p>The label for which to set an index. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>loc</em> represents an invalid index into the label array.</p>\\n<p>-or- </p>\\n<p>An index for <em>loc</em> has already been defined. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.MarkLabel(Label)\n- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  commentId: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  id: ThrowException(System.Type)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: ThrowException(Type)\n  fullName: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ThrowException\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1150\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Emits an instruction to throw an exception.</p>\\n\"\n  syntax:\n    content: public virtual void ThrowException(Type excType)\n    content.vb: Public Overridable Sub ThrowException(excType As Type)\n    parameters:\n    - id: excType\n      type: System.Type\n      description: \"\\n<p>The class of the type of exception to throw. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>excType</em> is not the <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class or a derived class of <xref href=\\\"System.Exception\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>The type does not have a default constructor. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>excType</em> is <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.ThrowException(Type)\n- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  commentId: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  id: UsingNamespace(System.String)\n  parent: System.Reflection.Emit.ILGenerator\n  langs:\n  - csharp\n  - vb\n  name: UsingNamespace(String)\n  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: UsingNamespace\n    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs\n    startLine: 1300\n  assemblies:\n  - System.Reflection.Emit.ILGeneration\n  namespace: System.Reflection.Emit\n  summary: \"\\n<p>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</p>\\n\"\n  syntax:\n    content: public virtual void UsingNamespace(string usingNamespace)\n    content.vb: Public Overridable Sub UsingNamespace(usingNamespace As String)\n    parameters:\n    - id: usingNamespace\n      type: System.String\n      description: \"\\n<p>The namespace to be used in evaluating locals and watches for the current active lexical scope </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>Length of <em>usingNamespace</em> is zero. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>usingNamespace</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This <xref href=\\\"System.Reflection.Emit.ILGenerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> belongs to a <xref href=\\\"System.Reflection.Emit.DynamicMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ILGenerator.UsingNamespace(String)\nreferences:\n- uid: System.Reflection.Emit\n  isExternal: false\n  name: System.Reflection.Emit\n  fullName: System.Reflection.Emit\n  nameWithType: System.Reflection.Emit\n  commentId: N:System.Reflection.Emit\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Reflection.Emit.Label\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: Label\n  fullName: System.Reflection.Emit.Label\n  nameWithType: Label\n  commentId: T:System.Reflection.Emit.Label\n- uid: System.Reflection.Emit.LocalBuilder\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: LocalBuilder\n  fullName: System.Reflection.Emit.LocalBuilder\n  nameWithType: LocalBuilder\n  commentId: T:System.Reflection.Emit.LocalBuilder\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.Emit.OpCode\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: OpCode\n  fullName: System.Reflection.Emit.OpCode\n  nameWithType: OpCode\n  commentId: T:System.Reflection.Emit.OpCode\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Reflection.ConstructorInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ConstructorInfo\n  fullName: System.Reflection.ConstructorInfo\n  nameWithType: ConstructorInfo\n  commentId: T:System.Reflection.ConstructorInfo\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.Emit.Label[]\n  name: Label[]\n  fullName: System.Reflection.Emit.Label[]\n  fullname.vb: System.Reflection.Emit.Label()\n  name.vb: Label()\n  spec.csharp:\n  - uid: System.Reflection.Emit.Label\n    name: Label\n    fullName: System.Reflection.Emit.Label\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Reflection.Emit.Label\n    name: Label\n    fullName: System.Reflection.Emit.Label\n  - name: ()\n    fullName: ()\n  nameWithType: Label[]\n  nameWithType.vb: Label()\n- uid: System.Reflection.Emit.SignatureHelper\n  parent: System.Reflection.Emit\n  isExternal: false\n  name: SignatureHelper\n  fullName: System.Reflection.Emit.SignatureHelper\n  nameWithType: SignatureHelper\n  commentId: T:System.Reflection.Emit.SignatureHelper\n- uid: System.Reflection.FieldInfo\n  parent: System.Reflection\n  isExternal: false\n  name: FieldInfo\n  fullName: System.Reflection.FieldInfo\n  nameWithType: FieldInfo\n  commentId: T:System.Reflection.FieldInfo\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  nameWithType: SByte\n  commentId: T:System.SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.CallingConventions\n  parent: System.Reflection\n  isExternal: false\n  name: CallingConventions\n  fullName: System.Reflection.CallingConventions\n  nameWithType: CallingConventions\n  commentId: T:System.Reflection.CallingConventions\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n"}