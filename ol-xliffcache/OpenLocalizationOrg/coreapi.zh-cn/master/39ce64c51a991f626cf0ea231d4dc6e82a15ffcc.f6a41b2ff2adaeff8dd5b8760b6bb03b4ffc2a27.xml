{"nodes":[{"pos":[342,352],"content":"StackTrace","needQuote":true,"nodes":[{"content":"StackTrace","pos":[0,10]}]},{"pos":[2260,2290],"content":"StackTrace(Exception, Boolean)","needQuote":true,"nodes":[{"content":"StackTrace(Exception, Boolean)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;The exception object from which to construct the stack trace.","pos":[3256,3322],"source":"\\n<p>The exception object from which to construct the stack trace."},{"content":"&lt;/p&gt;\\n","pos":[3323,3329],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to capture the file name, line number, and column number; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[3402,3523],"source":"\\n<p>\\n<strong>true</strong> to capture the file name, line number, and column number; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3524,3530],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The parameter &lt;em&gt;e&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3649,3704],"source":"\\n<p>The parameter <em>e</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3705,3711],"source":" </p>\\n"},{"pos":[4094,4105],"content":"GetFrames()","needQuote":true,"nodes":[{"content":"GetFrames()","pos":[0,11]}]},{"pos":[5564,5574],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A readable representation of the stack trace.&lt;/p&gt;\\n","pos":[6305,6361],"source":"\\n<p>A readable representation of the stack trace.</p>\\n"},{"pos":[6589,6607],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[6774,6780],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6953,6967],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7086,7092],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7159,7160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7210,7216],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7276,7277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7360,7366],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7433,7434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7484,7490],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7550,7551],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7765,7787],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7935,7941],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8008,8009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8059,8065],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8126,8127]},{"pos":[8182,8188],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8248,8249],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8346,8352],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8419,8420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8470,8476],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8537,8538]},{"pos":[8593,8599],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8659,8660],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8905,8936],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9102,9117],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9193,9194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9244,9250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9311,9312]},{"pos":[9367,9373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9433,9434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9540,9555],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9631,9632],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9682,9688],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9749,9750]},{"pos":[9805,9811],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9871,9872],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10102,10115],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10216,10227],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10299,10300],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10327,10328],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10401,10412],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10484,10485],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10512,10513],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10688,10697],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10790,10797],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10865,10866],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10893,10894],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10963,10970],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11038,11039],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11066,11067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11242,11259],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11368,11383],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11459,11460],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11487,11488],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11565,11580],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11656,11657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11684,11685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11830,11836],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11970,11979],"content":"Exception","needQuote":true,"nodes":[{"content":"Exception","pos":[0,9]}]},{"pos":[12134,12141],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[12270,12282],"content":"StackFrame[]","needQuote":true,"nodes":[{"content":"StackFrame[]","pos":[0,12]}]},{"pos":[12462,12472],"content":"StackFrame","needQuote":true,"nodes":[{"content":"StackFrame","pos":[0,10]}]},{"content":"[]","pos":[12528,12530]},{"pos":[12611,12621],"content":"StackFrame","needQuote":true,"nodes":[{"content":"StackFrame","pos":[0,10]}]},{"pos":[12676,12678],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[12838,12848],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[12943,12951],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13020,13021],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13048,13049],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13119,13127],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[13196,13197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13224,13225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13380,13386],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[13529,13550],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Diagnostics.StackTrace\n  commentId: T:System.Diagnostics.StackTrace\n  id: StackTrace\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  - System.Diagnostics.StackTrace.GetFrames\n  - System.Diagnostics.StackTrace.ToString\n  langs:\n  - csharp\n  - vb\n  name: StackTrace\n  fullName: System.Diagnostics.StackTrace\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StackTrace\n    path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n    startLine: 266\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Represents a stack trace, which is an ordered collection of one or more stack frames.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class StackTrace\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class StackTrace\n  seealso:\n  - type: System.Exception.StackTrace\n    commentId: P:System.Exception.StackTrace\n  - type: System.Environment.StackTrace\n    commentId: P:System.Environment.StackTrace\n  - type: System.Runtime.Serialization.Formatters.ServerFault.StackTrace\n    commentId: P:System.Runtime.Serialization.Formatters.ServerFault.StackTrace\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: StackTrace\n- uid: System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  commentId: M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)\n  id: '#ctor(System.Exception,System.Boolean)'\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  - vb\n  name: StackTrace(Exception, Boolean)\n  fullName: System.Diagnostics.StackTrace.StackTrace(System.Exception, System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n    startLine: 354\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.StackTrace\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, using the provided exception object and optionally capturing source information.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public StackTrace(Exception e, bool fNeedFileInfo)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Sub New(e As Exception, fNeedFileInfo As Boolean)\n    parameters:\n    - id: e\n      type: System.Exception\n      description: \"\\n<p>The exception object from which to construct the stack trace. </p>\\n\"\n    - id: fNeedFileInfo\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to capture the file name, line number, and column number; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The parameter <em>e</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Exception\n    commentId: T:System.Exception\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StackTrace.StackTrace(Exception, Boolean)\n- uid: System.Diagnostics.StackTrace.GetFrames\n  commentId: M:System.Diagnostics.StackTrace.GetFrames\n  id: GetFrames\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  - vb\n  name: GetFrames()\n  fullName: System.Diagnostics.StackTrace.GetFrames()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetFrames\n    path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n    startLine: 557\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Returns a copy of all stack frames in the current stack trace.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual StackFrame[] GetFrames()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Function GetFrames As StackFrame()\n    return:\n      type: System.Diagnostics.StackFrame[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Diagnostics.StackFrame\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the function calls in the stack trace.</p>\\n\"\n  seealso:\n  - type: System.Diagnostics.StackFrame\n    commentId: T:System.Diagnostics.StackFrame\n  - type: System.Diagnostics.StackTrace.GetFrame(System.Int32)\n    commentId: M:System.Diagnostics.StackTrace.GetFrame(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StackTrace.GetFrames()\n- uid: System.Diagnostics.StackTrace.ToString\n  commentId: M:System.Diagnostics.StackTrace.ToString\n  id: ToString\n  parent: System.Diagnostics.StackTrace\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Diagnostics.StackTrace.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Diagnostics/Stacktrace.cs\n    startLine: 573\n  assemblies:\n  - System.Diagnostics.StackTrace\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Builds a readable representation of the stack trace.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A readable representation of the stack trace.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StackTrace.ToString()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Exception\n  parent: System\n  isExternal: false\n  name: Exception\n  fullName: System.Exception\n  nameWithType: Exception\n  commentId: T:System.Exception\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Diagnostics.StackFrame[]\n  name: StackFrame[]\n  fullName: System.Diagnostics.StackFrame[]\n  fullname.vb: System.Diagnostics.StackFrame()\n  name.vb: StackFrame()\n  spec.csharp:\n  - uid: System.Diagnostics.StackFrame\n    name: StackFrame\n    fullName: System.Diagnostics.StackFrame\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Diagnostics.StackFrame\n    name: StackFrame\n    fullName: System.Diagnostics.StackFrame\n  - name: ()\n    fullName: ()\n  nameWithType: StackFrame[]\n  nameWithType.vb: StackFrame()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}