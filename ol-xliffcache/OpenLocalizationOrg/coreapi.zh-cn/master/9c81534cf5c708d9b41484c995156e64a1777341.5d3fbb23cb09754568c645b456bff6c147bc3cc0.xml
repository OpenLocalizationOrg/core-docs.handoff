{"nodes":[{"pos":[2163,2173],"content":"SortedList","needQuote":true,"nodes":[{"content":"SortedList","pos":[0,10]}]},{"pos":[4963,4975],"content":"SortedList()","needQuote":true,"nodes":[{"content":"SortedList()","pos":[0,12]}]},{"pos":[6462,6483],"content":"SortedList(IComparer)","needQuote":true,"nodes":[{"content":"SortedList(IComparer)","pos":[0,21]}]},{"pos":[8468,8496],"content":"SortedList(IComparer, Int32)","needQuote":true,"nodes":[{"content":"SortedList(IComparer, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[10203,10246],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[10247,10253],"source":" </p>\\n"},{"pos":[11211,11234],"content":"SortedList(IDictionary)","needQuote":true,"nodes":[{"content":"SortedList(IDictionary)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12642,12685],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12686,12692],"source":" </p>\\n"},{"pos":[13784,13818],"content":"SortedList(IDictionary, IComparer)","needQuote":true,"nodes":[{"content":"SortedList(IDictionary, IComparer)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;d&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[15688,15731],"source":"\\n<p>\\n<em>d</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[15732,15738],"source":" </p>\\n"},{"pos":[16835,16852],"content":"SortedList(Int32)","needQuote":true,"nodes":[{"content":"SortedList(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCapacity&lt;/em&gt; is less than zero.","pos":[18228,18278],"source":"\\n<p>\\n<em>initialCapacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[18279,18285],"source":" </p>\\n"},{"pos":[19065,19073],"content":"Capacity","needQuote":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;There is not enough memory available on the system.&lt;/p&gt;\\n","pos":[20395,20457],"source":"\\n<p>There is not enough memory available on the system.</p>\\n"},{"pos":[20898,20903],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[22325,22336],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[23768,23778],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[25208,25222],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[27036,27048],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key associated with the value to get or set.","pos":[27865,27918],"source":"\\n<p>The key associated with the value to get or set."},{"content":"&lt;/p&gt;\\n","pos":[27919,27925],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[28332,28377],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[28378,28384],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The comparer throws an exception.","pos":[29225,29263],"source":"\\n<p>The comparer throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[29264,29270],"source":" </p>\\n"},{"pos":[30233,30237],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[31932,31940],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[33587,33593],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[35376,35395],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The key of the element to add.","pos":[36213,36248],"source":"\\n<p>The key of the element to add."},{"content":"&lt;/p&gt;\\n","pos":[36249,36255],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to add.","pos":[36319,36356],"source":"\\n<p>The value of the element to add."},{"content":"The value can be &lt;strong&gt;null&lt;/strong&gt;.","pos":[36357,36396],"source":" The value can be <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36397,36403],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36522,36567],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36568,36574],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The comparer throws an exception.","pos":[37937,37975],"source":"\\n<p>The comparer throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[37976,37982],"source":" </p>\\n"},{"pos":[38773,38780],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[40480,40487],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[41856,41872],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[43211,43256],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[43257,43263],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The comparer throws an exception.","pos":[43376,43414],"source":"\\n<p>The comparer throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[43415,43421],"source":" </p>\\n"},{"pos":[44161,44180],"content":"ContainsKey(Object)","needQuote":true,"nodes":[{"content":"ContainsKey(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[45530,45575],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[45576,45582],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The comparer throws an exception.","pos":[45695,45733],"source":"\\n<p>The comparer throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[45734,45740],"source":" </p>\\n"},{"pos":[46555,46576],"content":"ContainsValue(Object)","needQuote":true,"nodes":[{"content":"ContainsValue(Object)","pos":[0,21]}]},{"pos":[48565,48585],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[50050,50118],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[50119,50125],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[50244,50291],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[50292,50298],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;arrayIndex&lt;/em&gt; is less than zero.","pos":[50415,50460],"source":"\\n<p>\\n<em>arrayIndex</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[50461,50467],"source":" </p>\\n"},{"pos":[51912,51929],"content":"GetByIndex(Int32)","needQuote":true,"nodes":[{"content":"GetByIndex(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the value to get.","pos":[52737,52783],"source":"\\n<p>The zero-based index of the value to get."},{"content":"&lt;/p&gt;\\n","pos":[52784,52790],"source":" </p>\\n"},{"pos":[53932,53947],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[55722,55735],"content":"GetKey(Int32)","needQuote":true,"nodes":[{"content":"GetKey(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The zero-based index of the key to get.","pos":[56525,56569],"source":"\\n<p>The zero-based index of the key to get."},{"content":"&lt;/p&gt;\\n","pos":[56570,56576],"source":" </p>\\n"},{"pos":[57409,57421],"content":"GetKeyList()","needQuote":true,"nodes":[{"content":"GetKeyList()","pos":[0,12]}]},{"pos":[59014,59028],"content":"GetValueList()","needQuote":true,"nodes":[{"content":"GetValueList()","pos":[0,14]}]},{"pos":[60674,60692],"content":"IndexOfKey(Object)","needQuote":true,"nodes":[{"content":"IndexOfKey(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62027,62072],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[62073,62079],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The comparer throws an exception.","pos":[62192,62230],"source":"\\n<p>The comparer throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[62231,62237],"source":" </p>\\n"},{"pos":[62913,62933],"content":"IndexOfValue(Object)","needQuote":true,"nodes":[{"content":"IndexOfValue(Object)","pos":[0,20]}]},{"pos":[64919,64933],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.","pos":[65713,65751],"source":"\\n<p>The key of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[65752,65758],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[65877,65922],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[65923,65929],"source":" </p>\\n"},{"pos":[66871,66886],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to remove.","pos":[67674,67725],"source":"\\n<p>The zero-based index of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[67726,67732],"source":" </p>\\n"},{"pos":[68946,68971],"content":"SetByIndex(Int32, Object)","needQuote":true,"nodes":[{"content":"SetByIndex(Int32, Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The zero-based index at which to save &lt;em&gt;value&lt;/em&gt;.","pos":[69809,69867],"source":"\\n<p>The zero-based index at which to save <em>value</em>."},{"content":"&lt;/p&gt;\\n","pos":[69868,69874],"source":" </p>\\n"},{"pos":[71214,71238],"content":"Synchronized(SortedList)","needQuote":true,"nodes":[{"content":"Synchronized(SortedList)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;list&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[72694,72740],"source":"\\n<p>\\n<em>list</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[72741,72747],"source":" </p>\\n"},{"pos":[73426,73453],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[75291,75303],"content":"TrimToSize()","needQuote":true,"nodes":[{"content":"TrimToSize()","pos":[0,12]}]},{"pos":[76876,76894],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[77061,77067],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77241,77252],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[77465,77476],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[77689,77700],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[77899,77909],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[78004,78012],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78081,78082],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78109,78110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78180,78188],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[78257,78258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78285,78286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78469,78483],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[78602,78608],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[78675,78676],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78726,78732],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[78792,78793],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78876,78882],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[78949,78950],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79000,79006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79066,79067],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79281,79303],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[79451,79457],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[79524,79525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79575,79581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[79642,79643]},{"pos":[79698,79704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[79764,79765],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79862,79868],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[79935,79936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79986,79992],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80053,80054]},{"pos":[80109,80115],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80175,80176],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80421,80452],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[80618,80633],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[80709,80710],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80760,80766],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[80827,80828]},{"pos":[80883,80889],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[80949,80950],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81056,81071],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[81147,81148],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81198,81204],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81265,81266]},{"pos":[81321,81327],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81387,81388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81618,81631],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[81732,81743],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[81815,81816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81843,81844],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81917,81928],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[82000,82001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82028,82029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82204,82213],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[82306,82313],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[82381,82382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82409,82410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82479,82486],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[82554,82555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82582,82583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82758,82775],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[82884,82899],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[82975,82976],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83003,83004],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83081,83096],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[83172,83173],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83200,83201],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83496,83509],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[83626,83637],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[83696,83697],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83724,83725],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83806,83817],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[83876,83877],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83904,83905],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84260,84272],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[84405,84415],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[84482,84483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84510,84511],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84600,84610],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[84677,84678],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84705,84706],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85047,85062],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[85266,85279],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[85341,85342],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85369,85370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85448,85464],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[85529,85530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85557,85558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85936,85953],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[86165,86180],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[86244,86245],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86272,86273],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86353,86371],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[86438,86439],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86466,86467],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86702,86708],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[86873,86897],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[87076,87087],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[87146,87147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87214,87225],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87302,87303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87416,87427],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[87486,87487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87554,87565],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[87642,87643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87871,87880],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[88086,88109],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[88304,88314],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[88381,88382],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88449,88460],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88537,88538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88659,88669],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[88736,88737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88804,88815],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[88892,88893],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89146,89164],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[89386,89412],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[89719,89732],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[89794,89795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89862,89873],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[89950,89951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90061,90077],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[90142,90143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90210,90221],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[90298,90299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90588,90598],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[90798,90826],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[91141,91156],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[91220,91221],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91288,91299],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[91376,91377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91489,91507],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[91574,91575],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91642,91653],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[91730,91731],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91993,92004],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[92177,92186],"content":"IComparer","needQuote":true,"nodes":[{"content":"IComparer","pos":[0,9]}]},{"pos":[92363,92368],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92557,92562],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[92816,92827],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[93048,93055],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[93254,93264],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[93537,93551],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[93840,93852],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[94091,94095],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[94178,94179]},{"pos":[94232,94238],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[94299,94300]},{"pos":[94401,94405],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[94487,94488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94538,94544],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[94604,94605],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94884,94888],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[95137,95145],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[95403,95409],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[95687,95706],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[95882,95885],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[95966,95967],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96017,96023],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[96084,96085]},{"pos":[96140,96146],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96206,96207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96318,96321],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[96402,96403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96453,96459],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[96520,96521]},{"pos":[96576,96582],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[96642,96643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96899,96906],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[97029,97034],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[97117,97118],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97145,97146],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97230,97235],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[97318,97319],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97346,97347],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97582,97598],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[97755,97763],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[97849,97850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97900,97906],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97966,97967],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98069,98077],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[98163,98164],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98214,98220],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98280,98281],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98553,98573],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[98751,98757],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[98820,98821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98870,98875],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[98914,98915]},{"pos":[98969,98974],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99033,99034],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99146,99152],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[99215,99216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99265,99270],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[99309,99310]},{"pos":[99364,99369],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[99428,99429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99640,99645],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[99841,99856],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[99995,100008],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[100099,100100],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100127,100128],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100220,100233],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[100324,100325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100352,100353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100579,100600],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[100837,100842],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[101070,101084],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[101237,101243],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[101327,101328],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101378,101384],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101444,101445],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101545,101551],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[101635,101636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101686,101692],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[101752,101753],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101975,101985],"content":"SortedList","needQuote":true,"nodes":[{"content":"SortedList","pos":[0,10]}]},{"pos":[102221,102236],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[102375,102388],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[102458,102459],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102486,102487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102579,102592],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[102662,102663],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[102690,102691],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[102907,102918],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[103106,103133],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[103338,103358],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[103543,103564],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[103751,103771],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[103973,103994],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[104203,104228],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[104441,104458],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Collections.SortedList\n  commentId: T:System.Collections.SortedList\n  id: SortedList\n  parent: System.Collections\n  children:\n  - System.Collections.SortedList.#ctor\n  - System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  - System.Collections.SortedList.#ctor(System.Int32)\n  - System.Collections.SortedList.Add(System.Object,System.Object)\n  - System.Collections.SortedList.Capacity\n  - System.Collections.SortedList.Clear\n  - System.Collections.SortedList.Clone\n  - System.Collections.SortedList.Contains(System.Object)\n  - System.Collections.SortedList.ContainsKey(System.Object)\n  - System.Collections.SortedList.ContainsValue(System.Object)\n  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  - System.Collections.SortedList.Count\n  - System.Collections.SortedList.GetByIndex(System.Int32)\n  - System.Collections.SortedList.GetEnumerator\n  - System.Collections.SortedList.GetKey(System.Int32)\n  - System.Collections.SortedList.GetKeyList\n  - System.Collections.SortedList.GetValueList\n  - System.Collections.SortedList.IndexOfKey(System.Object)\n  - System.Collections.SortedList.IndexOfValue(System.Object)\n  - System.Collections.SortedList.IsFixedSize\n  - System.Collections.SortedList.IsReadOnly\n  - System.Collections.SortedList.IsSynchronized\n  - System.Collections.SortedList.Item(System.Object)\n  - System.Collections.SortedList.Keys\n  - System.Collections.SortedList.Remove(System.Object)\n  - System.Collections.SortedList.RemoveAt(System.Int32)\n  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  - System.Collections.SortedList.SyncRoot\n  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  - System.Collections.SortedList.TrimToSize\n  - System.Collections.SortedList.Values\n  langs:\n  - csharp\n  - vb\n  name: SortedList\n  fullName: System.Collections.SortedList\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SortedList\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 60\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</p>\\n\"\n  syntax:\n    content: >-\n      [DebuggerTypeProxy(typeof (SortedList.SortedListDebugView))]\n\n      [DebuggerDisplay(\"Count = {Count}\")]\n\n      [ComVisible(true)]\n\n      [Obsolete(\"Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.\")]\n\n      [Serializable]\n\n      public class SortedList : IDictionary, ICollection, IEnumerable, ICloneable\n    content.vb: >-\n      <DebuggerTypeProxy(GetType(SortedList.SortedListDebugView))>\n\n      <DebuggerDisplay(\"Count = {Count}\")>\n\n      <ComVisible(True)>\n\n      <Obsolete(\"Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.\")>\n\n      <Serializable>\n\n      Public Class SortedList\n          Implements IDictionary, ICollection, IEnumerable, ICloneable\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.Generic.SortedList`2\n    commentId: T:System.Collections.Generic.SortedList`2\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: SortedList\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.SortedList.#ctor\n  commentId: M:System.Collections.SortedList.#ctor\n  id: '#ctor'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList()\n  fullName: System.Collections.SortedList.SortedList()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 89\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface implemented by each key added to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public SortedList()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList()\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer)\n  id: '#ctor(System.Collections.IComparer)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList(IComparer)\n  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 126\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: public SortedList(IComparer comparer)\n    content.vb: Public Sub New(comparer As IComparer)\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing keys.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each key. </p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList(IComparer)\n- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)\n  id: '#ctor(System.Collections.IComparer,System.Int32)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList(IComparer, Int32)\n  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 140\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: public SortedList(IComparer comparer, int capacity)\n    content.vb: Public Sub New(comparer As IComparer, capacity As Integer)\n    parameters:\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing keys.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each key. </p>\\n\"\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough available memory to create a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified <em>capacity</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList(IComparer, Int32)\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)\n  id: '#ctor(System.Collections.IDictionary)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList(IDictionary)\n  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 151\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface implemented by each key.</p>\\n\"\n  syntax:\n    content: public SortedList(IDictionary d)\n    content.vb: Public Sub New(d As IDictionary)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to copy to a new <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>One or more elements in <em>d</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList(IDictionary)\n- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)\n  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList(IDictionary, IComparer)\n  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary, System.Collections.IComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 163\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface.</p>\\n\"\n  syntax:\n    content: public SortedList(IDictionary d, IComparer comparer)\n    content.vb: Public Sub New(d As IDictionary, comparer As IComparer)\n    parameters:\n    - id: d\n      type: System.Collections.IDictionary\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to copy to a new <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: comparer\n      type: System.Collections.IComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation to use when comparing keys.</p>\\n<p>-or- </p>\\n<p>\\n<strong>null</strong> to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> implementation of each key. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>d</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>\\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>d</em> do not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList(IDictionary, IComparer)\n- uid: System.Collections.SortedList.#ctor(System.Int32)\n  commentId: M:System.Collections.SortedList.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SortedList(Int32)\n  fullName: System.Collections.SortedList.SortedList(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 107\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface implemented by each key added to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public SortedList(int initialCapacity)\n    content.vb: Public Sub New(initialCapacity As Integer)\n    parameters:\n    - id: initialCapacity\n      type: System.Int32\n      description: \"\\n<p>The initial number of elements that the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>initialCapacity</em> is less than zero. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough available memory to create a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object with the specified <em>initialCapacity</em>.</p>\\n\"\n  seealso:\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SortedList.SortedList(Int32)\n- uid: System.Collections.SortedList.Capacity\n  commentId: P:System.Collections.SortedList.Capacity\n  id: Capacity\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Capacity\n  fullName: System.Collections.SortedList.Capacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Capacity\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 192\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the capacity of a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual int Capacity { get; set; }\n    content.vb: Public Overridable Property Capacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements that the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can contain.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value assigned is less than the current number of elements in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough memory available on the system.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.TrimToSize\n    commentId: M:System.Collections.SortedList.TrimToSize\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Capacity\n- uid: System.Collections.SortedList.Count\n  commentId: P:System.Collections.SortedList.Count\n  id: Count\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.SortedList.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 225\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.Count\n- uid: System.Collections.SortedList.IsFixedSize\n  commentId: P:System.Collections.SortedList.IsFixedSize\n  id: IsFixedSize\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IsFixedSize\n  fullName: System.Collections.SortedList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsFixedSize\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 256\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size.</p>\\n\"\n  syntax:\n    content: public virtual bool IsFixedSize { get; }\n    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.IsFixedSize\n- uid: System.Collections.SortedList.IsReadOnly\n  commentId: P:System.Collections.SortedList.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.SortedList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsReadOnly\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 252\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  syntax:\n    content: public virtual bool IsReadOnly { get; }\n    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.IsReadOnly\n- uid: System.Collections.SortedList.IsSynchronized\n  commentId: P:System.Collections.SortedList.IsSynchronized\n  id: IsSynchronized\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IsSynchronized\n  fullName: System.Collections.SortedList.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsSynchronized\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 261\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: public virtual bool IsSynchronized { get; }\n    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.SyncRoot\n    commentId: P:System.Collections.SortedList.SyncRoot\n  - type: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.IsSynchronized\n- uid: System.Collections.SortedList.Item(System.Object)\n  commentId: P:System.Collections.SortedList.Item(System.Object)\n  id: Item(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Item[Object]\n  fullName: System.Collections.SortedList.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: this[]\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 437\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets and sets the value associated with a specific key in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual object this[object key] { get; set; }\n    content.vb: Public Overridable Property Item(key As Object) As Object\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key associated with the value to get or set. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the <em>key</em> parameter in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, if <em>key</em> is found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough available memory to add the element to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The comparer throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Add(System.Object,System.Object)\n    commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)\n  - type: System.Collections.SortedList.Contains(System.Object)\n    commentId: M:System.Collections.SortedList.Contains(System.Object)\n  - type: System.Collections.SortedList.ContainsKey(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Collections.SortedList.Item(System.Object)\n  name.vb: Item(Object)\n  nameWithType: SortedList.Item[Object]\n  nameWithType.vb: SortedList.Item(Object)\n- uid: System.Collections.SortedList.Keys\n  commentId: P:System.Collections.SortedList.Keys\n  id: Keys\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.SortedList.Keys\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Keys\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 235\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the keys in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Keys { get; }\n    content.vb: Public Overridable ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.SortedList.Values\n    commentId: P:System.Collections.SortedList.Values\n  - type: System.Collections.SortedList.GetKeyList\n    commentId: M:System.Collections.SortedList.GetKeyList\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.Keys\n- uid: System.Collections.SortedList.SyncRoot\n  commentId: P:System.Collections.SortedList.SyncRoot\n  id: SyncRoot\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SyncRoot\n  fullName: System.Collections.SortedList.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SyncRoot\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 266\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual object SyncRoot { get; }\n    content.vb: Public Overridable ReadOnly Property SyncRoot As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.IsSynchronized\n    commentId: P:System.Collections.SortedList.IsSynchronized\n  - type: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.SyncRoot\n- uid: System.Collections.SortedList.Values\n  commentId: P:System.Collections.SortedList.Values\n  id: Values\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Collections.SortedList.Values\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Values\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 245\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the values in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual ICollection Values { get; }\n    content.vb: Public Overridable ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.SortedList.Keys\n    commentId: P:System.Collections.SortedList.Keys\n  - type: System.Collections.SortedList.GetValueList\n    commentId: M:System.Collections.SortedList.GetValueList\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: SortedList.Values\n- uid: System.Collections.SortedList.Add(System.Object,System.Object)\n  commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)\n  id: Add(System.Object,System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Add(Object, Object)\n  fullName: System.Collections.SortedList.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 177\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an element with the specified key and value to a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void Add(object key, object value)\n    content.vb: Public Overridable Sub Add(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to add. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to add. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An element with the specified <em>key</em> already exists in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to use the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface, and <em>key</em> does not implement the <xref href=\\\"System.IComparable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> interface. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough available memory to add the element to the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The comparer throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Item(System.Object)\n    commentId: P:System.Collections.SortedList.Item(System.Object)\n  - type: System.Collections.IComparer\n    commentId: T:System.Collections.IComparer\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Add(Object, Object)\n- uid: System.Collections.SortedList.Clear\n  commentId: M:System.Collections.SortedList.Clear\n  id: Clear\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.SortedList.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 276\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all elements from a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void Clear()\n    content.vb: Public Overridable Sub Clear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.TrimToSize\n    commentId: M:System.Collections.SortedList.TrimToSize\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  - type: System.Collections.SortedList.Count\n    commentId: P:System.Collections.SortedList.Count\n  implements:\n  - System.Collections.IDictionary.Clear\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Clear()\n- uid: System.Collections.SortedList.Clone\n  commentId: M:System.Collections.SortedList.Clone\n  id: Clone\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Clone()\n  fullName: System.Collections.SortedList.Clone()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clone\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 288\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Creates a shallow copy of a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual object Clone()\n    content.vb: Public Overridable Function Clone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n    commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Clone()\n- uid: System.Collections.SortedList.Contains(System.Object)\n  commentId: M:System.Collections.SortedList.Contains(System.Object)\n  id: Contains(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Contains(Object)\n  fullName: System.Collections.SortedList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Contains\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 303\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool Contains(object key)\n    content.vb: Public Overridable Function Contains(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains an element with the specified <em>key</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The comparer throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.ContainsKey(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  - type: System.Collections.SortedList.IndexOfKey(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Contains(Object)\n- uid: System.Collections.SortedList.ContainsKey(System.Object)\n  commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  id: ContainsKey(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(Object)\n  fullName: System.Collections.SortedList.ContainsKey(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsKey\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 309\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a specific key.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsKey(object key)\n    content.vb: Public Overridable Function ContainsKey(key As Object) As Boolean\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains an element with the specified <em>key</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The comparer throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Contains(System.Object)\n    commentId: M:System.Collections.SortedList.Contains(System.Object)\n  - type: System.Collections.SortedList.ContainsValue(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)\n  - type: System.Collections.SortedList.IndexOfKey(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.ContainsKey(Object)\n- uid: System.Collections.SortedList.ContainsValue(System.Object)\n  commentId: M:System.Collections.SortedList.ContainsValue(System.Object)\n  id: ContainsValue(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: ContainsValue(Object)\n  fullName: System.Collections.SortedList.ContainsValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContainsValue\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 320\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains a specific value.</p>\\n\"\n  syntax:\n    content: public virtual bool ContainsValue(object value)\n    content.vb: Public Overridable Function ContainsValue(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to locate in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains an element with the specified <em>value</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.ContainsKey(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  - type: System.Collections.SortedList.IndexOfValue(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.ContainsValue(Object)\n- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.SortedList.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CopyTo\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 325\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, starting at the specified index in the array.</p>\\n\"\n  syntax:\n    content: public virtual void CopyTo(Array array, int arrayIndex)\n    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that is the destination of the <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects copied from <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: arrayIndex\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>arrayIndex</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Collections.DictionaryEntry\n    commentId: T:System.Collections.DictionaryEntry\n  - type: System.Collections.SortedList.GetEnumerator\n    commentId: M:System.Collections.SortedList.GetEnumerator\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.CopyTo(Array, Int32)\n- uid: System.Collections.SortedList.GetByIndex(System.Int32)\n  commentId: M:System.Collections.SortedList.GetByIndex(System.Int32)\n  id: GetByIndex(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: GetByIndex(Int32)\n  fullName: System.Collections.SortedList.GetByIndex(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByIndex\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 368\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the value at the specified index of a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual object GetByIndex(int index)\n    content.vb: Public Overridable Function GetByIndex(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the value to get. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value at the specified index of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.IndexOfKey(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  - type: System.Collections.SortedList.IndexOfValue(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.GetByIndex(Int32)\n- uid: System.Collections.SortedList.GetEnumerator\n  commentId: M:System.Collections.SortedList.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.SortedList.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 389\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that iterates through a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual IDictionaryEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionary.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.GetEnumerator()\n- uid: System.Collections.SortedList.GetKey(System.Int32)\n  commentId: M:System.Collections.SortedList.GetKey(System.Int32)\n  id: GetKey(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: GetKey(Int32)\n  fullName: System.Collections.SortedList.GetKey(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetKey\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 395\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the key at the specified index of a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual object GetKey(int index)\n    content.vb: Public Overridable Function GetKey(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the key to get. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The key at the specified index of the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.GetKey(Int32)\n- uid: System.Collections.SortedList.GetKeyList\n  commentId: M:System.Collections.SortedList.GetKeyList\n  id: GetKeyList\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: GetKeyList()\n  fullName: System.Collections.SortedList.GetKeyList()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetKeyList\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 413\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the keys in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual IList GetKeyList()\n    content.vb: Public Overridable Function GetKeyList As IList\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList\n    commentId: T:System.Collections.IList\n  - type: System.Collections.SortedList.GetValueList\n    commentId: M:System.Collections.SortedList.GetValueList\n  - type: System.Collections.SortedList.Keys\n    commentId: P:System.Collections.SortedList.Keys\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.GetKeyList()\n- uid: System.Collections.SortedList.GetValueList\n  commentId: M:System.Collections.SortedList.GetValueList\n  id: GetValueList\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: GetValueList()\n  fullName: System.Collections.SortedList.GetValueList()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetValueList\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 429\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the values in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual IList GetValueList()\n    content.vb: Public Overridable Function GetValueList As IList\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList\n    commentId: T:System.Collections.IList\n  - type: System.Collections.SortedList.GetKeyList\n    commentId: M:System.Collections.SortedList.GetKeyList\n  - type: System.Collections.SortedList.Values\n    commentId: P:System.Collections.SortedList.Values\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.GetValueList()\n- uid: System.Collections.SortedList.IndexOfKey(System.Object)\n  commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  id: IndexOfKey(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IndexOfKey(Object)\n  fullName: System.Collections.SortedList.IndexOfKey(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOfKey\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 463\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns the zero-based index of the specified key in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOfKey(object key)\n    content.vb: Public Overridable Function IndexOfKey(key As Object) As Integer\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the <em>key</em> parameter, if <em>key</em> is found in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, -1.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The comparer throws an exception. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.ContainsKey(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)\n  - type: System.Collections.SortedList.IndexOfValue(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.IndexOfKey(Object)\n- uid: System.Collections.SortedList.IndexOfValue(System.Object)\n  commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  id: IndexOfValue(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IndexOfValue(Object)\n  fullName: System.Collections.SortedList.IndexOfValue(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IndexOfValue\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 477\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns the zero-based index of the first occurrence of the specified value in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual int IndexOfValue(object value)\n    content.vb: Public Overridable Function IndexOfValue(value As Object) As Integer\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value to locate in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The value can be <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of the <em>value</em> parameter, if <em>value</em> is found in the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.ContainsValue(System.Object)\n    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)\n  - type: System.Collections.SortedList.IndexOfKey(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.IndexOfValue(Object)\n- uid: System.Collections.SortedList.Remove(System.Object)\n  commentId: M:System.Collections.SortedList.Remove(System.Object)\n  id: Remove(System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Remove(Object)\n  fullName: System.Collections.SortedList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Remove\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 514\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element with the specified key from a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void Remove(object key)\n    content.vb: Public Overridable Sub Remove(key As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.RemoveAt(System.Int32)\n    commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.Remove(Object)\n- uid: System.Collections.SortedList.RemoveAt(System.Int32)\n  commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.SortedList.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAt\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 497\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element at the specified index of a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void RemoveAt(int index)\n    content.vb: Public Overridable Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to remove. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Remove(System.Object)\n    commentId: M:System.Collections.SortedList.Remove(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.RemoveAt(Int32)\n- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  commentId: M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)\n  id: SetByIndex(System.Int32,System.Object)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: SetByIndex(Int32, Object)\n  fullName: System.Collections.SortedList.SetByIndex(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetByIndex\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 523\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Replaces the value at a specific index in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void SetByIndex(int index, object value)\n    content.vb: Public Overridable Sub SetByIndex(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which to save <em>value</em>. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to save into the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. The value can be <strong>null</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.IndexOfKey(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)\n  - type: System.Collections.SortedList.IndexOfValue(System.Object)\n    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.SetByIndex(Int32, Object)\n- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  id: Synchronized(System.Collections.SortedList)\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: Synchronized(SortedList)\n  fullName: System.Collections.SortedList.Synchronized(System.Collections.SortedList)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Synchronized\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 532\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns a synchronized (thread-safe) wrapper for a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true)]\n\n      public static SortedList Synchronized(SortedList list)\n    content.vb: >-\n      <HostProtection(Synchronization:=True)>\n\n      Public Shared Function Synchronized(list As SortedList) As SortedList\n    parameters:\n    - id: list\n      type: System.Collections.SortedList\n      description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to synchronize. </p>\\n\"\n    return:\n      type: System.Collections.SortedList\n      description: \"\\n<p>A synchronized (thread-safe) wrapper for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>list</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.IsSynchronized\n    commentId: P:System.Collections.SortedList.IsSynchronized\n  - type: System.Collections.SortedList.SyncRoot\n    commentId: P:System.Collections.SortedList.SyncRoot\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: SortedList.Synchronized(SortedList)\n- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 380\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: SortedList.IEnumerable.GetEnumerator()\n  nameWithType.vb: SortedList.System.Collections.IEnumerable.GetEnumerator()\n- uid: System.Collections.SortedList.TrimToSize\n  commentId: M:System.Collections.SortedList.TrimToSize\n  id: TrimToSize\n  parent: System.Collections.SortedList\n  langs:\n  - csharp\n  - vb\n  name: TrimToSize()\n  fullName: System.Collections.SortedList.TrimToSize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/SortedList.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TrimToSize\n    path: src/mscorlib/src/System/Collections/SortedList.cs\n    startLine: 549\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Sets the capacity to the actual number of elements in a <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public virtual void TrimToSize()\n    content.vb: Public Overridable Sub TrimToSize\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.SortedList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.SortedList.Clear\n    commentId: M:System.Collections.SortedList.Clear\n  - type: System.Collections.SortedList.Capacity\n    commentId: P:System.Collections.SortedList.Capacity\n  - type: System.Collections.SortedList.Count\n    commentId: P:System.Collections.SortedList.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: SortedList.TrimToSize()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.IComparer\n  parent: System.Collections\n  isExternal: false\n  name: IComparer\n  fullName: System.Collections.IComparer\n  nameWithType: IComparer\n  commentId: T:System.Collections.IComparer\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.SortedList\n  parent: System.Collections\n  isExternal: false\n  name: SortedList\n  fullName: System.Collections.SortedList\n  nameWithType: SortedList\n  commentId: T:System.Collections.SortedList\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}