{"nodes":[{"pos":[2050,2066],"content":"JapaneseCalendar","needQuote":true,"nodes":[{"content":"JapaneseCalendar","pos":[0,16]}]},{"pos":[5632,5650],"content":"JapaneseCalendar()","needQuote":true,"nodes":[{"content":"JapaneseCalendar()","pos":[0,18]}]},{"pos":[6951,6955],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[8459,8479],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[10148,10168],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[11828,11843],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The last year of a 100-year range that can be represented by a 2-digit year.&lt;/p&gt;\\n","pos":[12616,12703],"source":"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n"},{"content":"\\n&lt;p&gt;The value specified in a set operation is less than 99.","pos":[12894,12954],"source":"\\n<p>The value specified in a set operation is less than 99."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;The value specified in a set operation is greater than 8011 (or &lt;strong&gt;MaxSupportedDateTime.Year&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[12955,13092],"source":" </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than 8011 (or <strong>MaxSupportedDateTime.Year</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;In a set operation, the current instance is read-only.&lt;/p&gt;\\n","pos":[13205,13270],"source":"\\n<p>In a set operation, the current instance is read-only.</p>\\n"},{"pos":[13903,13929],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The number of months to add.","pos":[15073,15106],"source":"\\n<p>The number of months to add."},{"content":"&lt;/p&gt;\\n","pos":[15107,15113],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is less than -120000.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;months&lt;/em&gt; is greater than 120000.","pos":[15860,15968],"source":"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000."},{"content":"&lt;/p&gt;\\n","pos":[15969,15975],"source":" </p>\\n"},{"pos":[17689,17714],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number of years to add.","pos":[18849,18881],"source":"\\n<p>The number of years to add."},{"content":"&lt;/p&gt;\\n","pos":[18882,18888],"source":" </p>\\n"},{"pos":[21576,21599],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[24372,24394],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[27307,27329],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[30184,30219],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[31099,31140],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[31141,31147],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[31210,31265],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[31266,31272],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[31333,31373],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[31374,31380],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified month in the specified year in the specified era.&lt;/p&gt;\\n","pos":[31439,31535],"source":"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[31765,32005],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[32006,32012],"source":" </p>\\n"},{"pos":[33085,33112],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[33922,33963],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[33964,33970],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[34031,34071],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[34072,34078],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of days in the specified year in the specified era.&lt;/p&gt;\\n","pos":[34137,34210],"source":"\\n<p>The number of days in the specified year in the specified era.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[34426,34579],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[34580,34586],"source":" </p>\\n"},{"pos":[35628,35644],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[39430,39456],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;A year.&lt;/p&gt;\\n","pos":[40319,40337],"source":"\\n<p>A year.</p>\\n"},{"content":"\\n&lt;p&gt;An era.&lt;/p&gt;\\n","pos":[40398,40416],"source":"\\n<p>An era.</p>\\n"},{"pos":[41485,41503],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[44849,44878],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[45698,45739],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[45740,45746],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[45807,45847],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[45848,45854],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The return value is always 12.&lt;/p&gt;\\n","pos":[45913,45954],"source":"\\n<p>The return value is always 12.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[46172,46325],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[46326,46332],"source":" </p>\\n"},{"pos":[47558,47610],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;A 1-based integer that represents the week of the year that includes the date in the &lt;em&gt;time&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[49441,49561],"source":"\\n<p>A 1-based integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n"},{"pos":[50517,50534],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[53919,53956],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[54836,54877],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[54878,54884],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[54947,55002],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[55003,55009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[55070,55123],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[55124,55130],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[55191,55231],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[55232,55238],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt;, if the specified day is a leap day; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[55299,55405],"source":"\\n<p>\\n<strong>true</strong>, if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[55643,55968],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[55969,55975],"source":" </p>\\n"},{"pos":[57497,57529],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[58403,58444],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[58445,58451],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[58514,58569],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[58570,58576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[58637,58677],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[58678,58684],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This method always returns &lt;strong&gt;false&lt;/strong&gt;, unless overridden by a derived class.&lt;/p&gt;\\n","pos":[58745,58844],"source":"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[59071,59311],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[59312,59318],"source":" </p>\\n"},{"pos":[60602,60626],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[61429,61470],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[61471,61477],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[61538,61578],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[61579,61585],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt;, if the specified year is a leap year; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[61646,61754],"source":"\\n<p>\\n<strong>true</strong>, if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[61967,62120],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[62121,62127],"source":" </p>\\n"},{"pos":[63476,63542],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"content":"\\n&lt;p&gt;An integer that represents the year.","pos":[64690,64731],"source":"\\n<p>An integer that represents the year."},{"content":"&lt;/p&gt;\\n","pos":[64732,64738],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 12 that represents the month.","pos":[64801,64856],"source":"\\n<p>An integer from 1 to 12 that represents the month."},{"content":"&lt;/p&gt;\\n","pos":[64857,64863],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 1 to 31 that represents the day.","pos":[64924,64977],"source":"\\n<p>An integer from 1 to 31 that represents the day."},{"content":"&lt;/p&gt;\\n","pos":[64978,64984],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 23 that represents the hour.","pos":[65046,65100],"source":"\\n<p>An integer from 0 to 23 that represents the hour."},{"content":"&lt;/p&gt;\\n","pos":[65101,65107],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the minute.","pos":[65171,65227],"source":"\\n<p>An integer from 0 to 59 that represents the minute."},{"content":"&lt;/p&gt;\\n","pos":[65228,65234],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 59 that represents the second.","pos":[65298,65354],"source":"\\n<p>An integer from 0 to 59 that represents the second."},{"content":"&lt;/p&gt;\\n","pos":[65355,65361],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer from 0 to 999 that represents the millisecond.","pos":[65430,65492],"source":"\\n<p>An integer from 0 to 999 that represents the millisecond."},{"content":"&lt;/p&gt;\\n","pos":[65493,65499],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that represents the era.","pos":[65560,65600],"source":"\\n<p>An integer that represents the era."},{"content":"&lt;/p&gt;\\n","pos":[65601,65607],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;month&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;day&lt;/em&gt; is outside the range supported by the calendar.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;hour&lt;/em&gt; is less than zero or greater than 23.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;minute&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;second&lt;/em&gt; is less than zero or greater than 59.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;millisecond&lt;/em&gt; is less than zero or greater than 999.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;era&lt;/em&gt; is outside the range supported by the calendar.","pos":[66113,66754],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[66755,66761],"source":" </p>\\n"},{"pos":[67919,67941],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;An integer (usually two digits) that represents the year to convert.","pos":[68872,68945],"source":"\\n<p>An integer (usually two digits) that represents the year to convert."},{"content":"&lt;/p&gt;\\n","pos":[68946,68952],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer that contains the four-digit representation of &lt;em&gt;year&lt;/em&gt;.&lt;/p&gt;\\n","pos":[69011,69094],"source":"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;year&lt;/em&gt; is outside the range supported by the calendar.","pos":[69299,69367],"source":"\\n<p>\\n<em>year</em> is outside the range supported by the calendar."},{"content":"&lt;/p&gt;\\n","pos":[69368,69374],"source":" </p>\\n"},{"pos":[69731,69751],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[69924,69930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70105,70113],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[70295,70305],"content":"ICloneable","needQuote":true,"nodes":[{"content":"ICloneable","pos":[0,10]}]},{"pos":[70511,70521],"content":"CurrentEra","needQuote":true,"nodes":[{"content":"CurrentEra","pos":[0,10]}]},{"pos":[70777,70784],"content":"Clone()","needQuote":true,"nodes":[{"content":"Clone()","pos":[0,7]}]},{"pos":[70905,70910],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[70992,70993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71020,71021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71104,71109],"content":"Clone","needQuote":true,"nodes":[{"content":"Clone","pos":[0,5]}]},{"pos":[71191,71192],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71219,71220],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71465,71483],"content":"ReadOnly(Calendar)","needQuote":true,"nodes":[{"content":"ReadOnly(Calendar)","pos":[0,18]}]},{"pos":[71670,71678],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[71763,71764],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71830,71838],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[71914,71915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72032,72040],"content":"ReadOnly","needQuote":true,"nodes":[{"content":"ReadOnly","pos":[0,8]}]},{"pos":[72125,72126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72192,72200],"content":"Calendar","needQuote":true,"nodes":[{"content":"Calendar","pos":[0,8]}]},{"pos":[72276,72277],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72574,72607],"content":"AddMilliseconds(DateTime, Double)","needQuote":true,"nodes":[{"content":"AddMilliseconds(DateTime, Double)","pos":[0,33]}]},{"pos":[72809,72824],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[72916,72917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72969,72977],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[73040,73041]},{"pos":[73096,73102],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[73162,73163],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73287,73302],"content":"AddMilliseconds","needQuote":true,"nodes":[{"content":"AddMilliseconds","pos":[0,15]}]},{"pos":[73394,73395],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73447,73455],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[73518,73519]},{"pos":[73574,73580],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[73640,73641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73951,73975],"content":"AddDays(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddDays(DateTime, Int32)","pos":[0,24]}]},{"pos":[74159,74166],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[74250,74251],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74303,74311],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[74374,74375]},{"pos":[74429,74434],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74493,74494],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74609,74616],"content":"AddDays","needQuote":true,"nodes":[{"content":"AddDays","pos":[0,7]}]},{"pos":[74700,74701],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74753,74761],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[74824,74825]},{"pos":[74879,74884],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74943,74944],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75237,75262],"content":"AddHours(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddHours(DateTime, Int32)","pos":[0,25]}]},{"pos":[75448,75456],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[75541,75542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75594,75602],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[75665,75666]},{"pos":[75720,75725],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75784,75785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75901,75909],"content":"AddHours","needQuote":true,"nodes":[{"content":"AddHours","pos":[0,8]}]},{"pos":[75994,75995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76047,76055],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[76118,76119]},{"pos":[76173,76178],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[76237,76238],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76535,76562],"content":"AddMinutes(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMinutes(DateTime, Int32)","pos":[0,27]}]},{"pos":[76752,76762],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[76849,76850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76902,76910],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[76973,76974]},{"pos":[77028,77033],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77092,77093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77211,77221],"content":"AddMinutes","needQuote":true,"nodes":[{"content":"AddMinutes","pos":[0,10]}]},{"pos":[77308,77309],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77361,77369],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[77432,77433]},{"pos":[77487,77492],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77551,77552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77853,77880],"content":"AddSeconds(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddSeconds(DateTime, Int32)","pos":[0,27]}]},{"pos":[78070,78080],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[78167,78168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78220,78228],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[78291,78292]},{"pos":[78346,78351],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78410,78411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78529,78539],"content":"AddSeconds","needQuote":true,"nodes":[{"content":"AddSeconds","pos":[0,10]}]},{"pos":[78626,78627],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78679,78687],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[78750,78751]},{"pos":[78805,78810],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[78869,78870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79169,79194],"content":"AddWeeks(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddWeeks(DateTime, Int32)","pos":[0,25]}]},{"pos":[79380,79388],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[79473,79474],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79526,79534],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[79597,79598]},{"pos":[79652,79657],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79716,79717],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79833,79841],"content":"AddWeeks","needQuote":true,"nodes":[{"content":"AddWeeks","pos":[0,8]}]},{"pos":[79926,79927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79979,79987],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[80050,80051]},{"pos":[80105,80110],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80169,80170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80468,80496],"content":"GetDaysInMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32)","pos":[0,28]}]},{"pos":[80688,80702],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[80793,80794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80843,80848],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[80908,80909]},{"pos":[80963,80968],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81027,81028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81147,81161],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[81252,81253],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81302,81307],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[81367,81368]},{"pos":[81422,81427],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[81486,81487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81777,81797],"content":"GetDaysInYear(Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32)","pos":[0,20]}]},{"pos":[81960,81973],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[82063,82064],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82113,82118],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82177,82178],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82283,82296],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[82386,82387],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82436,82441],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[82500,82501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82766,82783],"content":"GetHour(DateTime)","needQuote":true,"nodes":[{"content":"GetHour(DateTime)","pos":[0,17]}]},{"pos":[82940,82947],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[83031,83032],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83084,83092],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[83154,83155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83257,83264],"content":"GetHour","needQuote":true,"nodes":[{"content":"GetHour","pos":[0,7]}]},{"pos":[83348,83349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83401,83409],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[83471,83472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83739,83764],"content":"GetMilliseconds(DateTime)","needQuote":true,"nodes":[{"content":"GetMilliseconds(DateTime)","pos":[0,25]}]},{"pos":[83937,83952],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[84044,84045],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84097,84105],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[84167,84168],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84278,84293],"content":"GetMilliseconds","needQuote":true,"nodes":[{"content":"GetMilliseconds","pos":[0,15]}]},{"pos":[84385,84386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84438,84446],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[84508,84509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84786,84805],"content":"GetMinute(DateTime)","needQuote":true,"nodes":[{"content":"GetMinute(DateTime)","pos":[0,19]}]},{"pos":[84966,84975],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[85061,85062],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85114,85122],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[85184,85185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85289,85298],"content":"GetMinute","needQuote":true,"nodes":[{"content":"GetMinute","pos":[0,9]}]},{"pos":[85384,85385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85437,85445],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[85507,85508],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85776,85798],"content":"GetMonthsInYear(Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32)","pos":[0,22]}]},{"pos":[85965,85980],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[86072,86073],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86122,86127],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86186,86187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86294,86309],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[86401,86402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[86451,86456],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[86515,86516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[86787,86806],"content":"GetSecond(DateTime)","needQuote":true,"nodes":[{"content":"GetSecond(DateTime)","pos":[0,19]}]},{"pos":[86967,86976],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[87062,87063],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87115,87123],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[87185,87186],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87290,87299],"content":"GetSecond","needQuote":true,"nodes":[{"content":"GetSecond","pos":[0,9]}]},{"pos":[87385,87386],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[87438,87446],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[87508,87509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[87797,87827],"content":"IsLeapDay(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32)","pos":[0,30]}]},{"pos":[88036,88045],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[88131,88132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88181,88186],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[88246,88247]},{"pos":[88301,88306],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[88366,88367]},{"pos":[88421,88426],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[88485,88486],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[88613,88622],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[88708,88709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[88758,88763],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[88823,88824]},{"pos":[88878,88883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[88943,88944]},{"pos":[88998,89003],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[89062,89063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[89374,89399],"content":"IsLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32)","pos":[0,25]}]},{"pos":[89585,89596],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[89684,89685],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[89734,89739],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[89799,89800]},{"pos":[89854,89859],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[89918,89919],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90035,90046],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[90134,90135],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90184,90189],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[90249,90250]},{"pos":[90304,90309],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[90368,90369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[90652,90671],"content":"GetLeapMonth(Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32)","pos":[0,19]}]},{"pos":[90832,90844],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[90933,90934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[90983,90988],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91047,91048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91152,91164],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[91253,91254],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91303,91308],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[91367,91368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[91631,91648],"content":"IsLeapYear(Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32)","pos":[0,17]}]},{"pos":[91805,91815],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[91902,91903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[91952,91957],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92016,92017],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92119,92129],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[92216,92217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[92266,92271],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[92330,92331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[92668,92727],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,59]}]},{"pos":[93046,93056],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[93143,93144],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[93193,93198],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93258,93259]},{"pos":[93313,93318],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93378,93379]},{"pos":[93433,93438],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93498,93499]},{"pos":[93553,93558],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93618,93619]},{"pos":[93673,93678],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93738,93739]},{"pos":[93793,93798],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[93858,93859]},{"pos":[93913,93918],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[93977,93978],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[94158,94168],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[94255,94256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[94305,94310],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94370,94371]},{"pos":[94425,94430],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94490,94491]},{"pos":[94545,94550],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94610,94611]},{"pos":[94665,94670],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94730,94731]},{"pos":[94785,94790],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94850,94851]},{"pos":[94905,94910],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[94970,94971]},{"pos":[95025,95030],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[95089,95090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[95458,95471],"content":"AlgorithmType","needQuote":true,"nodes":[{"content":"AlgorithmType","pos":[0,13]}]},{"pos":[95741,95751],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[96034,96066],"content":"DaysInYearBeforeMinSupportedYear","needQuote":true,"nodes":[{"content":"DaysInYearBeforeMinSupportedYear","pos":[0,32]}]},{"pos":[96359,96369],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[96464,96472],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[96541,96542],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96569,96570],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96640,96648],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[96717,96718],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[96745,96746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[96929,96943],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[97062,97068],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97135,97136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97186,97192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97252,97253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97336,97342],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97409,97410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[97460,97466],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[97526,97527],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[97741,97763],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[97911,97917],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[97984,97985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98035,98041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[98102,98103]},{"pos":[98158,98164],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98224,98225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98322,98328],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[98395,98396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98446,98452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[98513,98514]},{"pos":[98569,98575],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98635,98636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98881,98912],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[99078,99093],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[99169,99170],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99220,99226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[99287,99288]},{"pos":[99343,99349],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[99409,99410],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99516,99531],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[99607,99608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99658,99664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[99725,99726]},{"pos":[99781,99787],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[99847,99848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100078,100091],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[100192,100203],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[100275,100276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100303,100304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100377,100388],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[100460,100461],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100488,100489],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100664,100673],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[100766,100773],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[100841,100842],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100869,100870],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100939,100946],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[101014,101015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101042,101043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101218,101235],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[101344,101359],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[101435,101436],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101463,101464],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101541,101556],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[101632,101633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101660,101661],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101806,101812],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[101986,101990],"content":"Eras","needQuote":true,"nodes":[{"content":"Eras","pos":[0,4]}]},{"pos":[102148,102155],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[102279,102284],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[102344,102346]},{"pos":[102410,102415],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[102474,102476],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[102670,102690],"content":"MaxSupportedDateTime","needQuote":true,"nodes":[{"content":"MaxSupportedDateTime","pos":[0,20]}]},{"pos":[102934,102942],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[103152,103172],"content":"MinSupportedDateTime","needQuote":true,"nodes":[{"content":"MinSupportedDateTime","pos":[0,20]}]},{"pos":[103468,103483],"content":"TwoDigitYearMax","needQuote":true,"nodes":[{"content":"TwoDigitYearMax","pos":[0,15]}]},{"pos":[103709,103714],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[103934,103960],"content":"AddMonths(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddMonths(DateTime, Int32)","pos":[0,26]}]},{"pos":[104148,104157],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[104243,104244],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104296,104304],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[104367,104368]},{"pos":[104422,104427],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104486,104487],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104604,104613],"content":"AddMonths","needQuote":true,"nodes":[{"content":"AddMonths","pos":[0,9]}]},{"pos":[104699,104700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104752,104760],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[104823,104824]},{"pos":[104878,104883],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[104942,104943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105240,105265],"content":"AddYears(DateTime, Int32)","needQuote":true,"nodes":[{"content":"AddYears(DateTime, Int32)","pos":[0,25]}]},{"pos":[105451,105459],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[105544,105545],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105597,105605],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[105668,105669]},{"pos":[105723,105728],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[105787,105788],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105904,105912],"content":"AddYears","needQuote":true,"nodes":[{"content":"AddYears","pos":[0,8]}]},{"pos":[105997,105998],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106050,106058],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[106121,106122]},{"pos":[106176,106181],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106240,106241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106528,106551],"content":"GetDayOfMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfMonth(DateTime)","pos":[0,23]}]},{"pos":[106720,106733],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[106823,106824],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[106876,106884],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[106946,106947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107055,107068],"content":"GetDayOfMonth","needQuote":true,"nodes":[{"content":"GetDayOfMonth","pos":[0,13]}]},{"pos":[107158,107159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107211,107219],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[107281,107282],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[107558,107580],"content":"GetDayOfWeek(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfWeek(DateTime)","pos":[0,22]}]},{"pos":[107747,107759],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[107848,107849],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107901,107909],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[107971,107972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108079,108091],"content":"GetDayOfWeek","needQuote":true,"nodes":[{"content":"GetDayOfWeek","pos":[0,12]}]},{"pos":[108180,108181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108233,108241],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[108303,108304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108513,108522],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[108744,108766],"content":"GetDayOfYear(DateTime)","needQuote":true,"nodes":[{"content":"GetDayOfYear(DateTime)","pos":[0,22]}]},{"pos":[108933,108945],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[109034,109035],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109087,109095],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[109157,109158],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109265,109277],"content":"GetDayOfYear","needQuote":true,"nodes":[{"content":"GetDayOfYear","pos":[0,12]}]},{"pos":[109366,109367],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109419,109427],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[109489,109490],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109789,109824],"content":"GetDaysInMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInMonth(Int32, Int32, Int32)","pos":[0,35]}]},{"pos":[110043,110057],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[110148,110149],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110198,110203],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110263,110264]},{"pos":[110318,110323],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110383,110384]},{"pos":[110438,110443],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[110502,110503],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[110635,110649],"content":"GetDaysInMonth","needQuote":true,"nodes":[{"content":"GetDaysInMonth","pos":[0,14]}]},{"pos":[110740,110741],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[110790,110795],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110855,110856]},{"pos":[110910,110915],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[110975,110976]},{"pos":[111030,111035],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111094,111095],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[111418,111445],"content":"GetDaysInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetDaysInYear(Int32, Int32)","pos":[0,27]}]},{"pos":[111635,111648],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[111738,111739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[111788,111793],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[111853,111854]},{"pos":[111908,111913],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[111972,111973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112091,112104],"content":"GetDaysInYear","needQuote":true,"nodes":[{"content":"GetDaysInYear","pos":[0,13]}]},{"pos":[112194,112195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[112244,112249],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[112309,112310]},{"pos":[112364,112369],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[112428,112429],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[112713,112729],"content":"GetEra(DateTime)","needQuote":true,"nodes":[{"content":"GetEra(DateTime)","pos":[0,16]}]},{"pos":[112884,112890],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[112973,112974],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113026,113034],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[113096,113097],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113198,113204],"content":"GetEra","needQuote":true,"nodes":[{"content":"GetEra","pos":[0,6]}]},{"pos":[113287,113288],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[113340,113348],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[113410,113411],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[113683,113709],"content":"GetLeapMonth(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetLeapMonth(Int32, Int32)","pos":[0,26]}]},{"pos":[113897,113909],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[113998,113999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114048,114053],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114113,114114]},{"pos":[114168,114173],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114232,114233],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114350,114362],"content":"GetLeapMonth","needQuote":true,"nodes":[{"content":"GetLeapMonth","pos":[0,12]}]},{"pos":[114451,114452],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[114501,114506],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[114566,114567]},{"pos":[114621,114626],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[114685,114686],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[114970,114988],"content":"GetMonth(DateTime)","needQuote":true,"nodes":[{"content":"GetMonth(DateTime)","pos":[0,18]}]},{"pos":[115147,115155],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[115240,115241],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115293,115301],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[115363,115364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115467,115475],"content":"GetMonth","needQuote":true,"nodes":[{"content":"GetMonth","pos":[0,8]}]},{"pos":[115560,115561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[115613,115621],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[115683,115684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[115963,115992],"content":"GetMonthsInYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"GetMonthsInYear(Int32, Int32)","pos":[0,29]}]},{"pos":[116186,116201],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[116293,116294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116343,116348],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116408,116409]},{"pos":[116463,116468],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116527,116528],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[116648,116663],"content":"GetMonthsInYear","needQuote":true,"nodes":[{"content":"GetMonthsInYear","pos":[0,15]}]},{"pos":[116755,116756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[116805,116810],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[116870,116871]},{"pos":[116925,116930],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[116989,116990],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[117340,117392],"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","needQuote":true,"nodes":[{"content":"GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)","pos":[0,52]}]},{"pos":[117673,117686],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[117776,117777],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[117829,117837],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[117900,117901]},{"pos":[117980,117996],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[118081,118082]},{"pos":[118140,118149],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[118212,118213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[118376,118389],"content":"GetWeekOfYear","needQuote":true,"nodes":[{"content":"GetWeekOfYear","pos":[0,13]}]},{"pos":[118479,118480],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[118532,118540],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"content":",","pos":[118603,118604]},{"pos":[118683,118699],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"content":",","pos":[118784,118785]},{"pos":[118843,118852],"content":"DayOfWeek","needQuote":true,"nodes":[{"content":"DayOfWeek","pos":[0,9]}]},{"pos":[118915,118916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[119246,119262],"content":"CalendarWeekRule","needQuote":true,"nodes":[{"content":"CalendarWeekRule","pos":[0,16]}]},{"pos":[119528,119545],"content":"GetYear(DateTime)","needQuote":true,"nodes":[{"content":"GetYear(DateTime)","pos":[0,17]}]},{"pos":[119702,119709],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[119793,119794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[119846,119854],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[119916,119917],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120019,120026],"content":"GetYear","needQuote":true,"nodes":[{"content":"GetYear","pos":[0,7]}]},{"pos":[120110,120111],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120163,120171],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[120233,120234],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[120531,120568],"content":"IsLeapDay(Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapDay(Int32, Int32, Int32, Int32)","pos":[0,37]}]},{"pos":[120804,120813],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[120899,120900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[120949,120954],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121014,121015]},{"pos":[121069,121074],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121134,121135]},{"pos":[121189,121194],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121254,121255]},{"pos":[121309,121314],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[121373,121374],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[121514,121523],"content":"IsLeapDay","needQuote":true,"nodes":[{"content":"IsLeapDay","pos":[0,9]}]},{"pos":[121609,121610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[121659,121664],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121724,121725]},{"pos":[121779,121784],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121844,121845]},{"pos":[121899,121904],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[121964,121965]},{"pos":[122019,122024],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[122083,122084],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[122339,122346],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[122584,122616],"content":"IsLeapMonth(Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapMonth(Int32, Int32, Int32)","pos":[0,32]}]},{"pos":[122829,122840],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[122928,122929],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[122978,122983],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123043,123044]},{"pos":[123098,123103],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123163,123164]},{"pos":[123218,123223],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123282,123283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[123412,123423],"content":"IsLeapMonth","needQuote":true,"nodes":[{"content":"IsLeapMonth","pos":[0,11]}]},{"pos":[123511,123512],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[123561,123566],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123626,123627]},{"pos":[123681,123686],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[123746,123747]},{"pos":[123801,123806],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[123865,123866],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124180,124204],"content":"IsLeapYear(Int32, Int32)","needQuote":true,"nodes":[{"content":"IsLeapYear(Int32, Int32)","pos":[0,24]}]},{"pos":[124388,124398],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[124485,124486],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124535,124540],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[124600,124601]},{"pos":[124655,124660],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[124719,124720],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[124835,124845],"content":"IsLeapYear","needQuote":true,"nodes":[{"content":"IsLeapYear","pos":[0,10]}]},{"pos":[124932,124933],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[124982,124987],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[125047,125048]},{"pos":[125102,125107],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[125166,125167],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[125537,125603],"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","needQuote":true,"nodes":[{"content":"ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)","pos":[0,66]}]},{"pos":[125949,125959],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[126046,126047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[126096,126101],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126161,126162]},{"pos":[126216,126221],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126281,126282]},{"pos":[126336,126341],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126401,126402]},{"pos":[126456,126461],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126521,126522]},{"pos":[126576,126581],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126641,126642]},{"pos":[126696,126701],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126761,126762]},{"pos":[126816,126821],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[126881,126882]},{"pos":[126936,126941],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[127000,127001],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[127194,127204],"content":"ToDateTime","needQuote":true,"nodes":[{"content":"ToDateTime","pos":[0,10]}]},{"pos":[127291,127292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[127341,127346],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127406,127407]},{"pos":[127461,127466],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127526,127527]},{"pos":[127581,127586],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127646,127647]},{"pos":[127701,127706],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127766,127767]},{"pos":[127821,127826],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[127886,127887]},{"pos":[127941,127946],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128006,128007]},{"pos":[128061,128066],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[128126,128127]},{"pos":[128181,128186],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[128245,128246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[128650,128672],"content":"ToFourDigitYear(Int32)","needQuote":true,"nodes":[{"content":"ToFourDigitYear(Int32)","pos":[0,22]}]},{"pos":[128839,128854],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[128946,128947],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[128996,129001],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129060,129061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129168,129183],"content":"ToFourDigitYear","needQuote":true,"nodes":[{"content":"ToFourDigitYear","pos":[0,15]}]},{"pos":[129275,129276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[129325,129330],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[129389,129390],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[129600,129627],"content":"TypeInitializationException","needQuote":true,"nodes":[{"content":"TypeInitializationException","pos":[0,27]}]},{"pos":[129839,129866],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[130093,130118],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[130331,130348],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Globalization.JapaneseCalendar\n  commentId: T:System.Globalization.JapaneseCalendar\n  id: JapaneseCalendar\n  parent: System.Globalization\n  children:\n  - System.Globalization.JapaneseCalendar.#ctor\n  - System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)\n  - System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)\n  - System.Globalization.JapaneseCalendar.Eras\n  - System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.MaxSupportedDateTime\n  - System.Globalization.JapaneseCalendar.MinSupportedDateTime\n  - System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n  - System.Globalization.JapaneseCalendar.TwoDigitYearMax\n  langs:\n  - csharp\n  - vb\n  name: JapaneseCalendar\n  fullName: System.Globalization.JapaneseCalendar\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: JapaneseCalendar\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 42\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Represents the Japanese calendar.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class JapaneseCalendar : Calendar, ICloneable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class JapaneseCalendar\n          Inherits Calendar\n          Implements ICloneable\n  seealso:\n  - type: System.Globalization.Calendar\n    commentId: T:System.Globalization.Calendar\n  - type: System.Globalization.GregorianCalendar\n    commentId: T:System.Globalization.GregorianCalendar\n  - type: System.Globalization.CultureInfo.Calendar\n    commentId: P:System.Globalization.CultureInfo.Calendar\n  - type: System.Globalization.CultureInfo.OptionalCalendars\n    commentId: P:System.Globalization.CultureInfo.OptionalCalendars\n  inheritance:\n  - System.Object\n  - System.Globalization.Calendar\n  implements:\n  - System.ICloneable\n  inheritedMembers:\n  - System.Globalization.Calendar.CurrentEra\n  - System.Globalization.Calendar.Clone\n  - System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  - System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  - System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  - System.Globalization.Calendar.GetHour(System.DateTime)\n  - System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  - System.Globalization.Calendar.GetMinute(System.DateTime)\n  - System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  - System.Globalization.Calendar.GetSecond(System.DateTime)\n  - System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  - System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  - System.Globalization.Calendar.IsLeapYear(System.Int32)\n  - System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  - System.Globalization.Calendar.AlgorithmType\n  - System.Globalization.Calendar.IsReadOnly\n  - System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: JapaneseCalendar\n- uid: System.Globalization.JapaneseCalendar.#ctor\n  commentId: M:System.Globalization.JapaneseCalendar.#ctor\n  id: '#ctor'\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: JapaneseCalendar()\n  fullName: System.Globalization.JapaneseCalendar.JapaneseCalendar()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 358\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public JapaneseCalendar()\n    content.vb: Public Sub New\n  exceptions:\n  - type: System.TypeInitializationException\n    commentId: T:System.TypeInitializationException\n    description: \"\\n<p>Unable to initialize a <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object because of missing culture information.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: JapaneseCalendar.JapaneseCalendar()\n- uid: System.Globalization.JapaneseCalendar.Eras\n  commentId: P:System.Globalization.JapaneseCalendar.Eras\n  id: Eras\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: Eras\n  fullName: System.Globalization.JapaneseCalendar.Eras\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Eras\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 511\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the list of eras in the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int[] Eras { get; }\n    content.vb: Public Overrides ReadOnly Property Eras As Integer()\n    parameters: []\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers that represents the eras in the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.Eras\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: JapaneseCalendar.Eras\n- uid: System.Globalization.JapaneseCalendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.JapaneseCalendar.MaxSupportedDateTime\n  id: MaxSupportedDateTime\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.JapaneseCalendar.MaxSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MaxSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 58\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the latest date and time supported by the current <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MaxSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MaxSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The latest date and time supported by the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type, which is equivalent to the last moment of December 31, 9999 C.E. in the Gregorian calendar.</p>\\n\"\n  overridden: System.Globalization.Calendar.MaxSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: JapaneseCalendar.MaxSupportedDateTime\n- uid: System.Globalization.JapaneseCalendar.MinSupportedDateTime\n  commentId: P:System.Globalization.JapaneseCalendar.MinSupportedDateTime\n  id: MinSupportedDateTime\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: MinSupportedDateTime\n  fullName: System.Globalization.JapaneseCalendar.MinSupportedDateTime\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MinSupportedDateTime\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 49\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the earliest date and time supported by the current <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override DateTime MinSupportedDateTime { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides ReadOnly Property MinSupportedDateTime As Date\n    parameters: []\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The earliest date and time supported by the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type, which is equivalent to the first moment of September 8, 1868 C.E. in the Gregorian calendar. </p>\\n\"\n  overridden: System.Globalization.Calendar.MinSupportedDateTime\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: JapaneseCalendar.MinSupportedDateTime\n- uid: System.Globalization.JapaneseCalendar.TwoDigitYearMax\n  commentId: P:System.Globalization.JapaneseCalendar.TwoDigitYearMax\n  id: TwoDigitYearMax\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: TwoDigitYearMax\n  fullName: System.Globalization.JapaneseCalendar.TwoDigitYearMax\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TwoDigitYearMax\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 569\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  syntax:\n    content: public override int TwoDigitYearMax { get; set; }\n    content.vb: Public Overrides Property TwoDigitYearMax As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The last year of a 100-year range that can be represented by a 2-digit year.</p>\\n\"\n  overridden: System.Globalization.Calendar.TwoDigitYearMax\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value specified in a set operation is less than 99. </p>\\n<p>-or- </p>\\n<p>The value specified in a set operation is greater than 8011 (or <strong>MaxSupportedDateTime.Year</strong>).</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>In a set operation, the current instance is read-only.</p>\\n\"\n  seealso:\n  - type: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.TwoDigitYearMax\n- uid: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)\n  id: AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddMonths\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 374\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of months away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddMonths(DateTime time, int months)\n    content.vb: Public Overrides Function AddMonths(time As Date, months As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add months. </p>\\n\"\n    - id: months\n      type: System.Int32\n      description: \"\\n<p>The number of months to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of months to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>months</em> is less than -120000.</p>\\n<p>-or- </p>\\n<p>\\n<em>months</em> is greater than 120000. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.AddMonths(DateTime, Int32)\n- uid: System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.AddYears(System.DateTime,System.Int32)\n  id: AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.JapaneseCalendar.AddYears(System.DateTime, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AddYears\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 379\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the specified number of years away from the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DateTime AddYears(DateTime time, int years)\n    content.vb: Public Overrides Function AddYears(time As Date, years As Integer) As Date\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which to add years. </p>\\n\"\n    - id: years\n      type: System.Int32\n      description: \"\\n<p>The number of years to add. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that results from adding the specified number of years to the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> is outside the supported range of the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n<p>-or-</p>\\n<p>\\n<em>years</em> is less than -10,000 or greater than 10,000. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.AddMonths(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  - type: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.AddYears(DateTime, Int32)\n- uid: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  id: GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfMonth\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 405\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfMonth(DateTime time)\n    content.vb: Public Overrides Function GetDayOfMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day of the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Day\n    commentId: P:System.DateTime.Day\n  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetDayOfMonth(DateTime)\n- uid: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  id: GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfWeek\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 410\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override DayOfWeek GetDayOfWeek(DateTime time)\n    content.vb: Public Overrides Function GetDayOfWeek(time As Date) As DayOfWeek\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.DayOfWeek\n      description: \"\\n<p>A <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that represents the day of the week in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfWeek\n    commentId: P:System.DateTime.DayOfWeek\n  - type: System.DayOfWeek\n    commentId: T:System.DayOfWeek\n  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetDayOfWeek(DateTime)\n- uid: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  id: GetDayOfYear(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDayOfYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 415\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetDayOfYear(DateTime time)\n    content.vb: Public Overrides Function GetDayOfYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 366 that represents the day of the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.DayOfYear\n    commentId: P:System.DateTime.DayOfYear\n  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetDayOfYear(DateTime)\n- uid: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInMonth\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 395\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInMonth(int year, int month, int era)\n    content.vb: Public Overrides Function GetDaysInMonth(year As Integer, month As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified month in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetDaysInMonth(Int32, Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n  id: GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetDaysInYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 400\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of days in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetDaysInYear(int year, int era)\n    content.vb: Public Overrides Function GetDaysInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of days in the specified year in the specified era.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetDaysInYear(Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  id: GetEra(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetEra(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEra\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 443\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetEra(DateTime time)\n    content.vb: Public Overrides Function GetEra(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetEra(System.DateTime)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The resulting <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is outside the supported range. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetEra(DateTime)\n- uid: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32,System.Int32)\n  id: GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.GetLeapMonth(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetLeapMonth\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 472\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates the leap month for a specified year and era.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override int GetLeapMonth(int year, int era)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetLeapMonth(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>A year.</p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An era.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The return value is always 0 because the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type does not support the notion of a leap month.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> or <em>era</em> is outside the range supported by the <xref href=\\\"System.Globalization.JapaneseCalendar\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetLeapMonth(Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  id: GetMonth(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonth\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 448\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetMonth(DateTime time)\n    content.vb: Public Overrides Function GetMonth(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonth(System.DateTime)\n  seealso:\n  - type: System.DateTime.Month\n    commentId: P:System.DateTime.Month\n  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetMonth(DateTime)\n- uid: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  id: GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetMonthsInYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 421\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the number of months in the specified year in the specified era.</p>\\n\"\n  syntax:\n    content: public override int GetMonthsInYear(int year, int era)\n    content.vb: Public Overrides Function GetMonthsInYear(year As Integer, era As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The return value is always 12.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetMonthsInYear(Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  commentId: M:System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  id: GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.JapaneseCalendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetWeekOfYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 427\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the week of the year that includes the date in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Contracts\", \"CC1055\")]\n\n      [ComVisible(false)]\n\n      public override int GetWeekOfYear(DateTime time, CalendarWeekRule rule, DayOfWeek firstDayOfWeek)\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Contracts\", \"CC1055\")>\n\n      <ComVisible(False)>\n\n      Public Overrides Function GetWeekOfYear(time As Date, rule As CalendarWeekRule, firstDayOfWeek As DayOfWeek) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    - id: rule\n      type: System.Globalization.CalendarWeekRule\n      description: \"\\n<p>One of the <xref href=\\\"System.Globalization.CalendarWeekRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that defines a calendar week. </p>\\n\"\n    - id: firstDayOfWeek\n      type: System.DayOfWeek\n      description: \"\\n<p>One of the <xref href=\\\"System.DayOfWeek\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that represents the first day of the week. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 1-based integer that represents the week of the year that includes the date in the <em>time</em> parameter.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>time</em> or <em>firstDayOfWeek</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>rule</em> is not a valid <xref href=\\\"System.Globalization.CalendarWeekRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n- uid: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  commentId: M:System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  id: GetYear(System.DateTime)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: GetYear(DateTime)\n  fullName: System.Globalization.JapaneseCalendar.GetYear(System.DateTime)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 453\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override int GetYear(DateTime time)\n    content.vb: Public Overrides Function GetYear(time As Date) As Integer\n    parameters:\n    - id: time\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to read. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year in the specified <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Globalization.Calendar.GetYear(System.DateTime)\n  seealso:\n  - type: System.DateTime.Year\n    commentId: P:System.DateTime.Year\n  - type: System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetEra(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfYear(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfMonth(System.DateTime)\n  - type: System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDayOfWeek(System.DateTime)\n  - type: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  - type: System.Globalization.Calendar.GetHour(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n  - type: System.Globalization.Calendar.GetMinute(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n  - type: System.Globalization.Calendar.GetSecond(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n  - type: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.GetYear(DateTime)\n- uid: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapDay\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 458\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified date in the specified era is a leap day.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapDay(int year, int month, int day, int era)\n    content.vb: Public Overrides Function IsLeapDay(year As Integer, month As Integer, day As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if the specified day is a leap day; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.IsLeapDay(Int32, Int32, Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapMonth\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 479\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified month in the specified year in the specified era is a leap month.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapMonth(int year, int month, int era)\n    content.vb: Public Overrides Function IsLeapMonth(year As Integer, month As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>This method always returns <strong>false</strong>, unless overridden by a derived class.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.IsLeapMonth(Int32, Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32,System.Int32)\n  id: IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.IsLeapYear(System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsLeapYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 464\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Determines whether the specified year in the specified era is a leap year.</p>\\n\"\n  syntax:\n    content: public override bool IsLeapYear(int year, int era)\n    content.vb: Public Overrides Function IsLeapYear(year As Integer, era As Integer) As Boolean\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>, if the specified year is a leap year; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.IsLeapYear(Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.JapaneseCalendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToDateTime\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 484\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns a <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the specified era.</p>\\n\"\n  syntax:\n    content: public override DateTime ToDateTime(int year, int month, int day, int hour, int minute, int second, int millisecond, int era)\n    content.vb: Public Overrides Function ToDateTime(year As Integer, month As Integer, day As Integer, hour As Integer, minute As Integer, second As Integer, millisecond As Integer, era As Integer) As Date\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the year. </p>\\n\"\n    - id: month\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 12 that represents the month. </p>\\n\"\n    - id: day\n      type: System.Int32\n      description: \"\\n<p>An integer from 1 to 31 that represents the day. </p>\\n\"\n    - id: hour\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 23 that represents the hour. </p>\\n\"\n    - id: minute\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the minute. </p>\\n\"\n    - id: second\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 59 that represents the second. </p>\\n\"\n    - id: millisecond\n      type: System.Int32\n      description: \"\\n<p>An integer from 0 to 999 that represents the millisecond. </p>\\n\"\n    - id: era\n      type: System.Int32\n      description: \"\\n<p>An integer that represents the era. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The <xref href=\\\"System.DateTime\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is set to the specified date and time in the current era.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>month</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>day</em> is outside the range supported by the calendar.</p>\\n<p>-or- </p>\\n<p>\\n<em>hour</em> is less than zero or greater than 23.</p>\\n<p>-or- </p>\\n<p>\\n<em>minute</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>second</em> is less than zero or greater than 59.</p>\\n<p>-or- </p>\\n<p>\\n<em>millisecond</em> is less than zero or greater than 999.</p>\\n<p>-or- </p>\\n<p>\\n<em>era</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.DateTime\n    commentId: T:System.DateTime\n  - type: System.Globalization.Calendar.CurrentEra\n    commentId: F:System.Globalization.Calendar.CurrentEra\n  - type: System.Globalization.JapaneseCalendar.Eras\n    commentId: P:System.Globalization.JapaneseCalendar.Eras\n  - type: System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetMonthsInYear(System.Int32,System.Int32)\n  - type: System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    commentId: M:System.Globalization.JapaneseCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n- uid: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n  commentId: M:System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n  id: ToFourDigitYear(System.Int32)\n  parent: System.Globalization.JapaneseCalendar\n  langs:\n  - csharp\n  - vb\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.JapaneseCalendar.ToFourDigitYear(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToFourDigitYear\n    path: src/mscorlib/src/System/Globalization/JapaneseCalendar.cs\n    startLine: 491\n  assemblies:\n  - System.Globalization.Calendars\n  namespace: System.Globalization\n  summary: \"\\n<p>Converts the specified year to a four-digit year by using the <xref href=\\\"System.Globalization.JapaneseCalendar.TwoDigitYearMax\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to determine the appropriate century.</p>\\n\"\n  syntax:\n    content: public override int ToFourDigitYear(int year)\n    content.vb: Public Overrides Function ToFourDigitYear(year As Integer) As Integer\n    parameters:\n    - id: year\n      type: System.Int32\n      description: \"\\n<p>An integer (usually two digits) that represents the year to convert. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the four-digit representation of <em>year</em>.</p>\\n\"\n  overridden: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>year</em> is outside the range supported by the calendar. </p>\\n\"\n  seealso:\n  - type: System.Globalization.JapaneseCalendar.TwoDigitYearMax\n    commentId: P:System.Globalization.JapaneseCalendar.TwoDigitYearMax\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: JapaneseCalendar.ToFourDigitYear(Int32)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Globalization.Calendar\n  parent: System.Globalization\n  isExternal: false\n  name: Calendar\n  fullName: System.Globalization.Calendar\n  nameWithType: Calendar\n  commentId: T:System.Globalization.Calendar\n- uid: System.ICloneable\n  parent: System\n  isExternal: true\n  name: ICloneable\n  fullName: System.ICloneable\n  nameWithType: ICloneable\n  commentId: T:System.ICloneable\n- uid: System.Globalization.Calendar.CurrentEra\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: CurrentEra\n  fullName: System.Globalization.Calendar.CurrentEra\n  nameWithType: Calendar.CurrentEra\n  commentId: F:System.Globalization.Calendar.CurrentEra\n- uid: System.Globalization.Calendar.Clone\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Clone()\n  fullName: System.Globalization.Calendar.Clone()\n  spec.csharp:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.Clone\n    name: Clone\n    fullName: System.Globalization.Calendar.Clone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Calendar.Clone()\n  commentId: M:System.Globalization.Calendar.Clone\n- uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ReadOnly(Calendar)\n  fullName: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n    name: ReadOnly\n    fullName: System.Globalization.Calendar.ReadOnly\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Globalization.Calendar\n    name: Calendar\n    fullName: System.Globalization.Calendar\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ReadOnly(Calendar)\n  commentId: M:System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar)\n- uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMilliseconds(DateTime, Double)\n  fullName: System.Globalization.Calendar.AddMilliseconds(System.DateTime, System.Double)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n    name: AddMilliseconds\n    fullName: System.Globalization.Calendar.AddMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Double\n    name: Double\n    fullName: System.Double\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMilliseconds(DateTime, Double)\n  commentId: M:System.Globalization.Calendar.AddMilliseconds(System.DateTime,System.Double)\n- uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddDays(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddDays(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n    name: AddDays\n    fullName: System.Globalization.Calendar.AddDays\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddDays(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddDays(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddHours(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddHours(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n    name: AddHours\n    fullName: System.Globalization.Calendar.AddHours\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddHours(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddHours(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMinutes(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMinutes(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n    name: AddMinutes\n    fullName: System.Globalization.Calendar.AddMinutes\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMinutes(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMinutes(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddSeconds(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddSeconds(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n    name: AddSeconds\n    fullName: System.Globalization.Calendar.AddSeconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddSeconds(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddSeconds(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddWeeks(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddWeeks(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n    name: AddWeeks\n    fullName: System.Globalization.Calendar.AddWeeks\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddWeeks(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddWeeks(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetHour(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetHour(DateTime)\n  fullName: System.Globalization.Calendar.GetHour(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetHour(System.DateTime)\n    name: GetHour\n    fullName: System.Globalization.Calendar.GetHour\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetHour(DateTime)\n  commentId: M:System.Globalization.Calendar.GetHour(System.DateTime)\n- uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMilliseconds(DateTime)\n  fullName: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n    name: GetMilliseconds\n    fullName: System.Globalization.Calendar.GetMilliseconds\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMilliseconds(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMilliseconds(System.DateTime)\n- uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMinute(DateTime)\n  fullName: System.Globalization.Calendar.GetMinute(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMinute(System.DateTime)\n    name: GetMinute\n    fullName: System.Globalization.Calendar.GetMinute\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMinute(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMinute(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32)\n- uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetSecond(DateTime)\n  fullName: System.Globalization.Calendar.GetSecond(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetSecond(System.DateTime)\n    name: GetSecond\n    fullName: System.Globalization.Calendar.GetSecond\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetSecond(DateTime)\n  commentId: M:System.Globalization.Calendar.GetSecond(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.AlgorithmType\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AlgorithmType\n  fullName: System.Globalization.Calendar.AlgorithmType\n  nameWithType: Calendar.AlgorithmType\n  commentId: P:System.Globalization.Calendar.AlgorithmType\n- uid: System.Globalization.Calendar.IsReadOnly\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Globalization.Calendar.IsReadOnly\n  nameWithType: Calendar.IsReadOnly\n  commentId: P:System.Globalization.Calendar.IsReadOnly\n- uid: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: DaysInYearBeforeMinSupportedYear\n  fullName: System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n  nameWithType: Calendar.DaysInYearBeforeMinSupportedYear\n  commentId: P:System.Globalization.Calendar.DaysInYearBeforeMinSupportedYear\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Globalization.Calendar.Eras\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: Eras\n  fullName: System.Globalization.Calendar.Eras\n  nameWithType: Calendar.Eras\n  commentId: P:System.Globalization.Calendar.Eras\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.Globalization.Calendar.MaxSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MaxSupportedDateTime\n  fullName: System.Globalization.Calendar.MaxSupportedDateTime\n  nameWithType: Calendar.MaxSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MaxSupportedDateTime\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Globalization.Calendar.MinSupportedDateTime\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: MinSupportedDateTime\n  fullName: System.Globalization.Calendar.MinSupportedDateTime\n  nameWithType: Calendar.MinSupportedDateTime\n  commentId: P:System.Globalization.Calendar.MinSupportedDateTime\n- uid: System.Globalization.Calendar.TwoDigitYearMax\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: TwoDigitYearMax\n  fullName: System.Globalization.Calendar.TwoDigitYearMax\n  nameWithType: Calendar.TwoDigitYearMax\n  commentId: P:System.Globalization.Calendar.TwoDigitYearMax\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddMonths(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddMonths(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n    name: AddMonths\n    fullName: System.Globalization.Calendar.AddMonths\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddMonths(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddMonths(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: AddYears(DateTime, Int32)\n  fullName: System.Globalization.Calendar.AddYears(System.DateTime, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n    name: AddYears\n    fullName: System.Globalization.Calendar.AddYears\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.AddYears(DateTime, Int32)\n  commentId: M:System.Globalization.Calendar.AddYears(System.DateTime,System.Int32)\n- uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n    name: GetDayOfMonth\n    fullName: System.Globalization.Calendar.GetDayOfMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfWeek(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n    name: GetDayOfWeek\n    fullName: System.Globalization.Calendar.GetDayOfWeek\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfWeek(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfWeek(System.DateTime)\n- uid: System.DayOfWeek\n  parent: System\n  isExternal: false\n  name: DayOfWeek\n  fullName: System.DayOfWeek\n  nameWithType: DayOfWeek\n  commentId: T:System.DayOfWeek\n- uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDayOfYear(DateTime)\n  fullName: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n    name: GetDayOfYear\n    fullName: System.Globalization.Calendar.GetDayOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDayOfYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetDayOfYear(System.DateTime)\n- uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n    name: GetDaysInMonth\n    fullName: System.Globalization.Calendar.GetDaysInMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetDaysInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetDaysInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n    name: GetDaysInYear\n    fullName: System.Globalization.Calendar.GetDaysInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetDaysInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetDaysInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetEra(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetEra(DateTime)\n  fullName: System.Globalization.Calendar.GetEra(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetEra(System.DateTime)\n    name: GetEra\n    fullName: System.Globalization.Calendar.GetEra\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetEra(DateTime)\n  commentId: M:System.Globalization.Calendar.GetEra(System.DateTime)\n- uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetLeapMonth(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetLeapMonth(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n    name: GetLeapMonth\n    fullName: System.Globalization.Calendar.GetLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetLeapMonth(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetLeapMonth(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonth(DateTime)\n  fullName: System.Globalization.Calendar.GetMonth(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonth(System.DateTime)\n    name: GetMonth\n    fullName: System.Globalization.Calendar.GetMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonth(DateTime)\n  commentId: M:System.Globalization.Calendar.GetMonth(System.DateTime)\n- uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetMonthsInYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.GetMonthsInYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n    name: GetMonthsInYear\n    fullName: System.Globalization.Calendar.GetMonthsInYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetMonthsInYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.GetMonthsInYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  fullName: System.Globalization.Calendar.GetWeekOfYear(System.DateTime, System.Globalization.CalendarWeekRule, System.DayOfWeek)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n    name: GetWeekOfYear\n    fullName: System.Globalization.Calendar.GetWeekOfYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Globalization.CalendarWeekRule\n    name: CalendarWeekRule\n    fullName: System.Globalization.CalendarWeekRule\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.DayOfWeek\n    name: DayOfWeek\n    fullName: System.DayOfWeek\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetWeekOfYear(DateTime, CalendarWeekRule, DayOfWeek)\n  commentId: M:System.Globalization.Calendar.GetWeekOfYear(System.DateTime,System.Globalization.CalendarWeekRule,System.DayOfWeek)\n- uid: System.Globalization.CalendarWeekRule\n  parent: System.Globalization\n  isExternal: false\n  name: CalendarWeekRule\n  fullName: System.Globalization.CalendarWeekRule\n  nameWithType: CalendarWeekRule\n  commentId: T:System.Globalization.CalendarWeekRule\n- uid: System.Globalization.Calendar.GetYear(System.DateTime)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: GetYear(DateTime)\n  fullName: System.Globalization.Calendar.GetYear(System.DateTime)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.GetYear(System.DateTime)\n    name: GetYear\n    fullName: System.Globalization.Calendar.GetYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.DateTime\n    name: DateTime\n    fullName: System.DateTime\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.GetYear(DateTime)\n  commentId: M:System.Globalization.Calendar.GetYear(System.DateTime)\n- uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapDay(Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapDay(System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n    name: IsLeapDay\n    fullName: System.Globalization.Calendar.IsLeapDay\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapDay(Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapMonth(Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapMonth(System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n    name: IsLeapMonth\n    fullName: System.Globalization.Calendar.IsLeapMonth\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapMonth(Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: IsLeapYear(Int32, Int32)\n  fullName: System.Globalization.Calendar.IsLeapYear(System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n    name: IsLeapYear\n    fullName: System.Globalization.Calendar.IsLeapYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.IsLeapYear(Int32, Int32)\n  commentId: M:System.Globalization.Calendar.IsLeapYear(System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  fullName: System.Globalization.Calendar.ToDateTime(System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n    name: ToDateTime\n    fullName: System.Globalization.Calendar.ToDateTime\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToDateTime(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32)\n  commentId: M:System.Globalization.Calendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)\n- uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  parent: System.Globalization.Calendar\n  isExternal: true\n  name: ToFourDigitYear(Int32)\n  fullName: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n  spec.csharp:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n    name: ToFourDigitYear\n    fullName: System.Globalization.Calendar.ToFourDigitYear\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Calendar.ToFourDigitYear(Int32)\n  commentId: M:System.Globalization.Calendar.ToFourDigitYear(System.Int32)\n- uid: System.TypeInitializationException\n  isExternal: false\n  name: TypeInitializationException\n  fullName: System.TypeInitializationException\n  nameWithType: TypeInitializationException\n  commentId: T:System.TypeInitializationException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}