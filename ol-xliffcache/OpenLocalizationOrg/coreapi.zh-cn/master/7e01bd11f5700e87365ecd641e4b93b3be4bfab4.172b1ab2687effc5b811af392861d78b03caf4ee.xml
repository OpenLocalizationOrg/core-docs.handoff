{"nodes":[{"pos":[338,346],"content":"FileMode","needQuote":true,"nodes":[{"content":"FileMode","pos":[0,8]}]},{"pos":[1679,1685],"content":"Append","needQuote":true,"nodes":[{"content":"Append","pos":[0,6]}]},{"pos":[3035,3041],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[4481,4490],"content":"CreateNew","needQuote":true,"nodes":[{"content":"CreateNew","pos":[0,9]}]},{"pos":[5549,5553],"content":"Open","needQuote":true,"nodes":[{"content":"Open","pos":[0,4]}]},{"pos":[6651,6663],"content":"OpenOrCreate","needQuote":true,"nodes":[{"content":"OpenOrCreate","pos":[0,12]}]},{"pos":[8252,8260],"content":"Truncate","needQuote":true,"nodes":[{"content":"Truncate","pos":[0,8]}]},{"pos":[9358,9367],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]},{"pos":[9515,9523],"content":"FileMode","needQuote":true,"nodes":[{"content":"FileMode","pos":[0,8]}]}],"content":"items:\n- uid: System.IO.FileMode\n  commentId: T:System.IO.FileMode\n  id: FileMode\n  parent: System.IO\n  children:\n  - System.IO.FileMode.Append\n  - System.IO.FileMode.Create\n  - System.IO.FileMode.CreateNew\n  - System.IO.FileMode.Open\n  - System.IO.FileMode.OpenOrCreate\n  - System.IO.FileMode.Truncate\n  langs:\n  - csharp\n  - vb\n  name: FileMode\n  fullName: System.IO.FileMode\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FileMode\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 28\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies how the operating system should open a file.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public enum FileMode\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Enum FileMode\n  seealso:\n  - type: System.IO.File.Open(System.String,System.IO.FileMode)\n    commentId: M:System.IO.File.Open(System.String,System.IO.FileMode)\n  - type: System.IO.FileInfo.Open(System.IO.FileMode)\n    commentId: M:System.IO.FileInfo.Open(System.IO.FileMode)\n  - type: System.IO.FileStream\n    commentId: T:System.IO.FileStream\n  - type: System.IO.IsolatedStorage.IsolatedStorageFileStream\n    commentId: T:System.IO.IsolatedStorage.IsolatedStorageFileStream\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: FileMode\n- uid: System.IO.FileMode.Append\n  commentId: F:System.IO.FileMode.Append\n  id: Append\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: Append\n  fullName: System.IO.FileMode.Append\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Append\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 51\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Opens the file if it exists and seeks to the end of the file, or creates a new file. This requires <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Append\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission. <strong>FileMode.Append</strong> can be used only in conjunction with <strong>FileAccess.Write</strong>. Trying to seek to a position before the end of the file throws an <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception, and any attempt to read fails and throws a <xref href=\\\"System.NotSupportedException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception.</p>\\n\"\n  syntax:\n    content: Append = 6\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.Append\n- uid: System.IO.FileMode.Create\n  commentId: F:System.IO.FileMode.Create\n  id: Create\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: Create\n  fullName: System.IO.FileMode.Create\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Create\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 36\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies that the operating system should create a new file. If the file already exists, it will be overwritten. This requires <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission. <strong>FileMode.Create</strong> is equivalent to requesting that if the file does not exist, use <xref href=\\\"System.IO.FileMode.CreateNew\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, use <xref href=\\\"System.IO.FileMode.Truncate\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the file already exists but is a hidden file, an <xref href=\\\"System.UnauthorizedAccessException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception is thrown.</p>\\n\"\n  syntax:\n    content: Create = 2\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.Create\n- uid: System.IO.FileMode.CreateNew\n  commentId: F:System.IO.FileMode.CreateNew\n  id: CreateNew\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: CreateNew\n  fullName: System.IO.FileMode.CreateNew\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateNew\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 33\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies that the operating system should create a new file. This requires <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission. If the file already exists, an <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception is thrown.</p>\\n\"\n  syntax:\n    content: CreateNew = 1\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.CreateNew\n- uid: System.IO.FileMode.Open\n  commentId: F:System.IO.FileMode.Open\n  id: Open\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: Open\n  fullName: System.IO.FileMode.Open\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Open\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 39\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies that the operating system should open an existing file. The ability to open the file is dependent on the value specified by the <xref href=\\\"System.IO.FileAccess\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration. A <xref href=\\\"System.IO.FileNotFoundException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception is thrown if the file does not exist.</p>\\n\"\n  syntax:\n    content: Open = 3\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.Open\n- uid: System.IO.FileMode.OpenOrCreate\n  commentId: F:System.IO.FileMode.OpenOrCreate\n  id: OpenOrCreate\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: OpenOrCreate\n  fullName: System.IO.FileMode.OpenOrCreate\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenOrCreate\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 42\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies that the operating system should open a file if it exists; otherwise, a new file should be created. If the file is opened with <strong>FileAccess.Read</strong>, <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission is required. If the file access is <strong>FileAccess.Write</strong>, <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission is required. If the file is opened with <strong>FileAccess.ReadWrite</strong>, both <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Read\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permissions are required.  </p>\\n\"\n  syntax:\n    content: OpenOrCreate = 4\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.OpenOrCreate\n- uid: System.IO.FileMode.Truncate\n  commentId: F:System.IO.FileMode.Truncate\n  id: Truncate\n  parent: System.IO.FileMode\n  langs:\n  - csharp\n  - vb\n  name: Truncate\n  fullName: System.IO.FileMode.Truncate\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IO/FileMode.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Truncate\n    path: src/mscorlib/src/System/IO/FileMode.cs\n    startLine: 47\n  assemblies:\n  - System.IO.FileSystem.Primitives\n  namespace: System.IO\n  summary: \"\\n<p>Specifies that the operating system should open an existing file. When the file is opened, it should be truncated so that its size is zero bytes. This requires <xref href=\\\"System.Security.Permissions.FileIOPermissionAccess.Write\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> permission. Attempts to read from a file opened with <strong>FileMode.Truncate</strong> cause an <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> exception.</p>\\n\"\n  syntax:\n    content: Truncate = 5\n    return:\n      type: System.IO.FileMode\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: FileMode.Truncate\nreferences:\n- uid: System.IO\n  isExternal: false\n  name: System.IO\n  fullName: System.IO\n  nameWithType: System.IO\n  commentId: N:System.IO\n- uid: System.IO.FileMode\n  parent: System.IO\n  isExternal: false\n  name: FileMode\n  fullName: System.IO.FileMode\n  nameWithType: FileMode\n  commentId: T:System.IO.FileMode\n"}