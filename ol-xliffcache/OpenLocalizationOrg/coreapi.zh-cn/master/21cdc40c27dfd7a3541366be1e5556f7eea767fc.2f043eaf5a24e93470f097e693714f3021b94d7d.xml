{"nodes":[{"pos":[665,672],"content":"Encoder","needQuote":true,"nodes":[{"content":"Encoder","pos":[0,7]}]},{"pos":[2065,2074],"content":"Encoder()","needQuote":true,"nodes":[{"content":"Encoder()","pos":[0,9]}]},{"pos":[2988,2996],"content":"Fallback","needQuote":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The value in a set operation is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[4106,4198],"source":"\\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n"},{"pos":[5442,5456],"content":"FallbackBuffer","needQuote":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[7387,7482],"content":"Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)","needQuote":true,"nodes":[{"content":"Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)","pos":[0,95]}]},{"content":"\\n&lt;p&gt;An array of characters to convert.&lt;/p&gt;\\n","pos":[8756,8801],"source":"\\n<p>An array of characters to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The first element of &lt;em&gt;chars&lt;/em&gt; to convert.&lt;/p&gt;\\n","pos":[8868,8926],"source":"\\n<p>The first element of <em>chars</em> to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;chars&lt;/em&gt; to convert.&lt;/p&gt;\\n","pos":[8993,9056],"source":"\\n<p>The number of elements of <em>chars</em> to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An array where the converted bytes are stored.&lt;/p&gt;\\n","pos":[9120,9177],"source":"\\n<p>An array where the converted bytes are stored.</p>\\n"},{"content":"\\n&lt;p&gt;The first element of &lt;em&gt;bytes&lt;/em&gt; in which data is stored.&lt;/p&gt;\\n","pos":[9244,9315],"source":"\\n<p>The first element of <em>bytes</em> in which data is stored.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of elements of &lt;em&gt;bytes&lt;/em&gt; to use in the conversion.&lt;/p&gt;\\n","pos":[9382,9467],"source":"\\n<p>The maximum number of elements of <em>bytes</em> to use in the conversion.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate no further data is to be converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9532,9649],"source":"\\n<p>\\n<strong>true</strong> to indicate no further data is to be converted; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the number of characters from &lt;em&gt;chars&lt;/em&gt; that were used in the conversion.","pos":[9716,9834],"source":"\\n<p>When this method returns, contains the number of characters from <em>chars</em> that were used in the conversion."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[9835,9880],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the number of bytes that were produced by the conversion.","pos":[9947,10044],"source":"\\n<p>When this method returns, contains the number of bytes that were produced by the conversion."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[10045,10090],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains &lt;strong&gt;true&lt;/strong&gt; if all the characters specified by &lt;em&gt;charCount&lt;/em&gt; were converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10159,10325],"source":"\\n<p>When this method returns, contains <strong>true</strong> if all the characters specified by <em>charCount</em> were converted; otherwise, <strong>false</strong>."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[10326,10371],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; or &lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[10490,10588],"source":"\\n<p>\\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt;, &lt;em&gt;charCount&lt;/em&gt;, &lt;em&gt;byteIndex&lt;/em&gt;, or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;chars&lt;/em&gt; - &lt;em&gt;charIndex&lt;/em&gt; is less than &lt;em&gt;charCount&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;bytes&lt;/em&gt; - &lt;em&gt;byteIndex&lt;/em&gt; is less than &lt;em&gt;byteCount&lt;/em&gt;.&lt;/p&gt;\\n","pos":[10705,11026],"source":"\\n<p>\\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\\n<p>-or-</p>\\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\\n"},{"pos":[12878,12921],"content":"GetByteCount(Char[], Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"GetByteCount(Char[], Int32, Int32, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[13926,13994],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[13995,14001],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[14064,14112],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[14113,14119],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[14182,14222],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[14223,14229],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to simulate clearing the internal state of the encoder after the calculation; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[14294,14435],"source":"\\n<p>\\n<strong>true</strong> to simulate clearing the internal state of the encoder after the calculation; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14436,14442],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes produced by encoding the specified characters and any characters in the internal buffer.&lt;/p&gt;\\n","pos":[14501,14620],"source":"\\n<p>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14739,14786],"source":"\\n<p>\\n<em>chars</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14787,14793],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.","pos":[14910,15073],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[15074,15080],"source":" </p>\\n"},{"pos":[16663,16717],"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The character array containing the set of characters to encode.","pos":[17846,17914],"source":"\\n<p>The character array containing the set of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[17915,17921],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first character to encode.","pos":[17988,18036],"source":"\\n<p>The index of the first character to encode."},{"content":"&lt;/p&gt;\\n","pos":[18037,18043],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters to encode.","pos":[18110,18150],"source":"\\n<p>The number of characters to encode."},{"content":"&lt;/p&gt;\\n","pos":[18151,18157],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The byte array to contain the resulting sequence of bytes.","pos":[18221,18284],"source":"\\n<p>The byte array to contain the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[18285,18291],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting sequence of bytes.","pos":[18358,18431],"source":"\\n<p>The index at which to start writing the resulting sequence of bytes."},{"content":"&lt;/p&gt;\\n","pos":[18432,18438],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to clear the internal state of the encoder after the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[18503,18631],"source":"\\n<p>\\n<strong>true</strong> to clear the internal state of the encoder after the conversion; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18632,18638],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes written into &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n","pos":[18697,18763],"source":"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[18882,19048],"source":"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[19049,19055],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; or &lt;em&gt;charCount&lt;/em&gt; or &lt;em&gt;byteIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; and &lt;em&gt;charCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; is not a valid index in &lt;em&gt;bytes&lt;/em&gt;.","pos":[19172,19456],"source":"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[19457,19463],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; does not have enough capacity from &lt;em&gt;byteIndex&lt;/em&gt; to the end of the array to accommodate the resulting bytes.","pos":[19560,19695],"source":"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes."},{"content":"&lt;/p&gt;\\n","pos":[19696,19702],"source":" </p>\\n"},{"pos":[21039,21046],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[21843,21854],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[22000,22006],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22166,22176],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[22271,22279],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22348,22349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22376,22377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22447,22455],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[22524,22525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22552,22553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22736,22750],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22869,22875],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22942,22943],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22993,22999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23059,23060],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23143,23149],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23216,23217],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23267,23273],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23333,23334],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23548,23570],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[23718,23724],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[23791,23792],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23842,23848],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23909,23910]},{"pos":[23965,23971],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24031,24032],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24129,24135],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[24202,24203],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24253,24259],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24320,24321]},{"pos":[24376,24382],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24442,24443],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24688,24719],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[24885,24900],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24976,24977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25027,25033],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25094,25095]},{"pos":[25150,25156],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25216,25217],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25323,25338],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[25414,25415],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25465,25471],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25532,25533]},{"pos":[25588,25594],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25654,25655],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25885,25898],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[25999,26010],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26082,26083],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26110,26111],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26184,26195],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26267,26268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26295,26296],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26471,26480],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[26573,26580],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26648,26649],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26676,26677],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26746,26753],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[26821,26822],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26849,26850],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27025,27042],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[27151,27166],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27242,27243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27270,27271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27348,27363],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[27439,27440],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27467,27468],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27613,27619],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[27769,27784],"content":"EncoderFallback","needQuote":true,"nodes":[{"content":"EncoderFallback","pos":[0,15]}]},{"pos":[27991,28012],"content":"EncoderFallbackBuffer","needQuote":true,"nodes":[{"content":"EncoderFallbackBuffer","pos":[0,21]}]},{"pos":[28175,28181],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[28301,28305],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[28364,28366]},{"pos":[28429,28433],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[28491,28493],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[28625,28630],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28735,28741],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[28861,28865],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[28924,28926]},{"pos":[28989,28993],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[29051,29053],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[29187,29194],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[29340,29361],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[29562,29579],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[29763,29787],"content":"EncoderFallbackException","needQuote":true,"nodes":[{"content":"EncoderFallbackException","pos":[0,24]}]},{"pos":[30000,30027],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Text.Encoder\n  commentId: T:System.Text.Encoder\n  id: Encoder\n  parent: System.Text\n  children:\n  - System.Text.Encoder.#ctor\n  - System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Encoder.Fallback\n  - System.Text.Encoder.FallbackBuffer\n  - System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  - System.Text.Encoder.Reset\n  langs:\n  - csharp\n  - vb\n  name: Encoder\n  fullName: System.Text.Encoder\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Encoder\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 21\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts a set of characters into a sequence of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public abstract class Encoder\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public MustInherit Class Encoder\n  seealso:\n  - type: System.Text.Decoder\n    commentId: T:System.Text.Decoder\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Encoder\n- uid: System.Text.Encoder.#ctor\n  commentId: M:System.Text.Encoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: Encoder()\n  fullName: System.Text.Encoder.Encoder()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 35\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Encoder()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Encoder.Encoder()\n- uid: System.Text.Encoder.Fallback\n  commentId: P:System.Text.Encoder.Fallback\n  id: Fallback\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: Fallback\n  fullName: System.Text.Encoder.Fallback\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Fallback\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 40\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Text.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the current <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public EncoderFallback Fallback { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property Fallback As EncoderFallback\n    parameters: []\n    return:\n      type: System.Text.EncoderFallback\n      description: \"\\n<p>A <xref href=\\\"System.Text.EncoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A new value cannot be assigned in a set operation because the current <xref href=\\\"System.Text.EncoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains data that has not been encoded yet. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoder.FallbackBuffer\n    commentId: P:System.Text.Encoder.FallbackBuffer\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Encoder.Fallback\n- uid: System.Text.Encoder.FallbackBuffer\n  commentId: P:System.Text.Encoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: FallbackBuffer\n  fullName: System.Text.Encoder.FallbackBuffer\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FallbackBuffer\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 66\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Text.EncoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the current <xref href=\\\"System.Text.Encoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public EncoderFallbackBuffer FallbackBuffer { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property FallbackBuffer As EncoderFallbackBuffer\n    parameters: []\n    return:\n      type: System.Text.EncoderFallbackBuffer\n      description: \"\\n<p>A <xref href=\\\"System.Text.EncoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoder.Fallback\n    commentId: P:System.Text.Encoder.Fallback\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Encoder.FallbackBuffer\n- uid: System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Encoder.Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)\n  fullName: System.Text.Encoder.Convert(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32, System.Int32, System.Boolean, out System.Int32, out System.Int32, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Convert\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 243\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts an array of Unicode characters to an encoded byte sequence and stores the result in an array of bytes.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual void Convert(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Sub Convert(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, byteCount As Integer, flush As Boolean, ByRef charsUsed As Integer, ByRef bytesUsed As Integer, ByRef completed As Boolean)\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>An array of characters to convert.</p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The first element of <em>chars</em> to convert.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>chars</em> to convert.</p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>An array where the converted bytes are stored.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The first element of <em>bytes</em> in which data is stored.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of elements of <em>bytes</em> to use in the conversion.</p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate no further data is to be converted; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: charsUsed\n      type: System.Int32\n      description: \"\\n<p>When this method returns, contains the number of characters from <em>chars</em> that were used in the conversion. This parameter is passed uninitialized.</p>\\n\"\n    - id: bytesUsed\n      type: System.Int32\n      description: \"\\n<p>When this method returns, contains the number of bytes that were produced by the conversion. This parameter is passed uninitialized.</p>\\n\"\n    - id: completed\n      type: System.Boolean\n      description: \"\\n<p>When this method returns, contains <strong>true</strong> if all the characters specified by <em>charCount</em> were converted; otherwise, <strong>false</strong>. This parameter is passed uninitialized.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\\n<p>-or-</p>\\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\\\"System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Encoder.Convert(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32, System.Int32, System.Boolean, ByRef System.Int32, ByRef System.Int32, ByRef System.Boolean)\n  name.vb: Convert(Char(), Int32, Int32, Byte(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)\n  nameWithType: Encoder.Convert(Char[], Int32, Int32, Byte[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)\n  nameWithType.vb: Encoder.Convert(Char(), Int32, Int32, Byte(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)\n- uid: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  id: GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: GetByteCount(Char[], Int32, Int32, Boolean)\n  fullName: System.Text.Encoder.GetByteCount(System.Char[], System.Int32, System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetByteCount\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 117\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array. A parameter indicates whether to clear the internal state of the encoder after the calculation.</p>\\n\"\n  syntax:\n    content: public abstract int GetByteCount(char[] chars, int index, int count, bool flush)\n    content.vb: Public MustOverride Function GetByteCount(chars As Char(), index As Integer, count As Integer, flush As Boolean) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to simulate clearing the internal state of the encoder after the calculation; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of bytes produced by encoding the specified characters and any characters in the internal buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n    commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  - type: System.Text.Encoder.Reset\n    commentId: M:System.Text.Encoder.Reset\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoder.GetByteCount(System.Char(), System.Int32, System.Int32, System.Boolean)\n  name.vb: GetByteCount(Char(), Int32, Int32, Boolean)\n  nameWithType: Encoder.GetByteCount(Char[], Int32, Int32, Boolean)\n  nameWithType.vb: Encoder.GetByteCount(Char(), Int32, Int32, Boolean)\n- uid: System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  commentId: M:System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  fullName: System.Text.Encoder.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBytes\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 165\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, encodes a set of characters from the specified character array and any characters in the internal buffer into the specified byte array. A parameter indicates whether to clear the internal state of the encoder after the conversion.</p>\\n\"\n  syntax:\n    content: public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush)\n    content.vb: Public MustOverride Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer, flush As Boolean) As Integer\n    parameters:\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array containing the set of characters to encode. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first character to encode. </p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The number of characters to encode. </p>\\n\"\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array to contain the resulting sequence of bytes. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting sequence of bytes. </p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to clear the internal state of the encoder after the conversion; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of bytes written into <em>bytes</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\\n\"\n  - type: System.Text.EncoderFallbackException\n    commentId: T:System.Text.EncoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Encoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.EncoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n    commentId: M:System.Text.Encoder.GetByteCount(System.Char[],System.Int32,System.Int32,System.Boolean)\n  - type: System.Text.Encoder.Reset\n    commentId: M:System.Text.Encoder.Reset\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Encoder.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32, System.Boolean)\n  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32, Boolean)\n  nameWithType: Encoder.GetBytes(Char[], Int32, Int32, Byte[], Int32, Boolean)\n  nameWithType.vb: Encoder.GetBytes(Char(), Int32, Int32, Byte(), Int32, Boolean)\n- uid: System.Text.Encoder.Reset\n  commentId: M:System.Text.Encoder.Reset\n  id: Reset\n  parent: System.Text.Encoder\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Text.Encoder.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Encoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Text/Encoder.cs\n    startLine: 100\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, sets the encoder back to its initial state.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual void Reset()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Sub Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Encoder.Reset()\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Text.EncoderFallback\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallback\n  fullName: System.Text.EncoderFallback\n  nameWithType: EncoderFallback\n  commentId: T:System.Text.EncoderFallback\n- uid: System.Text.EncoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: EncoderFallbackBuffer\n  fullName: System.Text.EncoderFallbackBuffer\n  nameWithType: EncoderFallbackBuffer\n  commentId: T:System.Text.EncoderFallbackBuffer\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.Text.EncoderFallbackException\n  isExternal: false\n  name: EncoderFallbackException\n  fullName: System.Text.EncoderFallbackException\n  nameWithType: EncoderFallbackException\n  commentId: T:System.Text.EncoderFallbackException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}