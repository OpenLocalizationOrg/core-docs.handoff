{"nodes":[{"pos":[1266,1283],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[3093,3118],"content":"HashAlgorithmName(String)","needQuote":true,"nodes":[{"content":"HashAlgorithmName(String)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The custom hash algorithm name.","pos":[4040,4076],"source":"\\n<p>The custom hash algorithm name."},{"content":"&lt;/p&gt;\\n","pos":[4077,4083],"source":" </p>\\n"},{"pos":[4429,4432],"content":"MD5","needQuote":true,"nodes":[{"content":"MD5","pos":[0,3]}]},{"pos":[5694,5698],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[7033,7037],"content":"SHA1","needQuote":true,"nodes":[{"content":"SHA1","pos":[0,4]}]},{"pos":[8312,8318],"content":"SHA256","needQuote":true,"nodes":[{"content":"SHA256","pos":[0,6]}]},{"pos":[9607,9613],"content":"SHA384","needQuote":true,"nodes":[{"content":"SHA384","pos":[0,6]}]},{"pos":[10902,10908],"content":"SHA512","needQuote":true,"nodes":[{"content":"SHA512","pos":[0,6]}]},{"pos":[12242,12256],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[13115,13168],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[13169,13175],"source":" </p>\\n"},{"pos":[14191,14216],"content":"Equals(HashAlgorithmName)","needQuote":true,"nodes":[{"content":"Equals(HashAlgorithmName)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The object to compare with the current instance.","pos":[15227,15280],"source":"\\n<p>The object to compare with the current instance."},{"content":"&lt;/p&gt;\\n","pos":[15281,15287],"source":" </p>\\n"},{"pos":[16126,16139],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[17849,17895],"content":"Equality(HashAlgorithmName, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"Equality(HashAlgorithmName, HashAlgorithmName)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[19015,19048],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[19049,19055],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[19152,19186],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[19187,19193],"source":" </p>\\n"},{"pos":[20203,20251],"content":"Inequality(HashAlgorithmName, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"Inequality(HashAlgorithmName, HashAlgorithmName)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[21380,21413],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[21414,21420],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[21517,21551],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[21552,21558],"source":" </p>\\n"},{"pos":[22277,22287],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[23588,23616],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[23879,23908],"content":"IEquatable<HashAlgorithmName>","needQuote":true,"nodes":[{"content":"IEquatable&lt;HashAlgorithmName&gt;","pos":[0,29],"source":"IEquatable<HashAlgorithmName>"}]},{"pos":[24169,24179],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[24243,24244],"content":"<","needQuote":true,"nodes":[]},{"pos":[24327,24344],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[24488,24498],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[24563,24566]},{"pos":[24656,24673],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[24745,24746],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25050,25072],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[25220,25226],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25293,25294],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25344,25350],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25411,25412]},{"pos":[25467,25473],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25533,25534],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25631,25637],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25704,25705],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25755,25761],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[25822,25823]},{"pos":[25878,25884],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25944,25945],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26190,26221],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[26387,26402],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26478,26479],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26529,26535],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[26596,26597]},{"pos":[26652,26658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26718,26719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26825,26840],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[26916,26917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26967,26973],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27034,27035]},{"pos":[27090,27096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27156,27157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27383,27392],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[27485,27492],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27560,27561],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27588,27589],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27658,27665],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[27733,27734],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27761,27762],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27904,27917],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[28072,28082],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[28125,28126],"content":"<","needQuote":true,"nodes":[]},{"pos":[28153,28154],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28253,28263],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[28307,28310]},{"pos":[28344,28345],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[28372,28373],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28533,28539],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[28670,28676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28821,28827],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[29027,29044],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[29300,29314],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[29439,29445],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29494,29495],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29545,29551],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29611,29612],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29698,29704],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29753,29754],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29804,29810],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29870,29871],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30050,30057],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[30208,30217],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[30562,30587],"content":"Equals(HashAlgorithmName)","needQuote":true,"nodes":[{"content":"Equals(HashAlgorithmName)","pos":[0,25]}]},{"pos":[30925,30931],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31050,31051],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31134,31151],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[31223,31224],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31302,31308],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31430,31431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31514,31531],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[31603,31604],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31973,31982],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[32140,32146],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32199,32200],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32227,32228],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32255,32256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32334,32340],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32396,32397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32424,32425],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[32452,32453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32693,32706],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[32813,32824],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[32878,32879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32906,32907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32983,32994],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33048,33049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33076,33077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33243,33248],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[33412,33422],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33523,33531],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33582,33583],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33610,33611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33684,33692],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33743,33744],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33771,33772],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  id: HashAlgorithmName\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)\n  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)\n  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.HashAlgorithmName.GetHashCode\n  - System.Security.Cryptography.HashAlgorithmName.MD5\n  - System.Security.Cryptography.HashAlgorithmName.Name\n  - System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.HashAlgorithmName.SHA1\n  - System.Security.Cryptography.HashAlgorithmName.SHA256\n  - System.Security.Cryptography.HashAlgorithmName.SHA384\n  - System.Security.Cryptography.HashAlgorithmName.SHA512\n  - System.Security.Cryptography.HashAlgorithmName.ToString\n  langs:\n  - csharp\n  - vb\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  type: Struct\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashAlgorithmName\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 72\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Specifies the name of a cryptographic hash algorithm. </p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct HashAlgorithmName : IEquatable<HashAlgorithmName>\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure HashAlgorithmName\n          Implements IEquatable(Of HashAlgorithmName)\n  implements:\n  - System.IEquatable{System.Security.Cryptography.HashAlgorithmName}\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: HashAlgorithmName\n- uid: System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: HashAlgorithmName(String)\n  fullName: System.Security.Cryptography.HashAlgorithmName.HashAlgorithmName(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 75\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure with a custom name. </p>\\n\"\n  syntax:\n    content: public HashAlgorithmName(string name)\n    content.vb: Public Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The custom hash algorithm name. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HashAlgorithmName.HashAlgorithmName(String)\n- uid: System.Security.Cryptography.HashAlgorithmName.MD5\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.MD5\n  id: MD5\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: MD5\n  fullName: System.Security.Cryptography.HashAlgorithmName.MD5\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MD5\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 76\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a hash algorithm name that represents \\\"MD5\\\".</p>\\n\"\n  syntax:\n    content: public static HashAlgorithmName MD5 { get; }\n    content.vb: Public Shared ReadOnly Property MD5 As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>A hash algorithm name that represents \\\"MD5\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: HashAlgorithmName.MD5\n- uid: System.Security.Cryptography.HashAlgorithmName.Name\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.Name\n  id: Name\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Security.Cryptography.HashAlgorithmName.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 77\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets the underlying string representation of the algorithm name. </p>\\n\"\n  syntax:\n    content: public string Name { get; }\n    content.vb: Public ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the algorithm name, or <strong>null</strong> or <xref href=\\\"System.String.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if no hash algorithm is available. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: HashAlgorithmName.Name\n- uid: System.Security.Cryptography.HashAlgorithmName.SHA1\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA1\n  id: SHA1\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: SHA1\n  fullName: System.Security.Cryptography.HashAlgorithmName.SHA1\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA1\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 78\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a hash algorithm name that represents \\\"SHA1\\\".</p>\\n\"\n  syntax:\n    content: public static HashAlgorithmName SHA1 { get; }\n    content.vb: Public Shared ReadOnly Property SHA1 As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>A hash algorithm name that represents \\\"SHA1\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: HashAlgorithmName.SHA1\n- uid: System.Security.Cryptography.HashAlgorithmName.SHA256\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA256\n  id: SHA256\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: SHA256\n  fullName: System.Security.Cryptography.HashAlgorithmName.SHA256\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA256\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 79\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a hash algorithm name that represents \\\"SHA256\\\".</p>\\n\"\n  syntax:\n    content: public static HashAlgorithmName SHA256 { get; }\n    content.vb: Public Shared ReadOnly Property SHA256 As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>A hash algorithm name that represents \\\"SHA256\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: HashAlgorithmName.SHA256\n- uid: System.Security.Cryptography.HashAlgorithmName.SHA384\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA384\n  id: SHA384\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: SHA384\n  fullName: System.Security.Cryptography.HashAlgorithmName.SHA384\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA384\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 80\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a hash algorithm name that represents \\\"SHA384\\\".</p>\\n\"\n  syntax:\n    content: public static HashAlgorithmName SHA384 { get; }\n    content.vb: Public Shared ReadOnly Property SHA384 As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>A hash algorithm name that represents \\\"SHA384\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: HashAlgorithmName.SHA384\n- uid: System.Security.Cryptography.HashAlgorithmName.SHA512\n  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA512\n  id: SHA512\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: SHA512\n  fullName: System.Security.Cryptography.HashAlgorithmName.SHA512\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SHA512\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 81\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Gets a hash algorithm name that represents \\\"SHA512\\\".</p>\\n\"\n  syntax:\n    content: public static HashAlgorithmName SHA512 { get; }\n    content.vb: Public Shared ReadOnly Property SHA512 As HashAlgorithmName\n    parameters: []\n    return:\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>A hash algorithm name that represents \\\"SHA512\\\". </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: HashAlgorithmName.SHA512\n- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 82\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a specified object are equal. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is a <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and its <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property is equal to that of the current instance. The comparison is ordinal and case-sensitive. </p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HashAlgorithmName.Equals(Object)\n- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)\n  id: Equals(System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: Equals(HashAlgorithmName)\n  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 83\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns a value that indicates whether two <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are equal. </p>\\n\"\n  syntax:\n    content: public bool Equals(HashAlgorithmName other)\n    content.vb: Public Function Equals(other As HashAlgorithmName) As Boolean\n    parameters:\n    - id: other\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The object to compare with the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>other</em> is equal to that of the current instance. The comparison is ordinal and case-sensitive. </p>\\n\"\n  implements:\n  - System.IEquatable{System.Security.Cryptography.HashAlgorithmName}.Equals(System.Security.Cryptography.HashAlgorithmName)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: HashAlgorithmName.Equals(HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName.GetHashCode\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Cryptography.HashAlgorithmName.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 84\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns the hash code for the current instance. </p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the current instance, or 0 if no <em>name</em> value was supplied to the <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> constructor. </p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HashAlgorithmName.GetHashCode()\n- uid: System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  id: op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: Equality(HashAlgorithmName, HashAlgorithmName)\n  fullName: System.Security.Cryptography.HashAlgorithmName.Equality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 85\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal. </p>\\n\"\n  syntax:\n    content: public static bool operator ==(HashAlgorithmName left, HashAlgorithmName right)\n    content.vb: Public Shared Operator =(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if both <em>left</em> and <em>right</em> have the same <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: HashAlgorithmName.Equality(HashAlgorithmName, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  id: op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: Inequality(HashAlgorithmName, HashAlgorithmName)\n  fullName: System.Security.Cryptography.HashAlgorithmName.Inequality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 86\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Determines whether two specified <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are not equal. </p>\\n\"\n  syntax:\n    content: public static bool operator !=(HashAlgorithmName left, HashAlgorithmName right)\n    content.vb: Public Shared Operator <>(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: right\n      type: System.Security.Cryptography.HashAlgorithmName\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if both <em>left</em> and <em>right</em> do not have the same <xref href=\\\"System.Security.Cryptography.HashAlgorithmName.Name\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value; otherwise, <strong>false</strong>.  </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: HashAlgorithmName.Inequality(HashAlgorithmName, HashAlgorithmName)\n- uid: System.Security.Cryptography.HashAlgorithmName.ToString\n  commentId: M:System.Security.Cryptography.HashAlgorithmName.ToString\n  id: ToString\n  parent: System.Security.Cryptography.HashAlgorithmName\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Cryptography.HashAlgorithmName.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs\n    startLine: 87\n  assemblies:\n  - System.Security.Cryptography.Primitives\n  namespace: System.Security.Cryptography\n  summary: \"\\n<p>Returns the string representation of the current <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current <xref href=\\\"System.Security.Cryptography.HashAlgorithmName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. </p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: HashAlgorithmName.ToString()\nreferences:\n- uid: System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n- uid: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<HashAlgorithmName>\n  fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName)\n  name.vb: IEquatable(Of HashAlgorithmName)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Security.Cryptography.HashAlgorithmName}\n  nameWithType: IEquatable<HashAlgorithmName>\n  nameWithType.vb: IEquatable(Of HashAlgorithmName)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  nameWithType: HashAlgorithmName\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}.Equals(System.Security.Cryptography.HashAlgorithmName)\n  parent: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(HashAlgorithmName)\n  fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>.Equals(System.Security.Cryptography.HashAlgorithmName)\n  fullname.vb: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName).Equals(System.Security.Cryptography.HashAlgorithmName)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Security.Cryptography.HashAlgorithmName\n    name: HashAlgorithmName\n    fullName: System.Security.Cryptography.HashAlgorithmName\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Security.Cryptography.HashAlgorithmName}.Equals(System.Security.Cryptography.HashAlgorithmName)\n  nameWithType: IEquatable<HashAlgorithmName>.Equals(HashAlgorithmName)\n  nameWithType.vb: IEquatable(Of HashAlgorithmName).Equals(HashAlgorithmName)\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n"}