{"nodes":[{"pos":[2229,2243],"content":"CollectionBase","needQuote":true,"nodes":[{"content":"CollectionBase","pos":[0,14]}]},{"pos":[4510,4526],"content":"CollectionBase()","needQuote":true,"nodes":[{"content":"CollectionBase()","pos":[0,16]}]},{"pos":[5695,5716],"content":"CollectionBase(Int32)","needQuote":true,"nodes":[{"content":"CollectionBase(Int32)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The number of elements that the new list can initially store.&lt;/p&gt;\\n","pos":[6531,6603],"source":"\\n<p>The number of elements that the new list can initially store.</p>\\n"},{"pos":[7048,7056],"content":"Capacity","needQuote":true,"nodes":[{"content":"Capacity","pos":[0,8]}]},{"content":"\\n&lt;p&gt;There is not enough memory available on the system.&lt;/p&gt;\\n","pos":[8535,8597],"source":"\\n<p>There is not enough memory available on the system.</p>\\n"},{"pos":[9024,9029],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[10426,10435],"content":"InnerList","needQuote":true,"nodes":[{"content":"InnerList","pos":[0,9]}]},{"pos":[11949,11953],"content":"List","needQuote":true,"nodes":[{"content":"List","pos":[0,4]}]},{"pos":[13491,13517],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[15473,15493],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[17294,17311],"content":"IList.IsFixedSize","needQuote":true,"nodes":[{"content":"IList.IsFixedSize","pos":[0,17]}]},{"pos":[19010,19026],"content":"IList.IsReadOnly","needQuote":true,"nodes":[{"content":"IList.IsReadOnly","pos":[0,16]}]},{"pos":[20732,20749],"content":"IList.Item[Int32]","needQuote":true,"nodes":[{"content":"IList.Item[Int32]","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to get or set.&lt;/p&gt;\\n","pos":[21559,21620],"source":"\\n<p>The zero-based index of the element to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The element at the specified index.&lt;/p&gt;\\n","pos":[21680,21726],"source":"\\n<p>The element at the specified index.</p>\\n"},{"pos":[22742,22749],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[23784,23799],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[25276,25285],"content":"OnClear()","needQuote":true,"nodes":[{"content":"OnClear()","pos":[0,9]}]},{"pos":[26663,26680],"content":"OnClearComplete()","needQuote":true,"nodes":[{"content":"OnClearComplete()","pos":[0,17]}]},{"pos":[28162,28185],"content":"OnInsert(Int32, Object)","needQuote":true,"nodes":[{"content":"OnInsert(Int32, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The zero-based index at which to insert &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29072,29138],"source":"\\n<p>The zero-based index at which to insert <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element at &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[29202,29260],"source":"\\n<p>The new value of the element at <em>index</em>.</p>\\n"},{"pos":[30253,30284],"content":"OnInsertComplete(Int32, Object)","needQuote":true,"nodes":[{"content":"OnInsertComplete(Int32, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The zero-based index at which to insert &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31202,31268],"source":"\\n<p>The zero-based index at which to insert <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element at &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31332,31390],"source":"\\n<p>The new value of the element at <em>index</em>.</p>\\n"},{"pos":[32220,32243],"content":"OnRemove(Int32, Object)","needQuote":true,"nodes":[{"content":"OnRemove(Int32, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; can be found.&lt;/p&gt;\\n","pos":[33124,33193],"source":"\\n<p>The zero-based index at which <em>value</em> can be found.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to remove from &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33257,33323],"source":"\\n<p>The value of the element to remove from <em>index</em>.</p>\\n"},{"pos":[34089,34120],"content":"OnRemoveComplete(Int32, Object)","needQuote":true,"nodes":[{"content":"OnRemoveComplete(Int32, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; can be found.&lt;/p&gt;\\n","pos":[35034,35103],"source":"\\n<p>The zero-based index at which <em>value</em> can be found.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to remove from &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[35167,35233],"source":"\\n<p>The value of the element to remove from <em>index</em>.</p>\\n"},{"pos":[36016,36044],"content":"OnSet(Int32, Object, Object)","needQuote":true,"nodes":[{"content":"OnSet(Int32, Object, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;oldValue&lt;/em&gt; can be found.&lt;/p&gt;\\n","pos":[36967,37039],"source":"\\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\\n"},{"content":"\\n&lt;p&gt;The value to replace with &lt;em&gt;newValue&lt;/em&gt;.&lt;/p&gt;\\n","pos":[37106,37161],"source":"\\n<p>The value to replace with <em>newValue</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element at &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[37228,37286],"source":"\\n<p>The new value of the element at <em>index</em>.</p>\\n"},{"pos":[38317,38353],"content":"OnSetComplete(Int32, Object, Object)","needQuote":true,"nodes":[{"content":"OnSetComplete(Int32, Object, Object)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;oldValue&lt;/em&gt; can be found.&lt;/p&gt;\\n","pos":[39307,39379],"source":"\\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\\n"},{"content":"\\n&lt;p&gt;The value to replace with &lt;em&gt;newValue&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39446,39501],"source":"\\n<p>The value to replace with <em>newValue</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element at &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39568,39626],"source":"\\n<p>The new value of the element at <em>index</em>.</p>\\n"},{"pos":[40428,40446],"content":"OnValidate(Object)","needQuote":true,"nodes":[{"content":"OnValidate(Object)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The object to validate.&lt;/p&gt;\\n","pos":[41180,41214],"source":"\\n<p>The object to validate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41333,41386],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[42145,42160],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The zero-based index of the element to remove.&lt;/p&gt;\\n","pos":[42979,43036],"source":"\\n<p>The zero-based index of the element to remove.</p>\\n"},{"pos":[43937,43969],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[45450,45524],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45643,45696],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[45813,45859],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[47183,47200],"content":"IList.Add(Object)","needQuote":true,"nodes":[{"content":"IList.Add(Object)","pos":[0,17]}]},{"pos":[49811,49833],"content":"IList.Contains(Object)","needQuote":true,"nodes":[{"content":"IList.Contains(Object)","pos":[0,22]}]},{"pos":[51915,51936],"content":"IList.IndexOf(Object)","needQuote":true,"nodes":[{"content":"IList.IndexOf(Object)","pos":[0,21]}]},{"pos":[54171,54198],"content":"IList.Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"IList.Insert(Int32, Object)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The zero-based index at which &lt;em&gt;value&lt;/em&gt; should be inserted.&lt;/p&gt;\\n","pos":[55107,55182],"source":"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n"},{"pos":[56896,56916],"content":"IList.Remove(Object)","needQuote":true,"nodes":[{"content":"IList.Remove(Object)","pos":[0,20]}]},{"pos":[59354,59372],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[59539,59545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59713,59718],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[59913,59924],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[60137,60148],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[60347,60357],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[60452,60460],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60529,60530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60557,60558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60628,60636],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60705,60706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60733,60734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60917,60931],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[61050,61056],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61123,61124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61174,61180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61240,61241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61324,61330],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61397,61398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61448,61454],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61514,61515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61729,61751],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61899,61905],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61972,61973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62023,62029],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62090,62091]},{"pos":[62146,62152],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62212,62213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62310,62316],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62383,62384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62434,62440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62501,62502]},{"pos":[62557,62563],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62623,62624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62869,62900],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[63066,63081],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63157,63158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63208,63214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63275,63276]},{"pos":[63331,63337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63397,63398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63504,63519],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63595,63596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63646,63652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63713,63714]},{"pos":[63769,63775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63835,63836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64066,64079],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[64180,64191],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64263,64264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64291,64292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64365,64376],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64448,64449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64476,64477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64652,64661],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[64754,64761],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64829,64830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64857,64858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64927,64934],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65002,65003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65030,65031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65206,65223],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[65332,65347],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65423,65424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65451,65452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65529,65544],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65620,65621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65648,65649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65944,65957],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[66074,66085],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[66144,66145],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66172,66173],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66254,66265],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[66324,66325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66352,66353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66708,66720],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[66853,66863],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[66930,66931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66958,66959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67048,67058],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[67125,67126],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67153,67154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67495,67510],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[67714,67727],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[67789,67790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67817,67818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67896,67912],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[67977,67978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68005,68006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68384,68401],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[68613,68628],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[68692,68693],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68720,68721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68801,68819],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[68886,68887],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68914,68915],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69150,69156],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[69321,69345],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[69524,69535],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[69594,69595],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69662,69673],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[69750,69751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69864,69875],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[69934,69935],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70002,70013],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[70090,70091],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70319,70328],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[70534,70557],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[70752,70762],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[70829,70830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70897,70908],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[70985,70986],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71107,71117],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[71184,71185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71252,71263],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[71340,71341],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71594,71612],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[71834,71860],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[72167,72180],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[72242,72243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72310,72321],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72398,72399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72509,72525],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[72590,72591],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72658,72669],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72746,72747],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73036,73046],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[73246,73274],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[73589,73604],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[73668,73669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73736,73747],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73824,73825],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73937,73955],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[74022,74023],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74090,74101],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74178,74179],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74441,74452],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[74597,74602],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74791,74796],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[75025,75034],"content":"ArrayList","needQuote":true,"nodes":[{"content":"ArrayList","pos":[0,9]}]},{"pos":[75268,75282],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[75512,75519],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[75717,75725],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[75977,75988],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[76230,76240],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[76486,76497],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"pos":[76714,76718],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[76774,76775]},{"pos":[76827,76832],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"]","pos":[76892,76893]},{"pos":[76987,76991],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[77046,77047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77096,77101],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[77160,77161],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77409,77416],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[77527,77532],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[77588,77589],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77616,77617],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77695,77700],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[77756,77757],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77784,77785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77999,78014],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[78153,78166],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[78236,78237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78264,78265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78357,78370],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[78440,78441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78468,78469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78685,78696],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[78931,78946],"content":"RemoveAt(Int32)","needQuote":true,"nodes":[{"content":"RemoveAt(Int32)","pos":[0,15]}]},{"pos":[79089,79097],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[79156,79157],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79206,79211],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79270,79271],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79366,79374],"content":"RemoveAt","needQuote":true,"nodes":[{"content":"RemoveAt","pos":[0,8]}]},{"pos":[79433,79434],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79483,79488],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79547,79548],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79806,79826],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[80004,80010],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[80073,80074],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80123,80128],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[80167,80168]},{"pos":[80222,80227],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80286,80287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80399,80405],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[80468,80469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80518,80523],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[80562,80563]},{"pos":[80617,80622],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[80681,80682],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80893,80898],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[81087,81098],"content":"Add(Object)","needQuote":true,"nodes":[{"content":"Add(Object)","pos":[0,11]}]},{"pos":[81233,81236],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[81290,81291],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81341,81347],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81407,81408],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81499,81502],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[81556,81557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81607,81613],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81673,81674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81902,81918],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[82063,82071],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[82130,82131],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82181,82187],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82247,82248],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82344,82352],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[82411,82412],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82462,82468],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82528,82529],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82766,82781],"content":"IndexOf(Object)","needQuote":true,"nodes":[{"content":"IndexOf(Object)","pos":[0,15]}]},{"pos":[82924,82931],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[82989,82990],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83040,83046],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83106,83107],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83202,83209],"content":"IndexOf","needQuote":true,"nodes":[{"content":"IndexOf","pos":[0,7]}]},{"pos":[83267,83268],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83318,83324],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83384,83385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83632,83653],"content":"Insert(Int32, Object)","needQuote":true,"nodes":[{"content":"Insert(Int32, Object)","pos":[0,21]}]},{"pos":[83821,83827],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[83884,83885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83934,83939],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[83999,84000]},{"pos":[84055,84061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84121,84122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84229,84235],"content":"Insert","needQuote":true,"nodes":[{"content":"Insert","pos":[0,6]}]},{"pos":[84292,84293],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84342,84347],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[84407,84408]},{"pos":[84463,84469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84529,84530],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84782,84796],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[84937,84943],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[85000,85001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85051,85057],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85117,85118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85212,85218],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[85275,85276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[85326,85332],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[85392,85393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[85579,85606],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[85811,85831],"content":"OutOfMemoryException","needQuote":true,"nodes":[{"content":"OutOfMemoryException","pos":[0,20]}]},{"pos":[86016,86037],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[86238,86255],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[86430,86450],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]},{"pos":[86652,86673],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]}],"content":"items:\n- uid: System.Collections.CollectionBase\n  commentId: T:System.Collections.CollectionBase\n  id: CollectionBase\n  parent: System.Collections\n  children:\n  - System.Collections.CollectionBase.#ctor\n  - System.Collections.CollectionBase.#ctor(System.Int32)\n  - System.Collections.CollectionBase.Capacity\n  - System.Collections.CollectionBase.Clear\n  - System.Collections.CollectionBase.Count\n  - System.Collections.CollectionBase.GetEnumerator\n  - System.Collections.CollectionBase.InnerList\n  - System.Collections.CollectionBase.List\n  - System.Collections.CollectionBase.OnClear\n  - System.Collections.CollectionBase.OnClearComplete\n  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  - System.Collections.CollectionBase.OnValidate(System.Object)\n  - System.Collections.CollectionBase.RemoveAt(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  langs:\n  - csharp\n  - vb\n  name: CollectionBase\n  fullName: System.Collections.CollectionBase\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CollectionBase\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 13\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public abstract class CollectionBase : IList, ICollection, IEnumerable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class CollectionBase\n          Implements IList, ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.ArrayList\n    commentId: T:System.Collections.ArrayList\n  - type: System.Collections.IList\n    commentId: T:System.Collections.IList\n  - type: System.Collections.ReadOnlyCollectionBase\n    commentId: T:System.Collections.ReadOnlyCollectionBase\n  - type: System.Collections.Generic\n    commentId: N:System.Collections.Generic\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IList\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: CollectionBase\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.CollectionBase.#ctor\n  commentId: M:System.Collections.CollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: CollectionBase()\n  fullName: System.Collections.CollectionBase.CollectionBase()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 18\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the default initial capacity.</p>\\n\"\n  syntax:\n    content: protected CollectionBase()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Collections.CollectionBase.Capacity\n    commentId: P:System.Collections.CollectionBase.Capacity\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CollectionBase.CollectionBase()\n- uid: System.Collections.CollectionBase.#ctor(System.Int32)\n  commentId: M:System.Collections.CollectionBase.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: CollectionBase(Int32)\n  fullName: System.Collections.CollectionBase.CollectionBase(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 22\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified capacity.</p>\\n\"\n  syntax:\n    content: protected CollectionBase(int capacity)\n    content.vb: Protected Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The number of elements that the new list can initially store.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.Capacity\n    commentId: P:System.Collections.CollectionBase.Capacity\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: CollectionBase.CollectionBase(Int32)\n- uid: System.Collections.CollectionBase.Capacity\n  commentId: P:System.Collections.CollectionBase.Capacity\n  id: Capacity\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Capacity\n  fullName: System.Collections.CollectionBase.Capacity\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Capacity\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 39\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the number of elements that the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public int Capacity { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property Capacity As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements that the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> can contain.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<xref href=\\\"System.Collections.CollectionBase.Capacity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to a value that is less than <xref href=\\\"System.Collections.CollectionBase.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.OutOfMemoryException\n    commentId: T:System.OutOfMemoryException\n    description: \"\\n<p>There is not enough memory available on the system.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.Count\n    commentId: P:System.Collections.CollectionBase.Count\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: CollectionBase.Capacity\n- uid: System.Collections.CollectionBase.Count\n  commentId: P:System.Collections.CollectionBase.Count\n  id: Count\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.CollectionBase.Count\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Count\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 50\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. This property cannot be overridden.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n<p>Retrieving the value of this property is an O(1) operation.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CollectionBase.Count\n- uid: System.Collections.CollectionBase.InnerList\n  commentId: P:System.Collections.CollectionBase.InnerList\n  id: InnerList\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: InnerList\n  fullName: System.Collections.CollectionBase.InnerList\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InnerList\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 27\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the list of elements in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected ArrayList InnerList { get; }\n    content.vb: Protected ReadOnly Property InnerList As ArrayList\n    parameters: []\n    return:\n      type: System.Collections.ArrayList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ArrayList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance itself.</p>\\n<p>Retrieving the value of this property is an O(1) operation.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: CollectionBase.InnerList\n- uid: System.Collections.CollectionBase.List\n  commentId: P:System.Collections.CollectionBase.List\n  id: List\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: List\n  fullName: System.Collections.CollectionBase.List\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: List\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 35\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the list of elements in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected IList List { get; }\n    content.vb: Protected ReadOnly Property List As IList\n    parameters: []\n    return:\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance itself.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: CollectionBase.List\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 88\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: CollectionBase.ICollection.IsSynchronized\n  nameWithType.vb: CollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 92\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: CollectionBase.ICollection.SyncRoot\n  nameWithType.vb: CollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  commentId: P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize\n  id: System#Collections#IList#IsFixedSize\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.IsFixedSize\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsFixedSize\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 84\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IList.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsFixedSize\n  nameWithType: CollectionBase.IList.IsFixedSize\n  nameWithType.vb: CollectionBase.System.Collections.IList.IsFixedSize\n- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  commentId: P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly\n  id: System#Collections#IList#IsReadOnly\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.IsReadOnly\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IsReadOnly\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 80\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n\"\n  syntax:\n    content: bool IList.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IList.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IList.IsReadOnly\n  nameWithType: CollectionBase.IList.IsReadOnly\n  nameWithType.vb: CollectionBase.System.Collections.IList.IsReadOnly\n- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  commentId: P:System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)\n  id: System#Collections#IList#Item(System.Int32)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.Item[Int32]\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.this[]\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 100\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the element at the specified index.</p>\\n\"\n  syntax:\n    content: object IList.this[int index] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The element at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.CollectionBase.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.Count\n    commentId: P:System.Collections.CollectionBase.Count\n  implements:\n  - System.Collections.IList.Item(System.Int32)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.CollectionBase.System.Collections.IList.Item(System.Int32)\n  name.vb: System.Collections.IList.Item(Int32)\n  nameWithType: CollectionBase.IList.Item[Int32]\n  nameWithType.vb: CollectionBase.System.Collections.IList.Item(Int32)\n- uid: System.Collections.CollectionBase.Clear\n  commentId: M:System.Collections.CollectionBase.Clear\n  id: Clear\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.CollectionBase.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Clear\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 56\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes all objects from the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. This method cannot be overridden.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  implements:\n  - System.Collections.IList.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CollectionBase.Clear()\n- uid: System.Collections.CollectionBase.GetEnumerator\n  commentId: M:System.Collections.CollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.CollectionBase.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetEnumerator\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 179\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public IEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CollectionBase.GetEnumerator()\n- uid: System.Collections.CollectionBase.OnClear\n  commentId: M:System.Collections.CollectionBase.OnClear\n  id: OnClear\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnClear()\n  fullName: System.Collections.CollectionBase.OnClear()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnClear\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 189\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes when clearing the contents of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnClear()\n    content.vb: Protected Overridable Sub OnClear\n  seealso:\n  - type: System.Collections.CollectionBase.OnClearComplete\n    commentId: M:System.Collections.CollectionBase.OnClearComplete\n  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnClear()\n- uid: System.Collections.CollectionBase.OnClearComplete\n  commentId: M:System.Collections.CollectionBase.OnClearComplete\n  id: OnClearComplete\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnClearComplete()\n  fullName: System.Collections.CollectionBase.OnClearComplete()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnClearComplete\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 206\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after clearing the contents of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnClearComplete()\n    content.vb: Protected Overridable Sub OnClearComplete\n  seealso:\n  - type: System.Collections.CollectionBase.OnClear\n    commentId: M:System.Collections.CollectionBase.OnClear\n  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnClearComplete()\n- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  id: OnInsert(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnInsert(Int32, Object)\n  fullName: System.Collections.CollectionBase.OnInsert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnInsert\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 186\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before inserting a new element into the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnInsert(int index, object value)\n    content.vb: Protected Overridable Sub OnInsert(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which to insert <em>value</em>.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new value of the element at <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - type: System.Collections.CollectionBase.OnValidate(System.Object)\n    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnInsert(Int32, Object)\n- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  id: OnInsertComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnInsertComplete(Int32, Object)\n  fullName: System.Collections.CollectionBase.OnInsertComplete(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnInsertComplete\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 203\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after inserting a new element into the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnInsertComplete(int index, object value)\n    content.vb: Protected Overridable Sub OnInsertComplete(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which to insert <em>value</em>.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The new value of the element at <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnInsertComplete(Int32, Object)\n- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  id: OnRemove(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnRemove(Int32, Object)\n  fullName: System.Collections.CollectionBase.OnRemove(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnRemove\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 192\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes when removing an element from the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnRemove(int index, object value)\n    content.vb: Protected Overridable Sub OnRemove(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> can be found.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to remove from <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  - type: System.Collections.CollectionBase.OnClear\n    commentId: M:System.Collections.CollectionBase.OnClear\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnRemove(Int32, Object)\n- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)\n  id: OnRemoveComplete(System.Int32,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnRemoveComplete(Int32, Object)\n  fullName: System.Collections.CollectionBase.OnRemoveComplete(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnRemoveComplete\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 209\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after removing an element from the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnRemoveComplete(int index, object value)\n    content.vb: Protected Overridable Sub OnRemoveComplete(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> can be found.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to remove from <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)\n  - type: System.Collections.CollectionBase.OnClearComplete\n    commentId: M:System.Collections.CollectionBase.OnClearComplete\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnRemoveComplete(Int32, Object)\n- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  id: OnSet(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnSet(Int32, Object, Object)\n  fullName: System.Collections.CollectionBase.OnSet(System.Int32, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnSet\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 183\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before setting a value in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnSet(int index, object oldValue, object newValue)\n    content.vb: Protected Overridable Sub OnSet(index As Integer, oldValue As Object, newValue As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\\n\"\n    - id: oldValue\n      type: System.Object\n      description: \"\\n<p>The value to replace with <em>newValue</em>.</p>\\n\"\n    - id: newValue\n      type: System.Object\n      description: \"\\n<p>The new value of the element at <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  - type: System.Collections.CollectionBase.OnValidate(System.Object)\n    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnSet(Int32, Object, Object)\n- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)\n  id: OnSetComplete(System.Int32,System.Object,System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnSetComplete(Int32, Object, Object)\n  fullName: System.Collections.CollectionBase.OnSetComplete(System.Int32, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnSetComplete\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 200\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after setting a value in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnSetComplete(int index, object oldValue, object newValue)\n    content.vb: Protected Overridable Sub OnSetComplete(index As Integer, oldValue As Object, newValue As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\\n\"\n    - id: oldValue\n      type: System.Object\n      description: \"\\n<p>The value to replace with <em>newValue</em>.</p>\\n\"\n    - id: newValue\n      type: System.Object\n      description: \"\\n<p>The new value of the element at <em>index</em>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnSetComplete(Int32, Object, Object)\n- uid: System.Collections.CollectionBase.OnValidate(System.Object)\n  commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)\n  id: OnValidate(System.Object)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: OnValidate(Object)\n  fullName: System.Collections.CollectionBase.OnValidate(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OnValidate\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 195\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes when validating a value.</p>\\n\"\n  syntax:\n    content: protected virtual void OnValidate(object value)\n    content.vb: Protected Overridable Sub OnValidate(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to validate.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)\n  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CollectionBase.OnValidate(Object)\n- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)\n  commentId: M:System.Collections.CollectionBase.RemoveAt(System.Int32)\n  id: RemoveAt(System.Int32)\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: RemoveAt(Int32)\n  fullName: System.Collections.CollectionBase.RemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RemoveAt\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 62\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element at the specified index of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. This method is not overridable.</p>\\n\"\n  syntax:\n    content: public void RemoveAt(int index)\n    content.vb: Public Sub RemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the element to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is equal to or greater than <xref href=\\\"System.Collections.CollectionBase.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  implements:\n  - System.Collections.IList.RemoveAt(System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CollectionBase.RemoveAt(Int32)\n- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 96\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: CollectionBase.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: CollectionBase.System.Collections.ICollection.CopyTo(Array, Int32)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)\n  id: System#Collections#IList#Add(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.Add(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Add\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 129\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an object to the end of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.Add(object value)\n    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be added to the end of the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> index at which the <em>value</em> has been added.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.Count\n    commentId: P:System.Collections.CollectionBase.Count\n  - type: System.Collections.IList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n  - type: System.Collections.IList.Remove(System.Object)\n    commentId: M:System.Collections.IList.Remove(System.Object)\n  implements:\n  - System.Collections.IList.Add(System.Object)\n  name.vb: System.Collections.IList.Add(Object)\n  nameWithType: CollectionBase.IList.Add(Object)\n  nameWithType.vb: CollectionBase.System.Collections.IList.Add(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)\n  id: System#Collections#IList#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.Contains(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Contains\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 125\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific element.</p>\\n\"\n  syntax:\n    content: bool IList.Contains(object value)\n    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains the specified <em>value</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList.IndexOf(System.Object)\n    commentId: M:System.Collections.IList.IndexOf(System.Object)\n  implements:\n  - System.Collections.IList.Contains(System.Object)\n  name.vb: System.Collections.IList.Contains(Object)\n  nameWithType: CollectionBase.IList.Contains(Object)\n  nameWithType.vb: CollectionBase.System.Collections.IList.Contains(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  commentId: M:System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)\n  id: System#Collections#IList#IndexOf(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.IndexOf(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.IndexOf\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 159\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Searches for the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: int IList.IndexOf(object value)\n    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to locate in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the first occurrence of <em>value</em> within the entire <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, if found; otherwise, -1.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList.Contains(System.Object)\n    commentId: M:System.Collections.IList.Contains(System.Object)\n  implements:\n  - System.Collections.IList.IndexOf(System.Object)\n  name.vb: System.Collections.IList.IndexOf(Object)\n  nameWithType: CollectionBase.IList.IndexOf(Object)\n  nameWithType.vb: CollectionBase.System.Collections.IList.IndexOf(Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)\n  id: System#Collections#IList#Insert(System.Int32,System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.Insert(Int32, Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Insert\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 163\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Inserts an element into the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: void IList.Insert(int index, object value)\n    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to insert.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>\\n<em>index</em> is greater than <xref href=\\\"System.Collections.CollectionBase.Count\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  seealso:\n  - type: System.Collections.IList.Add(System.Object)\n    commentId: M:System.Collections.IList.Add(System.Object)\n  - type: System.Collections.IList.Remove(System.Object)\n    commentId: M:System.Collections.IList.Remove(System.Object)\n  implements:\n  - System.Collections.IList.Insert(System.Int32,System.Object)\n  name.vb: System.Collections.IList.Insert(Int32, Object)\n  nameWithType: CollectionBase.IList.Insert(Int32, Object)\n  nameWithType.vb: CollectionBase.System.Collections.IList.Insert(Int32, Object)\n- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)\n  id: System#Collections#IList#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.CollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IList.Remove(Object)\n  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Collections/CollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: System.Collections.IList.Remove\n    path: src/mscorlib/src/System/Collections/CollectionBase.cs\n    startLine: 144\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the first occurrence of a specific object from the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IList.Remove(object value)\n    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to remove from the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>value</em> parameter was not found in the <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Collections.CollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size.</p>\\n\"\n  seealso:\n  - type: System.Collections.CollectionBase.RemoveAt(System.Int32)\n    commentId: M:System.Collections.CollectionBase.RemoveAt(System.Int32)\n  - type: System.Collections.IList.Add(System.Object)\n    commentId: M:System.Collections.IList.Add(System.Object)\n  - type: System.Collections.IList.Insert(System.Int32,System.Object)\n    commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n  implements:\n  - System.Collections.IList.Remove(System.Object)\n  name.vb: System.Collections.IList.Remove(Object)\n  nameWithType: CollectionBase.IList.Remove(Object)\n  nameWithType.vb: CollectionBase.System.Collections.IList.Remove(Object)\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Collections.ArrayList\n  parent: System.Collections\n  isExternal: false\n  name: ArrayList\n  fullName: System.Collections.ArrayList\n  nameWithType: ArrayList\n  commentId: T:System.Collections.ArrayList\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IList.IsFixedSize\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsFixedSize\n  fullName: System.Collections.IList.IsFixedSize\n  nameWithType: IList.IsFixedSize\n  commentId: P:System.Collections.IList.IsFixedSize\n- uid: System.Collections.IList.IsReadOnly\n  parent: System.Collections.IList\n  isExternal: false\n  name: IsReadOnly\n  fullName: System.Collections.IList.IsReadOnly\n  nameWithType: IList.IsReadOnly\n  commentId: P:System.Collections.IList.IsReadOnly\n- uid: System.Collections.IList.Item(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Item[Int32]\n  fullName: System.Collections.IList.Item[System.Int32]\n  fullname.vb: System.Collections.IList.Item(System.Int32)\n  name.vb: Item(Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: '['\n    fullName: '['\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IList.Item(System.Int32)\n    name: Item\n    fullName: System.Collections.IList.Item\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Item[Int32]\n  nameWithType.vb: IList.Item(Int32)\n  commentId: P:System.Collections.IList.Item(System.Int32)\n- uid: System.Collections.IList.Clear\n  parent: System.Collections.IList\n  isExternal: false\n  name: Clear()\n  fullName: System.Collections.IList.Clear()\n  spec.csharp:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Clear\n    name: Clear\n    fullName: System.Collections.IList.Clear\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IList.Clear()\n  commentId: M:System.Collections.IList.Clear\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.IList.RemoveAt(System.Int32)\n  parent: System.Collections.IList\n  isExternal: true\n  name: RemoveAt(Int32)\n  fullName: System.Collections.IList.RemoveAt(System.Int32)\n  spec.csharp:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.RemoveAt(System.Int32)\n    name: RemoveAt\n    fullName: System.Collections.IList.RemoveAt\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.RemoveAt(Int32)\n  commentId: M:System.Collections.IList.RemoveAt(System.Int32)\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IList.Add(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Add(Object)\n  fullName: System.Collections.IList.Add(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Add(System.Object)\n    name: Add\n    fullName: System.Collections.IList.Add\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Add(Object)\n  commentId: M:System.Collections.IList.Add(System.Object)\n- uid: System.Collections.IList.Contains(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IList.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IList.Contains\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Contains(Object)\n  commentId: M:System.Collections.IList.Contains(System.Object)\n- uid: System.Collections.IList.IndexOf(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: IndexOf(Object)\n  fullName: System.Collections.IList.IndexOf(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.IndexOf(System.Object)\n    name: IndexOf\n    fullName: System.Collections.IList.IndexOf\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.IndexOf(Object)\n  commentId: M:System.Collections.IList.IndexOf(System.Object)\n- uid: System.Collections.IList.Insert(System.Int32,System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Insert(Int32, Object)\n  fullName: System.Collections.IList.Insert(System.Int32, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Insert(System.Int32,System.Object)\n    name: Insert\n    fullName: System.Collections.IList.Insert\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Insert(Int32, Object)\n  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)\n- uid: System.Collections.IList.Remove(System.Object)\n  parent: System.Collections.IList\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IList.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IList.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IList.Remove\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IList.Remove(Object)\n  commentId: M:System.Collections.IList.Remove(System.Object)\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.OutOfMemoryException\n  isExternal: false\n  name: OutOfMemoryException\n  fullName: System.OutOfMemoryException\n  nameWithType: OutOfMemoryException\n  commentId: T:System.OutOfMemoryException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n"}