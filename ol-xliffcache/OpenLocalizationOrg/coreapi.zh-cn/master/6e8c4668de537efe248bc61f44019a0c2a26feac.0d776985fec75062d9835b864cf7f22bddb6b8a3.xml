{"nodes":[{"pos":[2331,2355],"content":"NameObjectCollectionBase","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase","pos":[0,24]}]},{"pos":[4841,4867],"content":"NameObjectCollectionBase()","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase()","pos":[0,26]}]},{"pos":[6467,6510],"content":"NameObjectCollectionBase(IEqualityComparer)","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase(IEqualityComparer)","pos":[0,43]}]},{"pos":[8523,8554],"content":"NameObjectCollectionBase(Int32)","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase(Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.","pos":[9953,9996],"source":"\\n<p>\\n<em>capacity</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[9997,10003],"source":" </p>\\n"},{"pos":[10809,10859],"content":"NameObjectCollectionBase(Int32, IEqualityComparer)","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase(Int32, IEqualityComparer)","pos":[0,50]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;capacity&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[12753,12802],"source":"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n"},{"pos":[13331,13336],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[14937,14947],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[16495,16499],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[18543,18569],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[20792,20812],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[22866,22889],"content":"BaseAdd(String, Object)","needQuote":true,"nodes":[{"content":"BaseAdd(String, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The collection is read-only.","pos":[24365,24398],"source":"\\n<p>The collection is read-only."},{"content":"&lt;/p&gt;\\n","pos":[24399,24405],"source":" </p>\\n"},{"pos":[24807,24818],"content":"BaseClear()","needQuote":true,"nodes":[{"content":"BaseClear()","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[25740,25779],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[26205,26219],"content":"BaseGet(Int32)","needQuote":true,"nodes":[{"content":"BaseGet(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based index of the value to get.&lt;/p&gt;\\n","pos":[27178,27230],"source":"\\n<p>The zero-based index of the value to get.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.","pos":[27571,27650],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection."},{"content":"&lt;/p&gt;\\n","pos":[27651,27657],"source":" </p>\\n"},{"pos":[28089,28104],"content":"BaseGet(String)","needQuote":true,"nodes":[{"content":"BaseGet(String)","pos":[0,15]}]},{"pos":[30070,30086],"content":"BaseGetAllKeys()","needQuote":true,"nodes":[{"content":"BaseGetAllKeys()","pos":[0,16]}]},{"pos":[31755,31773],"content":"BaseGetAllValues()","needQuote":true,"nodes":[{"content":"BaseGetAllValues()","pos":[0,18]}]},{"pos":[33497,33519],"content":"BaseGetAllValues(Type)","needQuote":true,"nodes":[{"content":"BaseGetAllValues(Type)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[35041,35087],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[35088,35094],"source":" </p>\\n"},{"pos":[35814,35831],"content":"BaseGetKey(Int32)","needQuote":true,"nodes":[{"content":"BaseGetKey(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based index of the key to get.&lt;/p&gt;\\n","pos":[36800,36850],"source":"\\n<p>The zero-based index of the key to get.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.","pos":[37188,37267],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection."},{"content":"&lt;/p&gt;\\n","pos":[37268,37274],"source":" </p>\\n"},{"pos":[37676,37689],"content":"BaseHasKeys()","needQuote":true,"nodes":[{"content":"BaseHasKeys()","pos":[0,13]}]},{"pos":[39342,39360],"content":"BaseRemove(String)","needQuote":true,"nodes":[{"content":"BaseRemove(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The collection is read-only.","pos":[40584,40617],"source":"\\n<p>The collection is read-only."},{"content":"&lt;/p&gt;\\n","pos":[40618,40624],"source":" </p>\\n"},{"pos":[41072,41091],"content":"BaseRemoveAt(Int32)","needQuote":true,"nodes":[{"content":"BaseRemoveAt(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry to remove.&lt;/p&gt;\\n","pos":[42043,42098],"source":"\\n<p>The zero-based index of the entry to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.&lt;/p&gt;\\n","pos":[42229,42314],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[42419,42458],"source":"\\n<p>The collection is read-only.</p>\\n"},{"pos":[42934,42956],"content":"BaseSet(Int32, Object)","needQuote":true,"nodes":[{"content":"BaseSet(Int32, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The zero-based index of the entry to set.&lt;/p&gt;\\n","pos":[43944,43996],"source":"\\n<p>The zero-based index of the entry to set.</p>\\n"},{"content":"\\n&lt;p&gt;The collection is read-only.&lt;/p&gt;\\n","pos":[44358,44397],"source":"\\n<p>The collection is read-only.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the valid range of indexes for the collection.&lt;/p&gt;\\n","pos":[44514,44599],"source":"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n"},{"pos":[45081,45104],"content":"BaseSet(String, Object)","needQuote":true,"nodes":[{"content":"BaseSet(String, Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The collection is read-only.","pos":[46815,46848],"source":"\\n<p>The collection is read-only."},{"content":"&lt;/p&gt;\\n","pos":[46849,46855],"source":" </p>\\n"},{"pos":[47447,47462],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[49305,49337],"content":"ICollection.CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"ICollection.CopyTo(Array, Int32)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.&lt;/p&gt;\\n","pos":[50985,51059],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[51178,51231],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[51348,51394],"source":"\\n<p>\\n<em>index</em> is less than zero.</p>\\n"},{"pos":[52539,52569],"content":"System.Collections.Specialized","needQuote":true,"nodes":[{"content":"System.Collections.Specialized","pos":[0,30]}]},{"pos":[52772,52778],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[52952,52963],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[53176,53187],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[53386,53396],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[53491,53499],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[53568,53569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53596,53597],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53667,53675],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[53744,53745],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53772,53773],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53956,53970],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[54089,54095],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54162,54163],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54213,54219],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54279,54280],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54363,54369],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[54436,54437],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54487,54493],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[54553,54554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54768,54790],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[54938,54944],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55011,55012],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55062,55068],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55129,55130]},{"pos":[55185,55191],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55251,55252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55349,55355],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[55422,55423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55473,55479],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[55540,55541]},{"pos":[55596,55602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[55662,55663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55908,55939],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[56105,56120],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[56196,56197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56247,56253],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56314,56315]},{"pos":[56370,56376],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56436,56437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56543,56558],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[56634,56635],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[56685,56691],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[56752,56753]},{"pos":[56808,56814],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[56874,56875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57105,57118],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[57219,57230],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[57302,57303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57330,57331],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57404,57415],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[57487,57488],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57515,57516],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57691,57700],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[57793,57800],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[57868,57869],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57896,57897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57966,57973],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[58041,58042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58069,58070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58245,58262],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[58371,58386],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58462,58463],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58490,58491],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58568,58583],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[58659,58660],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58687,58688],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58983,58996],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[59113,59124],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[59183,59184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59211,59212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59293,59304],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[59363,59364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59391,59392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59747,59759],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[59892,59902],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[59969,59970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59997,59998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60087,60097],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[60164,60165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60192,60193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60534,60549],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[60753,60766],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[60828,60829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60856,60857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60935,60951],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[61016,61017],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61044,61045],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61423,61440],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[61652,61667],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[61731,61732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61759,61760],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61840,61858],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[61925,61926],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61953,61954],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62189,62195],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[62314,62332],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[62533,62557],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[62736,62747],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[62806,62807],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62874,62885],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[62962,62963],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63076,63087],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[63146,63147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63214,63225],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[63302,63303],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63531,63540],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[63746,63769],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[63964,63974],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[64041,64042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64109,64120],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[64197,64198],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64319,64329],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[64396,64397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64464,64475],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[64552,64553],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64806,64824],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[65046,65072],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[65379,65392],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[65454,65455],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65522,65533],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65610,65611],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65721,65737],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[65802,65803],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65870,65881],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[65958,65959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66248,66258],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[66458,66486],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[66801,66816],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[66880,66881],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66948,66959],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[67036,67037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67149,67167],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[67234,67235],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67302,67313],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[67390,67391],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67653,67664],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[67845,67862],"content":"IEqualityComparer","needQuote":true,"nodes":[{"content":"IEqualityComparer","pos":[0,17]}]},{"pos":[68063,68068],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[68257,68262],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[68465,68472],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[68701,68740],"content":"NameObjectCollectionBase.KeysCollection","needQuote":true,"nodes":[{"content":"NameObjectCollectionBase.KeysCollection","pos":[0,39]}]},{"pos":[69088,69102],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[69381,69389],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[69600,69606],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[69716,69724],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[69852,69858],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[69919,69921]},{"pos":[69986,69992],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[70052,70054],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[70156,70164],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[70292,70298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[70359,70361]},{"pos":[70426,70432],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70492,70494],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[70629,70633],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[70827,70842],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[70981,70994],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71064,71065],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71092,71093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71185,71198],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[71268,71269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71296,71297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71513,71524],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[71782,71802],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[71980,71986],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[72049,72050],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72099,72104],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[72143,72144]},{"pos":[72198,72203],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72262,72263],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72375,72381],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[72444,72445],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72494,72499],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[72538,72539]},{"pos":[72593,72598],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[72657,72658],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72869,72874],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[73020,73047],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[73270,73291],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[73479,73500],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[73701,73718],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[73893,73913],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Collections.Specialized.NameObjectCollectionBase\n  commentId: T:System.Collections.Specialized.NameObjectCollectionBase\n  id: NameObjectCollectionBase\n  parent: System.Collections.Specialized\n  children:\n  - System.Collections.Specialized.NameObjectCollectionBase.#ctor\n  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n  - System.Collections.Specialized.NameObjectCollectionBase.Count\n  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  - System.Collections.Specialized.NameObjectCollectionBase.Keys\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n  langs:\n  - csharp\n  - vb\n  name: NameObjectCollectionBase\n  fullName: System.Collections.Specialized.NameObjectCollectionBase\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameObjectCollectionBase\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 20\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Provides the <strong>abstract</strong> base class for a collection of associated <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> keys and <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that can be accessed either with the key or with the index.</p>\\n\"\n  syntax:\n    content: 'public abstract class NameObjectCollectionBase : ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class NameObjectCollectionBase\n          Implements ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.Specialized.NameValueCollection\n    commentId: T:System.Collections.Specialized.NameValueCollection\n  - type: System.String\n    commentId: T:System.String\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: NameObjectCollectionBase\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: NameObjectCollectionBase()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 37\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty.</p>\\n\"\n  syntax:\n    content: protected NameObjectCollectionBase()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)\n  id: '#ctor(System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: NameObjectCollectionBase(IEqualityComparer)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 41\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected NameObjectCollectionBase(IEqualityComparer equalityComparer)\n    content.vb: Protected Sub New(equalityComparer As IEqualityComparer)\n    parameters:\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: NameObjectCollectionBase(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 57\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and uses the default hash code provider and the default comparer.</p>\\n\"\n  syntax:\n    content: protected NameObjectCollectionBase(int capacity)\n    content.vb: Protected Sub New(capacity As Integer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of entries that the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance can initially contain.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero. </p>\\n\"\n  seealso:\n  - type: System.Collections.CaseInsensitiveHashCodeProvider\n    commentId: T:System.Collections.CaseInsensitiveHashCodeProvider\n  - type: System.Collections.CaseInsensitiveComparer\n    commentId: T:System.Collections.CaseInsensitiveComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)\n  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: NameObjectCollectionBase(Int32, IEqualityComparer)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Int32, System.Collections.IEqualityComparer)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 47\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: protected NameObjectCollectionBase(int capacity, IEqualityComparer equalityComparer)\n    content.vb: Protected Sub New(capacity As Integer, equalityComparer As IEqualityComparer)\n    parameters:\n    - id: capacity\n      type: System.Int32\n      description: \"\\n<p>The approximate number of entries that the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object can initially contain.</p>\\n\"\n    - id: equalityComparer\n      type: System.Collections.IEqualityComparer\n      description: \"\\n<p>The <xref href=\\\"System.Collections.IEqualityComparer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to use to determine whether two keys are equal and to generate hash codes for the keys in the collection.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>capacity</em> is less than zero.</p>\\n\"\n  seealso:\n  - type: System.Collections.IEqualityComparer\n    commentId: T:System.Collections.IEqualityComparer\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32, IEqualityComparer)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.Count\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.Count\n  id: Count\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 322\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the number of key/value pairs contained in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual int Count { get; }\n    content.vb: Public Overridable ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of key/value pairs contained in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NameObjectCollectionBase.Count\n- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  id: IsReadOnly\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: IsReadOnly\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsReadOnly\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 107\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets or sets a value indicating whether the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is read-only.</p>\\n\"\n  syntax:\n    content: protected bool IsReadOnly { get; set; }\n    content.vb: Protected Property IsReadOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance is read-only; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.IsReadOnly\n- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.Keys\n  id: Keys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Keys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 436\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains all the keys in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public virtual NameObjectCollectionBase.KeysCollection Keys { get; }\n    content.vb: Public Overridable ReadOnly Property Keys As NameObjectCollectionBase.KeysCollection\n    parameters: []\n    return:\n      type: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains all the keys in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: NameObjectCollectionBase.Keys\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 368\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether access to the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: NameObjectCollectionBase.ICollection.IsSynchronized\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 356\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: NameObjectCollectionBase.ICollection.SyncRoot\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)\n  id: BaseAdd(System.String,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseAdd(String, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseAdd\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 130\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Adds an entry with the specified key and value into the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseAdd(string name, object value)\n    content.vb: Protected Sub BaseAdd(name As String, value As Object)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to add. The key can be <strong>null</strong>.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value of the entry to add. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseAdd(String, Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseClear\n  id: BaseClear\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseClear()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseClear\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 223\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes all entries from the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseClear()\n    content.vb: Protected Sub BaseClear\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseClear()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  id: BaseGet(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGet(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGet\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 276\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the value of the entry at the specified index of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected object BaseGet(int index)\n    content.vb: Protected Function BaseGet(index As Integer) As Object\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the value to get.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the value of the entry at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGet(Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  id: BaseGet(System.String)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGet(String)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGet\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 239\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the value of the first entry with the specified key from the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected object BaseGet(string name)\n    content.vb: Protected Function BaseGet(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to get. The key can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the value of the first entry with the specified key, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n    commentId: M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGet(String)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys\n  id: BaseGetAllKeys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGetAllKeys()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGetAllKeys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 381\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns a <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains all the keys in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected string[] BaseGetAllKeys()\n    content.vb: Protected Function BaseGetAllKeys As String()\n    return:\n      type: System.String[]\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains all the keys in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues\n  id: BaseGetAllValues\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGetAllValues()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGetAllValues\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 396\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains all the values in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected object[] BaseGetAllValues()\n    content.vb: Protected Function BaseGetAllValues As Object()\n    return:\n      type: System.Object[]\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains all the values in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGetAllValues()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  id: BaseGetAllValues(System.Type)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGetAllValues(Type)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGetAllValues\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 411\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an array of the specified type that contains all the values in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected object[] BaseGetAllValues(Type type)\n    content.vb: Protected Function BaseGetAllValues(type As Type) As Object()\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the type of array to return.</p>\\n\"\n    return:\n      type: System.Object[]\n      description: \"\\n<p>An array of the specified type that contains all the values in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>type</em> is not a valid <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  id: BaseGetKey(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseGetKey(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseGetKey\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 287\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets the key of the entry at the specified index of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected string BaseGetKey(int index)\n    content.vb: Protected Function BaseGetKey(index As Integer) As String\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the key to get.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the key of the entry at the specified index.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys\n  id: BaseHasKeys\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseHasKeys()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseHasKeys\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 117\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance contains entries whose keys are not <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: protected bool BaseHasKeys()\n    content.vb: Protected Function BaseHasKeys As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance contains entries whose keys are not <strong>null</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseHasKeys()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  id: BaseRemove(System.String)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseRemove(String)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseRemove\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 159\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entries with the specified key from the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseRemove(string name)\n    content.vb: Protected Sub BaseRemove(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entries to remove. The key can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseRemove(String)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  id: BaseRemoveAt(System.Int32)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseRemoveAt(Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseRemoveAt\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 196\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Removes the entry at the specified index of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseRemoveAt(int index)\n    content.vb: Protected Sub BaseRemoveAt(index As Integer)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)\n  id: BaseSet(System.Int32,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseSet(Int32, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseSet\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 297\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Sets the value of the entry at the specified index of the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseSet(int index, object value)\n    content.vb: Protected Sub BaseSet(index As Integer, value As Object)\n    parameters:\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the entry to set.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the new value of the entry to set. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the valid range of indexes for the collection.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseSet(Int32, Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)\n  id: BaseSet(System.String,System.Object)\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: BaseSet(String, Object)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BaseSet\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 251\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Sets the value of the first entry with the specified key in the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance, if found; otherwise, adds an entry with the specified key and value into the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected void BaseSet(string name, object value)\n    content.vb: Protected Sub BaseSet(name As String, value As Object)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> key of the entry to set. The key can be <strong>null</strong>.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the new value of the entry to set. The value can be <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The collection is read-only. </p>\\n\"\n  seealso:\n  - type: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n    commentId: M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: NameObjectCollectionBase.BaseSet(String, Object)\n- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 314\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Returns an enumerator that iterates through the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerator GetEnumerator()\n    content.vb: Public Overridable Function GetEnumerator As IEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: NameObjectCollectionBase.GetEnumerator()\n- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)\n  isEii: true\n  parent: System.Collections.Specialized.NameObjectCollectionBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.CopyTo(Array, Int32)\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.CopyTo\n    path: src/System.Collections.Specialized/src/System/Collections/Specialized/NameObjectCollectionBase.cs\n    startLine: 330\n  assemblies:\n  - System.Collections.Specialized\n  namespace: System.Collections.Specialized\n  summary: \"\\n<p>Copies the entire <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a compatible one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, starting at the specified index of the target array.</p>\\n\"\n  syntax:\n    content: void ICollection.CopyTo(Array array, int index)\n    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the elements copied from <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing.</p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or-</p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.Specialized.NameObjectCollectionBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)\n  nameWithType: NameObjectCollectionBase.ICollection.CopyTo(Array, Int32)\n  nameWithType.vb: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array, Int32)\nreferences:\n- uid: System.Collections.Specialized\n  isExternal: false\n  name: System.Collections.Specialized\n  fullName: System.Collections.Specialized\n  nameWithType: System.Collections.Specialized\n  commentId: N:System.Collections.Specialized\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.IEqualityComparer\n  parent: System.Collections\n  isExternal: false\n  name: IEqualityComparer\n  fullName: System.Collections.IEqualityComparer\n  nameWithType: IEqualityComparer\n  commentId: T:System.Collections.IEqualityComparer\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\n  parent: System.Collections.Specialized\n  isExternal: false\n  name: NameObjectCollectionBase.KeysCollection\n  fullName: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\n  nameWithType: NameObjectCollectionBase.KeysCollection\n  commentId: T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}