{"nodes":[{"pos":[1533,1556],"content":"TypeDescriptionProvider","needQuote":true,"nodes":[{"content":"TypeDescriptionProvider","pos":[0,23]}]},{"pos":[3577,3602],"content":"TypeDescriptionProvider()","needQuote":true,"nodes":[{"content":"TypeDescriptionProvider()","pos":[0,25]}]},{"pos":[5130,5178],"content":"TypeDescriptionProvider(TypeDescriptionProvider)","needQuote":true,"nodes":[{"content":"TypeDescriptionProvider(TypeDescriptionProvider)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;The parent type description provider.&lt;/p&gt;\\n","pos":[6230,6278],"source":"\\n<p>The parent type description provider.</p>\\n"},{"pos":[7014,7070],"content":"CreateInstance(IServiceProvider, Type, Type[], Object[])","needQuote":true,"nodes":[{"content":"CreateInstance(IServiceProvider, Type, Type[], Object[])","pos":[0,56]}]},{"content":"\\n&lt;p&gt;An optional service provider.&lt;/p&gt;\\n","pos":[8128,8168],"source":"\\n<p>An optional service provider.</p>\\n"},{"content":"\\n&lt;p&gt;The type of object to create.","pos":[8235,8269],"source":"\\n<p>The type of object to create."},{"content":"This parameter is never &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8270,8322],"source":" This parameter is never <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An optional array of types that represent the parameter types to be passed to the object's constructor.","pos":[8389,8497],"source":"\\n<p>An optional array of types that represent the parameter types to be passed to the object's constructor."},{"content":"This array can be &lt;strong&gt;null&lt;/strong&gt; or of zero length.&lt;/p&gt;\\n","pos":[8498,8562],"source":" This array can be <strong>null</strong> or of zero length.</p>\\n"},{"content":"\\n&lt;p&gt;An optional array of parameter values to pass to the object's constructor.&lt;/p&gt;\\n","pos":[8627,8712],"source":"\\n<p>An optional array of parameter values to pass to the object's constructor.</p>\\n"},{"pos":[9930,9946],"content":"GetCache(Object)","needQuote":true,"nodes":[{"content":"GetCache(Object)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The object for which to get the cache.&lt;/p&gt;\\n","pos":[10888,10937],"source":"\\n<p>The object for which to get the cache.</p>\\n"},{"pos":[11895,11928],"content":"GetExtendedTypeDescriptor(Object)","needQuote":true,"nodes":[{"content":"GetExtendedTypeDescriptor(Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The object for which to get the extended type descriptor.&lt;/p&gt;\\n","pos":[12870,12938],"source":"\\n<p>The object for which to get the extended type descriptor.</p>\\n"},{"pos":[13974,14002],"content":"GetExtenderProviders(Object)","needQuote":true,"nodes":[{"content":"GetExtenderProviders(Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The object to get extender providers for.&lt;/p&gt;\\n","pos":[14918,14970],"source":"\\n<p>The object to get extender providers for.</p>\\n"},{"content":"\\n&lt;p&gt;An array of extender providers for &lt;em&gt;instance&lt;/em&gt;.&lt;/p&gt;\\n","pos":[15058,15122],"source":"\\n<p>An array of extender providers for <em>instance</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15241,15297],"source":"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n"},{"pos":[15779,15807],"content":"GetFullComponentName(Object)","needQuote":true,"nodes":[{"content":"GetFullComponentName(Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The specified component.&lt;/p&gt;\\n","pos":[16737,16772],"source":"\\n<p>The specified component.</p>\\n"},{"content":"\\n&lt;p&gt;The name of the specified component.&lt;/p&gt;\\n","pos":[16832,16879],"source":"\\n<p>The name of the specified component.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;component&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16998,17055],"source":"\\n<p>\\n<em>component</em> is <strong>null</strong>.</p>\\n"},{"pos":[17522,17547],"content":"GetReflectionType(Object)","needQuote":true,"nodes":[{"content":"GetReflectionType(Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An instance of the type (should not be &lt;strong&gt;null&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[18394,18467],"source":"\\n<p>An instance of the type (should not be <strong>null</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;The type of reflection for this &lt;em&gt;instance&lt;/em&gt;.&lt;/p&gt;\\n","pos":[18525,18586],"source":"\\n<p>The type of reflection for this <em>instance</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18705,18761],"source":"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n"},{"pos":[19387,19410],"content":"GetReflectionType(Type)","needQuote":true,"nodes":[{"content":"GetReflectionType(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type of reflection for this &lt;em&gt;objectType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[20446,20509],"source":"\\n<p>The type of reflection for this <em>objectType</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;objectType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20628,20686],"source":"\\n<p>\\n<em>objectType</em> is <strong>null</strong>.</p>\\n"},{"pos":[21352,21383],"content":"GetReflectionType(Type, Object)","needQuote":true,"nodes":[{"content":"GetReflectionType(Type, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An instance of the type.","pos":[22530,22559],"source":"\\n<p>An instance of the type."},{"content":"Can be &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22560,22595],"source":" Can be <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The type of reflection for this &lt;em&gt;objectType&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22653,22716],"source":"\\n<p>The type of reflection for this <em>objectType</em>.</p>\\n"},{"pos":[23367,23387],"content":"GetRuntimeType(Type)","needQuote":true,"nodes":[{"content":"GetRuntimeType(Type)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The type to convert to its runtime equivalent.&lt;/p&gt;\\n","pos":[24247,24304],"source":"\\n<p>The type to convert to its runtime equivalent.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;reflectionType&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[24632,24694],"source":"\\n<p>\\n<em>reflectionType</em> is <strong>null</strong>.</p>\\n"},{"pos":[25153,25178],"content":"GetTypeDescriptor(Object)","needQuote":true,"nodes":[{"content":"GetTypeDescriptor(Object)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[26619,26675],"source":"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n"},{"pos":[27317,27340],"content":"GetTypeDescriptor(Type)","needQuote":true,"nodes":[{"content":"GetTypeDescriptor(Type)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The type of object for which to retrieve the type descriptor.&lt;/p&gt;\\n","pos":[28216,28288],"source":"\\n<p>The type of object for which to retrieve the type descriptor.</p>\\n"},{"pos":[29217,29248],"content":"GetTypeDescriptor(Type, Object)","needQuote":true,"nodes":[{"content":"GetTypeDescriptor(Type, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The type of object for which to retrieve the type descriptor.&lt;/p&gt;\\n","pos":[30207,30279],"source":"\\n<p>The type of object for which to retrieve the type descriptor.</p>\\n"},{"pos":[31458,31479],"content":"IsSupportedType(Type)","needQuote":true,"nodes":[{"content":"IsSupportedType(Type)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The type to test for compatibility.&lt;/p&gt;\\n","pos":[32409,32455],"source":"\\n<p>The type to test for compatibility.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;type&lt;/em&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[32516,32681],"source":"\\n<p>\\n<strong>true</strong> if <em>type</em> is compatible with the type description and its chain of type description providers; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[32682,32688],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32807,32859],"source":"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n"},{"pos":[33078,33099],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[33275,33281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33441,33451],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[33546,33554],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33623,33624],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33651,33652],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33722,33730],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[33799,33800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33827,33828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34011,34025],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[34144,34150],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34217,34218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34268,34274],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34334,34335],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34418,34424],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[34491,34492],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34542,34548],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34608,34609],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34823,34845],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[34993,34999],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35066,35067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35117,35123],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35184,35185]},{"pos":[35240,35246],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35306,35307],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35404,35410],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[35477,35478],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35528,35534],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[35595,35596]},{"pos":[35651,35657],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[35717,35718],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35963,35994],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[36160,36175],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36251,36252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36302,36308],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36369,36370]},{"pos":[36425,36431],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36491,36492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36598,36613],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[36689,36690],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36740,36746],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36807,36808]},{"pos":[36863,36869],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36929,36930],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37160,37173],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37274,37285],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37357,37358],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37385,37386],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37459,37470],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[37542,37543],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37570,37571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37746,37755],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[37848,37855],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[37923,37924],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37951,37952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38021,38028],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[38096,38097],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38124,38125],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38300,38317],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[38426,38441],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[38517,38518],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38545,38546],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38623,38638],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[38714,38715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38742,38743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38888,38894],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[39072,39095],"content":"TypeDescriptionProvider","needQuote":true,"nodes":[{"content":"TypeDescriptionProvider","pos":[0,23]}]},{"pos":[39331,39347],"content":"IServiceProvider","needQuote":true,"nodes":[{"content":"IServiceProvider","pos":[0,16]}]},{"pos":[39520,39524],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[39626,39632],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[39752,39756],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[39794,39796]},{"pos":[39859,39863],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[39900,39902],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[40000,40008],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[40136,40142],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[40203,40205]},{"pos":[40270,40276],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40336,40338],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[40504,40515],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[40687,40705],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[40917,40938],"content":"ICustomTypeDescriptor","needQuote":true,"nodes":[{"content":"ICustomTypeDescriptor","pos":[0,21]}]},{"pos":[41149,41168],"content":"IExtenderProvider[]","needQuote":true,"nodes":[{"content":"IExtenderProvider[]","pos":[0,19]}]},{"pos":[41385,41402],"content":"IExtenderProvider","needQuote":true,"nodes":[{"content":"IExtenderProvider","pos":[0,17]}]},{"content":"[]","pos":[41468,41470]},{"pos":[41561,41578],"content":"IExtenderProvider","needQuote":true,"nodes":[{"content":"IExtenderProvider","pos":[0,17]}]},{"pos":[41643,41645],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[41804,41810],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[41956,41963],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42109,42130],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.TypeDescriptionProvider\n  commentId: T:System.ComponentModel.TypeDescriptionProvider\n  id: TypeDescriptionProvider\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.TypeDescriptionProvider.#ctor\n  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\n  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)\n  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\n  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)\n  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)\n  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)\n  langs:\n  - csharp\n  - vb\n  name: TypeDescriptionProvider\n  fullName: System.ComponentModel.TypeDescriptionProvider\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeDescriptionProvider\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 14\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides supplemental metadata to the <xref href=\\\"System.ComponentModel.TypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract class TypeDescriptionProvider\n    content.vb: Public MustInherit Class TypeDescriptionProvider\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)\n  - type: System.ComponentModel.TypeDescriptionProviderAttribute\n    commentId: T:System.ComponentModel.TypeDescriptionProviderAttribute\n  - type: System.ComponentModel.ICustomTypeDescriptor\n    commentId: T:System.ComponentModel.ICustomTypeDescriptor\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TypeDescriptionProvider\n- uid: System.ComponentModel.TypeDescriptionProvider.#ctor\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor\n  id: '#ctor'\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: TypeDescriptionProvider()\n  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 27\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.TypeDescriptionProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected TypeDescriptionProvider()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()\n- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\n  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: TypeDescriptionProvider(TypeDescriptionProvider)\n  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(System.ComponentModel.TypeDescriptionProvider)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 39\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.TypeDescriptionProvider\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class using a parent type description provider.</p>\\n\"\n  syntax:\n    content: protected TypeDescriptionProvider(TypeDescriptionProvider parent)\n    content.vb: Protected Sub New(parent As TypeDescriptionProvider)\n    parameters:\n    - id: parent\n      type: System.ComponentModel.TypeDescriptionProvider\n      description: \"\\n<p>The parent type description provider.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.CustomTypeDescriptor\n    commentId: T:System.ComponentModel.CustomTypeDescriptor\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)\n- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance(IServiceProvider, Type, Type[], Object[])\n  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateInstance\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 53\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates an object that can substitute for another data type.</p>\\n\"\n  syntax:\n    content: public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)\n    content.vb: Public Overridable Function CreateInstance(provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object\n    parameters:\n    - id: provider\n      type: System.IServiceProvider\n      description: \"\\n<p>An optional service provider.</p>\\n\"\n    - id: objectType\n      type: System.Type\n      description: \"\\n<p>The type of object to create. This parameter is never <strong>null</strong>.</p>\\n\"\n    - id: argTypes\n      type: System.Type[]\n      description: \"\\n<p>An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be <strong>null</strong> or of zero length.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An optional array of parameter values to pass to the object's constructor.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The substitute <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type(), System.Object())\n  name.vb: CreateInstance(IServiceProvider, Type, Type(), Object())\n  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider, Type, Type[], Object[])\n  nameWithType.vb: TypeDescriptionProvider.CreateInstance(IServiceProvider, Type, Type(), Object())\n- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\n  id: GetCache(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetCache(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetCache\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 79\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a per-object cache, accessed as an <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of key/value pairs.</p>\\n\"\n  syntax:\n    content: public virtual IDictionary GetCache(object instance)\n    content.vb: Public Overridable Function GetCache(instance As Object) As IDictionary\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The object for which to get the cache.</p>\\n\"\n    return:\n      type: System.Collections.IDictionary\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the provided object supports caching; otherwise, <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.ComponentModel.Design.IDictionaryService\n    commentId: T:System.ComponentModel.Design.IDictionaryService\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetCache(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  id: GetExtendedTypeDescriptor(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetExtendedTypeDescriptor(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetExtendedTypeDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 103\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets an extended custom type descriptor for the given object.</p>\\n\"\n  syntax:\n    content: public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance)\n    content.vb: Public Overridable Function GetExtendedTypeDescriptor(instance As Object) As ICustomTypeDescriptor\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The object for which to get the extended type descriptor.</p>\\n\"\n    return:\n      type: System.ComponentModel.ICustomTypeDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ICustomTypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can provide extended metadata for the object.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)\n  id: GetExtenderProviders(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetExtenderProviders(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetExtenderProviders\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 118\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the extender providers for the specified object.</p>\\n\"\n  syntax:\n    content: protected virtual IExtenderProvider[] GetExtenderProviders(object instance)\n    content.vb: Protected Overridable Function GetExtenderProviders(instance As Object) As IExtenderProvider()\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The object to get extender providers for.</p>\\n\"\n    return:\n      type: System.ComponentModel.IExtenderProvider[]\n      description: \"\\n<p>An array of extender providers for <em>instance</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)\n  id: GetFullComponentName(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetFullComponentName(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFullComponentName\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 142\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the name of the specified component, or <strong>null</strong> if the component has no name.</p>\\n\"\n  syntax:\n    content: public virtual string GetFullComponentName(object component)\n    content.vb: Public Overridable Function GetFullComponentName(component As Object) As String\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The specified component.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the specified component.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>component</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)\n  id: GetReflectionType(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetReflectionType(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetReflectionType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 171\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Performs normal reflection against the given object.</p>\\n\"\n  syntax:\n    content: public Type GetReflectionType(object instance)\n    content.vb: Public Function GetReflectionType(instance As Object) As Type\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>An instance of the type (should not be <strong>null</strong>).</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of reflection for this <em>instance</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)\n  id: GetReflectionType(System.Type)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetReflectionType(Type)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetReflectionType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 157\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Performs normal reflection against a type.</p>\\n\"\n  syntax:\n    content: public Type GetReflectionType(Type objectType)\n    content.vb: Public Function GetReflectionType(objectType As Type) As Type\n    parameters:\n    - id: objectType\n      type: System.Type\n      description: \"\\n<p>The type of object for which to retrieve the <xref href=\\\"System.Reflection.IReflect\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of reflection for this <em>objectType</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>objectType</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)\n  id: GetReflectionType(System.Type,System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetReflectionType(Type, Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetReflectionType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 190\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Performs normal reflection against the given object with the given type.</p>\\n\"\n  syntax:\n    content: public virtual Type GetReflectionType(Type objectType, object instance)\n    content.vb: Public Overridable Function GetReflectionType(objectType As Type, instance As Object) As Type\n    parameters:\n    - id: objectType\n      type: System.Type\n      description: \"\\n<p>The type of object for which to retrieve the <xref href=\\\"System.Reflection.IReflect\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>An instance of the type. Can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type of reflection for this <em>objectType</em>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetReflectionType(Type, Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\n  id: GetRuntimeType(System.Type)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetRuntimeType(Type)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetRuntimeType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 206\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Converts a reflection type into a runtime type.</p>\\n\"\n  syntax:\n    content: public virtual Type GetRuntimeType(Type reflectionType)\n    content.vb: Public Overridable Function GetRuntimeType(reflectionType As Type) As Type\n    parameters:\n    - id: reflectionType\n      type: System.Type\n      description: \"\\n<p>The type to convert to its runtime equivalent.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the runtime equivalent of <em>reflectionType</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>reflectionType</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  id: GetTypeDescriptor(System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetTypeDescriptor(Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypeDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 247\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a custom type descriptor for the given object.</p>\\n\"\n  syntax:\n    content: public ICustomTypeDescriptor GetTypeDescriptor(object instance)\n    content.vb: Public Function GetTypeDescriptor(instance As Object) As ICustomTypeDescriptor\n    parameters:\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>An instance of the type. Can be <strong>null</strong> if no instance was passed to the <xref href=\\\"System.ComponentModel.TypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.ComponentModel.ICustomTypeDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ICustomTypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can provide metadata for the type.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>instance</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)\n  id: GetTypeDescriptor(System.Type)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetTypeDescriptor(Type)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypeDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 234\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a custom type descriptor for the given type.</p>\\n\"\n  syntax:\n    content: public ICustomTypeDescriptor GetTypeDescriptor(Type objectType)\n    content.vb: Public Function GetTypeDescriptor(objectType As Type) As ICustomTypeDescriptor\n    parameters:\n    - id: objectType\n      type: System.Type\n      description: \"\\n<p>The type of object for which to retrieve the type descriptor.</p>\\n\"\n    return:\n      type: System.ComponentModel.ICustomTypeDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ICustomTypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can provide metadata for the type.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)\n- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)\n  id: GetTypeDescriptor(System.Type,System.Object)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: GetTypeDescriptor(Type, Object)\n  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetTypeDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 271\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a custom type descriptor for the given type and object.</p>\\n\"\n  syntax:\n    content: public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)\n    content.vb: Public Overridable Function GetTypeDescriptor(objectType As Type, instance As Object) As ICustomTypeDescriptor\n    parameters:\n    - id: objectType\n      type: System.Type\n      description: \"\\n<p>The type of object for which to retrieve the type descriptor.</p>\\n\"\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>An instance of the type. Can be <strong>null</strong> if no instance was passed to the <xref href=\\\"System.ComponentModel.TypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.ComponentModel.ICustomTypeDescriptor\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.ICustomTypeDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can provide metadata for the type.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type, Object)\n- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)\n  commentId: M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)\n  id: IsSupportedType(System.Type)\n  parent: System.ComponentModel.TypeDescriptionProvider\n  langs:\n  - csharp\n  - vb\n  name: IsSupportedType(Type)\n  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsSupportedType\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs\n    startLine: 290\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers. </p>\\n\"\n  syntax:\n    content: public virtual bool IsSupportedType(Type type)\n    content.vb: Public Overridable Function IsSupportedType(type As Type) As Boolean\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type to test for compatibility.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>type</em> is compatible with the type description and its chain of type description providers; otherwise, <strong>false</strong>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ComponentModel.TypeDescriptionProvider\n  parent: System.ComponentModel\n  isExternal: false\n  name: TypeDescriptionProvider\n  fullName: System.ComponentModel.TypeDescriptionProvider\n  nameWithType: TypeDescriptionProvider\n  commentId: T:System.ComponentModel.TypeDescriptionProvider\n- uid: System.IServiceProvider\n  parent: System\n  isExternal: false\n  name: IServiceProvider\n  fullName: System.IServiceProvider\n  nameWithType: IServiceProvider\n  commentId: T:System.IServiceProvider\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.ComponentModel.ICustomTypeDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: ICustomTypeDescriptor\n  fullName: System.ComponentModel.ICustomTypeDescriptor\n  nameWithType: ICustomTypeDescriptor\n  commentId: T:System.ComponentModel.ICustomTypeDescriptor\n- uid: System.ComponentModel.IExtenderProvider[]\n  name: IExtenderProvider[]\n  fullName: System.ComponentModel.IExtenderProvider[]\n  fullname.vb: System.ComponentModel.IExtenderProvider()\n  name.vb: IExtenderProvider()\n  spec.csharp:\n  - uid: System.ComponentModel.IExtenderProvider\n    name: IExtenderProvider\n    fullName: System.ComponentModel.IExtenderProvider\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.ComponentModel.IExtenderProvider\n    name: IExtenderProvider\n    fullName: System.ComponentModel.IExtenderProvider\n  - name: ()\n    fullName: ()\n  nameWithType: IExtenderProvider[]\n  nameWithType.vb: IExtenderProvider()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}