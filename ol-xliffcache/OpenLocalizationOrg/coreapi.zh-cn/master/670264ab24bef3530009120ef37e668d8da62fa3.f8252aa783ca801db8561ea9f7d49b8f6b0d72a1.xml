{"nodes":[{"pos":[296,304],"content":"Debugger","needQuote":true,"nodes":[{"content":"Debugger","pos":[0,8]}]},{"pos":[1570,1580],"content":"IsAttached","needQuote":true,"nodes":[{"content":"IsAttached","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if a debugger is attached; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[2217,2313],"source":"\\n<p>\\n<strong>true</strong> if a debugger is attached; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[2627,2634],"content":"Break()","needQuote":true,"nodes":[{"content":"Break()","pos":[0,7]}]},{"pos":[4066,4074],"content":"Launch()","needQuote":true,"nodes":[{"content":"Launch()","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the startup is successful or if the debugger is already attached; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4776,4914],"source":"\\n<p>\\n<strong>true</strong> if the startup is successful or if the debugger is already attached; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[5732,5750],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[5917,5923],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6083,6093],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6188,6196],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6265,6266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6293,6294],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6364,6372],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6441,6442],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6469,6470],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6653,6667],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6786,6792],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6859,6860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6910,6916],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6976,6977],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7060,7066],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7133,7134],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7184,7190],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7250,7251],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7465,7487],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7635,7641],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7708,7709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7759,7765],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7826,7827]},{"pos":[7882,7888],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7948,7949],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8046,8052],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8119,8120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8170,8176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8237,8238]},{"pos":[8293,8299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8359,8360],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8605,8636],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8802,8817],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8893,8894],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8944,8950],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9011,9012]},{"pos":[9067,9073],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9133,9134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9240,9255],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9331,9332],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9382,9388],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9449,9450]},{"pos":[9505,9511],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9571,9572],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9802,9815],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[9916,9927],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[9999,10000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10027,10028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10101,10112],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10184,10185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10212,10213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10388,10397],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10490,10497],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10565,10566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10593,10594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10663,10670],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10738,10739],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10766,10767],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10942,10959],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11068,11083],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11159,11160],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11187,11188],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11265,11280],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11356,11357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11384,11385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11530,11536],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11668,11675],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[11826,11843],"content":"SecurityException","needQuote":true,"nodes":[{"content":"SecurityException","pos":[0,17]}]}],"content":"items:\n- uid: System.Diagnostics.Debugger\n  commentId: T:System.Diagnostics.Debugger\n  id: Debugger\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.Debugger.Break\n  - System.Diagnostics.Debugger.IsAttached\n  - System.Diagnostics.Debugger.Launch\n  langs:\n  - csharp\n  - vb\n  name: Debugger\n  fullName: System.Diagnostics.Debugger\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Debugger\n    path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n    startLine: 19\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Enables communication with a debugger. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public sealed class Debugger\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public NotInheritable Class Debugger\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Debugger\n- uid: System.Diagnostics.Debugger.IsAttached\n  commentId: P:System.Diagnostics.Debugger.IsAttached\n  id: IsAttached\n  parent: System.Diagnostics.Debugger\n  langs:\n  - csharp\n  - vb\n  name: IsAttached\n  fullName: System.Diagnostics.Debugger.IsAttached\n  type: Property\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets a value that indicates whether a debugger is attached to the process.</p>\\n\"\n  syntax:\n    content: >-\n      public static bool IsAttached\n\n      {\n          [SecuritySafeCritical]\n          [MethodImpl(MethodImplOptions.InternalCall)]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property IsAttached As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if a debugger is attached; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Debugger.IsAttached\n- uid: System.Diagnostics.Debugger.Break\n  commentId: M:System.Diagnostics.Debugger.Break\n  id: Break\n  parent: System.Diagnostics.Debugger\n  langs:\n  - csharp\n  - vb\n  name: Break()\n  fullName: System.Diagnostics.Debugger.Break()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Break\n    path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n    startLine: 34\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Signals a breakpoint to an attached debugger.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static void Break()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Sub Break\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The <xref href=\\\"System.Security.Permissions.UIPermission\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not set to break into the debugger. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.UIPermission\n    commentId: T:System.Security.Permissions.UIPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debugger.Break()\n- uid: System.Diagnostics.Debugger.Launch\n  commentId: M:System.Diagnostics.Debugger.Launch\n  id: Launch\n  parent: System.Diagnostics.Debugger\n  langs:\n  - csharp\n  - vb\n  name: Launch()\n  fullName: System.Diagnostics.Debugger.Launch()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Launch\n    path: src/mscorlib/src/System/Diagnostics/Debugger.cs\n    startLine: 84\n  assemblies:\n  - System.Diagnostics.Debug\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Launches and attaches a debugger to the process.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public static bool Launch()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Shared Function Launch As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the startup is successful or if the debugger is already attached; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Security.SecurityException\n    commentId: T:System.Security.SecurityException\n    description: \"\\n<p>The <xref href=\\\"System.Security.Permissions.UIPermission\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not set to start the debugger. </p>\\n\"\n  seealso:\n  - type: System.Security.Permissions.UIPermission\n    commentId: T:System.Security.Permissions.UIPermission\n  see:\n  - type: System.Security.Permissions.UIPermission\n    commentId: T:System.Security.Permissions.UIPermission\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Debugger.Launch()\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Security.SecurityException\n  isExternal: false\n  name: SecurityException\n  fullName: System.Security.SecurityException\n  nameWithType: SecurityException\n  commentId: T:System.Security.SecurityException\n"}