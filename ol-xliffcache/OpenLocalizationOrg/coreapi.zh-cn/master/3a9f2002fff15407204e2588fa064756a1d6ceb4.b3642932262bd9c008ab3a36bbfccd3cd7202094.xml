{"nodes":[{"pos":[421,433],"content":"ECParameters","needQuote":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[2013,2018],"content":"Curve","needQuote":true,"nodes":[{"content":"Curve","pos":[0,5]}]},{"pos":[2965,2966],"content":"D","needQuote":true,"nodes":[{"content":"D","pos":[0,1]}]},{"pos":[3868,3869],"content":"Q","needQuote":true,"nodes":[{"content":"Q","pos":[0,1]}]},{"pos":[4817,4827],"content":"Validate()","needQuote":true,"nodes":[{"content":"Validate()","pos":[0,10]}]},{"pos":[5640,5668],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[5909,5923],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6089,6095],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6179,6180],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6250,6256],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6341,6342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6448,6454],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6538,6539],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6609,6615],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6700,6701],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6873,6886],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7033,7044],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7138,7139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7186,7187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7283,7294],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7388,7389],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7436,7437],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7603,7613],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7751,7759],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7847,7848],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7895,7896],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7989,7997],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8085,8086],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8133,8134],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8344,8366],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8560,8566],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8665,8666],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8736,8742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8828,8829]},{"pos":[8907,8913],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8998,8999],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9116,9122],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9221,9222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9292,9298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9384,9385]},{"pos":[9463,9469],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9554,9555],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9783,9814],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10035,10050],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10167,10168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10238,10244],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10330,10331]},{"pos":[10409,10415],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10500,10501],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10627,10642],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10759,10760],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10830,10836],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10922,10923]},{"pos":[11001,11007],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11092,11093],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11247,11256],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11382,11389],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11490,11491],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11538,11539],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11628,11635],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11736,11737],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11784,11785],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11923,11932],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[12083,12089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12203,12209],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12415,12422],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[12525,12531],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[12700,12704],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[12786,12788]},{"pos":[12874,12878],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[12959,12961],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[13163,13170],"content":"ECPoint","needQuote":true,"nodes":[{"content":"ECPoint","pos":[0,7]}]}],"content":"items:\n- uid: System.Security.Cryptography.ECParameters\n  commentId: T:System.Security.Cryptography.ECParameters\n  id: ECParameters\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ECParameters.Curve\n  - System.Security.Cryptography.ECParameters.D\n  - System.Security.Cryptography.ECParameters.Q\n  - System.Security.Cryptography.ECParameters.Validate\n  langs:\n  - csharp\n  - vb\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n  type: Struct\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECParameters\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 98\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct ECParameters\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure ECParameters\n  inheritedMembers:\n  - System.ValueType.Equals(System.Object)\n  - System.ValueType.GetHashCode\n  - System.ValueType.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n- uid: System.Security.Cryptography.ECParameters.Curve\n  commentId: F:System.Security.Cryptography.ECParameters.Curve\n  id: Curve\n  parent: System.Security.Cryptography.ECParameters\n  langs:\n  - csharp\n  - vb\n  name: Curve\n  nameWithType: ECParameters.Curve\n  fullName: System.Security.Cryptography.ECParameters.Curve\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Curve\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 101\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECCurve Curve\n    content.vb: Public Curve As ECCurve\n    return:\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECParameters.D\n  commentId: F:System.Security.Cryptography.ECParameters.D\n  id: D\n  parent: System.Security.Cryptography.ECParameters\n  langs:\n  - csharp\n  - vb\n  name: D\n  nameWithType: ECParameters.D\n  fullName: System.Security.Cryptography.ECParameters.D\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: D\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 102\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public byte[] D\n    content.vb: Public D As Byte()\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECParameters.Q\n  commentId: F:System.Security.Cryptography.ECParameters.Q\n  id: Q\n  parent: System.Security.Cryptography.ECParameters\n  langs:\n  - csharp\n  - vb\n  name: Q\n  nameWithType: ECParameters.Q\n  fullName: System.Security.Cryptography.ECParameters.Q\n  type: Field\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Q\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 103\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECPoint Q\n    content.vb: Public Q As ECPoint\n    return:\n      type: System.Security.Cryptography.ECPoint\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECParameters.Validate\n  commentId: M:System.Security.Cryptography.ECParameters.Validate\n  id: Validate\n  parent: System.Security.Cryptography.ECParameters\n  langs:\n  - csharp\n  - vb\n  name: Validate()\n  nameWithType: ECParameters.Validate()\n  fullName: System.Security.Cryptography.ECParameters.Validate()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Validate\n    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs\n    startLine: 104\n  assemblies:\n  - System.Security.Cryptography.Algorithms\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public void Validate()\n    content.vb: Public Sub Validate\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\nreferences:\n- uid: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n- uid: System.ValueType.Equals(System.Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  nameWithType: ValueType.Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    nameWithType: ValueType.Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.GetHashCode\n  commentId: M:System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  nameWithType: ValueType.GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    nameWithType: ValueType.GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType.ToString\n  commentId: M:System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  nameWithType: ValueType.ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    nameWithType: ValueType.ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  nameWithType: Object.Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    nameWithType: Object.Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    nameWithType: Object.ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    nameWithType: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    nameWithType: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  nameWithType: Object.GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    nameWithType: Object.GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    nameWithType: (\n    fullName: (\n  - name: )\n    nameWithType: )\n    fullName: )\n- uid: System.ValueType\n  commentId: T:System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  nameWithType: ValueType\n  fullName: System.ValueType\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Byte[]\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  nameWithType.vb: Byte()\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Security.Cryptography.ECPoint\n  commentId: T:System.Security.Cryptography.ECPoint\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECPoint\n  nameWithType: ECPoint\n  fullName: System.Security.Cryptography.ECPoint\n"}