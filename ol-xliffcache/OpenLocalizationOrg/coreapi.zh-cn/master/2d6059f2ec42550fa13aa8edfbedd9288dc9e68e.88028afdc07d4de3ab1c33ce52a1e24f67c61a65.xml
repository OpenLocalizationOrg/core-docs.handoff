{"nodes":[{"pos":[304,315],"content":"IPHostEntry","needQuote":true,"nodes":[{"content":"IPHostEntry","pos":[0,11]}]},{"pos":[1553,1566],"content":"IPHostEntry()","needQuote":true,"nodes":[{"content":"IPHostEntry()","pos":[0,13]}]},{"pos":[2477,2488],"content":"AddressList","needQuote":true,"nodes":[{"content":"AddressList","pos":[0,11]}]},{"pos":[3780,3787],"content":"Aliases","needQuote":true,"nodes":[{"content":"Aliases","pos":[0,7]}]},{"pos":[4949,4957],"content":"HostName","needQuote":true,"nodes":[{"content":"HostName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;A string that contains the primary host name for the server.&lt;/p&gt;\\n","pos":[5613,5684],"source":"\\n<p>A string that contains the primary host name for the server.</p>\\n"},{"pos":[5855,5865],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[6008,6014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6174,6184],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[6279,6287],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6356,6357],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6384,6385],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6455,6463],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[6532,6533],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[6560,6561],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[6744,6758],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[6877,6883],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[6950,6951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7001,7007],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7067,7068],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7151,7157],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7224,7225],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7275,7281],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7341,7342],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7556,7578],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[7726,7732],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7799,7800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7850,7856],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[7917,7918]},{"pos":[7973,7979],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8039,8040],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8137,8143],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8210,8211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8261,8267],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8328,8329]},{"pos":[8384,8390],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8450,8451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8696,8727],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[8893,8908],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[8984,8985],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9035,9041],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9102,9103]},{"pos":[9158,9164],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9224,9225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9331,9346],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9422,9423],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9473,9479],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9540,9541]},{"pos":[9596,9602],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9662,9663],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9893,9906],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10007,10018],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10090,10091],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10118,10119],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10192,10203],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10275,10276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10303,10304],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10479,10488],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[10581,10588],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10656,10657],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10684,10685],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10754,10761],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[10829,10830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10857,10858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11033,11050],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11159,11174],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11250,11251],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11278,11279],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11356,11371],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11447,11448],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11475,11476],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11621,11627],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[11730,11741],"content":"IPAddress[]","needQuote":true,"nodes":[{"content":"IPAddress[]","pos":[0,11]}]},{"pos":[11893,11902],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"content":"[]","pos":[11949,11951]},{"pos":[12023,12032],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[12078,12080],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[12188,12196],"content":"String[]","needQuote":true,"nodes":[{"content":"String[]","pos":[0,8]}]},{"pos":[12324,12330],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"[]","pos":[12391,12393]},{"pos":[12458,12464],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12524,12526],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[12663,12669],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Net.IPHostEntry\n  commentId: T:System.Net.IPHostEntry\n  id: IPHostEntry\n  parent: System.Net\n  children:\n  - System.Net.IPHostEntry.#ctor\n  - System.Net.IPHostEntry.AddressList\n  - System.Net.IPHostEntry.Aliases\n  - System.Net.IPHostEntry.HostName\n  langs:\n  - csharp\n  - vb\n  name: IPHostEntry\n  fullName: System.Net.IPHostEntry\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPHostEntry\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 17\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Provides a container class for Internet host address information.</p>\\n\"\n  syntax:\n    content: public class IPHostEntry\n    content.vb: Public Class IPHostEntry\n  seealso:\n  - type: System.Net.Dns\n    commentId: T:System.Net.Dns\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: IPHostEntry\n- uid: System.Net.IPHostEntry.#ctor\n  commentId: M:System.Net.IPHostEntry.#ctor\n  id: '#ctor'\n  parent: System.Net.IPHostEntry\n  langs:\n  - csharp\n  - vb\n  name: IPHostEntry()\n  fullName: System.Net.IPHostEntry.IPHostEntry()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 19\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPHostEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public IPHostEntry()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPHostEntry.IPHostEntry()\n- uid: System.Net.IPHostEntry.AddressList\n  commentId: P:System.Net.IPHostEntry.AddressList\n  id: AddressList\n  parent: System.Net.IPHostEntry\n  langs:\n  - csharp\n  - vb\n  name: AddressList\n  fullName: System.Net.IPHostEntry.AddressList\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressList\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 20\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets a list of IP addresses that are associated with a host.</p>\\n\"\n  syntax:\n    content: public IPAddress[] AddressList { get; set; }\n    content.vb: Public Property AddressList As IPAddress()\n    parameters: []\n    return:\n      type: System.Net.IPAddress[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains IP addresses that resolve to the host names that are contained in the <xref href=\\\"System.Net.IPHostEntry.Aliases\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPHostEntry.AddressList\n- uid: System.Net.IPHostEntry.Aliases\n  commentId: P:System.Net.IPHostEntry.Aliases\n  id: Aliases\n  parent: System.Net.IPHostEntry\n  langs:\n  - csharp\n  - vb\n  name: Aliases\n  fullName: System.Net.IPHostEntry.Aliases\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Aliases\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 21\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets a list of aliases that are associated with a host.</p>\\n\"\n  syntax:\n    content: public string[] Aliases { get; set; }\n    content.vb: Public Property Aliases As String()\n    parameters: []\n    return:\n      type: System.String[]\n      description: \"\\n<p>An array of strings that contain DNS names that resolve to the IP addresses in the <xref href=\\\"System.Net.IPHostEntry.AddressList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPHostEntry.Aliases\n- uid: System.Net.IPHostEntry.HostName\n  commentId: P:System.Net.IPHostEntry.HostName\n  id: HostName\n  parent: System.Net.IPHostEntry\n  langs:\n  - csharp\n  - vb\n  name: HostName\n  fullName: System.Net.IPHostEntry.HostName\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HostName\n    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs\n    startLine: 22\n  assemblies:\n  - System.Net.NameResolution\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the DNS name of the host.</p>\\n\"\n  syntax:\n    content: public string HostName { get; set; }\n    content.vb: Public Property HostName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the primary host name for the server.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPHostEntry.HostName\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress[]\n  name: IPAddress[]\n  fullName: System.Net.IPAddress[]\n  fullname.vb: System.Net.IPAddress()\n  name.vb: IPAddress()\n  spec.csharp:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Net.IPAddress\n    name: IPAddress\n    fullName: System.Net.IPAddress\n  - name: ()\n    fullName: ()\n  nameWithType: IPAddress[]\n  nameWithType.vb: IPAddress()\n- uid: System.String[]\n  name: String[]\n  fullName: System.String[]\n  fullname.vb: System.String()\n  name.vb: String()\n  spec.csharp:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: String[]\n  nameWithType.vb: String()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n"}