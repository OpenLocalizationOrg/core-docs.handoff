{"nodes":[{"pos":[1702,1718],"content":"MemberDescriptor","needQuote":true,"nodes":[{"content":"MemberDescriptor","pos":[0,16]}]},{"pos":[3384,3418],"content":"MemberDescriptor(MemberDescriptor)","needQuote":true,"nodes":[{"content":"MemberDescriptor(MemberDescriptor)","pos":[0,34]}]},{"pos":[5164,5211],"content":"MemberDescriptor(MemberDescriptor, Attribute[])","needQuote":true,"nodes":[{"content":"MemberDescriptor(MemberDescriptor, Attribute[])","pos":[0,47]}]},{"pos":[7699,7723],"content":"MemberDescriptor(String)","needQuote":true,"nodes":[{"content":"MemberDescriptor(String)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The name of the member.","pos":[8626,8654],"source":"\\n<p>The name of the member."},{"content":"&lt;/p&gt;\\n","pos":[8655,8661],"source":" </p>\\n"},{"pos":[9279,9316],"content":"MemberDescriptor(String, Attribute[])","needQuote":true,"nodes":[{"content":"MemberDescriptor(String, Attribute[])","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The name of the member.","pos":[10317,10345],"source":"\\n<p>The name of the member."},{"content":"&lt;/p&gt;\\n","pos":[10346,10352],"source":" </p>\\n"},{"pos":[11352,11366],"content":"AttributeArray","needQuote":true,"nodes":[{"content":"AttributeArray","pos":[0,14]}]},{"pos":[12838,12848],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[14535,14543],"content":"Category","needQuote":true,"nodes":[{"content":"Category","pos":[0,8]}]},{"pos":[16462,16473],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"pos":[18372,18386],"content":"DesignTimeOnly","needQuote":true,"nodes":[{"content":"DesignTimeOnly","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this member should be set only at design time; &lt;strong&gt;false&lt;/strong&gt; if the member can be set during run time.&lt;/p&gt;\\n","pos":[19318,19467],"source":"\\n<p>\\n<strong>true</strong> if this member should be set only at design time; <strong>false</strong> if the member can be set during run time.</p>\\n"},{"pos":[19990,20001],"content":"DisplayName","needQuote":true,"nodes":[{"content":"DisplayName","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The name to display for the member.&lt;/p&gt;\\n","pos":[20816,20862],"source":"\\n<p>The name to display for the member.</p>\\n"},{"pos":[21388,21399],"content":"IsBrowsable","needQuote":true,"nodes":[{"content":"IsBrowsable","pos":[0,11]}]},{"pos":[23340,23344],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The name of the member.&lt;/p&gt;\\n","pos":[24082,24116],"source":"\\n<p>The name of the member.</p>\\n"},{"pos":[24884,24896],"content":"NameHashCode","needQuote":true,"nodes":[{"content":"NameHashCode","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The hash code for the name of the member.&lt;/p&gt;\\n","pos":[25790,25842],"source":"\\n<p>The hash code for the name of the member.</p>\\n"},{"pos":[26271,26298],"content":"CreateAttributeCollection()","needQuote":true,"nodes":[{"content":"CreateAttributeCollection()","pos":[0,27]}]},{"pos":[27881,27895],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare to the current instance.","pos":[28705,28756],"source":"\\n<p>The object to compare to the current instance."},{"content":"&lt;/p&gt;\\n","pos":[28757,28763],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if equivalent; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28824,28908],"source":"\\n<p>\\n<strong>true</strong> if equivalent; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[29406,29427],"content":"FillAttributes(IList)","needQuote":true,"nodes":[{"content":"FillAttributes(IList)","pos":[0,21]}]},{"pos":[31076,31114],"content":"FindMethod(Type, String, Type[], Type)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The component that contains the method.","pos":[32117,32161],"source":"\\n<p>The component that contains the method."},{"content":"&lt;/p&gt;\\n","pos":[32162,32168],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the method to find.","pos":[32231,32267],"source":"\\n<p>The name of the method to find."},{"content":"&lt;/p&gt;\\n","pos":[32268,32274],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of parameters for the method, used to choose between overloaded methods.","pos":[32337,32423],"source":"\\n<p>An array of parameters for the method, used to choose between overloaded methods."},{"content":"&lt;/p&gt;\\n","pos":[32424,32430],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type to return for the method.","pos":[32497,32536],"source":"\\n<p>The type to return for the method."},{"content":"&lt;/p&gt;\\n","pos":[32537,32543],"source":" </p>\\n"},{"pos":[33765,33812],"content":"FindMethod(Type, String, Type[], Type, Boolean)","needQuote":true,"nodes":[{"content":"FindMethod(Type, String, Type[], Type, Boolean)","pos":[0,47]}]},{"content":"\\n&lt;p&gt;The component that contains the method.","pos":[34882,34926],"source":"\\n<p>The component that contains the method."},{"content":"&lt;/p&gt;\\n","pos":[34927,34933],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The name of the method to find.","pos":[34996,35032],"source":"\\n<p>The name of the method to find."},{"content":"&lt;/p&gt;\\n","pos":[35033,35039],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of parameters for the method, used to choose between overloaded methods.","pos":[35102,35188],"source":"\\n<p>An array of parameters for the method, used to choose between overloaded methods."},{"content":"&lt;/p&gt;\\n","pos":[35189,35195],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type to return for the method.","pos":[35262,35301],"source":"\\n<p>The type to return for the method."},{"content":"&lt;/p&gt;\\n","pos":[35302,35308],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;Whether to restrict search to public methods.","pos":[35378,35428],"source":"\\n<p>Whether to restrict search to public methods."},{"content":"&lt;/p&gt;\\n","pos":[35429,35435],"source":" </p>\\n"},{"pos":[36499,36512],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[37894,37927],"content":"GetInvocationTarget(Type, Object)","needQuote":true,"nodes":[{"content":"GetInvocationTarget(Type, Object)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The potential invocation target.&lt;/p&gt;\\n","pos":[39020,39063],"source":"\\n<p>The potential invocation target.</p>\\n"},{"content":"\\n&lt;p&gt;The object to be used during member invocations.&lt;/p&gt;\\n","pos":[39123,39182],"source":"\\n<p>The object to be used during member invocations.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;type&lt;/em&gt; or &lt;em&gt;instance&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39301,39374],"source":"\\n<p>\\n<em>type</em> or <em>instance</em> is <strong>null</strong>.</p>\\n"},{"pos":[39794,39809],"content":"GetSite(Object)","needQuote":true,"nodes":[{"content":"GetSite(Object)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The component for which you want to find a site.","pos":[40614,40667],"source":"\\n<p>The component for which you want to find a site."},{"content":"&lt;/p&gt;\\n","pos":[40668,40674],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The site of the component, or &lt;strong&gt;null&lt;/strong&gt; if a site does not exist.&lt;/p&gt;\\n","pos":[40726,40814],"source":"\\n<p>The site of the component, or <strong>null</strong> if a site does not exist.</p>\\n"},{"pos":[41020,41041],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[41217,41223],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41383,41393],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[41488,41496],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41565,41566],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41593,41594],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41664,41672],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[41741,41742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41769,41770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41967,41989],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[42137,42143],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42210,42211],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42261,42267],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42328,42329]},{"pos":[42384,42390],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42450,42451],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42548,42554],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[42621,42622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42672,42678],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42739,42740]},{"pos":[42795,42801],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42861,42862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43107,43138],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[43304,43319],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43395,43396],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43446,43452],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43513,43514]},{"pos":[43569,43575],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43635,43636],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43742,43757],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[43833,43834],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43884,43890],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[43951,43952]},{"pos":[44007,44013],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[44073,44074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44300,44309],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[44402,44409],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44477,44478],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44505,44506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44575,44582],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[44650,44651],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44678,44679],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44854,44871],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[44980,44995],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45071,45072],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45099,45100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45177,45192],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[45268,45269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45296,45297],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45442,45448],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[45619,45635],"content":"MemberDescriptor","needQuote":true,"nodes":[{"content":"MemberDescriptor","pos":[0,16]}]},{"pos":[45808,45819],"content":"Attribute[]","needQuote":true,"nodes":[{"content":"Attribute[]","pos":[0,11]}]},{"pos":[45959,45968],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"content":"[]","pos":[46032,46034]},{"pos":[46102,46111],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[46174,46176],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[46319,46325],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[46513,46532],"content":"AttributeCollection","needQuote":true,"nodes":[{"content":"AttributeCollection","pos":[0,19]}]},{"pos":[46747,46754],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[46901,46906],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[47076,47090],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[47209,47215],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[47282,47283],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47333,47339],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47399,47400],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47483,47489],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[47556,47557],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47607,47613],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47673,47674],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47869,47874],"content":"IList","needQuote":true,"nodes":[{"content":"IList","pos":[0,5]}]},{"pos":[48028,48046],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[48211,48215],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[48317,48323],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[48443,48447],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[48485,48487]},{"pos":[48550,48554],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[48591,48593],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[48752,48762],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[48928,48945],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[49127,49140],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[49241,49252],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[49324,49325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49352,49353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49426,49437],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[49509,49510],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49537,49538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49728,49733],"content":"ISite","needQuote":true,"nodes":[{"content":"ISite","pos":[0,5]}]},{"pos":[49916,49933],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[50109,50130],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.ComponentModel.MemberDescriptor\n  commentId: T:System.ComponentModel.MemberDescriptor\n  id: MemberDescriptor\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  - System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  - System.ComponentModel.MemberDescriptor.#ctor(System.String)\n  - System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])\n  - System.ComponentModel.MemberDescriptor.AttributeArray\n  - System.ComponentModel.MemberDescriptor.Attributes\n  - System.ComponentModel.MemberDescriptor.Category\n  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  - System.ComponentModel.MemberDescriptor.Description\n  - System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  - System.ComponentModel.MemberDescriptor.DisplayName\n  - System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  - System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  - System.ComponentModel.MemberDescriptor.GetHashCode\n  - System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  - System.ComponentModel.MemberDescriptor.IsBrowsable\n  - System.ComponentModel.MemberDescriptor.Name\n  - System.ComponentModel.MemberDescriptor.NameHashCode\n  langs:\n  - csharp\n  - vb\n  name: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MemberDescriptor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 18\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Represents a class member, such as a property or event. This is an abstract base class.</p>\\n\"\n  syntax:\n    content: public abstract class MemberDescriptor\n    content.vb: Public MustInherit Class MemberDescriptor\n  seealso:\n  - type: System.ComponentModel.PropertyDescriptor\n    commentId: T:System.ComponentModel.PropertyDescriptor\n  - type: System.ComponentModel.EventDescriptor\n    commentId: T:System.ComponentModel.EventDescriptor\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: MemberDescriptor\n- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  commentId: M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)\n  id: '#ctor(System.ComponentModel.MemberDescriptor)'\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: MemberDescriptor(MemberDescriptor)\n  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.ComponentModel.MemberDescriptor)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 72\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected MemberDescriptor(MemberDescriptor descr)\n    content.vb: Protected Sub New(descr As MemberDescriptor)\n    parameters:\n    - id: descr\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the name of the member and its attributes. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor)\n- uid: System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  commentId: M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])\n  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: MemberDescriptor(MemberDescriptor, Attribute[])\n  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 93\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the name in the specified <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the attributes in both the old <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: protected MemberDescriptor(MemberDescriptor oldMemberDescriptor, Attribute[] newAttributes)\n    content.vb: Protected Sub New(oldMemberDescriptor As MemberDescriptor, newAttributes As Attribute())\n    parameters:\n    - id: oldMemberDescriptor\n      type: System.ComponentModel.MemberDescriptor\n      description: \"\\n<p>A <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that has the name of the member and its attributes. </p>\\n\"\n    - id: newAttributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects with the attributes you want to add to the member. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.ComponentModel.MemberDescriptor, System.Attribute())\n  name.vb: MemberDescriptor(MemberDescriptor, Attribute())\n  nameWithType: MemberDescriptor.MemberDescriptor(MemberDescriptor, Attribute[])\n  nameWithType.vb: MemberDescriptor.MemberDescriptor(MemberDescriptor, Attribute())\n- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String)\n  commentId: M:System.ComponentModel.MemberDescriptor.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: MemberDescriptor(String)\n  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 38\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name of the member.</p>\\n\"\n  syntax:\n    content: protected MemberDescriptor(string name)\n    content.vb: Protected Sub New(name As String)\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the member. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The name is an empty string (\\\"\\\") or <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: MemberDescriptor.MemberDescriptor(String)\n- uid: System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])\n  commentId: M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])\n  id: '#ctor(System.String,System.Attribute[])'\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: MemberDescriptor(String, Attribute[])\n  fullName: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.String, System.Attribute[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 47\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified name of the member and an array of attributes.</p>\\n\"\n  syntax:\n    content: protected MemberDescriptor(string name, Attribute[] attributes)\n    content.vb: Protected Sub New(name As String, attributes As Attribute())\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the member. </p>\\n\"\n    - id: attributes\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the member attributes. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The name is an empty string (\\\"\\\") or <strong>null</strong>. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  fullName.vb: System.ComponentModel.MemberDescriptor.MemberDescriptor(System.String, System.Attribute())\n  name.vb: MemberDescriptor(String, Attribute())\n  nameWithType: MemberDescriptor.MemberDescriptor(String, Attribute[])\n  nameWithType.vb: MemberDescriptor.MemberDescriptor(String, Attribute())\n- uid: System.ComponentModel.MemberDescriptor.AttributeArray\n  commentId: P:System.ComponentModel.MemberDescriptor.AttributeArray\n  id: AttributeArray\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: AttributeArray\n  fullName: System.ComponentModel.MemberDescriptor.AttributeArray\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AttributeArray\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 130\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets an array of attributes.</p>\\n\"\n  syntax:\n    content: protected virtual Attribute[] AttributeArray { get; set; }\n    content.vb: Protected Overridable Property AttributeArray As Attribute()\n    parameters: []\n    return:\n      type: System.Attribute[]\n      description: \"\\n<p>An array of type <xref href=\\\"System.Attribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the attributes of this member. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.Attributes\n    commentId: P:System.ComponentModel.MemberDescriptor.Attributes\n  modifiers.csharp:\n  - protected\n  - virtual\n  - get\n  - set\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: MemberDescriptor.AttributeArray\n- uid: System.ComponentModel.MemberDescriptor.Attributes\n  commentId: P:System.ComponentModel.MemberDescriptor.Attributes\n  id: Attributes\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.ComponentModel.MemberDescriptor.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Attributes\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 155\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the collection of attributes for this member.</p>\\n\"\n  syntax:\n    content: public virtual AttributeCollection Attributes { get; }\n    content.vb: Public Overridable ReadOnly Property Attributes As AttributeCollection\n    parameters: []\n    return:\n      type: System.ComponentModel.AttributeCollection\n      description: \"\\n<p>An <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that provides the attributes for this member, or an empty collection if there are no attributes in the <xref href=\\\"System.ComponentModel.MemberDescriptor.AttributeArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.AttributeArray\n    commentId: P:System.ComponentModel.MemberDescriptor.AttributeArray\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.Attributes\n- uid: System.ComponentModel.MemberDescriptor.Category\n  commentId: P:System.ComponentModel.MemberDescriptor.Category\n  id: Category\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Category\n  fullName: System.ComponentModel.MemberDescriptor.Category\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Category\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 179\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the name of the category to which the member belongs, as specified in the <xref href=\\\"System.ComponentModel.CategoryAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string Category { get; }\n    content.vb: Public Overridable ReadOnly Property Category As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the category to which the member belongs. If there is no <xref href=\\\"System.ComponentModel.CategoryAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the category name is set to the default category, <strong>Misc</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.Description\n    commentId: P:System.ComponentModel.MemberDescriptor.Description\n  - type: System.ComponentModel.MemberDescriptor.IsBrowsable\n    commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n  - type: System.ComponentModel.MemberDescriptor.Name\n    commentId: P:System.ComponentModel.MemberDescriptor.Name\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.Category\n- uid: System.ComponentModel.MemberDescriptor.Description\n  commentId: P:System.ComponentModel.MemberDescriptor.Description\n  id: Description\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Description\n  fullName: System.ComponentModel.MemberDescriptor.Description\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Description\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 197\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the description of the member, as specified in the <xref href=\\\"System.ComponentModel.DescriptionAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual string Description { get; }\n    content.vb: Public Overridable ReadOnly Property Description As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The description of the member. If there is no <xref href=\\\"System.ComponentModel.DescriptionAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the property value is set to the default, which is an empty string (\\\"\\\").</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.Category\n    commentId: P:System.ComponentModel.MemberDescriptor.Category\n  - type: System.ComponentModel.MemberDescriptor.IsBrowsable\n    commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n  - type: System.ComponentModel.MemberDescriptor.Name\n    commentId: P:System.ComponentModel.MemberDescriptor.Name\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.Description\n- uid: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  commentId: P:System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  id: DesignTimeOnly\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: DesignTimeOnly\n  fullName: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DesignTimeOnly\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 261\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets whether this member should be set only at design time, as specified in the <xref href=\\\"System.ComponentModel.DesignOnlyAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool DesignTimeOnly { get; }\n    content.vb: Public Overridable ReadOnly Property DesignTimeOnly As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this member should be set only at design time; <strong>false</strong> if the member can be set during run time.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.DisplayName\n    commentId: P:System.ComponentModel.MemberDescriptor.DisplayName\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.DesignTimeOnly\n- uid: System.ComponentModel.MemberDescriptor.DisplayName\n  commentId: P:System.ComponentModel.MemberDescriptor.DisplayName\n  id: DisplayName\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: DisplayName\n  fullName: System.ComponentModel.MemberDescriptor.DisplayName\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DisplayName\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 275\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the name that can be displayed in a window, such as a Properties window.</p>\\n\"\n  syntax:\n    content: public virtual string DisplayName { get; }\n    content.vb: Public Overridable ReadOnly Property DisplayName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name to display for the member.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.DesignTimeOnly\n    commentId: P:System.ComponentModel.MemberDescriptor.DesignTimeOnly\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.DisplayName\n- uid: System.ComponentModel.MemberDescriptor.IsBrowsable\n  commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n  id: IsBrowsable\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: IsBrowsable\n  fullName: System.ComponentModel.MemberDescriptor.IsBrowsable\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsBrowsable\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 215\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value indicating whether the member is browsable, as specified in the <xref href=\\\"System.ComponentModel.BrowsableAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual bool IsBrowsable { get; }\n    content.vb: Public Overridable ReadOnly Property IsBrowsable As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the member is browsable; otherwise, <strong>false</strong>. If there is no <xref href=\\\"System.ComponentModel.BrowsableAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, the property value is set to the default, which is <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.Category\n    commentId: P:System.ComponentModel.MemberDescriptor.Category\n  - type: System.ComponentModel.MemberDescriptor.Description\n    commentId: P:System.ComponentModel.MemberDescriptor.Description\n  - type: System.ComponentModel.MemberDescriptor.Name\n    commentId: P:System.ComponentModel.MemberDescriptor.Name\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.IsBrowsable\n- uid: System.ComponentModel.MemberDescriptor.Name\n  commentId: P:System.ComponentModel.MemberDescriptor.Name\n  id: Name\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.ComponentModel.MemberDescriptor.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 229\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the name of the member.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the member.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.MemberDescriptor.Category\n    commentId: P:System.ComponentModel.MemberDescriptor.Category\n  - type: System.ComponentModel.MemberDescriptor.Description\n    commentId: P:System.ComponentModel.MemberDescriptor.Description\n  - type: System.ComponentModel.MemberDescriptor.IsBrowsable\n    commentId: P:System.ComponentModel.MemberDescriptor.IsBrowsable\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.Name\n- uid: System.ComponentModel.MemberDescriptor.NameHashCode\n  commentId: P:System.ComponentModel.MemberDescriptor.NameHashCode\n  id: NameHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: NameHashCode\n  fullName: System.ComponentModel.MemberDescriptor.NameHashCode\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NameHashCode\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 247\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the hash code for the name of the member, as specified in <xref href=\\\"System.String.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: protected virtual int NameHashCode { get; }\n    content.vb: Protected Overridable ReadOnly Property NameHashCode As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for the name of the member.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  - get\n  modifiers.vb:\n  - Protected\n  - Overridable\n  - ReadOnly\n  nameWithType: MemberDescriptor.NameHashCode\n- uid: System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  commentId: M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection\n  id: CreateAttributeCollection\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: CreateAttributeCollection()\n  fullName: System.ComponentModel.MemberDescriptor.CreateAttributeCollection()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateAttributeCollection\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 313\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Creates a collection of attributes using the array of attributes passed to the constructor.</p>\\n\"\n  syntax:\n    content: protected virtual AttributeCollection CreateAttributeCollection()\n    content.vb: Protected Overridable Function CreateAttributeCollection As AttributeCollection\n    return:\n      type: System.ComponentModel.AttributeCollection\n      description: \"\\n<p>A new <xref href=\\\"System.ComponentModel.AttributeCollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the <xref href=\\\"System.ComponentModel.MemberDescriptor.AttributeArray\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> attributes.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: MemberDescriptor.CreateAttributeCollection()\n- uid: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.ComponentModel.MemberDescriptor.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 324\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Compares this instance to the given object to see if they are equivalent.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare to the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if equivalent; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemberDescriptor.Equals(Object)\n- uid: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  commentId: M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  id: FillAttributes(System.Collections.IList)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: FillAttributes(IList)\n  fullName: System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FillAttributes\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 393\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.</p>\\n\"\n  syntax:\n    content: protected virtual void FillAttributes(IList attributeList)\n    content.vb: Protected Overridable Sub FillAttributes(attributeList As IList)\n    parameters:\n    - id: attributeList\n      type: System.Collections.IList\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IList\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that lists the attributes in the parent class. Initially, this is empty. </p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: MemberDescriptor.FillAttributes(IList)\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)\n  id: FindMethod(System.Type,System.String,System.Type[],System.Type)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: FindMethod(Type, String, Type[], Type)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindMethod\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 458\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Finds the given method through reflection, searching only for public methods.</p>\\n\"\n  syntax:\n    content: protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType)\n    content.vb: Protected Shared Function FindMethod(componentClass As Type, name As String, args As Type(), returnType As Type) As MethodInfo\n    parameters:\n    - id: componentClass\n      type: System.Type\n      description: \"\\n<p>The component that contains the method. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the method to find. </p>\\n\"\n    - id: args\n      type: System.Type[]\n      description: \"\\n<p>An array of parameters for the method, used to choose between overloaded methods. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The type to return for the method. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the method, or <strong>null</strong> if the method is not found.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  fullName.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type)\n  name.vb: FindMethod(Type, String, Type(), Type)\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type)\n- uid: System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  commentId: M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  id: FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: FindMethod(Type, String, Type[], Type, Boolean)\n  fullName: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type[], System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FindMethod\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 468\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Finds the given method through reflection, with an option to search only public methods.</p>\\n\"\n  syntax:\n    content: protected static MethodInfo FindMethod(Type componentClass, string name, Type[] args, Type returnType, bool publicOnly)\n    content.vb: Protected Shared Function FindMethod(componentClass As Type, name As String, args As Type(), returnType As Type, publicOnly As Boolean) As MethodInfo\n    parameters:\n    - id: componentClass\n      type: System.Type\n      description: \"\\n<p>The component that contains the method. </p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the method to find. </p>\\n\"\n    - id: args\n      type: System.Type[]\n      description: \"\\n<p>An array of parameters for the method, used to choose between overloaded methods. </p>\\n\"\n    - id: returnType\n      type: System.Type\n      description: \"\\n<p>The type to return for the method. </p>\\n\"\n    - id: publicOnly\n      type: System.Boolean\n      description: \"\\n<p>Whether to restrict search to public methods. </p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the method, or <strong>null</strong> if the method is not found.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.ReflectionPermission\n    commentId: T:System.Security.Permissions.ReflectionPermission\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  fullName.vb: System.ComponentModel.MemberDescriptor.FindMethod(System.Type, System.String, System.Type(), System.Type, System.Boolean)\n  name.vb: FindMethod(Type, String, Type(), Type, Boolean)\n  nameWithType: MemberDescriptor.FindMethod(Type, String, Type[], Type, Boolean)\n  nameWithType.vb: MemberDescriptor.FindMethod(Type, String, Type(), Type, Boolean)\n- uid: System.ComponentModel.MemberDescriptor.GetHashCode\n  commentId: M:System.ComponentModel.MemberDescriptor.GetHashCode\n  id: GetHashCode\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.ComponentModel.MemberDescriptor.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 498\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.ComponentModel.MemberDescriptor\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MemberDescriptor.GetHashCode()\n- uid: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)\n  id: GetInvocationTarget(System.Type,System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetInvocationTarget(Type, Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInvocationTarget\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 509\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Retrieves the object that should be used during invocation of members.</p>\\n\"\n  syntax:\n    content: protected virtual object GetInvocationTarget(Type type, object instance)\n    content.vb: Protected Overridable Function GetInvocationTarget(type As Type, instance As Object) As Object\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the invocation target.</p>\\n\"\n    - id: instance\n      type: System.Object\n      description: \"\\n<p>The potential invocation target.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The object to be used during member invocations.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>type</em> or <em>instance</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: MemberDescriptor.GetInvocationTarget(Type, Object)\n- uid: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  commentId: M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  id: GetSite(System.Object)\n  parent: System.ComponentModel.MemberDescriptor\n  langs:\n  - csharp\n  - vb\n  name: GetSite(Object)\n  fullName: System.ComponentModel.MemberDescriptor.GetSite(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetSite\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/MemberDescriptor.cs\n    startLine: 530\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a component site for the given component.</p>\\n\"\n  syntax:\n    content: protected static ISite GetSite(object component)\n    content.vb: Protected Shared Function GetSite(component As Object) As ISite\n    parameters:\n    - id: component\n      type: System.Object\n      description: \"\\n<p>The component for which you want to find a site. </p>\\n\"\n    return:\n      type: ISite\n      description: \"\\n<p>The site of the component, or <strong>null</strong> if a site does not exist.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - static\n  modifiers.vb:\n  - Protected\n  - Shared\n  nameWithType: MemberDescriptor.GetSite(Object)\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.ComponentModel.MemberDescriptor\n  parent: System.ComponentModel\n  isExternal: false\n  name: MemberDescriptor\n  fullName: System.ComponentModel.MemberDescriptor\n  nameWithType: MemberDescriptor\n  commentId: T:System.ComponentModel.MemberDescriptor\n- uid: System.Attribute[]\n  name: Attribute[]\n  fullName: System.Attribute[]\n  fullname.vb: System.Attribute()\n  name.vb: Attribute()\n  spec.csharp:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Attribute\n    name: Attribute\n    fullName: System.Attribute\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Attribute[]\n  nameWithType.vb: Attribute()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.ComponentModel.AttributeCollection\n  parent: System.ComponentModel\n  isExternal: false\n  name: AttributeCollection\n  fullName: System.ComponentModel.AttributeCollection\n  nameWithType: AttributeCollection\n  commentId: T:System.ComponentModel.AttributeCollection\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Collections.IList\n  parent: System.Collections\n  isExternal: false\n  name: IList\n  fullName: System.Collections.IList\n  nameWithType: IList\n  commentId: T:System.Collections.IList\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.ComponentModel.ISite\n  parent: System.ComponentModel\n  isExternal: false\n  name: ISite\n  fullName: System.ComponentModel.ISite\n  nameWithType: ISite\n  commentId: T:System.ComponentModel.ISite\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}