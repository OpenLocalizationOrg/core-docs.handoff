{"nodes":[{"pos":[1330,1334],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[2927,2937],"content":"EmptyTypes","needQuote":true,"nodes":[{"content":"EmptyTypes","pos":[0,10]}]},{"pos":[3845,3852],"content":"Missing","needQuote":true,"nodes":[{"content":"Missing","pos":[0,7]}]},{"pos":[4853,4862],"content":"Delimiter","needQuote":true,"nodes":[{"content":"Delimiter","pos":[0,9]}]},{"pos":[5807,5828],"content":"AssemblyQualifiedName","needQuote":true,"nodes":[{"content":"AssemblyQualifiedName","pos":[0,21]}]},{"pos":[7625,7633],"content":"FullName","needQuote":true,"nodes":[{"content":"FullName","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The fully qualified name of the type, including its namespace but not its assembly; or &lt;strong&gt;null&lt;/strong&gt; if the current instance represents a generic type parameter, an array type, pointer type, or &lt;strong&gt;byref&lt;/strong&gt; type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.&lt;/p&gt;\\n","pos":[8280,8644],"source":"\\n<p>The fully qualified name of the type, including its namespace but not its assembly; or <strong>null</strong> if the current instance represents a generic type parameter, an array type, pointer type, or <strong>byref</strong> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</p>\\n"},{"pos":[9290,9314],"content":"GenericParameterPosition","needQuote":true,"nodes":[{"content":"GenericParameterPosition","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The position of a type parameter in the type parameter list of the generic type or method that defines the parameter.","pos":[10212,10334],"source":"\\n<p>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter."},{"content":"Position numbers begin at 0.&lt;/p&gt;\\n","pos":[10335,10369],"source":" Position numbers begin at 0.</p>\\n"},{"pos":[11338,11358],"content":"GenericTypeArguments","needQuote":true,"nodes":[{"content":"GenericTypeArguments","pos":[0,20]}]},{"content":"\\n&lt;p&gt;An array of the generic type arguments for this type.&lt;/p&gt;\\n","pos":[12021,12085],"source":"\\n<p>An array of the generic type arguments for this type.</p>\\n"},{"pos":[12392,12406],"content":"HasElementType","needQuote":true,"nodes":[{"content":"HasElementType","pos":[0,14]}]},{"pos":[14175,14182],"content":"IsArray","needQuote":true,"nodes":[{"content":"IsArray","pos":[0,7]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the current type is an array; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14772,14874],"source":"\\n<p>\\n<strong>true</strong> if the current type is an array; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15231,15238],"content":"IsByRef","needQuote":true,"nodes":[{"content":"IsByRef","pos":[0,7]}]},{"pos":[16482,16506],"content":"IsConstructedGenericType","needQuote":true,"nodes":[{"content":"IsConstructedGenericType","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this object represents a constructed generic type; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[17270,17393],"source":"\\n<p>\\n<strong>true</strong> if this object represents a constructed generic type; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17716,17734],"content":"IsGenericParameter","needQuote":true,"nodes":[{"content":"IsGenericParameter","pos":[0,18]}]},{"pos":[19471,19479],"content":"IsNested","needQuote":true,"nodes":[{"content":"IsNested","pos":[0,8]}]},{"pos":[21171,21180],"content":"IsPointer","needQuote":true,"nodes":[{"content":"IsPointer","pos":[0,9]}]},{"pos":[22373,22382],"content":"Namespace","needQuote":true,"nodes":[{"content":"Namespace","pos":[0,9]}]},{"pos":[23758,23768],"content":"TypeHandle","needQuote":true,"nodes":[{"content":"TypeHandle","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The .NET Compact Framework does not currently support this property.&lt;/p&gt;\\n","pos":[24698,24777],"source":"\\n<p>The .NET Compact Framework does not currently support this property.</p>\\n"},{"pos":[25429,25443],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[27654,27666],"content":"Equals(Type)","needQuote":true,"nodes":[{"content":"Equals(Type)","pos":[0,12]}]},{"pos":[29299,29313],"content":"GetArrayRank()","needQuote":true,"nodes":[{"content":"GetArrayRank()","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An integer that contains the number of dimensions in the current type.","pos":[29890,29965],"source":"\\n<p>An integer that contains the number of dimensions in the current type."},{"content":"&lt;/p&gt;\\n","pos":[29966,29972],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The functionality of this method is unsupported in the base class and must be implemented in a derived class instead.","pos":[30091,30213],"source":"\\n<p>The functionality of this method is unsupported in the base class and must be implemented in a derived class instead."},{"content":"&lt;/p&gt;\\n","pos":[30214,30220],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current type is not an array.","pos":[30317,30355],"source":"\\n<p>The current type is not an array."},{"content":"&lt;/p&gt;\\n","pos":[30356,30362],"source":" </p>\\n"},{"pos":[30769,30785],"content":"GetElementType()","needQuote":true,"nodes":[{"content":"GetElementType()","pos":[0,16]}]},{"pos":[32394,32420],"content":"GetGenericTypeDefinition()","needQuote":true,"nodes":[{"content":"GetGenericTypeDefinition()","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.","pos":[33764,33823],"source":"\\n<p>The invoked method is not supported in the base class."},{"content":"Derived classes must provide an implementation.&lt;/p&gt;\\n","pos":[33824,33877],"source":" Derived classes must provide an implementation.</p>\\n"},{"pos":[34486,34499],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The hash code for this instance.&lt;/p&gt;\\n","pos":[35069,35112],"source":"\\n<p>The hash code for this instance.</p>\\n"},{"pos":[35452,35467],"content":"GetType(String)","needQuote":true,"nodes":[{"content":"GetType(String)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The type with the specified name, if found; otherwise, &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36658,36746],"source":"\\n<p>The type with the specified name, if found; otherwise, <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[36865,36915],"source":"\\n<p>\\n<em>typeName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[36916,36922],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A class initializer is invoked and throws an exception.","pos":[37057,37117],"source":"\\n<p>A class initializer is invoked and throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[37118,37124],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The assembly or one of its dependencies is not valid.","pos":[38519,38577],"source":"\\n<p>The assembly or one of its dependencies is not valid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.&lt;/p&gt;\\n","pos":[38578,38730],"source":" </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n"},{"pos":[39657,39681],"content":"GetType(String, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception if the type cannot be found; &lt;strong&gt;false&lt;/strong&gt; to return &lt;strong&gt;null&lt;/strong&gt;.","pos":[41016,41151],"source":"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>."},{"content":"Specifying &lt;strong&gt;false&lt;/strong&gt; also suppresses some other exception conditions, but not all of them.","pos":[41152,41255],"source":" Specifying <strong>false</strong> also suppresses some other exception conditions, but not all of them."},{"content":"See the Exceptions section.&lt;/p&gt;\\n","pos":[41256,41289],"source":" See the Exceptions section.</p>\\n"},{"content":"\\n&lt;p&gt;The type with the specified name.","pos":[41347,41385],"source":"\\n<p>The type with the specified name."},{"content":"If the type is not found, the &lt;em&gt;throwOnError&lt;/em&gt; parameter specifies whether &lt;strong&gt;null&lt;/strong&gt; is returned or an exception is thrown.","pos":[41386,41526],"source":" If the type is not found, the <em>throwOnError</em> parameter specifies whether <strong>null</strong> is returned or an exception is thrown."},{"content":"In some cases, an exception is thrown regardless of the value of &lt;em&gt;throwOnError&lt;/em&gt;.","pos":[41527,41614],"source":" In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>."},{"content":"See the Exceptions section.","pos":[41615,41642]},{"content":"&lt;/p&gt;\\n","pos":[41643,41649],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41768,41818],"source":"\\n<p>\\n<em>typeName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41819,41825],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A class initializer is invoked and throws an exception.","pos":[41960,42020],"source":"\\n<p>A class initializer is invoked and throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[42021,42027],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;throwOnError&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt; and the assembly or one of its dependencies was not found.","pos":[43614,43726],"source":"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the assembly or one of its dependencies was not found."},{"content":"&lt;/p&gt;\\n","pos":[43727,43733],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The assembly or one of its dependencies is not valid.","pos":[44296,44354],"source":"\\n<p>The assembly or one of its dependencies is not valid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.&lt;/p&gt;\\n","pos":[44355,44507],"source":" </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n"},{"pos":[45488,45521],"content":"GetType(String, Boolean, Boolean)","needQuote":true,"nodes":[{"content":"GetType(String, Boolean, Boolean)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to throw an exception if the type cannot be found; &lt;strong&gt;false&lt;/strong&gt; to return &lt;strong&gt;null&lt;/strong&gt;.Specifying &lt;strong&gt;false&lt;/strong&gt; also suppresses some other exception conditions, but not all of them.","pos":[46921,47159],"source":"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>.Specifying <strong>false</strong> also suppresses some other exception conditions, but not all of them."},{"content":"See the Exceptions section.&lt;/p&gt;\\n","pos":[47160,47193],"source":" See the Exceptions section.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to perform a case-insensitive search for &lt;em&gt;typeName&lt;/em&gt;, &lt;strong&gt;false&lt;/strong&gt; to perform a case-sensitive search for &lt;em&gt;typeName&lt;/em&gt;.","pos":[47263,47432],"source":"\\n<p>\\n<strong>true</strong> to perform a case-insensitive search for <em>typeName</em>, <strong>false</strong> to perform a case-sensitive search for <em>typeName</em>."},{"content":"&lt;/p&gt;\\n","pos":[47433,47439],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The type with the specified name.","pos":[47497,47535],"source":"\\n<p>The type with the specified name."},{"content":"If the type is not found, the &lt;em&gt;throwOnError&lt;/em&gt; parameter specifies whether &lt;strong&gt;null&lt;/strong&gt; is returned or an exception is thrown.","pos":[47536,47676],"source":" If the type is not found, the <em>throwOnError</em> parameter specifies whether <strong>null</strong> is returned or an exception is thrown."},{"content":"In some cases, an exception is thrown regardless of the value of &lt;em&gt;throwOnError&lt;/em&gt;.","pos":[47677,47764],"source":" In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>."},{"content":"See the Exceptions section.","pos":[47765,47792]},{"content":"&lt;/p&gt;\\n","pos":[47793,47799],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeName&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[47918,47968],"source":"\\n<p>\\n<em>typeName</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47969,47975],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A class initializer is invoked and throws an exception.","pos":[48110,48170],"source":"\\n<p>A class initializer is invoked and throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[48171,48177],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;throwOnError&lt;/em&gt; is &lt;strong&gt;true&lt;/strong&gt; and the assembly or one of its dependencies was not found.","pos":[49764,49876],"source":"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the assembly or one of its dependencies was not found."},{"content":"&lt;/p&gt;\\n","pos":[49877,49883],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The assembly or one of its dependencies was found, but could not be loaded.","pos":[49986,50066],"source":"\\n<p>The assembly or one of its dependencies was found, but could not be loaded."},{"content":"&lt;/p&gt;\\n","pos":[50067,50073],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The assembly or one of its dependencies is not valid.","pos":[50182,50240],"source":"\\n<p>The assembly or one of its dependencies is not valid."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.&lt;/p&gt;\\n","pos":[50241,50393],"source":" </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n"},{"pos":[51299,51316],"content":"GetTypeCode(Type)","needQuote":true,"nodes":[{"content":"GetTypeCode(Type)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The type whose underlying type code to get.","pos":[52017,52065],"source":"\\n<p>The type whose underlying type code to get."},{"content":"&lt;/p&gt;\\n","pos":[52066,52072],"source":" </p>\\n"},{"pos":[52820,52856],"content":"GetTypeFromHandle(RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"GetTypeFromHandle(RuntimeTypeHandle)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The object that refers to the type.","pos":[53588,53628],"source":"\\n<p>The object that refers to the type."},{"content":"&lt;/p&gt;\\n","pos":[53629,53635],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A class initializer is invoked and throws an exception.","pos":[54152,54212],"source":"\\n<p>A class initializer is invoked and throws an exception."},{"content":"&lt;/p&gt;\\n","pos":[54213,54219],"source":" </p>\\n"},{"pos":[54780,54795],"content":"MakeArrayType()","needQuote":true,"nodes":[{"content":"MakeArrayType()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.","pos":[55800,55859],"source":"\\n<p>The invoked method is not supported in the base class."},{"content":"Derived classes must provide an implementation.&lt;/p&gt;\\n","pos":[55860,55913],"source":" Derived classes must provide an implementation.</p>\\n"},{"pos":[56809,56829],"content":"MakeArrayType(Int32)","needQuote":true,"nodes":[{"content":"MakeArrayType(Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The number of dimensions for the array.","pos":[57593,57637],"source":"\\n<p>The number of dimensions for the array."},{"content":"This number must be less than or equal to 32.&lt;/p&gt;\\n","pos":[57638,57689],"source":" This number must be less than or equal to 32.</p>\\n"},{"content":"\\n&lt;p&gt;An object representing an array of the current type, with the specified number of dimensions.&lt;/p&gt;\\n","pos":[57747,57851],"source":"\\n<p>An object representing an array of the current type, with the specified number of dimensions.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;rank&lt;/em&gt; is invalid.","pos":[57976,58008],"source":"\\n<p>\\n<em>rank</em> is invalid."},{"content":"For example, 0 or negative.&lt;/p&gt;\\n","pos":[58009,58042],"source":" For example, 0 or negative.</p>\\n"},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.&lt;/p&gt;\\n","pos":[58147,58212],"source":"\\n<p>The invoked method is not supported in the base class.</p>\\n"},{"pos":[59128,59143],"content":"MakeByRefType()","needQuote":true,"nodes":[{"content":"MakeByRefType()","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.&lt;/p&gt;\\n","pos":[60242,60307],"source":"\\n<p>The invoked method is not supported in the base class.</p>\\n"},{"pos":[61212,61235],"content":"MakeGenericType(Type[])","needQuote":true,"nodes":[{"content":"MakeGenericType(Type[])","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An array of types to be substituted for the type parameters of the current generic type.&lt;/p&gt;\\n","pos":[62131,62230],"source":"\\n<p>An array of types to be substituted for the type parameters of the current generic type.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;Any element of &lt;em&gt;typeArguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[62964,63105],"source":"\\n<p>\\n<em>typeArguments</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>Any element of <em>typeArguments</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[63106,63112],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.","pos":[64040,64099],"source":"\\n<p>The invoked method is not supported in the base class."},{"content":"Derived classes must provide an implementation.&lt;/p&gt;\\n","pos":[64100,64153],"source":" Derived classes must provide an implementation.</p>\\n"},{"pos":[64797,64814],"content":"MakePointerType()","needQuote":true,"nodes":[{"content":"MakePointerType()","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The invoked method is not supported in the base class.&lt;/p&gt;\\n","pos":[65749,65814],"source":"\\n<p>The invoked method is not supported in the base class.</p>\\n"},{"pos":[66651,66661],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[67844,67857],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[69342,69346],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[70062,70068],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[70199,70205],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70392,70414],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[70562,70568],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[70635,70636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70686,70692],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[70753,70754]},{"pos":[70809,70815],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[70875,70876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70973,70979],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[71046,71047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71097,71103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71164,71165]},{"pos":[71220,71226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[71286,71287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71532,71563],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[71729,71744],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[71820,71821],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71871,71877],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[71938,71939]},{"pos":[71994,72000],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72060,72061],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72167,72182],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[72258,72259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72309,72315],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[72376,72377]},{"pos":[72432,72438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[72498,72499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72725,72734],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[72827,72834],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[72902,72903],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72930,72931],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73000,73007],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[73075,73076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73103,73104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73279,73296],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[73405,73420],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73496,73497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73524,73525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73602,73617],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[73693,73694],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73721,73722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73854,73860],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[73980,73984],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[74022,74024]},{"pos":[74087,74091],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[74128,74130],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[74261,74265],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[74404,74410],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[74554,74559],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[74702,74709],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[74868,74885],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[75091,75105],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[75224,75230],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75297,75298],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75348,75354],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75414,75415],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75498,75504],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[75571,75572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[75622,75628],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[75688,75689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[75859,75863],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[76020,76033],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[76134,76145],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[76217,76218],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76245,76246],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76319,76330],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[76402,76403],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76430,76431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[76594,76602],"content":"TypeCode","needQuote":true,"nodes":[{"content":"TypeCode","pos":[0,8]}]},{"pos":[76768,76778],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[76873,76881],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[76950,76951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[76978,76979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77049,77057],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[77126,77127],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77154,77155],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77329,77354],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[77571,77592],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[77793,77810],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[77986,78007],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[78210,78235],"content":"TargetInvocationException","needQuote":true,"nodes":[{"content":"TargetInvocationException","pos":[0,25]}]},{"pos":[78470,78487],"content":"TypeLoadException","needQuote":true,"nodes":[{"content":"TypeLoadException","pos":[0,17]}]},{"pos":[78662,78679],"content":"FileLoadException","needQuote":true,"nodes":[{"content":"FileLoadException","pos":[0,17]}]},{"pos":[78863,78886],"content":"BadImageFormatException","needQuote":true,"nodes":[{"content":"BadImageFormatException","pos":[0,23]}]},{"pos":[79083,79104],"content":"FileNotFoundException","needQuote":true,"nodes":[{"content":"FileNotFoundException","pos":[0,21]}]},{"pos":[79301,79325],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.Type\n  commentId: T:System.Type\n  id: Type\n  parent: System\n  children:\n  - System.Type.AssemblyQualifiedName\n  - System.Type.DeclaringType\n  - System.Type.Delimiter\n  - System.Type.EmptyTypes\n  - System.Type.Equals(System.Object)\n  - System.Type.Equals(System.Type)\n  - System.Type.FullName\n  - System.Type.GenericParameterPosition\n  - System.Type.GenericTypeArguments\n  - System.Type.GetArrayRank\n  - System.Type.GetElementType\n  - System.Type.GetGenericTypeDefinition\n  - System.Type.GetHashCode\n  - System.Type.GetType(System.String)\n  - System.Type.GetType(System.String,System.Boolean)\n  - System.Type.GetType(System.String,System.Boolean,System.Boolean)\n  - System.Type.GetTypeCode(System.Type)\n  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n  - System.Type.HasElementType\n  - System.Type.IsArray\n  - System.Type.IsByRef\n  - System.Type.IsConstructedGenericType\n  - System.Type.IsGenericParameter\n  - System.Type.IsNested\n  - System.Type.IsPointer\n  - System.Type.MakeArrayType\n  - System.Type.MakeArrayType(System.Int32)\n  - System.Type.MakeByRefType\n  - System.Type.MakeGenericType(System.Type[])\n  - System.Type.MakePointerType\n  - System.Type.Missing\n  - System.Type.Name\n  - System.Type.Namespace\n  - System.Type.ToString\n  - System.Type.TypeHandle\n  langs:\n  - csharp\n  - vb\n  name: Type\n  fullName: System.Type\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Type\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 30\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_Type))]\n\n      [ComVisible(true)]\n\n      public abstract class Type : MemberInfo, ICustomAttributeProvider, _MemberInfo, _Type, IReflect\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_Type))>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class Type\n          Inherits MemberInfo\n          Implements ICustomAttributeProvider, _MemberInfo, _Type, IReflect\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Type\n- uid: System.Type.EmptyTypes\n  commentId: F:System.Type.EmptyTypes\n  id: EmptyTypes\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: EmptyTypes\n  fullName: System.Type.EmptyTypes\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: EmptyTypes\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents an empty array of type <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly Type[] EmptyTypes\n    content.vb: Public Shared ReadOnly EmptyTypes As Type()\n    return:\n      type: System.Type[]\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Type.EmptyTypes\n- uid: System.Type.Missing\n  commentId: F:System.Type.Missing\n  id: Missing\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Missing\n  fullName: System.Type.Missing\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Missing\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 44\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Represents a missing value in the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly object Missing\n    content.vb: Public Shared ReadOnly Missing As Object\n    return:\n      type: System.Object\n  seealso:\n  - type: System.Reflection.Missing\n    commentId: T:System.Reflection.Missing\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Type.Missing\n- uid: System.Type.Delimiter\n  commentId: F:System.Type.Delimiter\n  id: Delimiter\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Delimiter\n  fullName: System.Type.Delimiter\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Delimiter\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 46\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Separates names in the namespace of the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly char Delimiter\n    content.vb: Public Shared ReadOnly Delimiter As Char\n    return:\n      type: System.Char\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Type.Delimiter\n- uid: System.Type.AssemblyQualifiedName\n  commentId: P:System.Type.AssemblyQualifiedName\n  id: AssemblyQualifiedName\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: AssemblyQualifiedName\n  fullName: System.Type.AssemblyQualifiedName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: AssemblyQualifiedName\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 367\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object was loaded.</p>\\n\"\n  syntax:\n    content: public abstract string AssemblyQualifiedName { get; }\n    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The assembly-qualified name of the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, which includes the name of the assembly from which the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> was loaded, or <strong>null</strong> if the current instance represents a generic type parameter.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Type.GetType\n    commentId: M:System.Type.GetType\n  - type: System.Type.FullName\n    commentId: P:System.Type.FullName\n  - type: System.Type.Namespace\n    commentId: P:System.Type.Namespace\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.AssemblyQualifiedName\n- uid: System.Type.FullName\n  commentId: P:System.Type.FullName\n  id: FullName\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: FullName\n  fullName: System.Type.FullName\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FullName\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 355\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the fully qualified name of the type, including its namespace but not its assembly. </p>\\n\"\n  syntax:\n    content: public abstract string FullName { get; }\n    content.vb: Public MustOverride ReadOnly Property FullName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The fully qualified name of the type, including its namespace but not its assembly; or <strong>null</strong> if the current instance represents a generic type parameter, an array type, pointer type, or <strong>byref</strong> type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Type.Namespace\n    commentId: P:System.Type.Namespace\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.FullName\n- uid: System.Type.GenericParameterPosition\n  commentId: P:System.Type.GenericParameterPosition\n  id: GenericParameterPosition\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GenericParameterPosition\n  fullName: System.Type.GenericParameterPosition\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenericParameterPosition\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1171\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents a type parameter of a generic type or a generic method.</p>\\n\"\n  syntax:\n    content: public virtual int GenericParameterPosition { get; }\n    content.vb: Public Overridable ReadOnly Property GenericParameterPosition As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current type does not represent a type parameter. That is, <xref href=\\\"System.Type.IsGenericParameter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>. </p>\\n\"\n  seealso:\n  - type: System.Type.MakeGenericType(System.Type[])\n    commentId: M:System.Type.MakeGenericType(System.Type[])\n  - type: System.Type.ContainsGenericParameters\n    commentId: P:System.Type.ContainsGenericParameters\n  - type: System.Type.IsGenericParameter\n    commentId: P:System.Type.IsGenericParameter\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.GenericParameterPosition\n- uid: System.Type.GenericTypeArguments\n  commentId: P:System.Type.GenericTypeArguments\n  id: GenericTypeArguments\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GenericTypeArguments\n  fullName: System.Type.GenericTypeArguments\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GenericTypeArguments\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1336\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets an array of the generic type arguments for this type.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GenericTypeArguments { get; }\n    content.vb: Public Overridable ReadOnly Property GenericTypeArguments As Type()\n    parameters: []\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of the generic type arguments for this type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.GenericTypeArguments\n- uid: System.Type.HasElementType\n  commentId: P:System.Type.HasElementType\n  id: HasElementType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: HasElementType\n  fullName: System.Type.HasElementType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasElementType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1240\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> encompasses or refers to another type; that is, whether the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an array, a pointer, or is passed by reference.</p>\\n\"\n  syntax:\n    content: public bool HasElementType { get; }\n    content.vb: Public ReadOnly Property HasElementType As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is an array, a pointer, or is passed by reference; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.HasElementTypeImpl\n    commentId: M:System.Type.HasElementTypeImpl\n  - type: System.Type.IsArray\n    commentId: P:System.Type.IsArray\n  - type: System.Type.IsPointer\n    commentId: P:System.Type.IsPointer\n  - type: System.Type.IsByRef\n    commentId: P:System.Type.IsByRef\n  - type: System.Type.GetElementType\n    commentId: M:System.Type.GetElementType\n  - type: System.Type.GetType\n    commentId: M:System.Type.GetType\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Type.HasElementType\n- uid: System.Type.IsArray\n  commentId: P:System.Type.IsArray\n  id: IsArray\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsArray\n  fullName: System.Type.IsArray\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsArray\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1139\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether the type is an array.</p>\\n\"\n  syntax:\n    content: public bool IsArray { get; }\n    content.vb: Public ReadOnly Property IsArray As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the current type is an array; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.IsArrayImpl\n    commentId: M:System.Type.IsArrayImpl\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Type.IsArray\n- uid: System.Type.IsByRef\n  commentId: P:System.Type.IsByRef\n  id: IsByRef\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsByRef\n  fullName: System.Type.IsByRef\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsByRef\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1211\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is passed by reference.</p>\\n\"\n  syntax:\n    content: public bool IsByRef { get; }\n    content.vb: Public ReadOnly Property IsByRef As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is passed by reference; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.IsByRefImpl\n    commentId: M:System.Type.IsByRefImpl\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Type.IsByRef\n- uid: System.Type.IsConstructedGenericType\n  commentId: P:System.Type.IsConstructedGenericType\n  id: IsConstructedGenericType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsConstructedGenericType\n  fullName: System.Type.IsConstructedGenericType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsConstructedGenericType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1159\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type. </p>\\n\"\n  syntax:\n    content: public virtual bool IsConstructedGenericType { get; }\n    content.vb: Public Overridable ReadOnly Property IsConstructedGenericType As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this object represents a constructed generic type; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.IsConstructedGenericType\n- uid: System.Type.IsGenericParameter\n  commentId: P:System.Type.IsGenericParameter\n  id: IsGenericParameter\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsGenericParameter\n  fullName: System.Type.IsGenericParameter\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsGenericParameter\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1165\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> represents a type parameter in the definition of a generic type or method.</p>\\n\"\n  syntax:\n    content: public virtual bool IsGenericParameter { get; }\n    content.vb: Public Overridable ReadOnly Property IsGenericParameter As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents a type parameter of a generic type definition or generic method definition; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.GenericParameterPosition\n    commentId: P:System.Type.GenericParameterPosition\n  - type: System.Type.GetGenericArguments\n    commentId: M:System.Type.GetGenericArguments\n  - type: System.Type.GetGenericParameterConstraints\n    commentId: M:System.Type.GetGenericParameterConstraints\n  - type: System.Type.GenericParameterAttributes\n    commentId: P:System.Type.GenericParameterAttributes\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.IsGenericParameter\n- uid: System.Type.IsNested\n  commentId: P:System.Type.IsNested\n  id: IsNested\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsNested\n  fullName: System.Type.IsNested\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsNested\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 937\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object represents a type whose definition is nested inside the definition of another type.</p>\\n\"\n  syntax:\n    content: public bool IsNested { get; }\n    content.vb: Public ReadOnly Property IsNested As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is nested inside another type; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.IsNestedAssembly\n    commentId: P:System.Type.IsNestedAssembly\n  - type: System.Type.IsNestedFamily\n    commentId: P:System.Type.IsNestedFamily\n  - type: System.Type.IsNestedFamANDAssem\n    commentId: P:System.Type.IsNestedFamANDAssem\n  - type: System.Type.IsNestedFamORAssem\n    commentId: P:System.Type.IsNestedFamORAssem\n  - type: System.Type.IsNestedPrivate\n    commentId: P:System.Type.IsNestedPrivate\n  - type: System.Type.IsNestedPublic\n    commentId: P:System.Type.IsNestedPublic\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Type.IsNested\n- uid: System.Type.IsPointer\n  commentId: P:System.Type.IsPointer\n  id: IsPointer\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: IsPointer\n  fullName: System.Type.IsPointer\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsPointer\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1215\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets a value indicating whether the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a pointer.</p>\\n\"\n  syntax:\n    content: public bool IsPointer { get; }\n    content.vb: Public ReadOnly Property IsPointer As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is a pointer; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.IsPointerImpl\n    commentId: M:System.Type.IsPointerImpl\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Type.IsPointer\n- uid: System.Type.Namespace\n  commentId: P:System.Type.Namespace\n  id: Namespace\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Namespace\n  fullName: System.Type.Namespace\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Namespace\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 361\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the namespace of the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public abstract string Namespace { get; }\n    content.vb: Public MustOverride ReadOnly Property Namespace As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The namespace of the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; <strong>null</strong> if the current instance has no namespace or represents a generic parameter.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.Type.FullName\n    commentId: P:System.Type.FullName\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.Namespace\n- uid: System.Type.TypeHandle\n  commentId: P:System.Type.TypeHandle\n  id: TypeHandle\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: TypeHandle\n  fullName: System.Type.TypeHandle\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TypeHandle\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 323\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the handle for the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public virtual RuntimeTypeHandle TypeHandle { get; }\n    content.vb: Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle\n    parameters: []\n    return:\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>The handle for the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The .NET Compact Framework does not currently support this property.</p>\\n\"\n  seealso:\n  - type: System.RuntimeTypeHandle\n    commentId: T:System.RuntimeTypeHandle\n  - type: System.Type.GetTypeHandle(System.Object)\n    commentId: M:System.Type.GetTypeHandle(System.Object)\n  - type: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n    commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: Type.TypeHandle\n- uid: System.Type.Equals(System.Object)\n  commentId: M:System.Type.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Type.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1761\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines if the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is the same as the underlying system type of the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object o)\n    content.vb: Public Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The object whose underlying system type is to be compared with the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. For the comparison to succeed, <em>o</em> must be able to be cast or converted to an object of type   <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the underlying system type of <em>o</em> is the same as the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>. This method also returns <strong>false</strong> if: .</p>\\n<ul><li>\\n<p>\\n<em>o</em> is <strong>null</strong>.</p>\\n</li><li>\\n<p>\\n<em>o</em> cannot be cast or converted to a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n</li></ul>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Type.UnderlyingSystemType\n    commentId: P:System.Type.UnderlyingSystemType\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Type.Equals(Object)\n- uid: System.Type.Equals(System.Type)\n  commentId: M:System.Type.Equals(System.Type)\n  id: Equals(System.Type)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Equals(Type)\n  fullName: System.Type.Equals(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1771\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines if the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is the same as the underlying system type of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool Equals(Type o)\n    content.vb: Public Function Equals(o As Type) As Boolean\n    parameters:\n    - id: o\n      type: System.Type\n      description: \"\\n<p>The object whose underlying system type is to be compared with the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the underlying system type of <em>o</em> is the same as the underlying system type of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Type.UnderlyingSystemType\n    commentId: P:System.Type.UnderlyingSystemType\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Type.Equals(Type)\n- uid: System.Type.GetArrayRank\n  commentId: M:System.Type.GetArrayRank\n  id: GetArrayRank\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetArrayRank()\n  fullName: System.Type.GetArrayRank()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetArrayRank\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 373\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the number of dimensions in an array. </p>\\n\"\n  syntax:\n    content: public virtual int GetArrayRank()\n    content.vb: Public Overridable Function GetArrayRank As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer that contains the number of dimensions in the current type. </p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The current type is not an array. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Array.Rank\n    commentId: P:System.Array.Rank\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.GetArrayRank()\n- uid: System.Type.GetElementType\n  commentId: M:System.Type.GetElementType\n  id: GetElementType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetElementType()\n  fullName: System.Type.GetElementType()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetElementType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1327\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>When overridden in a derived class, returns the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the object encompassed or referred to by the current array, pointer or reference type.</p>\\n\"\n  syntax:\n    content: public abstract Type GetElementType()\n    content.vb: Public MustOverride Function GetElementType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the object encompassed or referred to by the current array, pointer, or reference type, or <strong>null</strong> if the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.</p>\\n\"\n  seealso:\n  - type: System.Type.HasElementType\n    commentId: P:System.Type.HasElementType\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.GetElementType()\n- uid: System.Type.GetGenericTypeDefinition\n  commentId: M:System.Type.GetGenericTypeDefinition\n  id: GetGenericTypeDefinition\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetGenericTypeDefinition()\n  fullName: System.Type.GetGenericTypeDefinition()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGenericTypeDefinition\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1348\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic type definition from which the current generic type can be constructed.</p>\\n\"\n  syntax:\n    content: public virtual Type GetGenericTypeDefinition()\n    content.vb: Public Overridable Function GetGenericTypeDefinition As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing a generic type from which the current type can be constructed.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current type is not a generic type.  That is, <xref href=\\\"System.Type.IsGenericType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class. Derived classes must provide an implementation.</p>\\n\"\n  seealso:\n  - type: System.Type.MakeGenericType(System.Type[])\n    commentId: M:System.Type.MakeGenericType(System.Type[])\n  - type: System.Type.ContainsGenericParameters\n    commentId: P:System.Type.ContainsGenericParameters\n  - type: System.Type.IsGenericTypeDefinition\n    commentId: P:System.Type.IsGenericTypeDefinition\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.GetGenericTypeDefinition()\n- uid: System.Type.GetHashCode\n  commentId: M:System.Type.GetHashCode\n  id: GetHashCode\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Type.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1796\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this instance.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Type.GetHashCode()\n- uid: System.Type.GetType(System.String)\n  commentId: M:System.Type.GetType(System.String)\n  id: GetType(System.String)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetType(String)\n  fullName: System.Type.GetType(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 95\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, performing a case-sensitive search.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Type GetType(string typeName)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function GetType(typeName As String) As Type\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The assembly-qualified name of the type to get. See <xref href=\\\"System.Type.AssemblyQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type with the specified name, if found; otherwise, <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>A class initializer is invoked and throws an exception. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>typeName</em> represents a generic type that has a pointer type, a <strong>ByRef</strong> type, or <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as one of its type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type that has an incorrect number of type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>typeName</em> represents an array of <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The assembly or one of its dependencies was found, but could not be loaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>The assembly or one of its dependencies is not valid. </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  - type: System.Reflection.Assembly.GetAssembly(System.Type)\n    commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)\n  - type: System.Reflection.Assembly.GetType(System.String)\n    commentId: M:System.Reflection.Assembly.GetType(System.String)\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Type.GetType(String)\n- uid: System.Type.GetType(System.String,System.Boolean)\n  commentId: M:System.Type.GetType(System.String,System.Boolean)\n  id: GetType(System.String,System.Boolean)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean)\n  fullName: System.Type.GetType(System.String, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 89\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Type GetType(string typeName, bool throwOnError)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function GetType(typeName As String, throwOnError As Boolean) As Type\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The assembly-qualified name of the type to get. See <xref href=\\\"System.Type.AssemblyQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</p>\\n\"\n    - id: throwOnError\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>. Specifying <strong>false</strong> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type with the specified name. If the type is not found, the <em>throwOnError</em> parameter specifies whether <strong>null</strong> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>. See the Exceptions section. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>A class initializer is invoked and throws an exception. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the type is not found. </p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> contains invalid characters, such as an embedded tab.</p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> represents an array type with an invalid size. </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents an array of <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> contains invalid syntax. For example, \\\"MyType[,*,]\\\".</p>\\n<p>-or- </p>\\n<p>\\n<em>typeName</em> represents a generic type that has a pointer type, a <strong>ByRef</strong> type, or <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as one of its type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type that has an incorrect number of type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the assembly or one of its dependencies was not found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>In the <see href=\\\"http://go.microsoft.com/fwlink/?LinkID=247912\\\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\\\"System.IO.IOException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, instead.</p>\\n<p>The assembly or one of its dependencies was found, but could not be loaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>The assembly or one of its dependencies is not valid. </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  - type: System.Reflection.Assembly.GetAssembly(System.Type)\n    commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)\n  - type: System.Reflection.Assembly.GetType(System.String)\n    commentId: M:System.Reflection.Assembly.GetType(System.String)\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Type.GetType(String, Boolean)\n- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)\n  commentId: M:System.Type.GetType(System.String,System.Boolean,System.Boolean)\n  id: GetType(System.String,System.Boolean,System.Boolean)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetType(String, Boolean, Boolean)\n  fullName: System.Type.GetType(System.String, System.Boolean, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 83\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search. </p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public static Type GetType(string typeName, bool throwOnError, bool ignoreCase)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Shared Function GetType(typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type\n    parameters:\n    - id: typeName\n      type: System.String\n      description: \"\\n<p>The assembly-qualified name of the type to get. See <xref href=\\\"System.Type.AssemblyQualifiedName\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.</p>\\n\"\n    - id: throwOnError\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to throw an exception if the type cannot be found; <strong>false</strong> to return <strong>null</strong>.Specifying <strong>false</strong> also suppresses some other exception conditions, but not all of them. See the Exceptions section.</p>\\n\"\n    - id: ignoreCase\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to perform a case-insensitive search for <em>typeName</em>, <strong>false</strong> to perform a case-sensitive search for <em>typeName</em>. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type with the specified name. If the type is not found, the <em>throwOnError</em> parameter specifies whether <strong>null</strong> is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>. See the Exceptions section. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeName</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>A class initializer is invoked and throws an exception. </p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the type is not found. </p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> contains invalid characters, such as an embedded tab.</p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> represents an array type with an invalid size. </p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents an array of <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and <em>typeName</em> contains invalid syntax. For example, \\\"MyType[,*,]\\\".</p>\\n<p>-or- </p>\\n<p>\\n<em>typeName</em> represents a generic type that has a pointer type, a <strong>ByRef</strong> type, or <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as one of its type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type that has an incorrect number of type arguments.</p>\\n<p>-or-</p>\\n<p>\\n<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter.</p>\\n\"\n  - type: System.IO.FileNotFoundException\n    commentId: T:System.IO.FileNotFoundException\n    description: \"\\n<p>\\n<em>throwOnError</em> is <strong>true</strong> and the assembly or one of its dependencies was not found. </p>\\n\"\n  - type: System.IO.FileLoadException\n    commentId: T:System.IO.FileLoadException\n    description: \"\\n<p>The assembly or one of its dependencies was found, but could not be loaded. </p>\\n\"\n  - type: System.BadImageFormatException\n    commentId: T:System.BadImageFormatException\n    description: \"\\n<p>The assembly or one of its dependencies is not valid. </p>\\n<p>-or-</p>\\n<p>Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.</p>\\n\"\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n  - type: System.Type.AssemblyQualifiedName\n    commentId: P:System.Type.AssemblyQualifiedName\n  - type: System.Reflection.Assembly.GetAssembly(System.Type)\n    commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)\n  - type: System.Reflection.Assembly.GetType(System.String)\n    commentId: M:System.Reflection.Assembly.GetType(System.String)\n  - type: System.Reflection.AssemblyName\n    commentId: T:System.Reflection.AssemblyName\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Type.GetType(String, Boolean, Boolean)\n- uid: System.Type.GetTypeCode(System.Type)\n  commentId: M:System.Type.GetTypeCode(System.Type)\n  id: GetTypeCode(System.Type)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetTypeCode(Type)\n  fullName: System.Type.GetTypeCode(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTypeCode\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 227\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the underlying type code of the specified <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public static TypeCode GetTypeCode(Type type)\n    content.vb: Public Shared Function GetTypeCode(type As Type) As TypeCode\n    parameters:\n    - id: type\n      type: System.Type\n      description: \"\\n<p>The type whose underlying type code to get. </p>\\n\"\n    return:\n      type: System.TypeCode\n      description: \"\\n<p>The code of the underlying type, or <xref href=\\\"System.TypeCode.Empty\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if <em>type</em> is <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.TypeCode\n    commentId: T:System.TypeCode\n  - type: System.Type.GetTypeCodeImpl\n    commentId: M:System.Type.GetTypeCodeImpl\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Type.GetTypeCode(Type)\n- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n  commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n  id: GetTypeFromHandle(System.RuntimeTypeHandle)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: GetTypeFromHandle(RuntimeTypeHandle)\n  fullName: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the type referenced by the specified type handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public static Type GetTypeFromHandle(RuntimeTypeHandle handle)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Shared Function GetTypeFromHandle(handle As RuntimeTypeHandle) As Type\n    parameters:\n    - id: handle\n      type: System.RuntimeTypeHandle\n      description: \"\\n<p>The object that refers to the type. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The type referenced by the specified <xref href=\\\"System.RuntimeTypeHandle\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, or <strong>null</strong> if the <xref href=\\\"System.RuntimeTypeHandle.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of <em>handle</em> is <strong>null</strong>.</p>\\n\"\n  exceptions:\n  - type: System.Reflection.TargetInvocationException\n    commentId: T:System.Reflection.TargetInvocationException\n    description: \"\\n<p>A class initializer is invoked and throws an exception. </p>\\n\"\n  seealso:\n  - type: System.RuntimeTypeHandle\n    commentId: T:System.RuntimeTypeHandle\n  - type: System.Type.TypeHandle\n    commentId: P:System.Type.TypeHandle\n  - type: System.Type.GetTypeHandle(System.Object)\n    commentId: M:System.Type.GetTypeHandle(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Type.GetTypeFromHandle(RuntimeTypeHandle)\n- uid: System.Type.MakeArrayType\n  commentId: M:System.Type.MakeArrayType\n  id: MakeArrayType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: MakeArrayType()\n  fullName: System.Type.MakeArrayType()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakeArrayType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 146\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\\n\"\n  syntax:\n    content: public virtual Type MakeArrayType()\n    content.vb: Public Overridable Function MakeArrayType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class. Derived classes must provide an implementation.</p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The current type is <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The current type is a <strong>ByRef</strong> type. That is, <xref href=\\\"System.Type.IsByRef\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>. </p>\\n\"\n  seealso:\n  - type: System.Type.MakeByRefType\n    commentId: M:System.Type.MakeByRefType\n  - type: System.Type.MakePointerType\n    commentId: M:System.Type.MakePointerType\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.MakeArrayType()\n- uid: System.Type.MakeArrayType(System.Int32)\n  commentId: M:System.Type.MakeArrayType(System.Int32)\n  id: MakeArrayType(System.Int32)\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: MakeArrayType(Int32)\n  fullName: System.Type.MakeArrayType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakeArrayType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 147\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing an array of the current type, with the specified number of dimensions.</p>\\n\"\n  syntax:\n    content: public virtual Type MakeArrayType(int rank)\n    content.vb: Public Overridable Function MakeArrayType(rank As Integer) As Type\n    parameters:\n    - id: rank\n      type: System.Int32\n      description: \"\\n<p>The number of dimensions for the array. This number must be less than or equal to 32.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>An object representing an array of the current type, with the specified number of dimensions.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>\\n<em>rank</em> is invalid. For example, 0 or negative.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class.</p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The current type is <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The current type is a <strong>ByRef</strong> type. That is, <xref href=\\\"System.Type.IsByRef\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>rank</em> is greater than 32.</p>\\n\"\n  seealso:\n  - type: System.Type.MakeByRefType\n    commentId: M:System.Type.MakeByRefType\n  - type: System.Type.MakePointerType\n    commentId: M:System.Type.MakePointerType\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.MakeArrayType(Int32)\n- uid: System.Type.MakeByRefType\n  commentId: M:System.Type.MakeByRefType\n  id: MakeByRefType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: MakeByRefType()\n  fullName: System.Type.MakeByRefType()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakeByRefType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 145\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the current type when passed as a <strong>ref</strong> parameter (<strong>ByRef</strong> parameter in Visual Basic).</p>\\n\"\n  syntax:\n    content: public virtual Type MakeByRefType()\n    content.vb: Public Overridable Function MakeByRefType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the current type when passed as a <strong>ref</strong> parameter (<strong>ByRef</strong> parameter in Visual Basic).</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class.</p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The current type is <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The current type is a <strong>ByRef</strong> type. That is, <xref href=\\\"System.Type.IsByRef\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>. </p>\\n\"\n  seealso:\n  - type: System.Type.MakeArrayType\n    commentId: M:System.Type.MakeArrayType\n  - type: System.Type.MakePointerType\n    commentId: M:System.Type.MakePointerType\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.MakeByRefType()\n- uid: System.Type.MakeGenericType(System.Type[])\n  commentId: M:System.Type.MakeGenericType(System.Type[])\n  id: MakeGenericType(System.Type[])\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: MakeGenericType(Type[])\n  fullName: System.Type.MakeGenericType(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakeGenericType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1304\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the resulting constructed type.</p>\\n\"\n  syntax:\n    content: public virtual Type MakeGenericType(params Type[] typeArguments)\n    content.vb: Public Overridable Function MakeGenericType(ParamArray typeArguments As Type()) As Type\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: \"\\n<p>An array of types to be substituted for the type parameters of the current generic type.</p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the constructed type formed by substituting the elements of <em>typeArguments</em> for the type parameters of the current generic type.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current type does not represent a generic type definition. That is, <xref href=\\\"System.Type.IsGenericTypeDefinition\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>. </p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeArguments</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>Any element of <em>typeArguments</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in <em>typeArguments</em> is not the same as the number of type parameters in the current generic type definition.</p>\\n<p>-or- </p>\\n<p>Any element of <em>typeArguments</em> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. </p>\\n<p>-or- </p>\\n<p>\\n<em>typeArguments</em> contains an element that is a pointer type (<xref href=\\\"System.Type.IsPointer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>), a by-ref type (<xref href=\\\"System.Type.IsByRef\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>), or <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class. Derived classes must provide an implementation.</p>\\n\"\n  seealso:\n  - type: System.Type.IsGenericTypeDefinition\n    commentId: P:System.Type.IsGenericTypeDefinition\n  - type: System.Type.GetGenericTypeDefinition\n    commentId: M:System.Type.GetGenericTypeDefinition\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Type.MakeGenericType(System.Type())\n  name.vb: MakeGenericType(Type())\n  nameWithType: Type.MakeGenericType(Type[])\n  nameWithType.vb: Type.MakeGenericType(Type())\n- uid: System.Type.MakePointerType\n  commentId: M:System.Type.MakePointerType\n  id: MakePointerType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: MakePointerType()\n  fullName: System.Type.MakePointerType()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakePointerType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 143\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a pointer to the current type.</p>\\n\"\n  syntax:\n    content: public virtual Type MakePointerType()\n    content.vb: Public Overridable Function MakePointerType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a pointer to the current type.</p>\\n\"\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The invoked method is not supported in the base class.</p>\\n\"\n  - type: System.TypeLoadException\n    commentId: T:System.TypeLoadException\n    description: \"\\n<p>The current type is <xref href=\\\"System.TypedReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The current type is a <strong>ByRef</strong> type. That is, <xref href=\\\"System.Type.IsByRef\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>true</strong>. </p>\\n\"\n  seealso:\n  - type: System.Type.MakeByRefType\n    commentId: M:System.Type.MakeByRefType\n  - type: System.Type.MakeArrayType\n    commentId: M:System.Type.MakeArrayType\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: Type.MakePointerType()\n- uid: System.Type.ToString\n  commentId: M:System.Type.ToString\n  id: ToString\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Type.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 1739\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a <strong>String</strong> representing the name of the current <strong>Type</strong>.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the name of the current <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Object.ToString\n  seealso:\n  - type: System.String\n    commentId: T:System.String\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Type.ToString()\n- uid: System.Type.DeclaringType\n  commentId: P:System.Type.DeclaringType\n  id: DeclaringType\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: DeclaringType\n  fullName: System.Type.DeclaringType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Type.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaringType\n    path: src/mscorlib/src/System/Type.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the type that declares the current nested type or generic type parameter.</p>\\n\"\n  syntax:\n    content: public override Type DeclaringType { get; }\n    content.vb: Public Overrides ReadOnly Property DeclaringType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>A <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, <strong>null</strong>.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MemberInfo\n    commentId: T:System.Reflection.MemberInfo\n  - type: System.Type.ReflectedType\n    commentId: P:System.Type.ReflectedType\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.DeclaringType\n- uid: System.Type.Name\n  commentId: P:System.Type.Name\n  id: Name\n  parent: System.Type\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Type.Name\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime/ref/System.Runtime.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Name\n    path: src/System.Runtime/ref/System.Runtime.Manual.cs\n    startLine: 43\n  assemblies:\n  - System.Runtime\n  namespace: System\n  syntax:\n    content: public abstract string Name { get; }\n    content.vb: Public MustOverride ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: Type.Name\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.RuntimeTypeHandle\n  parent: System\n  isExternal: false\n  name: RuntimeTypeHandle\n  fullName: System.RuntimeTypeHandle\n  nameWithType: RuntimeTypeHandle\n  commentId: T:System.RuntimeTypeHandle\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.TypeCode\n  parent: System\n  isExternal: false\n  name: TypeCode\n  fullName: System.TypeCode\n  nameWithType: TypeCode\n  commentId: T:System.TypeCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Reflection.TargetInvocationException\n  isExternal: false\n  name: TargetInvocationException\n  fullName: System.Reflection.TargetInvocationException\n  nameWithType: TargetInvocationException\n  commentId: T:System.Reflection.TargetInvocationException\n- uid: System.TypeLoadException\n  parent: System\n  isExternal: false\n  name: TypeLoadException\n  fullName: System.TypeLoadException\n  nameWithType: TypeLoadException\n  commentId: T:System.TypeLoadException\n- uid: System.IO.FileLoadException\n  isExternal: false\n  name: FileLoadException\n  fullName: System.IO.FileLoadException\n  nameWithType: FileLoadException\n  commentId: T:System.IO.FileLoadException\n- uid: System.BadImageFormatException\n  isExternal: false\n  name: BadImageFormatException\n  fullName: System.BadImageFormatException\n  nameWithType: BadImageFormatException\n  commentId: T:System.BadImageFormatException\n- uid: System.IO.FileNotFoundException\n  isExternal: false\n  name: FileNotFoundException\n  fullName: System.IO.FileNotFoundException\n  nameWithType: FileNotFoundException\n  commentId: T:System.IO.FileNotFoundException\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}