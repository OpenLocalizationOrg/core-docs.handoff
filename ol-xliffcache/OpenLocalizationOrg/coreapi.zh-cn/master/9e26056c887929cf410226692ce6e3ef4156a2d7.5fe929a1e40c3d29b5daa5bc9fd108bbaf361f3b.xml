{"nodes":[{"pos":[801,812],"content":"TcpListener","needQuote":true,"nodes":[{"content":"TcpListener","pos":[0,11]}]},{"pos":[2263,2292],"content":"TcpListener(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"TcpListener(IPAddress, Int32)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The port on which to listen for incoming connection attempts.","pos":[3399,3465],"source":"\\n<p>The port on which to listen for incoming connection attempts."},{"content":"&lt;/p&gt;\\n","pos":[3466,3472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localaddr&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[3591,3642],"source":"\\n<p>\\n<em>localaddr</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[3643,3649],"source":" </p>\\n"},{"pos":[4547,4570],"content":"TcpListener(IPEndPoint)","needQuote":true,"nodes":[{"content":"TcpListener(IPEndPoint)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;localEP&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5744,5793],"source":"\\n<p>\\n<em>localEP</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5794,5800],"source":" </p>\\n"},{"pos":[6282,6288],"content":"Active","needQuote":true,"nodes":[{"content":"Active","pos":[0,6]}]},{"pos":[7708,7727],"content":"ExclusiveAddressUse","needQuote":true,"nodes":[{"content":"ExclusiveAddressUse","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An error occurred when attempting to access the underlying socket.&lt;/p&gt;\\n","pos":[9719,9796],"source":"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n"},{"pos":[10366,10379],"content":"LocalEndpoint","needQuote":true,"nodes":[{"content":"LocalEndpoint","pos":[0,13]}]},{"pos":[11931,11937],"content":"Server","needQuote":true,"nodes":[{"content":"Server","pos":[0,6]}]},{"pos":[13433,13452],"content":"AcceptSocketAsync()","needQuote":true,"nodes":[{"content":"AcceptSocketAsync()","pos":[0,19]}]},{"pos":[15546,15568],"content":"AcceptTcpClientAsync()","needQuote":true,"nodes":[{"content":"AcceptTcpClientAsync()","pos":[0,22]}]},{"pos":[18162,18171],"content":"Pending()","needQuote":true,"nodes":[{"content":"Pending()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if connections are pending; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18788,18885],"source":"\\n<p>\\n<strong>true</strong> if connections are pending; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19800,19807],"content":"Start()","needQuote":true,"nodes":[{"content":"Start()","pos":[0,7]}]},{"pos":[21600,21612],"content":"Start(Int32)","needQuote":true,"nodes":[{"content":"Start(Int32)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The maximum length of the pending connections queue.&lt;/p&gt;\\n","pos":[22310,22373],"source":"\\n<p>The maximum length of the pending connections queue.</p>\\n"},{"content":"\\n&lt;p&gt;An error occurred while accessing the socket.","pos":[22504,22554],"source":"\\n<p>An error occurred while accessing the socket."},{"content":"See the Remarks section for more information.","pos":[22555,22600]},{"content":"&lt;/p&gt;\\n","pos":[22601,22607],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The&lt;em&gt; backlog&lt;/em&gt; parameter is less than zero or exceeds the maximum number of permitted connections.&lt;/p&gt;\\n","pos":[22724,22839],"source":"\\n<p>The<em> backlog</em> parameter is less than zero or exceeds the maximum number of permitted connections.</p>\\n"},{"pos":[23952,23958],"content":"Stop()","needQuote":true,"nodes":[{"content":"Stop()","pos":[0,6]}]},{"pos":[25175,25193],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[25360,25366],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25526,25536],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[25631,25639],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25708,25709],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25736,25737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25807,25815],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[25884,25885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25912,25913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26096,26110],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26229,26235],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26302,26303],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26353,26359],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26419,26420],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26503,26509],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26576,26577],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26627,26633],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26693,26694],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26908,26930],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27078,27084],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27151,27152],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27202,27208],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27269,27270]},{"pos":[27325,27331],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27391,27392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27489,27495],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27562,27563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27613,27619],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27680,27681]},{"pos":[27736,27742],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27802,27803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28048,28079],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28245,28260],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28336,28337],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28387,28393],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28454,28455]},{"pos":[28510,28516],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28576,28577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28683,28698],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28774,28775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28825,28831],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28892,28893]},{"pos":[28948,28954],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29014,29015],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29245,29258],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29359,29370],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29442,29443],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29470,29471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29544,29555],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[29627,29628],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29655,29656],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29831,29840],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29933,29940],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30008,30009],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30036,30037],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30106,30113],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30181,30182],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30209,30210],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30385,30402],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30511,30526],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30602,30603],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30630,30631],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30708,30723],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30799,30800],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30827,30828],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30973,30979],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31121,31130],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[31291,31296],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31418,31428],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[31562,31572],"content":"IPEndPoint","needQuote":true,"nodes":[{"content":"IPEndPoint","pos":[0,10]}]},{"pos":[31738,31745],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31903,31911],"content":"EndPoint","needQuote":true,"nodes":[{"content":"EndPoint","pos":[0,8]}]},{"pos":[32094,32100],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[32350,32362],"content":"Task<Socket>","needQuote":true,"nodes":[{"content":"Task&lt;Socket&gt;","pos":[0,12],"source":"Task<Socket>"}]},{"pos":[32594,32598],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[32672,32673],"content":"<","needQuote":true,"nodes":[]},{"pos":[32735,32741],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[32874,32878],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[32953,32956]},{"pos":[33025,33031],"content":"Socket","needQuote":true,"nodes":[{"content":"Socket","pos":[0,6]}]},{"pos":[33082,33083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33299,33312],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[33509,33513],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[33566,33567],"content":"<","needQuote":true,"nodes":[]},{"pos":[33594,33601],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[33716,33720],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[33774,33777]},{"pos":[33811,33818],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[33851,33852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34038,34060],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[34323,34338],"content":"Task<TcpClient>","needQuote":true,"nodes":[{"content":"Task&lt;TcpClient&gt;","pos":[0,15],"source":"Task<TcpClient>"}]},{"pos":[34579,34583],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[34657,34658],"content":"<","needQuote":true,"nodes":[]},{"pos":[34723,34732],"content":"TcpClient","needQuote":true,"nodes":[{"content":"TcpClient","pos":[0,9]}]},{"pos":[34868,34872],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[34947,34950]},{"pos":[35022,35031],"content":"TcpClient","needQuote":true,"nodes":[{"content":"TcpClient","pos":[0,9]}]},{"pos":[35085,35086],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35310,35331],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[35525,35552],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[35779,35804],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[36010,36025],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[36221,36244],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]}],"content":"items:\n- uid: System.Net.Sockets.TcpListener\n  commentId: T:System.Net.Sockets.TcpListener\n  id: TcpListener\n  parent: System.Net.Sockets\n  children:\n  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  - System.Net.Sockets.TcpListener.AcceptSocketAsync\n  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  - System.Net.Sockets.TcpListener.Active\n  - System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  - System.Net.Sockets.TcpListener.LocalEndpoint\n  - System.Net.Sockets.TcpListener.Pending\n  - System.Net.Sockets.TcpListener.Server\n  - System.Net.Sockets.TcpListener.Start\n  - System.Net.Sockets.TcpListener.Start(System.Int32)\n  - System.Net.Sockets.TcpListener.Stop\n  langs:\n  - csharp\n  - vb\n  name: TcpListener\n  fullName: System.Net.Sockets.TcpListener\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TcpListener\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 439\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Listens for connections from TCP network clients.</p>\\n\"\n  syntax:\n    content: public class TcpListener\n    content.vb: Public Class TcpListener\n  seealso:\n  - type: System.Net.Sockets.TcpClient\n    commentId: T:System.Net.Sockets.TcpClient\n  see:\n  - type: System.Net.SocketPermission\n    commentId: T:System.Net.SocketPermission\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: TcpListener\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)\n  id: '#ctor(System.Net.IPAddress,System.Int32)'\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: TcpListener(IPAddress, Int32)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 441\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that listens for incoming connection attempts on the specified local IP address and port number.</p>\\n\"\n  syntax:\n    content: public TcpListener(IPAddress localaddr, int port)\n    content.vb: Public Sub New(localaddr As IPAddress, port As Integer)\n    parameters:\n    - id: localaddr\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the local IP address. </p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port on which to listen for incoming connection attempts. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localaddr</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is not between <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress\n    commentId: T:System.Net.IPAddress\n  - type: System.Net.Sockets.TcpListener.Start\n    commentId: M:System.Net.Sockets.TcpListener.Start\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.TcpListener(IPAddress, Int32)\n- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)\n  id: '#ctor(System.Net.IPEndPoint)'\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: TcpListener(IPEndPoint)\n  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPEndPoint)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 442\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified local endpoint.</p>\\n\"\n  syntax:\n    content: public TcpListener(IPEndPoint localEP)\n    content.vb: Public Sub New(localEP As IPEndPoint)\n    parameters:\n    - id: localEP\n      type: System.Net.IPEndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the local endpoint to which to bind the listener <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>localEP</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Net.IPEndPoint\n    commentId: T:System.Net.IPEndPoint\n  - type: System.Net.Sockets.TcpListener.Start\n    commentId: M:System.Net.Sockets.TcpListener.Start\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.TcpListener(IPEndPoint)\n- uid: System.Net.Sockets.TcpListener.Active\n  commentId: P:System.Net.Sockets.TcpListener.Active\n  id: Active\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Active\n  fullName: System.Net.Sockets.TcpListener.Active\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Active\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 443\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets a value that indicates whether <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is actively listening for client connections.</p>\\n\"\n  syntax:\n    content: protected bool Active { get; }\n    content.vb: Protected ReadOnly Property Active As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is actively listening; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpListener.Start\n    commentId: M:System.Net.Sockets.TcpListener.Start\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: TcpListener.Active\n- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  commentId: P:System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  id: ExclusiveAddressUse\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: ExclusiveAddressUse\n  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExclusiveAddressUse\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 444\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value that specifies whether the <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one underlying socket to listen to a specific port.</p>\\n\"\n  syntax:\n    content: public bool ExclusiveAddressUse { get; set; }\n    content.vb: Public Property ExclusiveAddressUse As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> allows only one <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to listen to a specific port; otherwise, <strong>false</strong>. . The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been started. Call the <xref href=\\\"System.Net.Sockets.TcpListener.Stop\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method and then set the <xref href=\\\"System.Net.Sockets.Socket.ExclusiveAddressUse\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property.</p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred when attempting to access the underlying socket.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been closed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.ExclusiveAddressUse\n- uid: System.Net.Sockets.TcpListener.LocalEndpoint\n  commentId: P:System.Net.Sockets.TcpListener.LocalEndpoint\n  id: LocalEndpoint\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: LocalEndpoint\n  fullName: System.Net.Sockets.TcpListener.LocalEndpoint\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LocalEndpoint\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 445\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the underlying <xref href=\\\"System.Net.EndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current <xref href=\\\"System.Net.Sockets.TcpListener\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public EndPoint LocalEndpoint { get; }\n    content.vb: Public ReadOnly Property LocalEndpoint As EndPoint\n    parameters: []\n    return:\n      type: System.Net.EndPoint\n      description: \"\\n<p>The <xref href=\\\"System.Net.EndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to which the <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is bound.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Listen(System.Int32)\n    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)\n  - type: System.Net.EndPoint\n    commentId: T:System.Net.EndPoint\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TcpListener.LocalEndpoint\n- uid: System.Net.Sockets.TcpListener.Server\n  commentId: P:System.Net.Sockets.TcpListener.Server\n  id: Server\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Server\n  fullName: System.Net.Sockets.TcpListener.Server\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Server\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 446\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Gets the underlying network <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public Socket Server { get; }\n    content.vb: Public ReadOnly Property Server As Socket\n    parameters: []\n    return:\n      type: System.Net.Sockets.Socket\n      description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  - type: System.Net.Sockets.TcpListener.AcceptSocket\n    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket\n  - type: System.Net.Sockets.TcpListener.AcceptTcpClient\n    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: TcpListener.Server\n- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync\n  commentId: M:System.Net.Sockets.TcpListener.AcceptSocketAsync\n  id: AcceptSocketAsync\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: AcceptSocketAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AcceptSocketAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 447\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Accepts a pending connection request as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<Socket> AcceptSocketAsync()\n    content.vb: Public Function AcceptSocketAsync As Task(Of Socket)\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property on the task object returns a <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to send and receive data.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The listener has not been started with a call to <xref href=\\\"System.Net.Sockets.TcpListener.Start\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpListener.AcceptTcpClient\n    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  - type: System.Net.Sockets.TcpListener.Pending\n    commentId: M:System.Net.Sockets.TcpListener.Pending\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.AcceptSocketAsync()\n- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync\n  id: AcceptTcpClientAsync\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: AcceptTcpClientAsync()\n  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AcceptTcpClientAsync\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 448\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Accepts a pending connection request as an asynchronous operation. </p>\\n\"\n  syntax:\n    content: public Task<TcpClient> AcceptTcpClientAsync()\n    content.vb: Public Function AcceptTcpClientAsync As Task(Of TcpClient)\n    return:\n      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref></p>\\n<p>The task object representing the asynchronous operation. The <xref href=\\\"System.Threading.Tasks.Task`1.Result\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property on the task object returns a <xref href=\\\"System.Net.Sockets.TcpClient\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> used to send and receive data.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The listener has not been started with a call to <xref href=\\\"System.Net.Sockets.TcpListener.Start\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>Use the <xref href=\\\"System.Net.Sockets.SocketException.ErrorCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpClient\n    commentId: T:System.Net.Sockets.TcpClient\n  - type: System.Net.Sockets.TcpListener.AcceptSocket\n    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket\n  - type: System.Net.Sockets.Socket\n    commentId: T:System.Net.Sockets.Socket\n  - type: System.Net.Sockets.NetworkStream\n    commentId: T:System.Net.Sockets.NetworkStream\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.AcceptTcpClientAsync()\n- uid: System.Net.Sockets.TcpListener.Pending\n  commentId: M:System.Net.Sockets.TcpListener.Pending\n  id: Pending\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Pending()\n  fullName: System.Net.Sockets.TcpListener.Pending()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pending\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 449\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Determines if there are pending connection requests.</p>\\n\"\n  syntax:\n    content: public bool Pending()\n    content.vb: Public Function Pending As Boolean\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if connections are pending; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The listener has not been started with a call to <xref href=\\\"System.Net.Sockets.TcpListener.Start\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.TcpListener.Start\n    commentId: M:System.Net.Sockets.TcpListener.Start\n  - type: System.Net.Sockets.TcpListener.AcceptSocket\n    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket\n  - type: System.Net.Sockets.TcpListener.AcceptTcpClient\n    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.Pending()\n- uid: System.Net.Sockets.TcpListener.Start\n  commentId: M:System.Net.Sockets.TcpListener.Start\n  id: Start\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Start()\n  fullName: System.Net.Sockets.TcpListener.Start()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Start\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 450\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Starts listening for incoming connection requests.</p>\\n\"\n  syntax:\n    content: public void Start()\n    content.vb: Public Sub Start\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>Use the <xref href=\\\"System.Net.Sockets.SocketException.ErrorCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Listen(System.Int32)\n    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)\n  - type: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\n    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\n  - type: System.Net.Sockets.TcpListener.AcceptTcpClient\n    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient\n  - type: System.Net.Sockets.TcpListener.Stop\n    commentId: M:System.Net.Sockets.TcpListener.Stop\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.Start()\n- uid: System.Net.Sockets.TcpListener.Start(System.Int32)\n  commentId: M:System.Net.Sockets.TcpListener.Start(System.Int32)\n  id: Start(System.Int32)\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Start(Int32)\n  fullName: System.Net.Sockets.TcpListener.Start(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Start\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 451\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Starts listening for incoming connection requests with a maximum number of pending connection.</p>\\n\"\n  syntax:\n    content: public void Start(int backlog)\n    content.vb: Public Sub Start(backlog As Integer)\n    parameters:\n    - id: backlog\n      type: System.Int32\n      description: \"\\n<p>The maximum length of the pending connections queue.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>An error occurred while accessing the socket. See the Remarks section for more information. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The<em> backlog</em> parameter is less than zero or exceeds the maximum number of permitted connections.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The underlying <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is null.</p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Listen(System.Int32)\n    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)\n  - type: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\n    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\n  - type: System.Net.Sockets.TcpListener.AcceptTcpClient\n    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient\n  - type: System.Net.Sockets.TcpListener.AcceptSocket\n    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket\n  - type: System.Net.Sockets.TcpListener.Stop\n    commentId: M:System.Net.Sockets.TcpListener.Stop\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.Start(Int32)\n- uid: System.Net.Sockets.TcpListener.Stop\n  commentId: M:System.Net.Sockets.TcpListener.Stop\n  id: Stop\n  parent: System.Net.Sockets.TcpListener\n  langs:\n  - csharp\n  - vb\n  name: Stop()\n  fullName: System.Net.Sockets.TcpListener.Stop()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Stop\n    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs\n    startLine: 452\n  assemblies:\n  - System.Net.Sockets\n  namespace: System.Net.Sockets\n  summary: \"\\n<p>Closes the listener.</p>\\n\"\n  syntax:\n    content: public void Stop()\n    content.vb: Public Sub Stop\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>Use the <xref href=\\\"System.Net.Sockets.SocketException.ErrorCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\\n\"\n  seealso:\n  - type: System.Net.Sockets.Socket.Close\n    commentId: M:System.Net.Sockets.Socket.Close\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: TcpListener.Stop()\nreferences:\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Net.IPEndPoint\n  isExternal: false\n  name: IPEndPoint\n  fullName: System.Net.IPEndPoint\n  commentId: T:System.Net.IPEndPoint\n  nameWithType: IPEndPoint\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Net.EndPoint\n  parent: System.Net\n  isExternal: false\n  name: EndPoint\n  fullName: System.Net.EndPoint\n  commentId: T:System.Net.EndPoint\n  nameWithType: EndPoint\n- uid: System.Net.Sockets.Socket\n  parent: System.Net.Sockets\n  isExternal: false\n  name: Socket\n  fullName: System.Net.Sockets.Socket\n  commentId: T:System.Net.Sockets.Socket\n  nameWithType: Socket\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<Socket>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.Socket)\n  name.vb: Task(Of Socket)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Sockets.Socket\n    name: Socket\n    fullName: System.Net.Sockets.Socket\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.Socket\n    name: Socket\n    fullName: System.Net.Sockets.Socket\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.Socket}\n  nameWithType: Task<Socket>\n  nameWithType.vb: Task(Of Socket)\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TcpClient>\n  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.TcpClient)\n  name.vb: Task(Of TcpClient)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.Sockets.TcpClient\n    name: TcpClient\n    fullName: System.Net.Sockets.TcpClient\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.Sockets.TcpClient\n    name: TcpClient\n    fullName: System.Net.Sockets.TcpClient\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}\n  nameWithType: Task<TcpClient>\n  nameWithType.vb: Task(Of TcpClient)\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n"}