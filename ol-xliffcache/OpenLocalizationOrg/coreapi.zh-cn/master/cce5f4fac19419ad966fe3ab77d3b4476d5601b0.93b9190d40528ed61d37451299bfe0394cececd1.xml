{"nodes":[{"pos":[673,683],"content":"IPEndPoint","needQuote":true,"nodes":[{"content":"IPEndPoint","pos":[0,10]}]},{"pos":[1807,1814],"content":"MaxPort","needQuote":true,"nodes":[{"content":"MaxPort","pos":[0,7]}]},{"pos":[2861,2868],"content":"MinPort","needQuote":true,"nodes":[{"content":"MinPort","pos":[0,7]}]},{"pos":[3944,3968],"content":"IPEndPoint(Int64, Int32)","needQuote":true,"nodes":[{"content":"IPEndPoint(Int64, Int32)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The IP address of the Internet host.","pos":[4782,4823],"source":"\\n<p>The IP address of the Internet host."},{"content":"&lt;/p&gt;\\n","pos":[4824,4830],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The port number associated with the &lt;em&gt;address&lt;/em&gt;, or 0 to specify any available port.","pos":[4892,4986],"source":"\\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port."},{"content":"&lt;em&gt;port&lt;/em&gt; is in host order.&lt;/p&gt;\\n","pos":[4987,5024],"source":" <em>port</em> is in host order.</p>\\n"},{"pos":[5899,5927],"content":"IPEndPoint(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"IPEndPoint(IPAddress, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The port number associated with the &lt;em&gt;address&lt;/em&gt;, or 0 to specify any available port.","pos":[6925,7019],"source":"\\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port."},{"content":"&lt;em&gt;port&lt;/em&gt; is in host order.&lt;/p&gt;\\n","pos":[7020,7057],"source":" <em>port</em> is in host order.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7176,7231],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n"},{"pos":[7995,8002],"content":"Address","needQuote":true,"nodes":[{"content":"Address","pos":[0,7]}]},{"pos":[9091,9104],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[10379,10383],"content":"Port","needQuote":true,"nodes":[{"content":"Port","pos":[0,4]}]},{"pos":[12021,12042],"content":"Create(SocketAddress)","needQuote":true,"nodes":[{"content":"Create(SocketAddress)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The AddressFamily of &lt;em&gt;socketAddress&lt;/em&gt; is not equal to the AddressFamily of the current instance.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;socketAddress&lt;/em&gt;.Size &lt; 8.","pos":[13286,13450],"source":"\\n<p>The AddressFamily of <em>socketAddress</em> is not equal to the AddressFamily of the current instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>socketAddress</em>.Size < 8."},{"content":"&lt;/p&gt;\\n","pos":[13451,13457],"source":" </p>\\n"},{"pos":[13953,13967],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[15798,15811],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An integer hash value.&lt;/p&gt;\\n","pos":[16524,16557],"source":"\\n<p>An integer hash value.</p>\\n"},{"pos":[16894,16905],"content":"Serialize()","needQuote":true,"nodes":[{"content":"Serialize()","pos":[0,11]}]},{"pos":[18221,18231],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).&lt;/p&gt;\\n","pos":[18882,19004],"source":"\\n<p>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</p>\\n"},{"pos":[19224,19234],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[19377,19383],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19538,19546],"content":"EndPoint","needQuote":true,"nodes":[{"content":"EndPoint","pos":[0,8]}]},{"pos":[19747,19769],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[19917,19923],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19990,19991],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20041,20047],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20108,20109]},{"pos":[20164,20170],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20230,20231],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20328,20334],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[20401,20402],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20452,20458],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20519,20520]},{"pos":[20575,20581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20641,20642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20887,20918],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[21084,21099],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21175,21176],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21226,21232],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21293,21294]},{"pos":[21349,21355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21415,21416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21522,21537],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[21613,21614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21664,21670],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[21731,21732]},{"pos":[21787,21793],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21853,21854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22080,22089],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[22182,22189],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22257,22258],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22285,22286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22355,22362],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[22430,22431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22458,22459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22634,22651],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[22760,22775],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22851,22852],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22879,22880],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22957,22972],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[23048,23049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23076,23077],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23222,23228],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[23358,23363],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[23504,23509],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[23662,23671],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[23866,23879],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[24111,24124],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[24302,24320],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[24539,24560],"content":"Create(SocketAddress)","needQuote":true,"nodes":[{"content":"Create(SocketAddress)","pos":[0,21]}]},{"pos":[24713,24719],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[24771,24772],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24833,24846],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[24896,24897],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24997,25003],"content":"Create","needQuote":true,"nodes":[{"content":"Create","pos":[0,6]}]},{"pos":[25055,25056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25117,25130],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[25180,25181],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25394,25407],"content":"SocketAddress","needQuote":true,"nodes":[{"content":"SocketAddress","pos":[0,13]}]},{"pos":[25609,25623],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[25742,25748],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[25815,25816],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25866,25872],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25932,25933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26016,26022],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26089,26090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26140,26146],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26206,26207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26380,26387],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26553,26566],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[26667,26678],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26750,26751],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26778,26779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26852,26863],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[26935,26936],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26963,26964],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27154,27165],"content":"Serialize()","needQuote":true,"nodes":[{"content":"Serialize()","pos":[0,11]}]},{"pos":[27274,27283],"content":"Serialize","needQuote":true,"nodes":[{"content":"Serialize","pos":[0,9]}]},{"pos":[27338,27339],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27366,27367],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27444,27453],"content":"Serialize","needQuote":true,"nodes":[{"content":"Serialize","pos":[0,9]}]},{"pos":[27508,27509],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27536,27537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27717,27727],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27822,27830],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27899,27900],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27927,27928],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27998,28006],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[28075,28076],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28103,28104],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28259,28265],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[28414,28441],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[28647,28668],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[28869,28886],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Net.IPEndPoint\n  commentId: T:System.Net.IPEndPoint\n  id: IPEndPoint\n  parent: System.Net\n  children:\n  - System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)\n  - System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)\n  - System.Net.IPEndPoint.Address\n  - System.Net.IPEndPoint.AddressFamily\n  - System.Net.IPEndPoint.Create(System.Net.SocketAddress)\n  - System.Net.IPEndPoint.Equals(System.Object)\n  - System.Net.IPEndPoint.GetHashCode\n  - System.Net.IPEndPoint.MaxPort\n  - System.Net.IPEndPoint.MinPort\n  - System.Net.IPEndPoint.Port\n  - System.Net.IPEndPoint.Serialize\n  - System.Net.IPEndPoint.ToString\n  langs:\n  - csharp\n  - vb\n  name: IPEndPoint\n  fullName: System.Net.IPEndPoint\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPEndPoint\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 208\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Represents a network endpoint as an IP address and a port number.</p>\\n\"\n  syntax:\n    content: 'public class IPEndPoint : EndPoint'\n    content.vb: >-\n      Public Class IPEndPoint\n          Inherits EndPoint\n  inheritance:\n  - System.Object\n  - System.Net.EndPoint\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: IPEndPoint\n- uid: System.Net.IPEndPoint.MaxPort\n  commentId: F:System.Net.IPEndPoint.MaxPort\n  id: MaxPort\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: MaxPort\n  fullName: System.Net.IPEndPoint.MaxPort\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxPort\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 210\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Specifies the maximum value that can be assigned to the <xref href=\\\"System.Net.IPEndPoint.Port\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.</p>\\n\"\n  syntax:\n    content: public const int MaxPort = 65535\n    content.vb: Public Const MaxPort As Integer = 65535\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: IPEndPoint.MaxPort\n- uid: System.Net.IPEndPoint.MinPort\n  commentId: F:System.Net.IPEndPoint.MinPort\n  id: MinPort\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: MinPort\n  fullName: System.Net.IPEndPoint.MinPort\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinPort\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 211\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Specifies the minimum value that can be assigned to the <xref href=\\\"System.Net.IPEndPoint.Port\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property. This field is read-only.</p>\\n\"\n  syntax:\n    content: public const int MinPort = 0\n    content.vb: Public Const MinPort As Integer = 0\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: IPEndPoint.MinPort\n- uid: System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)\n  commentId: M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)\n  id: '#ctor(System.Int64,System.Int32)'\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: IPEndPoint(Int64, Int32)\n  fullName: System.Net.IPEndPoint.IPEndPoint(System.Int64, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 212\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified address and port number.</p>\\n\"\n  syntax:\n    content: public IPEndPoint(long address, int port)\n    content.vb: Public Sub New(address As Long, port As Integer)\n    parameters:\n    - id: address\n      type: System.Int64\n      description: \"\\n<p>The IP address of the Internet host. </p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port. <em>port</em> is in host order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>port</em> is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>address</em> is less than 0 or greater than 0x00000000FFFFFFFF. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPEndPoint.IPEndPoint(Int64, Int32)\n- uid: System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)\n  id: '#ctor(System.Net.IPAddress,System.Int32)'\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: IPEndPoint(IPAddress, Int32)\n  fullName: System.Net.IPEndPoint.IPEndPoint(System.Net.IPAddress, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 213\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified address and port number.</p>\\n\"\n  syntax:\n    content: public IPEndPoint(IPAddress address, int port)\n    content.vb: Public Sub New(address As IPAddress, port As Integer)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    - id: port\n      type: System.Int32\n      description: \"\\n<p>The port number associated with the <em>address</em>, or 0 to specify any available port. <em>port</em> is in host order.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>port</em> is less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>port</em> is greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or- </p>\\n<p>\\n<em>address</em> is less than 0 or greater than 0x00000000FFFFFFFF. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPEndPoint.IPEndPoint(IPAddress, Int32)\n- uid: System.Net.IPEndPoint.Address\n  commentId: P:System.Net.IPEndPoint.Address\n  id: Address\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Address\n  fullName: System.Net.IPEndPoint.Address\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Address\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 214\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the IP address of the endpoint.</p>\\n\"\n  syntax:\n    content: public IPAddress Address { get; set; }\n    content.vb: Public Property Address As IPAddress\n    parameters: []\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance containing the IP address of the endpoint.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPEndPoint.Address\n- uid: System.Net.IPEndPoint.AddressFamily\n  commentId: P:System.Net.IPEndPoint.AddressFamily\n  id: AddressFamily\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: AddressFamily\n  fullName: System.Net.IPEndPoint.AddressFamily\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressFamily\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 215\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the Internet Protocol (IP) address family.</p>\\n\"\n  syntax:\n    content: public override AddressFamily AddressFamily { get; }\n    content.vb: Public Overrides ReadOnly Property AddressFamily As AddressFamily\n    parameters: []\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  overridden: System.Net.EndPoint.AddressFamily\n  seealso:\n  - type: System.Net.EndPoint\n    commentId: T:System.Net.EndPoint\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: IPEndPoint.AddressFamily\n- uid: System.Net.IPEndPoint.Port\n  commentId: P:System.Net.IPEndPoint.Port\n  id: Port\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Port\n  fullName: System.Net.IPEndPoint.Port\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Port\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 216\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the port number of the endpoint.</p>\\n\"\n  syntax:\n    content: public int Port { get; set; }\n    content.vb: Public Property Port As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value in the range <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating the port number of the endpoint.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The value that was specified for a set operation is less than <xref href=\\\"System.Net.IPEndPoint.MinPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or greater than <xref href=\\\"System.Net.IPEndPoint.MaxPort\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPEndPoint.Port\n- uid: System.Net.IPEndPoint.Create(System.Net.SocketAddress)\n  commentId: M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)\n  id: Create(System.Net.SocketAddress)\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Create(SocketAddress)\n  fullName: System.Net.IPEndPoint.Create(System.Net.SocketAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Create\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 217\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Creates an endpoint from a socket address.</p>\\n\"\n  syntax:\n    content: public override EndPoint Create(SocketAddress socketAddress)\n    content.vb: Public Overrides Function Create(socketAddress As SocketAddress) As\n    parameters:\n    - id: socketAddress\n      type: System.Net.SocketAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to use for the endpoint. </p>\\n\"\n    return:\n      type: System.Net.EndPoint\n      description: \"\\n<p>An <xref href=\\\"System.Net.EndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance using the specified socket address.</p>\\n\"\n  overridden: System.Net.EndPoint.Create(System.Net.SocketAddress)\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The AddressFamily of <em>socketAddress</em> is not equal to the AddressFamily of the current instance.</p>\\n<p>-or- </p>\\n<p>\\n<em>socketAddress</em>.Size < 8. </p>\\n\"\n  seealso:\n  - type: System.Net.EndPoint\n    commentId: T:System.Net.EndPoint\n  - type: System.Net.SocketAddress\n    commentId: T:System.Net.SocketAddress\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPEndPoint.Create(SocketAddress)\n- uid: System.Net.IPEndPoint.Equals(System.Object)\n  commentId: M:System.Net.IPEndPoint.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.IPEndPoint.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 218\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare with the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is equal to the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPEndPoint.Equals(Object)\n- uid: System.Net.IPEndPoint.GetHashCode\n  commentId: M:System.Net.IPEndPoint.GetHashCode\n  id: GetHashCode\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.IPEndPoint.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 219\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns a hash value for a <xref href=\\\"System.Net.IPEndPoint\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer hash value.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPEndPoint.GetHashCode()\n- uid: System.Net.IPEndPoint.Serialize\n  commentId: M:System.Net.IPEndPoint.Serialize\n  id: Serialize\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: Serialize()\n  fullName: System.Net.IPEndPoint.Serialize()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Serialize\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 220\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Serializes endpoint information into a <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override SocketAddress Serialize()\n    content.vb: Public Overrides Function Serialize As SocketAddress\n    return:\n      type: System.Net.SocketAddress\n      description: \"\\n<p>A <xref href=\\\"System.Net.SocketAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance containing the socket address for the endpoint.</p>\\n\"\n  overridden: System.Net.EndPoint.Serialize\n  seealso:\n  - type: System.Net.EndPoint\n    commentId: T:System.Net.EndPoint\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPEndPoint.Serialize()\n- uid: System.Net.IPEndPoint.ToString\n  commentId: M:System.Net.IPEndPoint.ToString\n  id: ToString\n  parent: System.Net.IPEndPoint\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.IPEndPoint.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 221\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns the IP address and port number of the specified endpoint.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the IP address and the port number of the specified endpoint (for example, 192.168.1.2:80).</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPEndPoint.ToString()\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Net.EndPoint\n  parent: System.Net\n  isExternal: false\n  name: EndPoint\n  fullName: System.Net.EndPoint\n  commentId: T:System.Net.EndPoint\n  nameWithType: EndPoint\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Net.EndPoint.AddressFamily\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.EndPoint.AddressFamily\n  commentId: P:System.Net.EndPoint.AddressFamily\n  nameWithType: EndPoint.AddressFamily\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: Create(SocketAddress)\n  fullName: System.Net.EndPoint.Create(System.Net.SocketAddress)\n  spec.csharp:\n  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n    name: Create\n    fullName: System.Net.EndPoint.Create\n  - name: (\n    fullName: (\n  - uid: System.Net.SocketAddress\n    name: SocketAddress\n    fullName: System.Net.SocketAddress\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)\n    name: Create\n    fullName: System.Net.EndPoint.Create\n  - name: (\n    fullName: (\n  - uid: System.Net.SocketAddress\n    name: SocketAddress\n    fullName: System.Net.SocketAddress\n  - name: )\n    fullName: )\n  commentId: M:System.Net.EndPoint.Create(System.Net.SocketAddress)\n  nameWithType: EndPoint.Create(SocketAddress)\n- uid: System.Net.SocketAddress\n  parent: System.Net\n  isExternal: false\n  name: SocketAddress\n  fullName: System.Net.SocketAddress\n  commentId: T:System.Net.SocketAddress\n  nameWithType: SocketAddress\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Net.EndPoint.Serialize\n  parent: System.Net.EndPoint\n  isExternal: false\n  name: Serialize()\n  fullName: System.Net.EndPoint.Serialize()\n  spec.csharp:\n  - uid: System.Net.EndPoint.Serialize\n    name: Serialize\n    fullName: System.Net.EndPoint.Serialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Net.EndPoint.Serialize\n    name: Serialize\n    fullName: System.Net.EndPoint.Serialize\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Net.EndPoint.Serialize\n  nameWithType: EndPoint.Serialize()\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}