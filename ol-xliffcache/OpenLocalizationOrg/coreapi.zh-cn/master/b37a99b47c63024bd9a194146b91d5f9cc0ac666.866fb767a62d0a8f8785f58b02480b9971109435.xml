{"nodes":[{"pos":[2236,2250],"content":"DictionaryBase","needQuote":true,"nodes":[{"content":"DictionaryBase","pos":[0,14]}]},{"pos":[4393,4409],"content":"DictionaryBase()","needQuote":true,"nodes":[{"content":"DictionaryBase()","pos":[0,16]}]},{"pos":[5410,5415],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[6752,6762],"content":"Dictionary","needQuote":true,"nodes":[{"content":"Dictionary","pos":[0,10]}]},{"pos":[8199,8213],"content":"InnerHashtable","needQuote":true,"nodes":[{"content":"InnerHashtable","pos":[0,14]}]},{"pos":[9768,9794],"content":"ICollection.IsSynchronized","needQuote":true,"nodes":[{"content":"ICollection.IsSynchronized","pos":[0,26]}]},{"pos":[11974,11994],"content":"ICollection.SyncRoot","needQuote":true,"nodes":[{"content":"ICollection.SyncRoot","pos":[0,20]}]},{"pos":[14037,14060],"content":"IDictionary.IsFixedSize","needQuote":true,"nodes":[{"content":"IDictionary.IsFixedSize","pos":[0,23]}]},{"pos":[15884,15906],"content":"IDictionary.IsReadOnly","needQuote":true,"nodes":[{"content":"IDictionary.IsReadOnly","pos":[0,22]}]},{"pos":[17740,17764],"content":"IDictionary.Item[Object]","needQuote":true,"nodes":[{"content":"IDictionary.Item[Object]","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key whose value to get or set.&lt;/p&gt;\\n","pos":[18651,18696],"source":"\\n<p>The key whose value to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The value associated with the specified key.","pos":[18756,18805],"source":"\\n<p>The value associated with the specified key."},{"content":"If the specified key is not found, attempting to get it returns &lt;strong&gt;null&lt;/strong&gt;, and attempting to set it creates a new element using the specified key.&lt;/p&gt;\\n","pos":[18806,18970],"source":" If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[19089,19134],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[19135,19141],"source":" </p>\\n"},{"pos":[20462,20478],"content":"IDictionary.Keys","needQuote":true,"nodes":[{"content":"IDictionary.Keys","pos":[0,16]}]},{"pos":[22545,22563],"content":"IDictionary.Values","needQuote":true,"nodes":[{"content":"IDictionary.Values","pos":[0,18]}]},{"pos":[24538,24545],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[25652,25672],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The zero-based index in &lt;em&gt;array&lt;/em&gt; at which copying begins.","pos":[27142,27210],"source":"\\n<p>The zero-based index in <em>array</em> at which copying begins."},{"content":"&lt;/p&gt;\\n","pos":[27211,27217],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;array&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[27336,27383],"source":"\\n<p>\\n<em>array</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[27384,27390],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is less than zero.","pos":[27507,27547],"source":"\\n<p>\\n<em>index</em> is less than zero."},{"content":"&lt;/p&gt;\\n","pos":[27548,27554],"source":" </p>\\n"},{"pos":[28958,28973],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[30730,30739],"content":"OnClear()","needQuote":true,"nodes":[{"content":"OnClear()","pos":[0,9]}]},{"pos":[32162,32179],"content":"OnClearComplete()","needQuote":true,"nodes":[{"content":"OnClearComplete()","pos":[0,17]}]},{"pos":[33698,33719],"content":"OnGet(Object, Object)","needQuote":true,"nodes":[{"content":"OnGet(Object, Object)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The key of the element to get.","pos":[34644,34679],"source":"\\n<p>The key of the element to get."},{"content":"&lt;/p&gt;\\n","pos":[34680,34686],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The current value of the element associated with &lt;em&gt;key&lt;/em&gt;.","pos":[34757,34824],"source":"\\n<p>The current value of the element associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[34825,34831],"source":" </p>\\n"},{"pos":[35471,35495],"content":"OnInsert(Object, Object)","needQuote":true,"nodes":[{"content":"OnInsert(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key of the element to insert.","pos":[36421,36459],"source":"\\n<p>The key of the element to insert."},{"content":"&lt;/p&gt;\\n","pos":[36460,36466],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to insert.","pos":[36530,36570],"source":"\\n<p>The value of the element to insert."},{"content":"&lt;/p&gt;\\n","pos":[36571,36577],"source":" </p>\\n"},{"pos":[37606,37638],"content":"OnInsertComplete(Object, Object)","needQuote":true,"nodes":[{"content":"OnInsertComplete(Object, Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The key of the element to insert.","pos":[38595,38633],"source":"\\n<p>The key of the element to insert."},{"content":"&lt;/p&gt;\\n","pos":[38634,38640],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to insert.","pos":[38704,38744],"source":"\\n<p>The value of the element to insert."},{"content":"&lt;/p&gt;\\n","pos":[38745,38751],"source":" </p>\\n"},{"pos":[39589,39613],"content":"OnRemove(Object, Object)","needQuote":true,"nodes":[{"content":"OnRemove(Object, Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.","pos":[40535,40573],"source":"\\n<p>The key of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[40574,40580],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to remove.","pos":[40644,40684],"source":"\\n<p>The value of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[40685,40691],"source":" </p>\\n"},{"pos":[41463,41495],"content":"OnRemoveComplete(Object, Object)","needQuote":true,"nodes":[{"content":"OnRemoveComplete(Object, Object)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.","pos":[42448,42486],"source":"\\n<p>The key of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[42487,42493],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to remove.","pos":[42557,42597],"source":"\\n<p>The value of the element to remove."},{"content":"&lt;/p&gt;\\n","pos":[42598,42604],"source":" </p>\\n"},{"pos":[43393,43422],"content":"OnSet(Object, Object, Object)","needQuote":true,"nodes":[{"content":"OnSet(Object, Object, Object)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The key of the element to locate.","pos":[44384,44422],"source":"\\n<p>The key of the element to locate."},{"content":"&lt;/p&gt;\\n","pos":[44423,44429],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The old value of the element associated with &lt;em&gt;key&lt;/em&gt;.","pos":[44496,44559],"source":"\\n<p>The old value of the element associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[44560,44566],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element associated with &lt;em&gt;key&lt;/em&gt;.","pos":[44633,44696],"source":"\\n<p>The new value of the element associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[44697,44703],"source":" </p>\\n"},{"pos":[45770,45807],"content":"OnSetComplete(Object, Object, Object)","needQuote":true,"nodes":[{"content":"OnSetComplete(Object, Object, Object)","pos":[0,37]}]},{"content":"\\n&lt;p&gt;The key of the element to locate.","pos":[46800,46838],"source":"\\n<p>The key of the element to locate."},{"content":"&lt;/p&gt;\\n","pos":[46839,46845],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The old value of the element associated with &lt;em&gt;key&lt;/em&gt;.","pos":[46912,46975],"source":"\\n<p>The old value of the element associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[46976,46982],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The new value of the element associated with &lt;em&gt;key&lt;/em&gt;.","pos":[47049,47112],"source":"\\n<p>The new value of the element associated with <em>key</em>."},{"content":"&lt;/p&gt;\\n","pos":[47113,47119],"source":" </p>\\n"},{"pos":[47968,47994],"content":"OnValidate(Object, Object)","needQuote":true,"nodes":[{"content":"OnValidate(Object, Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The key of the element to validate.","pos":[48846,48886],"source":"\\n<p>The key of the element to validate."},{"content":"&lt;/p&gt;\\n","pos":[48887,48893],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to validate.","pos":[48957,48999],"source":"\\n<p>The value of the element to validate."},{"content":"&lt;/p&gt;\\n","pos":[49000,49006],"source":" </p>\\n"},{"pos":[49914,49945],"content":"IDictionary.Add(Object, Object)","needQuote":true,"nodes":[{"content":"IDictionary.Add(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The key of the element to add.&lt;/p&gt;\\n","pos":[50915,50956],"source":"\\n<p>The key of the element to add.</p>\\n"},{"content":"\\n&lt;p&gt;The value of the element to add.&lt;/p&gt;\\n","pos":[51020,51063],"source":"\\n<p>The value of the element to add.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[51182,51227],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[51228,51234],"source":" </p>\\n"},{"pos":[52930,52958],"content":"IDictionary.Contains(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Contains(Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[54436,54481],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[54482,54488],"source":" </p>\\n"},{"pos":[55112,55138],"content":"IDictionary.Remove(Object)","needQuote":true,"nodes":[{"content":"IDictionary.Remove(Object)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The key of the element to remove.&lt;/p&gt;\\n","pos":[56071,56115],"source":"\\n<p>The key of the element to remove.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;key&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[56234,56279],"source":"\\n<p>\\n<em>key</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[56280,56286],"source":" </p>\\n"},{"pos":[57543,57570],"content":"IEnumerable.GetEnumerator()","needQuote":true,"nodes":[{"content":"IEnumerable.GetEnumerator()","pos":[0,27]}]},{"pos":[59347,59365],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[59532,59538],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[59712,59723],"content":"IDictionary","needQuote":true,"nodes":[{"content":"IDictionary","pos":[0,11]}]},{"pos":[59936,59947],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[60160,60171],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[60370,60380],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[60475,60483],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60552,60553],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60580,60581],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60651,60659],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60728,60729],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60756,60757],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60940,60954],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[61073,61079],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61146,61147],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61197,61203],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61263,61264],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61347,61353],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61420,61421],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61471,61477],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61537,61538],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61752,61774],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61922,61928],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61995,61996],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62046,62052],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62113,62114]},{"pos":[62169,62175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62235,62236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62333,62339],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62406,62407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62457,62463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62524,62525]},{"pos":[62580,62586],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62646,62647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62892,62923],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[63089,63104],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63180,63181],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63231,63237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63298,63299]},{"pos":[63354,63360],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63420,63421],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63527,63542],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63618,63619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63669,63675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63736,63737]},{"pos":[63792,63798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63858,63859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64089,64102],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[64203,64214],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64286,64287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64314,64315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64388,64399],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64471,64472],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64499,64500],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64675,64684],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[64777,64784],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64852,64853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64880,64881],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64950,64957],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[65025,65026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65053,65054],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65229,65246],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[65355,65370],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65446,65447],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65474,65475],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65552,65567],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65643,65644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65671,65672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65967,65980],"content":"AsQueryable()","needQuote":true,"nodes":[{"content":"AsQueryable()","pos":[0,13]}]},{"pos":[66097,66108],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[66167,66168],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66195,66196],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66277,66288],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[66347,66348],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66375,66376],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66731,66743],"content":"AsParallel()","needQuote":true,"nodes":[{"content":"AsParallel()","pos":[0,12]}]},{"pos":[66876,66886],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[66953,66954],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66981,66982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67071,67081],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[67148,67149],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67176,67177],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67518,67533],"content":"Cast<TResult>()","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;()","pos":[0,15],"source":"Cast<TResult>()"}]},{"pos":[67737,67750],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[67812,67813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67840,67841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67919,67935],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[68000,68001],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68028,68029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68407,68424],"content":"OfType<TResult>()","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;()","pos":[0,17],"source":"OfType<TResult>()"}]},{"pos":[68636,68651],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[68715,68716],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68743,68744],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68824,68842],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[68909,68910],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68937,68938],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69173,69179],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[69344,69368],"content":"AsQueryable(IEnumerable)","needQuote":true,"nodes":[{"content":"AsQueryable(IEnumerable)","pos":[0,24]}]},{"pos":[69547,69558],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[69617,69618],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69685,69696],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[69773,69774],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69887,69898],"content":"AsQueryable","needQuote":true,"nodes":[{"content":"AsQueryable","pos":[0,11]}]},{"pos":[69957,69958],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70025,70036],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[70113,70114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70342,70351],"content":"Queryable","needQuote":true,"nodes":[{"content":"Queryable","pos":[0,9]}]},{"pos":[70557,70580],"content":"AsParallel(IEnumerable)","needQuote":true,"nodes":[{"content":"AsParallel(IEnumerable)","pos":[0,23]}]},{"pos":[70775,70785],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[70852,70853],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70920,70931],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[71008,71009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71130,71140],"content":"AsParallel","needQuote":true,"nodes":[{"content":"AsParallel","pos":[0,10]}]},{"pos":[71207,71208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[71275,71286],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[71363,71364],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71617,71635],"content":"ParallelEnumerable","needQuote":true,"nodes":[{"content":"ParallelEnumerable","pos":[0,18]}]},{"pos":[71857,71883],"content":"Cast<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;(IEnumerable)","pos":[0,26],"source":"Cast<TResult>(IEnumerable)"}]},{"pos":[72190,72203],"content":"Cast<TResult>","needQuote":true,"nodes":[{"content":"Cast&lt;TResult&gt;","pos":[0,13],"source":"Cast<TResult>"}]},{"pos":[72265,72266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72333,72344],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72421,72422],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[72532,72548],"content":"Cast(Of TResult)","needQuote":true,"nodes":[{"content":"Cast(Of TResult)","pos":[0,16]}]},{"pos":[72613,72614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[72681,72692],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[72769,72770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73059,73069],"content":"Enumerable","needQuote":true,"nodes":[{"content":"Enumerable","pos":[0,10]}]},{"pos":[73269,73297],"content":"OfType<TResult>(IEnumerable)","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;(IEnumerable)","pos":[0,28],"source":"OfType<TResult>(IEnumerable)"}]},{"pos":[73612,73627],"content":"OfType<TResult>","needQuote":true,"nodes":[{"content":"OfType&lt;TResult&gt;","pos":[0,15],"source":"OfType<TResult>"}]},{"pos":[73691,73692],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[73759,73770],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[73847,73848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[73960,73978],"content":"OfType(Of TResult)","needQuote":true,"nodes":[{"content":"OfType(Of TResult)","pos":[0,18]}]},{"pos":[74045,74046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[74113,74124],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[74201,74202],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[74464,74475],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[74668,74673],"content":"Count","needQuote":true,"nodes":[{"content":"Count","pos":[0,5]}]},{"pos":[74874,74879],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[75048,75057],"content":"Hashtable","needQuote":true,"nodes":[{"content":"Hashtable","pos":[0,9]}]},{"pos":[75291,75305],"content":"IsSynchronized","needQuote":true,"nodes":[{"content":"IsSynchronized","pos":[0,14]}]},{"pos":[75535,75542],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[75740,75748],"content":"SyncRoot","needQuote":true,"nodes":[{"content":"SyncRoot","pos":[0,8]}]},{"pos":[76011,76022],"content":"IsFixedSize","needQuote":true,"nodes":[{"content":"IsFixedSize","pos":[0,11]}]},{"pos":[76293,76303],"content":"IsReadOnly","needQuote":true,"nodes":[{"content":"IsReadOnly","pos":[0,10]}]},{"pos":[76580,76592],"content":"Item[Object]","needQuote":true,"nodes":[{"content":"Item[Object]","pos":[0,12]}]},{"pos":[76831,76835],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"content":"[","pos":[76918,76919]},{"pos":[76972,76978],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"]","pos":[77039,77040]},{"pos":[77141,77145],"content":"Item","needQuote":true,"nodes":[{"content":"Item","pos":[0,4]}]},{"pos":[77227,77228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[77278,77284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[77344,77345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[77624,77628],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[77874,77880],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[78131,78138],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[78261,78266],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[78349,78350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78377,78378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78462,78467],"content":"Clear","needQuote":true,"nodes":[{"content":"Clear","pos":[0,5]}]},{"pos":[78550,78551],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[78578,78579],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[78824,78844],"content":"CopyTo(Array, Int32)","needQuote":true,"nodes":[{"content":"CopyTo(Array, Int32)","pos":[0,20]}]},{"pos":[79022,79028],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[79091,79092],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79141,79146],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[79185,79186]},{"pos":[79240,79245],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79304,79305],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79417,79423],"content":"CopyTo","needQuote":true,"nodes":[{"content":"CopyTo","pos":[0,6]}]},{"pos":[79486,79487],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[79536,79541],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"content":",","pos":[79580,79581]},{"pos":[79635,79640],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[79699,79700],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[79911,79916],"content":"Array","needQuote":true,"nodes":[{"content":"Array","pos":[0,5]}]},{"pos":[80112,80127],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[80266,80279],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[80370,80371],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80398,80399],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80491,80504],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[80595,80596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[80623,80624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[80850,80871],"content":"IDictionaryEnumerator","needQuote":true,"nodes":[{"content":"IDictionaryEnumerator","pos":[0,21]}]},{"pos":[81158,81177],"content":"Add(Object, Object)","needQuote":true,"nodes":[{"content":"Add(Object, Object)","pos":[0,19]}]},{"pos":[81353,81356],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[81437,81438],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81488,81494],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81555,81556]},{"pos":[81611,81617],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[81677,81678],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[81789,81792],"content":"Add","needQuote":true,"nodes":[{"content":"Add","pos":[0,3]}]},{"pos":[81873,81874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[81924,81930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[81991,81992]},{"pos":[82047,82053],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82113,82114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82388,82404],"content":"Contains(Object)","needQuote":true,"nodes":[{"content":"Contains(Object)","pos":[0,16]}]},{"pos":[82561,82569],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[82655,82656],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[82706,82712],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[82772,82773],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[82875,82883],"content":"Contains","needQuote":true,"nodes":[{"content":"Contains","pos":[0,8]}]},{"pos":[82969,82970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83020,83026],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83086,83087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83347,83361],"content":"Remove(Object)","needQuote":true,"nodes":[{"content":"Remove(Object)","pos":[0,14]}]},{"pos":[83514,83520],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[83604,83605],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83655,83661],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[83721,83722],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[83822,83828],"content":"Remove","needQuote":true,"nodes":[{"content":"Remove","pos":[0,6]}]},{"pos":[83912,83913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[83963,83969],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[84029,84030],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84279,84294],"content":"GetEnumerator()","needQuote":true,"nodes":[{"content":"GetEnumerator()","pos":[0,15]}]},{"pos":[84433,84446],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[84516,84517],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84544,84545],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84637,84650],"content":"GetEnumerator","needQuote":true,"nodes":[{"content":"GetEnumerator","pos":[0,13]}]},{"pos":[84720,84721],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[84748,84749],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[84965,84976],"content":"IEnumerator","needQuote":true,"nodes":[{"content":"IEnumerator","pos":[0,11]}]},{"pos":[85158,85179],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[85384,85405],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[85599,85626],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[85845,85862],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[86037,86057],"content":"InvalidCastException","needQuote":true,"nodes":[{"content":"InvalidCastException","pos":[0,20]}]}],"content":"items:\n- uid: System.Collections.DictionaryBase\n  commentId: T:System.Collections.DictionaryBase\n  id: DictionaryBase\n  parent: System.Collections\n  children:\n  - System.Collections.DictionaryBase.#ctor\n  - System.Collections.DictionaryBase.Clear\n  - System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)\n  - System.Collections.DictionaryBase.Count\n  - System.Collections.DictionaryBase.Dictionary\n  - System.Collections.DictionaryBase.GetEnumerator\n  - System.Collections.DictionaryBase.InnerHashtable\n  - System.Collections.DictionaryBase.OnClear\n  - System.Collections.DictionaryBase.OnClearComplete\n  - System.Collections.DictionaryBase.OnGet(System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n  - System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n  - System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized\n  - System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Keys\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)\n  - System.Collections.DictionaryBase.System#Collections#IDictionary#Values\n  - System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator\n  langs:\n  - csharp\n  - vb\n  name: DictionaryBase\n  fullName: System.Collections.DictionaryBase\n  type: Class\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DictionaryBase\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 17\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection of key/value pairs.</p>\\n\"\n  syntax:\n    content: 'public abstract class DictionaryBase : IDictionary, ICollection, IEnumerable'\n    content.vb: >-\n      Public MustInherit Class DictionaryBase\n          Implements IDictionary, ICollection, IEnumerable\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Collections.IDictionary\n    commentId: T:System.Collections.IDictionary\n  - type: System.Collections.Generic\n    commentId: N:System.Collections.Generic\n  inheritance:\n  - System.Object\n  implements:\n  - System.Collections.IDictionary\n  - System.Collections.ICollection\n  - System.Collections.IEnumerable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: DictionaryBase\n  extensionMethods:\n  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n- uid: System.Collections.DictionaryBase.#ctor\n  commentId: M:System.Collections.DictionaryBase.#ctor\n  id: '#ctor'\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: DictionaryBase()\n  fullName: System.Collections.DictionaryBase.DictionaryBase()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs\n    startLine: 114\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected DictionaryBase()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: DictionaryBase.DictionaryBase()\n- uid: System.Collections.DictionaryBase.Count\n  commentId: P:System.Collections.DictionaryBase.Count\n  id: Count\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: Count\n  fullName: System.Collections.DictionaryBase.Count\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Count\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 36\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the number of elements contained in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public int Count { get; }\n    content.vb: Public ReadOnly Property Count As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of elements contained in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  implements:\n  - System.Collections.ICollection.Count\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DictionaryBase.Count\n- uid: System.Collections.DictionaryBase.Dictionary\n  commentId: P:System.Collections.DictionaryBase.Dictionary\n  id: Dictionary\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: Dictionary\n  fullName: System.Collections.DictionaryBase.Dictionary\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dictionary\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 31\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the list of elements contained in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected IDictionary Dictionary { get; }\n    content.vb: Protected ReadOnly Property Dictionary As IDictionary\n    parameters: []\n    return:\n      type: System.Collections.IDictionary\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance itself.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: DictionaryBase.Dictionary\n- uid: System.Collections.DictionaryBase.InnerHashtable\n  commentId: P:System.Collections.DictionaryBase.InnerHashtable\n  id: InnerHashtable\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: InnerHashtable\n  fullName: System.Collections.DictionaryBase.InnerHashtable\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InnerHashtable\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 21\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the list of elements contained in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected Hashtable InnerHashtable { get; }\n    content.vb: Protected ReadOnly Property InnerHashtable As Hashtable\n    parameters: []\n    return:\n      type: System.Collections.Hashtable\n      description: \"\\n<p>A <xref href=\\\"System.Collections.Hashtable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance itself.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - get\n  modifiers.vb:\n  - Protected\n  - ReadOnly\n  nameWithType: DictionaryBase.InnerHashtable\n- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized\n  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized\n  id: System#Collections#ICollection#IsSynchronized\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.IsSynchronized\n  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.IsSynchronized\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 52\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether access to a <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe).</p>\\n\"\n  syntax:\n    content: bool ICollection.IsSynchronized { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if access to the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  - type: System.Collections.ICollection.SyncRoot\n    commentId: P:System.Collections.ICollection.SyncRoot\n  implements:\n  - System.Collections.ICollection.IsSynchronized\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.IsSynchronized\n  nameWithType: DictionaryBase.ICollection.IsSynchronized\n  nameWithType.vb: DictionaryBase.System.Collections.ICollection.IsSynchronized\n- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot\n  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot\n  id: System#Collections#ICollection#SyncRoot\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: ICollection.SyncRoot\n  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.ICollection.SyncRoot\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 62\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an object that can be used to synchronize access to a <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: object ICollection.SyncRoot { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An object that can be used to synchronize access to the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection.IsSynchronized\n    commentId: P:System.Collections.ICollection.IsSynchronized\n  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)\n  implements:\n  - System.Collections.ICollection.SyncRoot\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.ICollection.SyncRoot\n  nameWithType: DictionaryBase.ICollection.SyncRoot\n  nameWithType.vb: DictionaryBase.System.Collections.ICollection.SyncRoot\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize\n  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize\n  id: System#Collections#IDictionary#IsFixedSize\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsFixedSize\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsFixedSize\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 47\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether a <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size.</p>\\n\"\n  syntax:\n    content: bool IDictionary.IsFixedSize { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsFixedSize\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsFixedSize\n  nameWithType: DictionaryBase.IDictionary.IsFixedSize\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.IsFixedSize\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly\n  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly\n  id: System#Collections#IDictionary#IsReadOnly\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.IsReadOnly\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.IsReadOnly\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 42\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets a value indicating whether a <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only.</p>\\n\"\n  syntax:\n    content: bool IDictionary.IsReadOnly { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\\n\"\n  implements:\n  - System.Collections.IDictionary.IsReadOnly\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.IsReadOnly\n  nameWithType: DictionaryBase.IDictionary.IsReadOnly\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)\n  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)\n  id: System#Collections#IDictionary#Item(System.Object)\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Item[Object]\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item[System.Object]\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.this[]\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 77\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets or sets the value associated with the specified key.</p>\\n\"\n  syntax:\n    content: object IDictionary.this[object key] { get; set; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key whose value to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The property is set and the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Add(System.Object,System.Object)\n    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  implements:\n  - System.Collections.IDictionary.Item(System.Object)\n  modifiers.csharp:\n  - get\n  - set\n  fullName.vb: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(System.Object)\n  name.vb: System.Collections.IDictionary.Item(Object)\n  nameWithType: DictionaryBase.IDictionary.Item[Object]\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Item(Object)\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys\n  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys\n  id: System#Collections#IDictionary#Keys\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Keys\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Keys\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 57\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: ICollection IDictionary.Keys { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the keys in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.IDictionary.Values\n    commentId: P:System.Collections.IDictionary.Values\n  implements:\n  - System.Collections.IDictionary.Keys\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.Keys\n  nameWithType: DictionaryBase.IDictionary.Keys\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Keys\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values\n  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values\n  id: System#Collections#IDictionary#Values\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Values\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Values\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 67\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: ICollection IDictionary.Values { get; }\n    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object containing the values in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Collections.ICollection\n    commentId: T:System.Collections.ICollection\n  - type: System.Collections.IDictionary.Keys\n    commentId: P:System.Collections.IDictionary.Keys\n  implements:\n  - System.Collections.IDictionary.Values\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  name.vb: System.Collections.IDictionary.Values\n  nameWithType: DictionaryBase.IDictionary.Values\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Values\n- uid: System.Collections.DictionaryBase.Clear\n  commentId: M:System.Collections.DictionaryBase.Clear\n  id: Clear\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Collections.DictionaryBase.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 137\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Clears the contents of the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public void Clear()\n    content.vb: Public Sub Clear\n  implements:\n  - System.Collections.IDictionary.Clear\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryBase.Clear()\n- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)\n  commentId: M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)\n  id: CopyTo(System.Array,System.Int32)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.DictionaryBase.CopyTo(System.Array, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CopyTo\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 72\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Copies the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> elements to a one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> at the specified index.</p>\\n\"\n  syntax:\n    content: public void CopyTo(Array array, int index)\n    content.vb: Public Sub CopyTo(array As Array, index As Integer)\n    parameters:\n    - id: array\n      type: System.Array\n      description: \"\\n<p>The one-dimensional <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is the destination of the <xref href=\\\"System.Collections.DictionaryEntry\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects copied from the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance. The <xref href=\\\"System.Array\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must have zero-based indexing. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>array</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is less than zero. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>array</em> is multidimensional.</p>\\n<p>-or- </p>\\n<p>The number of elements in the source <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\\n\"\n  - type: System.InvalidCastException\n    commentId: T:System.InvalidCastException\n    description: \"\\n<p>The type of the source <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\\n\"\n  seealso:\n  - type: System.Array\n    commentId: T:System.Array\n  - type: System.Collections.DictionaryEntry\n    commentId: T:System.Collections.DictionaryEntry\n  - type: System.Collections.DictionaryBase.GetEnumerator\n    commentId: M:System.Collections.DictionaryBase.GetEnumerator\n  implements:\n  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryBase.CopyTo(Array, Int32)\n- uid: System.Collections.DictionaryBase.GetEnumerator\n  commentId: M:System.Collections.DictionaryBase.GetEnumerator\n  id: GetEnumerator\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: GetEnumerator()\n  fullName: System.Collections.DictionaryBase.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetEnumerator\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 165\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public IDictionaryEnumerator GetEnumerator()\n    content.vb: Public Function GetEnumerator As IDictionaryEnumerator\n    return:\n      type: System.Collections.IDictionaryEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IDictionaryEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IDictionary.GetEnumerator\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DictionaryBase.GetEnumerator()\n- uid: System.Collections.DictionaryBase.OnClear\n  commentId: M:System.Collections.DictionaryBase.OnClear\n  id: OnClear\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnClear()\n  fullName: System.Collections.DictionaryBase.OnClear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnClear\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 188\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before clearing the contents of the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnClear()\n    content.vb: Protected Overridable Sub OnClear\n  seealso:\n  - type: System.Collections.DictionaryBase.OnClearComplete\n    commentId: M:System.Collections.DictionaryBase.OnClearComplete\n  - type: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnClear()\n- uid: System.Collections.DictionaryBase.OnClearComplete\n  commentId: M:System.Collections.DictionaryBase.OnClearComplete\n  id: OnClearComplete\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnClearComplete()\n  fullName: System.Collections.DictionaryBase.OnClearComplete()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnClearComplete\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 208\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after clearing the contents of the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnClearComplete()\n    content.vb: Protected Overridable Sub OnClearComplete\n  seealso:\n  - type: System.Collections.DictionaryBase.OnClear\n    commentId: M:System.Collections.DictionaryBase.OnClear\n  - type: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnClearComplete()\n- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)\n  id: OnGet(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnGet(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnGet(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnGet\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 175\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Gets the element with the specified key and value in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual object OnGet(object key, object currentValue)\n    content.vb: Protected Overridable Function OnGet(key As Object, currentValue As Object) As Object\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to get. </p>\\n\"\n    - id: currentValue\n      type: System.Object\n      description: \"\\n<p>The current value of the element associated with <em>key</em>. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> containing the element with the specified key and value.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnGet(Object, Object)\n- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  id: OnInsert(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnInsert(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnInsert(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnInsert\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 184\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before inserting a new element into the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnInsert(object key, object value)\n    content.vb: Protected Overridable Sub OnInsert(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to insert. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to insert. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnInsert(Object, Object)\n- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n  id: OnInsertComplete(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnInsertComplete(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnInsertComplete(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnInsertComplete\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 204\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after inserting a new element into the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnInsertComplete(object key, object value)\n    content.vb: Protected Overridable Sub OnInsertComplete(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to insert. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to insert. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnInsertComplete(Object, Object)\n- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n  id: OnRemove(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnRemove(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnRemove(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnRemove\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 192\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before removing an element from the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnRemove(object key, object value)\n    content.vb: Protected Overridable Sub OnRemove(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to remove. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnClear\n    commentId: M:System.Collections.DictionaryBase.OnClear\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnRemove(Object, Object)\n- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)\n  id: OnRemoveComplete(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnRemoveComplete(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnRemoveComplete(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnRemoveComplete\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 212\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after removing an element from the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnRemoveComplete(object key, object value)\n    content.vb: Protected Overridable Sub OnRemoveComplete(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to remove. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnClearComplete\n    commentId: M:System.Collections.DictionaryBase.OnClearComplete\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnRemoveComplete(Object, Object)\n- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  id: OnSet(System.Object,System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnSet(Object, Object, Object)\n  fullName: System.Collections.DictionaryBase.OnSet(System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnSet\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 180\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes before setting a value in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnSet(object key, object oldValue, object newValue)\n    content.vb: Protected Overridable Sub OnSet(key As Object, oldValue As Object, newValue As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to locate. </p>\\n\"\n    - id: oldValue\n      type: System.Object\n      description: \"\\n<p>The old value of the element associated with <em>key</em>. </p>\\n\"\n    - id: newValue\n      type: System.Object\n      description: \"\\n<p>The new value of the element associated with <em>key</em>. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnSet(Object, Object, Object)\n- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)\n  id: OnSetComplete(System.Object,System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnSetComplete(Object, Object, Object)\n  fullName: System.Collections.DictionaryBase.OnSetComplete(System.Object, System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnSetComplete\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 200\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes after setting a value in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: protected virtual void OnSetComplete(object key, object oldValue, object newValue)\n    content.vb: Protected Overridable Sub OnSetComplete(key As Object, oldValue As Object, newValue As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to locate. </p>\\n\"\n    - id: oldValue\n      type: System.Object\n      description: \"\\n<p>The old value of the element associated with <em>key</em>. </p>\\n\"\n    - id: newValue\n      type: System.Object\n      description: \"\\n<p>The new value of the element associated with <em>key</em>. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnSetComplete(Object, Object, Object)\n- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)\n  id: OnValidate(System.Object,System.Object)\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: OnValidate(Object, Object)\n  fullName: System.Collections.DictionaryBase.OnValidate(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: OnValidate\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 196\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Performs additional custom processes when validating the element with the specified key and value.</p>\\n\"\n  syntax:\n    content: protected virtual void OnValidate(object key, object value)\n    content.vb: Protected Overridable Sub OnValidate(key As Object, value As Object)\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to validate. </p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to validate. </p>\\n\"\n  seealso:\n  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)\n  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: DictionaryBase.OnValidate(Object, Object)\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)\n  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)\n  id: System#Collections#IDictionary#Add(System.Object,System.Object)\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Add(Object, Object)\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Add\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 121\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Adds an element with the specified key and value into the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IDictionary.Add(object key, object value)\n    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to add.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value of the element to add.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>An element with the same key already exists in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Remove(System.Object)\n    commentId: M:System.Collections.IDictionary.Remove(System.Object)\n  - type: System.Collections.IDictionary.Item(System.Object)\n    commentId: P:System.Collections.IDictionary.Item(System.Object)\n  - type: System.Collections.IDictionary.Add(System.Object,System.Object)\n    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  implements:\n  - System.Collections.IDictionary.Add(System.Object,System.Object)\n  name.vb: System.Collections.IDictionary.Add(Object, Object)\n  nameWithType: DictionaryBase.IDictionary.Add(Object, Object)\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Add(Object, Object)\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)\n  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)\n  id: System#Collections#IDictionary#Contains(System.Object)\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Contains(Object)\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Contains\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 116\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: bool IDictionary.Contains(object key)\n    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  implements:\n  - System.Collections.IDictionary.Contains(System.Object)\n  name.vb: System.Collections.IDictionary.Contains(Object)\n  nameWithType: DictionaryBase.IDictionary.Contains(Object)\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Contains(Object)\n- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)\n  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)\n  id: System#Collections#IDictionary#Remove(System.Object)\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IDictionary.Remove(Object)\n  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IDictionary.Remove\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 144\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Removes the element with the specified key from the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: void IDictionary.Remove(object key)\n    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove\n    parameters:\n    - id: key\n      type: System.Object\n      description: \"\\n<p>The key of the element to remove.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>key</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>The <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is read-only.</p>\\n<p>-or- </p>\\n<p>The <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has a fixed size. </p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionary.Add(System.Object,System.Object)\n    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n  - type: System.Collections.IDictionary.Remove(System.Object)\n    commentId: M:System.Collections.IDictionary.Remove(System.Object)\n  implements:\n  - System.Collections.IDictionary.Remove(System.Object)\n  name.vb: System.Collections.IDictionary.Remove(Object)\n  nameWithType: DictionaryBase.IDictionary.Remove(Object)\n  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Remove(Object)\n- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator\n  commentId: M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator\n  id: System#Collections#IEnumerable#GetEnumerator\n  isEii: true\n  parent: System.Collections.DictionaryBase\n  langs:\n  - csharp\n  - vb\n  name: IEnumerable.GetEnumerator()\n  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()\n  type: Method\n  source:\n    remote:\n      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Collections.IEnumerable.GetEnumerator\n    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs\n    startLine: 170\n  assemblies:\n  - System.Collections.NonGeneric\n  namespace: System.Collections\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that iterates through the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: IEnumerator IEnumerable.GetEnumerator()\n    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator\n    return:\n      type: System.Collections.IEnumerator\n      description: \"\\n<p>An <xref href=\\\"System.Collections.IEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the <xref href=\\\"System.Collections.DictionaryBase\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Collections.IDictionaryEnumerator\n    commentId: T:System.Collections.IDictionaryEnumerator\n  - type: System.Collections.IEnumerator\n    commentId: T:System.Collections.IEnumerator\n  implements:\n  - System.Collections.IEnumerable.GetEnumerator\n  name.vb: System.Collections.IEnumerable.GetEnumerator()\n  nameWithType: DictionaryBase.IEnumerable.GetEnumerator()\n  nameWithType.vb: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()\nreferences:\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Collections.IDictionary\n  parent: System.Collections\n  isExternal: false\n  name: IDictionary\n  fullName: System.Collections.IDictionary\n  nameWithType: IDictionary\n  commentId: T:System.Collections.IDictionary\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections.IEnumerable\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerable\n  fullName: System.Collections.IEnumerable\n  nameWithType: IEnumerable\n  commentId: T:System.Collections.IEnumerable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable\n  parent: System.Linq.Queryable\n  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  name: AsQueryable()\n  fullName: System.Linq.Queryable.AsQueryable()\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable()\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel\n  parent: System.Linq.ParallelEnumerable\n  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  name: AsParallel()\n  fullName: System.Linq.ParallelEnumerable.AsParallel()\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel()\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  name: Cast<TResult>()\n  fullName: System.Linq.Enumerable.Cast<TResult>()\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()\n  name.vb: Cast(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>()\n  nameWithType.vb: Enumerable.Cast(Of TResult)()\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1\n  parent: System.Linq.Enumerable\n  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  name: OfType<TResult>()\n  fullName: System.Linq.Enumerable.OfType<TResult>()\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()\n  name.vb: OfType(Of TResult)()\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>()\n  nameWithType.vb: Enumerable.OfType(Of TResult)()\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsQueryable(IEnumerable)\n  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n    name: AsQueryable\n    fullName: System.Linq.Queryable.AsQueryable\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Queryable.AsQueryable(IEnumerable)\n  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)\n- uid: System.Linq.Queryable\n  parent: System.Linq\n  isExternal: false\n  name: Queryable\n  fullName: System.Linq.Queryable\n  nameWithType: Queryable\n  commentId: T:System.Linq.Queryable\n- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  isExternal: true\n  name: AsParallel(IEnumerable)\n  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n    name: AsParallel\n    fullName: System.Linq.ParallelEnumerable.AsParallel\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)\n  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\n- uid: System.Linq.ParallelEnumerable\n  parent: System.Linq\n  isExternal: false\n  name: ParallelEnumerable\n  fullName: System.Linq.ParallelEnumerable\n  nameWithType: ParallelEnumerable\n  commentId: T:System.Linq.ParallelEnumerable\n- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: Cast<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)\n  name.vb: Cast(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast<TResult>\n    fullName: System.Linq.Enumerable.Cast<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n    name: Cast(Of TResult)\n    fullName: System.Linq.Enumerable.Cast(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.Cast<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)\n- uid: System.Linq.Enumerable\n  parent: System.Linq\n  isExternal: false\n  name: Enumerable\n  fullName: System.Linq.Enumerable\n  nameWithType: Enumerable\n  commentId: T:System.Linq.Enumerable\n- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n  isExternal: true\n  name: OfType<TResult>(IEnumerable)\n  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)\n  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)\n  name.vb: OfType(Of TResult)(IEnumerable)\n  spec.csharp:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType<TResult>\n    fullName: System.Linq.Enumerable.OfType<TResult>\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n    name: OfType(Of TResult)\n    fullName: System.Linq.Enumerable.OfType(Of TResult)\n  - name: (\n    fullName: (\n  - uid: System.Collections.IEnumerable\n    name: IEnumerable\n    fullName: System.Collections.IEnumerable\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Enumerable.OfType<TResult>(IEnumerable)\n  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)\n  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  nameWithType: System.Linq\n  commentId: N:System.Linq\n- uid: System.Collections.ICollection.Count\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: Count\n  fullName: System.Collections.ICollection.Count\n  nameWithType: ICollection.Count\n  commentId: P:System.Collections.ICollection.Count\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Collections.Hashtable\n  parent: System.Collections\n  isExternal: false\n  name: Hashtable\n  fullName: System.Collections.Hashtable\n  nameWithType: Hashtable\n  commentId: T:System.Collections.Hashtable\n- uid: System.Collections.ICollection.IsSynchronized\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: IsSynchronized\n  fullName: System.Collections.ICollection.IsSynchronized\n  nameWithType: ICollection.IsSynchronized\n  commentId: P:System.Collections.ICollection.IsSynchronized\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection.SyncRoot\n  parent: System.Collections.ICollection\n  isExternal: false\n  name: SyncRoot\n  fullName: System.Collections.ICollection.SyncRoot\n  nameWithType: ICollection.SyncRoot\n  commentId: P:System.Collections.ICollection.SyncRoot\n- uid: System.Collections.IDictionary.IsFixedSize\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsFixedSize\n  fullName: System.Collections.IDictionary.IsFixedSize\n  nameWithType: IDictionary.IsFixedSize\n  commentId: P:System.Collections.IDictionary.IsFixedSize\n- uid: System.Collections.IDictionary.IsReadOnly\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: IsReadOnly\n  fullName: System.Collections.IDictionary.IsReadOnly\n  nameWithType: IDictionary.IsReadOnly\n  commentId: P:System.Collections.IDictionary.IsReadOnly\n- uid: System.Collections.IDictionary.Item(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Item[Object]\n  fullName: System.Collections.IDictionary.Item[System.Object]\n  fullname.vb: System.Collections.IDictionary.Item(System.Object)\n  name.vb: Item(Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: '['\n    fullName: '['\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ']'\n    fullName: ']'\n  spec.vb:\n  - uid: System.Collections.IDictionary.Item(System.Object)\n    name: Item\n    fullName: System.Collections.IDictionary.Item\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Item[Object]\n  nameWithType.vb: IDictionary.Item(Object)\n  commentId: P:System.Collections.IDictionary.Item(System.Object)\n- uid: System.Collections.IDictionary.Keys\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Keys\n  fullName: System.Collections.IDictionary.Keys\n  nameWithType: IDictionary.Keys\n  commentId: P:System.Collections.IDictionary.Keys\n- uid: System.Collections.IDictionary.Values\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Values\n  fullName: System.Collections.IDictionary.Values\n  nameWithType: IDictionary.Values\n  commentId: P:System.Collections.IDictionary.Values\n- uid: System.Collections.IDictionary.Clear\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Clear()\n  fullName: System.Collections.IDictionary.Clear()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Clear\n    name: Clear\n    fullName: System.Collections.IDictionary.Clear\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Clear()\n  commentId: M:System.Collections.IDictionary.Clear\n- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n  parent: System.Collections.ICollection\n  isExternal: true\n  name: CopyTo(Array, Int32)\n  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)\n  spec.csharp:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n    name: CopyTo\n    fullName: System.Collections.ICollection.CopyTo\n  - name: (\n    fullName: (\n  - uid: System.Array\n    name: Array\n    fullName: System.Array\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICollection.CopyTo(Array, Int32)\n  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)\n- uid: System.Array\n  parent: System\n  isExternal: false\n  name: Array\n  fullName: System.Array\n  nameWithType: Array\n  commentId: T:System.Array\n- uid: System.Collections.IDictionary.GetEnumerator\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: GetEnumerator()\n  fullName: System.Collections.IDictionary.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IDictionary.GetEnumerator\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.GetEnumerator()\n  commentId: M:System.Collections.IDictionary.GetEnumerator\n- uid: System.Collections.IDictionaryEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IDictionaryEnumerator\n  fullName: System.Collections.IDictionaryEnumerator\n  nameWithType: IDictionaryEnumerator\n  commentId: T:System.Collections.IDictionaryEnumerator\n- uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Add(Object, Object)\n  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)\n    name: Add\n    fullName: System.Collections.IDictionary.Add\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Add(Object, Object)\n  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)\n- uid: System.Collections.IDictionary.Contains(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Contains(Object)\n  fullName: System.Collections.IDictionary.Contains(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Contains(System.Object)\n    name: Contains\n    fullName: System.Collections.IDictionary.Contains\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Contains(Object)\n  commentId: M:System.Collections.IDictionary.Contains(System.Object)\n- uid: System.Collections.IDictionary.Remove(System.Object)\n  parent: System.Collections.IDictionary\n  isExternal: true\n  name: Remove(Object)\n  fullName: System.Collections.IDictionary.Remove(System.Object)\n  spec.csharp:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IDictionary.Remove(System.Object)\n    name: Remove\n    fullName: System.Collections.IDictionary.Remove\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: IDictionary.Remove(Object)\n  commentId: M:System.Collections.IDictionary.Remove(System.Object)\n- uid: System.Collections.IEnumerable.GetEnumerator\n  parent: System.Collections.IEnumerable\n  isExternal: false\n  name: GetEnumerator()\n  fullName: System.Collections.IEnumerable.GetEnumerator()\n  spec.csharp:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Collections.IEnumerable.GetEnumerator\n    name: GetEnumerator\n    fullName: System.Collections.IEnumerable.GetEnumerator\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable.GetEnumerator()\n  commentId: M:System.Collections.IEnumerable.GetEnumerator\n- uid: System.Collections.IEnumerator\n  parent: System.Collections\n  isExternal: false\n  name: IEnumerator\n  fullName: System.Collections.IEnumerator\n  nameWithType: IEnumerator\n  commentId: T:System.Collections.IEnumerator\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.InvalidCastException\n  isExternal: false\n  name: InvalidCastException\n  fullName: System.InvalidCastException\n  nameWithType: InvalidCastException\n  commentId: T:System.InvalidCastException\n"}