{"nodes":[{"pos":[487,501],"content":"IQueryProvider","needQuote":true,"nodes":[{"content":"IQueryProvider","pos":[0,14]}]},{"pos":[1762,1785],"content":"CreateQuery(Expression)","needQuote":true,"nodes":[{"content":"CreateQuery(Expression)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;An expression tree that represents a LINQ query.&lt;/p&gt;\\n","pos":[2675,2734],"source":"\\n<p>An expression tree that represents a LINQ query.</p>\\n"},{"pos":[3337,3370],"content":"CreateQuery<TElement>(Expression)","needQuote":true,"nodes":[{"content":"CreateQuery&lt;TElement&gt;(Expression)","pos":[0,33],"source":"CreateQuery<TElement>(Expression)"}]},{"content":"\\n&lt;p&gt;An expression tree that represents a LINQ query.&lt;/p&gt;\\n","pos":[4318,4377],"source":"\\n<p>An expression tree that represents a LINQ query.</p>\\n"},{"pos":[5411,5430],"content":"Execute(Expression)","needQuote":true,"nodes":[{"content":"Execute(Expression)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;An expression tree that represents a LINQ query.&lt;/p&gt;\\n","pos":[6183,6242],"source":"\\n<p>An expression tree that represents a LINQ query.</p>\\n"},{"content":"\\n&lt;p&gt;The value that results from executing the specified query.&lt;/p&gt;\\n","pos":[6302,6371],"source":"\\n<p>The value that results from executing the specified query.</p>\\n"},{"pos":[6719,6747],"content":"Execute<TResult>(Expression)","needQuote":true,"nodes":[{"content":"Execute&lt;TResult&gt;(Expression)","pos":[0,28],"source":"Execute<TResult>(Expression)"}]},{"content":"\\n&lt;p&gt;An expression tree that represents a LINQ query.&lt;/p&gt;\\n","pos":[7547,7606],"source":"\\n<p>An expression tree that represents a LINQ query.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the value that results from executing the query.&lt;/p&gt;\\n","pos":[7666,7737],"source":"\\n<p>The type of the value that results from executing the query.</p>\\n"},{"content":"\\n&lt;p&gt;The value that results from executing the specified query.&lt;/p&gt;\\n","pos":[7795,7864],"source":"\\n<p>The value that results from executing the specified query.</p>\\n"},{"pos":[8192,8203],"content":"System.Linq","needQuote":true,"nodes":[{"content":"System.Linq","pos":[0,11]}]},{"pos":[8387,8397],"content":"Expression","needQuote":true,"nodes":[{"content":"Expression","pos":[0,10]}]},{"pos":[8602,8612],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[8772,8795],"content":"System.Linq.Expressions","needQuote":true,"nodes":[{"content":"System.Linq.Expressions","pos":[0,23]}]},{"pos":[9022,9042],"content":"IQueryable<TElement>","needQuote":true,"nodes":[{"content":"IQueryable&lt;TElement&gt;","pos":[0,20],"source":"IQueryable<TElement>"}]},{"pos":[9233,9243],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[9291,9292],"content":"<","needQuote":true,"nodes":[]},{"pos":[9319,9327],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[9438,9448],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[9497,9500]},{"pos":[9534,9542],"content":"TElement","needQuote":true,"nodes":[{"content":"TElement","pos":[0,8]}]},{"pos":[9576,9577],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9777,9790],"content":"IQueryable<T>","needQuote":true,"nodes":[{"content":"IQueryable&lt;T&gt;","pos":[0,13],"source":"IQueryable<T>"}]},{"pos":[9960,9970],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"pos":[10018,10019],"content":"<","needQuote":true,"nodes":[]},{"pos":[10046,10047],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[10151,10161],"content":"IQueryable","needQuote":true,"nodes":[{"content":"IQueryable","pos":[0,10]}]},{"content":"(Of","pos":[10210,10213]},{"pos":[10247,10248],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[10275,10276],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10465,10471],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10592,10598],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[10712,10719],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[10832,10839],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]}],"content":"items:\n- uid: System.Linq.IQueryProvider\n  commentId: T:System.Linq.IQueryProvider\n  id: IQueryProvider\n  parent: System.Linq\n  children:\n  - System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\n  - System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\n  - System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)\n  - System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\n  langs:\n  - csharp\n  - vb\n  name: IQueryProvider\n  fullName: System.Linq.IQueryProvider\n  type: Interface\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IQueryProvider\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 25\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq\n  summary: \"\\n<p>Defines methods to create and execute queries that are described by an <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public interface IQueryProvider\n    content.vb: Public Interface IQueryProvider\n  seealso:\n  - type: System.Linq.Queryable\n    commentId: T:System.Linq.Queryable\n  - type: System.Linq.IQueryable`1\n    commentId: T:System.Linq.IQueryable`1\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IQueryProvider\n- uid: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\n  id: CreateQuery(System.Linq.Expressions.Expression)\n  parent: System.Linq.IQueryProvider\n  langs:\n  - csharp\n  - vb\n  name: CreateQuery(Expression)\n  fullName: System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateQuery\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 27\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq\n  summary: \"\\n<p>Constructs an <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that can evaluate the query represented by a specified expression tree.</p>\\n\"\n  syntax:\n    content: IQueryable CreateQuery(Expression expression)\n    content.vb: Function CreateQuery(expression As Expression) As IQueryable\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression tree that represents a LINQ query.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can evaluate the query represented by the specified expression tree.</p>\\n\"\n  nameWithType: IQueryProvider.CreateQuery(Expression)\n- uid: System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)\n  id: CreateQuery``1(System.Linq.Expressions.Expression)\n  parent: System.Linq.IQueryProvider\n  langs:\n  - csharp\n  - vb\n  name: CreateQuery<TElement>(Expression)\n  fullName: System.Linq.IQueryProvider.CreateQuery<TElement>(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateQuery\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 28\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq\n  summary: \"\\n<p>Constructs an <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that can evaluate the query represented by a specified expression tree.</p>\\n\"\n  syntax:\n    content: IQueryable<TElement> CreateQuery<TElement>(Expression expression)\n    content.vb: Function CreateQuery(Of TElement)(expression As Expression) As IQueryable(Of TElement)\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression tree that represents a LINQ query.</p>\\n\"\n    typeParameters:\n    - id: TElement\n      description: \"\\n<p>The type of the elements of the <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is returned.</p>\\n\"\n    return:\n      type: System.Linq.IQueryable{{TElement}}\n      description: \"\\n<p>An <xref href=\\\"System.Linq.IQueryable`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can evaluate the query represented by the specified expression tree.</p>\\n\"\n  fullName.vb: System.Linq.IQueryProvider.CreateQuery(Of TElement)(System.Linq.Expressions.Expression)\n  name.vb: CreateQuery(Of TElement)(Expression)\n  nameWithType: IQueryProvider.CreateQuery<TElement>(Expression)\n  nameWithType.vb: IQueryProvider.CreateQuery(Of TElement)(Expression)\n- uid: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)\n  id: Execute(System.Linq.Expressions.Expression)\n  parent: System.Linq.IQueryProvider\n  langs:\n  - csharp\n  - vb\n  name: Execute(Expression)\n  fullName: System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Execute\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 29\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq\n  summary: \"\\n<p>Executes the query represented by a specified expression tree.</p>\\n\"\n  syntax:\n    content: object Execute(Expression expression)\n    content.vb: Function Execute(expression As Expression) As Object\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression tree that represents a LINQ query.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value that results from executing the specified query.</p>\\n\"\n  nameWithType: IQueryProvider.Execute(Expression)\n- uid: System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\n  commentId: M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\n  id: Execute``1(System.Linq.Expressions.Expression)\n  parent: System.Linq.IQueryProvider\n  langs:\n  - csharp\n  - vb\n  name: Execute<TResult>(Expression)\n  fullName: System.Linq.IQueryProvider.Execute<TResult>(System.Linq.Expressions.Expression)\n  type: Method\n  source:\n    remote:\n      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Execute\n    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs\n    startLine: 30\n  assemblies:\n  - System.Linq.Expressions\n  namespace: System.Linq\n  summary: \"\\n<p>Executes the strongly-typed query represented by a specified expression tree.</p>\\n\"\n  syntax:\n    content: TResult Execute<TResult>(Expression expression)\n    content.vb: Function Execute(Of TResult)(expression As Expression) As TResult\n    parameters:\n    - id: expression\n      type: System.Linq.Expressions.Expression\n      description: \"\\n<p>An expression tree that represents a LINQ query.</p>\\n\"\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The type of the value that results from executing the query.</p>\\n\"\n    return:\n      type: '{TResult}'\n      description: \"\\n<p>The value that results from executing the specified query.</p>\\n\"\n  fullName.vb: System.Linq.IQueryProvider.Execute(Of TResult)(System.Linq.Expressions.Expression)\n  name.vb: Execute(Of TResult)(Expression)\n  nameWithType: IQueryProvider.Execute<TResult>(Expression)\n  nameWithType.vb: IQueryProvider.Execute(Of TResult)(Expression)\nreferences:\n- uid: System.Linq\n  isExternal: false\n  name: System.Linq\n  fullName: System.Linq\n  commentId: N:System.Linq\n  nameWithType: System.Linq\n- uid: System.Linq.Expressions.Expression\n  parent: System.Linq.Expressions\n  isExternal: false\n  name: Expression\n  fullName: System.Linq.Expressions.Expression\n  commentId: T:System.Linq.Expressions.Expression\n  nameWithType: Expression\n- uid: System.Linq.IQueryable\n  parent: System.Linq\n  isExternal: false\n  name: IQueryable\n  fullName: System.Linq.IQueryable\n  commentId: T:System.Linq.IQueryable\n  nameWithType: IQueryable\n- uid: System.Linq.Expressions\n  isExternal: false\n  name: System.Linq.Expressions\n  fullName: System.Linq.Expressions\n  commentId: N:System.Linq.Expressions\n  nameWithType: System.Linq.Expressions\n- uid: System.Linq.IQueryable{{TElement}}\n  parent: System.Linq\n  definition: System.Linq.IQueryable`1\n  name: IQueryable<TElement>\n  fullName: System.Linq.IQueryable<TElement>\n  fullname.vb: System.Linq.IQueryable(Of TElement)\n  name.vb: IQueryable(Of TElement)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    fullName: <\n  - name: TElement\n    fullName: TElement\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TElement\n    fullName: TElement\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IQueryable{``0}\n  nameWithType: IQueryable<TElement>\n  nameWithType.vb: IQueryable(Of TElement)\n- uid: System.Linq.IQueryable`1\n  isExternal: false\n  name: IQueryable<T>\n  fullName: System.Linq.IQueryable<T>\n  fullname.vb: System.Linq.IQueryable(Of T)\n  name.vb: IQueryable(Of T)\n  spec.csharp:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Linq.IQueryable`1\n    name: IQueryable\n    fullName: System.Linq.IQueryable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.Linq.IQueryable`1\n  nameWithType: IQueryable<T>\n  nameWithType.vb: IQueryable(Of T)\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: '{TResult}'\n  definition: TResult\n  name: TResult\n  fullName: TResult\n  commentId: '!:TResult'\n  nameWithType: TResult\n- uid: TResult\n  isExternal: false\n  name: TResult\n  fullName: TResult\n  nameWithType: TResult\n"}