{"nodes":[{"pos":[1629,1641],"content":"ECDsaOpenSsl","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl","pos":[0,12]}]},{"pos":[2675,2689],"content":"ECDsaOpenSsl()","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl()","pos":[0,14]}]},{"pos":[3631,3650],"content":"ECDsaOpenSsl(Int32)","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl(Int32)","pos":[0,19]}]},{"pos":[4702,4722],"content":"ECDsaOpenSsl(IntPtr)","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl(IntPtr)","pos":[0,20]}]},{"pos":[5845,5866],"content":"ECDsaOpenSsl(ECCurve)","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl(ECCurve)","pos":[0,21]}]},{"pos":[7065,7096],"content":"ECDsaOpenSsl(SafeEvpPKeyHandle)","needQuote":true,"nodes":[{"content":"ECDsaOpenSsl(SafeEvpPKeyHandle)","pos":[0,31]}]},{"pos":[8220,8227],"content":"KeySize","needQuote":true,"nodes":[{"content":"KeySize","pos":[0,7]}]},{"pos":[9283,9296],"content":"LegalKeySizes","needQuote":true,"nodes":[{"content":"LegalKeySizes","pos":[0,13]}]},{"pos":[10458,10474],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[11580,11600],"content":"DuplicateKeyHandle()","needQuote":true,"nodes":[{"content":"DuplicateKeyHandle()","pos":[0,20]}]},{"pos":[12759,12792],"content":"ExportExplicitParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportExplicitParameters(Boolean)","pos":[0,33]}]},{"pos":[14153,14178],"content":"ExportParameters(Boolean)","needQuote":true,"nodes":[{"content":"ExportParameters(Boolean)","pos":[0,25]}]},{"pos":[15550,15570],"content":"GenerateKey(ECCurve)","needQuote":true,"nodes":[{"content":"GenerateKey(ECCurve)","pos":[0,20]}]},{"pos":[16953,17002],"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Byte[], Int32, Int32, HashAlgorithmName)","pos":[0,49]}]},{"pos":[19020,19055],"content":"HashData(Stream, HashAlgorithmName)","needQuote":true,"nodes":[{"content":"HashData(Stream, HashAlgorithmName)","pos":[0,35]}]},{"pos":[20552,20582],"content":"ImportParameters(ECParameters)","needQuote":true,"nodes":[{"content":"ImportParameters(ECParameters)","pos":[0,30]}]},{"pos":[21811,21827],"content":"SignHash(Byte[])","needQuote":true,"nodes":[{"content":"SignHash(Byte[])","pos":[0,16]}]},{"pos":[23185,23211],"content":"VerifyHash(Byte[], Byte[])","needQuote":true,"nodes":[{"content":"VerifyHash(Byte[], Byte[])","pos":[0,26]}]},{"pos":[24525,24553],"content":"System.Security.Cryptography","needQuote":true,"nodes":[{"content":"System.Security.Cryptography","pos":[0,28]}]},{"pos":[24735,24741],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24855,24861],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[24997,25002],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[25145,25151],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[25364,25371],"content":"ECCurve","needQuote":true,"nodes":[{"content":"ECCurve","pos":[0,7]}]},{"pos":[25628,25645],"content":"SafeEvpPKeyHandle","needQuote":true,"nodes":[{"content":"SafeEvpPKeyHandle","pos":[0,17]}]},{"pos":[25794,25804],"content":"KeySizes[]","needQuote":true,"nodes":[{"content":"KeySizes[]","pos":[0,10]}]},{"pos":[26063,26071],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"content":"[]","pos":[26162,26164]},{"pos":[26276,26284],"content":"KeySizes","needQuote":true,"nodes":[{"content":"KeySizes","pos":[0,8]}]},{"pos":[26374,26376],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[26512,26519],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26744,26756],"content":"ECParameters","needQuote":true,"nodes":[{"content":"ECParameters","pos":[0,12]}]},{"pos":[26869,26875],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[27044,27048],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[27130,27132]},{"pos":[27218,27222],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[27303,27305],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[27527,27544],"content":"HashAlgorithmName","needQuote":true,"nodes":[{"content":"HashAlgorithmName","pos":[0,17]}]},{"pos":[27742,27748],"content":"Stream","needQuote":true,"nodes":[{"content":"Stream","pos":[0,6]}]},{"pos":[27871,27880],"content":"System.IO","needQuote":true,"nodes":[{"content":"System.IO","pos":[0,9]}]}],"content":"items:\n- uid: System.Security.Cryptography.ECDsaOpenSsl\n  commentId: T:System.Security.Cryptography.ECDsaOpenSsl\n  id: ECDsaOpenSsl\n  parent: System.Security.Cryptography\n  children:\n  - System.Security.Cryptography.ECDsaOpenSsl.#ctor\n  - System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Int32)\n  - System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.IntPtr)\n  - System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  - System.Security.Cryptography.ECDsaOpenSsl.Dispose(System.Boolean)\n  - System.Security.Cryptography.ECDsaOpenSsl.DuplicateKeyHandle\n  - System.Security.Cryptography.ECDsaOpenSsl.ExportExplicitParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaOpenSsl.ExportParameters(System.Boolean)\n  - System.Security.Cryptography.ECDsaOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)\n  - System.Security.Cryptography.ECDsaOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  - System.Security.Cryptography.ECDsaOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)\n  - System.Security.Cryptography.ECDsaOpenSsl.KeySize\n  - System.Security.Cryptography.ECDsaOpenSsl.LegalKeySizes\n  - System.Security.Cryptography.ECDsaOpenSsl.SignHash(System.Byte[])\n  - System.Security.Cryptography.ECDsaOpenSsl.VerifyHash(System.Byte[],System.Byte[])\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl\n  nameWithType: ECDsaOpenSsl\n  fullName: System.Security.Cryptography.ECDsaOpenSsl\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ECDsaOpenSsl\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 9\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: 'public sealed class ECDsaOpenSsl : ECDsa'\n    content.vb: >-\n      Public NotInheritable Class ECDsaOpenSsl\n          Inherits ECDsa\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n- uid: System.Security.Cryptography.ECDsaOpenSsl.#ctor\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.#ctor\n  id: '#ctor'\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl()\n  nameWithType: ECDsaOpenSsl.ECDsaOpenSsl()\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ECDsaOpenSsl()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 11\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaOpenSsl()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Int32)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl(Int32)\n  nameWithType: ECDsaOpenSsl.ECDsaOpenSsl(Int32)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ECDsaOpenSsl(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 12\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaOpenSsl(int keySize)\n    content.vb: Public Sub New(keySize As Integer)\n    parameters:\n    - id: keySize\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.IntPtr)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.IntPtr)\n  id: '#ctor(System.IntPtr)'\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl(IntPtr)\n  nameWithType: ECDsaOpenSsl.ECDsaOpenSsl(IntPtr)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ECDsaOpenSsl(System.IntPtr)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 13\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaOpenSsl(IntPtr handle)\n    content.vb: Public Sub New(handle As IntPtr)\n    parameters:\n    - id: handle\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.ECCurve)\n  id: '#ctor(System.Security.Cryptography.ECCurve)'\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl(ECCurve)\n  nameWithType: ECDsaOpenSsl.ECDsaOpenSsl(ECCurve)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ECDsaOpenSsl(System.Security.Cryptography.ECCurve)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 14\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaOpenSsl(ECCurve curve)\n    content.vb: Public Sub New(curve As ECCurve)\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)\n  id: '#ctor(System.Security.Cryptography.SafeEvpPKeyHandle)'\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ECDsaOpenSsl(SafeEvpPKeyHandle)\n  nameWithType: ECDsaOpenSsl.ECDsaOpenSsl(SafeEvpPKeyHandle)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ECDsaOpenSsl(System.Security.Cryptography.SafeEvpPKeyHandle)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 15\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public ECDsaOpenSsl(SafeEvpPKeyHandle pkeyHandle)\n    content.vb: Public Sub New(pkeyHandle As SafeEvpPKeyHandle)\n    parameters:\n    - id: pkeyHandle\n      type: System.Security.Cryptography.SafeEvpPKeyHandle\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.KeySize\n  commentId: P:System.Security.Cryptography.ECDsaOpenSsl.KeySize\n  id: KeySize\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: KeySize\n  nameWithType: ECDsaOpenSsl.KeySize\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.KeySize\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: KeySize\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 16\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override int KeySize { get; set; }\n    content.vb: Public Overrides Property KeySize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.LegalKeySizes\n  commentId: P:System.Security.Cryptography.ECDsaOpenSsl.LegalKeySizes\n  id: LegalKeySizes\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: LegalKeySizes\n  nameWithType: ECDsaOpenSsl.LegalKeySizes\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.LegalKeySizes\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LegalKeySizes\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 17\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override KeySizes[] LegalKeySizes { get; }\n    content.vb: Public Overrides ReadOnly Property LegalKeySizes As KeySizes()\n    parameters: []\n    return:\n      type: System.Security.Cryptography.KeySizes[]\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n- uid: System.Security.Cryptography.ECDsaOpenSsl.Dispose(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  nameWithType: ECDsaOpenSsl.Dispose(Boolean)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 18\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override void Dispose(bool disposing)\n    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.DuplicateKeyHandle\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.DuplicateKeyHandle\n  id: DuplicateKeyHandle\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: DuplicateKeyHandle()\n  nameWithType: ECDsaOpenSsl.DuplicateKeyHandle()\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.DuplicateKeyHandle()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DuplicateKeyHandle\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 19\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public SafeEvpPKeyHandle DuplicateKeyHandle()\n    content.vb: Public Function DuplicateKeyHandle As SafeEvpPKeyHandle\n    return:\n      type: System.Security.Cryptography.SafeEvpPKeyHandle\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n- uid: System.Security.Cryptography.ECDsaOpenSsl.ExportExplicitParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.ExportExplicitParameters(System.Boolean)\n  id: ExportExplicitParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ExportExplicitParameters(Boolean)\n  nameWithType: ECDsaOpenSsl.ExportExplicitParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ExportExplicitParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportExplicitParameters\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 20\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override ECParameters ExportExplicitParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportExplicitParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.ExportParameters(System.Boolean)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.ExportParameters(System.Boolean)\n  id: ExportParameters(System.Boolean)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ExportParameters(Boolean)\n  nameWithType: ECDsaOpenSsl.ExportParameters(Boolean)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ExportParameters(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ExportParameters\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 21\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override ECParameters ExportParameters(bool includePrivateParameters)\n    content.vb: Public Overrides Function ExportParameters(includePrivateParameters As Boolean) As ECParameters\n    parameters:\n    - id: includePrivateParameters\n      type: System.Boolean\n    return:\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)\n  id: GenerateKey(System.Security.Cryptography.ECCurve)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: GenerateKey(ECCurve)\n  nameWithType: ECDsaOpenSsl.GenerateKey(ECCurve)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.GenerateKey(System.Security.Cryptography.ECCurve)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenerateKey\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 22\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void GenerateKey(ECCurve curve)\n    content.vb: Public Overrides Sub GenerateKey(curve As ECCurve)\n    parameters:\n    - id: curve\n      type: System.Security.Cryptography.ECCurve\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  nameWithType: ECDsaOpenSsl.HashData(Byte[], Int32, Int32, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 23\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.Byte[]\n    - id: offset\n      type: System.Int32\n    - id: count\n      type: System.Int32\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  nameWithType.vb: ECDsaOpenSsl.HashData(Byte(), Int32, Int32, HashAlgorithmName)\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaOpenSsl.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)\n  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)\n- uid: System.Security.Cryptography.ECDsaOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: HashData(Stream, HashAlgorithmName)\n  nameWithType: ECDsaOpenSsl.HashData(Stream, HashAlgorithmName)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HashData\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 24\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: protected override byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)\n    content.vb: Protected Overrides Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()\n    parameters:\n    - id: data\n      type: System.IO.Stream\n    - id: hashAlgorithm\n      type: System.Security.Cryptography.HashAlgorithmName\n    return:\n      type: System.Byte[]\n  modifiers.csharp:\n  - protected\n  - override\n  modifiers.vb:\n  - Protected\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)\n  id: ImportParameters(System.Security.Cryptography.ECParameters)\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: ImportParameters(ECParameters)\n  nameWithType: ECDsaOpenSsl.ImportParameters(ECParameters)\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.ImportParameters(System.Security.Cryptography.ECParameters)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImportParameters\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 25\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override void ImportParameters(ECParameters parameters)\n    content.vb: Public Overrides Sub ImportParameters(parameters As ECParameters)\n    parameters:\n    - id: parameters\n      type: System.Security.Cryptography.ECParameters\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n- uid: System.Security.Cryptography.ECDsaOpenSsl.SignHash(System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.SignHash(System.Byte[])\n  id: SignHash(System.Byte[])\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: SignHash(Byte[])\n  nameWithType: ECDsaOpenSsl.SignHash(Byte[])\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.SignHash(System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SignHash\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 26\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override byte[] SignHash(byte[] hash)\n    content.vb: Public Overrides Function SignHash(hash As Byte()) As Byte()\n    parameters:\n    - id: hash\n      type: System.Byte[]\n    return:\n      type: System.Byte[]\n  nameWithType.vb: ECDsaOpenSsl.SignHash(Byte())\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaOpenSsl.SignHash(System.Byte())\n  name.vb: SignHash(Byte())\n- uid: System.Security.Cryptography.ECDsaOpenSsl.VerifyHash(System.Byte[],System.Byte[])\n  commentId: M:System.Security.Cryptography.ECDsaOpenSsl.VerifyHash(System.Byte[],System.Byte[])\n  id: VerifyHash(System.Byte[],System.Byte[])\n  parent: System.Security.Cryptography.ECDsaOpenSsl\n  langs:\n  - csharp\n  - vb\n  name: VerifyHash(Byte[], Byte[])\n  nameWithType: ECDsaOpenSsl.VerifyHash(Byte[], Byte[])\n  fullName: System.Security.Cryptography.ECDsaOpenSsl.VerifyHash(System.Byte[], System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: VerifyHash\n    path: src/System.Security.Cryptography.OpenSsl/ref/System.Security.Cryptography.OpenSsl.cs\n    startLine: 27\n  assemblies:\n  - System.Security.Cryptography.OpenSsl\n  namespace: System.Security.Cryptography\n  syntax:\n    content: public override bool VerifyHash(byte[] hash, byte[] signature)\n    content.vb: Public Overrides Function VerifyHash(hash As Byte(), signature As Byte()) As Boolean\n    parameters:\n    - id: hash\n      type: System.Byte[]\n    - id: signature\n      type: System.Byte[]\n    return:\n      type: System.Boolean\n  nameWithType.vb: ECDsaOpenSsl.VerifyHash(Byte(), Byte())\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Security.Cryptography.ECDsaOpenSsl.VerifyHash(System.Byte(), System.Byte())\n  name.vb: VerifyHash(Byte(), Byte())\nreferences:\n- uid: System.Security.Cryptography\n  commentId: N:System.Security.Cryptography\n  isExternal: false\n  name: System.Security.Cryptography\n  nameWithType: System.Security.Cryptography\n  fullName: System.Security.Cryptography\n- uid: System.Object\n  commentId: T:System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  nameWithType: Object\n  fullName: System.Object\n- uid: System\n  commentId: N:System\n  isExternal: false\n  name: System\n  nameWithType: System\n  fullName: System\n- uid: System.Int32\n  commentId: T:System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  nameWithType: Int32\n  fullName: System.Int32\n- uid: System.IntPtr\n  commentId: T:System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  nameWithType: IntPtr\n  fullName: System.IntPtr\n- uid: System.Security.Cryptography.ECCurve\n  commentId: T:System.Security.Cryptography.ECCurve\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECCurve\n  nameWithType: ECCurve\n  fullName: System.Security.Cryptography.ECCurve\n- uid: System.Security.Cryptography.SafeEvpPKeyHandle\n  commentId: T:System.Security.Cryptography.SafeEvpPKeyHandle\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: SafeEvpPKeyHandle\n  nameWithType: SafeEvpPKeyHandle\n  fullName: System.Security.Cryptography.SafeEvpPKeyHandle\n- uid: System.Security.Cryptography.KeySizes[]\n  name: KeySizes[]\n  nameWithType: KeySizes[]\n  fullName: System.Security.Cryptography.KeySizes[]\n  nameWithType.vb: KeySizes()\n  fullname.vb: System.Security.Cryptography.KeySizes()\n  name.vb: KeySizes()\n  spec.csharp:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Security.Cryptography.KeySizes\n    name: KeySizes\n    nameWithType: KeySizes\n    fullName: System.Security.Cryptography.KeySizes\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Boolean\n  commentId: T:System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  nameWithType: Boolean\n  fullName: System.Boolean\n- uid: System.Security.Cryptography.ECParameters\n  commentId: T:System.Security.Cryptography.ECParameters\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: ECParameters\n  nameWithType: ECParameters\n  fullName: System.Security.Cryptography.ECParameters\n- uid: System.Byte[]\n  name: Byte[]\n  nameWithType: Byte[]\n  fullName: System.Byte[]\n  nameWithType.vb: Byte()\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    nameWithType: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    nameWithType: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    nameWithType: ()\n    fullName: ()\n- uid: System.Security.Cryptography.HashAlgorithmName\n  commentId: T:System.Security.Cryptography.HashAlgorithmName\n  parent: System.Security.Cryptography\n  isExternal: false\n  name: HashAlgorithmName\n  nameWithType: HashAlgorithmName\n  fullName: System.Security.Cryptography.HashAlgorithmName\n- uid: System.IO.Stream\n  commentId: T:System.IO.Stream\n  parent: System.IO\n  isExternal: false\n  name: Stream\n  nameWithType: Stream\n  fullName: System.IO.Stream\n- uid: System.IO\n  commentId: N:System.IO\n  isExternal: false\n  name: System.IO\n  nameWithType: System.IO\n  fullName: System.IO\n"}