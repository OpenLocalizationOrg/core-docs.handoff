{"nodes":[{"pos":[450,466],"content":"RefreshEventArgs","needQuote":true,"nodes":[{"content":"RefreshEventArgs","pos":[0,16]}]},{"pos":[2372,2396],"content":"RefreshEventArgs(Object)","needQuote":true,"nodes":[{"content":"RefreshEventArgs(Object)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The component that changed.","pos":[3327,3359],"source":"\\n<p>The component that changed."},{"content":"&lt;/p&gt;\\n","pos":[3360,3366],"source":" </p>\\n"},{"pos":[4103,4125],"content":"RefreshEventArgs(Type)","needQuote":true,"nodes":[{"content":"RefreshEventArgs(Type)","pos":[0,22]}]},{"pos":[5869,5885],"content":"ComponentChanged","needQuote":true,"nodes":[{"content":"ComponentChanged","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The component that changed its properties, events, or extenders, or &lt;strong&gt;null&lt;/strong&gt; if all components of the same type have changed.&lt;/p&gt;\\n","pos":[6691,6840],"source":"\\n<p>The component that changed its properties, events, or extenders, or <strong>null</strong> if all components of the same type have changed.</p>\\n"},{"pos":[7197,7208],"content":"TypeChanged","needQuote":true,"nodes":[{"content":"TypeChanged","pos":[0,11]}]},{"pos":[8358,8379],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[8555,8561],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8709,8718],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[8890,8895],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[9082,9092],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9187,9195],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9264,9265],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9292,9293],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9363,9371],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9440,9441],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9468,9469],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9652,9666],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9785,9791],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9858,9859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9909,9915],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9975,9976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10059,10065],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10132,10133],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10183,10189],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10249,10250],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10464,10486],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10634,10640],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10707,10708],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10758,10764],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10825,10826]},{"pos":[10881,10887],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10947,10948],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11045,11051],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11118,11119],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11169,11175],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11236,11237]},{"pos":[11292,11298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11358,11359],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11604,11635],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11801,11816],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[11892,11893],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11943,11949],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12010,12011]},{"pos":[12066,12072],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12132,12133],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12239,12254],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12330,12331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12381,12387],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12448,12449]},{"pos":[12504,12510],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12570,12571],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12801,12814],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[12915,12926],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[12998,12999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13026,13027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13100,13111],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13183,13184],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13211,13212],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13387,13396],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13489,13496],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13564,13565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13592,13593],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13662,13669],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13737,13738],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13765,13766],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13941,13958],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14067,14082],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14158,14159],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14186,14187],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14264,14279],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14355,14356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14383,14384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14529,14535],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14664,14668],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]}],"content":"items:\n- uid: System.ComponentModel.RefreshEventArgs\n  commentId: T:System.ComponentModel.RefreshEventArgs\n  id: RefreshEventArgs\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.RefreshEventArgs.#ctor(System.Object)\n  - System.ComponentModel.RefreshEventArgs.#ctor(System.Type)\n  - System.ComponentModel.RefreshEventArgs.ComponentChanged\n  - System.ComponentModel.RefreshEventArgs.TypeChanged\n  langs:\n  - csharp\n  - vb\n  name: RefreshEventArgs\n  fullName: System.ComponentModel.RefreshEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: RefreshEventArgs\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n    startLine: 11\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.ComponentModel.TypeDescriptor.Refreshed\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event.</p>\\n\"\n  syntax:\n    content: 'public class RefreshEventArgs : EventArgs'\n    content.vb: >-\n      Public Class RefreshEventArgs\n          Inherits EventArgs\n  seealso:\n  - type: System.ComponentModel.RefreshEventHandler\n    commentId: T:System.ComponentModel.RefreshEventHandler\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: RefreshEventArgs\n- uid: System.ComponentModel.RefreshEventArgs.#ctor(System.Object)\n  commentId: M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.ComponentModel.RefreshEventArgs\n  langs:\n  - csharp\n  - vb\n  name: RefreshEventArgs(Object)\n  fullName: System.ComponentModel.RefreshEventArgs.RefreshEventArgs(System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n    startLine: 22\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.RefreshEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the component that has changed.</p>\\n\"\n  syntax:\n    content: public RefreshEventArgs(object componentChanged)\n    content.vb: Public Sub New(componentChanged As Object)\n    parameters:\n    - id: componentChanged\n      type: System.Object\n      description: \"\\n<p>The component that changed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.RefreshEventHandler\n    commentId: T:System.ComponentModel.RefreshEventHandler\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RefreshEventArgs.RefreshEventArgs(Object)\n- uid: System.ComponentModel.RefreshEventArgs.#ctor(System.Type)\n  commentId: M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)\n  id: '#ctor(System.Type)'\n  parent: System.ComponentModel.RefreshEventArgs\n  langs:\n  - csharp\n  - vb\n  name: RefreshEventArgs(Type)\n  fullName: System.ComponentModel.RefreshEventArgs.RefreshEventArgs(System.Type)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n    startLine: 34\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.RefreshEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the type of component that has changed.</p>\\n\"\n  syntax:\n    content: public RefreshEventArgs(Type typeChanged)\n    content.vb: Public Sub New(typeChanged As Type)\n    parameters:\n    - id: typeChanged\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that changed. </p>\\n\"\n  seealso:\n  - type: System.ComponentModel.RefreshEventHandler\n    commentId: T:System.ComponentModel.RefreshEventHandler\n  - type: System.ComponentModel.TypeDescriptor\n    commentId: T:System.ComponentModel.TypeDescriptor\n  - type: System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n    commentId: M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: RefreshEventArgs.RefreshEventArgs(Type)\n- uid: System.ComponentModel.RefreshEventArgs.ComponentChanged\n  commentId: P:System.ComponentModel.RefreshEventArgs.ComponentChanged\n  id: ComponentChanged\n  parent: System.ComponentModel.RefreshEventArgs\n  langs:\n  - csharp\n  - vb\n  name: ComponentChanged\n  fullName: System.ComponentModel.RefreshEventArgs.ComponentChanged\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ComponentChanged\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n    startLine: 44\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the component that changed its properties, events, or extenders.</p>\\n\"\n  syntax:\n    content: public object ComponentChanged { get; }\n    content.vb: Public ReadOnly Property ComponentChanged As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The component that changed its properties, events, or extenders, or <strong>null</strong> if all components of the same type have changed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RefreshEventArgs.ComponentChanged\n- uid: System.ComponentModel.RefreshEventArgs.TypeChanged\n  commentId: P:System.ComponentModel.RefreshEventArgs.TypeChanged\n  id: TypeChanged\n  parent: System.ComponentModel.RefreshEventArgs\n  langs:\n  - csharp\n  - vb\n  name: TypeChanged\n  fullName: System.ComponentModel.RefreshEventArgs.TypeChanged\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeChanged\n    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/RefreshEventArgs.cs\n    startLine: 57\n  assemblies:\n  - System.ComponentModel.TypeConverter\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that changed its properties or events.</p>\\n\"\n  syntax:\n    content: public Type TypeChanged { get; }\n    content.vb: Public ReadOnly Property TypeChanged As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that changed its properties or events.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: RefreshEventArgs.TypeChanged\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n"}