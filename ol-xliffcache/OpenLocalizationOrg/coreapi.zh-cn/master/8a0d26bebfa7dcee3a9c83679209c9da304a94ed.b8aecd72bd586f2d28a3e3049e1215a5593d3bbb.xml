{"nodes":[{"pos":[650,659],"content":"Semaphore","needQuote":true,"nodes":[{"content":"Semaphore","pos":[0,9]}]},{"pos":[4480,4503],"content":"Semaphore(Int32, Int32)","needQuote":true,"nodes":[{"content":"Semaphore(Int32, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The initial number of requests for the semaphore that can be granted concurrently.","pos":[5466,5553],"source":"\\n<p>The initial number of requests for the semaphore that can be granted concurrently."},{"content":"&lt;/p&gt;\\n","pos":[5554,5560],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of requests for the semaphore that can be granted concurrently.","pos":[5630,5717],"source":"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently."},{"content":"&lt;/p&gt;\\n","pos":[5718,5724],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is greater than &lt;em&gt;maximumCount&lt;/em&gt;.&lt;/p&gt;\\n","pos":[5835,5908],"source":"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maximumCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[6025,6136],"source":"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n"},{"pos":[6543,6574],"content":"Semaphore(Int32, Int32, String)","needQuote":true,"nodes":[{"content":"Semaphore(Int32, Int32, String)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The initial number of requests for the semaphore that can be granted concurrently.","pos":[7638,7725],"source":"\\n<p>The initial number of requests for the semaphore that can be granted concurrently."},{"content":"&lt;/p&gt;\\n","pos":[7726,7732],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of requests for the semaphore that can be granted concurrently.&lt;/p&gt;\\n","pos":[7802,7895],"source":"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;The name of a named system semaphore object.&lt;/p&gt;\\n","pos":[7958,8013],"source":"\\n<p>The name of a named system semaphore object.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is greater than &lt;em&gt;maximumCount&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[8124,8265],"source":"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maximumCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[8382,8493],"source":"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[8584,8618],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.&lt;/p&gt;\\n","pos":[9100,9218],"source":"\\n<p>The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n"},{"pos":[9809,9853],"content":"Semaphore(Int32, Int32, String, out Boolean)","needQuote":true,"nodes":[{"content":"Semaphore(Int32, Int32, String, out Boolean)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The initial number of requests for the semaphore that can be satisfied concurrently.","pos":[11085,11174],"source":"\\n<p>The initial number of requests for the semaphore that can be satisfied concurrently."},{"content":"&lt;/p&gt;\\n","pos":[11175,11181],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of requests for the semaphore that can be satisfied concurrently.&lt;/p&gt;\\n","pos":[11251,11346],"source":"\\n<p>The maximum number of requests for the semaphore that can be satisfied concurrently.</p>\\n"},{"content":"\\n&lt;p&gt;The name of a named system semaphore object.&lt;/p&gt;\\n","pos":[11409,11464],"source":"\\n<p>The name of a named system semaphore object.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains &lt;strong&gt;true&lt;/strong&gt; if a local semaphore was created (that is, if &lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt; or an empty string) or if the specified named system semaphore was created; &lt;strong&gt;false&lt;/strong&gt; if the specified named system semaphore already existed.","pos":[11534,11836],"source":"\\n<p>When this method returns, contains <strong>true</strong> if a local semaphore was created (that is, if <em>name</em> is <strong>null</strong> or an empty string) or if the specified named system semaphore was created; <strong>false</strong> if the specified named system semaphore already existed."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[11837,11882],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is greater than &lt;em&gt;maximumCount&lt;/em&gt;.","pos":[11993,12060],"source":"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[12061,12135],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;maximumCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;initialCount&lt;/em&gt; is less than 0.&lt;/p&gt;\\n","pos":[12252,12363],"source":"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[12454,12488],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.&lt;/p&gt;\\n","pos":[12970,13088],"source":"\\n<p>The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n"},{"pos":[13836,13856],"content":"OpenExisting(String)","needQuote":true,"nodes":[{"content":"OpenExisting(String)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The name of the system semaphore to open.&lt;/p&gt;\\n","pos":[14637,14689],"source":"\\n<p>The name of the system semaphore to open.</p>\\n"},{"content":"\\n&lt;p&gt;An object that represents the named system semaphore.&lt;/p&gt;\\n","pos":[14762,14826],"source":"\\n<p>An object that represents the named system semaphore.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[14937,15051],"source":"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15156,15208],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The named semaphore does not exist.&lt;/p&gt;\\n","pos":[15357,15403],"source":"\\n<p>The named semaphore does not exist.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[15494,15528],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named semaphore exists, but the user does not have the security access required to use it.","pos":[15645,15744],"source":"\\n<p>The named semaphore exists, but the user does not have the security access required to use it."},{"content":"&lt;/p&gt;\\n","pos":[15745,15751],"source":" </p>\\n"},{"pos":[16186,16195],"content":"Release()","needQuote":true,"nodes":[{"content":"Release()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The semaphore count is already at the maximum value.&lt;/p&gt;\\n","pos":[17101,17164],"source":"\\n<p>The semaphore count is already at the maximum value.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred with a named semaphore.&lt;/p&gt;\\n","pos":[17255,17312],"source":"\\n<p>A Win32 error occurred with a named semaphore.</p>\\n"},{"pos":[18176,18190],"content":"Release(Int32)","needQuote":true,"nodes":[{"content":"Release(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The number of times to exit the semaphore.&lt;/p&gt;\\n","pos":[18978,19031],"source":"\\n<p>The number of times to exit the semaphore.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;releaseCount&lt;/em&gt; is less than 1.&lt;/p&gt;\\n","pos":[19384,19434],"source":"\\n<p>\\n<em>releaseCount</em> is less than 1.</p>\\n"},{"content":"\\n&lt;p&gt;The semaphore count is already at the maximum value.&lt;/p&gt;\\n","pos":[19561,19624],"source":"\\n<p>The semaphore count is already at the maximum value.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred with a named semaphore.&lt;/p&gt;\\n","pos":[19715,19772],"source":"\\n<p>A Win32 error occurred with a named semaphore.</p>\\n"},{"pos":[20766,20804],"content":"TryOpenExisting(String, out Semaphore)","needQuote":true,"nodes":[{"content":"TryOpenExisting(String, out Semaphore)","pos":[0,38]}]},{"content":"\\n&lt;p&gt;The name of the system semaphore to open.&lt;/p&gt;\\n","pos":[21739,21791],"source":"\\n<p>The name of the system semaphore to open.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the named semaphore was opened successfully; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22219,22336],"source":"\\n<p>\\n<strong>true</strong> if the named semaphore was opened successfully; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is an empty string.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is longer than 260 characters.&lt;/p&gt;\\n","pos":[22447,22561],"source":"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;name&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22666,22718],"source":"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;A Win32 error occurred.&lt;/p&gt;\\n","pos":[22809,22843],"source":"\\n<p>A Win32 error occurred.</p>\\n"},{"content":"\\n&lt;p&gt;The named semaphore exists, but the user does not have the security access required to use it.","pos":[22960,23059],"source":"\\n<p>The named semaphore exists, but the user does not have the security access required to use it."},{"content":"&lt;/p&gt;\\n","pos":[23060,23066],"source":" </p>\\n"},{"pos":[23506,23522],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[23683,23689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23845,23863],"content":"MarshalByRefObject","needQuote":true,"nodes":[{"content":"MarshalByRefObject","pos":[0,18]}]},{"pos":[24068,24078],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[24260,24271],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[24477,24488],"content":"WaitTimeout","needQuote":true,"nodes":[{"content":"WaitTimeout","pos":[0,11]}]},{"pos":[24749,24762],"content":"InvalidHandle","needQuote":true,"nodes":[{"content":"InvalidHandle","pos":[0,13]}]},{"pos":[25052,25075],"content":"WaitOne(Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitOne(Int32, Boolean)","pos":[0,23]}]},{"pos":[25253,25260],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[25342,25343],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25392,25397],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25457,25458]},{"pos":[25514,25521],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[25582,25583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25695,25702],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[25784,25785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25834,25839],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[25899,25900]},{"pos":[25956,25963],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26024,26025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26313,26339],"content":"WaitOne(TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitOne(TimeSpan, Boolean)","pos":[0,26]}]},{"pos":[26523,26530],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[26612,26613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26665,26673],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[26736,26737]},{"pos":[26793,26800],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[26861,26862],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26977,26984],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[27066,27067],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27119,27127],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[27190,27191]},{"pos":[27247,27254],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27315,27316],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27578,27587],"content":"WaitOne()","needQuote":true,"nodes":[{"content":"WaitOne()","pos":[0,9]}]},{"pos":[27708,27715],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[27797,27798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27825,27826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27909,27916],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[27998,27999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28026,28027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28254,28268],"content":"WaitOne(Int32)","needQuote":true,"nodes":[{"content":"WaitOne(Int32)","pos":[0,14]}]},{"pos":[28415,28422],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[28504,28505],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28554,28559],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28618,28619],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28716,28723],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[28805,28806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28855,28860],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28919,28920],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29169,29186],"content":"WaitOne(TimeSpan)","needQuote":true,"nodes":[{"content":"WaitOne(TimeSpan)","pos":[0,17]}]},{"pos":[29339,29346],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[29428,29429],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29481,29489],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[29551,29552],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29652,29659],"content":"WaitOne","needQuote":true,"nodes":[{"content":"WaitOne","pos":[0,7]}]},{"pos":[29741,29742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29794,29802],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[29864,29865],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30162,30199],"content":"WaitAll(WaitHandle[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], Int32, Boolean)","pos":[0,37]}]},{"pos":[30599,30606],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[30688,30689],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30753,30763],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[30838,30840]},{"content":",","pos":[30872,30873]},{"pos":[30927,30932],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[30992,30993]},{"pos":[31049,31056],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31117,31118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31260,31267],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[31349,31350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31414,31424],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[31498,31500],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[31529,31530]},{"pos":[31584,31589],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[31649,31650]},{"pos":[31706,31713],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[31774,31775],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32205,32245],"content":"WaitAll(WaitHandle[], TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], TimeSpan, Boolean)","pos":[0,40]}]},{"pos":[32657,32664],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[32746,32747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32811,32821],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[32896,32898]},{"content":",","pos":[32930,32931]},{"pos":[32988,32996],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[33059,33060]},{"pos":[33116,33123],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[33184,33185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33330,33337],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[33419,33420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33484,33494],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[33568,33570],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[33599,33600]},{"pos":[33657,33665],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[33728,33729]},{"pos":[33785,33792],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[33853,33854],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34262,34283],"content":"WaitAll(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[])","pos":[0,21]}]},{"pos":[34579,34586],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[34668,34669],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34733,34743],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[34818,34820]},{"pos":[34851,34852],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34966,34973],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[35055,35056],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35120,35130],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[35204,35206],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[35234,35235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35587,35615],"content":"WaitAll(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], Int32)","pos":[0,28]}]},{"pos":[35959,35966],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[36048,36049],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36113,36123],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[36198,36200]},{"content":",","pos":[36232,36233]},{"pos":[36287,36292],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36351,36352],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36479,36486],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[36568,36569],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36633,36643],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[36717,36719],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[36748,36749]},{"pos":[36803,36808],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36867,36868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37250,37281],"content":"WaitAll(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAll(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"pos":[37637,37644],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[37726,37727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37791,37801],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[37876,37878]},{"content":",","pos":[37910,37911]},{"pos":[37968,37976],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[38038,38039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38169,38176],"content":"WaitAll","needQuote":true,"nodes":[{"content":"WaitAll","pos":[0,7]}]},{"pos":[38258,38259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38323,38333],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[38407,38409],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[38438,38439]},{"pos":[38496,38504],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[38566,38567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38970,39007],"content":"WaitAny(WaitHandle[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], Int32, Boolean)","pos":[0,37]}]},{"pos":[39407,39414],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[39496,39497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39561,39571],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[39646,39648]},{"content":",","pos":[39680,39681]},{"pos":[39735,39740],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[39800,39801]},{"pos":[39857,39864],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39925,39926],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40068,40075],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[40157,40158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40222,40232],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[40306,40308],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[40337,40338]},{"pos":[40392,40397],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[40457,40458]},{"pos":[40514,40521],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40582,40583],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41013,41053],"content":"WaitAny(WaitHandle[], TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], TimeSpan, Boolean)","pos":[0,40]}]},{"pos":[41465,41472],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[41554,41555],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41619,41629],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[41704,41706]},{"content":",","pos":[41738,41739]},{"pos":[41796,41804],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[41867,41868]},{"pos":[41924,41931],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41992,41993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42138,42145],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[42227,42228],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42292,42302],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[42376,42378],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[42407,42408]},{"pos":[42465,42473],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[42536,42537]},{"pos":[42593,42600],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42661,42662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43086,43117],"content":"WaitAny(WaitHandle[], TimeSpan)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], TimeSpan)","pos":[0,31]}]},{"pos":[43473,43480],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[43562,43563],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43627,43637],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[43712,43714]},{"content":",","pos":[43746,43747]},{"pos":[43804,43812],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[43874,43875],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44005,44012],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[44094,44095],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44159,44169],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[44243,44245],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[44274,44275]},{"pos":[44332,44340],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[44402,44403],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44778,44799],"content":"WaitAny(WaitHandle[])","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[])","pos":[0,21]}]},{"pos":[45095,45102],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[45184,45185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45249,45259],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[45334,45336]},{"pos":[45367,45368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45482,45489],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[45571,45572],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45636,45646],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[45720,45722],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[45750,45751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46103,46131],"content":"WaitAny(WaitHandle[], Int32)","needQuote":true,"nodes":[{"content":"WaitAny(WaitHandle[], Int32)","pos":[0,28]}]},{"pos":[46475,46482],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[46564,46565],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46629,46639],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":"[]","pos":[46714,46716]},{"content":",","pos":[46748,46749]},{"pos":[46803,46808],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[46867,46868],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46995,47002],"content":"WaitAny","needQuote":true,"nodes":[{"content":"WaitAny","pos":[0,7]}]},{"pos":[47084,47085],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47149,47159],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[47233,47235],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[47264,47265]},{"pos":[47319,47324],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[47383,47384],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47782,47819],"content":"SignalAndWait(WaitHandle, WaitHandle)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle)","pos":[0,37]}]},{"pos":[48065,48078],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[48166,48167],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48231,48241],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[48316,48317]},{"pos":[48386,48396],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[48470,48471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48617,48630],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[48718,48719],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48783,48793],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[48868,48869]},{"pos":[48938,48948],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[49022,49023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49421,49477],"content":"SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)","pos":[0,56]}]},{"pos":[49787,49800],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[49888,49889],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49953,49963],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[50038,50039]},{"pos":[50108,50118],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[50193,50194]},{"pos":[50251,50259],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[50322,50323]},{"pos":[50379,50386],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[50447,50448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50625,50638],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[50726,50727],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50791,50801],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[50876,50877]},{"pos":[50946,50956],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[51031,51032]},{"pos":[51089,51097],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"content":",","pos":[51160,51161]},{"pos":[51217,51224],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[51285,51286],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51731,51784],"content":"SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)","needQuote":true,"nodes":[{"content":"SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)","pos":[0,53]}]},{"pos":[52088,52101],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[52189,52190],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52254,52264],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[52339,52340]},{"pos":[52409,52419],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[52494,52495]},{"pos":[52549,52554],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[52614,52615]},{"pos":[52671,52678],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[52739,52740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52914,52927],"content":"SignalAndWait","needQuote":true,"nodes":[{"content":"SignalAndWait","pos":[0,13]}]},{"pos":[53015,53016],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[53080,53090],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[53165,53166]},{"pos":[53235,53245],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[53320,53321]},{"pos":[53375,53380],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[53440,53441]},{"pos":[53497,53504],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[53565,53566],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53912,53919],"content":"Close()","needQuote":true,"nodes":[{"content":"Close()","pos":[0,7]}]},{"pos":[54036,54041],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[54121,54122],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54149,54150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54231,54236],"content":"Close","needQuote":true,"nodes":[{"content":"Close","pos":[0,5]}]},{"pos":[54316,54317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54344,54345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[54570,54586],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"pos":[54737,54744],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[54826,54827],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[54878,54885],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[54946,54947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55046,55053],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55135,55136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55187,55194],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[55255,55256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55492,55501],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[55622,55629],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55711,55712],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55739,55740],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[55823,55830],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[55912,55913],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[55940,55941],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[56153,56159],"content":"Handle","needQuote":true,"nodes":[{"content":"Handle","pos":[0,6]}]},{"pos":[56406,56420],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[56704,56728],"content":"MemberwiseClone(Boolean)","needQuote":true,"nodes":[{"content":"MemberwiseClone(Boolean)","pos":[0,24]}]},{"pos":[56891,56906],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[56994,56995],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57046,57053],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57114,57115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57220,57235],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[57323,57324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[57375,57382],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[57443,57444],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[57709,57729],"content":"GetLifetimeService()","needQuote":true,"nodes":[{"content":"GetLifetimeService()","pos":[0,20]}]},{"pos":[57868,57886],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[57977,57978],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58005,58006],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58098,58116],"content":"GetLifetimeService","needQuote":true,"nodes":[{"content":"GetLifetimeService","pos":[0,18]}]},{"pos":[58207,58208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58235,58236],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58491,58518],"content":"InitializeLifetimeService()","needQuote":true,"nodes":[{"content":"InitializeLifetimeService()","pos":[0,27]}]},{"pos":[58671,58696],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[58794,58795],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[58822,58823],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[58922,58947],"content":"InitializeLifetimeService","needQuote":true,"nodes":[{"content":"InitializeLifetimeService","pos":[0,25]}]},{"pos":[59045,59046],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59073,59074],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59343,59361],"content":"CreateObjRef(Type)","needQuote":true,"nodes":[{"content":"CreateObjRef(Type)","pos":[0,18]}]},{"pos":[59512,59524],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[59609,59610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59658,59662],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[59720,59721],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[59820,59832],"content":"CreateObjRef","needQuote":true,"nodes":[{"content":"CreateObjRef","pos":[0,12]}]},{"pos":[59917,59918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[59966,59970],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[60028,60029],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60248,60258],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[60353,60361],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60430,60431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60458,60459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60529,60537],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[60606,60607],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[60634,60635],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[60818,60832],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[60951,60957],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61024,61025],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61075,61081],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61141,61142],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61225,61231],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61298,61299],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61349,61355],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[61415,61416],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[61630,61652],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[61800,61806],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[61873,61874],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[61924,61930],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[61991,61992]},{"pos":[62047,62053],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62113,62114],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62211,62217],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[62284,62285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[62335,62341],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[62402,62403]},{"pos":[62458,62464],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[62524,62525],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[62770,62801],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[62967,62982],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63058,63059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63109,63115],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63176,63177]},{"pos":[63232,63238],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63298,63299],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63405,63420],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[63496,63497],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[63547,63553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[63614,63615]},{"pos":[63670,63676],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[63736,63737],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[63967,63980],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[64081,64092],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64164,64165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64192,64193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64266,64277],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[64349,64350],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64377,64378],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64553,64562],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[64655,64662],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64730,64731],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64758,64759],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[64828,64835],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[64903,64904],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[64931,64932],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65107,65124],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[65233,65248],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65324,65325],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65352,65353],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65430,65445],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[65521,65522],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[65549,65550],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[65899,65918],"content":"GetSafeWaitHandle()","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle()","pos":[0,19]}]},{"pos":[66079,66096],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[66177,66178],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66205,66206],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66309,66326],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[66407,66408],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[66435,66436],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[66943,66976],"content":"SetSafeWaitHandle(SafeWaitHandle)","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle(SafeWaitHandle)","pos":[0,33]}]},{"pos":[67223,67240],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[67321,67322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67401,67415],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[67483,67484],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[67631,67648],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[67729,67730],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[67809,67823],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[67891,67892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68165,68171],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[68355,68384],"content":"GetSafeWaitHandle(WaitHandle)","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle(WaitHandle)","pos":[0,29]}]},{"pos":[68601,68618],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[68699,68700],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[68764,68774],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[68848,68849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[68981,68998],"content":"GetSafeWaitHandle","needQuote":true,"nodes":[{"content":"GetSafeWaitHandle","pos":[0,17]}]},{"pos":[69079,69080],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[69144,69154],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"pos":[69228,69229],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[69513,69533],"content":"WaitHandleExtensions","needQuote":true,"nodes":[{"content":"WaitHandleExtensions","pos":[0,20]}]},{"pos":[69836,69881],"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle(WaitHandle, SafeWaitHandle)","pos":[0,45]}]},{"pos":[70185,70202],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[70283,70284],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70348,70358],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[70433,70434]},{"pos":[70518,70532],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[70600,70601],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[70776,70793],"content":"SetSafeWaitHandle","needQuote":true,"nodes":[{"content":"SetSafeWaitHandle","pos":[0,17]}]},{"pos":[70874,70875],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[70939,70949],"content":"WaitHandle","needQuote":true,"nodes":[{"content":"WaitHandle","pos":[0,10]}]},{"content":",","pos":[71024,71025]},{"pos":[71109,71123],"content":"SafeWaitHandle","needQuote":true,"nodes":[{"content":"SafeWaitHandle","pos":[0,14]}]},{"pos":[71191,71192],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[71500,71505],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[71647,71653],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[71799,71806],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[71977,71986],"content":"Semaphore","needQuote":true,"nodes":[{"content":"Semaphore","pos":[0,9]}]},{"pos":[72171,72188],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[72370,72397],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[72616,72627],"content":"IOException","needQuote":true,"nodes":[{"content":"IOException","pos":[0,11]}]},{"pos":[72814,72841],"content":"UnauthorizedAccessException","needQuote":true,"nodes":[{"content":"UnauthorizedAccessException","pos":[0,27]}]},{"pos":[73069,73102],"content":"WaitHandleCannotBeOpenedException","needQuote":true,"nodes":[{"content":"WaitHandleCannotBeOpenedException","pos":[0,33]}]},{"pos":[73346,73367],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[73566,73588],"content":"SemaphoreFullException","needQuote":true,"nodes":[{"content":"SemaphoreFullException","pos":[0,22]}]}],"content":"items:\n- uid: System.Threading.Semaphore\n  commentId: T:System.Threading.Semaphore\n  id: Semaphore\n  parent: System.Threading\n  children:\n  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32)\n  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)\n  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)\n  - System.Threading.Semaphore.OpenExisting(System.String)\n  - System.Threading.Semaphore.Release\n  - System.Threading.Semaphore.Release(System.Int32)\n  - System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)\n  langs:\n  - csharp\n  - vb\n  name: Semaphore\n  fullName: System.Threading.Semaphore\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Semaphore\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 13\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Limits the number of threads that can access a resource or pool of resources concurrently. </p>\\n\"\n  syntax:\n    content: 'public sealed class Semaphore : WaitHandle, IDisposable'\n    content.vb: >-\n      Public NotInheritable Class Semaphore\n          Inherits WaitHandle\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  - System.MarshalByRefObject\n  - System.Threading.WaitHandle\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Threading.WaitHandle.WaitTimeout\n  - System.Threading.WaitHandle.InvalidHandle\n  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitOne\n  - System.Threading.WaitHandle.WaitOne(System.Int32)\n  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  - System.Threading.WaitHandle.Close\n  - System.Threading.WaitHandle.Dispose(System.Boolean)\n  - System.Threading.WaitHandle.Dispose\n  - System.Threading.WaitHandle.Handle\n  - System.Threading.WaitHandle.SafeWaitHandle\n  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  - System.MarshalByRefObject.GetLifetimeService\n  - System.MarshalByRefObject.InitializeLifetimeService\n  - System.MarshalByRefObject.CreateObjRef(System.Type)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: Semaphore\n  extensionMethods:\n  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32)\n  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)\n  id: '#ctor(System.Int32,System.Int32)'\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: Semaphore(Int32, Int32)\n  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 15\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Semaphore\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries. </p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public Semaphore(int initialCount, int maximumCount)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Sub New(initialCount As Integer, maximumCount As Integer)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The initial number of requests for the semaphore that can be granted concurrently. </p>\\n\"\n    - id: maximumCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Semaphore.Semaphore(Int32, Int32)\n- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)\n  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)\n  id: '#ctor(System.Int32,System.Int32,System.String)'\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: Semaphore(Int32, Int32, String)\n  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 18\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Semaphore\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object. </p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public Semaphore(int initialCount, int maximumCount, string name)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Sub New(initialCount As Integer, maximumCount As Integer, name As String)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The initial number of requests for the semaphore that can be granted concurrently. </p>\\n\"\n    - id: maximumCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of requests for the semaphore that can be granted concurrently.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of a named system semaphore object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named semaphore exists and has access control security, and the user does not have <xref href=\\\"System.Security.AccessControl.SemaphoreRights.FullControl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Semaphore.Semaphore(Int32, Int32, String)\n- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)\n  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)\n  id: '#ctor(System.Int32,System.Int32,System.String,System.Boolean@)'\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: Semaphore(Int32, Int32, String, out Boolean)\n  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String, out System.Boolean)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 51\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.Semaphore\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public Semaphore(int initialCount, int maximumCount, string name, out bool createdNew)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Sub New(initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)\n    parameters:\n    - id: initialCount\n      type: System.Int32\n      description: \"\\n<p>The initial number of requests for the semaphore that can be satisfied concurrently. </p>\\n\"\n    - id: maximumCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of requests for the semaphore that can be satisfied concurrently.</p>\\n\"\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of a named system semaphore object.</p>\\n\"\n    - id: createdNew\n      type: System.Boolean\n      description: \"\\n<p>When this method returns, contains <strong>true</strong> if a local semaphore was created (that is, if <em>name</em> is <strong>null</strong> or an empty string) or if the specified named system semaphore was created; <strong>false</strong> if the specified named system semaphore already existed. This parameter is passed uninitialized.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>initialCount</em> is greater than <em>maximumCount</em>. </p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>maximumCount</em> is less than 1.</p>\\n<p>-or-</p>\\n<p>\\n<em>initialCount</em> is less than 0.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named semaphore exists and has access control security, and the user does not have <xref href=\\\"System.Security.AccessControl.SemaphoreRights.FullControl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String, ByRef System.Boolean)\n  name.vb: Semaphore(Int32, Int32, String, ByRef Boolean)\n  nameWithType: Semaphore.Semaphore(Int32, Int32, String, out Boolean)\n  nameWithType.vb: Semaphore.Semaphore(Int32, Int32, String, ByRef Boolean)\n- uid: System.Threading.Semaphore.OpenExisting(System.String)\n  commentId: M:System.Threading.Semaphore.OpenExisting(System.String)\n  id: OpenExisting(System.String)\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: OpenExisting(String)\n  fullName: System.Threading.Semaphore.OpenExisting(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: OpenExisting\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 109\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Opens the specified named semaphore, if it already exists.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static Semaphore OpenExisting(string name)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function OpenExisting(name As String) As Semaphore\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the system semaphore to open.</p>\\n\"\n    return:\n      type: System.Threading.Semaphore\n      description: \"\\n<p>An object that represents the named system semaphore.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.Threading.WaitHandleCannotBeOpenedException\n    commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n    description: \"\\n<p>The named semaphore does not exist.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named semaphore exists, but the user does not have the security access required to use it. </p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Semaphore.OpenExisting(String)\n- uid: System.Threading.Semaphore.Release\n  commentId: M:System.Threading.Semaphore.Release\n  id: Release\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: Release()\n  fullName: System.Threading.Semaphore.Release()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Release\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 173\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Exits the semaphore and returns the previous count.</p>\\n\"\n  syntax:\n    content: public int Release()\n    content.vb: Public Function Release As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The count on the semaphore before the <xref href=\\\"System.Threading.Semaphore.Release\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called. </p>\\n\"\n  exceptions:\n  - type: System.Threading.SemaphoreFullException\n    commentId: T:System.Threading.SemaphoreFullException\n    description: \"\\n<p>The semaphore count is already at the maximum value.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred with a named semaphore.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The current semaphore represents a named system semaphore, but the user does not have <xref href=\\\"System.Security.AccessControl.SemaphoreRights.Modify\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>-or-</p>\\n<p>The current semaphore represents a named system semaphore, but it was not opened with <xref href=\\\"System.Security.AccessControl.SemaphoreRights.Modify\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Semaphore.Release()\n- uid: System.Threading.Semaphore.Release(System.Int32)\n  commentId: M:System.Threading.Semaphore.Release(System.Int32)\n  id: Release(System.Int32)\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: Release(Int32)\n  fullName: System.Threading.Semaphore.Release(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Release\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 179\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Exits the semaphore a specified number of times and returns the previous count.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public int Release(int releaseCount)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function Release(releaseCount As Integer) As Integer\n    parameters:\n    - id: releaseCount\n      type: System.Int32\n      description: \"\\n<p>The number of times to exit the semaphore.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The count on the semaphore before the <xref href=\\\"System.Threading.Semaphore.Release\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method was called. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>releaseCount</em> is less than 1.</p>\\n\"\n  - type: System.Threading.SemaphoreFullException\n    commentId: T:System.Threading.SemaphoreFullException\n    description: \"\\n<p>The semaphore count is already at the maximum value.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred with a named semaphore.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The current semaphore represents a named system semaphore, but the user does not have <xref href=\\\"System.Security.AccessControl.SemaphoreRights.Modify\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> rights.</p>\\n<p>-or-</p>\\n<p>The current semaphore represents a named system semaphore, but it was not opened with <xref href=\\\"System.Security.AccessControl.SemaphoreRights.Modify\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> rights.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Semaphore.Release(Int32)\n- uid: System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)\n  commentId: M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)\n  id: TryOpenExisting(System.String,System.Threading.Semaphore@)\n  parent: System.Threading.Semaphore\n  langs:\n  - csharp\n  - vb\n  name: TryOpenExisting(String, out Semaphore)\n  fullName: System.Threading.Semaphore.TryOpenExisting(System.String, out System.Threading.Semaphore)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Semaphore.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TryOpenExisting\n    path: src/mscorlib/src/System/Threading/Semaphore.cs\n    startLine: 127\n  assemblies:\n  - System.Threading\n  namespace: System.Threading\n  summary: \"\\n<p>Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public static bool TryOpenExisting(string name, out Semaphore result)\n    content.vb: >-\n      <SecurityCritical>\n\n      Public Shared Function TryOpenExisting(name As String, ByRef result As Semaphore) As Boolean\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the system semaphore to open.</p>\\n\"\n    - id: result\n      type: System.Threading.Semaphore\n      description: \"\\n<p>When this method returns, contains a <xref href=\\\"System.Threading.Semaphore\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the named semaphore if the call succeeded, or <strong>null</strong> if the call failed. This parameter is treated as uninitialized.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the named semaphore was opened successfully; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>name</em> is an empty string.</p>\\n<p>-or-</p>\\n<p>\\n<em>name</em> is longer than 260 characters.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>name</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.IO.IOException\n    commentId: T:System.IO.IOException\n    description: \"\\n<p>A Win32 error occurred.</p>\\n\"\n  - type: System.UnauthorizedAccessException\n    commentId: T:System.UnauthorizedAccessException\n    description: \"\\n<p>The named semaphore exists, but the user does not have the security access required to use it. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.Semaphore.TryOpenExisting(System.String, ByRef System.Threading.Semaphore)\n  name.vb: TryOpenExisting(String, ByRef Semaphore)\n  nameWithType: Semaphore.TryOpenExisting(String, out Semaphore)\n  nameWithType.vb: Semaphore.TryOpenExisting(String, ByRef Semaphore)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.MarshalByRefObject\n  parent: System\n  isExternal: true\n  name: MarshalByRefObject\n  fullName: System.MarshalByRefObject\n  nameWithType: MarshalByRefObject\n  commentId: T:System.MarshalByRefObject\n- uid: System.Threading.WaitHandle\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandle\n  fullName: System.Threading.WaitHandle\n  nameWithType: WaitHandle\n  commentId: T:System.Threading.WaitHandle\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Threading.WaitHandle.WaitTimeout\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitTimeout\n  fullName: System.Threading.WaitHandle.WaitTimeout\n  nameWithType: WaitHandle.WaitTimeout\n  commentId: F:System.Threading.WaitHandle.WaitTimeout\n- uid: System.Threading.WaitHandle.InvalidHandle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: InvalidHandle\n  fullName: System.Threading.WaitHandle.InvalidHandle\n  nameWithType: WaitHandle.InvalidHandle\n  commentId: F:System.Threading.WaitHandle.InvalidHandle\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitOne(System.Int32, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitOne\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne()\n  fullName: System.Threading.WaitHandle.WaitOne()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne()\n  commentId: M:System.Threading.WaitHandle.WaitOne\n- uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(Int32)\n  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(Int32)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32)\n- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitOne(TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n    name: WaitOne\n    fullName: System.Threading.WaitHandle.WaitOne\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitOne(TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32, System.Boolean)\n  name.vb: WaitAll(WaitHandle(), Int32, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)\n  name.vb: WaitAll(WaitHandle(), TimeSpan, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())\n  name.vb: WaitAll(WaitHandle())\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle())\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAll(WaitHandle(), Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)\n- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAll(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)\n  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAll(WaitHandle(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAll\n    fullName: System.Threading.WaitHandle.WaitAll\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], Int32, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32, System.Boolean)\n  name.vb: WaitAny(WaitHandle(), Int32, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)\n  name.vb: WaitAny(WaitHandle(), TimeSpan, Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], TimeSpan)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)\n  name.vb: WaitAny(WaitHandle(), TimeSpan)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[])\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())\n  name.vb: WaitAny(WaitHandle())\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[])\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle())\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\n- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: WaitAny(WaitHandle[], Int32)\n  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)\n  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)\n  name.vb: WaitAny(WaitHandle(), Int32)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n    name: WaitAny\n    fullName: System.Threading.WaitHandle.WaitAny\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)\n  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32)\n  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.TimeSpan, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.TimeSpan\n    name: TimeSpan\n    fullName: System.TimeSpan\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)\n- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.Int32, System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n    name: SignalAndWait\n    fullName: System.Threading.WaitHandle.SignalAndWait\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)\n  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)\n- uid: System.Threading.WaitHandle.Close\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Close()\n  fullName: System.Threading.WaitHandle.Close()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Close\n    name: Close\n    fullName: System.Threading.WaitHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Close\n    name: Close\n    fullName: System.Threading.WaitHandle.Close\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Close()\n  commentId: M:System.Threading.WaitHandle.Close\n- uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Dispose(Boolean)\n  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Dispose(Boolean)\n  commentId: M:System.Threading.WaitHandle.Dispose(System.Boolean)\n- uid: System.Threading.WaitHandle.Dispose\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Dispose()\n  fullName: System.Threading.WaitHandle.Dispose()\n  spec.csharp:\n  - uid: System.Threading.WaitHandle.Dispose\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandle.Dispose\n    name: Dispose\n    fullName: System.Threading.WaitHandle.Dispose\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandle.Dispose()\n  commentId: M:System.Threading.WaitHandle.Dispose\n- uid: System.Threading.WaitHandle.Handle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: Handle\n  fullName: System.Threading.WaitHandle.Handle\n  nameWithType: WaitHandle.Handle\n  commentId: P:System.Threading.WaitHandle.Handle\n- uid: System.Threading.WaitHandle.SafeWaitHandle\n  parent: System.Threading.WaitHandle\n  isExternal: true\n  name: SafeWaitHandle\n  fullName: System.Threading.WaitHandle.SafeWaitHandle\n  nameWithType: WaitHandle.SafeWaitHandle\n  commentId: P:System.Threading.WaitHandle.SafeWaitHandle\n- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: MemberwiseClone(Boolean)\n  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n    name: MemberwiseClone\n    fullName: System.MarshalByRefObject.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)\n  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)\n- uid: System.MarshalByRefObject.GetLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: GetLifetimeService()\n  fullName: System.MarshalByRefObject.GetLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.GetLifetimeService\n    name: GetLifetimeService\n    fullName: System.MarshalByRefObject.GetLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.GetLifetimeService()\n  commentId: M:System.MarshalByRefObject.GetLifetimeService\n- uid: System.MarshalByRefObject.InitializeLifetimeService\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: InitializeLifetimeService()\n  fullName: System.MarshalByRefObject.InitializeLifetimeService()\n  spec.csharp:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.InitializeLifetimeService\n    name: InitializeLifetimeService\n    fullName: System.MarshalByRefObject.InitializeLifetimeService\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.InitializeLifetimeService()\n  commentId: M:System.MarshalByRefObject.InitializeLifetimeService\n- uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n  parent: System.MarshalByRefObject\n  isExternal: true\n  name: CreateObjRef(Type)\n  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)\n  spec.csharp:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)\n    name: CreateObjRef\n    fullName: System.MarshalByRefObject.CreateObjRef\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MarshalByRefObject.CreateObjRef(Type)\n  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  parent: System.Threading.WaitHandleExtensions\n  definition: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  name: GetSafeWaitHandle()\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle()\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle()\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  parent: System.Threading.WaitHandleExtensions\n  definition: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  name: SetSafeWaitHandle(SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  isExternal: true\n  name: GetSafeWaitHandle(WaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n    name: GetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)\n- uid: System.Threading.WaitHandleExtensions\n  parent: System.Threading\n  isExternal: false\n  name: WaitHandleExtensions\n  fullName: System.Threading.WaitHandleExtensions\n  nameWithType: WaitHandleExtensions\n  commentId: T:System.Threading.WaitHandleExtensions\n- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  isExternal: true\n  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)\n  spec.csharp:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n    name: SetSafeWaitHandle\n    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle\n  - name: (\n    fullName: (\n  - uid: System.Threading.WaitHandle\n    name: WaitHandle\n    fullName: System.Threading.WaitHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle\n    name: SafeWaitHandle\n    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle\n  - name: )\n    fullName: )\n  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)\n  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.Semaphore\n  parent: System.Threading\n  isExternal: false\n  name: Semaphore\n  fullName: System.Threading.Semaphore\n  nameWithType: Semaphore\n  commentId: T:System.Threading.Semaphore\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.IO.IOException\n  parent: System.IO\n  isExternal: false\n  name: IOException\n  fullName: System.IO.IOException\n  nameWithType: IOException\n  commentId: T:System.IO.IOException\n- uid: System.UnauthorizedAccessException\n  parent: System\n  isExternal: false\n  name: UnauthorizedAccessException\n  fullName: System.UnauthorizedAccessException\n  nameWithType: UnauthorizedAccessException\n  commentId: T:System.UnauthorizedAccessException\n- uid: System.Threading.WaitHandleCannotBeOpenedException\n  isExternal: false\n  name: WaitHandleCannotBeOpenedException\n  fullName: System.Threading.WaitHandleCannotBeOpenedException\n  nameWithType: WaitHandleCannotBeOpenedException\n  commentId: T:System.Threading.WaitHandleCannotBeOpenedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.Threading.SemaphoreFullException\n  isExternal: false\n  name: SemaphoreFullException\n  fullName: System.Threading.SemaphoreFullException\n  nameWithType: SemaphoreFullException\n  commentId: T:System.Threading.SemaphoreFullException\n"}