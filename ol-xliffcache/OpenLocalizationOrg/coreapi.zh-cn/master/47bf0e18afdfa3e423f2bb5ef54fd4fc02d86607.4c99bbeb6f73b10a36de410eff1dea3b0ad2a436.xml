{"nodes":[{"pos":[1567,1576],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[2584,2587],"content":"Any","needQuote":true,"nodes":[{"content":"Any","pos":[0,3]}]},{"pos":[3583,3592],"content":"Broadcast","needQuote":true,"nodes":[{"content":"Broadcast","pos":[0,9]}]},{"pos":[4534,4541],"content":"IPv6Any","needQuote":true,"nodes":[{"content":"IPv6Any","pos":[0,7]}]},{"pos":[5819,5831],"content":"IPv6Loopback","needQuote":true,"nodes":[{"content":"IPv6Loopback","pos":[0,12]}]},{"pos":[6793,6801],"content":"IPv6None","needQuote":true,"nodes":[{"content":"IPv6None","pos":[0,8]}]},{"pos":[7789,7797],"content":"Loopback","needQuote":true,"nodes":[{"content":"Loopback","pos":[0,8]}]},{"pos":[8724,8728],"content":"None","needQuote":true,"nodes":[{"content":"None","pos":[0,4]}]},{"pos":[9731,9748],"content":"IPAddress(Byte[])","needQuote":true,"nodes":[{"content":"IPAddress(Byte[])","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The byte array value of the IP address.","pos":[10590,10634],"source":"\\n<p>The byte array value of the IP address."},{"content":"&lt;/p&gt;\\n","pos":[10635,10641],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[10760,10809],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[10810,10816],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; contains a bad IP address.","pos":[10913,10963],"source":"\\n<p>\\n<em>address</em> contains a bad IP address."},{"content":"&lt;/p&gt;\\n","pos":[10964,10970],"source":" </p>\\n"},{"pos":[11451,11475],"content":"IPAddress(Byte[], Int64)","needQuote":true,"nodes":[{"content":"IPAddress(Byte[], Int64)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The byte array value of the IP address.","pos":[12397,12441],"source":"\\n<p>The byte array value of the IP address."},{"content":"&lt;/p&gt;\\n","pos":[12442,12448],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The long value of the scope identifier.","pos":[12513,12557],"source":"\\n<p>The long value of the scope identifier."},{"content":"&lt;/p&gt;\\n","pos":[12558,12564],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12683,12732],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12733,12739],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; contains a bad IP address.","pos":[12836,12886],"source":"\\n<p>\\n<em>address</em> contains a bad IP address."},{"content":"&lt;/p&gt;\\n","pos":[12887,12893],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;scopeid&lt;/em&gt; &lt; 0 or &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;scopeid&lt;/em&gt; &gt; 0x00000000FFFFFFFF &lt;/p&gt;\\n","pos":[13010,13096],"source":"\\n<p>\\n<em>scopeid</em> < 0 or </p>\\n<p>\\n<em>scopeid</em> > 0x00000000FFFFFFFF </p>\\n"},{"pos":[13570,13586],"content":"IPAddress(Int64)","needQuote":true,"nodes":[{"content":"IPAddress(Int64)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;newAddress&lt;/em&gt; &lt; 0 or &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;newAddress&lt;/em&gt; &gt; 0x00000000FFFFFFFF &lt;/p&gt;\\n","pos":[14700,14792],"source":"\\n<p>\\n<em>newAddress</em> < 0 or </p>\\n<p>\\n<em>newAddress</em> > 0x00000000FFFFFFFF </p>\\n"},{"pos":[15073,15086],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[16350,16368],"content":"IsIPv4MappedToIPv6","needQuote":true,"nodes":[{"content":"IsIPv4MappedToIPv6","pos":[0,18]}]},{"pos":[17589,17604],"content":"IsIPv6LinkLocal","needQuote":true,"nodes":[{"content":"IsIPv6LinkLocal","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the IP address is an IPv6 link local address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[18288,18406],"source":"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 link local address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[18713,18728],"content":"IsIPv6Multicast","needQuote":true,"nodes":[{"content":"IsIPv6Multicast","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the IP address is an IPv6 multicast global address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[19418,19542],"source":"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 multicast global address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[19849,19864],"content":"IsIPv6SiteLocal","needQuote":true,"nodes":[{"content":"IsIPv6SiteLocal","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the IP address is an IPv6 site local address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[20548,20666],"source":"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 site local address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[20964,20976],"content":"IsIPv6Teredo","needQuote":true,"nodes":[{"content":"IsIPv6Teredo","pos":[0,12]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the IP address is an IPv6 Teredo address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[21644,21758],"source":"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 Teredo address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[23282,23289],"content":"ScopeId","needQuote":true,"nodes":[{"content":"ScopeId","pos":[0,7]}]},{"content":"\\n&lt;p&gt;A long integer that specifies the scope of the address.&lt;/p&gt;\\n","pos":[23924,23990],"source":"\\n<p>A long integer that specifies the scope of the address.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;AddressFamily&lt;/strong&gt; = &lt;strong&gt;InterNetwork&lt;/strong&gt;.","pos":[24121,24191],"source":"\\n<p>\\n<strong>AddressFamily</strong> = <strong>InterNetwork</strong>."},{"content":"&lt;/p&gt;\\n","pos":[24192,24198],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;scopeId&lt;/em&gt; &lt; 0&lt;/p&gt;\\n&lt;p&gt;- or -&lt;/p&gt;\\n&lt;ul&gt;&lt;li&gt;\\n&lt;p&gt;\\n&lt;em&gt;scopeId&lt;/em&gt; &gt; 0x00000000FFFFFFFF  &lt;/p&gt;\\n&lt;/li&gt;&lt;/ul&gt;\\n","pos":[24315,24435],"source":"\\n<p>\\n<em>scopeId</em> < 0</p>\\n<p>- or -</p>\\n<ul><li>\\n<p>\\n<em>scopeId</em> > 0x00000000FFFFFFFF  </p>\\n</li></ul>\\n"},{"pos":[24747,24761],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the two addresses are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[25638,25739],"source":"\\n<p>\\n<strong>true</strong> if the two addresses are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[26101,26118],"content":"GetAddressBytes()","needQuote":true,"nodes":[{"content":"GetAddressBytes()","pos":[0,17]}]},{"pos":[27204,27217],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;An integer hash value.&lt;/p&gt;\\n","pos":[27850,27883],"source":"\\n<p>An integer hash value.</p>\\n"},{"pos":[28285,28310],"content":"HostToNetworkOrder(Int16)","needQuote":true,"nodes":[{"content":"HostToNetworkOrder(Int16)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in host byte order.","pos":[29049,29106],"source":"\\n<p>The number to convert, expressed in host byte order."},{"content":"&lt;/p&gt;\\n","pos":[29107,29113],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A short value, expressed in network byte order.&lt;/p&gt;\\n","pos":[29172,29230],"source":"\\n<p>A short value, expressed in network byte order.</p>\\n"},{"pos":[29745,29770],"content":"HostToNetworkOrder(Int32)","needQuote":true,"nodes":[{"content":"HostToNetworkOrder(Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in host byte order.","pos":[30512,30569],"source":"\\n<p>The number to convert, expressed in host byte order."},{"content":"&lt;/p&gt;\\n","pos":[30570,30576],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer value, expressed in network byte order.&lt;/p&gt;\\n","pos":[30635,30696],"source":"\\n<p>An integer value, expressed in network byte order.</p>\\n"},{"pos":[31211,31236],"content":"HostToNetworkOrder(Int64)","needQuote":true,"nodes":[{"content":"HostToNetworkOrder(Int64)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in host byte order.","pos":[31970,32027],"source":"\\n<p>The number to convert, expressed in host byte order."},{"content":"&lt;/p&gt;\\n","pos":[32028,32034],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A long value, expressed in network byte order.&lt;/p&gt;\\n","pos":[32093,32150],"source":"\\n<p>A long value, expressed in network byte order.</p>\\n"},{"pos":[32665,32686],"content":"IsLoopback(IPAddress)","needQuote":true,"nodes":[{"content":"IsLoopback(IPAddress)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;An IP address.","pos":[33428,33447],"source":"\\n<p>An IP address."},{"content":"&lt;/p&gt;\\n","pos":[33448,33454],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;address&lt;/em&gt; is the loopback address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[33515,33629],"source":"\\n<p>\\n<strong>true</strong> if <em>address</em> is the loopback address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[33925,33936],"content":"MapToIPv4()","needQuote":true,"nodes":[{"content":"MapToIPv4()","pos":[0,11]}]},{"pos":[35024,35035],"content":"MapToIPv6()","needQuote":true,"nodes":[{"content":"MapToIPv6()","pos":[0,11]}]},{"pos":[36192,36217],"content":"NetworkToHostOrder(Int16)","needQuote":true,"nodes":[{"content":"NetworkToHostOrder(Int16)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in network byte order.","pos":[36965,37025],"source":"\\n<p>The number to convert, expressed in network byte order."},{"content":"&lt;/p&gt;\\n","pos":[37026,37032],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A short value, expressed in host byte order.&lt;/p&gt;\\n","pos":[37091,37146],"source":"\\n<p>A short value, expressed in host byte order.</p>\\n"},{"pos":[37661,37686],"content":"NetworkToHostOrder(Int32)","needQuote":true,"nodes":[{"content":"NetworkToHostOrder(Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in network byte order.","pos":[38437,38497],"source":"\\n<p>The number to convert, expressed in network byte order."},{"content":"&lt;/p&gt;\\n","pos":[38498,38504],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An integer value, expressed in host byte order.&lt;/p&gt;\\n","pos":[38563,38621],"source":"\\n<p>An integer value, expressed in host byte order.</p>\\n"},{"pos":[39136,39161],"content":"NetworkToHostOrder(Int64)","needQuote":true,"nodes":[{"content":"NetworkToHostOrder(Int64)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The number to convert, expressed in network byte order.","pos":[39904,39964],"source":"\\n<p>The number to convert, expressed in network byte order."},{"content":"&lt;/p&gt;\\n","pos":[39965,39971],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A long value, expressed in host byte order.&lt;/p&gt;\\n","pos":[40030,40084],"source":"\\n<p>A long value, expressed in host byte order.</p>\\n"},{"pos":[40563,40576],"content":"Parse(String)","needQuote":true,"nodes":[{"content":"Parse(String)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6.","pos":[41347,41465],"source":"\\n<p>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6."},{"content":"&lt;/p&gt;\\n","pos":[41466,41472],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ipString&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[41762,41812],"source":"\\n<p>\\n<em>ipString</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[41813,41819],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;ipString&lt;/em&gt; is not a valid IP address.","pos":[41912,41963],"source":"\\n<p>\\n<em>ipString</em> is not a valid IP address."},{"content":"&lt;/p&gt;\\n","pos":[41964,41970],"source":" </p>\\n"},{"pos":[42255,42265],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.&lt;/p&gt;\\n","pos":[42904,43018],"source":"\\n<p>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</p>\\n"},{"pos":[43749,43780],"content":"TryParse(String, out IPAddress)","needQuote":true,"nodes":[{"content":"TryParse(String, out IPAddress)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The string to validate.&lt;/p&gt;\\n","pos":[44557,44591],"source":"\\n<p>The string to validate.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;ipString&lt;/em&gt; was able to be parsed as an IP address; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[44843,44973],"source":"\\n<p>\\n<strong>true</strong> if <em>ipString</em> was able to be parsed as an IP address; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[45367,45377],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[45520,45526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45713,45735],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[45883,45889],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45956,45957],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46007,46013],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46074,46075]},{"pos":[46130,46136],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46196,46197],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46294,46300],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46367,46368],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46418,46424],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46485,46486]},{"pos":[46541,46547],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46607,46608],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46853,46884],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[47050,47065],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47141,47142],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47192,47198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47259,47260]},{"pos":[47315,47321],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47381,47382],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47488,47503],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47579,47580],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47630,47636],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47697,47698]},{"pos":[47753,47759],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47819,47820],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48046,48055],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[48148,48155],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[48223,48224],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48251,48252],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48321,48328],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[48396,48397],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48424,48425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48600,48617],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[48726,48741],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48817,48818],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48845,48846],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48923,48938],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[49014,49015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[49042,49043],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[49188,49194],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[49336,49345],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[49470,49476],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[49596,49600],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[49659,49661]},{"pos":[49724,49728],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[49786,49788],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[49920,49925],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[50098,50111],"content":"AddressFamily","needQuote":true,"nodes":[{"content":"AddressFamily","pos":[0,13]}]},{"pos":[50289,50307],"content":"System.Net.Sockets","needQuote":true,"nodes":[{"content":"System.Net.Sockets","pos":[0,18]}]},{"pos":[50475,50482],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[50658,50672],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[50791,50797],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50864,50865],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50915,50921],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50981,50982],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51065,51071],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[51138,51139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51189,51195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[51255,51256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51446,51459],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[51560,51571],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51643,51644],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51671,51672],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51745,51756],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[51828,51829],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51856,51857],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52017,52022],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52163,52168],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[52310,52316],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[52476,52486],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[52581,52589],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[52658,52659],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52686,52687],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52757,52765],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[52834,52835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52862,52863],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[53016,53037],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[53238,53255],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[53437,53464],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[53676,53691],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[53896,53911],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  id: IPAddress\n  parent: System.Net\n  children:\n  - System.Net.IPAddress.#ctor(System.Byte[])\n  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  - System.Net.IPAddress.#ctor(System.Int64)\n  - System.Net.IPAddress.AddressFamily\n  - System.Net.IPAddress.Any\n  - System.Net.IPAddress.Broadcast\n  - System.Net.IPAddress.Equals(System.Object)\n  - System.Net.IPAddress.GetAddressBytes\n  - System.Net.IPAddress.GetHashCode\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  - System.Net.IPAddress.IPv6Any\n  - System.Net.IPAddress.IPv6Loopback\n  - System.Net.IPAddress.IPv6None\n  - System.Net.IPAddress.IsIPv4MappedToIPv6\n  - System.Net.IPAddress.IsIPv6LinkLocal\n  - System.Net.IPAddress.IsIPv6Multicast\n  - System.Net.IPAddress.IsIPv6SiteLocal\n  - System.Net.IPAddress.IsIPv6Teredo\n  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  - System.Net.IPAddress.Loopback\n  - System.Net.IPAddress.MapToIPv4\n  - System.Net.IPAddress.MapToIPv6\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  - System.Net.IPAddress.None\n  - System.Net.IPAddress.Parse(System.String)\n  - System.Net.IPAddress.ScopeId\n  - System.Net.IPAddress.ToString\n  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  langs:\n  - csharp\n  - vb\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPAddress\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 173\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides an Internet Protocol (IP) address.</p>\\n\"\n  syntax:\n    content: public class IPAddress\n    content.vb: Public Class IPAddress\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: IPAddress\n- uid: System.Net.IPAddress.Any\n  commentId: F:System.Net.IPAddress.Any\n  id: Any\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: Any\n  fullName: System.Net.IPAddress.Any\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Any\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 175\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress Any\n    content.vb: Public Shared ReadOnly Any As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.Any\n- uid: System.Net.IPAddress.Broadcast\n  commentId: F:System.Net.IPAddress.Broadcast\n  id: Broadcast\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: Broadcast\n  fullName: System.Net.IPAddress.Broadcast\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Broadcast\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 176\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides the IP broadcast address. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress Broadcast\n    content.vb: Public Shared ReadOnly Broadcast As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.Broadcast\n- uid: System.Net.IPAddress.IPv6Any\n  commentId: F:System.Net.IPAddress.IPv6Any\n  id: IPv6Any\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPv6Any\n  fullName: System.Net.IPAddress.IPv6Any\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv6Any\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 177\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>The <xref href=\\\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method uses the <xref href=\\\"System.Net.IPAddress.IPv6Any\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> field to indicate that a <xref href=\\\"System.Net.Sockets.Socket\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> must listen for client activity on all network interfaces.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress IPv6Any\n    content.vb: Public Shared ReadOnly IPv6Any As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.IPv6Any\n- uid: System.Net.IPAddress.IPv6Loopback\n  commentId: F:System.Net.IPAddress.IPv6Loopback\n  id: IPv6Loopback\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPv6Loopback\n  fullName: System.Net.IPAddress.IPv6Loopback\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv6Loopback\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 178\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides the IP loopback address. This property is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress IPv6Loopback\n    content.vb: Public Shared ReadOnly IPv6Loopback As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.IPv6Loopback\n- uid: System.Net.IPAddress.IPv6None\n  commentId: F:System.Net.IPAddress.IPv6None\n  id: IPv6None\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPv6None\n  fullName: System.Net.IPAddress.IPv6None\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IPv6None\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 179\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides an IP address that indicates that no network interface should be used. This property is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress IPv6None\n    content.vb: Public Shared ReadOnly IPv6None As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.IPv6None\n- uid: System.Net.IPAddress.Loopback\n  commentId: F:System.Net.IPAddress.Loopback\n  id: Loopback\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: Loopback\n  fullName: System.Net.IPAddress.Loopback\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Loopback\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 180\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides the IP loopback address. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress Loopback\n    content.vb: Public Shared ReadOnly Loopback As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.Loopback\n- uid: System.Net.IPAddress.None\n  commentId: F:System.Net.IPAddress.None\n  id: None\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: None\n  fullName: System.Net.IPAddress.None\n  type: Field\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: None\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 181\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides an IP address that indicates that no network interface should be used. This field is read-only.</p>\\n\"\n  syntax:\n    content: public static readonly IPAddress None\n    content.vb: Public Shared ReadOnly None As IPAddress\n    return:\n      type: System.Net.IPAddress\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IPAddress.None\n- uid: System.Net.IPAddress.#ctor(System.Byte[])\n  commentId: M:System.Net.IPAddress.#ctor(System.Byte[])\n  id: '#ctor(System.Byte[])'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPAddress(Byte[])\n  fullName: System.Net.IPAddress.IPAddress(System.Byte[])\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 182\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the address specified as a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  syntax:\n    content: public IPAddress(byte[] address)\n    content.vb: Public Sub New(address As Byte())\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: \"\\n<p>The byte array value of the IP address. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>address</em> contains a bad IP address. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte())\n  name.vb: IPAddress(Byte())\n  nameWithType: IPAddress.IPAddress(Byte[])\n  nameWithType.vb: IPAddress.IPAddress(Byte())\n- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  commentId: M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)\n  id: '#ctor(System.Byte[],System.Int64)'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPAddress(Byte[], Int64)\n  fullName: System.Net.IPAddress.IPAddress(System.Byte[], System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 183\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the address specified as a <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array and the specified scope identifier.</p>\\n\"\n  syntax:\n    content: public IPAddress(byte[] address, long scopeid)\n    content.vb: Public Sub New(address As Byte(), scopeid As Long)\n    parameters:\n    - id: address\n      type: System.Byte[]\n      description: \"\\n<p>The byte array value of the IP address. </p>\\n\"\n    - id: scopeid\n      type: System.Int64\n      description: \"\\n<p>The long value of the scope identifier. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>address</em> contains a bad IP address. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>scopeid</em> < 0 or </p>\\n<p>\\n<em>scopeid</em> > 0x00000000FFFFFFFF </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte(), System.Int64)\n  name.vb: IPAddress(Byte(), Int64)\n  nameWithType: IPAddress.IPAddress(Byte[], Int64)\n  nameWithType.vb: IPAddress.IPAddress(Byte(), Int64)\n- uid: System.Net.IPAddress.#ctor(System.Int64)\n  commentId: M:System.Net.IPAddress.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IPAddress(Int64)\n  fullName: System.Net.IPAddress.IPAddress(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 184\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the address specified as an <xref href=\\\"System.Int64\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public IPAddress(long newAddress)\n    content.vb: Public Sub New(newAddress As Long)\n    parameters:\n    - id: newAddress\n      type: System.Int64\n      description: \"\\n<p>The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \\\"143.24.20.36\\\". </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>newAddress</em> < 0 or </p>\\n<p>\\n<em>newAddress</em> > 0x00000000FFFFFFFF </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPAddress.IPAddress(Int64)\n- uid: System.Net.IPAddress.AddressFamily\n  commentId: P:System.Net.IPAddress.AddressFamily\n  id: AddressFamily\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: AddressFamily\n  fullName: System.Net.IPAddress.AddressFamily\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AddressFamily\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 185\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets the address family of the IP address.</p>\\n\"\n  syntax:\n    content: public AddressFamily AddressFamily { get; }\n    content.vb: Public ReadOnly Property AddressFamily As AddressFamily\n    parameters: []\n    return:\n      type: System.Net.Sockets.AddressFamily\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetwork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for IPv4 or <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for IPv6.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.AddressFamily\n- uid: System.Net.IPAddress.IsIPv4MappedToIPv6\n  commentId: P:System.Net.IPAddress.IsIPv4MappedToIPv6\n  id: IsIPv4MappedToIPv6\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsIPv4MappedToIPv6\n  fullName: System.Net.IPAddress.IsIPv4MappedToIPv6\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIPv4MappedToIPv6\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 186\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets whether the IP address is an IPv4-mapped IPv6 address.</p>\\n\"\n  syntax:\n    content: public bool IsIPv4MappedToIPv6 { get; }\n    content.vb: Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>\\n<strong>true</strong> if the IP address is an IPv4-mapped IPv6 address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.IsIPv4MappedToIPv6\n- uid: System.Net.IPAddress.IsIPv6LinkLocal\n  commentId: P:System.Net.IPAddress.IsIPv6LinkLocal\n  id: IsIPv6LinkLocal\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsIPv6LinkLocal\n  fullName: System.Net.IPAddress.IsIPv6LinkLocal\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIPv6LinkLocal\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 187\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets whether the address is an IPv6 link local address.</p>\\n\"\n  syntax:\n    content: public bool IsIPv6LinkLocal { get; }\n    content.vb: Public ReadOnly Property IsIPv6LinkLocal As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 link local address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.IsIPv6LinkLocal\n- uid: System.Net.IPAddress.IsIPv6Multicast\n  commentId: P:System.Net.IPAddress.IsIPv6Multicast\n  id: IsIPv6Multicast\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsIPv6Multicast\n  fullName: System.Net.IPAddress.IsIPv6Multicast\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIPv6Multicast\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 188\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets whether the address is an IPv6 multicast global address.</p>\\n\"\n  syntax:\n    content: public bool IsIPv6Multicast { get; }\n    content.vb: Public ReadOnly Property IsIPv6Multicast As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 multicast global address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.IsIPv6Multicast\n- uid: System.Net.IPAddress.IsIPv6SiteLocal\n  commentId: P:System.Net.IPAddress.IsIPv6SiteLocal\n  id: IsIPv6SiteLocal\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsIPv6SiteLocal\n  fullName: System.Net.IPAddress.IsIPv6SiteLocal\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIPv6SiteLocal\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 189\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets whether the address is an IPv6 site local address.</p>\\n\"\n  syntax:\n    content: public bool IsIPv6SiteLocal { get; }\n    content.vb: Public ReadOnly Property IsIPv6SiteLocal As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 site local address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.IsIPv6SiteLocal\n- uid: System.Net.IPAddress.IsIPv6Teredo\n  commentId: P:System.Net.IPAddress.IsIPv6Teredo\n  id: IsIPv6Teredo\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsIPv6Teredo\n  fullName: System.Net.IPAddress.IsIPv6Teredo\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsIPv6Teredo\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 190\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets whether the address is an IPv6 Teredo address.</p>\\n\"\n  syntax:\n    content: public bool IsIPv6Teredo { get; }\n    content.vb: Public ReadOnly Property IsIPv6Teredo As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the IP address is an IPv6 Teredo address; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)\n    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)\n  - type: System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)\n    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)\n  - type: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses\n    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses\n  - type: System.Net.Sockets.IPProtectionLevel\n    commentId: T:System.Net.Sockets.IPProtectionLevel\n  - type: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)\n    commentId: M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)\n  - type: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)\n    commentId: M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)\n  - type: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n    commentId: M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: IPAddress.IsIPv6Teredo\n- uid: System.Net.IPAddress.ScopeId\n  commentId: P:System.Net.IPAddress.ScopeId\n  id: ScopeId\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: ScopeId\n  fullName: System.Net.IPAddress.ScopeId\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ScopeId\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 191\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Gets or sets the IPv6 address scope identifier.</p>\\n\"\n  syntax:\n    content: public long ScopeId { get; set; }\n    content.vb: Public Property ScopeId As Long\n    parameters: []\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long integer that specifies the scope of the address.</p>\\n\"\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>\\n<strong>AddressFamily</strong> = <strong>InterNetwork</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>scopeId</em> < 0</p>\\n<p>- or -</p>\\n<ul><li>\\n<p>\\n<em>scopeId</em> > 0x00000000FFFFFFFF  </p>\\n</li></ul>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: IPAddress.ScopeId\n- uid: System.Net.IPAddress.Equals(System.Object)\n  commentId: M:System.Net.IPAddress.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Net.IPAddress.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 192\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Compares two IP addresses.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object comparand)\n    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean\n    parameters:\n    - id: comparand\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance to compare to the current instance. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two addresses are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPAddress.Equals(Object)\n- uid: System.Net.IPAddress.GetAddressBytes\n  commentId: M:System.Net.IPAddress.GetAddressBytes\n  id: GetAddressBytes\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: GetAddressBytes()\n  fullName: System.Net.IPAddress.GetAddressBytes()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetAddressBytes\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 193\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides a copy of the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> as an array of bytes.</p>\\n\"\n  syntax:\n    content: public byte[] GetAddressBytes()\n    content.vb: Public Function GetAddressBytes As Byte()\n    return:\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPAddress.GetAddressBytes()\n- uid: System.Net.IPAddress.GetHashCode\n  commentId: M:System.Net.IPAddress.GetHashCode\n  id: GetHashCode\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Net.IPAddress.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 194\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns a hash value for an IP address.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer hash value.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPAddress.GetHashCode()\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  id: HostToNetworkOrder(System.Int16)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: HostToNetworkOrder(Int16)\n  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HostToNetworkOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 195\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts a short value from host byte order to network byte order.</p>\\n\"\n  syntax:\n    content: public static short HostToNetworkOrder(short host)\n    content.vb: Public Shared Function HostToNetworkOrder(host As Short) As Short\n    parameters:\n    - id: host\n      type: System.Int16\n      description: \"\\n<p>The number to convert, expressed in host byte order. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A short value, expressed in network byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.HostToNetworkOrder(Int16)\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  id: HostToNetworkOrder(System.Int32)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: HostToNetworkOrder(Int32)\n  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HostToNetworkOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 196\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts an integer value from host byte order to network byte order.</p>\\n\"\n  syntax:\n    content: public static int HostToNetworkOrder(int host)\n    content.vb: Public Shared Function HostToNetworkOrder(host As Integer) As Integer\n    parameters:\n    - id: host\n      type: System.Int32\n      description: \"\\n<p>The number to convert, expressed in host byte order. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value, expressed in network byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.HostToNetworkOrder(Int32)\n- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  id: HostToNetworkOrder(System.Int64)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: HostToNetworkOrder(Int64)\n  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: HostToNetworkOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 197\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts a long value from host byte order to network byte order.</p>\\n\"\n  syntax:\n    content: public static long HostToNetworkOrder(long host)\n    content.vb: Public Shared Function HostToNetworkOrder(host As Long) As Long\n    parameters:\n    - id: host\n      type: System.Int64\n      description: \"\\n<p>The number to convert, expressed in host byte order. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long value, expressed in network byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.HostToNetworkOrder(Int64)\n- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  commentId: M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  id: IsLoopback(System.Net.IPAddress)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: IsLoopback(IPAddress)\n  fullName: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsLoopback\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 198\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Indicates whether the specified IP address is the loopback address.</p>\\n\"\n  syntax:\n    content: public static bool IsLoopback(IPAddress address)\n    content.vb: Public Shared Function IsLoopback(address As IPAddress) As Boolean\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>address</em> is the loopback address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.IsLoopback(IPAddress)\n- uid: System.Net.IPAddress.MapToIPv4\n  commentId: M:System.Net.IPAddress.MapToIPv4\n  id: MapToIPv4\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: MapToIPv4()\n  fullName: System.Net.IPAddress.MapToIPv4()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MapToIPv4\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 199\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Maps the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an IPv4 address.</p>\\n\"\n  syntax:\n    content: public IPAddress MapToIPv4()\n    content.vb: Public Function MapToIPv4 As IPAddress\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An IPv4 address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPAddress.MapToIPv4()\n- uid: System.Net.IPAddress.MapToIPv6\n  commentId: M:System.Net.IPAddress.MapToIPv6\n  id: MapToIPv6\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: MapToIPv6()\n  fullName: System.Net.IPAddress.MapToIPv6()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MapToIPv6\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 200\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Maps the <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to an IPv6 address.</p>\\n\"\n  syntax:\n    content: public IPAddress MapToIPv6()\n    content.vb: Public Function MapToIPv6 As IPAddress\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>Returns <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>An IPv6 address.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IPAddress.MapToIPv6()\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  id: NetworkToHostOrder(System.Int16)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: NetworkToHostOrder(Int16)\n  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int16)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkToHostOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 201\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts a short value from network byte order to host byte order.</p>\\n\"\n  syntax:\n    content: public static short NetworkToHostOrder(short network)\n    content.vb: Public Shared Function NetworkToHostOrder(network As Short) As Short\n    parameters:\n    - id: network\n      type: System.Int16\n      description: \"\\n<p>The number to convert, expressed in network byte order. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>A short value, expressed in host byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.NetworkToHostOrder(Int16)\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  id: NetworkToHostOrder(System.Int32)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: NetworkToHostOrder(Int32)\n  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkToHostOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 202\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts an integer value from network byte order to host byte order.</p>\\n\"\n  syntax:\n    content: public static int NetworkToHostOrder(int network)\n    content.vb: Public Shared Function NetworkToHostOrder(network As Integer) As Integer\n    parameters:\n    - id: network\n      type: System.Int32\n      description: \"\\n<p>The number to convert, expressed in network byte order. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer value, expressed in host byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.NetworkToHostOrder(Int32)\n- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  id: NetworkToHostOrder(System.Int64)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: NetworkToHostOrder(Int64)\n  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int64)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: NetworkToHostOrder\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 203\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts a long value from network byte order to host byte order.</p>\\n\"\n  syntax:\n    content: public static long NetworkToHostOrder(long network)\n    content.vb: Public Shared Function NetworkToHostOrder(network As Long) As Long\n    parameters:\n    - id: network\n      type: System.Int64\n      description: \"\\n<p>The number to convert, expressed in network byte order. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>A long value, expressed in host byte order.</p>\\n\"\n  seealso:\n  - type: System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.NetworkToHostOrder(Int64)\n- uid: System.Net.IPAddress.Parse(System.String)\n  commentId: M:System.Net.IPAddress.Parse(System.String)\n  id: Parse(System.String)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: Parse(String)\n  fullName: System.Net.IPAddress.Parse(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Parse\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 204\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts an IP address string to an <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public static IPAddress Parse(string ipString)\n    content.vb: Public Shared Function Parse(ipString As String) As IPAddress\n    parameters:\n    - id: ipString\n      type: System.String\n      description: \"\\n<p>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6. </p>\\n\"\n    return:\n      type: System.Net.IPAddress\n      description: \"\\n<p>An <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>ipString</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>ipString</em> is not a valid IP address. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IPAddress.Parse(String)\n- uid: System.Net.IPAddress.ToString\n  commentId: M:System.Net.IPAddress.ToString\n  id: ToString\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Net.IPAddress.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 205\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Converts an Internet address to its standard notation.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</p>\\n\"\n  overridden: System.Object.ToString\n  exceptions:\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>The address family is <xref href=\\\"System.Net.Sockets.AddressFamily.InterNetworkV6\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and the address is bad. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IPAddress.ToString()\n- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  commentId: M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)\n  id: TryParse(System.String,System.Net.IPAddress@)\n  parent: System.Net.IPAddress\n  langs:\n  - csharp\n  - vb\n  name: TryParse(String, out IPAddress)\n  fullName: System.Net.IPAddress.TryParse(System.String, out System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryParse\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 206\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Determines whether a string is a valid IP address.</p>\\n\"\n  syntax:\n    content: public static bool TryParse(string ipString, out IPAddress address)\n    content.vb: Public Shared Function TryParse(ipString As String, ByRef address As IPAddress) As Boolean\n    parameters:\n    - id: ipString\n      type: System.String\n      description: \"\\n<p>The string to validate.</p>\\n\"\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>The <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> version of the string.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>ipString</em> was able to be parsed as an IP address; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Net.IPAddress.TryParse(System.String, ByRef System.Net.IPAddress)\n  name.vb: TryParse(String, ByRef IPAddress)\n  nameWithType: IPAddress.TryParse(String, out IPAddress)\n  nameWithType.vb: IPAddress.TryParse(String, ByRef IPAddress)\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.Net.Sockets.AddressFamily\n  parent: System.Net.Sockets\n  isExternal: false\n  name: AddressFamily\n  fullName: System.Net.Sockets.AddressFamily\n  commentId: T:System.Net.Sockets.AddressFamily\n  nameWithType: AddressFamily\n- uid: System.Net.Sockets\n  isExternal: false\n  name: System.Net.Sockets\n  fullName: System.Net.Sockets\n  commentId: N:System.Net.Sockets\n  nameWithType: System.Net.Sockets\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  commentId: T:System.Int16\n  nameWithType: Int16\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}