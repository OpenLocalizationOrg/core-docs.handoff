{"nodes":[{"pos":[430,441],"content":"TraceFilter","needQuote":true,"nodes":[{"content":"TraceFilter","pos":[0,11]}]},{"pos":[1717,1730],"content":"TraceFilter()","needQuote":true,"nodes":[{"content":"TraceFilter()","pos":[0,13]}]},{"pos":[3199,3294],"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","pos":[0,95]}]},{"content":"\\n&lt;p&gt;The name of the source.&lt;/p&gt;\\n","pos":[4782,4816],"source":"\\n<p>The name of the source.</p>\\n"},{"content":"\\n&lt;p&gt;A trace identifier number.&lt;/p&gt;\\n","pos":[5142,5179],"source":"\\n<p>A trace identifier number.</p>\\n"},{"content":"\\n&lt;p&gt;Either the format to use for writing an array of arguments specified by the &lt;em&gt;args&lt;/em&gt; parameter, or a message to write.&lt;/p&gt;\\n","pos":[5253,5387],"source":"\\n<p>Either the format to use for writing an array of arguments specified by the <em>args</em> parameter, or a message to write.</p>\\n"},{"content":"\\n&lt;p&gt;An array of argument objects.&lt;/p&gt;\\n","pos":[5452,5492],"source":"\\n<p>An array of argument objects.</p>\\n"},{"content":"\\n&lt;p&gt;A trace data object.&lt;/p&gt;\\n","pos":[5556,5587],"source":"\\n<p>A trace data object.</p>\\n"},{"content":"\\n&lt;p&gt;An array of trace data objects.&lt;/p&gt;\\n","pos":[5652,5694],"source":"\\n<p>An array of trace data objects.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to trace the specified event; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[5755,5848],"source":"\\n<p>\\n<strong>true</strong> to trace the specified event; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[5849,5855],"source":" </p>\\n"},{"pos":[6591,6609],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[6776,6782],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6942,6952],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7047,7055],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7124,7125],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7152,7153],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7223,7231],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7300,7301],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7328,7329],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7512,7526],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7645,7651],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7718,7719],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7769,7775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7835,7836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7919,7925],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7992,7993],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8043,8049],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8109,8110],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8324,8346],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8494,8500],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8567,8568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8618,8624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[8685,8686]},{"pos":[8741,8747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8807,8808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8905,8911],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8978,8979],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9029,9035],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9096,9097]},{"pos":[9152,9158],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9218,9219],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9464,9495],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[9661,9676],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[9752,9753],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9803,9809],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9870,9871]},{"pos":[9926,9932],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9992,9993],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10099,10114],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10190,10191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10241,10247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10308,10309]},{"pos":[10364,10370],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10430,10431],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10661,10674],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[10775,10786],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[10858,10859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10886,10887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10960,10971],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11043,11044],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11071,11072],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11247,11256],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11349,11356],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11424,11425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11452,11453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11522,11529],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11597,11598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11625,11626],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11801,11818],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11927,11942],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12018,12019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12046,12047],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12124,12139],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12215,12216],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12243,12244],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12389,12395],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12559,12574],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"pos":[12770,12776],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[12953,12967],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[13159,13164],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[13271,13279],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[13407,13413],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[13474,13476]},{"pos":[13541,13547],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13607,13609],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[13747,13754],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Diagnostics.TraceFilter\n  commentId: T:System.Diagnostics.TraceFilter\n  id: TraceFilter\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.TraceFilter.#ctor\n  - System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: TraceFilter\n  fullName: System.Diagnostics.TraceFilter\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TraceFilter\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceFilter.cs\n    startLine: 8\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Provides the base class for trace filter implementations.</p>\\n\"\n  syntax:\n    content: public abstract class TraceFilter\n    content.vb: Public MustInherit Class TraceFilter\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: TraceFilter\n- uid: System.Diagnostics.TraceFilter.#ctor\n  commentId: M:System.Diagnostics.TraceFilter.#ctor\n  id: '#ctor'\n  parent: System.Diagnostics.TraceFilter\n  langs:\n  - csharp\n  - vb\n  name: TraceFilter()\n  fullName: System.Diagnostics.TraceFilter.TraceFilter()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/ref/System.Diagnostics.TraceSource.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/ref/System.Diagnostics.TraceSource.cs\n    startLine: 157\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.TraceFilter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: protected TraceFilter()\n    content.vb: Protected Sub New\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: TraceFilter.TraceFilter()\n- uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  commentId: M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  id: ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  parent: System.Diagnostics.TraceFilter\n  langs:\n  - csharp\n  - vb\n  name: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  fullName: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldTrace\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/TraceFilter.cs\n    startLine: 10\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>When overridden in a derived class, determines whether the trace listener should trace the event.</p>\\n\"\n  syntax:\n    content: public abstract bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data)\n    content.vb: Public MustOverride Function ShouldTrace(cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean\n    parameters:\n    - id: cache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>The <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains information for the trace event.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>The name of the source.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the type of event that has caused the trace.</p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A trace identifier number.</p>\\n\"\n    - id: formatOrMessage\n      type: System.String\n      description: \"\\n<p>Either the format to use for writing an array of arguments specified by the <em>args</em> parameter, or a message to write.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of argument objects.</p>\\n\"\n    - id: data1\n      type: System.Object\n      description: \"\\n<p>A trace data object.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An array of trace data objects.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to trace the specified event; otherwise, <strong>false</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object(), System.Object, System.Object())\n  name.vb: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  nameWithType: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  nameWithType.vb: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  nameWithType: TraceEventCache\n  commentId: T:System.Diagnostics.TraceEventCache\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}