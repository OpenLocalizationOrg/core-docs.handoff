{"nodes":[{"pos":[4048,4055],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[5598,5610],"content":"ImaginaryOne","needQuote":true,"nodes":[{"content":"ImaginaryOne","pos":[0,12]}]},{"pos":[6876,6879],"content":"One","needQuote":true,"nodes":[{"content":"One","pos":[0,3]}]},{"pos":[8121,8125],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[9463,9486],"content":"Complex(Double, Double)","needQuote":true,"nodes":[{"content":"Complex(Double, Double)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The real part of the complex number.&lt;/p&gt;\\n","pos":[10330,10377],"source":"\\n<p>The real part of the complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The imaginary part of the complex number.&lt;/p&gt;\\n","pos":[10445,10497],"source":"\\n<p>The imaginary part of the complex number.</p>\\n"},{"pos":[10780,10789],"content":"Imaginary","needQuote":true,"nodes":[{"content":"Imaginary","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The imaginary component of a complex number.&lt;/p&gt;\\n","pos":[11547,11602],"source":"\\n<p>The imaginary component of a complex number.</p>\\n"},{"pos":[11988,11997],"content":"Magnitude","needQuote":true,"nodes":[{"content":"Magnitude","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The magnitude of the current instance.&lt;/p&gt;\\n","pos":[12679,12728],"source":"\\n<p>The magnitude of the current instance.</p>\\n"},{"pos":[13237,13242],"content":"Phase","needQuote":true,"nodes":[{"content":"Phase","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The phase of a complex number, in radians.&lt;/p&gt;\\n","pos":[13884,13937],"source":"\\n<p>The phase of a complex number, in radians.</p>\\n"},{"pos":[14314,14318],"content":"Real","needQuote":true,"nodes":[{"content":"Real","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The real component of a complex number.&lt;/p&gt;\\n","pos":[15051,15101],"source":"\\n<p>The real component of a complex number.</p>\\n"},{"pos":[15549,15561],"content":"Abs(Complex)","needQuote":true,"nodes":[{"content":"Abs(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[16282,16310],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The absolute value of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[16370,16418],"source":"\\n<p>The absolute value of <em>value</em>.</p>\\n"},{"pos":[16878,16891],"content":"Acos(Complex)","needQuote":true,"nodes":[{"content":"Acos(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number that represents a cosine.&lt;/p&gt;\\n","pos":[17632,17685],"source":"\\n<p>A complex number that represents a cosine.</p>\\n"},{"content":"\\n&lt;p&gt;The angle, measured in radians, which is the arc cosine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[17755,17840],"source":"\\n<p>The angle, measured in radians, which is the arc cosine of <em>value</em>.</p>\\n"},{"pos":[18499,18520],"content":"Add(Complex, Complex)","needQuote":true,"nodes":[{"content":"Add(Complex, Complex)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The first complex number to add.&lt;/p&gt;\\n","pos":[19287,19330],"source":"\\n<p>The first complex number to add.</p>\\n"},{"content":"\\n&lt;p&gt;The second complex number to add.&lt;/p&gt;\\n","pos":[19404,19448],"source":"\\n<p>The second complex number to add.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[19518,19573],"source":"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[20144,20157],"content":"Asin(Complex)","needQuote":true,"nodes":[{"content":"Asin(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[20896,20924],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The angle which is the arc sine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[20994,21055],"source":"\\n<p>The angle which is the arc sine of <em>value</em>.</p>\\n"},{"pos":[21645,21658],"content":"Atan(Complex)","needQuote":true,"nodes":[{"content":"Atan(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[22400,22428],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The angle that is the arc tangent of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22498,22561],"source":"\\n<p>The angle that is the arc tangent of <em>value</em>.</p>\\n"},{"pos":[23166,23184],"content":"Conjugate(Complex)","needQuote":true,"nodes":[{"content":"Conjugate(Complex)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[23938,23966],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The conjugate of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24036,24079],"source":"\\n<p>The conjugate of <em>value</em>.</p>\\n"},{"pos":[24436,24448],"content":"Cos(Complex)","needQuote":true,"nodes":[{"content":"Cos(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[25163,25191],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The cosine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25261,25301],"source":"\\n<p>The cosine of <em>value</em>.</p>\\n"},{"pos":[25890,25903],"content":"Cosh(Complex)","needQuote":true,"nodes":[{"content":"Cosh(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[26633,26661],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The hyperbolic cosine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[26731,26782],"source":"\\n<p>The hyperbolic cosine of <em>value</em>.</p>\\n"},{"pos":[27317,27341],"content":"Divide(Complex, Complex)","needQuote":true,"nodes":[{"content":"Divide(Complex, Complex)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The complex number to be divided.&lt;/p&gt;\\n","pos":[28149,28193],"source":"\\n<p>The complex number to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The complex number to divide by.&lt;/p&gt;\\n","pos":[28269,28312],"source":"\\n<p>The complex number to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The quotient of the division.&lt;/p&gt;\\n","pos":[28382,28422],"source":"\\n<p>The quotient of the division.</p>\\n"},{"pos":[29002,29017],"content":"Equals(Complex)","needQuote":true,"nodes":[{"content":"Equals(Complex)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The complex number to compare.&lt;/p&gt;\\n","pos":[29787,29828],"source":"\\n<p>The complex number to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this complex number and &lt;em&gt;value&lt;/em&gt; have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[29889,30021],"source":"\\n<p>\\n<strong>true</strong> if this complex number and <em>value</em> have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30491,30505],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare.&lt;/p&gt;\\n","pos":[31259,31292],"source":"\\n<p>The object to compare.</p>\\n"},{"pos":[32227,32239],"content":"Exp(Complex)","needQuote":true,"nodes":[{"content":"Exp(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number that specifies a power.&lt;/p&gt;\\n","pos":[32980,33031],"source":"\\n<p>A complex number that specifies a power.</p>\\n"},{"content":"\\n&lt;p&gt;The number &lt;strong&gt;e&lt;/strong&gt; raised to the power &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33101,33177],"source":"\\n<p>The number <strong>e</strong> raised to the power <em>value</em>.</p>\\n"},{"pos":[33691,33727],"content":"FromPolarCoordinates(Double, Double)","needQuote":true,"nodes":[{"content":"FromPolarCoordinates(Double, Double)","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.&lt;/p&gt;\\n","pos":[34553,34679],"source":"\\n<p>The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</p>\\n"},{"content":"\\n&lt;p&gt;The phase, which is the angle from the line to the horizontal axis, measured in radians.&lt;/p&gt;\\n","pos":[34743,34842],"source":"\\n<p>The phase, which is the angle from the line to the horizontal axis, measured in radians.</p>\\n"},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[34912,34940],"source":"\\n<p>A complex number.</p>\\n"},{"pos":[35457,35470],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[36211,36256],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[36656,36668],"content":"Log(Complex)","needQuote":true,"nodes":[{"content":"Log(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[37418,37446],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The natural (base &lt;strong&gt;e&lt;/strong&gt;) logarithm of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[37516,37593],"source":"\\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>.</p>\\n"},{"pos":[38219,38239],"content":"Log(Complex, Double)","needQuote":true,"nodes":[{"content":"Log(Complex, Double)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[39029,39057],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The base of the logarithm.&lt;/p&gt;\\n","pos":[39125,39162],"source":"\\n<p>The base of the logarithm.</p>\\n"},{"content":"\\n&lt;p&gt;The logarithm of &lt;em&gt;value&lt;/em&gt; in base &lt;em&gt;baseValue&lt;/em&gt;.&lt;/p&gt;\\n","pos":[39232,39302],"source":"\\n<p>The logarithm of <em>value</em> in base <em>baseValue</em>.</p>\\n"},{"pos":[39667,39681],"content":"Log10(Complex)","needQuote":true,"nodes":[{"content":"Log10(Complex)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[40413,40441],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The base-10 logarithm of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[40511,40562],"source":"\\n<p>The base-10 logarithm of <em>value</em>.</p>\\n"},{"pos":[41002,41028],"content":"Multiply(Complex, Complex)","needQuote":true,"nodes":[{"content":"Multiply(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first complex number to multiply.&lt;/p&gt;\\n","pos":[41810,41858],"source":"\\n<p>The first complex number to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The second complex number to multiply.&lt;/p&gt;\\n","pos":[41932,41981],"source":"\\n<p>The second complex number to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The product of the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters.&lt;/p&gt;\\n","pos":[42051,42125],"source":"\\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\\n"},{"pos":[42707,42722],"content":"Negate(Complex)","needQuote":true,"nodes":[{"content":"Negate(Complex)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[43457,43485],"source":"\\n<p>A complex number.</p>\\n"},{"pos":[44451,44477],"content":"Addition(Complex, Complex)","needQuote":true,"nodes":[{"content":"Addition(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to add.&lt;/p&gt;\\n","pos":[45241,45275],"source":"\\n<p>The first value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to add.&lt;/p&gt;\\n","pos":[45349,45384],"source":"\\n<p>The second value to add.</p>\\n"},{"content":"\\n&lt;p&gt;The sum of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[45454,45509],"source":"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[46162,46188],"content":"Division(Complex, Complex)","needQuote":true,"nodes":[{"content":"Division(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to be divided.&lt;/p&gt;\\n","pos":[46998,47033],"source":"\\n<p>The value to be divided.</p>\\n"},{"content":"\\n&lt;p&gt;The value to divide by.&lt;/p&gt;\\n","pos":[47107,47141],"source":"\\n<p>The value to divide by.</p>\\n"},{"content":"\\n&lt;p&gt;The result of dividing &lt;em&gt;left&lt;/em&gt; by &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[47211,47277],"source":"\\n<p>The result of dividing <em>left</em> by <em>right</em>.</p>\\n"},{"pos":[47936,47962],"content":"Equality(Complex, Complex)","needQuote":true,"nodes":[{"content":"Equality(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first complex number to compare.&lt;/p&gt;\\n","pos":[48768,48815],"source":"\\n<p>The first complex number to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second complex number to compare.&lt;/p&gt;\\n","pos":[48889,48937],"source":"\\n<p>The second complex number to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; parameters have the same value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[48998,49139],"source":"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[49573,49601],"content":"Explicit(Decimal to Complex)","needQuote":true,"nodes":[{"content":"Explicit(Decimal to Complex)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[50452,50504],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;A complex number that has a real component equal to &lt;em&gt;value&lt;/em&gt; and an imaginary component equal to zero.","pos":[50574,50687],"source":"\\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero."},{"content":"&lt;/p&gt;\\n","pos":[50688,50694],"source":" </p>\\n"},{"pos":[51356,51387],"content":"Explicit(BigInteger to Complex)","needQuote":true,"nodes":[{"content":"Explicit(BigInteger to Complex)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[52281,52333],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;A complex number that has a real component equal to &lt;em&gt;value&lt;/em&gt; and an imaginary component equal to zero.","pos":[52403,52516],"source":"\\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero."},{"content":"&lt;/p&gt;\\n","pos":[52517,52523],"source":" </p>\\n"},{"pos":[53161,53186],"content":"Implicit(Byte to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Byte to Complex)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[53958,54010],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[54080,54205],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[54813,54840],"content":"Implicit(Double to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Double to Complex)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[55644,55696],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[55766,55891],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[56504,56530],"content":"Implicit(Int16 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Int16 to Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[57313,57365],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[57435,57560],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[58169,58195],"content":"Implicit(Int32 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Int32 to Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[58978,59030],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[59100,59225],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[59834,59860],"content":"Implicit(Int64 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Int64 to Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[60641,60693],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[60763,60888],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[61497,61523],"content":"Implicit(SByte to Complex)","needQuote":true,"nodes":[{"content":"Implicit(SByte to Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[62372,62424],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[62494,62619],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[63406,63433],"content":"Implicit(Single to Complex)","needQuote":true,"nodes":[{"content":"Implicit(Single to Complex)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[64236,64288],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[64358,64483],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[65099,65126],"content":"Implicit(UInt16 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(UInt16 to Complex)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[65991,66043],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[66113,66238],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[67029,67056],"content":"Implicit(UInt32 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(UInt32 to Complex)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[67921,67973],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[68043,68168],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[68959,68986],"content":"Implicit(UInt64 to Complex)","needQuote":true,"nodes":[{"content":"Implicit(UInt64 to Complex)","pos":[0,27]}]},{"content":"\\n&lt;p&gt;The value to convert to a complex number.&lt;/p&gt;\\n","pos":[69849,69901],"source":"\\n<p>The value to convert to a complex number.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains the value of the &lt;em&gt;value&lt;/em&gt; parameter as its real part and zero as its imaginary part.&lt;/p&gt;\\n","pos":[69971,70096],"source":"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n"},{"pos":[70923,70951],"content":"Inequality(Complex, Complex)","needQuote":true,"nodes":[{"content":"Inequality(Complex, Complex)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The first value to compare.&lt;/p&gt;\\n","pos":[71766,71804],"source":"\\n<p>The first value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to compare.&lt;/p&gt;\\n","pos":[71878,71917],"source":"\\n<p>The second value to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71978,72098],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[72769,72795],"content":"Multiply(Complex, Complex)","needQuote":true,"nodes":[{"content":"Multiply(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first value to multiply.&lt;/p&gt;\\n","pos":[73575,73614],"source":"\\n<p>The first value to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The second value to multiply.&lt;/p&gt;\\n","pos":[73688,73728],"source":"\\n<p>The second value to multiply.</p>\\n"},{"content":"\\n&lt;p&gt;The product of &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.&lt;/p&gt;\\n","pos":[73798,73857],"source":"\\n<p>The product of <em>left</em> and <em>right</em>.</p>\\n"},{"pos":[74529,74558],"content":"Subtraction(Complex, Complex)","needQuote":true,"nodes":[{"content":"Subtraction(Complex, Complex)","pos":[0,29]}]},{"content":"\\n&lt;p&gt;The value to subtract from (the minuend).&lt;/p&gt;\\n","pos":[75358,75410],"source":"\\n<p>The value to subtract from (the minuend).</p>\\n"},{"content":"\\n&lt;p&gt;The value to subtract (the subtrahend).&lt;/p&gt;\\n","pos":[75484,75534],"source":"\\n<p>The value to subtract (the subtrahend).</p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[75604,75675],"source":"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n"},{"pos":[76284,76306],"content":"UnaryNegation(Complex)","needQuote":true,"nodes":[{"content":"UnaryNegation(Complex)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The value to negate.&lt;/p&gt;\\n","pos":[77059,77090],"source":"\\n<p>The value to negate.</p>\\n"},{"pos":[77989,78009],"content":"Pow(Complex, Double)","needQuote":true,"nodes":[{"content":"Pow(Complex, Double)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;A complex number to be raised to a power.&lt;/p&gt;\\n","pos":[78826,78878],"source":"\\n<p>A complex number to be raised to a power.</p>\\n"},{"content":"\\n&lt;p&gt;A double-precision floating-point number that specifies a power.&lt;/p&gt;\\n","pos":[78942,79017],"source":"\\n<p>A double-precision floating-point number that specifies a power.</p>\\n"},{"content":"\\n&lt;p&gt;The complex number &lt;em&gt;value&lt;/em&gt; raised to the power &lt;em&gt;power&lt;/em&gt;.&lt;/p&gt;\\n","pos":[79087,79167],"source":"\\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\\n"},{"pos":[79598,79619],"content":"Pow(Complex, Complex)","needQuote":true,"nodes":[{"content":"Pow(Complex, Complex)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;A complex number to be raised to a power.&lt;/p&gt;\\n","pos":[80424,80476],"source":"\\n<p>A complex number to be raised to a power.</p>\\n"},{"content":"\\n&lt;p&gt;A complex number that specifies a power.&lt;/p&gt;\\n","pos":[80550,80601],"source":"\\n<p>A complex number that specifies a power.</p>\\n"},{"content":"\\n&lt;p&gt;The complex number &lt;em&gt;value&lt;/em&gt; raised to the power &lt;em&gt;power&lt;/em&gt;.&lt;/p&gt;\\n","pos":[80671,80751],"source":"\\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\\n"},{"pos":[81132,81151],"content":"Reciprocal(Complex)","needQuote":true,"nodes":[{"content":"Reciprocal(Complex)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[81898,81926],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The reciprocal of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[81996,82040],"source":"\\n<p>The reciprocal of <em>value</em>.</p>\\n"},{"pos":[82398,82410],"content":"Sin(Complex)","needQuote":true,"nodes":[{"content":"Sin(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[83123,83151],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The sine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[83221,83259],"source":"\\n<p>The sine of <em>value</em>.</p>\\n"},{"pos":[83848,83861],"content":"Sinh(Complex)","needQuote":true,"nodes":[{"content":"Sinh(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[84589,84617],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The hyperbolic sine of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[84687,84736],"source":"\\n<p>The hyperbolic sine of <em>value</em>.</p>\\n"},{"pos":[85193,85206],"content":"Sqrt(Complex)","needQuote":true,"nodes":[{"content":"Sqrt(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[85928,85956],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The square root of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[86026,86071],"source":"\\n<p>The square root of <em>value</em>.</p>\\n"},{"pos":[86510,86536],"content":"Subtract(Complex, Complex)","needQuote":true,"nodes":[{"content":"Subtract(Complex, Complex)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The value to subtract from (the minuend).&lt;/p&gt;\\n","pos":[87340,87392],"source":"\\n<p>The value to subtract from (the minuend).</p>\\n"},{"content":"\\n&lt;p&gt;The value to subtract (the subtrahend).&lt;/p&gt;\\n","pos":[87466,87516],"source":"\\n<p>The value to subtract (the subtrahend).</p>\\n"},{"content":"\\n&lt;p&gt;The result of subtracting &lt;em&gt;right&lt;/em&gt; from &lt;em&gt;left&lt;/em&gt;.&lt;/p&gt;\\n","pos":[87586,87657],"source":"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n"},{"pos":[88236,88248],"content":"Tan(Complex)","needQuote":true,"nodes":[{"content":"Tan(Complex)","pos":[0,12]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[88964,88992],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The tangent of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[89062,89103],"source":"\\n<p>The tangent of <em>value</em>.</p>\\n"},{"pos":[89692,89705],"content":"Tanh(Complex)","needQuote":true,"nodes":[{"content":"Tanh(Complex)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A complex number.&lt;/p&gt;\\n","pos":[90436,90464],"source":"\\n<p>A complex number.</p>\\n"},{"content":"\\n&lt;p&gt;The hyperbolic tangent of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90534,90586],"source":"\\n<p>The hyperbolic tangent of <em>value</em>.</p>\\n"},{"pos":[90980,90990],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the current instance in Cartesian form.&lt;/p&gt;\\n","pos":[91700,91779],"source":"\\n<p>The string representation of the current instance in Cartesian form.</p>\\n"},{"pos":[92185,92210],"content":"ToString(IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(IFormatProvider)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[93071,93146],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance in Cartesian form, as specified by &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[93206,93320],"source":"\\n<p>The string representation of the current instance in Cartesian form, as specified by <em>provider</em>.</p>\\n"},{"pos":[93647,93663],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string.&lt;/p&gt;\\n","pos":[94482,94536],"source":"\\n<p>A standard or custom numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance in Cartesian form.&lt;/p&gt;\\n","pos":[94596,94675],"source":"\\n<p>The string representation of the current instance in Cartesian form.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid format string.&lt;/p&gt;\\n","pos":[94782,94840],"source":"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n"},{"pos":[95227,95260],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;A standard or custom numeric format string.&lt;/p&gt;\\n","pos":[96198,96252],"source":"\\n<p>A standard or custom numeric format string.</p>\\n"},{"content":"\\n&lt;p&gt;An object that supplies culture-specific formatting information.&lt;/p&gt;\\n","pos":[96328,96403],"source":"\\n<p>An object that supplies culture-specific formatting information.</p>\\n"},{"content":"\\n&lt;p&gt;The string representation of the current instance in Cartesian form, as specified by &lt;em&gt;format&lt;/em&gt; and &lt;em&gt;provider&lt;/em&gt;.&lt;/p&gt;\\n","pos":[96463,96597],"source":"\\n<p>The string representation of the current instance in Cartesian form, as specified by <em>format</em> and <em>provider</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;format&lt;/em&gt; is not a valid format string.&lt;/p&gt;\\n","pos":[96704,96762],"source":"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n"},{"pos":[97028,97043],"content":"System.Numerics","needQuote":true,"nodes":[{"content":"System.Numerics","pos":[0,15]}]},{"pos":[97244,97263],"content":"IEquatable<Complex>","needQuote":true,"nodes":[{"content":"IEquatable&lt;Complex&gt;","pos":[0,19],"source":"IEquatable<Complex>"}]},{"pos":[97468,97478],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[97542,97543],"content":"<","needQuote":true,"nodes":[]},{"pos":[97603,97610],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[97731,97741],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[97806,97809]},{"pos":[97876,97883],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[97932,97933],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98158,98170],"content":"IFormattable","needQuote":true,"nodes":[{"content":"IFormattable","pos":[0,12]}]},{"pos":[98375,98397],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[98545,98551],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[98618,98619],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[98669,98675],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[98736,98737]},{"pos":[98792,98798],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[98858,98859],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[98956,98962],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[99029,99030],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99080,99086],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[99147,99148]},{"pos":[99203,99209],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[99269,99270],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[99515,99546],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[99712,99727],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[99803,99804],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[99854,99860],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[99921,99922]},{"pos":[99977,99983],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100043,100044],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100150,100165],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[100241,100242],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100292,100298],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[100359,100360]},{"pos":[100415,100421],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[100481,100482],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100708,100717],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[100810,100817],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[100885,100886],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[100913,100914],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[100983,100990],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[101058,101059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[101086,101087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101229,101242],"content":"IEquatable<T>","needQuote":true,"nodes":[{"content":"IEquatable&lt;T&gt;","pos":[0,13],"source":"IEquatable<T>"}]},{"pos":[101397,101407],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"pos":[101450,101451],"content":"<","needQuote":true,"nodes":[]},{"pos":[101478,101479],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101578,101588],"content":"IEquatable","needQuote":true,"nodes":[{"content":"IEquatable","pos":[0,10]}]},{"content":"(Of","pos":[101632,101635]},{"pos":[101669,101670],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[101697,101698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[101858,101864],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[101995,102001],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[102165,102172],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[102338,102344],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[102611,102626],"content":"Equals(Complex)","needQuote":true,"nodes":[{"content":"Equals(Complex)","pos":[0,15]}]},{"pos":[102872,102878],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[102974,102975],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103035,103042],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[103091,103092],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103170,103176],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[103275,103276],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[103336,103343],"content":"Complex","needQuote":true,"nodes":[{"content":"Complex","pos":[0,7]}]},{"pos":[103392,103393],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[103677,103684],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[103832,103841],"content":"Equals(T)","needQuote":true,"nodes":[{"content":"Equals(T)","pos":[0,9]}]},{"pos":[103999,104005],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104058,104059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104086,104087],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104114,104115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104193,104199],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104255,104256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104283,104284],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[104311,104312],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104561,104575],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[104700,104706],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[104755,104756],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[104806,104812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[104872,104873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[104959,104965],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[105014,105015],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105065,105071],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[105131,105132],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105313,105322],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[105501,105514],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[105621,105632],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[105686,105687],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105714,105715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[105791,105802],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[105856,105857],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[105884,105885],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[106051,106056],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[106199,106206],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[106376,106386],"content":"BigInteger","needQuote":true,"nodes":[{"content":"BigInteger","pos":[0,10]}]},{"pos":[106559,106563],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[106701,106706],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[106847,106852],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[106993,106998],"content":"SByte","needQuote":true,"nodes":[{"content":"SByte","pos":[0,5]}]},{"pos":[107140,107146],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[107291,107297],"content":"UInt16","needQuote":true,"nodes":[{"content":"UInt16","pos":[0,6]}]},{"pos":[107442,107448],"content":"UInt32","needQuote":true,"nodes":[{"content":"UInt32","pos":[0,6]}]},{"pos":[107593,107599],"content":"UInt64","needQuote":true,"nodes":[{"content":"UInt64","pos":[0,6]}]},{"pos":[107766,107776],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[107877,107885],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[107936,107937],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[107964,107965],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108038,108046],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[108097,108098],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[108125,108126],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[108287,108293],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[108447,108462],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[108699,108732],"content":"ToString(String, IFormatProvider)","needQuote":true,"nodes":[{"content":"ToString(String, IFormatProvider)","pos":[0,33]}]},{"pos":[108914,108922],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[108976,108977],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109027,109033],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[109094,109095]},{"pos":[109159,109174],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109222,109223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109337,109345],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[109399,109400],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[109450,109456],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[109517,109518]},{"pos":[109582,109597],"content":"IFormatProvider","needQuote":true,"nodes":[{"content":"IFormatProvider","pos":[0,15]}]},{"pos":[109645,109646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[109883,109898],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]}],"content":"items:\n- uid: System.Numerics.Complex\n  commentId: T:System.Numerics.Complex\n  id: Complex\n  parent: System.Numerics\n  children:\n  - System.Numerics.Complex.#ctor(System.Double,System.Double)\n  - System.Numerics.Complex.Abs(System.Numerics.Complex)\n  - System.Numerics.Complex.Acos(System.Numerics.Complex)\n  - System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.Asin(System.Numerics.Complex)\n  - System.Numerics.Complex.Atan(System.Numerics.Complex)\n  - System.Numerics.Complex.Conjugate(System.Numerics.Complex)\n  - System.Numerics.Complex.Cos(System.Numerics.Complex)\n  - System.Numerics.Complex.Cosh(System.Numerics.Complex)\n  - System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.Equals(System.Numerics.Complex)\n  - System.Numerics.Complex.Equals(System.Object)\n  - System.Numerics.Complex.Exp(System.Numerics.Complex)\n  - System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\n  - System.Numerics.Complex.GetHashCode\n  - System.Numerics.Complex.Imaginary\n  - System.Numerics.Complex.ImaginaryOne\n  - System.Numerics.Complex.Log(System.Numerics.Complex)\n  - System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)\n  - System.Numerics.Complex.Log10(System.Numerics.Complex)\n  - System.Numerics.Complex.Magnitude\n  - System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.Negate(System.Numerics.Complex)\n  - System.Numerics.Complex.One\n  - System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex\n  - System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\n  - System.Numerics.Complex.Phase\n  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)\n  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.Real\n  - System.Numerics.Complex.Reciprocal(System.Numerics.Complex)\n  - System.Numerics.Complex.Sin(System.Numerics.Complex)\n  - System.Numerics.Complex.Sinh(System.Numerics.Complex)\n  - System.Numerics.Complex.Sqrt(System.Numerics.Complex)\n  - System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\n  - System.Numerics.Complex.Tan(System.Numerics.Complex)\n  - System.Numerics.Complex.Tanh(System.Numerics.Complex)\n  - System.Numerics.Complex.ToString\n  - System.Numerics.Complex.ToString(System.IFormatProvider)\n  - System.Numerics.Complex.ToString(System.String)\n  - System.Numerics.Complex.ToString(System.String,System.IFormatProvider)\n  - System.Numerics.Complex.Zero\n  langs:\n  - csharp\n  - vb\n  name: Complex\n  fullName: System.Numerics.Complex\n  type: Struct\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Complex\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 159\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Represents a complex number.</p>\\n\"\n  syntax:\n    content: >-\n      [StructLayout(LayoutKind.Sequential)]\n\n      public struct Complex : IEquatable<Complex>, IFormattable\n    content.vb: >-\n      <StructLayout(LayoutKind.Sequential)>\n\n      Public Structure Complex\n          Implements IEquatable(Of Complex), IFormattable\n  implements:\n  - System.IEquatable{System.Numerics.Complex}\n  - System.IFormattable\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: Complex\n- uid: System.Numerics.Complex.ImaginaryOne\n  commentId: F:System.Numerics.Complex.ImaginaryOne\n  id: ImaginaryOne\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: ImaginaryOne\n  fullName: System.Numerics.Complex.ImaginaryOne\n  type: Field\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ImaginaryOne\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 162\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with a real number equal to zero and an imaginary number equal to one.</p>\\n\"\n  syntax:\n    content: public static readonly Complex ImaginaryOne\n    content.vb: Public Shared ReadOnly ImaginaryOne As Complex\n    return:\n      type: System.Numerics.Complex\n  seealso:\n  - type: System.Numerics.Complex.One\n    commentId: F:System.Numerics.Complex.One\n  - type: System.Numerics.Complex.Zero\n    commentId: F:System.Numerics.Complex.Zero\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Complex.ImaginaryOne\n- uid: System.Numerics.Complex.One\n  commentId: F:System.Numerics.Complex.One\n  id: One\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: One\n  fullName: System.Numerics.Complex.One\n  type: Field\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: One\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 163\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with a real number equal to one and an imaginary number equal to zero.</p>\\n\"\n  syntax:\n    content: public static readonly Complex One\n    content.vb: Public Shared ReadOnly One As Complex\n    return:\n      type: System.Numerics.Complex\n  seealso:\n  - type: System.Numerics.Complex.ImaginaryOne\n    commentId: F:System.Numerics.Complex.ImaginaryOne\n  - type: System.Numerics.Complex.Zero\n    commentId: F:System.Numerics.Complex.Zero\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Complex.One\n- uid: System.Numerics.Complex.Zero\n  commentId: F:System.Numerics.Complex.Zero\n  id: Zero\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.Numerics.Complex.Zero\n  type: Field\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Zero\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 164\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a new <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with a real number equal to zero and an imaginary number equal to zero.</p>\\n\"\n  syntax:\n    content: public static readonly Complex Zero\n    content.vb: Public Shared ReadOnly Zero As Complex\n    return:\n      type: System.Numerics.Complex\n  seealso:\n  - type: System.Numerics.Complex.ImaginaryOne\n    commentId: F:System.Numerics.Complex.ImaginaryOne\n  - type: System.Numerics.Complex.One\n    commentId: F:System.Numerics.Complex.One\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: Complex.Zero\n- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)\n  commentId: M:System.Numerics.Complex.#ctor(System.Double,System.Double)\n  id: '#ctor(System.Double,System.Double)'\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Complex(Double, Double)\n  fullName: System.Numerics.Complex.Complex(System.Double, System.Double)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 165\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> structure using the specified real and imaginary values.</p>\\n\"\n  syntax:\n    content: public Complex(double real, double imaginary)\n    content.vb: Public Sub New(real As Double, imaginary As Double)\n    parameters:\n    - id: real\n      type: System.Double\n      description: \"\\n<p>The real part of the complex number.</p>\\n\"\n    - id: imaginary\n      type: System.Double\n      description: \"\\n<p>The imaginary part of the complex number.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Complex.Complex(Double, Double)\n- uid: System.Numerics.Complex.Imaginary\n  commentId: P:System.Numerics.Complex.Imaginary\n  id: Imaginary\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Imaginary\n  fullName: System.Numerics.Complex.Imaginary\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Imaginary\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 166\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the imaginary component of the current <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public double Imaginary { get; }\n    content.vb: Public ReadOnly Property Imaginary As Double\n    parameters: []\n    return:\n      type: System.Double\n      description: \"\\n<p>The imaginary component of a complex number.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Real\n    commentId: P:System.Numerics.Complex.Real\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Complex.Imaginary\n- uid: System.Numerics.Complex.Magnitude\n  commentId: P:System.Numerics.Complex.Magnitude\n  id: Magnitude\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Magnitude\n  fullName: System.Numerics.Complex.Magnitude\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Magnitude\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 167\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the magnitude (or absolute value) of a complex number.</p>\\n\"\n  syntax:\n    content: public double Magnitude { get; }\n    content.vb: Public ReadOnly Property Magnitude As Double\n    parameters: []\n    return:\n      type: System.Double\n      description: \"\\n<p>The magnitude of the current instance.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Abs(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)\n  - type: System.Numerics.Complex.Phase\n    commentId: P:System.Numerics.Complex.Phase\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Complex.Magnitude\n- uid: System.Numerics.Complex.Phase\n  commentId: P:System.Numerics.Complex.Phase\n  id: Phase\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Phase\n  fullName: System.Numerics.Complex.Phase\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Phase\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the phase of a complex number.</p>\\n\"\n  syntax:\n    content: public double Phase { get; }\n    content.vb: Public ReadOnly Property Phase As Double\n    parameters: []\n    return:\n      type: System.Double\n      description: \"\\n<p>The phase of a complex number, in radians.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Magnitude\n    commentId: P:System.Numerics.Complex.Magnitude\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Complex.Phase\n- uid: System.Numerics.Complex.Real\n  commentId: P:System.Numerics.Complex.Real\n  id: Real\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Real\n  fullName: System.Numerics.Complex.Real\n  type: Property\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Real\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 169\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the real component of the current <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public double Real { get; }\n    content.vb: Public ReadOnly Property Real As Double\n    parameters: []\n    return:\n      type: System.Double\n      description: \"\\n<p>The real component of a complex number.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Imaginary\n    commentId: P:System.Numerics.Complex.Imaginary\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Complex.Real\n- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)\n  id: Abs(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Abs(Complex)\n  fullName: System.Numerics.Complex.Abs(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Abs\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 170\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Gets the absolute value (or magnitude) of a complex number.</p>\\n\"\n  syntax:\n    content: public static double Abs(Complex value)\n    content.vb: Public Shared Function Abs(value As Complex) As Double\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The absolute value of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Magnitude\n    commentId: P:System.Numerics.Complex.Magnitude\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Abs(Complex)\n- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)\n  id: Acos(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Acos(Complex)\n  fullName: System.Numerics.Complex.Acos(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Acos\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 171\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the angle that is the arc cosine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Acos(Complex value)\n    content.vb: Public Shared Function Acos(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number that represents a cosine.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The angle, measured in radians, which is the arc cosine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Cos(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)\n  - type: System.Math.Acos(System.Double)\n    commentId: M:System.Math.Acos(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Acos(Complex)\n- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\n  id: Add(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Add(Complex, Complex)\n  fullName: System.Numerics.Complex.Add(System.Numerics.Complex, System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Add\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 172\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two complex numbers and returns the result.</p>\\n\"\n  syntax:\n    content: public static Complex Add(Complex left, Complex right)\n    content.vb: Public Shared Function Add(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first complex number to add.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second complex number to add.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Add(Complex, Complex)\n- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Asin(System.Numerics.Complex)\n  id: Asin(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Asin(Complex)\n  fullName: System.Numerics.Complex.Asin(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Asin\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 173\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the angle that is the arc sine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Asin(Complex value)\n    content.vb: Public Shared Function Asin(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The angle which is the arc sine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Sin(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)\n  - type: System.Math.Asin(System.Double)\n    commentId: M:System.Math.Asin(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Asin(Complex)\n- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)\n  id: Atan(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Atan(Complex)\n  fullName: System.Numerics.Complex.Atan(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Atan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 174\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the angle that is the arc tangent of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Atan(Complex value)\n    content.vb: Public Shared Function Atan(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The angle that is the arc tangent of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Tan(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)\n  - type: System.Math.Atan(System.Double)\n    commentId: M:System.Math.Atan(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Atan(Complex)\n- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)\n  id: Conjugate(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Conjugate(Complex)\n  fullName: System.Numerics.Complex.Conjugate(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Conjugate\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Computes the conjugate of a complex number and returns the result.</p>\\n\"\n  syntax:\n    content: public static Complex Conjugate(Complex value)\n    content.vb: Public Shared Function Conjugate(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The conjugate of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Conjugate(Complex)\n- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)\n  id: Cos(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Cos(Complex)\n  fullName: System.Numerics.Complex.Cos(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cos\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 176\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the cosine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Cos(Complex value)\n    content.vb: Public Shared Function Cos(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The cosine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Acos(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)\n  - type: System.Math.Cos(System.Double)\n    commentId: M:System.Math.Cos(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Cos(Complex)\n- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Cosh(System.Numerics.Complex)\n  id: Cosh(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Cosh(Complex)\n  fullName: System.Numerics.Complex.Cosh(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cosh\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 177\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hyperbolic cosine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Cosh(Complex value)\n    content.vb: Public Shared Function Cosh(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The hyperbolic cosine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Cosh(System.Double)\n    commentId: M:System.Math.Cosh(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Cosh(Complex)\n- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\n  id: Divide(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Divide(Complex, Complex)\n  fullName: System.Numerics.Complex.Divide(System.Numerics.Complex, System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Divide\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 178\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides one complex number by another and returns the result.</p>\\n\"\n  syntax:\n    content: public static Complex Divide(Complex dividend, Complex divisor)\n    content.vb: Public Shared Function Divide(dividend As Complex, divisor As Complex) As Complex\n    parameters:\n    - id: dividend\n      type: System.Numerics.Complex\n      description: \"\\n<p>The complex number to be divided.</p>\\n\"\n    - id: divisor\n      type: System.Numerics.Complex\n      description: \"\\n<p>The complex number to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The quotient of the division.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Divide(Complex, Complex)\n- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Equals(System.Numerics.Complex)\n  id: Equals(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Equals(Complex)\n  fullName: System.Numerics.Complex.Equals(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 179\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a specified complex number have the same value.</p>\\n\"\n  syntax:\n    content: public bool Equals(Complex value)\n    content.vb: Public Function Equals(value As Complex) As Boolean\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>The complex number to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this complex number and <em>value</em> have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Double\n    commentId: T:System.Double\n  implements:\n  - System.IEquatable{System.Numerics.Complex}.Equals(System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Complex.Equals(Complex)\n- uid: System.Numerics.Complex.Equals(System.Object)\n  commentId: M:System.Numerics.Complex.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Numerics.Complex.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 180\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether the current instance and a specified object have the same value. </p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object or a type capable of implicit conversion to a <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, and its value is equal to the current <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Complex.Equals(Object)\n- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)\n  id: Exp(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Exp(Complex)\n  fullName: System.Numerics.Complex.Exp(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Exp\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 181\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns <strong>e</strong> raised to the power specified by a complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Exp(Complex value)\n    content.vb: Public Shared Function Exp(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number that specifies a power.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The number <strong>e</strong> raised to the power <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Exp(System.Double)\n    commentId: M:System.Math.Exp(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Exp(Complex)\n- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\n  commentId: M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)\n  id: FromPolarCoordinates(System.Double,System.Double)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: FromPolarCoordinates(Double, Double)\n  fullName: System.Numerics.Complex.FromPolarCoordinates(System.Double, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FromPolarCoordinates\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 182\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Creates a complex number from a point's polar coordinates.</p>\\n\"\n  syntax:\n    content: public static Complex FromPolarCoordinates(double magnitude, double phase)\n    content.vb: Public Shared Function FromPolarCoordinates(magnitude As Double, phase As Double) As Complex\n    parameters:\n    - id: magnitude\n      type: System.Double\n      description: \"\\n<p>The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.</p>\\n\"\n    - id: phase\n      type: System.Double\n      description: \"\\n<p>The phase, which is the angle from the line to the horizontal axis, measured in radians.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Magnitude\n    commentId: P:System.Numerics.Complex.Magnitude\n  - type: System.Numerics.Complex.Phase\n    commentId: P:System.Numerics.Complex.Phase\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.FromPolarCoordinates(Double, Double)\n- uid: System.Numerics.Complex.GetHashCode\n  commentId: M:System.Numerics.Complex.GetHashCode\n  id: GetHashCode\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Numerics.Complex.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 183\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hash code for the current <xref href=\\\"System.Numerics.Complex\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Complex.GetHashCode()\n- uid: System.Numerics.Complex.Log(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex)\n  id: Log(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Log(Complex)\n  fullName: System.Numerics.Complex.Log(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 184\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the natural (base <strong>e</strong>) logarithm of a specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Log(Complex value)\n    content.vb: Public Shared Function Log(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The natural (base <strong>e</strong>) logarithm of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Log(System.Double)\n    commentId: M:System.Math.Log(System.Double)\n  - type: System.Numerics.Complex.Exp(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Log(Complex)\n- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)\n  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)\n  id: Log(System.Numerics.Complex,System.Double)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Log(Complex, Double)\n  fullName: System.Numerics.Complex.Log(System.Numerics.Complex, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 185\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the logarithm of a specified complex number in a specified base.</p>\\n\"\n  syntax:\n    content: public static Complex Log(Complex value, double baseValue)\n    content.vb: Public Shared Function Log(value As Complex, baseValue As Double) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    - id: baseValue\n      type: System.Double\n      description: \"\\n<p>The base of the logarithm.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The logarithm of <em>value</em> in base <em>baseValue</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Log(Complex, Double)\n- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Log10(System.Numerics.Complex)\n  id: Log10(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Log10(Complex)\n  fullName: System.Numerics.Complex.Log10(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Log10\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 186\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the base-10 logarithm of a specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Log10(Complex value)\n    content.vb: Public Shared Function Log10(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The base-10 logarithm of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Log10(Complex)\n- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  id: Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Complex, Complex)\n  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Multiply\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 187\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the product of two complex numbers.</p>\\n\"\n  syntax:\n    content: public static Complex Multiply(Complex left, Complex right)\n    content.vb: Public Shared Function Multiply(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first complex number to multiply.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second complex number to multiply.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The product of the <em>left</em> and <em>right</em> parameters.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Multiply(Complex, Complex)\n- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)\n  id: Negate(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Negate(Complex)\n  fullName: System.Numerics.Complex.Negate(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Negate\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 188\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the additive inverse of a specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Negate(Complex value)\n    content.vb: Public Shared Function Negate(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The result of the <xref href=\\\"System.Numerics.Complex.Real\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Numerics.Complex.Imaginary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> components of the <em>value</em> parameter multiplied by -1.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Negate(Complex)\n- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Addition(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Addition(Complex, Complex)\n  fullName: System.Numerics.Complex.Addition(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Addition\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 189\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Adds two complex numbers.</p>\\n\"\n  syntax:\n    content: public static Complex operator +(Complex left, Complex right)\n    content.vb: Public Shared Operator +(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first value to add.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second value to add.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The sum of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Addition(Complex, Complex)\n- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Division(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Division(Complex, Complex)\n  fullName: System.Numerics.Complex.Division(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Division\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Divides a specified complex number by another specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex operator /(Complex left, Complex right)\n    content.vb: Public Shared Operator /(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to be divided.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to divide by.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The result of dividing <em>left</em> by <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Division(Complex, Complex)\n- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Equality(Complex, Complex)\n  fullName: System.Numerics.Complex.Equality(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 191\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two complex numbers are equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(Complex left, Complex right)\n    content.vb: Public Shared Operator =(left As Complex, right As Complex) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first complex number to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second complex number to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Equality(Complex, Complex)\n- uid: System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex\n  id: op_Explicit(System.Decimal)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Decimal to Complex)\n  fullName: System.Numerics.Complex.Explicit(System.Decimal to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 192\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Decimal\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to a complex number.</p>\\n\"\n  syntax:\n    content: public static explicit operator Complex(decimal value)\n    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Complex\n    parameters:\n    - id: value\n      type: System.Decimal\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Narrowing(System.Decimal to System.Numerics.Complex)\n  name.vb: Narrowing(Decimal to Complex)\n  nameWithType: Complex.Explicit(Decimal to Complex)\n  nameWithType.vb: Complex.Narrowing(Decimal to Complex)\n- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex\n  id: op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Explicit(BigInteger to Complex)\n  fullName: System.Numerics.Complex.Explicit(System.Numerics.BigInteger to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Explicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 193\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an explicit conversion of a <xref href=\\\"System.Numerics.BigInteger\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value to a complex number. </p>\\n\"\n  syntax:\n    content: public static explicit operator Complex(BigInteger value)\n    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.BigInteger\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Narrowing(System.Numerics.BigInteger to System.Numerics.Complex)\n  name.vb: Narrowing(BigInteger to Complex)\n  nameWithType: Complex.Explicit(BigInteger to Complex)\n  nameWithType.vb: Complex.Narrowing(BigInteger to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex\n  id: op_Implicit(System.Byte)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Byte to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Byte to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 194\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of an unsigned byte to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(byte value)\n    content.vb: Public Shared Widening Operator CType(value As Byte) As Complex\n    parameters:\n    - id: value\n      type: System.Byte\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Byte to System.Numerics.Complex)\n  name.vb: Widening(Byte to Complex)\n  nameWithType: Complex.Implicit(Byte to Complex)\n  nameWithType.vb: Complex.Widening(Byte to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex\n  id: op_Implicit(System.Double)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Double to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Double to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 195\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a double-precision floating-point number to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(double value)\n    content.vb: Public Shared Widening Operator CType(value As Double) As Complex\n    parameters:\n    - id: value\n      type: System.Double\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Double to System.Numerics.Complex)\n  name.vb: Widening(Double to Complex)\n  nameWithType: Complex.Implicit(Double to Complex)\n  nameWithType.vb: Complex.Widening(Double to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex\n  id: op_Implicit(System.Int16)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int16 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Int16 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 196\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 16-bit signed integer to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(short value)\n    content.vb: Public Shared Widening Operator CType(value As Short) As Complex\n    parameters:\n    - id: value\n      type: System.Int16\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Int16 to System.Numerics.Complex)\n  name.vb: Widening(Int16 to Complex)\n  nameWithType: Complex.Implicit(Int16 to Complex)\n  nameWithType.vb: Complex.Widening(Int16 to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex\n  id: op_Implicit(System.Int32)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int32 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Int32 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 197\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 32-bit signed integer to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(int value)\n    content.vb: Public Shared Widening Operator CType(value As Integer) As Complex\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Int32 to System.Numerics.Complex)\n  name.vb: Widening(Int32 to Complex)\n  nameWithType: Complex.Implicit(Int32 to Complex)\n  nameWithType.vb: Complex.Widening(Int32 to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex\n  id: op_Implicit(System.Int64)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Int64 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Int64 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 198\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 64-bit signed integer to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(long value)\n    content.vb: Public Shared Widening Operator CType(value As Long) As Complex\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Int64 to System.Numerics.Complex)\n  name.vb: Widening(Int64 to Complex)\n  nameWithType: Complex.Implicit(Int64 to Complex)\n  nameWithType.vb: Complex.Widening(Int64 to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex\n  id: op_Implicit(System.SByte)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(SByte to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.SByte to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 199\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a signed byte to a complex number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator Complex(sbyte value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As SByte) As Complex\n    parameters:\n    - id: value\n      type: System.SByte\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.SByte to System.Numerics.Complex)\n  name.vb: Widening(SByte to Complex)\n  nameWithType: Complex.Implicit(SByte to Complex)\n  nameWithType.vb: Complex.Widening(SByte to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex\n  id: op_Implicit(System.Single)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(Single to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.Single to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 201\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a single-precision floating-point number to a complex number.</p>\\n\"\n  syntax:\n    content: public static implicit operator Complex(float value)\n    content.vb: Public Shared Widening Operator CType(value As Single) As Complex\n    parameters:\n    - id: value\n      type: System.Single\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.Single to System.Numerics.Complex)\n  name.vb: Widening(Single to Complex)\n  nameWithType: Complex.Implicit(Single to Complex)\n  nameWithType.vb: Complex.Widening(Single to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex\n  id: op_Implicit(System.UInt16)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt16 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.UInt16 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 202\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 16-bit unsigned integer to a complex number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator Complex(ushort value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UShort) As Complex\n    parameters:\n    - id: value\n      type: System.UInt16\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.UInt16 to System.Numerics.Complex)\n  name.vb: Widening(UInt16 to Complex)\n  nameWithType: Complex.Implicit(UInt16 to Complex)\n  nameWithType.vb: Complex.Widening(UInt16 to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex\n  id: op_Implicit(System.UInt32)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt32 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.UInt32 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 204\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 32-bit unsigned integer to a complex number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator Complex(uint value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As UInteger) As Complex\n    parameters:\n    - id: value\n      type: System.UInt32\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.UInt32 to System.Numerics.Complex)\n  name.vb: Widening(UInt32 to Complex)\n  nameWithType: Complex.Implicit(UInt32 to Complex)\n  nameWithType.vb: Complex.Widening(UInt32 to Complex)\n- uid: System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex\n  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex\n  id: op_Implicit(System.UInt64)~System.Numerics.Complex\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Implicit(UInt64 to Complex)\n  fullName: System.Numerics.Complex.Implicit(System.UInt64 to System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Implicit\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 206\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Defines an implicit conversion of a 64-bit unsigned integer to a complex number.</p>\\n\"\n  syntax:\n    content: >-\n      [CLSCompliant(false)]\n\n      public static implicit operator Complex(ulong value)\n    content.vb: >-\n      <CLSCompliant(False)>\n\n      Public Shared Widening Operator CType(value As ULong) As Complex\n    parameters:\n    - id: value\n      type: System.UInt64\n      description: \"\\n<p>The value to convert to a complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Numerics.Complex.Widening(System.UInt64 to System.Numerics.Complex)\n  name.vb: Widening(UInt64 to Complex)\n  nameWithType: Complex.Implicit(UInt64 to Complex)\n  nameWithType.vb: Complex.Widening(UInt64 to Complex)\n- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Inequality(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Inequality(Complex, Complex)\n  fullName: System.Numerics.Complex.Inequality(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 208\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a value that indicates whether two complex numbers are not equal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(Complex left, Complex right)\n    content.vb: Public Shared Operator <>(left As Complex, right As Complex) As Boolean\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first value to compare.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second value to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Inequality(Complex, Complex)\n- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Multiply(Complex, Complex)\n  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Multiply\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 209\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Multiplies two specified complex numbers.</p>\\n\"\n  syntax:\n    content: public static Complex operator *(Complex left, Complex right)\n    content.vb: Public Shared Operator *(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The first value to multiply.</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The second value to multiply.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The product of <em>left</em> and <em>right</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Multiply(Complex, Complex)\n- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n  id: op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(Complex, Complex)\n  fullName: System.Numerics.Complex.Subtraction(System.Numerics.Complex, System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Subtraction\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 210\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts a complex number from another complex number.</p>\\n\"\n  syntax:\n    content: public static Complex operator -(Complex left, Complex right)\n    content.vb: Public Shared Operator -(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to subtract from (the minuend).</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to subtract (the subtrahend).</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Subtraction(Complex, Complex)\n- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)\n  id: op_UnaryNegation(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: UnaryNegation(Complex)\n  fullName: System.Numerics.Complex.UnaryNegation(System.Numerics.Complex)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_UnaryNegation\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 211\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the additive inverse of a specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex operator -(Complex value)\n    content.vb: Public Shared Operator -(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to negate.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The result of the <xref href=\\\"System.Numerics.Complex.Real\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Numerics.Complex.Imaginary\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> components of the <em>value</em> parameter multiplied by -1.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Negate(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.UnaryNegation(Complex)\n- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)\n  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)\n  id: Pow(System.Numerics.Complex,System.Double)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Pow(Complex, Double)\n  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Double)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pow\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 212\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a specified complex number raised to a power specified by a double-precision floating-point number.</p>\\n\"\n  syntax:\n    content: public static Complex Pow(Complex value, double power)\n    content.vb: Public Shared Function Pow(value As Complex, power As Double) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number to be raised to a power.</p>\\n\"\n    - id: power\n      type: System.Double\n      description: \"\\n<p>A double-precision floating-point number that specifies a power.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Pow(Complex, Double)\n- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)\n  id: Pow(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Pow(Complex, Complex)\n  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pow\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 213\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns a specified complex number raised to a power specified by a complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Pow(Complex value, Complex power)\n    content.vb: Public Shared Function Pow(value As Complex, power As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number to be raised to a power.</p>\\n\"\n    - id: power\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number that specifies a power.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The complex number <em>value</em> raised to the power <em>power</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Pow(Complex, Complex)\n- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)\n  id: Reciprocal(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Reciprocal(Complex)\n  fullName: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Reciprocal\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 214\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the multiplicative inverse of a complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Reciprocal(Complex value)\n    content.vb: Public Shared Function Reciprocal(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The reciprocal of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Reciprocal(Complex)\n- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)\n  id: Sin(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Sin(Complex)\n  fullName: System.Numerics.Complex.Sin(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sin\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 215\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the sine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Sin(Complex value)\n    content.vb: Public Shared Function Sin(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The sine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Asin(System.Double)\n    commentId: M:System.Math.Asin(System.Double)\n  - type: System.Numerics.Complex.Sin(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Sin(Complex)\n- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Sinh(System.Numerics.Complex)\n  id: Sinh(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Sinh(Complex)\n  fullName: System.Numerics.Complex.Sinh(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sinh\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 216\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hyperbolic sine of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Sinh(Complex value)\n    content.vb: Public Shared Function Sinh(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The hyperbolic sine of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Sinh(System.Double)\n    commentId: M:System.Math.Sinh(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Sinh(Complex)\n- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)\n  id: Sqrt(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Sqrt(Complex)\n  fullName: System.Numerics.Complex.Sqrt(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Sqrt\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 217\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the square root of a specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Sqrt(Complex value)\n    content.vb: Public Shared Function Sqrt(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The square root of <em>value</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Sqrt(Complex)\n- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)\n  id: Subtract(System.Numerics.Complex,System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Subtract(Complex, Complex)\n  fullName: System.Numerics.Complex.Subtract(System.Numerics.Complex, System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Subtract\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 218\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Subtracts one complex number from another and returns the result.</p>\\n\"\n  syntax:\n    content: public static Complex Subtract(Complex left, Complex right)\n    content.vb: Public Shared Function Subtract(left As Complex, right As Complex) As Complex\n    parameters:\n    - id: left\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to subtract from (the minuend).</p>\\n\"\n    - id: right\n      type: System.Numerics.Complex\n      description: \"\\n<p>The value to subtract (the subtrahend).</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The result of subtracting <em>right</em> from <em>left</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Subtract(Complex, Complex)\n- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)\n  id: Tan(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Tan(Complex)\n  fullName: System.Numerics.Complex.Tan(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Tan\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 219\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the tangent of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Tan(Complex value)\n    content.vb: Public Shared Function Tan(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The tangent of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Numerics.Complex.Atan(System.Numerics.Complex)\n    commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)\n  - type: System.Math.Tan(System.Double)\n    commentId: M:System.Math.Tan(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Tan(Complex)\n- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)\n  commentId: M:System.Numerics.Complex.Tanh(System.Numerics.Complex)\n  id: Tanh(System.Numerics.Complex)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: Tanh(Complex)\n  fullName: System.Numerics.Complex.Tanh(System.Numerics.Complex)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Tanh\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 220\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Returns the hyperbolic tangent of the specified complex number.</p>\\n\"\n  syntax:\n    content: public static Complex Tanh(Complex value)\n    content.vb: Public Shared Function Tanh(value As Complex) As Complex\n    parameters:\n    - id: value\n      type: System.Numerics.Complex\n      description: \"\\n<p>A complex number.</p>\\n\"\n    return:\n      type: System.Numerics.Complex\n      description: \"\\n<p>The hyperbolic tangent of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.Math.Tanh(System.Double)\n    commentId: M:System.Math.Tanh(System.Double)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Complex.Tanh(Complex)\n- uid: System.Numerics.Complex.ToString\n  commentId: M:System.Numerics.Complex.ToString\n  id: ToString\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Numerics.Complex.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form.</p>\\n\"\n  syntax:\n    content: public override string ToString()\n    content.vb: Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance in Cartesian form.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: Complex.ToString()\n- uid: System.Numerics.Complex.ToString(System.IFormatProvider)\n  commentId: M:System.Numerics.Complex.ToString(System.IFormatProvider)\n  id: ToString(System.IFormatProvider)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: ToString(IFormatProvider)\n  fullName: System.Numerics.Complex.ToString(System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 222\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.</p>\\n\"\n  syntax:\n    content: public string ToString(IFormatProvider provider)\n    content.vb: Public Function ToString(provider As IFormatProvider) As String\n    parameters:\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance in Cartesian form, as specified by <em>provider</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Complex.ToString(IFormatProvider)\n- uid: System.Numerics.Complex.ToString(System.String)\n  commentId: M:System.Numerics.Complex.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.Numerics.Complex.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 223\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.</p>\\n\"\n  syntax:\n    content: public string ToString(string format)\n    content.vb: Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance in Cartesian form.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Complex.ToString(String)\n- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)\n  commentId: M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)\n  id: ToString(System.String,System.IFormatProvider)\n  parent: System.Numerics.Complex\n  langs:\n  - csharp\n  - vb\n  name: ToString(String, IFormatProvider)\n  fullName: System.Numerics.Complex.ToString(System.String, System.IFormatProvider)\n  type: Method\n  source:\n    remote:\n      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs\n    startLine: 224\n  assemblies:\n  - System.Runtime.Numerics\n  namespace: System.Numerics\n  summary: \"\\n<p>Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.</p>\\n\"\n  syntax:\n    content: public string ToString(string format, IFormatProvider provider)\n    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A standard or custom numeric format string.</p>\\n\"\n    - id: provider\n      type: System.IFormatProvider\n      description: \"\\n<p>An object that supplies culture-specific formatting information.</p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the current instance in Cartesian form, as specified by <em>format</em> and <em>provider</em>.</p>\\n\"\n  exceptions:\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>\\n<em>format</em> is not a valid format string.</p>\\n\"\n  implements:\n  - System.IFormattable.ToString(System.String,System.IFormatProvider)\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Complex.ToString(String, IFormatProvider)\nreferences:\n- uid: System.Numerics\n  isExternal: false\n  name: System.Numerics\n  fullName: System.Numerics\n  commentId: N:System.Numerics\n  nameWithType: System.Numerics\n- uid: System.IEquatable{System.Numerics.Complex}\n  parent: System\n  definition: System.IEquatable`1\n  name: IEquatable<Complex>\n  fullName: System.IEquatable<System.Numerics.Complex>\n  fullname.vb: System.IEquatable(Of System.Numerics.Complex)\n  name.vb: IEquatable(Of Complex)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Numerics.Complex\n    name: Complex\n    fullName: System.Numerics.Complex\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Numerics.Complex\n    name: Complex\n    fullName: System.Numerics.Complex\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable{System.Numerics.Complex}\n  nameWithType: IEquatable<Complex>\n  nameWithType.vb: IEquatable(Of Complex)\n- uid: System.IFormattable\n  parent: System\n  isExternal: false\n  name: IFormattable\n  fullName: System.IFormattable\n  commentId: T:System.IFormattable\n  nameWithType: IFormattable\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.IEquatable`1\n  isExternal: false\n  name: IEquatable<T>\n  fullName: System.IEquatable<T>\n  fullname.vb: System.IEquatable(Of T)\n  name.vb: IEquatable(Of T)\n  spec.csharp:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.IEquatable`1\n    name: IEquatable\n    fullName: System.IEquatable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: T:System.IEquatable`1\n  nameWithType: IEquatable<T>\n  nameWithType.vb: IEquatable(Of T)\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Numerics.Complex\n  parent: System.Numerics\n  isExternal: false\n  name: Complex\n  fullName: System.Numerics.Complex\n  commentId: T:System.Numerics.Complex\n  nameWithType: Complex\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  commentId: T:System.Double\n  nameWithType: Double\n- uid: System.IEquatable{System.Numerics.Complex}.Equals(System.Numerics.Complex)\n  parent: System.IEquatable{System.Numerics.Complex}\n  definition: System.IEquatable`1.Equals(`0)\n  name: Equals(Complex)\n  fullName: System.IEquatable<System.Numerics.Complex>.Equals(System.Numerics.Complex)\n  fullname.vb: System.IEquatable(Of System.Numerics.Complex).Equals(System.Numerics.Complex)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<System.Numerics.Complex>.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Complex\n    name: Complex\n    fullName: System.Numerics.Complex\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of System.Numerics.Complex).Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Numerics.Complex\n    name: Complex\n    fullName: System.Numerics.Complex\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable{System.Numerics.Complex}.Equals(System.Numerics.Complex)\n  nameWithType: IEquatable<Complex>.Equals(Complex)\n  nameWithType.vb: IEquatable(Of Complex).Equals(Complex)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.IEquatable`1.Equals(`0)\n  isExternal: false\n  name: Equals(T)\n  fullName: System.IEquatable<T>.Equals(T)\n  fullname.vb: System.IEquatable(Of T).Equals(T)\n  spec.csharp:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable<T>.Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IEquatable`1.Equals(`0)\n    name: Equals\n    fullName: System.IEquatable(Of T).Equals\n  - name: (\n    fullName: (\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  commentId: M:System.IEquatable`1.Equals(`0)\n  nameWithType: IEquatable<T>.Equals(T)\n  nameWithType.vb: IEquatable(Of T).Equals(T)\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.Equals(System.Object)\n  nameWithType: ValueType.Equals(Object)\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  commentId: T:System.ValueType\n  nameWithType: ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.GetHashCode\n  nameWithType: ValueType.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  commentId: T:System.Decimal\n  nameWithType: Decimal\n- uid: System.Numerics.BigInteger\n  parent: System.Numerics\n  isExternal: false\n  name: BigInteger\n  fullName: System.Numerics.BigInteger\n  commentId: T:System.Numerics.BigInteger\n  nameWithType: BigInteger\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  commentId: T:System.Byte\n  nameWithType: Byte\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  commentId: T:System.Int16\n  nameWithType: Int16\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  commentId: T:System.Int64\n  nameWithType: Int64\n- uid: System.SByte\n  parent: System\n  isExternal: false\n  name: SByte\n  fullName: System.SByte\n  commentId: T:System.SByte\n  nameWithType: SByte\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  commentId: T:System.Single\n  nameWithType: Single\n- uid: System.UInt16\n  parent: System\n  isExternal: false\n  name: UInt16\n  fullName: System.UInt16\n  commentId: T:System.UInt16\n  nameWithType: UInt16\n- uid: System.UInt32\n  parent: System\n  isExternal: false\n  name: UInt32\n  fullName: System.UInt32\n  commentId: T:System.UInt32\n  nameWithType: UInt32\n- uid: System.UInt64\n  parent: System\n  isExternal: false\n  name: UInt64\n  fullName: System.UInt64\n  commentId: T:System.UInt64\n  nameWithType: UInt64\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.ValueType.ToString\n  nameWithType: ValueType.ToString()\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IFormatProvider\n  parent: System\n  isExternal: false\n  name: IFormatProvider\n  fullName: System.IFormatProvider\n  commentId: T:System.IFormatProvider\n  nameWithType: IFormatProvider\n- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n  parent: System.IFormattable\n  isExternal: true\n  name: ToString(String, IFormatProvider)\n  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)\n  spec.csharp:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)\n    name: ToString\n    fullName: System.IFormattable.ToString\n  - name: (\n    fullName: (\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IFormatProvider\n    name: IFormatProvider\n    fullName: System.IFormatProvider\n  - name: )\n    fullName: )\n  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)\n  nameWithType: IFormattable.ToString(String, IFormatProvider)\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n"}