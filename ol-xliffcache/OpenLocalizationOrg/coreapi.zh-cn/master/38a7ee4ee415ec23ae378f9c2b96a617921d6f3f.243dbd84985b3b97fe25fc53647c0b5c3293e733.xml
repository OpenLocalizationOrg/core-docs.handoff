{"nodes":[{"pos":[1153,1176],"content":"CancellationTokenSource","needQuote":true,"nodes":[{"content":"CancellationTokenSource","pos":[0,23]}]},{"pos":[2838,2863],"content":"CancellationTokenSource()","needQuote":true,"nodes":[{"content":"CancellationTokenSource()","pos":[0,25]}]},{"pos":[3939,3969],"content":"CancellationTokenSource(Int32)","needQuote":true,"nodes":[{"content":"CancellationTokenSource(Int32)","pos":[0,30]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;millisecondsDelay&lt;/em&gt; is less than -1.","pos":[5187,5237],"source":"\\n<p>\\n<em>millisecondsDelay</em> is less than -1."},{"content":"&lt;/p&gt;\\n","pos":[5238,5244],"source":" </p>\\n"},{"pos":[5642,5675],"content":"CancellationTokenSource(TimeSpan)","needQuote":true,"nodes":[{"content":"CancellationTokenSource(TimeSpan)","pos":[0,33]}]},{"pos":[7499,7522],"content":"IsCancellationRequested","needQuote":true,"nodes":[{"content":"IsCancellationRequested","pos":[0,23]}]},{"pos":[8952,8957],"content":"Token","needQuote":true,"nodes":[{"content":"Token","pos":[0,5]}]},{"content":"\\n&lt;p&gt;The token source has been disposed.&lt;/p&gt;\\n","pos":[10210,10256],"source":"\\n<p>The token source has been disposed.</p>\\n"},{"pos":[10600,10608],"content":"Cancel()","needQuote":true,"nodes":[{"content":"Cancel()","pos":[0,8]}]},{"pos":[12112,12127],"content":"Cancel(Boolean)","needQuote":true,"nodes":[{"content":"Cancel(Boolean)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if exceptions should immediately propagate; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12948,13061],"source":"\\n<p>\\n<strong>true</strong> if exceptions should immediately propagate; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[14020,14038],"content":"CancelAfter(Int32)","needQuote":true,"nodes":[{"content":"CancelAfter(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The exception thrown when &lt;em&gt;millisecondsDelay&lt;/em&gt; is less than -1.&lt;/p&gt;\\n","pos":[15471,15551],"source":"\\n<p>The exception thrown when <em>millisecondsDelay</em> is less than -1.</p>\\n"},{"pos":[15953,15974],"content":"CancelAfter(TimeSpan)","needQuote":true,"nodes":[{"content":"CancelAfter(TimeSpan)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The exception that is thrown when &lt;em&gt;delay&lt;/em&gt; is less than -1 or greater than Int32.MaxValue.&lt;/p&gt;\\n","pos":[17370,17477],"source":"\\n<p>The exception that is thrown when <em>delay</em> is less than -1 or greater than Int32.MaxValue.</p>\\n"},{"pos":[18080,18141],"content":"CreateLinkedTokenSource(CancellationToken, CancellationToken)","needQuote":true,"nodes":[{"content":"CreateLinkedTokenSource(CancellationToken, CancellationToken)","pos":[0,61]}]},{"content":"\\n&lt;p&gt;The first cancellation token to observe.&lt;/p&gt;\\n","pos":[19277,19328],"source":"\\n<p>The first cancellation token to observe.</p>\\n"},{"content":"\\n&lt;p&gt;The second cancellation token to observe.&lt;/p&gt;\\n","pos":[19414,19466],"source":"\\n<p>The second cancellation token to observe.</p>\\n"},{"pos":[20565,20609],"content":"CreateLinkedTokenSource(CancellationToken[])","needQuote":true,"nodes":[{"content":"CreateLinkedTokenSource(CancellationToken[])","pos":[0,44]}]},{"content":"\\n&lt;p&gt;An array that contains the cancellation token instances to observe.&lt;/p&gt;\\n","pos":[21703,21781],"source":"\\n<p>An array that contains the cancellation token instances to observe.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;tokens&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[22419,22473],"source":"\\n<p>\\n<em>tokens</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;tokens&lt;/em&gt; is empty.&lt;/p&gt;\\n","pos":[22570,22608],"source":"\\n<p>\\n<em>tokens</em> is empty.</p>\\n"},{"pos":[23257,23266],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[24380,24396],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to release only unmanaged resources.&lt;/p&gt;\\n","pos":[25280,25423],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n"},{"pos":[25638,25654],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[25815,25821],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[25971,25982],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[26157,26167],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26262,26270],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26339,26340],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26367,26368],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26438,26446],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26515,26516],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26543,26544],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26727,26741],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26860,26866],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26933,26934],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26984,26990],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27050,27051],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27134,27140],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27207,27208],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27258,27264],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27324,27325],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27539,27561],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27709,27715],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27782,27783],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27833,27839],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27900,27901]},{"pos":[27956,27962],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28022,28023],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28120,28126],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28193,28194],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28244,28250],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28311,28312]},{"pos":[28367,28373],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28433,28434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28679,28710],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28876,28891],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28967,28968],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29018,29024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29085,29086]},{"pos":[29141,29147],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29207,29208],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29314,29329],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[29405,29406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29456,29462],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29523,29524]},{"pos":[29579,29585],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29645,29646],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29876,29889],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[29990,30001],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30073,30074],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30101,30102],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30175,30186],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[30258,30259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30286,30287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30462,30471],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[30564,30571],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30639,30640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30667,30668],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30737,30744],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[30812,30813],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30840,30841],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31016,31033],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[31142,31157],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31233,31234],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31261,31262],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31339,31354],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[31430,31431],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31458,31459],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31604,31610],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[31740,31745],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31889,31897],"content":"TimeSpan","needQuote":true,"nodes":[{"content":"TimeSpan","pos":[0,8]}]},{"pos":[32049,32056],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32235,32252],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[32487,32510],"content":"CancellationTokenSource","needQuote":true,"nodes":[{"content":"CancellationTokenSource","pos":[0,23]}]},{"pos":[32712,32731],"content":"CancellationToken[]","needQuote":true,"nodes":[{"content":"CancellationToken[]","pos":[0,19]}]},{"pos":[32933,32950],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":"[]","pos":[33011,33013]},{"pos":[33099,33116],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[33176,33178],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[33362,33371],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[33474,33481],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[33533,33534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33561,33562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33636,33643],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[33695,33696],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33723,33724],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33891,33918],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[34126,34149],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[34357,34375],"content":"AggregateException","needQuote":true,"nodes":[{"content":"AggregateException","pos":[0,18]}]},{"pos":[34554,34575],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[34776,34793],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.CancellationTokenSource\n  commentId: T:System.Threading.CancellationTokenSource\n  id: CancellationTokenSource\n  parent: System.Threading\n  children:\n  - System.Threading.CancellationTokenSource.#ctor\n  - System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  - System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  - System.Threading.CancellationTokenSource.Cancel\n  - System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  - System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  - System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  - System.Threading.CancellationTokenSource.Dispose\n  - System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  - System.Threading.CancellationTokenSource.IsCancellationRequested\n  - System.Threading.CancellationTokenSource.Token\n  langs:\n  - csharp\n  - vb\n  name: CancellationTokenSource\n  fullName: System.Threading.CancellationTokenSource\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancellationTokenSource\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 36\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Signals to a <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that it should be canceled.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class CancellationTokenSource : IDisposable\n    content.vb: >-\n      <ComVisible(False)>\n\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class CancellationTokenSource\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: CancellationTokenSource\n- uid: System.Threading.CancellationTokenSource.#ctor\n  commentId: M:System.Threading.CancellationTokenSource.#ctor\n  id: '#ctor'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CancellationTokenSource()\n  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 240\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public CancellationTokenSource()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.CancellationTokenSource()\n- uid: System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CancellationTokenSource(Int32)\n  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 302\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that will be canceled after the specified delay in milliseconds.</p>\\n\"\n  syntax:\n    content: public CancellationTokenSource(int millisecondsDelay)\n    content.vb: Public Sub New(millisecondsDelay As Integer)\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: \"\\n<p>The time interval in milliseconds to wait before canceling this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>millisecondsDelay</em> is less than -1. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.CancellationTokenSource(Int32)\n- uid: System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)\n  id: '#ctor(System.TimeSpan)'\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CancellationTokenSource(TimeSpan)\n  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 272\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class that will be canceled after the specified time span.</p>\\n\"\n  syntax:\n    content: public CancellationTokenSource(TimeSpan delay)\n    content.vb: Public Sub New(delay As TimeSpan)\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: \"\\n<p>The time interval to wait before canceling this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>delay</em>\\n<strong>.</strong>\\n<xref href=\\\"System.TimeSpan.TotalMilliseconds\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is less than -1 or greater than <xref href=\\\"System.Int32.MaxValue\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.CancellationTokenSource(TimeSpan)\n- uid: System.Threading.CancellationTokenSource.IsCancellationRequested\n  commentId: P:System.Threading.CancellationTokenSource.IsCancellationRequested\n  id: IsCancellationRequested\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: IsCancellationRequested\n  fullName: System.Threading.CancellationTokenSource.IsCancellationRequested\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsCancellationRequested\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 102\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Gets whether cancellation has been requested for this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public bool IsCancellationRequested { get; }\n    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if cancellation has been requested for this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CancellationTokenSource.IsCancellationRequested\n- uid: System.Threading.CancellationTokenSource.Token\n  commentId: P:System.Threading.CancellationTokenSource.Token\n  id: Token\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: Token\n  fullName: System.Threading.CancellationTokenSource.Token\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Token\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 140\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public CancellationToken Token { get; }\n    content.vb: Public ReadOnly Property Token As CancellationToken\n    parameters: []\n    return:\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The token source has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: CancellationTokenSource.Token\n- uid: System.Threading.CancellationTokenSource.Cancel\n  commentId: M:System.Threading.CancellationTokenSource.Cancel\n  id: Cancel\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: Cancel()\n  fullName: System.Threading.CancellationTokenSource.Cancel()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cancel\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 346\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Communicates a request for cancellation.</p>\\n\"\n  syntax:\n    content: public void Cancel()\n    content.vb: Public Sub Cancel\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.Cancel()\n- uid: System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  commentId: M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  id: Cancel(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: Cancel(Boolean)\n  fullName: System.Threading.CancellationTokenSource.Cancel(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Cancel\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 380\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.</p>\\n\"\n  syntax:\n    content: public void Cancel(bool throwOnFirstException)\n    content.vb: Public Sub Cancel(throwOnFirstException As Boolean)\n    parameters:\n    - id: throwOnFirstException\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if exceptions should immediately propagate; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.AggregateException\n    commentId: T:System.AggregateException\n    description: \"\\n<p>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\\\"System.Threading.CancellationToken\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.Cancel(Boolean)\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  id: CancelAfter(System.Int32)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CancelAfter(Int32)\n  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancelAfter\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 446\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Schedules a cancel operation on this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after the specified number of milliseconds.</p>\\n\"\n  syntax:\n    content: public void CancelAfter(int millisecondsDelay)\n    content.vb: Public Sub CancelAfter(millisecondsDelay As Integer)\n    parameters:\n    - id: millisecondsDelay\n      type: System.Int32\n      description: \"\\n<p>The time span to wait before canceling this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception thrown when this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception thrown when <em>millisecondsDelay</em> is less than -1.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.CancelAfter(Int32)\n- uid: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  id: CancelAfter(System.TimeSpan)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CancelAfter(TimeSpan)\n  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancelAfter\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 411\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Schedules a cancel operation on this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> after the specified time span.</p>\\n\"\n  syntax:\n    content: public void CancelAfter(TimeSpan delay)\n    content.vb: Public Sub CancelAfter(delay As TimeSpan)\n    parameters:\n    - id: delay\n      type: System.TimeSpan\n      description: \"\\n<p>The time span to wait before canceling this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The exception thrown when this <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> has been disposed.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The exception that is thrown when <em>delay</em> is less than -1 or greater than Int32.MaxValue.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.CancelAfter(TimeSpan)\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  id: CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CreateLinkedTokenSource(CancellationToken, CancellationToken)\n  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateLinkedTokenSource\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 866\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be in the canceled state when any of the source tokens are in the canceled state.</p>\\n\"\n  syntax:\n    content: public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2)\n    content.vb: Public Shared Function CreateLinkedTokenSource(token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource\n    parameters:\n    - id: token1\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The first cancellation token to observe.</p>\\n\"\n    - id: token2\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The second cancellation token to observe.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenSource\n      description: \"\\n<p>A <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is linked to the source tokens.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>A <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with one of the source tokens has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken, CancellationToken)\n- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  id: CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: CreateLinkedTokenSource(CancellationToken[])\n  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateLinkedTokenSource\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 881\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</p>\\n\"\n  syntax:\n    content: public static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens)\n    content.vb: Public Shared Function CreateLinkedTokenSource(ParamArray tokens As CancellationToken()) As CancellationTokenSource\n    parameters:\n    - id: tokens\n      type: System.Threading.CancellationToken[]\n      description: \"\\n<p>An array that contains the cancellation token instances to observe.</p>\\n\"\n    return:\n      type: System.Threading.CancellationTokenSource\n      description: \"\\n<p>A <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is linked to the source tokens.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>A <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with one of the source tokens has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>tokens</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>tokens</em> is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken())\n  name.vb: CreateLinkedTokenSource(CancellationToken())\n  nameWithType: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken[])\n  nameWithType.vb: CancellationTokenSource.CreateLinkedTokenSource(CancellationToken())\n- uid: System.Threading.CancellationTokenSource.Dispose\n  commentId: M:System.Threading.CancellationTokenSource.Dispose\n  id: Dispose\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Threading.CancellationTokenSource.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 528\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Releases all resources used by the current instance of the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: CancellationTokenSource.Dispose()\n- uid: System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  commentId: M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Threading.CancellationTokenSource\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Threading.CancellationTokenSource.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Dispose\n    path: src/mscorlib/src/System/Threading/CancellationTokenSource.cs\n    startLine: 538\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class and optionally releases the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: CancellationTokenSource.Dispose(Boolean)\nreferences:\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  nameWithType: IDisposable\n  commentId: T:System.IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.TimeSpan\n  parent: System\n  isExternal: false\n  name: TimeSpan\n  fullName: System.TimeSpan\n  nameWithType: TimeSpan\n  commentId: T:System.TimeSpan\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading.CancellationTokenSource\n  parent: System.Threading\n  isExternal: false\n  name: CancellationTokenSource\n  fullName: System.Threading.CancellationTokenSource\n  nameWithType: CancellationTokenSource\n  commentId: T:System.Threading.CancellationTokenSource\n- uid: System.Threading.CancellationToken[]\n  name: CancellationToken[]\n  fullName: System.Threading.CancellationToken[]\n  fullname.vb: System.Threading.CancellationToken()\n  name.vb: CancellationToken()\n  spec.csharp:\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.CancellationToken\n    name: CancellationToken\n    fullName: System.Threading.CancellationToken\n  - name: ()\n    fullName: ()\n  nameWithType: CancellationToken[]\n  nameWithType.vb: CancellationToken()\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: IDisposable.Dispose()\n  commentId: M:System.IDisposable.Dispose\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.AggregateException\n  parent: System\n  isExternal: false\n  name: AggregateException\n  fullName: System.AggregateException\n  nameWithType: AggregateException\n  commentId: T:System.AggregateException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}