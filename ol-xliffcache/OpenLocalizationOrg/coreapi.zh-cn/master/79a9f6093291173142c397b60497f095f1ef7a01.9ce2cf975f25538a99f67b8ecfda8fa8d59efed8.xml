{"nodes":[{"pos":[418,433],"content":"DoWorkEventArgs","needQuote":true,"nodes":[{"content":"DoWorkEventArgs","pos":[0,15]}]},{"pos":[2079,2102],"content":"DoWorkEventArgs(Object)","needQuote":true,"nodes":[{"content":"DoWorkEventArgs(Object)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;Specifies an argument for an asynchronous operation.&lt;/p&gt;\\n","pos":[2965,3028],"source":"\\n<p>Specifies an argument for an asynchronous operation.</p>\\n"},{"pos":[3474,3482],"content":"Argument","needQuote":true,"nodes":[{"content":"Argument","pos":[0,8]}]},{"pos":[4842,4848],"content":"Result","needQuote":true,"nodes":[{"content":"Result","pos":[0,6]}]},{"pos":[6193,6199],"content":"Cancel","needQuote":true,"nodes":[{"content":"Cancel","pos":[0,6]}]},{"pos":[7024,7045],"content":"System.ComponentModel","needQuote":true,"nodes":[{"content":"System.ComponentModel","pos":[0,21]}]},{"pos":[7221,7227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7375,7384],"content":"EventArgs","needQuote":true,"nodes":[{"content":"EventArgs","pos":[0,9]}]},{"pos":[7556,7561],"content":"Empty","needQuote":true,"nodes":[{"content":"Empty","pos":[0,5]}]},{"pos":[7748,7758],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7853,7861],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7930,7931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7958,7959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8029,8037],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8106,8107],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8134,8135],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8318,8332],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8451,8457],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8524,8525],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8575,8581],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8641,8642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8725,8731],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8798,8799],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8849,8855],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8915,8916],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9130,9152],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9300,9306],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9373,9374],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9424,9430],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9491,9492]},{"pos":[9547,9553],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9613,9614],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9711,9717],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9784,9785],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9835,9841],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9902,9903]},{"pos":[9958,9964],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10024,10025],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10270,10301],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10467,10482],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10558,10559],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10609,10615],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10676,10677]},{"pos":[10732,10738],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10798,10799],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10905,10920],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10996,10997],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11047,11053],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11114,11115]},{"pos":[11170,11176],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11236,11237],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11467,11480],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11581,11592],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11664,11665],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11692,11693],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11766,11777],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11849,11850],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11877,11878],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12053,12062],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[12155,12162],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12230,12231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12258,12259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12328,12335],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12403,12404],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12431,12432],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12607,12624],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12733,12748],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12824,12825],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12852,12853],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12930,12945],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[13021,13022],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13049,13050],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13195,13201],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13333,13340],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.ComponentModel.DoWorkEventArgs\n  commentId: T:System.ComponentModel.DoWorkEventArgs\n  id: DoWorkEventArgs\n  parent: System.ComponentModel\n  children:\n  - System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)\n  - System.ComponentModel.DoWorkEventArgs.Argument\n  - System.ComponentModel.DoWorkEventArgs.Cancel\n  - System.ComponentModel.DoWorkEventArgs.Result\n  langs:\n  - csharp\n  - vb\n  name: DoWorkEventArgs\n  fullName: System.ComponentModel.DoWorkEventArgs\n  type: Class\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DoWorkEventArgs\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n    startLine: 8\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Provides data for the <xref href=\\\"System.ComponentModel.BackgroundWorker.DoWork\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> event handler.</p>\\n\"\n  syntax:\n    content: 'public class DoWorkEventArgs : EventArgs'\n    content.vb: >-\n      Public Class DoWorkEventArgs\n          Inherits EventArgs\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  inheritance:\n  - System.Object\n  - System.EventArgs\n  inheritedMembers:\n  - System.EventArgs.Empty\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: DoWorkEventArgs\n- uid: System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)\n  commentId: M:System.ComponentModel.DoWorkEventArgs.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.ComponentModel.DoWorkEventArgs\n  langs:\n  - csharp\n  - vb\n  name: DoWorkEventArgs(Object)\n  fullName: System.ComponentModel.DoWorkEventArgs.DoWorkEventArgs(System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n    startLine: 14\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.ComponentModel.DoWorkEventArgs\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public DoWorkEventArgs(object argument)\n    content.vb: Public Sub New(argument As Object)\n    parameters:\n    - id: argument\n      type: System.Object\n      description: \"\\n<p>Specifies an argument for an asynchronous operation.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: DoWorkEventArgs.DoWorkEventArgs(Object)\n- uid: System.ComponentModel.DoWorkEventArgs.Argument\n  commentId: P:System.ComponentModel.DoWorkEventArgs.Argument\n  id: Argument\n  parent: System.ComponentModel.DoWorkEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Argument\n  fullName: System.ComponentModel.DoWorkEventArgs.Argument\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Argument\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n    startLine: 19\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets a value that represents the argument of an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public object Argument { get; }\n    content.vb: Public ReadOnly Property Argument As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the argument of an asynchronous operation.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: DoWorkEventArgs.Argument\n- uid: System.ComponentModel.DoWorkEventArgs.Result\n  commentId: P:System.ComponentModel.DoWorkEventArgs.Result\n  id: Result\n  parent: System.ComponentModel.DoWorkEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Result\n  fullName: System.ComponentModel.DoWorkEventArgs.Result\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Result\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n    startLine: 27\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  summary: \"\\n<p>Gets or sets a value that represents the result of an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public object Result { get; set; }\n    content.vb: Public Property Result As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>An <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> representing the result of an asynchronous operation.</p>\\n\"\n  seealso:\n  - type: System.ComponentModel.BackgroundWorker\n    commentId: T:System.ComponentModel.BackgroundWorker\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DoWorkEventArgs.Result\n- uid: System.ComponentModel.DoWorkEventArgs.Cancel\n  commentId: P:System.ComponentModel.DoWorkEventArgs.Cancel\n  id: Cancel\n  parent: System.ComponentModel.DoWorkEventArgs\n  langs:\n  - csharp\n  - vb\n  name: Cancel\n  fullName: System.ComponentModel.DoWorkEventArgs.Cancel\n  type: Property\n  source:\n    remote:\n      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Cancel\n    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/DoWorkEvent.cs\n    startLine: 40\n  assemblies:\n  - System.ComponentModel.EventBasedAsync\n  namespace: System.ComponentModel\n  syntax:\n    content: public bool Cancel { get; set; }\n    content.vb: Public Property Cancel As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: DoWorkEventArgs.Cancel\nreferences:\n- uid: System.ComponentModel\n  isExternal: false\n  name: System.ComponentModel\n  fullName: System.ComponentModel\n  nameWithType: System.ComponentModel\n  commentId: N:System.ComponentModel\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.EventArgs\n  parent: System\n  isExternal: false\n  name: EventArgs\n  fullName: System.EventArgs\n  nameWithType: EventArgs\n  commentId: T:System.EventArgs\n- uid: System.EventArgs.Empty\n  parent: System.EventArgs\n  isExternal: true\n  name: Empty\n  fullName: System.EventArgs.Empty\n  nameWithType: EventArgs.Empty\n  commentId: F:System.EventArgs.Empty\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}