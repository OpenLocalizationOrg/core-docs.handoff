{"nodes":[{"pos":[1142,1146],"content":"Ping","needQuote":true,"nodes":[{"content":"Ping","pos":[0,4]}]},{"pos":[2440,2446],"content":"Ping()","needQuote":true,"nodes":[{"content":"Ping()","pos":[0,6]}]},{"pos":[3430,3454],"content":"SendPingAsync(IPAddress)","needQuote":true,"nodes":[{"content":"SendPingAsync(IPAddress)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;An IP address that identifies the computer that is the destination for the ICMP echo message.&lt;/p&gt;\\n","pos":[4467,4571],"source":"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4979,5034],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;An exception was thrown while sending or receiving the ICMP messages.","pos":[5450,5524],"source":"\\n<p>An exception was thrown while sending or receiving the ICMP messages."},{"content":"See the inner exception for the exact exception that was thrown.&lt;/p&gt;\\n","pos":[5525,5595],"source":" See the inner exception for the exact exception that was thrown.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is not a valid IP address.&lt;/p&gt;\\n","pos":[5712,5768],"source":"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been disposed.&lt;/p&gt;\\n","pos":[5877,5918],"source":"\\n<p>This object has been disposed.</p>\\n"},{"pos":[6349,6380],"content":"SendPingAsync(IPAddress, Int32)","needQuote":true,"nodes":[{"content":"SendPingAsync(IPAddress, Int32)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;An IP address that identifies the computer that is the destination for the ICMP echo message.&lt;/p&gt;\\n","pos":[7511,7615],"source":"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[7680,7799],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"pos":[8568,8607],"content":"SendPingAsync(IPAddress, Int32, Byte[])","needQuote":true,"nodes":[{"content":"SendPingAsync(IPAddress, Int32, Byte[])","pos":[0,39]}]},{"content":"\\n&lt;p&gt;An IP address that identifies the computer that is the destination for the ICMP echo message.&lt;/p&gt;\\n","pos":[9827,9931],"source":"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[9996,10115],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10829,10949],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;timeout&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[11066,11114],"source":"\\n<p>\\n<em>timeout</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;An exception was thrown while sending or receiving the ICMP messages.","pos":[11530,11604],"source":"\\n<p>An exception was thrown while sending or receiving the ICMP messages."},{"content":"See the inner exception for the exact exception that was thrown.&lt;/p&gt;\\n","pos":[11605,11675],"source":" See the inner exception for the exact exception that was thrown.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is not a valid IP address.&lt;/p&gt;\\n","pos":[11792,11848],"source":"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been disposed.&lt;/p&gt;\\n","pos":[11957,11998],"source":"\\n<p>This object has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The size of &lt;em&gt;buffer&lt;/em&gt; exceeds 65,500 bytes.&lt;/p&gt;\\n","pos":[12095,12155],"source":"\\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\\n"},{"pos":[12999,13051],"content":"SendPingAsync(IPAddress, Int32, Byte[], PingOptions)","needQuote":true,"nodes":[{"content":"SendPingAsync(IPAddress, Int32, Byte[], PingOptions)","pos":[0,52]}]},{"content":"\\n&lt;p&gt;An IP address that identifies the computer that is the destination for the ICMP echo message.&lt;/p&gt;\\n","pos":[14440,14544],"source":"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[14609,14728],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;buffer&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[15746,15866],"source":"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;timeout&lt;/em&gt; is less than zero.&lt;/p&gt;\\n","pos":[15983,16031],"source":"\\n<p>\\n<em>timeout</em> is less than zero.</p>\\n"},{"content":"\\n&lt;p&gt;An exception was thrown while sending or receiving the ICMP messages.","pos":[16447,16521],"source":"\\n<p>An exception was thrown while sending or receiving the ICMP messages."},{"content":"See the inner exception for the exact exception that was thrown.&lt;/p&gt;\\n","pos":[16522,16592],"source":" See the inner exception for the exact exception that was thrown.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;address&lt;/em&gt; is not a valid IP address.&lt;/p&gt;\\n","pos":[16709,16765],"source":"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n"},{"content":"\\n&lt;p&gt;This object has been disposed.&lt;/p&gt;\\n","pos":[16874,16915],"source":"\\n<p>This object has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The size of &lt;em&gt;buffer&lt;/em&gt; exceeds 65,500 bytes.&lt;/p&gt;\\n","pos":[17012,17072],"source":"\\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\\n"},{"pos":[17770,17791],"content":"SendPingAsync(String)","needQuote":true,"nodes":[{"content":"SendPingAsync(String)","pos":[0,21]}]},{"content":"\\n&lt;p&gt;The computer that is the destination for the ICMP echo message.","pos":[18719,18787],"source":"\\n<p>The computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.&lt;/p&gt;\\n","pos":[18788,18896],"source":" The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n"},{"pos":[19592,19620],"content":"SendPingAsync(String, Int32)","needQuote":true,"nodes":[{"content":"SendPingAsync(String, Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The computer that is the destination for the ICMP echo message.","pos":[20667,20735],"source":"\\n<p>The computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.&lt;/p&gt;\\n","pos":[20736,20844],"source":" The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[20909,21028],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"pos":[21773,21809],"content":"SendPingAsync(String, Int32, Byte[])","needQuote":true,"nodes":[{"content":"SendPingAsync(String, Int32, Byte[])","pos":[0,36]}]},{"content":"\\n&lt;p&gt;The computer that is the destination for the ICMP echo message.","pos":[22945,23013],"source":"\\n<p>The computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.&lt;/p&gt;\\n","pos":[23014,23122],"source":" The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[23187,23306],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"pos":[24708,24757],"content":"SendPingAsync(String, Int32, Byte[], PingOptions)","needQuote":true,"nodes":[{"content":"SendPingAsync(String, Int32, Byte[], PingOptions)","pos":[0,49]}]},{"content":"\\n&lt;p&gt;The computer that is the destination for the ICMP echo message.","pos":[26062,26130],"source":"\\n<p>The computer that is the destination for the ICMP echo message."},{"content":"The value specified for this parameter can be a host name or a string representation of an IP address.&lt;/p&gt;\\n","pos":[26131,26239],"source":" The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.&lt;/p&gt;\\n","pos":[26304,26423],"source":"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n"},{"pos":[27941,27950],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[28812,28828],"content":"Dispose(Boolean)","needQuote":true,"nodes":[{"content":"Dispose(Boolean)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to release both managed and unmanaged resources; &lt;strong&gt;false&lt;/strong&gt; to releases only unmanaged resources.&lt;/p&gt;\\n","pos":[29687,29831],"source":"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n"},{"pos":[30040,30069],"content":"System.Net.NetworkInformation","needQuote":true,"nodes":[{"content":"System.Net.NetworkInformation","pos":[0,29]}]},{"pos":[30269,30275],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30425,30436],"content":"IDisposable","needQuote":true,"nodes":[{"content":"IDisposable","pos":[0,11]}]},{"pos":[30611,30621],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[30716,30724],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30793,30794],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30821,30822],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30892,30900],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[30969,30970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30997,30998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31181,31195],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[31314,31320],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31387,31388],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31438,31444],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31504,31505],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31588,31594],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31661,31662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31712,31718],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31778,31779],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31993,32015],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[32163,32169],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32236,32237],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32287,32293],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32354,32355]},{"pos":[32410,32416],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32476,32477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32574,32580],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[32647,32648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32698,32704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32765,32766]},{"pos":[32821,32827],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32887,32888],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33133,33164],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[33330,33345],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33421,33422],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33472,33478],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33539,33540]},{"pos":[33595,33601],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33661,33662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33768,33783],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[33859,33860],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33910,33916],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[33977,33978]},{"pos":[34033,34039],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[34099,34100],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34330,34343],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[34444,34455],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34527,34528],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34555,34556],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34629,34640],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34712,34713],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34740,34741],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34916,34925],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[35018,35025],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35093,35094],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35121,35122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35191,35198],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[35266,35267],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35294,35295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35470,35487],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[35596,35611],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35687,35688],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35715,35716],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35793,35808],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[35884,35885],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35912,35913],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36058,36064],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[36206,36215],"content":"IPAddress","needQuote":true,"nodes":[{"content":"IPAddress","pos":[0,9]}]},{"pos":[36472,36487],"content":"Task<PingReply>","needQuote":true,"nodes":[{"content":"Task&lt;PingReply&gt;","pos":[0,15],"source":"Task<PingReply>"}]},{"pos":[36750,36754],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[36828,36829],"content":"<","needQuote":true,"nodes":[]},{"pos":[36905,36914],"content":"PingReply","needQuote":true,"nodes":[{"content":"PingReply","pos":[0,9]}]},{"pos":[37061,37065],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[37140,37143]},{"pos":[37226,37235],"content":"PingReply","needQuote":true,"nodes":[{"content":"PingReply","pos":[0,9]}]},{"pos":[37300,37301],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37518,37528],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[37670,37683],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[37880,37884],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[37937,37938],"content":"<","needQuote":true,"nodes":[]},{"pos":[37965,37972],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[38087,38091],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[38145,38148]},{"pos":[38182,38189],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[38222,38223],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38409,38431],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[38609,38614],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[38719,38725],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[38845,38849],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[38908,38910]},{"pos":[38973,38977],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[39035,39037],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[39221,39232],"content":"PingOptions","needQuote":true,"nodes":[{"content":"PingOptions","pos":[0,11]}]},{"pos":[39438,39444],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[39614,39623],"content":"Dispose()","needQuote":true,"nodes":[{"content":"Dispose()","pos":[0,9]}]},{"pos":[39726,39733],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[39785,39786],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39813,39814],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39888,39895],"content":"Dispose","needQuote":true,"nodes":[{"content":"Dispose","pos":[0,7]}]},{"pos":[39947,39948],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39975,39976],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40140,40147],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40293,40314],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[40523,40548],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[40763,40776],"content":"PingException","needQuote":true,"nodes":[{"content":"PingException","pos":[0,13]}]},{"pos":[40992,41007],"content":"SocketException","needQuote":true,"nodes":[{"content":"SocketException","pos":[0,15]}]},{"pos":[41203,41226],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[41426,41453],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[41672,41689],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Net.NetworkInformation.Ping\n  commentId: T:System.Net.NetworkInformation.Ping\n  id: Ping\n  parent: System.Net.NetworkInformation\n  children:\n  - System.Net.NetworkInformation.Ping.#ctor\n  - System.Net.NetworkInformation.Ping.Dispose\n  - System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  - System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  langs:\n  - csharp\n  - vb\n  name: Ping\n  fullName: System.Net.NetworkInformation.Ping\n  type: Class\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Ping\n    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n    startLine: 9\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Allows an application to determine whether a remote computer is accessible over the network.</p>\\n\"\n  syntax:\n    content: 'public class Ping : IDisposable'\n    content.vb: >-\n      Public Class Ping\n          Implements IDisposable\n  inheritance:\n  - System.Object\n  implements:\n  - System.IDisposable\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Ping\n- uid: System.Net.NetworkInformation.Ping.#ctor\n  commentId: M:System.Net.NetworkInformation.Ping.#ctor\n  id: '#ctor'\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: Ping()\n  fullName: System.Net.NetworkInformation.Ping.Ping()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 39\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public Ping()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.Ping()\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  id: SendPingAsync(System.Net.IPAddress)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(IPAddress)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 40\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. </p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(IPAddress address)\n    content.vb: Public Function SendPingAsync(address As IPAddress) As Task(Of PingReply)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A call to <xref href=\\\"System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is in progress.</p>\\n\"\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: \"\\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.SendPingAsync(IPAddress)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32)\n  id: SendPingAsync(System.Net.IPAddress,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(IPAddress, Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 41\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout)\n    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer) As Task(Of PingReply)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.SendPingAsync(IPAddress, Int32)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(IPAddress, Int32, Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 42\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout, byte[] buffer)\n    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer, buffer As Byte()) As Task(Of PingReply)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is less than zero.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A call to <xref href=\\\"System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is in progress.</p>\\n\"\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: \"\\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been disposed.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte())\n  name.vb: SendPingAsync(IPAddress, Int32, Byte())\n  nameWithType: Ping.SendPingAsync(IPAddress, Int32, Byte[])\n  nameWithType.vb: Ping.SendPingAsync(IPAddress, Int32, Byte())\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: SendPingAsync(System.Net.IPAddress,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(IPAddress, Int32, Byte[], PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 43\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Send an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the computer that has the specified <xref href=\\\"System.Net.IPAddress\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>, and receives a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(IPAddress address, int timeout, byte[] buffer, PingOptions options)\n    content.vb: Public Function SendPingAsync(address As IPAddress, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)\n    parameters:\n    - id: address\n      type: System.Net.IPAddress\n      description: \"\\n<p>An IP address that identifies the computer that is the destination for the ICMP echo message.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\\n\"\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.PingOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>address</em> is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>buffer</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>timeout</em> is less than zero.</p>\\n\"\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>A call to <xref href=\\\"System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  is in progress.</p>\\n\"\n  - type: System.Net.NetworkInformation.PingException\n    commentId: T:System.Net.NetworkInformation.PingException\n    description: \"\\n<p>An exception was thrown while sending or receiving the ICMP messages. See the inner exception for the exact exception that was thrown.</p>\\n\"\n  - type: System.Net.Sockets.SocketException\n    commentId: T:System.Net.Sockets.SocketException\n    description: \"\\n<p>\\n<em>address</em> is not a valid IP address.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>This object has been disposed.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The size of <em>buffer</em> exceeds 65,500 bytes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.Net.IPAddress, System.Int32, System.Byte(), System.Net.NetworkInformation.PingOptions)\n  name.vb: SendPingAsync(IPAddress, Int32, Byte(), PingOptions)\n  nameWithType: Ping.SendPingAsync(IPAddress, Int32, Byte[], PingOptions)\n  nameWithType.vb: Ping.SendPingAsync(IPAddress, Int32, Byte(), PingOptions)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  id: SendPingAsync(System.String)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(String)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 44\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress)\n    content.vb: Public Function SendPingAsync(hostNameOrAddress As String) As Task(Of PingReply)\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.SendPingAsync(String)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32)\n  id: SendPingAsync(System.String,System.Int32)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(String, Int32)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 45\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout)\n    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer) As Task(Of PingReply)\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.SendPingAsync(String, Int32)\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[])\n  id: SendPingAsync(System.String,System.Int32,System.Byte[])\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(String, Int32, Byte[])\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 46\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation and a buffer to use for send and receive.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer)\n    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer, buffer As Byte()) As Task(Of PingReply)\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte())\n  name.vb: SendPingAsync(String, Int32, Byte())\n  nameWithType: Ping.SendPingAsync(String, Int32, Byte[])\n  nameWithType.vb: Ping.SendPingAsync(String, Int32, Byte())\n- uid: System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  commentId: M:System.Net.NetworkInformation.Ping.SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  id: SendPingAsync(System.String,System.Int32,System.Byte[],System.Net.NetworkInformation.PingOptions)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: SendPingAsync(String, Int32, Byte[], PingOptions)\n  fullName: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte[], System.Net.NetworkInformation.PingOptions)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SendPingAsync\n    path: src/System.Net.Ping/ref/System.Net.Ping.cs\n    startLine: 47\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Sends an Internet Control Message Protocol (ICMP) echo message with the specified data buffer to the specified computer, and receive a corresponding ICMP echo reply message from that computer as an asynchronous operation. This overload allows you to specify a time-out value for the operation, a buffer to use for send and receive, and control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\\n\"\n  syntax:\n    content: public Task<PingReply> SendPingAsync(string hostNameOrAddress, int timeout, byte[] buffer, PingOptions options)\n    content.vb: Public Function SendPingAsync(hostNameOrAddress As String, timeout As Integer, buffer As Byte(), options As PingOptions) As Task(Of PingReply)\n    parameters:\n    - id: hostNameOrAddress\n      type: System.String\n      description: \"\\n<p>The computer that is the destination for the ICMP echo message. The value specified for this parameter can be a host name or a string representation of an IP address.</p>\\n\"\n    - id: timeout\n      type: System.Int32\n      description: \"\\n<p>The maximum number of milliseconds (after sending the echo message) to wait for the ICMP echo reply message.</p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>A <xref href=\\\"System.Byte\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> array that contains data to be sent with the ICMP echo message and returned in the ICMP echo reply message. The array cannot contain more than 65,500 bytes.</p>\\n\"\n    - id: options\n      type: System.Net.NetworkInformation.PingOptions\n      description: \"\\n<p>A <xref href=\\\"System.Net.NetworkInformation.PingOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>  object used to control fragmentation and Time-to-Live values for the ICMP echo message packet.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n      description: \"\\n<p>Returns <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p>The task object representing the asynchronous operation.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Net.NetworkInformation.Ping.SendPingAsync(System.String, System.Int32, System.Byte(), System.Net.NetworkInformation.PingOptions)\n  name.vb: SendPingAsync(String, Int32, Byte(), PingOptions)\n  nameWithType: Ping.SendPingAsync(String, Int32, Byte[], PingOptions)\n  nameWithType.vb: Ping.SendPingAsync(String, Int32, Byte(), PingOptions)\n- uid: System.Net.NetworkInformation.Ping.Dispose\n  commentId: M:System.Net.NetworkInformation.Ping.Dispose\n  id: Dispose\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: Dispose()\n  fullName: System.Net.NetworkInformation.Ping.Dispose()\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n    startLine: 11\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  syntax:\n    content: public void Dispose()\n    content.vb: Public Sub Dispose\n  implements:\n  - System.IDisposable.Dispose\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Ping.Dispose()\n- uid: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  commentId: M:System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  id: Dispose(System.Boolean)\n  parent: System.Net.NetworkInformation.Ping\n  langs:\n  - csharp\n  - vb\n  name: Dispose(Boolean)\n  fullName: System.Net.NetworkInformation.Ping.Dispose(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Dispose\n    path: src/System.Net.Ping/ref/System.Net.Ping.Manual.cs\n    startLine: 12\n  assemblies:\n  - System.Net.Ping\n  namespace: System.Net.NetworkInformation\n  summary: \"\\n<p>Releases the unmanaged resources used by the <xref href=\\\"System.Net.NetworkInformation.Ping\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object, and optionally disposes of the managed resources.</p>\\n\"\n  syntax:\n    content: protected virtual void Dispose(bool disposing)\n    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)\n    parameters:\n    - id: disposing\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  - virtual\n  modifiers.vb:\n  - Protected\n  - Overridable\n  nameWithType: Ping.Dispose(Boolean)\nreferences:\n- uid: System.Net.NetworkInformation\n  isExternal: false\n  name: System.Net.NetworkInformation\n  fullName: System.Net.NetworkInformation\n  commentId: N:System.Net.NetworkInformation\n  nameWithType: System.Net.NetworkInformation\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.IDisposable\n  parent: System\n  isExternal: false\n  name: IDisposable\n  fullName: System.IDisposable\n  commentId: T:System.IDisposable\n  nameWithType: IDisposable\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Net.IPAddress\n  parent: System.Net\n  isExternal: false\n  name: IPAddress\n  fullName: System.Net.IPAddress\n  commentId: T:System.Net.IPAddress\n  nameWithType: IPAddress\n- uid: System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<PingReply>\n  fullName: System.Threading.Tasks.Task<System.Net.NetworkInformation.PingReply>\n  fullname.vb: System.Threading.Tasks.Task(Of System.Net.NetworkInformation.PingReply)\n  name.vb: Task(Of PingReply)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Net.NetworkInformation.PingReply\n    name: PingReply\n    fullName: System.Net.NetworkInformation.PingReply\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Net.NetworkInformation.PingReply\n    name: PingReply\n    fullName: System.Net.NetworkInformation.PingReply\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task{System.Net.NetworkInformation.PingReply}\n  nameWithType: Task<PingReply>\n  nameWithType.vb: Task(Of PingReply)\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  commentId: T:System.Threading.Tasks.Task`1\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Net.NetworkInformation.PingOptions\n  parent: System.Net.NetworkInformation\n  isExternal: false\n  name: PingOptions\n  fullName: System.Net.NetworkInformation.PingOptions\n  commentId: T:System.Net.NetworkInformation.PingOptions\n  nameWithType: PingOptions\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.IDisposable.Dispose\n  parent: System.IDisposable\n  isExternal: false\n  name: Dispose()\n  fullName: System.IDisposable.Dispose()\n  spec.csharp:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.IDisposable.Dispose\n    name: Dispose\n    fullName: System.IDisposable.Dispose\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.IDisposable.Dispose\n  nameWithType: IDisposable.Dispose()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.Net.NetworkInformation.PingException\n  isExternal: false\n  name: PingException\n  fullName: System.Net.NetworkInformation.PingException\n  commentId: T:System.Net.NetworkInformation.PingException\n  nameWithType: PingException\n- uid: System.Net.Sockets.SocketException\n  isExternal: false\n  name: SocketException\n  fullName: System.Net.Sockets.SocketException\n  commentId: T:System.Net.Sockets.SocketException\n  nameWithType: SocketException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}