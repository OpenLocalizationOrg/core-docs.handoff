{"nodes":[{"pos":[1205,1211],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[2609,2613],"content":"Zero","needQuote":true,"nodes":[{"content":"Zero","pos":[0,4]}]},{"pos":[3500,3513],"content":"IntPtr(Int32)","needQuote":true,"nodes":[{"content":"IntPtr(Int32)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A pointer or handle contained in a 32-bit signed integer.","pos":[4471,4533],"source":"\\n<p>A pointer or handle contained in a 32-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[4534,4540],"source":" </p>\\n"},{"pos":[4814,4827],"content":"IntPtr(Int64)","needQuote":true,"nodes":[{"content":"IntPtr(Int64)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A pointer or handle contained in a 64-bit signed integer.","pos":[5773,5835],"source":"\\n<p>A pointer or handle contained in a 64-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[5836,5842],"source":" </p>\\n"},{"pos":[6395,6408],"content":"IntPtr(Void*)","needQuote":true,"nodes":[{"content":"IntPtr(Void*)","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A pointer to an unspecified type.","pos":[7419,7457],"source":"\\n<p>A pointer to an unspecified type."},{"content":"&lt;/p&gt;\\n","pos":[7458,7464],"source":" </p>\\n"},{"pos":[8174,8178],"content":"Size","needQuote":true,"nodes":[{"content":"Size","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The size of a pointer or handle in this process, measured in bytes.","pos":[8883,8955],"source":"\\n<p>The size of a pointer or handle in this process, measured in bytes."},{"content":"The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process.","pos":[8956,9035]},{"content":"You can define the process type by setting the &lt;strong&gt;/platform&lt;/strong&gt; switch when you compile your code with the C# and Visual Basic compilers.&lt;/p&gt;\\n","pos":[9036,9189],"source":" You can define the process type by setting the <strong>/platform</strong> switch when you compile your code with the C# and Visual Basic compilers.</p>\\n"},{"pos":[9531,9549],"content":"Add(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Add(IntPtr, Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The pointer to add the offset to.&lt;/p&gt;\\n","pos":[10418,10462],"source":"\\n<p>The pointer to add the offset to.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to add.&lt;/p&gt;\\n","pos":[10526,10555],"source":"\\n<p>The offset to add.</p>\\n"},{"content":"\\n&lt;p&gt;A new pointer that reflects the addition of &lt;em&gt;offset&lt;/em&gt; to &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[10615,10706],"source":"\\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n"},{"pos":[11157,11171],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance or &lt;strong&gt;null&lt;/strong&gt;.","pos":[11902,11972],"source":"\\n<p>An object to compare with this instance or <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[11973,11979],"source":" </p>\\n"},{"pos":[12585,12598],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[13251,13296],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[13698,13721],"content":"Addition(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Addition(IntPtr, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The pointer to add the offset to.&lt;/p&gt;\\n","pos":[14610,14654],"source":"\\n<p>The pointer to add the offset to.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to add.&lt;/p&gt;\\n","pos":[14718,14747],"source":"\\n<p>The offset to add.</p>\\n"},{"content":"\\n&lt;p&gt;A new pointer that reflects the addition of &lt;em&gt;offset&lt;/em&gt; to &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[14807,14898],"source":"\\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n"},{"pos":[15395,15419],"content":"Equality(IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"Equality(IntPtr, IntPtr)","pos":[0,24]}]},{"content":"\\n&lt;p&gt;The first pointer or handle to compare.&lt;/p&gt;\\n","pos":[16459,16509],"source":"\\n<p>The first pointer or handle to compare.</p>\\n"},{"content":"\\n&lt;p&gt;The second pointer or handle to compare.&lt;/p&gt;\\n","pos":[16574,16625],"source":"\\n<p>The second pointer or handle to compare.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; equals &lt;em&gt;value2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[16686,16798],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> equals <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[17163,17188],"content":"Explicit(Int32 to IntPtr)","needQuote":true,"nodes":[{"content":"Explicit(Int32 to IntPtr)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer.","pos":[18145,18174],"source":"\\n<p>A 32-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[18175,18181],"source":" </p>\\n"},{"pos":[19007,19032],"content":"Explicit(Int64 to IntPtr)","needQuote":true,"nodes":[{"content":"Explicit(Int64 to IntPtr)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A 64-bit signed integer.","pos":[19987,20016],"source":"\\n<p>A 64-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[20017,20023],"source":" </p>\\n"},{"pos":[21115,21140],"content":"Explicit(IntPtr to Int32)","needQuote":true,"nodes":[{"content":"Explicit(IntPtr to Int32)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.&lt;/p&gt;\\n","pos":[22022,22066],"source":"\\n<p>The pointer or handle to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[22125,22167],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"content":"\\n&lt;p&gt;On a 64-bit platform, the value of &lt;em&gt;value&lt;/em&gt; is too large to represent as a 32-bit signed integer.","pos":[22278,22386],"source":"\\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[22387,22393],"source":" </p>\\n"},{"pos":[23002,23027],"content":"Explicit(IntPtr to Int64)","needQuote":true,"nodes":[{"content":"Explicit(IntPtr to Int64)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.&lt;/p&gt;\\n","pos":[23907,23951],"source":"\\n<p>The pointer or handle to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[24010,24052],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"pos":[24661,24686],"content":"Explicit(IntPtr to Void*)","needQuote":true,"nodes":[{"content":"Explicit(IntPtr to Void*)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;The pointer or handle to convert.","pos":[25605,25643],"source":"\\n<p>The pointer or handle to convert."},{"content":"&lt;/p&gt;\\n","pos":[25644,25650],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The contents of &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;\\n","pos":[25709,25751],"source":"\\n<p>The contents of <em>value</em>.</p>\\n"},{"pos":[26539,26564],"content":"Explicit(Void* to IntPtr)","needQuote":true,"nodes":[{"content":"Explicit(Void* to IntPtr)","pos":[0,25]}]},{"content":"\\n&lt;p&gt;A pointer to an unspecified type.","pos":[27636,27674],"source":"\\n<p>A pointer to an unspecified type."},{"content":"&lt;/p&gt;\\n","pos":[27675,27681],"source":" </p>\\n"},{"pos":[28937,28963],"content":"Inequality(IntPtr, IntPtr)","needQuote":true,"nodes":[{"content":"Inequality(IntPtr, IntPtr)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The first pointer or handle to compare.","pos":[30012,30056],"source":"\\n<p>The first pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[30057,30063],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second pointer or handle to compare.","pos":[30128,30173],"source":"\\n<p>The second pointer or handle to compare."},{"content":"&lt;/p&gt;\\n","pos":[30174,30180],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;value1&lt;/em&gt; does not equal &lt;em&gt;value2&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[30241,30361],"source":"\\n<p>\\n<strong>true</strong> if <em>value1</em> does not equal <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[30737,30763],"content":"Subtraction(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Subtraction(IntPtr, Int32)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The pointer to subtract the offset from.&lt;/p&gt;\\n","pos":[31665,31716],"source":"\\n<p>The pointer to subtract the offset from.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to subtract.&lt;/p&gt;\\n","pos":[31780,31814],"source":"\\n<p>The offset to subtract.</p>\\n"},{"content":"\\n&lt;p&gt;A new pointer that reflects the subtraction of &lt;em&gt;offset&lt;/em&gt; from &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[31874,31970],"source":"\\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n"},{"pos":[32468,32491],"content":"Subtract(IntPtr, Int32)","needQuote":true,"nodes":[{"content":"Subtract(IntPtr, Int32)","pos":[0,23]}]},{"content":"\\n&lt;p&gt;The pointer to subtract the offset from.&lt;/p&gt;\\n","pos":[33387,33438],"source":"\\n<p>The pointer to subtract the offset from.</p>\\n"},{"content":"\\n&lt;p&gt;The offset to subtract.&lt;/p&gt;\\n","pos":[33502,33536],"source":"\\n<p>The offset to subtract.</p>\\n"},{"content":"\\n&lt;p&gt;A new pointer that reflects the subtraction of &lt;em&gt;offset&lt;/em&gt; from &lt;em&gt;pointer&lt;/em&gt;.&lt;/p&gt;\\n","pos":[33596,33692],"source":"\\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n"},{"pos":[34112,34121],"content":"ToInt32()","needQuote":true,"nodes":[{"content":"ToInt32()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer equal to the value of this instance.&lt;/p&gt;\\n","pos":[34960,35031],"source":"\\n<p>A 32-bit signed integer equal to the value of this instance.</p>\\n"},{"content":"\\n&lt;p&gt;On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer.","pos":[35142,35262],"source":"\\n<p>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer."},{"content":"&lt;/p&gt;\\n","pos":[35263,35269],"source":" </p>\\n"},{"pos":[35501,35510],"content":"ToInt64()","needQuote":true,"nodes":[{"content":"ToInt64()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;A 64-bit signed integer equal to the value of this instance.&lt;/p&gt;\\n","pos":[36347,36418],"source":"\\n<p>A 64-bit signed integer equal to the value of this instance.</p>\\n"},{"pos":[36656,36667],"content":"ToPointer()","needQuote":true,"nodes":[{"content":"ToPointer()","pos":[0,11]}]},{"pos":[38122,38132],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The string representation of the value of this instance.&lt;/p&gt;\\n","pos":[38899,38966],"source":"\\n<p>The string representation of the value of this instance.</p>\\n"},{"pos":[39314,39330],"content":"ToString(String)","needQuote":true,"nodes":[{"content":"ToString(String)","pos":[0,16]}]},{"pos":[40799,40805],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40978,41000],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[41148,41154],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41221,41222],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41272,41278],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41339,41340]},{"pos":[41395,41401],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41461,41462],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41559,41565],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[41632,41633],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41683,41689],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[41750,41751]},{"pos":[41806,41812],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[41872,41873],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42118,42149],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[42315,42330],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42406,42407],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42457,42463],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42524,42525]},{"pos":[42580,42586],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[42646,42647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42753,42768],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[42844,42845],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42895,42901],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[42962,42963]},{"pos":[43018,43024],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43084,43085],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43311,43320],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[43413,43420],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[43488,43489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43516,43517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43586,43593],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[43661,43662],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43689,43690],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43843,43849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43994,44000],"content":"IntPtr","needQuote":true,"nodes":[{"content":"IntPtr","pos":[0,6]}]},{"pos":[44144,44149],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[44290,44295],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[44399,44404],"content":"Void*","needQuote":true,"nodes":[{"content":"Void*","pos":[0,5]}]},{"pos":[44476,44480],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[44602,44606],"content":"Void","needQuote":true,"nodes":[{"content":"Void","pos":[0,4]}]},{"pos":[44808,44822],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[44947,44953],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45002,45003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45053,45059],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45119,45120],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45206,45212],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45261,45262],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45312,45318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45378,45379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45558,45565],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[45716,45725],"content":"ValueType","needQuote":true,"nodes":[{"content":"ValueType","pos":[0,9]}]},{"pos":[45904,45917],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[46024,46035],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[46089,46090],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46117,46118],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46194,46205],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[46259,46260],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46287,46288],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46477,46487],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[46588,46596],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[46647,46648],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46675,46676],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46749,46757],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[46808,46809],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46836,46837],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46998,47004],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[47143,47160],"content":"OverflowException","needQuote":true,"nodes":[{"content":"OverflowException","pos":[0,17]}]}],"content":"items:\n- uid: System.IntPtr\n  commentId: T:System.IntPtr\n  id: IntPtr\n  parent: System\n  children:\n  - System.IntPtr.#ctor(System.Int32)\n  - System.IntPtr.#ctor(System.Int64)\n  - System.IntPtr.#ctor(System.Void*)\n  - System.IntPtr.Add(System.IntPtr,System.Int32)\n  - System.IntPtr.Equals(System.Object)\n  - System.IntPtr.GetHashCode\n  - System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  - System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  - System.IntPtr.op_Explicit(System.Int32)~System.IntPtr\n  - System.IntPtr.op_Explicit(System.Int64)~System.IntPtr\n  - System.IntPtr.op_Explicit(System.IntPtr)~System.Int32\n  - System.IntPtr.op_Explicit(System.IntPtr)~System.Int64\n  - System.IntPtr.op_Explicit(System.IntPtr)~System.Void*\n  - System.IntPtr.op_Explicit(System.Void*)~System.IntPtr\n  - System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  - System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  - System.IntPtr.Size\n  - System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  - System.IntPtr.ToInt32\n  - System.IntPtr.ToInt64\n  - System.IntPtr.ToPointer\n  - System.IntPtr.ToString\n  - System.IntPtr.ToString(System.String)\n  - System.IntPtr.Zero\n  langs:\n  - csharp\n  - vb\n  name: IntPtr\n  fullName: System.IntPtr\n  type: Struct\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IntPtr\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>A platform-specific type that is used to represent a pointer or a handle.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public struct IntPtr : ISerializable\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Structure IntPtr\n          Implements ISerializable\n  seealso:\n  - type: System.UIntPtr\n    commentId: T:System.UIntPtr\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  attributes:\n  - type: System.Runtime.InteropServices.StructLayoutAttribute\n    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)\n    arguments:\n    - type: System.Runtime.InteropServices.LayoutKind\n      value: 0\n  modifiers.csharp:\n  - public\n  - struct\n  modifiers.vb:\n  - Public\n  - Structure\n  nameWithType: IntPtr\n- uid: System.IntPtr.Zero\n  commentId: F:System.IntPtr.Zero\n  id: Zero\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Zero\n  fullName: System.IntPtr.Zero\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Zero\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 31\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\\n\"\n  syntax:\n    content: public static readonly IntPtr Zero\n    content.vb: Public Shared ReadOnly Zero As IntPtr\n    return:\n      type: System.IntPtr\n  modifiers.csharp:\n  - public\n  - static\n  - readonly\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IntPtr.Zero\n- uid: System.IntPtr.#ctor(System.Int32)\n  commentId: M:System.IntPtr.#ctor(System.Int32)\n  id: '#ctor(System.Int32)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: IntPtr(Int32)\n  fullName: System.IntPtr.IntPtr(System.Int32)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 42\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified 32-bit pointer or handle.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public IntPtr(int value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Sub New(value As Integer)\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A pointer or handle contained in a 32-bit signed integer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.IntPtr(Int32)\n- uid: System.IntPtr.#ctor(System.Int64)\n  commentId: M:System.IntPtr.#ctor(System.Int64)\n  id: '#ctor(System.Int64)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: IntPtr(Int64)\n  fullName: System.IntPtr.IntPtr(System.Int64)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 54\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified 64-bit pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public IntPtr(long value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Sub New(value As Long)\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A pointer or handle contained in a 64-bit signed integer. </p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 32-bit platform, <em>value</em> is too large or too small to represent as an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.IntPtr(Int64)\n- uid: System.IntPtr.#ctor(System.Void*)\n  commentId: M:System.IntPtr.#ctor(System.Void*)\n  id: '#ctor(System.Void*)'\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: IntPtr(Void*)\n  fullName: System.IntPtr.IntPtr(System.Void*)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 66\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> using the specified pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public IntPtr(void *value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Sub New(value As  *)\n    parameters:\n    - id: value\n      type: System.Void*\n      description: \"\\n<p>A pointer to an unspecified type. </p>\\n\"\n  seealso:\n  - type: System.Void\n    commentId: T:System.Void\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.IntPtr(Void*)\n- uid: System.IntPtr.Size\n  commentId: P:System.IntPtr.Size\n  id: Size\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Size\n  fullName: System.IntPtr.Size\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Size\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 271\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the size of this instance.</p>\\n\"\n  syntax:\n    content: >-\n      public static int Size\n\n      {\n          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n          [NonVersionable]\n          get;\n      }\n    content.vb: Public Shared ReadOnly Property Size As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the <strong>/platform</strong> switch when you compile your code with the C# and Visual Basic compilers.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  - get\n  modifiers.vb:\n  - Public\n  - Shared\n  - ReadOnly\n  nameWithType: IntPtr.Size\n- uid: System.IntPtr.Add(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.Add(System.IntPtr,System.Int32)\n  id: Add(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Add(IntPtr, Int32)\n  fullName: System.IntPtr.Add(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Add\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 237\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds an offset to the value of a pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static IntPtr Add(IntPtr pointer, int offset)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Function Add(pointer As IntPtr, offset As Integer) As IntPtr\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: \"\\n<p>The pointer to add the offset to.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to add.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n    commentId: M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Add(IntPtr, Int32)\n- uid: System.IntPtr.Equals(System.Object)\n  commentId: M:System.IntPtr.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.IntPtr.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 101\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override bool Equals(object obj)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance or <strong>null</strong>. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.ValueType.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IntPtr.Equals(Object)\n- uid: System.IntPtr.GetHashCode\n  commentId: M:System.IntPtr.GetHashCode\n  id: GetHashCode\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.IntPtr.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 109\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.ValueType.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IntPtr.GetHashCode()\n- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)\n  id: op_Addition(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Addition(IntPtr, Int32)\n  fullName: System.IntPtr.Addition(System.IntPtr, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Addition\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 244\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Adds an offset to the value of a pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static IntPtr operator +(IntPtr pointer, int offset)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Operator +(pointer As IntPtr, offset As Integer) As IntPtr\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: \"\\n<p>The pointer to add the offset to.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to add.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.Add(System.IntPtr,System.Int32)\n    commentId: M:System.IntPtr.Add(System.IntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Addition(IntPtr, Int32)\n- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  commentId: M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)\n  id: op_Equality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Equality(IntPtr, IntPtr)\n  fullName: System.IntPtr.Equality(System.IntPtr, System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Equality\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 221\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are equal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static bool operator ==(IntPtr value1, IntPtr value2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Operator =(value1 As IntPtr, value2 As IntPtr) As Boolean\n    parameters:\n    - id: value1\n      type: System.IntPtr\n      description: \"\\n<p>The first pointer or handle to compare.</p>\\n\"\n    - id: value2\n      type: System.IntPtr\n      description: \"\\n<p>The second pointer or handle to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> equals <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Equality(IntPtr, IntPtr)\n- uid: System.IntPtr.op_Explicit(System.Int32)~System.IntPtr\n  commentId: M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr\n  id: op_Explicit(System.Int32)~System.IntPtr\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Int32 to IntPtr)\n  fullName: System.IntPtr.Explicit(System.Int32 to System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 168\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 32-bit signed integer to an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static explicit operator IntPtr(int value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As Integer) As IntPtr\n    parameters:\n    - id: value\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.#ctor(System.Int32)\n    commentId: M:System.IntPtr.#ctor(System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.Int32 to System.IntPtr)\n  name.vb: Narrowing(Int32 to IntPtr)\n  nameWithType: IntPtr.Explicit(Int32 to IntPtr)\n  nameWithType.vb: IntPtr.Narrowing(Int32 to IntPtr)\n- uid: System.IntPtr.op_Explicit(System.Int64)~System.IntPtr\n  commentId: M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr\n  id: op_Explicit(System.Int64)~System.IntPtr\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Int64 to IntPtr)\n  fullName: System.IntPtr.Explicit(System.Int64 to System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 175\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of a 64-bit signed integer to an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static explicit operator IntPtr(long value)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As Long) As IntPtr\n    parameters:\n    - id: value\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  seealso:\n  - type: System.IntPtr.#ctor(System.Int32)\n    commentId: M:System.IntPtr.#ctor(System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.Int64 to System.IntPtr)\n  name.vb: Narrowing(Int64 to IntPtr)\n  nameWithType: IntPtr.Explicit(Int64 to IntPtr)\n  nameWithType.vb: IntPtr.Narrowing(Int64 to IntPtr)\n- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Int32\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32\n  id: op_Explicit(System.IntPtr)~System.Int32\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(IntPtr to Int32)\n  fullName: System.IntPtr.Explicit(System.IntPtr to System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 198\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static explicit operator int (IntPtr value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As IntPtr) As Integer\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The pointer or handle to convert.</p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit signed integer. </p>\\n\"\n  seealso:\n  - type: System.IntPtr.ToInt32\n    commentId: M:System.IntPtr.ToInt32\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Int32)\n  name.vb: Narrowing(IntPtr to Int32)\n  nameWithType: IntPtr.Explicit(IntPtr to Int32)\n  nameWithType.vb: IntPtr.Narrowing(IntPtr to Int32)\n- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Int64\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64\n  id: op_Explicit(System.IntPtr)~System.Int64\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(IntPtr to Int64)\n  fullName: System.IntPtr.Explicit(System.IntPtr to System.Int64)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 210\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [NonVersionable]\n\n      public static explicit operator long (IntPtr value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As IntPtr) As Long\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The pointer or handle to convert.</p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.ToInt64\n    commentId: M:System.IntPtr.ToInt64\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Int64)\n  name.vb: Narrowing(IntPtr to Int64)\n  nameWithType: IntPtr.Explicit(IntPtr to Int64)\n  nameWithType.vb: IntPtr.Narrowing(IntPtr to Int64)\n- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Void*\n  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*\n  id: op_Explicit(System.IntPtr)~System.Void*\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(IntPtr to Void*)\n  fullName: System.IntPtr.Explicit(System.IntPtr to System.Void*)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 190\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of the specified <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to a pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [CLSCompliant(false)]\n\n      [NonVersionable]\n\n      public static explicit operator void *(IntPtr value)\n    content.vb: \"<SecuritySafeCritical>\\n<CLSCompliant(False)>\\n<NonVersionable>\\nPublic Shared Narrowing Operator CType(value As IntPtr) As \"\n    parameters:\n    - id: value\n      type: System.IntPtr\n      description: \"\\n<p>The pointer or handle to convert. </p>\\n\"\n    return:\n      type: System.Void*\n      description: \"\\n<p>The contents of <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.ToPointer\n    commentId: M:System.IntPtr.ToPointer\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Void*)\n  name.vb: Narrowing(IntPtr to Void*)\n  nameWithType: IntPtr.Explicit(IntPtr to Void*)\n  nameWithType.vb: IntPtr.Narrowing(IntPtr to Void*)\n- uid: System.IntPtr.op_Explicit(System.Void*)~System.IntPtr\n  commentId: M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr\n  id: op_Explicit(System.Void*)~System.IntPtr\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Explicit(Void* to IntPtr)\n  fullName: System.IntPtr.Explicit(System.Void* to System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Explicit\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 182\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the specified pointer to an unspecified type to an <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static explicit operator IntPtr(void *value)\n    content.vb: >-\n      <SecurityCritical>\n\n      <CLSCompliant(False)>\n\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Narrowing Operator CType(value As  *) As IntPtr\n    parameters:\n    - id: value\n      type: System.Void*\n      description: \"\\n<p>A pointer to an unspecified type. </p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new instance of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> initialized to <em>value</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.#ctor(System.Int32)\n    commentId: M:System.IntPtr.#ctor(System.Int32)\n  see:\n  - type: System.Security.SecurityCriticalAttribute\n    commentId: T:System.Security.SecurityCriticalAttribute\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.IntPtr.Narrowing(System.Void* to System.IntPtr)\n  name.vb: Narrowing(Void* to IntPtr)\n  nameWithType: IntPtr.Explicit(Void* to IntPtr)\n  nameWithType.vb: IntPtr.Narrowing(Void* to IntPtr)\n- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  commentId: M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)\n  id: op_Inequality(System.IntPtr,System.IntPtr)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Inequality(IntPtr, IntPtr)\n  fullName: System.IntPtr.Inequality(System.IntPtr, System.IntPtr)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Inequality\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 229\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether two specified instances of <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> are not equal.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static bool operator !=(IntPtr value1, IntPtr value2)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Operator <>(value1 As IntPtr, value2 As IntPtr) As Boolean\n    parameters:\n    - id: value1\n      type: System.IntPtr\n      description: \"\\n<p>The first pointer or handle to compare. </p>\\n\"\n    - id: value2\n      type: System.IntPtr\n      description: \"\\n<p>The second pointer or handle to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>value1</em> does not equal <em>value2</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Inequality(IntPtr, IntPtr)\n- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  id: op_Subtraction(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Subtraction(IntPtr, Int32)\n  fullName: System.IntPtr.Subtraction(System.IntPtr, System.Int32)\n  type: Operator\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: op_Subtraction\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 261\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts an offset from the value of a pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static IntPtr operator -(IntPtr pointer, int offset)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Operator -(pointer As IntPtr, offset As Integer) As IntPtr\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: \"\\n<p>The pointer to subtract the offset from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to subtract.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.Subtract(System.IntPtr,System.Int32)\n    commentId: M:System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Subtraction(IntPtr, Int32)\n- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  commentId: M:System.IntPtr.Subtract(System.IntPtr,System.Int32)\n  id: Subtract(System.IntPtr,System.Int32)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: Subtract(IntPtr, Int32)\n  fullName: System.IntPtr.Subtract(System.IntPtr, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Subtract\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 255\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Subtracts an offset from the value of a pointer.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public static IntPtr Subtract(IntPtr pointer, int offset)\n    content.vb: >-\n      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Shared Function Subtract(pointer As IntPtr, offset As Integer) As IntPtr\n    parameters:\n    - id: pointer\n      type: System.IntPtr\n      description: \"\\n<p>The pointer to subtract the offset from.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset to subtract.</p>\\n\"\n    return:\n      type: System.IntPtr\n      description: \"\\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\\n\"\n  seealso:\n  - type: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n    commentId: M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IntPtr.Subtract(IntPtr, Int32)\n- uid: System.IntPtr.ToInt32\n  commentId: M:System.IntPtr.ToInt32\n  id: ToInt32\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToInt32()\n  fullName: System.IntPtr.ToInt32()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt32\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 123\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a 32-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public int ToInt32()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Function ToInt32 As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer equal to the value of this instance.</p>\\n\"\n  exceptions:\n  - type: System.OverflowException\n    commentId: T:System.OverflowException\n    description: \"\\n<p>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.ToInt32()\n- uid: System.IntPtr.ToInt64\n  commentId: M:System.IntPtr.ToInt64\n  id: ToInt64\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToInt64()\n  fullName: System.IntPtr.ToInt64()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToInt64\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 135\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a 64-bit signed integer.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public long ToInt64()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Function ToInt64 As Long\n    return:\n      type: System.Int64\n      description: \"\\n<p>A 64-bit signed integer equal to the value of this instance.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.ToInt64()\n- uid: System.IntPtr.ToPointer\n  commentId: M:System.IntPtr.ToPointer\n  id: ToPointer\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToPointer()\n  fullName: System.IntPtr.ToPointer()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToPointer\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 287\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the value of this instance to a pointer to an unspecified type.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [CLSCompliant(false)]\n\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public void *ToPointer()\n    content.vb: \"<SecuritySafeCritical>\\n<CLSCompliant(False)>\\n<ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\\n<NonVersionable>\\nPublic Function ToPointer As \"\n    return:\n      type: System.Void*\n      description: \"\\n<p>A pointer to <xref href=\\\"System.Void\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>; that is, a pointer to memory containing data of an unspecified type.</p>\\n\"\n  attributes:\n  - type: System.CLSCompliantAttribute\n    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)\n    arguments:\n    - type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.ToPointer()\n- uid: System.IntPtr.ToString\n  commentId: M:System.IntPtr.ToString\n  id: ToString\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.IntPtr.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 146\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public override string ToString()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of this instance.</p>\\n\"\n  overridden: System.ValueType.ToString\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: IntPtr.ToString()\n- uid: System.IntPtr.ToString(System.String)\n  commentId: M:System.IntPtr.ToString(System.String)\n  id: ToString(System.String)\n  parent: System.IntPtr\n  langs:\n  - csharp\n  - vb\n  name: ToString(String)\n  fullName: System.IntPtr.ToString(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/IntPtr.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/IntPtr.cs\n    startLine: 155\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Converts the numeric value of the current <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to its equivalent string representation.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      public string ToString(string format)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      Public Function ToString(format As String) As String\n    parameters:\n    - id: format\n      type: System.String\n      description: \"\\n<p>A format specification that governs how the current <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is converted. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string representation of the value of the current <xref href=\\\"System.IntPtr\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Globalization.CultureInfo.InvariantCulture\n    commentId: P:System.Globalization.CultureInfo.InvariantCulture\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: IntPtr.ToString(String)\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.IntPtr\n  parent: System\n  isExternal: false\n  name: IntPtr\n  fullName: System.IntPtr\n  nameWithType: IntPtr\n  commentId: T:System.IntPtr\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Void*\n  name: Void*\n  fullName: System.Void*\n  spec.csharp:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  spec.vb:\n  - uid: System.Void\n    name: Void\n    fullName: System.Void\n    isExternal: true\n  - name: '*'\n    fullName: '*'\n  nameWithType: Void*\n- uid: System.ValueType.Equals(System.Object)\n  parent: System.ValueType\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.ValueType.Equals(System.Object)\n  spec.csharp:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.Equals(System.Object)\n    name: Equals\n    fullName: System.ValueType.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ValueType.Equals(Object)\n  commentId: M:System.ValueType.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ValueType\n  parent: System\n  isExternal: false\n  name: ValueType\n  fullName: System.ValueType\n  nameWithType: ValueType\n  commentId: T:System.ValueType\n- uid: System.ValueType.GetHashCode\n  parent: System.ValueType\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.ValueType.GetHashCode()\n  spec.csharp:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.GetHashCode\n    name: GetHashCode\n    fullName: System.ValueType.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.GetHashCode()\n  commentId: M:System.ValueType.GetHashCode\n- uid: System.ValueType.ToString\n  parent: System.ValueType\n  isExternal: false\n  name: ToString()\n  fullName: System.ValueType.ToString()\n  spec.csharp:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.ValueType.ToString\n    name: ToString\n    fullName: System.ValueType.ToString\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: ValueType.ToString()\n  commentId: M:System.ValueType.ToString\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.OverflowException\n  isExternal: false\n  name: OverflowException\n  fullName: System.OverflowException\n  nameWithType: OverflowException\n  commentId: T:System.OverflowException\n"}