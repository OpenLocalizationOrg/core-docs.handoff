{"nodes":[{"pos":[497,523],"content":"ReferenceAssemblyAttribute","needQuote":true,"nodes":[{"content":"ReferenceAssemblyAttribute","pos":[0,26]}]},{"pos":[2147,2160],"content":"AllowMultiple","needQuote":true,"nodes":[{"content":"AllowMultiple","pos":[0,13]}]},{"pos":[2628,2656],"content":"ReferenceAssemblyAttribute()","needQuote":true,"nodes":[{"content":"ReferenceAssemblyAttribute()","pos":[0,28]}]},{"pos":[3880,3914],"content":"ReferenceAssemblyAttribute(String)","needQuote":true,"nodes":[{"content":"ReferenceAssemblyAttribute(String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The description of the reference assembly.","pos":[4866,4913],"source":"\\n<p>The description of the reference assembly."},{"content":"&lt;/p&gt;\\n","pos":[4914,4920],"source":" </p>\\n"},{"pos":[5344,5355],"content":"Description","needQuote":true,"nodes":[{"content":"Description","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The description of the reference assembly.&lt;/p&gt;\\n","pos":[6115,6168],"source":"\\n<p>The description of the reference assembly.</p>\\n"},{"pos":[6383,6414],"content":"System.Runtime.CompilerServices","needQuote":true,"nodes":[{"content":"System.Runtime.CompilerServices","pos":[0,31]}]},{"pos":[6620,6626],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[6774,6783],"content":"Attribute","needQuote":true,"nodes":[{"content":"Attribute","pos":[0,9]}]},{"pos":[6971,6985],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[7110,7116],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7165,7166],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7216,7222],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7282,7283],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7369,7375],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[7424,7425],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7475,7481],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7541,7542],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7745,7758],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7865,7876],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[7930,7931],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7958,7959],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8035,8046],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[8100,8101],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8128,8129],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8311,8321],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[8416,8424],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8493,8494],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8521,8522],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8592,8600],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[8669,8670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8697,8698],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8895,8917],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[9065,9071],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9138,9139],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9189,9195],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9256,9257]},{"pos":[9312,9318],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9378,9379],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9476,9482],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9549,9550],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9600,9606],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9667,9668]},{"pos":[9723,9729],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9789,9790],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10035,10066],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10232,10247],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10323,10324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10374,10380],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10441,10442]},{"pos":[10497,10503],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10563,10564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10670,10685],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10761,10762],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10812,10818],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10879,10880]},{"pos":[10935,10941],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11001,11002],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11228,11237],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11330,11337],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11405,11406],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11433,11434],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11503,11510],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11578,11579],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11606,11607],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11782,11799],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[11908,11923],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[11999,12000],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12027,12028],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12105,12120],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12196,12197],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12224,12225],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12370,12376],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12507,12513],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  commentId: T:System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  id: ReferenceAssemblyAttribute\n  parent: System.Runtime.CompilerServices\n  children:\n  - System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor\n  - System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)\n  - System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description\n  langs:\n  - csharp\n  - vb\n  name: ReferenceAssemblyAttribute\n  fullName: System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReferenceAssemblyAttribute\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n    startLine: 18\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Identifies an assembly as a reference assembly, which contains metadata but no executable code.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)]\n\n      public sealed class ReferenceAssemblyAttribute : Attribute, _Attribute\n    content.vb: >-\n      <Serializable>\n\n      <AttributeUsage(AttributeTargets.Assembly, AllowMultiple:=False)>\n\n      Public NotInheritable Class ReferenceAssemblyAttribute\n          Inherits Attribute\n          Implements _Attribute\n  inheritance:\n  - System.Object\n  - System.Attribute\n  inheritedMembers:\n  - System.Attribute.Equals(System.Object)\n  - System.Attribute.GetHashCode\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.AttributeUsageAttribute\n    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)\n    arguments:\n    - type: System.AttributeTargets\n      value: 1\n    namedArguments:\n    - name: AllowMultiple\n      type: System.Boolean\n      value: false\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: ReferenceAssemblyAttribute\n- uid: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor\n  commentId: M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor\n  id: '#ctor'\n  parent: System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  langs:\n  - csharp\n  - vb\n  name: ReferenceAssemblyAttribute()\n  fullName: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.ReferenceAssemblyAttribute()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n    startLine: 24\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.CompilerServices.ReferenceAssemblyAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public ReferenceAssemblyAttribute()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ReferenceAssemblyAttribute.ReferenceAssemblyAttribute()\n- uid: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)\n  commentId: M:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  langs:\n  - csharp\n  - vb\n  name: ReferenceAssemblyAttribute(String)\n  fullName: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.ReferenceAssemblyAttribute(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n    startLine: 28\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.CompilerServices.ReferenceAssemblyAttribute\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class by using the specified description. </p>\\n\"\n  syntax:\n    content: public ReferenceAssemblyAttribute(string description)\n    content.vb: Public Sub New(description As String)\n    parameters:\n    - id: description\n      type: System.String\n      description: \"\\n<p>The description of the reference assembly. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: ReferenceAssemblyAttribute.ReferenceAssemblyAttribute(String)\n- uid: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description\n  commentId: P:System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description\n  id: Description\n  parent: System.Runtime.CompilerServices.ReferenceAssemblyAttribute\n  langs:\n  - csharp\n  - vb\n  name: Description\n  fullName: System.Runtime.CompilerServices.ReferenceAssemblyAttribute.Description\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Description\n    path: src/mscorlib/src/System/Runtime/CompilerServices/ReferenceAssemblyAttribute.cs\n    startLine: 33\n  assemblies:\n  - System.Runtime\n  namespace: System.Runtime.CompilerServices\n  summary: \"\\n<p>Gets the description of the reference assembly.</p>\\n\"\n  syntax:\n    content: public string Description { get; }\n    content.vb: Public ReadOnly Property Description As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The description of the reference assembly.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ReferenceAssemblyAttribute.Description\nreferences:\n- uid: System.Runtime.CompilerServices\n  isExternal: false\n  name: System.Runtime.CompilerServices\n  fullName: System.Runtime.CompilerServices\n  nameWithType: System.Runtime.CompilerServices\n  commentId: N:System.Runtime.CompilerServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Attribute\n  parent: System\n  isExternal: false\n  name: Attribute\n  fullName: System.Attribute\n  nameWithType: Attribute\n  commentId: T:System.Attribute\n- uid: System.Attribute.Equals(System.Object)\n  parent: System.Attribute\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Attribute.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.Equals(System.Object)\n    name: Equals\n    fullName: System.Attribute.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Attribute.Equals(Object)\n  commentId: M:System.Attribute.Equals(System.Object)\n- uid: System.Attribute.GetHashCode\n  parent: System.Attribute\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Attribute.GetHashCode()\n  spec.csharp:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Attribute.GetHashCode\n    name: GetHashCode\n    fullName: System.Attribute.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Attribute.GetHashCode()\n  commentId: M:System.Attribute.GetHashCode\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}