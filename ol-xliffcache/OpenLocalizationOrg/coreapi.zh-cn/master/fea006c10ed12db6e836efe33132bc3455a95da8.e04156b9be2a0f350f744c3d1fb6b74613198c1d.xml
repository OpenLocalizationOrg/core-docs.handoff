{"nodes":[{"pos":[7157,7177],"content":"TaskFactory<TResult>","needQuote":true,"nodes":[{"content":"TaskFactory&lt;TResult&gt;","pos":[0,20],"source":"TaskFactory<TResult>"}]},{"pos":[9052,9065],"content":"TaskFactory()","needQuote":true,"nodes":[{"content":"TaskFactory()","pos":[0,13]}]},{"pos":[10299,10329],"content":"TaskFactory(CancellationToken)","needQuote":true,"nodes":[{"content":"TaskFactory(CancellationToken)","pos":[0,30]}]},{"pos":[12510,12601],"content":"TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)","pos":[0,91]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;creationOptions&lt;/em&gt; or &lt;em&gt;continuationOptions&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[15264,15361],"source":"\\n<p>\\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\\n"},{"pos":[16402,16459],"content":"TaskFactory(TaskCreationOptions, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"TaskFactory(TaskCreationOptions, TaskContinuationOptions)","pos":[0,57]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;creationOptions&lt;/em&gt; or &lt;em&gt;continuationOptions&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[18102,18199],"source":"\\n<p>\\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\\n"},{"pos":[18939,18965],"content":"TaskFactory(TaskScheduler)","needQuote":true,"nodes":[{"content":"TaskFactory(TaskScheduler)","pos":[0,26]}]},{"pos":[20706,20723],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The default cancellation token for this task factory.&lt;/p&gt;\\n","pos":[21502,21566],"source":"\\n<p>The default cancellation token for this task factory.</p>\\n"},{"pos":[22087,22106],"content":"ContinuationOptions","needQuote":true,"nodes":[{"content":"ContinuationOptions","pos":[0,19]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the default continuation options for this task factory.&lt;/p&gt;\\n","pos":[23015,23126],"source":"\\n<p>One of the enumeration values that specifies the default continuation options for this task factory.</p>\\n"},{"pos":[23641,23656],"content":"CreationOptions","needQuote":true,"nodes":[{"content":"CreationOptions","pos":[0,15]}]},{"content":"\\n&lt;p&gt;One of the enumeration values that specifies the default creation options for this task factory.&lt;/p&gt;\\n","pos":[24533,24640],"source":"\\n<p>One of the enumeration values that specifies the default creation options for this task factory.</p>\\n"},{"pos":[25125,25134],"content":"Scheduler","needQuote":true,"nodes":[{"content":"Scheduler","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The task scheduler for this task factory.&lt;/p&gt;\\n","pos":[25863,25915],"source":"\\n<p>The task scheduler for this task factory.</p>\\n"},{"pos":[26631,26677],"content":"ContinueWhenAll(Task[], Func<Task[], TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Func&lt;Task[], TResult&gt;)","pos":[0,46],"source":"ContinueWhenAll(Task[], Func<Task[], TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[27785,27838],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[27956,28073],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[28158,28195],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[28318,28395],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[28500,28640],"source":"\\n<p>\\n<em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[28737,28816],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[29847,29912],"content":"ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Func&lt;Task[], TResult&gt;, CancellationToken)","pos":[0,65],"source":"ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[31133,31186],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[31304,31421],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[31518,31603],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[31688,31725],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;continuationFunction&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[32223,32363],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>continuationFunction</em> is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[32460,32539],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[33915,34020],"content":"ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Func&lt;Task[], TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,105],"source":"ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[35473,35526],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[35644,35761],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[35858,35943],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[36054,36149],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The NotOn* or OnlyOn* values are not valid.&lt;/p&gt;\\n","pos":[36150,36199],"source":" The NotOn* or OnlyOn* values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The scheduler that is used to schedule the created continuation task.&lt;/p&gt;\\n","pos":[36290,36370],"source":"\\n<p>The scheduler that is used to schedule the created continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[36455,36492],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[36611,36841],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[36938,37017],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;continuationOptions&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[37134,37203],"source":"\\n<p>\\n<em>continuationOptions</em> specifies an invalid value.</p>\\n"},{"pos":[38948,39019],"content":"ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll(Task[], Func&lt;Task[], TResult&gt;, TaskContinuationOptions)","pos":[0,71],"source":"ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[40268,40321],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[40439,40556],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[40667,40762],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The NotOn* or OnlyOn* values are not valid.&lt;/p&gt;\\n","pos":[40763,40812],"source":" The NotOn* or OnlyOn* values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[40897,40934],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[41057,41134],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[41239,41390],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[41507,41587],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[41684,41763],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[42851,42954],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;)","pos":[0,103],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[44263,44316],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[44455,44572],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[44642,44709],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[44794,44831],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[44954,45031],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[45136,45287],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[45384,45463],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[46788,46910],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, CancellationToken)","pos":[0,122],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[48332,48385],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[48524,48641],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[48738,48823],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[48893,48960],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[49045,49082],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[49589,49740],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[49837,49916],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[51586,51748],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,162],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[53402,53455],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[53594,53711],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[53808,53893],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[54004,54099],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The NotOn* or OnlyOn* values are not valid.&lt;/p&gt;\\n","pos":[54100,54149],"source":" The NotOn* or OnlyOn* values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The scheduler that is used to schedule the created continuation task.&lt;/p&gt;\\n","pos":[54240,54320],"source":"\\n<p>The scheduler that is used to schedule the created continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[54390,54457],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[54542,54579],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[54698,54928],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[55025,55104],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[55221,55301],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n"},{"pos":[57349,57477],"content":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAll&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;, TaskContinuationOptions)","pos":[0,128],"source":"ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue.&lt;/p&gt;\\n","pos":[58927,58980],"source":"\\n<p>The array of tasks from which to continue.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when all tasks in the &lt;em&gt;tasks&lt;/em&gt; array have completed.&lt;/p&gt;\\n","pos":[59119,59236],"source":"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[59347,59442],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The NotOn* or OnlyOn* values are not valid.&lt;/p&gt;\\n","pos":[59443,59492],"source":" The NotOn* or OnlyOn* values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[59562,59629],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[59714,59751],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[59874,59951],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[60056,60207],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[60324,60404],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[60501,60580],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[61878,61922],"content":"ContinueWhenAny(Task[], Func<Task, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Func&lt;Task, TResult&gt;)","pos":[0,44],"source":"ContinueWhenAny(Task[], Func<Task, TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[63029,63106],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[63222,63333],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[63418,63455],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[63578,63655],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[63760,63911],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value or is empty.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[64008,64087],"source":"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n"},{"pos":[65104,65167],"content":"ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Func&lt;Task, TResult&gt;, CancellationToken)","pos":[0,63],"source":"ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[66387,66464],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[66580,66691],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[66788,66873],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[66958,66995],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is null.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[67502,67619],"source":"\\n<p>The <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[67716,67830],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[69192,69295],"content":"ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Func&lt;Task, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,103],"source":"ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[70747,70824],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[70940,71051],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[71148,71233],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[71344,71439],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The &lt;strong&gt;NotOn*&lt;/strong&gt; or &lt;strong&gt;OnlyOn*&lt;/strong&gt; values are not valid.&lt;/p&gt;\\n","pos":[71440,71523],"source":" The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The task scheduler that is used to schedule the created continuation task.&lt;/p&gt;\\n","pos":[71614,71699],"source":"\\n<p>The task scheduler that is used to schedule the created continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[71784,71821],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[71940,72170],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[72267,72381],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[74417,74486],"content":"ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny(Task[], Func&lt;Task, TResult&gt;, TaskContinuationOptions)","pos":[0,69],"source":"ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[75734,75811],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[75927,76038],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[76149,76244],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The &lt;strong&gt;NotOn*&lt;/strong&gt; or &lt;strong&gt;OnlyOn*&lt;/strong&gt; values are not valid.&lt;/p&gt;\\n","pos":[76245,76328],"source":" The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[76413,76450],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[76573,76650],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[76755,76906],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid enumeration value.&lt;/p&gt;\\n","pos":[77023,77115],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[77212,77326],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[78400,78501],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;)","pos":[0,101],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[79809,79886],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[80023,80134],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[80204,80271],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[80601,80678],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[80783,80934],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[81031,81145],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[82456,82576],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, CancellationToken)","pos":[0,120],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[83997,84074],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[84211,84322],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[84419,84504],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[84574,84641],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The new continuation task.&lt;/p&gt;\\n","pos":[84726,84763],"source":"\\n<p>The new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[85270,85421],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[85518,85632],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[87288,87448],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, CancellationToken, TaskContinuationOptions, TaskScheduler)","pos":[0,160],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[89101,89178],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[89315,89426],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new continuation task.&lt;/p&gt;\\n","pos":[89523,89608],"source":"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[89719,89814],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The &lt;strong&gt;NotOn*&lt;/strong&gt; or &lt;strong&gt;OnlyOn*&lt;/strong&gt; values are not valid.&lt;/p&gt;\\n","pos":[89815,89898],"source":" The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[90311,90378],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is null.&lt;/p&gt;\\n","pos":[90704,90917],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[91014,91128],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid TaskContinuationOptions value.&lt;/p&gt;\\n","pos":[91245,91349],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n"},{"pos":[93375,93501],"content":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)","needQuote":true,"nodes":[{"content":"ContinueWhenAny&lt;TAntecedentResult&gt;(Task&lt;TAntecedentResult&gt;[], Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;, TaskContinuationOptions)","pos":[0,126],"source":"ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)"}]},{"content":"\\n&lt;p&gt;The array of tasks from which to continue when one task completes.&lt;/p&gt;\\n","pos":[94950,95027],"source":"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n"},{"content":"\\n&lt;p&gt;The function delegate to execute asynchronously when one task in the &lt;em&gt;tasks&lt;/em&gt; array completes.&lt;/p&gt;\\n","pos":[95164,95275],"source":"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created continuation task.","pos":[95386,95481],"source":"\\n<p>One of the enumeration values that controls the behavior of the created continuation task."},{"content":"The &lt;strong&gt;NotOn*&lt;/strong&gt; or &lt;strong&gt;OnlyOn*&lt;/strong&gt; values are not valid.&lt;/p&gt;\\n","pos":[95482,95565],"source":" The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the result of the antecedent &lt;em&gt;tasks&lt;/em&gt;.&lt;/p&gt;\\n","pos":[95635,95702],"source":"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One of the elements in the &lt;em&gt;tasks&lt;/em&gt; array has been disposed.&lt;/p&gt;\\n","pos":[96032,96109],"source":"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;continuationFunction&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[96214,96365],"source":"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;continuationOptions&lt;/em&gt; argument specifies an invalid enumeration value.&lt;/p&gt;\\n","pos":[96482,96574],"source":"\\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array contains a null value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;tasks&lt;/em&gt; array is empty.&lt;/p&gt;\\n","pos":[96671,96785],"source":"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n"},{"pos":[98189,98278],"content":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)","needQuote":true,"nodes":[{"content":"FromAsync(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, Object)","pos":[0,89],"source":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[99464,99527],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[99624,99685],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[99749,99834],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[99919,99990],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[100109,100258],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[101598,101708],"content":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync(Func&lt;AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, Object, TaskCreationOptions)","pos":[0,110],"source":"FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[103015,103078],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[103175,103236],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[103300,103385],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[103488,103576],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[103936,104085],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[104202,104278],"source":"\\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\\n"},{"pos":[105410,105462],"content":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;)","pos":[0,52],"source":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)"}]},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[106863,106946],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;asyncResult&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[107296,107445],"source":"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[108414,108487],"content":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;, TaskCreationOptions)","pos":[0,73],"source":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[110009,110092],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[110195,110283],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;A task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[110368,110429],"source":"\\n<p>A task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;asyncResult&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[110548,110697],"source":"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; argument specifies an invalid value.&lt;/p&gt;\\n","pos":[110814,110890],"source":"\\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\\n"},{"pos":[112077,112165],"content":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"FromAsync(IAsyncResult, Func&lt;IAsyncResult, TResult&gt;, TaskCreationOptions, TaskScheduler)","pos":[0,88],"source":"FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;The function delegate that processes the completed &lt;em&gt;asyncResult&lt;/em&gt;.&lt;/p&gt;\\n","pos":[113778,113861],"source":"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[113964,114052],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The task scheduler that is used to schedule the task that executes the end method.&lt;/p&gt;\\n","pos":[114143,114236],"source":"\\n<p>The task scheduler that is used to schedule the task that executes the end method.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[114321,114392],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;asyncResult&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[114511,114739],"source":"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[114856,114933],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[116182,116292],"content":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, Object)","pos":[0,110],"source":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[117565,117628],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[117725,117786],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[117845,117919],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[117983,118068],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[118126,118212],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[118297,118368],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[118487,118636],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[120102,120233],"content":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1&gt;(Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, Object, TaskCreationOptions)","pos":[0,131],"source":"FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[121627,121690],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[121787,121848],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[121907,121981],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[122045,122130],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[122233,122321],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[122379,122465],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[122550,122621],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[122740,122889],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[123006,123083],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[124551,124682],"content":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, Object)","pos":[0,131],"source":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[126040,126103],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[126200,126261],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[126320,126394],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[126453,126528],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[126592,126677],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[126735,126818],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[126856,126942],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[127027,127098],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[127217,127366],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[128940,129092],"content":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2&gt;(Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, Object, TaskCreationOptions)","pos":[0,152],"source":"FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[130571,130634],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[130731,130792],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[130851,130925],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[130984,131059],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[131123,131208],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[131522,131605],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[131643,131729],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[131814,131885],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[132004,132153],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[132270,132347],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[133923,134075],"content":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, TArg3, Object)","pos":[0,152],"source":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[135517,135580],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[135677,135738],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[135797,135871],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[135930,136005],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[136064,136138],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[136202,136287],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[136345,136428],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[136466,136548],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[136586,136672],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[136757,136828],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[136947,137096],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[138778,138951],"content":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"FromAsync&lt;TArg1, TArg2, TArg3&gt;(Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;, Func&lt;IAsyncResult, TResult&gt;, TArg1, TArg2, TArg3, Object, TaskCreationOptions)","pos":[0,173],"source":"FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;The delegate that begins the asynchronous operation.&lt;/p&gt;\\n","pos":[140514,140577],"source":"\\n<p>The delegate that begins the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate that ends the asynchronous operation.&lt;/p&gt;\\n","pos":[140674,140735],"source":"\\n<p>The delegate that ends the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[140794,140868],"source":"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The second argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[140927,141002],"source":"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The third argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[141061,141135],"source":"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object containing data to be used by the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[141199,141284],"source":"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;An object that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[141387,141455],"source":"\\n<p>An object that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the second argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[141513,141596],"source":"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the third argument passed to &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[141634,141716],"source":"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The type of the first argument passed to the &lt;em&gt;beginMethod&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[141754,141840],"source":"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The created task that represents the asynchronous operation.&lt;/p&gt;\\n","pos":[141925,141996],"source":"\\n<p>The created task that represents the asynchronous operation.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;beginMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;endMethod&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[142115,142264],"source":"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[142381,142458],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[143728,143751],"content":"StartNew(Func<TResult>)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;TResult&gt;)","pos":[0,23],"source":"StartNew(Func<TResult>)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[144623,144718],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[144803,144831],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[144950,145017],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[145709,145751],"content":"StartNew(Func<TResult>, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;TResult&gt;, CancellationToken)","pos":[0,42],"source":"StartNew(Func<TResult>, CancellationToken)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[146736,146831],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new task.&lt;/p&gt;\\n","pos":[146928,147000],"source":"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[147085,147113],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token source that created&lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[147236,147351],"source":"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[147456,147523],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[148548,148626],"content":"StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;TResult&gt;, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,78],"source":"StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[149823,149918],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new task.&lt;/p&gt;\\n","pos":[150015,150087],"source":"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[150190,150278],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The task scheduler that is used to schedule the created task.&lt;/p&gt;\\n","pos":[150369,150441],"source":"\\n<p>The task scheduler that is used to schedule the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[150526,150554],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token source that created&lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[150677,150792],"source":"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[150897,151043],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[151160,151237],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[152236,152280],"content":"StartNew(Func<TResult>, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;TResult&gt;, TaskCreationOptions)","pos":[0,44],"source":"StartNew(Func<TResult>, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[153273,153368],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[153471,153559],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[153876,153943],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[154060,154137],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[154915,154954],"content":"StartNew(Func<Object, TResult>, Object)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;Object, TResult&gt;, Object)","pos":[0,39],"source":"StartNew(Func<Object, TResult>, Object)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[155917,156012],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[156076,156161],"source":"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[156246,156274],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[156393,156460],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[157314,157372],"content":"StartNew(Func<Object, TResult>, Object, CancellationToken)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;Object, TResult&gt;, Object, CancellationToken)","pos":[0,58],"source":"StartNew(Func<Object, TResult>, Object, CancellationToken)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[158448,158543],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[158607,158692],"source":"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new task.&lt;/p&gt;\\n","pos":[158789,158861],"source":"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[158946,158974],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token source that created&lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[159097,159212],"source":"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[159317,159384],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"pos":[160571,160665],"content":"StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;Object, TResult&gt;, Object, CancellationToken, TaskCreationOptions, TaskScheduler)","pos":[0,94],"source":"StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[161953,162048],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[162112,162197],"source":"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token that will be assigned to the new task.&lt;/p&gt;\\n","pos":[162294,162366],"source":"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[162469,162557],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The task scheduler that is used to schedule the created task.&lt;/p&gt;\\n","pos":[162648,162720],"source":"\\n<p>The task scheduler that is used to schedule the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[162805,162833],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The cancellation token source that created&lt;em&gt;cancellationToken&lt;/em&gt; has already been disposed.&lt;/p&gt;\\n&lt;p&gt;&lt;/p&gt;\\n","pos":[162956,163071],"source":"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The &lt;em&gt;scheduler&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[163176,163322],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[163439,163516],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[164677,164737],"content":"StartNew(Func<Object, TResult>, Object, TaskCreationOptions)","needQuote":true,"nodes":[{"content":"StartNew(Func&lt;Object, TResult&gt;, Object, TaskCreationOptions)","pos":[0,60],"source":"StartNew(Func<Object, TResult>, Object, TaskCreationOptions)"}]},{"content":"\\n&lt;p&gt;A function delegate that returns the future result to be available through the task.&lt;/p&gt;\\n","pos":[165821,165916],"source":"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n"},{"content":"\\n&lt;p&gt;An object that contains data to be used by the &lt;em&gt;function&lt;/em&gt; delegate.&lt;/p&gt;\\n","pos":[165980,166065],"source":"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n"},{"content":"\\n&lt;p&gt;One of the enumeration values that controls the behavior of the created task.&lt;/p&gt;\\n","pos":[166168,166256],"source":"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n"},{"content":"\\n&lt;p&gt;The started task.&lt;/p&gt;\\n","pos":[166341,166369],"source":"\\n<p>The started task.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;function&lt;/em&gt; argument is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[166488,166555],"source":"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;The &lt;em&gt;creationOptions&lt;/em&gt; parameter specifies an invalid value.&lt;/p&gt;\\n","pos":[166672,166749],"source":"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n"},{"pos":[167329,167351],"content":"System.Threading.Tasks","needQuote":true,"nodes":[{"content":"System.Threading.Tasks","pos":[0,22]}]},{"pos":[167530,167536],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[167696,167706],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[167801,167809],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[167878,167879],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[167906,167907],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[167977,167985],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[168054,168055],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[168082,168083],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168266,168280],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[168399,168405],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[168472,168473],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[168523,168529],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[168589,168590],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[168673,168679],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[168746,168747],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[168797,168803],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[168863,168864],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[169078,169100],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[169248,169254],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[169321,169322],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[169372,169378],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[169439,169440]},{"pos":[169495,169501],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[169561,169562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[169659,169665],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[169732,169733],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[169783,169789],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[169850,169851]},{"pos":[169906,169912],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[169972,169973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170218,170249],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[170415,170430],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[170506,170507],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[170557,170563],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[170624,170625]},{"pos":[170680,170686],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[170746,170747],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[170853,170868],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[170944,170945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[170995,171001],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[171062,171063]},{"pos":[171118,171124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[171184,171185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171415,171428],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[171529,171540],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[171612,171613],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[171640,171641],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[171714,171725],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[171797,171798],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[171825,171826],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172001,172010],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[172103,172110],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[172178,172179],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172206,172207],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172276,172283],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[172351,172352],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172379,172380],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172555,172572],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[172681,172696],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[172772,172773],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172800,172801],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[172878,172893],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[172969,172970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[172997,172998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[173143,173149],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[173311,173328],"content":"CancellationToken","needQuote":true,"nodes":[{"content":"CancellationToken","pos":[0,17]}]},{"pos":[173512,173528],"content":"System.Threading","needQuote":true,"nodes":[{"content":"System.Threading","pos":[0,16]}]},{"pos":[173734,173753],"content":"TaskCreationOptions","needQuote":true,"nodes":[{"content":"TaskCreationOptions","pos":[0,19]}]},{"pos":[174018,174041],"content":"TaskContinuationOptions","needQuote":true,"nodes":[{"content":"TaskContinuationOptions","pos":[0,23]}]},{"pos":[174308,174321],"content":"TaskScheduler","needQuote":true,"nodes":[{"content":"TaskScheduler","pos":[0,13]}]},{"pos":[174498,174504],"content":"Task[]","needQuote":true,"nodes":[{"content":"Task[]","pos":[0,6]}]},{"pos":[174672,174676],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[174730,174732]},{"pos":[174811,174815],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[174868,174870],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[175050,175071],"content":"Func<Task[], TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task[], TResult&gt;","pos":[0,21],"source":"Func<Task[], TResult>"}]},{"pos":[175290,175294],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[175352,175353],"content":"<","needQuote":true,"nodes":[]},{"pos":[175417,175421],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"[]","pos":[175475,175477]},{"content":",","pos":[175509,175510]},{"pos":[175542,175549],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[175648,175652],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[175711,175714]},{"pos":[175785,175789],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[175842,175844],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[175873,175874]},{"pos":[175906,175913],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[175946,175947],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176239,176252],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[176449,176453],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[176506,176507],"content":"<","needQuote":true,"nodes":[]},{"pos":[176534,176541],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[176656,176660],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[176714,176717]},{"pos":[176751,176758],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[176791,176792],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[176971,176987],"content":"Func<T, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T, TResult&gt;","pos":[0,16],"source":"Func<T, TResult>"}]},{"pos":[177145,177149],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[177186,177187],"content":"<","needQuote":true,"nodes":[]},{"pos":[177214,177215],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[177243,177244]},{"pos":[177276,177283],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[177382,177386],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[177424,177427]},{"pos":[177461,177462],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"content":",","pos":[177490,177491]},{"pos":[177523,177530],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[177563,177564],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[177747,177760],"content":"Task<TResult>","needQuote":true,"nodes":[{"content":"Task&lt;TResult&gt;","pos":[0,13],"source":"Task<TResult>"}]},{"pos":[177957,177961],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[178014,178015],"content":"<","needQuote":true,"nodes":[]},{"pos":[178042,178049],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[178164,178168],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[178222,178225]},{"pos":[178259,178266],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[178299,178300],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[178494,178519],"content":"Task<TAntecedentResult>[]","needQuote":true,"nodes":[{"content":"Task&lt;TAntecedentResult&gt;[]","pos":[0,25],"source":"Task<TAntecedentResult>[]"}]},{"pos":[178752,178756],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[178809,178810],"content":"<","needQuote":true,"nodes":[]},{"pos":[178837,178854],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":"[]","pos":[178930,178932]},{"pos":[179013,179017],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[179071,179074]},{"pos":[179108,179125],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[179168,179169],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[179196,179198],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[179440,179480],"content":"Func<Task<TAntecedentResult>[], TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TAntecedentResult&gt;[], TResult&gt;","pos":[0,40],"source":"Func<Task<TAntecedentResult>[], TResult>"}]},{"pos":[179762,179766],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[179824,179825],"content":"<","needQuote":true,"nodes":[]},{"pos":[179891,179895],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[179948,179949],"content":"<","needQuote":true,"nodes":[]},{"pos":[179976,179993],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":"[]","pos":[180069,180071]},{"content":",","pos":[180103,180104]},{"pos":[180136,180143],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[180242,180246],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[180305,180308]},{"pos":[180381,180385],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[180439,180442]},{"pos":[180476,180493],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[180536,180537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180564,180566],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[180595,180596]},{"pos":[180628,180635],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[180668,180669],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[180987,181006],"content":"Func<Task, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task, TResult&gt;","pos":[0,19],"source":"Func<Task, TResult>"}]},{"pos":[181219,181223],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[181281,181282],"content":"<","needQuote":true,"nodes":[]},{"pos":[181346,181350],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[181404,181405]},{"pos":[181437,181444],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[181543,181547],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[181606,181609]},{"pos":[181680,181684],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":",","pos":[181738,181739]},{"pos":[181771,181778],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[181811,181812],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[182099,182137],"content":"Func<Task<TAntecedentResult>, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Task&lt;TAntecedentResult&gt;, TResult&gt;","pos":[0,38],"source":"Func<Task<TAntecedentResult>, TResult>"}]},{"pos":[182413,182417],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[182475,182476],"content":"<","needQuote":true,"nodes":[]},{"pos":[182542,182546],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"pos":[182599,182600],"content":"<","needQuote":true,"nodes":[]},{"pos":[182627,182644],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"content":",","pos":[182720,182721]},{"pos":[182753,182760],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[182859,182863],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[182922,182925]},{"pos":[182998,183002],"content":"Task","needQuote":true,"nodes":[{"content":"Task","pos":[0,4]}]},{"content":"(Of","pos":[183056,183059]},{"pos":[183093,183110],"content":"TAntecedentResult","needQuote":true,"nodes":[{"content":"TAntecedentResult","pos":[0,17]}]},{"pos":[183153,183154],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"content":",","pos":[183182,183183]},{"pos":[183215,183222],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[183255,183256],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[183585,183626],"content":"Func<AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;AsyncCallback, Object, IAsyncResult&gt;","pos":[0,41],"source":"Func<AsyncCallback, Object, IAsyncResult>"}]},{"pos":[183901,183905],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[183963,183964],"content":"<","needQuote":true,"nodes":[]},{"pos":[184021,184034],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[184102,184103]},{"pos":[184158,184164],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[184225,184226]},{"pos":[184287,184299],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[184431,184435],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[184494,184497]},{"pos":[184561,184574],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[184642,184643]},{"pos":[184698,184704],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[184765,184766]},{"pos":[184827,184839],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[184905,184906],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[185231,185258],"content":"Func<IAsyncResult, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;IAsyncResult, TResult&gt;","pos":[0,27],"source":"Func<IAsyncResult, TResult>"}]},{"pos":[185463,185467],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[185525,185526],"content":"<","needQuote":true,"nodes":[]},{"pos":[185582,185594],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"content":",","pos":[185661,185662]},{"pos":[185694,185701],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[185800,185804],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[185863,185866]},{"pos":[185929,185941],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"content":",","pos":[186008,186009]},{"pos":[186041,186048],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[186081,186082],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[186294,186315],"content":"Func<T1, T2, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, TResult&gt;","pos":[0,21],"source":"Func<T1, T2, TResult>"}]},{"pos":[186488,186492],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[186529,186530],"content":"<","needQuote":true,"nodes":[]},{"pos":[186557,186559],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[186588,186589]},{"pos":[186621,186623],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[186652,186653]},{"pos":[186685,186692],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[186791,186795],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[186833,186836]},{"pos":[186870,186872],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[186901,186902]},{"pos":[186934,186936],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[186965,186966]},{"pos":[186998,187005],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[187038,187039],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[187239,187251],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[187484,187532],"content":"Func<TArg1, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,48],"source":"Func<TArg1, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[187828,187832],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[187890,187891],"content":"<","needQuote":true,"nodes":[]},{"pos":[187918,187923],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[187955,187956]},{"pos":[188018,188031],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[188099,188100]},{"pos":[188155,188161],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[188222,188223]},{"pos":[188284,188296],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[188428,188432],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[188491,188494]},{"pos":[188528,188533],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[188565,188566]},{"pos":[188628,188641],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[188709,188710]},{"pos":[188765,188771],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[188832,188833]},{"pos":[188894,188906],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[188972,188973],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[189258,189263],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"pos":[189376,189401],"content":"Func<T1, T2, T3, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, TResult&gt;","pos":[0,25],"source":"Func<T1, T2, T3, TResult>"}]},{"pos":[189586,189590],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[189627,189628],"content":"<","needQuote":true,"nodes":[]},{"pos":[189655,189657],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[189686,189687]},{"pos":[189719,189721],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[189750,189751]},{"pos":[189783,189785],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[189814,189815]},{"pos":[189847,189854],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[189953,189957],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[189995,189998]},{"pos":[190032,190034],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[190063,190064]},{"pos":[190096,190098],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[190127,190128]},{"pos":[190160,190162],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[190191,190192]},{"pos":[190224,190231],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[190264,190265],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[190442,190447],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"pos":[190632,190687],"content":"Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, TArg2, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,55],"source":"Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[191004,191008],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[191066,191067],"content":"<","needQuote":true,"nodes":[]},{"pos":[191094,191099],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[191131,191132]},{"pos":[191164,191169],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[191201,191202]},{"pos":[191264,191277],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[191345,191346]},{"pos":[191401,191407],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[191468,191469]},{"pos":[191530,191542],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[191674,191678],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[191737,191740]},{"pos":[191774,191779],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[191811,191812]},{"pos":[191844,191849],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[191881,191882]},{"pos":[191944,191957],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[192025,192026]},{"pos":[192081,192087],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[192148,192149]},{"pos":[192210,192222],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[192288,192289],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[192592,192597],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"pos":[192710,192739],"content":"Func<T1, T2, T3, T4, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, TResult&gt;","pos":[0,29],"source":"Func<T1, T2, T3, T4, TResult>"}]},{"pos":[192936,192940],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[192977,192978],"content":"<","needQuote":true,"nodes":[]},{"pos":[193005,193007],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[193036,193037]},{"pos":[193069,193071],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[193100,193101]},{"pos":[193133,193135],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[193164,193165]},{"pos":[193197,193199],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[193228,193229]},{"pos":[193261,193268],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[193367,193371],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[193409,193412]},{"pos":[193446,193448],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[193477,193478]},{"pos":[193510,193512],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[193541,193542]},{"pos":[193574,193576],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[193605,193606]},{"pos":[193638,193640],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[193669,193670]},{"pos":[193702,193709],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[193742,193743],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[193928,193933],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"pos":[194126,194188],"content":"Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>","needQuote":true,"nodes":[{"content":"Func&lt;TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult&gt;","pos":[0,62],"source":"Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>"}]},{"pos":[194526,194530],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[194588,194589],"content":"<","needQuote":true,"nodes":[]},{"pos":[194616,194621],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[194653,194654]},{"pos":[194686,194691],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[194723,194724]},{"pos":[194756,194761],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"content":",","pos":[194793,194794]},{"pos":[194856,194869],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[194937,194938]},{"pos":[194993,194999],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[195060,195061]},{"pos":[195122,195134],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[195266,195270],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[195329,195332]},{"pos":[195366,195371],"content":"TArg1","needQuote":true,"nodes":[{"content":"TArg1","pos":[0,5]}]},{"content":",","pos":[195403,195404]},{"pos":[195436,195441],"content":"TArg2","needQuote":true,"nodes":[{"content":"TArg2","pos":[0,5]}]},{"content":",","pos":[195473,195474]},{"pos":[195506,195511],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"content":",","pos":[195543,195544]},{"pos":[195606,195619],"content":"AsyncCallback","needQuote":true,"nodes":[{"content":"AsyncCallback","pos":[0,13]}]},{"content":",","pos":[195687,195688]},{"pos":[195743,195749],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[195810,195811]},{"pos":[195872,195884],"content":"IAsyncResult","needQuote":true,"nodes":[{"content":"IAsyncResult","pos":[0,12]}]},{"pos":[195950,195951],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[196272,196277],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"pos":[196390,196423],"content":"Func<T1, T2, T3, T4, T5, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;T1, T2, T3, T4, T5, TResult&gt;","pos":[0,33],"source":"Func<T1, T2, T3, T4, T5, TResult>"}]},{"pos":[196632,196636],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[196673,196674],"content":"<","needQuote":true,"nodes":[]},{"pos":[196701,196703],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[196732,196733]},{"pos":[196765,196767],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[196796,196797]},{"pos":[196829,196831],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[196860,196861]},{"pos":[196893,196895],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[196924,196925]},{"pos":[196957,196959],"content":"T5","needQuote":true,"nodes":[{"content":"T5","pos":[0,2]}]},{"content":",","pos":[196988,196989]},{"pos":[197021,197028],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[197127,197131],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[197169,197172]},{"pos":[197206,197208],"content":"T1","needQuote":true,"nodes":[{"content":"T1","pos":[0,2]}]},{"content":",","pos":[197237,197238]},{"pos":[197270,197272],"content":"T2","needQuote":true,"nodes":[{"content":"T2","pos":[0,2]}]},{"content":",","pos":[197301,197302]},{"pos":[197334,197336],"content":"T3","needQuote":true,"nodes":[{"content":"T3","pos":[0,2]}]},{"content":",","pos":[197365,197366]},{"pos":[197398,197400],"content":"T4","needQuote":true,"nodes":[{"content":"T4","pos":[0,2]}]},{"content":",","pos":[197429,197430]},{"pos":[197462,197464],"content":"T5","needQuote":true,"nodes":[{"content":"T5","pos":[0,2]}]},{"content":",","pos":[197493,197494]},{"pos":[197526,197533],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[197566,197567],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[197760,197765],"content":"TArg3","needQuote":true,"nodes":[{"content":"TArg3","pos":[0,5]}]},{"pos":[197889,197902],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[198051,198055],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[198113,198114],"content":"<","needQuote":true,"nodes":[]},{"pos":[198141,198148],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[198247,198251],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[198310,198313]},{"pos":[198347,198354],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[198387,198388],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[198552,198565],"content":"Func<TResult>","needQuote":true,"nodes":[{"content":"Func&lt;TResult&gt;","pos":[0,13],"source":"Func<TResult>"}]},{"pos":[198714,198718],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[198755,198756],"content":"<","needQuote":true,"nodes":[]},{"pos":[198783,198790],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[198889,198893],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[198931,198934]},{"pos":[198968,198975],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[199008,199009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[199218,199239],"content":"Func<Object, TResult>","needQuote":true,"nodes":[{"content":"Func&lt;Object, TResult&gt;","pos":[0,21],"source":"Func<Object, TResult>"}]},{"pos":[199426,199430],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"pos":[199488,199489],"content":"<","needQuote":true,"nodes":[]},{"pos":[199539,199545],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[199606,199607]},{"pos":[199639,199646],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[199745,199749],"content":"Func","needQuote":true,"nodes":[{"content":"Func","pos":[0,4]}]},{"content":"(Of","pos":[199808,199811]},{"pos":[199868,199874],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[199935,199936]},{"pos":[199968,199975],"content":"TResult","needQuote":true,"nodes":[{"content":"TResult","pos":[0,7]}]},{"pos":[200008,200009],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[200223,200250],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[200458,200481],"content":"ObjectDisposedException","needQuote":true,"nodes":[{"content":"ObjectDisposedException","pos":[0,23]}]},{"pos":[200675,200696],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[200897,200914],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Threading.Tasks.TaskFactory`1\n  commentId: T:System.Threading.Tasks.TaskFactory`1\n  id: TaskFactory`1\n  parent: System.Threading.Tasks\n  children:\n  - System.Threading.Tasks.TaskFactory`1.#ctor\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.CancellationToken\n  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  - System.Threading.Tasks.TaskFactory`1.CreationOptions\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.Scheduler\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory<TResult>\n  fullName: System.Threading.Tasks.TaskFactory<TResult>\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: TaskFactory\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 40\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Provides support for creating and scheduling <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects.</p>\\n\"\n  syntax:\n    content: >-\n      [HostProtection(Synchronization = true, ExternalThreading = true)]\n\n      public class TaskFactory<TResult>\n    content.vb: >-\n      <HostProtection(Synchronization:=True, ExternalThreading:=True)>\n\n      Public Class TaskFactory(Of TResult)\n    typeParameters:\n    - id: TResult\n      description: \"\\n<p>The return value of the <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that the methods of this class create. </p>\\n\"\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult)\n  name.vb: TaskFactory(Of TResult)\n  nameWithType: TaskFactory<TResult>\n  nameWithType.vb: TaskFactory(Of TResult)\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor\n  id: '#ctor'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory()\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 88\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the default configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory()\n  nameWithType: TaskFactory<TResult>.TaskFactory()\n  nameWithType.vb: TaskFactory(Of TResult).TaskFactory()\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)\n  id: '#ctor(System.Threading.CancellationToken)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 109\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the default configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(CancellationToken cancellationToken)\n    content.vb: Public Sub New(cancellationToken As CancellationToken)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken)\n  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 204\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)\n    parameters:\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The default cancellation token that will be assigned to tasks created by this <xref href=\\\"System.Threading.Tasks.TaskFactory\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> unless another cancellation token is explicitly specified when calling the factory methods.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The default options to use when creating tasks with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The default options to use when creating continuation tasks with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n<p></p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The default scheduler to use to schedule any tasks created with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. A null value indicates that <xref href=\\\"System.Threading.Tasks.TaskScheduler.Current\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be used.</p>\\n<p></p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)\n  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 164\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)\n    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)\n    parameters:\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>The default options to use when creating tasks with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>The default options to use when creating continuation tasks with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>creationOptions</em> or <em>continuationOptions</em> specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(TaskCreationOptions, TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)\n  id: '#ctor(System.Threading.Tasks.TaskScheduler)'\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: TaskFactory(TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(System.Threading.Tasks.TaskScheduler)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 133\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Initializes a <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance with the specified configuration.</p>\\n\"\n  syntax:\n    content: public TaskFactory(TaskScheduler scheduler)\n    content.vb: Public Sub New(scheduler As TaskScheduler)\n    parameters:\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The scheduler to use to schedule any tasks created with this <xref href=\\\"System.Threading.Tasks.TaskFactory`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. A null value indicates that the current <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> should be used.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).TaskFactory(System.Threading.Tasks.TaskScheduler)\n  nameWithType: TaskFactory<TResult>.TaskFactory(TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).TaskFactory(TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken\n  commentId: P:System.Threading.Tasks.TaskFactory`1.CancellationToken\n  id: CancellationToken\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: CancellationToken\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CancellationToken\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 226\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the default cancellation token for this task factory.</p>\\n\"\n  syntax:\n    content: public CancellationToken CancellationToken { get; }\n    content.vb: Public ReadOnly Property CancellationToken As CancellationToken\n    parameters: []\n    return:\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The default cancellation token for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CancellationToken\n  nameWithType: TaskFactory<TResult>.CancellationToken\n  nameWithType.vb: TaskFactory(Of TResult).CancellationToken\n- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory`1.ContinuationOptions\n  id: ContinuationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinuationOptions\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinuationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 258\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskContinuationOptions ContinuationOptions { get; }\n    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that specifies the default continuation options for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinuationOptions\n  nameWithType: TaskFactory<TResult>.ContinuationOptions\n  nameWithType.vb: TaskFactory(Of TResult).ContinuationOptions\n- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions\n  commentId: P:System.Threading.Tasks.TaskFactory`1.CreationOptions\n  id: CreationOptions\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: CreationOptions\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreationOptions\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 248\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Threading.Tasks.TaskCreationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> enumeration value for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskCreationOptions CreationOptions { get; }\n    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that specifies the default creation options for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).CreationOptions\n  nameWithType: TaskFactory<TResult>.CreationOptions\n  nameWithType.vb: TaskFactory(Of TResult).CreationOptions\n- uid: System.Threading.Tasks.TaskFactory`1.Scheduler\n  commentId: P:System.Threading.Tasks.TaskFactory`1.Scheduler\n  id: Scheduler\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: Scheduler\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Scheduler\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 238\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Gets the task scheduler for this task factory.</p>\\n\"\n  syntax:\n    content: public TaskScheduler Scheduler { get; }\n    content.vb: Public ReadOnly Property Scheduler As TaskScheduler\n    parameters: []\n    return:\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The task scheduler for this task factory.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).Scheduler\n  nameWithType: TaskFactory<TResult>.Scheduler\n  nameWithType.vb: TaskFactory(Of TResult).Scheduler\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Func<Task[], TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1490\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))\n  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult))\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1521\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>\\n<em>continuationFunction</em> is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1605\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The scheduler that is used to schedule the created continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>continuationOptions</em> specifies an invalid value.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1558\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided Tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[], Func<Task[], TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Task(), Func(Of Task(), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1633\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1665\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1753\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The scheduler that is used to schedule the created continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAll\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1704\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of a set of provided tasks.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The NotOn* or OnlyOn* values are not valid.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Func<Task, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1890\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value or is empty.</p>\\n<p></p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))\n  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult))\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1921\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is null.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 2005\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The task scheduler that is used to schedule the created continuation task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid <xref href=\\\"System.Threading.Tasks.TaskContinuationOptions\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1958\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task,{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[], Func<Task, TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Task(), Func(Of Task, TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 2033\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 2065\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 2153\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new continuation task.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The <xref href=\\\"System.Threading.Tasks.TaskScheduler\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that is used to schedule the created continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is null.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\\n\"\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n<p>-or-</p>\\n<p>The <xref href=\\\"System.Threading.CancellationTokenSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that created<em> cancellationToken</em> has already been disposed. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ContinueWhenAny\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 2104\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a continuation task that will be started upon the completion of any task in the provided set.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)\n    parameters:\n    - id: tasks\n      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n      description: \"\\n<p>The array of tasks from which to continue when one task completes.</p>\\n\"\n    - id: continuationFunction\n      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n      description: \"\\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\\n\"\n    - id: continuationOptions\n      type: System.Threading.Tasks.TaskContinuationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created continuation task. The <strong>NotOn*</strong> or <strong>OnlyOn*</strong> values are not valid.</p>\\n\"\n    typeParameters:\n    - id: TAntecedentResult\n      description: \"\\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The new continuation <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>One of the elements in the <em>tasks</em> array has been disposed.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>continuationOptions</em> argument specifies an invalid enumeration value.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The <em>tasks</em> array contains a null value.</p>\\n<p>-or-</p>\\n<p>The <em>tasks</em> array is empty.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)\n  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)\n  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 770\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)\n    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)\n  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 799\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 606\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))\n  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 632\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>A task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> argument specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 667\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that executes an end method function when a specified <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> completes.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> FromAsync(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: asyncResult\n      type: System.IAsyncResult\n      description: \"\\n<p>The <xref href=\\\"System.IAsyncResult\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> whose completion should trigger the processing of the <em>endMethod</em>.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The task scheduler that is used to schedule the task that executes the end method.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>asyncResult</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 901\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)\n    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)\n  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 935\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1042\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1080\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>An object that controls the behavior of the created <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1190\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)\n- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FromAsync\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 1232\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates a task that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\\n\"\n  syntax:\n    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)\n    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: beginMethod\n      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n      description: \"\\n<p>The delegate that begins the asynchronous operation.</p>\\n\"\n    - id: endMethod\n      type: System.Func{System.IAsyncResult,{TResult}}\n      description: \"\\n<p>The delegate that ends the asynchronous operation.</p>\\n\"\n    - id: arg1\n      type: '{TArg1}'\n      description: \"\\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg2\n      type: '{TArg2}'\n      description: \"\\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: arg3\n      type: '{TArg3}'\n      description: \"\\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>An object that controls the behavior of the created task.</p>\\n\"\n    typeParameters:\n    - id: TArg1\n      description: \"\\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg2\n      description: \"\\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\\n\"\n    - id: TArg3\n      description: \"\\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The created task that represents the asynchronous operation.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>beginMethod</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>endMethod</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0})\n  id: StartNew(System.Func{`0})\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<TResult>)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 279\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<TResult> function)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of TResult)) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult))\n  name.vb: StartNew(Func(Of TResult))\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult))\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken)\n  id: StartNew(System.Func{`0},System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<TResult>, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 308\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken)\n  name.vb: StartNew(Func(Of TResult), CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 381\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The task scheduler that is used to schedule the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<TResult>, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 339\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<TResult> function, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started <xref href=\\\"System.Threading.Tasks.Task`1\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)\n  name.vb: StartNew(Func(Of TResult), TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of TResult), TaskCreationOptions)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)\n  id: StartNew(System.Func{System.Object,`0},System.Object)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<Object, TResult>, Object)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 408\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<object, TResult> function, object state)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object)\n  name.vb: StartNew(Func(Of Object, TResult), Object)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<Object, TResult>, Object, CancellationToken)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 439\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)\n  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, CancellationToken)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, CancellationToken)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 516\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: cancellationToken\n      type: System.Threading.CancellationToken\n      description: \"\\n<p>The cancellation token that will be assigned to the new task.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    - id: scheduler\n      type: System.Threading.Tasks.TaskScheduler\n      description: \"\\n<p>The task scheduler that is used to schedule the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ObjectDisposedException\n    commentId: T:System.ObjectDisposedException\n    description: \"\\n<p>The cancellation token source that created<em>cancellationToken</em> has already been disposed.</p>\\n<p></p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n<p>-or-</p>\\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)\n  name.vb: StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)\n- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  commentId: M:System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)\n  parent: System.Threading.Tasks.TaskFactory`1\n  langs:\n  - csharp\n  - vb\n  name: StartNew(Func<Object, TResult>, Object, TaskCreationOptions)\n  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StartNew\n    path: src/mscorlib/src/System/Threading/Tasks/FutureFactory.cs\n    startLine: 472\n  assemblies:\n  - System.Threading.Tasks\n  namespace: System.Threading.Tasks\n  summary: \"\\n<p>Creates and starts a task.</p>\\n\"\n  syntax:\n    content: >-\n      [MethodImpl(MethodImplOptions.NoInlining)]\n\n      public Task<TResult> StartNew(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)\n    content.vb: >-\n      <MethodImpl(MethodImplOptions.NoInlining)>\n\n      Public Function StartNew(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)\n    parameters:\n    - id: function\n      type: System.Func{System.Object,{TResult}}\n      description: \"\\n<p>A function delegate that returns the future result to be available through the task.</p>\\n\"\n    - id: state\n      type: System.Object\n      description: \"\\n<p>An object that contains data to be used by the <em>function</em> delegate.</p>\\n\"\n    - id: creationOptions\n      type: System.Threading.Tasks.TaskCreationOptions\n      description: \"\\n<p>One of the enumeration values that controls the behavior of the created task.</p>\\n\"\n    return:\n      type: System.Threading.Tasks.Task{{TResult}}\n      description: \"\\n<p>The started task.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>The <em>creationOptions</em> parameter specifies an invalid value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  fullName.vb: System.Threading.Tasks.TaskFactory(Of TResult).StartNew(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)\n  name.vb: StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)\n  nameWithType: TaskFactory<TResult>.StartNew(Func<Object, TResult>, Object, TaskCreationOptions)\n  nameWithType.vb: TaskFactory(Of TResult).StartNew(Func(Of Object, TResult), Object, TaskCreationOptions)\nreferences:\n- uid: System.Threading.Tasks\n  isExternal: false\n  name: System.Threading.Tasks\n  fullName: System.Threading.Tasks\n  nameWithType: System.Threading.Tasks\n  commentId: N:System.Threading.Tasks\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Threading.CancellationToken\n  parent: System.Threading\n  isExternal: false\n  name: CancellationToken\n  fullName: System.Threading.CancellationToken\n  nameWithType: CancellationToken\n  commentId: T:System.Threading.CancellationToken\n- uid: System.Threading\n  isExternal: false\n  name: System.Threading\n  fullName: System.Threading\n  nameWithType: System.Threading\n  commentId: N:System.Threading\n- uid: System.Threading.Tasks.TaskCreationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskCreationOptions\n  fullName: System.Threading.Tasks.TaskCreationOptions\n  nameWithType: TaskCreationOptions\n  commentId: T:System.Threading.Tasks.TaskCreationOptions\n- uid: System.Threading.Tasks.TaskContinuationOptions\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskContinuationOptions\n  fullName: System.Threading.Tasks.TaskContinuationOptions\n  nameWithType: TaskContinuationOptions\n  commentId: T:System.Threading.Tasks.TaskContinuationOptions\n- uid: System.Threading.Tasks.TaskScheduler\n  parent: System.Threading.Tasks\n  isExternal: false\n  name: TaskScheduler\n  fullName: System.Threading.Tasks.TaskScheduler\n  nameWithType: TaskScheduler\n  commentId: T:System.Threading.Tasks.TaskScheduler\n- uid: System.Threading.Tasks.Task[]\n  name: Task[]\n  fullName: System.Threading.Tasks.Task[]\n  fullname.vb: System.Threading.Tasks.Task()\n  name.vb: Task()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  nameWithType: Task[]\n  nameWithType.vb: Task()\n- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task[], TResult>\n  fullName: System.Func<System.Threading.Tasks.Task[], TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)\n  name.vb: Func(Of Task(), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task[], TResult>\n  nameWithType.vb: Func(Of Task(), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task[],``0}\n- uid: System.Threading.Tasks.Task{{TResult}}\n  parent: System.Threading.Tasks\n  definition: System.Threading.Tasks.Task`1\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task{`0}\n- uid: System.Func`2\n  isExternal: false\n  name: Func<T, TResult>\n  fullName: System.Func<T, TResult>\n  fullname.vb: System.Func(Of T, TResult)\n  name.vb: Func(Of T, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T, TResult>\n  nameWithType.vb: Func(Of T, TResult)\n  commentId: T:System.Func`2\n- uid: System.Threading.Tasks.Task`1\n  isExternal: false\n  name: Task<TResult>\n  fullName: System.Threading.Tasks.Task<TResult>\n  fullname.vb: System.Threading.Tasks.Task(Of TResult)\n  name.vb: Task(Of TResult)\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Task<TResult>\n  nameWithType.vb: Task(Of TResult)\n  commentId: T:System.Threading.Tasks.Task`1\n- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]\n  name: Task<TAntecedentResult>[]\n  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]\n  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()\n  name.vb: Task(Of TAntecedentResult)()\n  spec.csharp:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  nameWithType: Task<TAntecedentResult>[]\n  nameWithType.vb: Task(Of TAntecedentResult)()\n- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task<TAntecedentResult>[], TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)\n  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TAntecedentResult>[], TResult>\n  nameWithType.vb: Func(Of Task(Of TAntecedentResult)(), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task{``0}[],``1}\n- uid: System.Func{System.Threading.Tasks.Task,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)\n  name.vb: Func(Of Task, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task, TResult>\n  nameWithType.vb: Func(Of Task, TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task,``0}\n- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Task<TAntecedentResult>, TResult>\n  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>\n  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)\n  name.vb: Func(Of Task(Of TAntecedentResult), TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: <\n    fullName: <\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: '>'\n    fullName: '>'\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Threading.Tasks.Task`1\n    name: Task\n    fullName: System.Threading.Tasks.Task\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TAntecedentResult\n    fullName: TAntecedentResult\n  - name: )\n    fullName: )\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Task<TAntecedentResult>, TResult>\n  nameWithType.vb: Func(Of Task(Of TAntecedentResult), TResult)\n  commentId: T:System.Func{System.Threading.Tasks.Task{``0},``1}\n- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`3\n  name: Func<AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: System.Func{System.IAsyncResult,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<IAsyncResult, TResult>\n  fullName: System.Func<System.IAsyncResult, TResult>\n  fullname.vb: System.Func(Of System.IAsyncResult, TResult)\n  name.vb: Func(Of IAsyncResult, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<IAsyncResult, TResult>\n  nameWithType.vb: Func(Of IAsyncResult, TResult)\n  commentId: T:System.Func{System.IAsyncResult,``0}\n- uid: System.Func`3\n  isExternal: false\n  name: Func<T1, T2, TResult>\n  fullName: System.Func<T1, T2, TResult>\n  fullname.vb: System.Func(Of T1, T2, TResult)\n  name.vb: Func(Of T1, T2, TResult)\n  spec.csharp:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`3\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, TResult>\n  nameWithType.vb: Func(Of T1, T2, TResult)\n  commentId: T:System.Func`3\n- uid: System.IAsyncResult\n  parent: System\n  isExternal: false\n  name: IAsyncResult\n  fullName: System.IAsyncResult\n  nameWithType: IAsyncResult\n  commentId: T:System.IAsyncResult\n- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`4\n  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg1}'\n  definition: TArg1\n  name: TArg1\n  fullName: TArg1\n  nameWithType: TArg1\n  commentId: '!:TArg1'\n- uid: System.Func`4\n  isExternal: false\n  name: Func<T1, T2, T3, TResult>\n  fullName: System.Func<T1, T2, T3, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, TResult)\n  name.vb: Func(Of T1, T2, T3, TResult)\n  spec.csharp:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`4\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, TResult)\n  commentId: T:System.Func`4\n- uid: TArg1\n  isExternal: false\n  name: TArg1\n  fullName: TArg1\n  nameWithType: TArg1\n- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`5\n  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg2}'\n  definition: TArg2\n  name: TArg2\n  fullName: TArg2\n  nameWithType: TArg2\n  commentId: '!:TArg2'\n- uid: System.Func`5\n  isExternal: false\n  name: Func<T1, T2, T3, T4, TResult>\n  fullName: System.Func<T1, T2, T3, T4, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, TResult)\n  spec.csharp:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`5\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, T4, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)\n  commentId: T:System.Func`5\n- uid: TArg2\n  isExternal: false\n  name: TArg2\n  fullName: TArg2\n  nameWithType: TArg2\n- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}\n  parent: System\n  definition: System.Func`6\n  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>\n  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>\n  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)\n  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - name: TArg3\n    fullName: TArg3\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TArg1\n    fullName: TArg1\n  - name: ', '\n    fullName: ', '\n  - name: TArg2\n    fullName: TArg2\n  - name: ', '\n    fullName: ', '\n  - name: TArg3\n    fullName: TArg3\n  - name: ', '\n    fullName: ', '\n  - uid: System.AsyncCallback\n    name: AsyncCallback\n    fullName: System.AsyncCallback\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.IAsyncResult\n    name: IAsyncResult\n    fullName: System.IAsyncResult\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>\n  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)\n  commentId: T:System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult}\n- uid: '{TArg3}'\n  definition: TArg3\n  name: TArg3\n  fullName: TArg3\n  nameWithType: TArg3\n  commentId: '!:TArg3'\n- uid: System.Func`6\n  isExternal: false\n  name: Func<T1, T2, T3, T4, T5, TResult>\n  fullName: System.Func<T1, T2, T3, T4, T5, TResult>\n  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)\n  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)\n  spec.csharp:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: T5\n    fullName: T5\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`6\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T1\n    fullName: T1\n  - name: ', '\n    fullName: ', '\n  - name: T2\n    fullName: T2\n  - name: ', '\n    fullName: ', '\n  - name: T3\n    fullName: T3\n  - name: ', '\n    fullName: ', '\n  - name: T4\n    fullName: T4\n  - name: ', '\n    fullName: ', '\n  - name: T5\n    fullName: T5\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<T1, T2, T3, T4, T5, TResult>\n  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)\n  commentId: T:System.Func`6\n- uid: TArg3\n  isExternal: false\n  name: TArg3\n  fullName: TArg3\n  nameWithType: TArg3\n- uid: System.Func{{TResult}}\n  parent: System\n  definition: System.Func`1\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func{``0}\n- uid: System.Func`1\n  isExternal: false\n  name: Func<TResult>\n  fullName: System.Func<TResult>\n  fullname.vb: System.Func(Of TResult)\n  name.vb: Func(Of TResult)\n  spec.csharp:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: <\n    fullName: <\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`1\n    name: Func\n    fullName: System.Func\n  - name: '(Of '\n    fullName: '(Of '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<TResult>\n  nameWithType.vb: Func(Of TResult)\n  commentId: T:System.Func`1\n- uid: System.Func{System.Object,{TResult}}\n  parent: System\n  definition: System.Func`2\n  name: Func<Object, TResult>\n  fullName: System.Func<System.Object, TResult>\n  fullname.vb: System.Func(Of System.Object, TResult)\n  name.vb: Func(Of Object, TResult)\n  spec.csharp:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Func`2\n    name: Func\n    fullName: System.Func\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - name: TResult\n    fullName: TResult\n  - name: )\n    fullName: )\n  nameWithType: Func<Object, TResult>\n  nameWithType.vb: Func(Of Object, TResult)\n  commentId: T:System.Func{System.Object,`0}\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ObjectDisposedException\n  isExternal: false\n  name: ObjectDisposedException\n  fullName: System.ObjectDisposedException\n  nameWithType: ObjectDisposedException\n  commentId: T:System.ObjectDisposedException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}