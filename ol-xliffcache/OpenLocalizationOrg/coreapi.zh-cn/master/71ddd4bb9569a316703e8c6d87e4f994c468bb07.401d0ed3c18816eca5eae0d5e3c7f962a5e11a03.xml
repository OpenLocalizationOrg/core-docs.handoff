{"nodes":[{"pos":[1254,1264],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[2554,2562],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[4087,4094],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"content":"\\n&lt;p&gt;The type of this ACE.&lt;/p&gt;\\n","pos":[4845,4877],"source":"\\n<p>The type of this ACE.</p>\\n"},{"pos":[5222,5232],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The audit information associated with this Access Control Entry (ACE).&lt;/p&gt;\\n","pos":[6030,6111],"source":"\\n<p>The audit information associated with this Access Control Entry (ACE).</p>\\n"},{"pos":[6465,6477],"content":"BinaryLength","needQuote":true,"nodes":[{"content":"BinaryLength","pos":[0,12]}]},{"pos":[8187,8203],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Flags that specify the inheritance properties of this ACE.&lt;/p&gt;\\n","pos":[9054,9123],"source":"\\n<p>Flags that specify the inheritance properties of this ACE.</p>\\n"},{"pos":[9480,9491],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this ACE is inherited; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10293,10388],"source":"\\n<p>\\n<strong>true</strong> if this ACE is inherited; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10755,10771],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"content":"\\n&lt;p&gt;Flags that specify the inheritance propagation properties of this ACE.&lt;/p&gt;\\n","pos":[11634,11715],"source":"\\n<p>Flags that specify the inheritance propagation properties of this ACE.</p>\\n"},{"pos":[12051,12057],"content":"Copy()","needQuote":true,"nodes":[{"content":"Copy()","pos":[0,6]}]},{"pos":[13361,13396],"content":"CreateFromBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"CreateFromBinaryForm(Byte[], Int32)","pos":[0,35]}]},{"content":"\\n&lt;p&gt;The offset at which to begin unmarshaling.&lt;/p&gt;\\n","pos":[14610,14663],"source":"\\n<p>The offset at which to begin unmarshaling.</p>\\n"},{"pos":[15519,15533],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[17709,17737],"content":"GetBinaryForm(Byte[], Int32)","needQuote":true,"nodes":[{"content":"GetBinaryForm(Byte[], Int32)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The offset at which to start marshaling.&lt;/p&gt;\\n","pos":[18965,19016],"source":"\\n<p>The offset at which to start marshaling.</p>\\n"},{"pos":[19930,19943],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[21811,21843],"content":"Equality(GenericAce, GenericAce)","needQuote":true,"nodes":[{"content":"Equality(GenericAce, GenericAce)","pos":[0,32]}]},{"pos":[24122,24156],"content":"Inequality(GenericAce, GenericAce)","needQuote":true,"nodes":[{"content":"Inequality(GenericAce, GenericAce)","pos":[0,34]}]},{"pos":[26036,26065],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[26265,26271],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26431,26441],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[26536,26544],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26613,26614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26641,26642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26712,26720],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[26789,26790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26817,26818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27015,27037],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[27185,27191],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27258,27259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27309,27315],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27376,27377]},{"pos":[27432,27438],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27498,27499],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27596,27602],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[27669,27670],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27720,27726],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[27787,27788]},{"pos":[27843,27849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27909,27910],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28155,28186],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[28352,28367],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28443,28444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28494,28500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28561,28562]},{"pos":[28617,28623],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28683,28684],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28790,28805],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[28881,28882],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28932,28938],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[28999,29000]},{"pos":[29055,29061],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29121,29122],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29348,29357],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[29450,29457],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29525,29526],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29553,29554],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29623,29630],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[29698,29699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29726,29727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29902,29919],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[30028,30043],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30119,30120],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30147,30148],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30225,30240],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[30316,30317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30344,30345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30490,30496],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[30675,30683],"content":"AceFlags","needQuote":true,"nodes":[{"content":"AceFlags","pos":[0,8]}]},{"pos":[30927,30934],"content":"AceType","needQuote":true,"nodes":[{"content":"AceType","pos":[0,7]}]},{"pos":[31178,31188],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[31390,31395],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[31593,31609],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[31831,31838],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[32042,32058],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[32329,32339],"content":"GenericAce","needQuote":true,"nodes":[{"content":"GenericAce","pos":[0,10]}]},{"pos":[32505,32511],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[32631,32635],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[32694,32696]},{"pos":[32759,32763],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[32821,32823],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[32984,32998],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[33117,33123],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33190,33191],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33241,33247],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33307,33308],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33391,33397],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[33464,33465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33515,33521],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33581,33582],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33772,33785],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[33886,33897],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33969,33970],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33997,33998],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34071,34082],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[34154,34155],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34182,34183],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34348,34375],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  id: GenericAce\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.GenericAce.AceFlags\n  - System.Security.AccessControl.GenericAce.AceType\n  - System.Security.AccessControl.GenericAce.AuditFlags\n  - System.Security.AccessControl.GenericAce.BinaryLength\n  - System.Security.AccessControl.GenericAce.Copy\n  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.Equals(System.Object)\n  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  - System.Security.AccessControl.GenericAce.GetHashCode\n  - System.Security.AccessControl.GenericAce.InheritanceFlags\n  - System.Security.AccessControl.GenericAce.IsInherited\n  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  - System.Security.AccessControl.GenericAce.PropagationFlags\n  langs:\n  - csharp\n  - vb\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GenericAce\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 262\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents an Access Control Entry (ACE), and is the base class for all other ACE classes.</p>\\n\"\n  syntax:\n    content: public abstract class GenericAce\n    content.vb: Public MustInherit Class GenericAce\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: GenericAce\n- uid: System.Security.AccessControl.GenericAce.AceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AceFlags\n  id: AceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: AceFlags\n  fullName: System.Security.AccessControl.GenericAce.AceFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AceFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 265\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets or sets the <xref href=\\\"System.Security.AccessControl.AceFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public AceFlags AceFlags { get; set; }\n    content.vb: Public Property AceFlags As AceFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.AceFlags\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.AceFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> associated with this <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: GenericAce.AceFlags\n- uid: System.Security.AccessControl.GenericAce.AceType\n  commentId: P:System.Security.AccessControl.GenericAce.AceType\n  id: AceType\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: AceType\n  fullName: System.Security.AccessControl.GenericAce.AceType\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AceType\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 266\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the type of this Access Control Entry (ACE).</p>\\n\"\n  syntax:\n    content: public AceType AceType { get; }\n    content.vb: Public ReadOnly Property AceType As AceType\n    parameters: []\n    return:\n      type: System.Security.AccessControl.AceType\n      description: \"\\n<p>The type of this ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAce.AceType\n- uid: System.Security.AccessControl.GenericAce.AuditFlags\n  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags\n  id: AuditFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: AuditFlags\n  fullName: System.Security.AccessControl.GenericAce.AuditFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AuditFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 267\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the audit information associated with this Access Control Entry (ACE).</p>\\n\"\n  syntax:\n    content: public AuditFlags AuditFlags { get; }\n    content.vb: Public ReadOnly Property AuditFlags As AuditFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>The audit information associated with this Access Control Entry (ACE).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAce.AuditFlags\n- uid: System.Security.AccessControl.GenericAce.BinaryLength\n  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength\n  id: BinaryLength\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: BinaryLength\n  fullName: System.Security.AccessControl.GenericAce.BinaryLength\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: BinaryLength\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 268\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\\\"System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  syntax:\n    content: public abstract int BinaryLength { get; }\n    content.vb: Public MustOverride ReadOnly Property BinaryLength As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The length, in bytes, of the binary representation of the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: GenericAce.BinaryLength\n- uid: System.Security.AccessControl.GenericAce.InheritanceFlags\n  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags\n  id: InheritanceFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InheritanceFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 269\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets flags that specify the inheritance properties of this Access Control Entry (ACE).</p>\\n\"\n  syntax:\n    content: public InheritanceFlags InheritanceFlags { get; }\n    content.vb: Public ReadOnly Property InheritanceFlags As InheritanceFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.InheritanceFlags\n      description: \"\\n<p>Flags that specify the inheritance properties of this ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAce.InheritanceFlags\n- uid: System.Security.AccessControl.GenericAce.IsInherited\n  commentId: P:System.Security.AccessControl.GenericAce.IsInherited\n  id: IsInherited\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: IsInherited\n  fullName: System.Security.AccessControl.GenericAce.IsInherited\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsInherited\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 270\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets a Boolean value that specifies whether this Access Control Entry (ACE) is inherited or is set explicitly.</p>\\n\"\n  syntax:\n    content: public bool IsInherited { get; }\n    content.vb: Public ReadOnly Property IsInherited As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this ACE is inherited; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAce.IsInherited\n- uid: System.Security.AccessControl.GenericAce.PropagationFlags\n  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags\n  id: PropagationFlags\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.GenericAce.PropagationFlags\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PropagationFlags\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 271\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets flags that specify the inheritance propagation properties of this Access Control Entry (ACE).</p>\\n\"\n  syntax:\n    content: public PropagationFlags PropagationFlags { get; }\n    content.vb: Public ReadOnly Property PropagationFlags As PropagationFlags\n    parameters: []\n    return:\n      type: System.Security.AccessControl.PropagationFlags\n      description: \"\\n<p>Flags that specify the inheritance propagation properties of this ACE.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: GenericAce.PropagationFlags\n- uid: System.Security.AccessControl.GenericAce.Copy\n  commentId: M:System.Security.AccessControl.GenericAce.Copy\n  id: Copy\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: Copy()\n  fullName: System.Security.AccessControl.GenericAce.Copy()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Copy\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 272\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Creates a deep copy of this Access Control Entry (ACE).</p>\\n\"\n  syntax:\n    content: public GenericAce Copy()\n    content.vb: Public Function Copy As GenericAce\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that this method creates.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: GenericAce.Copy()\n- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)\n  id: CreateFromBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: CreateFromBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CreateFromBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 273\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Creates a <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object from the specified binary data.</p>\\n\"\n  syntax:\n    content: public static GenericAce CreateFromBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public Shared Function CreateFromBinaryForm(binaryForm As Byte(), offset As Integer) As GenericAce\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The binary data from which to create the new <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to begin unmarshaling.</p>\\n\"\n    return:\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object this method creates.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  fullName.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)\n  name.vb: CreateFromBinaryForm(Byte(), Int32)\n  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 274\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public override sealed bool Equals(object o)\n    content.vb: Public NotOverridable Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare to the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  nameWithType: GenericAce.Equals(Object)\n- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)\n  id: GetBinaryForm(System.Byte[],System.Int32)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: GetBinaryForm(Byte[], Int32)\n  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBinaryForm\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 275\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Marshals the contents of the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into the specified byte array beginning at the specified offset.</p>\\n\"\n  syntax:\n    content: public abstract void GetBinaryForm(byte[] binaryForm, int offset)\n    content.vb: Public MustOverride Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)\n    parameters:\n    - id: binaryForm\n      type: System.Byte[]\n      description: \"\\n<p>The byte array into which the contents of the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is marshaled.</p>\\n\"\n    - id: offset\n      type: System.Int32\n      description: \"\\n<p>The offset at which to start marshaling.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>offset</em> is negative or too high to allow the entire <xref href=\\\"System.Security.AccessControl.GenericAcl\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to be copied into <em>array</em>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)\n  name.vb: GetBinaryForm(Byte(), Int32)\n  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)\n  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)\n- uid: System.Security.AccessControl.GenericAce.GetHashCode\n  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode\n  id: GetHashCode\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.AccessControl.GenericAce.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 276\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Serves as a hash function for the <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. The  <xref href=\\\"System.Security.AccessControl.GenericAce.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method is suitable for use in hashing algorithms and data structures like a hash table.</p>\\n\"\n  syntax:\n    content: public override sealed int GetHashCode()\n    content.vb: Public NotOverridable Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  - sealed\n  modifiers.vb:\n  - Public\n  - Overrides\n  - NotOverridable\n  nameWithType: GenericAce.GetHashCode()\n- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  commentId: M:System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: Equality(GenericAce, GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.Equality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 277\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are considered equal.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(GenericAce left, GenericAce right)\n    content.vb: Public Shared Operator =(left As GenericAce, right As GenericAce) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The first <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare.</p>\\n\"\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The second <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GenericAce.Equality(GenericAce, GenericAce)\n- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  commentId: M:System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)\n  parent: System.Security.AccessControl.GenericAce\n  langs:\n  - csharp\n  - vb\n  name: Inequality(GenericAce, GenericAce)\n  fullName: System.Security.AccessControl.GenericAce.Inequality(System.Security.AccessControl.GenericAce, System.Security.AccessControl.GenericAce)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs\n    startLine: 278\n  assemblies:\n  - System.Security.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are considered unequal.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(GenericAce left, GenericAce right)\n    content.vb: Public Shared Operator <>(left As GenericAce, right As GenericAce) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The first <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to compare.</p>\\n\"\n    - id: right\n      type: System.Security.AccessControl.GenericAce\n      description: \"\\n<p>The second <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to compare.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the two <xref href=\\\"System.Security.AccessControl.GenericAce\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects are unequal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: GenericAce.Inequality(GenericAce, GenericAce)\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.AccessControl.AceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceFlags\n  fullName: System.Security.AccessControl.AceFlags\n  commentId: T:System.Security.AccessControl.AceFlags\n  nameWithType: AceFlags\n- uid: System.Security.AccessControl.AceType\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AceType\n  fullName: System.Security.AccessControl.AceType\n  commentId: T:System.Security.AccessControl.AceType\n  nameWithType: AceType\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Security.AccessControl.InheritanceFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.InheritanceFlags\n  commentId: T:System.Security.AccessControl.InheritanceFlags\n  nameWithType: InheritanceFlags\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Security.AccessControl.PropagationFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.PropagationFlags\n  commentId: T:System.Security.AccessControl.PropagationFlags\n  nameWithType: PropagationFlags\n- uid: System.Security.AccessControl.GenericAce\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: GenericAce\n  fullName: System.Security.AccessControl.GenericAce\n  commentId: T:System.Security.AccessControl.GenericAce\n  nameWithType: GenericAce\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}