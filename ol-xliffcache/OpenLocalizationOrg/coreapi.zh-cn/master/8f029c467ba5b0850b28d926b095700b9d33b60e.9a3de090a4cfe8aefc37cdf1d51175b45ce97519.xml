{"nodes":[{"pos":[1280,1293],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"pos":[3037,3047],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;ParameterAttributes&lt;/strong&gt; object representing the attributes for this parameter.&lt;/p&gt;\\n","pos":[3773,3877],"source":"\\n<p>A <strong>ParameterAttributes</strong> object representing the attributes for this parameter.</p>\\n"},{"pos":[4361,4377],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"content":"\\n&lt;p&gt;A collection that contains this parameter's custom attributes.&lt;/p&gt;\\n","pos":[5225,5298],"source":"\\n<p>A collection that contains this parameter's custom attributes.</p>\\n"},{"pos":[5662,5674],"content":"DefaultValue","needQuote":true,"nodes":[{"content":"DefaultValue","pos":[0,12]}]},{"pos":[6935,6950],"content":"HasDefaultValue","needQuote":true,"nodes":[{"content":"HasDefaultValue","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if this parameter has a default value; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7678,7786],"source":"\\n<p>\\n<strong>true</strong> if this parameter has a default value; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8125,8129],"content":"IsIn","needQuote":true,"nodes":[{"content":"IsIn","pos":[0,4]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parameter is an input parameter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[8782,8891],"source":"\\n<p>\\n<strong>true</strong> if the parameter is an input parameter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[9209,9219],"content":"IsOptional","needQuote":true,"nodes":[{"content":"IsOptional","pos":[0,10]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parameter is optional; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9896,9995],"source":"\\n<p>\\n<strong>true</strong> if the parameter is optional; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[10304,10309],"content":"IsOut","needQuote":true,"nodes":[{"content":"IsOut","pos":[0,5]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parameter is an output parameter; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[10967,11077],"source":"\\n<p>\\n<strong>true</strong> if the parameter is an output parameter; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[11390,11398],"content":"IsRetval","needQuote":true,"nodes":[{"content":"IsRetval","pos":[0,8]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the parameter is a &lt;strong&gt;Retval&lt;/strong&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12084,12200],"source":"\\n<p>\\n<strong>true</strong> if the parameter is a <strong>Retval</strong>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12510,12516],"content":"Member","needQuote":true,"nodes":[{"content":"Member","pos":[0,6]}]},{"pos":[13727,13731],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"content":"\\n&lt;p&gt;The simple name of this parameter.&lt;/p&gt;\\n","pos":[14375,14420],"source":"\\n<p>The simple name of this parameter.</p>\\n"},{"pos":[14775,14788],"content":"ParameterType","needQuote":true,"nodes":[{"content":"ParameterType","pos":[0,13]}]},{"content":"\\n&lt;p&gt;The &lt;strong&gt;Type&lt;/strong&gt; object that represents the &lt;strong&gt;Type&lt;/strong&gt; of this parameter.&lt;/p&gt;\\n","pos":[15480,15584],"source":"\\n<p>The <strong>Type</strong> object that represents the <strong>Type</strong> of this parameter.</p>\\n"},{"pos":[15933,15941],"content":"Position","needQuote":true,"nodes":[{"content":"Position","pos":[0,8]}]},{"content":"\\n&lt;p&gt;An integer representing the position this parameter occupies in the parameter list.&lt;/p&gt;\\n","pos":[16642,16736],"source":"\\n<p>An integer representing the position this parameter occupies in the parameter list.</p>\\n"},{"pos":[17246,17274],"content":"GetOptionalCustomModifiers()","needQuote":true,"nodes":[{"content":"GetOptionalCustomModifiers()","pos":[0,28]}]},{"pos":[18791,18819],"content":"GetRequiredCustomModifiers()","needQuote":true,"nodes":[{"content":"GetRequiredCustomModifiers()","pos":[0,28]}]},{"pos":[20303,20318],"content":"RawDefaultValue","needQuote":true,"nodes":[{"content":"RawDefaultValue","pos":[0,15]}]},{"pos":[21797,21850],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[23547,23606],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[25407,25456],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[26800,26817],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[26981,26987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[27172,27196],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[27432,27442],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[27537,27545],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27614,27615],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27642,27643],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27713,27721],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[27790,27791],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27818,27819],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28002,28016],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[28135,28141],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28208,28209],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28259,28265],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28325,28326],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28409,28415],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[28482,28483],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[28533,28539],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[28599,28600],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[28814,28836],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[28984,28990],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29057,29058],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29108,29114],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29175,29176]},{"pos":[29231,29237],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29297,29298],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29395,29401],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[29468,29469],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29519,29525],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[29586,29587]},{"pos":[29642,29648],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29708,29709],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29954,29985],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[30151,30166],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30242,30243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30293,30299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30360,30361]},{"pos":[30416,30422],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30482,30483],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30589,30604],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[30680,30681],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30731,30737],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[30798,30799]},{"pos":[30854,30860],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30920,30921],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31151,31164],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[31265,31276],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31348,31349],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31376,31377],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31450,31461],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[31533,31534],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31561,31562],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31737,31746],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[31839,31846],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[31914,31915],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31942,31943],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32012,32019],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[32087,32088],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32115,32116],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32291,32308],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[32417,32432],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32508,32509],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32536,32537],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32614,32629],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[32705,32706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32733,32734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32879,32885],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[33051,33070],"content":"ParameterAttributes","needQuote":true,"nodes":[{"content":"ParameterAttributes","pos":[0,19]}]},{"pos":[33395,33427],"content":"IEnumerable<CustomAttributeData>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;CustomAttributeData&gt;","pos":[0,32],"source":"IEnumerable<CustomAttributeData>"}]},{"pos":[33736,33747],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[33832,33833],"content":"<","needQuote":true,"nodes":[]},{"pos":[33907,33926],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[34082,34093],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[34179,34182]},{"pos":[34263,34282],"content":"CustomAttributeData","needQuote":true,"nodes":[{"content":"CustomAttributeData","pos":[0,19]}]},{"pos":[34345,34346],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34636,34650],"content":"IEnumerable<T>","needQuote":true,"nodes":[{"content":"IEnumerable&lt;T&gt;","pos":[0,14],"source":"IEnumerable<T>"}]},{"pos":[34869,34880],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"pos":[34944,34945],"content":"<","needQuote":true,"nodes":[]},{"pos":[34972,34973],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35093,35104],"content":"IEnumerable","needQuote":true,"nodes":[{"content":"IEnumerable","pos":[0,11]}]},{"content":"(Of","pos":[35169,35172]},{"pos":[35206,35207],"content":"T","needQuote":true,"nodes":[{"content":"T","pos":[0,1]}]},{"pos":[35234,35235],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35438,35464],"content":"System.Collections.Generic","needQuote":true,"nodes":[{"content":"System.Collections.Generic","pos":[0,26]}]},{"pos":[35656,35663],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[35837,35847],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[36026,36032],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[36175,36179],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[36317,36322],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36427,36433],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[36553,36557],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[36595,36597]},{"pos":[36660,36664],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[36701,36703],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36936,36964],"content":"GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Boolean)","pos":[0,28]}]},{"pos":[37169,37188],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[37276,37277],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37328,37335],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37396,37397],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37523,37542],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[37630,37631],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37682,37689],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[37750,37751],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37963,37971],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[38099,38105],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[38166,38168]},{"pos":[38233,38239],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[38299,38301],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[38550,38584],"content":"GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"GetCustomAttributes(Type, Boolean)","pos":[0,34]}]},{"pos":[38814,38833],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[38921,38922],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[38970,38974],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[39033,39034]},{"pos":[39090,39097],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39158,39159],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[39297,39316],"content":"GetCustomAttributes","needQuote":true,"nodes":[{"content":"GetCustomAttributes","pos":[0,19]}]},{"pos":[39404,39405],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[39453,39457],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[39516,39517]},{"pos":[39573,39580],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[39641,39642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40009,40033],"content":"IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"IsDefined(Type, Boolean)","pos":[0,24]}]},{"pos":[40243,40252],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[40330,40331],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40379,40383],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[40442,40443]},{"pos":[40499,40506],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40567,40568],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40696,40705],"content":"IsDefined","needQuote":true,"nodes":[{"content":"IsDefined","pos":[0,9]}]},{"pos":[40783,40784],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40832,40836],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[40895,40896]},{"pos":[40952,40959],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[41020,41021],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Reflection.ParameterInfo\n  commentId: T:System.Reflection.ParameterInfo\n  id: ParameterInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.ParameterInfo.Attributes\n  - System.Reflection.ParameterInfo.CustomAttributes\n  - System.Reflection.ParameterInfo.DefaultValue\n  - System.Reflection.ParameterInfo.GetOptionalCustomModifiers\n  - System.Reflection.ParameterInfo.GetRequiredCustomModifiers\n  - System.Reflection.ParameterInfo.HasDefaultValue\n  - System.Reflection.ParameterInfo.IsIn\n  - System.Reflection.ParameterInfo.IsOptional\n  - System.Reflection.ParameterInfo.IsOut\n  - System.Reflection.ParameterInfo.IsRetval\n  - System.Reflection.ParameterInfo.Member\n  - System.Reflection.ParameterInfo.Name\n  - System.Reflection.ParameterInfo.ParameterType\n  - System.Reflection.ParameterInfo.Position\n  - System.Reflection.ParameterInfo.RawDefaultValue\n  - System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  langs:\n  - csharp\n  - vb\n  name: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParameterInfo\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 21\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of a parameter and provides access to parameter metadata.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_ParameterInfo))]\n\n      [ComVisible(true)]\n\n      public class ParameterInfo : _ParameterInfo, ICustomAttributeProvider, IObjectReference\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_ParameterInfo))>\n\n      <ComVisible(True)>\n\n      Public Class ParameterInfo\n          Implements _ParameterInfo, ICustomAttributeProvider, IObjectReference\n  inheritance:\n  - System.Object\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: ParameterInfo\n- uid: System.Reflection.ParameterInfo.Attributes\n  commentId: P:System.Reflection.ParameterInfo.Attributes\n  id: Attributes\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: Attributes\n  fullName: System.Reflection.ParameterInfo.Attributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Attributes\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 94\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the attributes for this parameter.</p>\\n\"\n  syntax:\n    content: public virtual ParameterAttributes Attributes { get; }\n    content.vb: Public Overridable ReadOnly Property Attributes As ParameterAttributes\n    parameters: []\n    return:\n      type: System.Reflection.ParameterAttributes\n      description: \"\\n<p>A <strong>ParameterAttributes</strong> object representing the attributes for this parameter.</p>\\n\"\n  seealso:\n  - type: System.Reflection.ParameterAttributes\n    commentId: T:System.Reflection.ParameterAttributes\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.Attributes\n- uid: System.Reflection.ParameterInfo.CustomAttributes\n  commentId: P:System.Reflection.ParameterInfo.CustomAttributes\n  id: CustomAttributes\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: CustomAttributes\n  fullName: System.Reflection.ParameterInfo.CustomAttributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CustomAttributes\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 145\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a collection that contains this parameter's custom attributes.</p>\\n\"\n  syntax:\n    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }\n    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)\n    parameters: []\n    return:\n      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n      description: \"\\n<p>A collection that contains this parameter's custom attributes.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.CustomAttributes\n- uid: System.Reflection.ParameterInfo.DefaultValue\n  commentId: P:System.Reflection.ParameterInfo.DefaultValue\n  id: DefaultValue\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: DefaultValue\n  fullName: System.Reflection.ParameterInfo.DefaultValue\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DefaultValue\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 90\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating the default value if the parameter has a default value.</p>\\n\"\n  syntax:\n    content: public virtual object DefaultValue { get; }\n    content.vb: Public Overridable ReadOnly Property DefaultValue As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The default value of the parameter, or <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the parameter has no default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.DefaultValue\n- uid: System.Reflection.ParameterInfo.HasDefaultValue\n  commentId: P:System.Reflection.ParameterInfo.HasDefaultValue\n  id: HasDefaultValue\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: HasDefaultValue\n  fullName: System.Reflection.ParameterInfo.HasDefaultValue\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: HasDefaultValue\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 88\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value that indicates whether this parameter has a default value.</p>\\n\"\n  syntax:\n    content: public virtual bool HasDefaultValue { get; }\n    content.vb: Public Overridable ReadOnly Property HasDefaultValue As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if this parameter has a default value; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.HasDefaultValue\n- uid: System.Reflection.ParameterInfo.IsIn\n  commentId: P:System.Reflection.ParameterInfo.IsIn\n  id: IsIn\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: IsIn\n  fullName: System.Reflection.ParameterInfo.IsIn\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsIn\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 103\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this is an input parameter.</p>\\n\"\n  syntax:\n    content: public bool IsIn { get; }\n    content.vb: Public ReadOnly Property IsIn As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parameter is an input parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParameterInfo.IsIn\n- uid: System.Reflection.ParameterInfo.IsOptional\n  commentId: P:System.Reflection.ParameterInfo.IsOptional\n  id: IsOptional\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: IsOptional\n  fullName: System.Reflection.ParameterInfo.IsOptional\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsOptional\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 109\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this parameter is optional.</p>\\n\"\n  syntax:\n    content: public bool IsOptional { get; }\n    content.vb: Public ReadOnly Property IsOptional As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parameter is optional; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParameterInfo.IsOptional\n- uid: System.Reflection.ParameterInfo.IsOut\n  commentId: P:System.Reflection.ParameterInfo.IsOut\n  id: IsOut\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: IsOut\n  fullName: System.Reflection.ParameterInfo.IsOut\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsOut\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 104\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this is an output parameter.</p>\\n\"\n  syntax:\n    content: public bool IsOut { get; }\n    content.vb: Public ReadOnly Property IsOut As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parameter is an output parameter; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParameterInfo.IsOut\n- uid: System.Reflection.ParameterInfo.IsRetval\n  commentId: P:System.Reflection.ParameterInfo.IsRetval\n  id: IsRetval\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: IsRetval\n  fullName: System.Reflection.ParameterInfo.IsRetval\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IsRetval\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 108\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating whether this is a <strong>Retval</strong> parameter.</p>\\n\"\n  syntax:\n    content: public bool IsRetval { get; }\n    content.vb: Public ReadOnly Property IsRetval As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the parameter is a <strong>Retval</strong>; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: ParameterInfo.IsRetval\n- uid: System.Reflection.ParameterInfo.Member\n  commentId: P:System.Reflection.ParameterInfo.Member\n  id: Member\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: Member\n  fullName: System.Reflection.ParameterInfo.Member\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Member\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 96\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating the member in which the parameter is implemented.</p>\\n\"\n  syntax:\n    content: public virtual MemberInfo Member { get; }\n    content.vb: Public Overridable ReadOnly Property Member As MemberInfo\n    parameters: []\n    return:\n      type: System.Reflection.MemberInfo\n      description: \"\\n<p>The member which implanted the parameter represented by this <xref href=\\\"System.Reflection.ParameterInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.Member\n- uid: System.Reflection.ParameterInfo.Name\n  commentId: P:System.Reflection.ParameterInfo.Name\n  id: Name\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: Name\n  fullName: System.Reflection.ParameterInfo.Name\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Name\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 80\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the name of the parameter.</p>\\n\"\n  syntax:\n    content: public virtual string Name { get; }\n    content.vb: Public Overridable ReadOnly Property Name As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The simple name of this parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.Name\n- uid: System.Reflection.ParameterInfo.ParameterType\n  commentId: P:System.Reflection.ParameterInfo.ParameterType\n  id: ParameterType\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: ParameterType\n  fullName: System.Reflection.ParameterInfo.ParameterType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParameterType\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the <strong>Type</strong> of this parameter.</p>\\n\"\n  syntax:\n    content: public virtual Type ParameterType { get; }\n    content.vb: Public Overridable ReadOnly Property ParameterType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The <strong>Type</strong> object that represents the <strong>Type</strong> of this parameter.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.ParameterType\n- uid: System.Reflection.ParameterInfo.Position\n  commentId: P:System.Reflection.ParameterInfo.Position\n  id: Position\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: Position\n  fullName: System.Reflection.ParameterInfo.Position\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Position\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 93\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the zero-based position of the parameter in the formal parameter list.</p>\\n\"\n  syntax:\n    content: public virtual int Position { get; }\n    content.vb: Public Overridable ReadOnly Property Position As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>An integer representing the position this parameter occupies in the parameter list.</p>\\n\"\n  seealso:\n  - type: System.Reflection.ParameterInfo.Name\n    commentId: P:System.Reflection.ParameterInfo.Name\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.Position\n- uid: System.Reflection.ParameterInfo.GetOptionalCustomModifiers\n  commentId: M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers\n  id: GetOptionalCustomModifiers\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: GetOptionalCustomModifiers()\n  fullName: System.Reflection.ParameterInfo.GetOptionalCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetOptionalCustomModifiers\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 132\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the optional custom modifiers of the parameter.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetOptionalCustomModifiers()\n    content.vb: Public Overridable Function GetOptionalCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the optional custom modifiers of the current parameter, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ParameterInfo.GetOptionalCustomModifiers()\n- uid: System.Reflection.ParameterInfo.GetRequiredCustomModifiers\n  commentId: M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers\n  id: GetRequiredCustomModifiers\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: GetRequiredCustomModifiers()\n  fullName: System.Reflection.ParameterInfo.GetRequiredCustomModifiers()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetRequiredCustomModifiers\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 127\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the required custom modifiers of the parameter.</p>\\n\"\n  syntax:\n    content: public virtual Type[] GetRequiredCustomModifiers()\n    content.vb: Public Overridable Function GetRequiredCustomModifiers As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that identify the required custom modifiers of the current parameter, such as <xref href=\\\"System.Runtime.CompilerServices.IsConst\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or <xref href=\\\"System.Runtime.CompilerServices.IsImplicitlyDereferenced\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: ParameterInfo.GetRequiredCustomModifiers()\n- uid: System.Reflection.ParameterInfo.RawDefaultValue\n  commentId: P:System.Reflection.ParameterInfo.RawDefaultValue\n  id: RawDefaultValue\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: RawDefaultValue\n  fullName: System.Reflection.ParameterInfo.RawDefaultValue\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: RawDefaultValue\n    path: src/mscorlib/src/System/Reflection/ParameterInfo.cs\n    startLine: 91\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a value indicating the default value if the parameter has a default value.</p>\\n\"\n  syntax:\n    content: public virtual object RawDefaultValue { get; }\n    content.vb: Public Overridable ReadOnly Property RawDefaultValue As Object\n    parameters: []\n    return:\n      type: System.Object\n      description: \"\\n<p>The default value of the parameter, or <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> if the parameter has no default value.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: ParameterInfo.RawDefaultValue\n- uid: System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  commentId: M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  isEii: true\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.ParameterInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 348\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType: ParameterInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: ParameterInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n- uid: System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  commentId: M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.ParameterInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 349\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Object[]\n  implements:\n  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType: ParameterInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: ParameterInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n- uid: System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  commentId: M:System.Reflection.ParameterInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  isEii: true\n  parent: System.Reflection.ParameterInfo\n  langs:\n  - csharp\n  - vb\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.ParameterInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/System.Reflection/ref/System.Reflection.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: System.Reflection.ICustomAttributeProvider.IsDefined\n    path: src/System.Reflection/ref/System.Reflection.cs\n    startLine: 350\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  syntax:\n    content: bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit)\n    content.vb: Function System.Reflection.ICustomAttributeProvider.IsDefined(attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined\n    parameters:\n    - id: attributeType\n      type: System.Type\n    - id: inherit\n      type: System.Boolean\n    return:\n      type: System.Boolean\n  implements:\n  - System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType: ParameterInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: ParameterInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.ParameterAttributes\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterAttributes\n  fullName: System.Reflection.ParameterAttributes\n  nameWithType: ParameterAttributes\n  commentId: T:System.Reflection.ParameterAttributes\n- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n  parent: System.Collections.Generic\n  definition: System.Collections.Generic.IEnumerable`1\n  name: IEnumerable<CustomAttributeData>\n  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)\n  name.vb: IEnumerable(Of CustomAttributeData)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: <\n    fullName: <\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n    isExternal: true\n  - name: '(Of '\n    fullName: '(Of '\n  - uid: System.Reflection.CustomAttributeData\n    name: CustomAttributeData\n    fullName: System.Reflection.CustomAttributeData\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<CustomAttributeData>\n  nameWithType.vb: IEnumerable(Of CustomAttributeData)\n  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}\n- uid: System.Collections.Generic.IEnumerable`1\n  isExternal: false\n  name: IEnumerable<T>\n  fullName: System.Collections.Generic.IEnumerable<T>\n  fullname.vb: System.Collections.Generic.IEnumerable(Of T)\n  name.vb: IEnumerable(Of T)\n  spec.csharp:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: <\n    fullName: <\n  - name: T\n    fullName: T\n  - name: '>'\n    fullName: '>'\n  spec.vb:\n  - uid: System.Collections.Generic.IEnumerable`1\n    name: IEnumerable\n    fullName: System.Collections.Generic.IEnumerable\n  - name: '(Of '\n    fullName: '(Of '\n  - name: T\n    fullName: T\n  - name: )\n    fullName: )\n  nameWithType: IEnumerable<T>\n  nameWithType.vb: IEnumerable(Of T)\n  commentId: T:System.Collections.Generic.IEnumerable`1\n- uid: System.Collections.Generic\n  isExternal: false\n  name: System.Collections.Generic\n  fullName: System.Collections.Generic\n  nameWithType: System.Collections.Generic\n  commentId: N:System.Collections.Generic\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n    name: GetCustomAttributes\n    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.ICustomAttributeProvider\n  isExternal: true\n  name: IsDefined(Type, Boolean)\n  fullName: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  spec.csharp:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n    name: IsDefined\n    fullName: System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)\n"}