{"nodes":[{"pos":[286,295],"content":"IWebProxy","needQuote":true,"nodes":[{"content":"IWebProxy","pos":[0,9]}]},{"pos":[1233,1244],"content":"Credentials","needQuote":true,"nodes":[{"content":"Credentials","pos":[0,11]}]},{"pos":[2400,2413],"content":"GetProxy(Uri)","needQuote":true,"nodes":[{"content":"GetProxy(Uri)","pos":[0,13]}]},{"pos":[3655,3670],"content":"IsBypassed(Uri)","needQuote":true,"nodes":[{"content":"IsBypassed(Uri)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the proxy server should not be used for &lt;em&gt;host&lt;/em&gt;; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4526,4653],"source":"\\n<p>\\n<strong>true</strong> if the proxy server should not be used for <em>host</em>; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4755,4765],"content":"System.Net","needQuote":true,"nodes":[{"content":"System.Net","pos":[0,10]}]},{"pos":[4922,4934],"content":"ICredentials","needQuote":true,"nodes":[{"content":"ICredentials","pos":[0,12]}]},{"pos":[5102,5105],"content":"Uri","needQuote":true,"nodes":[{"content":"Uri","pos":[0,3]}]},{"pos":[5217,5223],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[5355,5362],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Net.IWebProxy\n  commentId: T:System.Net.IWebProxy\n  id: IWebProxy\n  parent: System.Net\n  children:\n  - System.Net.IWebProxy.Credentials\n  - System.Net.IWebProxy.GetProxy(System.Uri)\n  - System.Net.IWebProxy.IsBypassed(System.Uri)\n  langs:\n  - csharp\n  - vb\n  name: IWebProxy\n  fullName: System.Net.IWebProxy\n  type: Interface\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IWebProxy\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 223\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Provides the base interface for implementation of proxy access for the <xref href=\\\"System.Net.WebRequest\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public interface IWebProxy\n    content.vb: Public Interface IWebProxy\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IWebProxy\n- uid: System.Net.IWebProxy.Credentials\n  commentId: P:System.Net.IWebProxy.Credentials\n  id: Credentials\n  parent: System.Net.IWebProxy\n  langs:\n  - csharp\n  - vb\n  name: Credentials\n  fullName: System.Net.IWebProxy.Credentials\n  type: Property\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Credentials\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 225\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>The credentials to submit to the proxy server for authentication.</p>\\n\"\n  syntax:\n    content: ICredentials Credentials { get; set; }\n    content.vb: Property Credentials As ICredentials\n    parameters: []\n    return:\n      type: System.Net.ICredentials\n      description: \"\\n<p>An <xref href=\\\"System.Net.ICredentials\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains the credentials that are needed to authenticate a request to the proxy server.</p>\\n\"\n  modifiers.csharp:\n  - get\n  - set\n  nameWithType: IWebProxy.Credentials\n- uid: System.Net.IWebProxy.GetProxy(System.Uri)\n  commentId: M:System.Net.IWebProxy.GetProxy(System.Uri)\n  id: GetProxy(System.Uri)\n  parent: System.Net.IWebProxy\n  langs:\n  - csharp\n  - vb\n  name: GetProxy(Uri)\n  fullName: System.Net.IWebProxy.GetProxy(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetProxy\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 226\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Returns the URI of a proxy.</p>\\n\"\n  syntax:\n    content: Uri GetProxy(Uri destination)\n    content.vb: Function GetProxy(destination As Uri) As Uri\n    parameters:\n    - id: destination\n      type: System.Uri\n      description: \"\\n<p>A <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that specifies the requested Internet resource. </p>\\n\"\n    return:\n      type: System.Uri\n      description: \"\\n<p>A <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance that contains the URI of the proxy used to contact <em>destination</em>.</p>\\n\"\n  nameWithType: IWebProxy.GetProxy(Uri)\n- uid: System.Net.IWebProxy.IsBypassed(System.Uri)\n  commentId: M:System.Net.IWebProxy.IsBypassed(System.Uri)\n  id: IsBypassed(System.Uri)\n  parent: System.Net.IWebProxy\n  langs:\n  - csharp\n  - vb\n  name: IsBypassed(Uri)\n  fullName: System.Net.IWebProxy.IsBypassed(System.Uri)\n  type: Method\n  source:\n    remote:\n      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsBypassed\n    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs\n    startLine: 227\n  assemblies:\n  - System.Net.Primitives\n  namespace: System.Net\n  summary: \"\\n<p>Indicates that the proxy should not be used for the specified host.</p>\\n\"\n  syntax:\n    content: bool IsBypassed(Uri host)\n    content.vb: Function IsBypassed(host As Uri) As Boolean\n    parameters:\n    - id: host\n      type: System.Uri\n      description: \"\\n<p>The <xref href=\\\"System.Uri\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the host to check for proxy use. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the proxy server should not be used for <em>host</em>; otherwise, <strong>false</strong>.</p>\\n\"\n  nameWithType: IWebProxy.IsBypassed(Uri)\nreferences:\n- uid: System.Net\n  isExternal: false\n  name: System.Net\n  fullName: System.Net\n  commentId: N:System.Net\n  nameWithType: System.Net\n- uid: System.Net.ICredentials\n  parent: System.Net\n  isExternal: false\n  name: ICredentials\n  fullName: System.Net.ICredentials\n  commentId: T:System.Net.ICredentials\n  nameWithType: ICredentials\n- uid: System.Uri\n  parent: System\n  isExternal: false\n  name: Uri\n  fullName: System.Uri\n  commentId: T:System.Uri\n  nameWithType: Uri\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n"}