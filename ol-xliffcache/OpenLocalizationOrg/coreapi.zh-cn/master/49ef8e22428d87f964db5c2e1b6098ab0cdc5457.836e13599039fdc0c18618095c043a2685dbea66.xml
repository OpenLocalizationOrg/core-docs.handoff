{"nodes":[{"pos":[915,932],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[2502,2507],"content":"Value","needQuote":true,"nodes":[{"content":"Value","pos":[0,5]}]},{"pos":[3979,3993],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[5888,5901],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[7593,7616],"content":"IsValidTargetType(Type)","needQuote":true,"nodes":[{"content":"IsValidTargetType(Type)","pos":[0,23]}]},{"pos":[10009,10055],"content":"Equality(IdentityReference, IdentityReference)","needQuote":true,"nodes":[{"content":"Equality(IdentityReference, IdentityReference)","pos":[0,46]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[11979,12095],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12772,12820],"content":"Inequality(IdentityReference, IdentityReference)","needQuote":true,"nodes":[{"content":"Inequality(IdentityReference, IdentityReference)","pos":[0,48]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;left&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt; are not equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[14794,14914],"source":"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[15311,15321],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The identity in string format.&lt;/p&gt;\\n","pos":[16205,16246],"source":"\\n<p>The identity in string format.</p>\\n"},{"pos":[16719,16734],"content":"Translate(Type)","needQuote":true,"nodes":[{"content":"Translate(Type)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The converted identity.&lt;/p&gt;\\n","pos":[18048,18082],"source":"\\n<p>The converted identity.</p>\\n"},{"pos":[18295,18320],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[18508,18514],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18701,18723],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[18871,18877],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[18944,18945],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[18995,19001],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19062,19063]},{"pos":[19118,19124],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19184,19185],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19282,19288],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[19355,19356],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[19406,19412],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[19473,19474]},{"pos":[19529,19535],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[19595,19596],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19841,19872],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[20038,20053],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20129,20130],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20180,20186],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20247,20248]},{"pos":[20303,20309],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20369,20370],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[20476,20491],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[20567,20568],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[20618,20624],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[20685,20686]},{"pos":[20741,20747],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20807,20808],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21034,21043],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[21136,21143],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21211,21212],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21239,21240],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21309,21316],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[21384,21385],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21412,21413],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21588,21605],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[21714,21729],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[21805,21806],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21833,21834],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21911,21926],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[22002,22003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22030,22031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22176,22182],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[22313,22319],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[22492,22506],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[22625,22631],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22698,22699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22749,22755],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22815,22816],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22899,22905],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22972,22973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23023,23029],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23089,23090],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23263,23270],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[23436,23449],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[23550,23561],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23633,23634],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23661,23662],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23735,23746],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[23818,23819],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23846,23847],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24007,24012],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[24152,24156],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[24344,24361],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[24592,24602],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[24697,24705],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24774,24775],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24802,24803],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24873,24881],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[24950,24951],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24978,24979],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]}],"content":"items:\n- uid: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  id: IdentityReference\n  parent: System.Security.Principal\n  children:\n  - System.Security.Principal.IdentityReference.Equals(System.Object)\n  - System.Security.Principal.IdentityReference.GetHashCode\n  - System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  - System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  - System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  - System.Security.Principal.IdentityReference.ToString\n  - System.Security.Principal.IdentityReference.Translate(System.Type)\n  - System.Security.Principal.IdentityReference.Value\n  langs:\n  - csharp\n  - vb\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  type: Class\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IdentityReference\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 29\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Represents an identity and is the base class for the <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> and <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> classes. This class does not provide a public constructor, and therefore cannot be inherited.</p>\\n\"\n  syntax:\n    content: public abstract class IdentityReference\n    content.vb: Public MustInherit Class IdentityReference\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: IdentityReference\n- uid: System.Security.Principal.IdentityReference.Value\n  commentId: P:System.Security.Principal.IdentityReference.Value\n  id: Value\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: Value\n  fullName: System.Security.Principal.IdentityReference.Value\n  type: Property\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Value\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 32\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Gets the string value of the identity represented by the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract string Value { get; }\n    content.vb: Public MustOverride ReadOnly Property Value As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string value of the identity represented by the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: IdentityReference.Value\n- uid: System.Security.Principal.IdentityReference.Equals(System.Object)\n  commentId: M:System.Security.Principal.IdentityReference.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Security.Principal.IdentityReference.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Equals\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 33\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the specified object equals this instance of the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public abstract override bool Equals(object o)\n    content.vb: Public MustOverride Overrides Function Equals(o As Object) As Boolean\n    parameters:\n    - id: o\n      type: System.Object\n      description: \"\\n<p>An object to compare with this <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance, or a null reference.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>o</em> is an object with the same underlying type and value as this <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - abstract\n  - override\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - Overrides\n  nameWithType: IdentityReference.Equals(Object)\n- uid: System.Security.Principal.IdentityReference.GetHashCode\n  commentId: M:System.Security.Principal.IdentityReference.GetHashCode\n  id: GetHashCode\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Security.Principal.IdentityReference.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetHashCode\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 34\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Serves as a hash function for <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. <xref href=\\\"System.Security.Principal.IdentityReference.GetHashCode\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is suitable for use in hashing algorithms and data structures like a hash table.</p>\\n\"\n  syntax:\n    content: public abstract override int GetHashCode()\n    content.vb: Public MustOverride Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>The hash code for this <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  modifiers.csharp:\n  - public\n  - abstract\n  - override\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - Overrides\n  nameWithType: IdentityReference.GetHashCode()\n- uid: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  commentId: M:System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  id: IsValidTargetType(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: IsValidTargetType(Type)\n  fullName: System.Security.Principal.IdentityReference.IsValidTargetType(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsValidTargetType\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 35\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns a value that indicates whether the specified type is a valid translation type for the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public abstract bool IsValidTargetType(Type targetType)\n    content.vb: Public MustOverride Function IsValidTargetType(targetType As Type) As Boolean\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The type being queried for validity to serve as a conversion from <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. The following target types are valid:</p>\\n<p>\\n<xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n<p>\\n<xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>\\n</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>targetType</em> is a valid translation type for the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: IdentityReference.IsValidTargetType(Type)\n- uid: System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  id: op_Equality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: Equality(IdentityReference, IdentityReference)\n  fullName: System.Security.Principal.IdentityReference.Equality(System.Security.Principal.IdentityReference, System.Security.Principal.IdentityReference)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Equality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 36\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are equal. They are considered equal if they have the same canonical name representation as the one returned by the <xref href=\\\"System.Security.Principal.IdentityReference.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if they are both <strong>null</strong>.</p>\\n\"\n  syntax:\n    content: public static bool operator ==(IdentityReference left, IdentityReference right)\n    content.vb: Public Shared Operator =(left As IdentityReference, right As IdentityReference) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The left <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The right <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand to use for the equality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IdentityReference.Equality(IdentityReference, IdentityReference)\n- uid: System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  commentId: M:System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  id: op_Inequality(System.Security.Principal.IdentityReference,System.Security.Principal.IdentityReference)\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: Inequality(IdentityReference, IdentityReference)\n  fullName: System.Security.Principal.IdentityReference.Inequality(System.Security.Principal.IdentityReference, System.Security.Principal.IdentityReference)\n  type: Operator\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: op_Inequality\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 37\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Compares two <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects to determine whether they are not equal. They are considered not equal if they have different canonical name representations than the one returned by the <xref href=\\\"System.Security.Principal.IdentityReference.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property or if one of the objects is <strong>null</strong> and the other is not.</p>\\n\"\n  syntax:\n    content: public static bool operator !=(IdentityReference left, IdentityReference right)\n    content.vb: Public Shared Operator <>(left As IdentityReference, right As IdentityReference) As Boolean\n    parameters:\n    - id: left\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The left <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    - id: right\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The right <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> operand to use for the inequality comparison. This parameter can be <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: IdentityReference.Inequality(IdentityReference, IdentityReference)\n- uid: System.Security.Principal.IdentityReference.ToString\n  commentId: M:System.Security.Principal.IdentityReference.ToString\n  id: ToString\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Security.Principal.IdentityReference.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ToString\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 38\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Returns the string representation of the identity represented by the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public abstract override string ToString()\n    content.vb: Public MustOverride Overrides Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>The identity in string format.</p>\\n\"\n  overridden: System.Object.ToString\n  modifiers.csharp:\n  - public\n  - abstract\n  - override\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - Overrides\n  nameWithType: IdentityReference.ToString()\n- uid: System.Security.Principal.IdentityReference.Translate(System.Type)\n  commentId: M:System.Security.Principal.IdentityReference.Translate(System.Type)\n  id: Translate(System.Type)\n  parent: System.Security.Principal.IdentityReference\n  langs:\n  - csharp\n  - vb\n  name: Translate(Type)\n  fullName: System.Security.Principal.IdentityReference.Translate(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Translate\n    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs\n    startLine: 39\n  assemblies:\n  - System.Security.Principal.Windows\n  namespace: System.Security.Principal\n  summary: \"\\n<p>Translates the account name represented by the <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object into another <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>-derived type.</p>\\n\"\n  syntax:\n    content: public abstract IdentityReference Translate(Type targetType)\n    content.vb: Public MustOverride Function Translate(targetType As Type) As IdentityReference\n    parameters:\n    - id: targetType\n      type: System.Type\n      description: \"\\n<p>The target type for the conversion from <xref href=\\\"System.Security.Principal.IdentityReference\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n    return:\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The converted identity.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: IdentityReference.Translate(Type)\nreferences:\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  commentId: T:System.String\n  nameWithType: String\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  commentId: T:System.Boolean\n  nameWithType: Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  commentId: T:System.Int32\n  nameWithType: Int32\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  commentId: T:System.Type\n  nameWithType: Type\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n"}