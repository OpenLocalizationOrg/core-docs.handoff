{"nodes":[{"pos":[532,547],"content":"EventTypeFilter","needQuote":true,"nodes":[{"content":"EventTypeFilter","pos":[0,15]}]},{"pos":[2010,2039],"content":"EventTypeFilter(SourceLevels)","needQuote":true,"nodes":[{"content":"EventTypeFilter(SourceLevels)","pos":[0,29]}]},{"pos":[3437,3446],"content":"EventType","needQuote":true,"nodes":[{"content":"EventType","pos":[0,9]}]},{"pos":[5144,5239],"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","pos":[0,95]}]},{"content":"\\n&lt;p&gt;The name of the source.&lt;/p&gt;\\n","pos":[6709,6743],"source":"\\n<p>The name of the source.</p>\\n"},{"content":"\\n&lt;p&gt;A trace identifier number.&lt;/p&gt;\\n","pos":[7015,7052],"source":"\\n<p>A trace identifier number.</p>\\n"},{"content":"\\n&lt;p&gt;The format to use for writing an array of arguments, or a message to write.&lt;/p&gt;\\n","pos":[7126,7212],"source":"\\n<p>The format to use for writing an array of arguments, or a message to write.</p>\\n"},{"content":"\\n&lt;p&gt;An array of argument objects.&lt;/p&gt;\\n","pos":[7277,7317],"source":"\\n<p>An array of argument objects.</p>\\n"},{"content":"\\n&lt;p&gt;A trace data object.&lt;/p&gt;\\n","pos":[7381,7412],"source":"\\n<p>A trace data object.</p>\\n"},{"content":"\\n&lt;p&gt;An array of trace data objects.&lt;/p&gt;\\n","pos":[7477,7519],"source":"\\n<p>An array of trace data objects.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt;if the trace should be produced; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7580,7681],"source":"\\n<p>\\n<strong>true</strong>if the trace should be produced; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[8640,8658],"content":"System.Diagnostics","needQuote":true,"nodes":[{"content":"System.Diagnostics","pos":[0,18]}]},{"pos":[8825,8831],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9005,9016],"content":"TraceFilter","needQuote":true,"nodes":[{"content":"TraceFilter","pos":[0,11]}]},{"pos":[9215,9225],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[9320,9328],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9397,9398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9425,9426],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9496,9504],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[9573,9574],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9601,9602],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9785,9799],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[9918,9924],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9991,9992],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10042,10048],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10108,10109],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10192,10198],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10265,10266],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10316,10322],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10382,10383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10597,10619],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[10767,10773],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[10840,10841],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10891,10897],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10958,10959]},{"pos":[11014,11020],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11080,11081],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11178,11184],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11251,11252],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11302,11308],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[11369,11370]},{"pos":[11425,11431],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11491,11492],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11737,11768],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[11934,11949],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12025,12026],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12076,12082],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12143,12144]},{"pos":[12199,12205],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12265,12266],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12372,12387],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[12463,12464],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12514,12520],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12581,12582]},{"pos":[12637,12643],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12703,12704],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12934,12947],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[13048,13059],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13131,13132],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13159,13160],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13233,13244],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[13316,13317],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13344,13345],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13520,13529],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[13622,13629],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13697,13698],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13725,13726],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13795,13802],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[13870,13871],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13898,13899],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14074,14091],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[14200,14215],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14291,14292],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14319,14320],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14397,14412],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[14488,14489],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14516,14517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14662,14668],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[14829,14841],"content":"SourceLevels","needQuote":true,"nodes":[{"content":"SourceLevels","pos":[0,12]}]},{"pos":[15237,15332],"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","needQuote":true,"nodes":[{"content":"ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])","pos":[0,95]}]},{"pos":[16115,16126],"content":"ShouldTrace","needQuote":true,"nodes":[{"content":"ShouldTrace","pos":[0,11]}]},{"pos":[16194,16195],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16266,16281],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"content":",","pos":[16342,16343]},{"pos":[16398,16404],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16465,16466]},{"pos":[16541,16555],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"content":",","pos":[16615,16616]},{"pos":[16670,16675],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[16735,16736]},{"pos":[16791,16797],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[16858,16859]},{"pos":[16914,16920],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[16981,16983]},{"content":",","pos":[17015,17016]},{"pos":[17071,17077],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[17138,17139]},{"pos":[17194,17200],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[17261,17263]},{"pos":[17294,17295],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[17542,17553],"content":"ShouldTrace","needQuote":true,"nodes":[{"content":"ShouldTrace","pos":[0,11]}]},{"pos":[17621,17622],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[17693,17708],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"content":",","pos":[17769,17770]},{"pos":[17825,17831],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[17892,17893]},{"pos":[17968,17982],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"content":",","pos":[18042,18043]},{"pos":[18097,18102],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":",","pos":[18162,18163]},{"pos":[18218,18224],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":",","pos":[18285,18286]},{"pos":[18341,18347],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18407,18409],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"content":",","pos":[18438,18439]},{"pos":[18494,18500],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[18561,18562]},{"pos":[18617,18623],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[18683,18685],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[18713,18714],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[19296,19311],"content":"TraceEventCache","needQuote":true,"nodes":[{"content":"TraceEventCache","pos":[0,15]}]},{"pos":[19507,19513],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[19690,19704],"content":"TraceEventType","needQuote":true,"nodes":[{"content":"TraceEventType","pos":[0,14]}]},{"pos":[19896,19901],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[20008,20016],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[20144,20150],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[20211,20213]},{"pos":[20278,20284],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[20344,20346],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[20484,20491],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]}],"content":"items:\n- uid: System.Diagnostics.EventTypeFilter\n  commentId: T:System.Diagnostics.EventTypeFilter\n  id: EventTypeFilter\n  parent: System.Diagnostics\n  children:\n  - System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)\n  - System.Diagnostics.EventTypeFilter.EventType\n  - System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  langs:\n  - csharp\n  - vb\n  name: EventTypeFilter\n  fullName: System.Diagnostics.EventTypeFilter\n  type: Class\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventTypeFilter\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n    startLine: 8\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Indicates whether a listener should trace based on the event type.</p>\\n\"\n  syntax:\n    content: 'public class EventTypeFilter : TraceFilter'\n    content.vb: >-\n      Public Class EventTypeFilter\n          Inherits TraceFilter\n  inheritance:\n  - System.Object\n  - System.Diagnostics.TraceFilter\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: EventTypeFilter\n- uid: System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)\n  commentId: M:System.Diagnostics.EventTypeFilter.#ctor(System.Diagnostics.SourceLevels)\n  id: '#ctor(System.Diagnostics.SourceLevels)'\n  parent: System.Diagnostics.EventTypeFilter\n  langs:\n  - csharp\n  - vb\n  name: EventTypeFilter(SourceLevels)\n  fullName: System.Diagnostics.EventTypeFilter.EventTypeFilter(System.Diagnostics.SourceLevels)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n    startLine: 12\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Diagnostics.EventTypeFilter\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public EventTypeFilter(SourceLevels level)\n    content.vb: Public Sub New(level As SourceLevels)\n    parameters:\n    - id: level\n      type: System.Diagnostics.SourceLevels\n      description: \"\\n<p>A bitwise combination of the <xref href=\\\"System.Diagnostics.SourceLevels\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that specifies the event type of the messages to trace. </p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: EventTypeFilter.EventTypeFilter(SourceLevels)\n- uid: System.Diagnostics.EventTypeFilter.EventType\n  commentId: P:System.Diagnostics.EventTypeFilter.EventType\n  id: EventType\n  parent: System.Diagnostics.EventTypeFilter\n  langs:\n  - csharp\n  - vb\n  name: EventType\n  fullName: System.Diagnostics.EventTypeFilter.EventType\n  type: Property\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: EventType\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n    startLine: 23\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Gets or sets the event type of the messages to trace.</p>\\n\"\n  syntax:\n    content: public SourceLevels EventType { get; set; }\n    content.vb: Public Property EventType As SourceLevels\n    parameters: []\n    return:\n      type: System.Diagnostics.SourceLevels\n      description: \"\\n<p>A bitwise combination of the <xref href=\\\"System.Diagnostics.SourceLevels\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: EventTypeFilter.EventType\n- uid: System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  commentId: M:System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  id: ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  parent: System.Diagnostics.EventTypeFilter\n  langs:\n  - csharp\n  - vb\n  name: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  fullName: System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldTrace\n    path: src/System.Diagnostics.TraceSource/src/System/Diagnostics/SeverityFilter.cs\n    startLine: 17\n  assemblies:\n  - System.Diagnostics.TraceSource\n  namespace: System.Diagnostics\n  summary: \"\\n<p>Determines whether the trace listener should trace the event. </p>\\n\"\n  syntax:\n    content: public override bool ShouldTrace(TraceEventCache cache, string source, TraceEventType eventType, int id, string formatOrMessage, object[] args, object data1, object[] data)\n    content.vb: Public Overrides Function ShouldTrace(cache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, formatOrMessage As String, args As Object(), data1 As Object, data As Object()) As Boolean\n    parameters:\n    - id: cache\n      type: System.Diagnostics.TraceEventCache\n      description: \"\\n<p>A <xref href=\\\"System.Diagnostics.TraceEventCache\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that represents the information cache for the trace event.</p>\\n\"\n    - id: source\n      type: System.String\n      description: \"\\n<p>The name of the source.</p>\\n\"\n    - id: eventType\n      type: System.Diagnostics.TraceEventType\n      description: \"\\n<p>One of the <xref href=\\\"System.Diagnostics.TraceEventType\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values. </p>\\n\"\n    - id: id\n      type: System.Int32\n      description: \"\\n<p>A trace identifier number.</p>\\n\"\n    - id: formatOrMessage\n      type: System.String\n      description: \"\\n<p>The format to use for writing an array of arguments, or a message to write.</p>\\n\"\n    - id: args\n      type: System.Object[]\n      description: \"\\n<p>An array of argument objects.</p>\\n\"\n    - id: data1\n      type: System.Object\n      description: \"\\n<p>A trace data object.</p>\\n\"\n    - id: data\n      type: System.Object[]\n      description: \"\\n<p>An array of trace data objects.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong>if the trace should be produced; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Diagnostics.EventTypeFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object(), System.Object, System.Object())\n  name.vb: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  nameWithType: EventTypeFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  nameWithType.vb: EventTypeFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\nreferences:\n- uid: System.Diagnostics\n  isExternal: false\n  name: System.Diagnostics\n  fullName: System.Diagnostics\n  nameWithType: System.Diagnostics\n  commentId: N:System.Diagnostics\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Diagnostics.TraceFilter\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceFilter\n  fullName: System.Diagnostics.TraceFilter\n  nameWithType: TraceFilter\n  commentId: T:System.Diagnostics.TraceFilter\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Diagnostics.SourceLevels\n  parent: System.Diagnostics\n  isExternal: false\n  name: SourceLevels\n  fullName: System.Diagnostics.SourceLevels\n  nameWithType: SourceLevels\n  commentId: T:System.Diagnostics.SourceLevels\n- uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n  parent: System.Diagnostics.TraceFilter\n  isExternal: true\n  name: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  fullName: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object[], System.Object, System.Object[])\n  fullname.vb: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache, System.String, System.Diagnostics.TraceEventType, System.Int32, System.String, System.Object(), System.Object, System.Object())\n  name.vb: ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  spec.csharp:\n  - uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n    name: ShouldTrace\n    fullName: System.Diagnostics.TraceFilter.ShouldTrace\n  - name: (\n    fullName: (\n  - uid: System.Diagnostics.TraceEventCache\n    name: TraceEventCache\n    fullName: System.Diagnostics.TraceEventCache\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Diagnostics.TraceEventType\n    name: TraceEventType\n    fullName: System.Diagnostics.TraceEventType\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n    name: ShouldTrace\n    fullName: System.Diagnostics.TraceFilter.ShouldTrace\n  - name: (\n    fullName: (\n  - uid: System.Diagnostics.TraceEventCache\n    name: TraceEventCache\n    fullName: System.Diagnostics.TraceEventCache\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Diagnostics.TraceEventType\n    name: TraceEventType\n    fullName: System.Diagnostics.TraceEventType\n  - name: ', '\n    fullName: ', '\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.String\n    name: String\n    fullName: System.String\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object[], Object, Object[])\n  nameWithType.vb: TraceFilter.ShouldTrace(TraceEventCache, String, TraceEventType, Int32, String, Object(), Object, Object())\n  commentId: M:System.Diagnostics.TraceFilter.ShouldTrace(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[],System.Object,System.Object[])\n- uid: System.Diagnostics.TraceEventCache\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventCache\n  fullName: System.Diagnostics.TraceEventCache\n  nameWithType: TraceEventCache\n  commentId: T:System.Diagnostics.TraceEventCache\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Diagnostics.TraceEventType\n  parent: System.Diagnostics\n  isExternal: false\n  name: TraceEventType\n  fullName: System.Diagnostics.TraceEventType\n  nameWithType: TraceEventType\n  commentId: T:System.Diagnostics.TraceEventType\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n"}