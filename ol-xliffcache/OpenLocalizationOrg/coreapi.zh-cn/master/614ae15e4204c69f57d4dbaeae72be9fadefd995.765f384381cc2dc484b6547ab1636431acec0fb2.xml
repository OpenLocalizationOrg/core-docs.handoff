{"nodes":[{"pos":[844,851],"content":"Decoder","needQuote":true,"nodes":[{"content":"Decoder","pos":[0,7]}]},{"pos":[2421,2430],"content":"Decoder()","needQuote":true,"nodes":[{"content":"Decoder()","pos":[0,9]}]},{"pos":[3344,3352],"content":"Fallback","needQuote":true,"nodes":[{"content":"Fallback","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The value in a set operation is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[4462,4554],"source":"\\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n"},{"pos":[5356,5370],"content":"FallbackBuffer","needQuote":true,"nodes":[{"content":"FallbackBuffer","pos":[0,14]}]},{"pos":[7301,7396],"content":"Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)","needQuote":true,"nodes":[{"content":"Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)","pos":[0,95]}]},{"content":"\\n&lt;p&gt;A byte array to convert.&lt;/p&gt;\\n","pos":[8666,8701],"source":"\\n<p>A byte array to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The first element of &lt;em&gt;bytes&lt;/em&gt; to convert.&lt;/p&gt;\\n","pos":[8768,8826],"source":"\\n<p>The first element of <em>bytes</em> to convert.</p>\\n"},{"content":"\\n&lt;p&gt;The number of elements of &lt;em&gt;bytes&lt;/em&gt; to convert.&lt;/p&gt;\\n","pos":[8893,8956],"source":"\\n<p>The number of elements of <em>bytes</em> to convert.</p>\\n"},{"content":"\\n&lt;p&gt;An array to store the converted characters.&lt;/p&gt;\\n","pos":[9020,9074],"source":"\\n<p>An array to store the converted characters.</p>\\n"},{"content":"\\n&lt;p&gt;The first element of &lt;em&gt;chars&lt;/em&gt; in which data is stored.&lt;/p&gt;\\n","pos":[9141,9212],"source":"\\n<p>The first element of <em>chars</em> in which data is stored.</p>\\n"},{"content":"\\n&lt;p&gt;The maximum number of elements of &lt;em&gt;chars&lt;/em&gt; to use in the conversion.&lt;/p&gt;\\n","pos":[9279,9364],"source":"\\n<p>The maximum number of elements of <em>chars</em> to use in the conversion.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to indicate that no further data is to be converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[9429,9551],"source":"\\n<p>\\n<strong>true</strong> to indicate that no further data is to be converted; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the number of bytes that were used in the conversion.","pos":[9618,9711],"source":"\\n<p>When this method returns, contains the number of bytes that were used in the conversion."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[9712,9757],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains the number of characters from &lt;em&gt;chars&lt;/em&gt; that were produced by the conversion.","pos":[9824,9946],"source":"\\n<p>When this method returns, contains the number of characters from <em>chars</em> that were produced by the conversion."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[9947,9992],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;When this method returns, contains &lt;strong&gt;true&lt;/strong&gt; if all the characters specified by &lt;em&gt;byteCount&lt;/em&gt; were converted; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[10061,10227],"source":"\\n<p>When this method returns, contains <strong>true</strong> if all the characters specified by <em>byteCount</em> were converted; otherwise, <strong>false</strong>."},{"content":"This parameter is passed uninitialized.&lt;/p&gt;\\n","pos":[10228,10273],"source":" This parameter is passed uninitialized.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; or &lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n","pos":[10392,10490],"source":"\\n<p>\\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt;, &lt;em&gt;charCount&lt;/em&gt;, &lt;em&gt;byteIndex&lt;/em&gt;, or &lt;em&gt;byteCount&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;chars&lt;/em&gt; - &lt;em&gt;charIndex&lt;/em&gt; is less than &lt;em&gt;charCount&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;The length of &lt;em&gt;bytes&lt;/em&gt; - &lt;em&gt;byteIndex&lt;/em&gt; is less than &lt;em&gt;byteCount&lt;/em&gt;.&lt;/p&gt;\\n","pos":[10607,10928],"source":"\\n<p>\\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\\n<p>-or-</p>\\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\\n"},{"pos":[12720,12754],"content":"GetCharCount(Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[13617,13680],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[13681,13687],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[13750,13793],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[13794,13800],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[13863,13898],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[13899,13905],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.&lt;/p&gt;\\n","pos":[13964,14090],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[14209,14283],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[14284,14290],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[14407,14570],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[14571,14577],"source":" </p>\\n"},{"pos":[16018,16061],"content":"GetCharCount(Byte[], Int32, Int32, Boolean)","needQuote":true,"nodes":[{"content":"GetCharCount(Byte[], Int32, Int32, Boolean)","pos":[0,43]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[17136,17199],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[17200,17206],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[17269,17312],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[17313,17319],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[17382,17417],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[17418,17424],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to simulate clearing the internal state of the encoder after the calculation; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[17489,17630],"source":"\\n<p>\\n<strong>true</strong> to simulate clearing the internal state of the encoder after the calculation; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[17631,17637],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.&lt;/p&gt;\\n","pos":[17696,17822],"source":"\\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[17941,18015],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[18016,18022],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; or &lt;em&gt;count&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; and &lt;em&gt;count&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.","pos":[18139,18302],"source":"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>."},{"content":"&lt;/p&gt;\\n","pos":[18303,18309],"source":" </p>\\n"},{"pos":[19845,19890],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32)","pos":[0,45]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[20873,20936],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[20937,20943],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[21010,21053],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[21054,21060],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[21127,21162],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[21163,21169],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[21233,21301],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[21302,21308],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[21375,21448],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[21449,21455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into &lt;em&gt;chars&lt;/em&gt;.&lt;/p&gt;\\n","pos":[21514,21585],"source":"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[21704,21870],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[21871,21877],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[21994,22278],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[22279,22285],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[22382,22522],"source":"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[22523,22529],"source":" </p>\\n"},{"pos":[24051,24105],"content":"GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)","needQuote":true,"nodes":[{"content":"GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)","pos":[0,54]}]},{"content":"\\n&lt;p&gt;The byte array containing the sequence of bytes to decode.","pos":[25227,25290],"source":"\\n<p>The byte array containing the sequence of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[25291,25297],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the first byte to decode.","pos":[25364,25407],"source":"\\n<p>The index of the first byte to decode."},{"content":"&lt;/p&gt;\\n","pos":[25408,25414],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to decode.","pos":[25481,25516],"source":"\\n<p>The number of bytes to decode."},{"content":"&lt;/p&gt;\\n","pos":[25517,25523],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character array to contain the resulting set of characters.","pos":[25587,25655],"source":"\\n<p>The character array to contain the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[25656,25662],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index at which to start writing the resulting set of characters.","pos":[25729,25802],"source":"\\n<p>The index at which to start writing the resulting set of characters."},{"content":"&lt;/p&gt;\\n","pos":[25803,25809],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; to clear the internal state of the decoder after the conversion; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[25874,26002],"source":"\\n<p>\\n<strong>true</strong> to clear the internal state of the decoder after the conversion; otherwise, <strong>false</strong>."},{"content":"&lt;/p&gt;\\n","pos":[26003,26009],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters written into the &lt;em&gt;chars&lt;/em&gt; parameter.&lt;/p&gt;\\n","pos":[26068,26153],"source":"\\n<p>The actual number of characters written into the <em>chars</em> parameter.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;bytes&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; is &lt;strong&gt;null &lt;/strong&gt;(&lt;strong&gt;Nothing&lt;/strong&gt;).","pos":[26272,26438],"source":"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>)."},{"content":"&lt;/p&gt;\\n","pos":[26439,26445],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;byteIndex&lt;/em&gt; or &lt;em&gt;byteCount&lt;/em&gt; or &lt;em&gt;charIndex&lt;/em&gt; is less than zero.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;byteindex&lt;/em&gt; and &lt;em&gt;byteCount&lt;/em&gt; do not denote a valid range in &lt;em&gt;bytes&lt;/em&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;charIndex&lt;/em&gt; is not a valid index in &lt;em&gt;chars&lt;/em&gt;.","pos":[26562,26846],"source":"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>."},{"content":"&lt;/p&gt;\\n","pos":[26847,26853],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;chars&lt;/em&gt; does not have enough capacity from &lt;em&gt;charIndex&lt;/em&gt; to the end of the array to accommodate the resulting characters.","pos":[26950,27090],"source":"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters."},{"content":"&lt;/p&gt;\\n","pos":[27091,27097],"source":" </p>\\n"},{"pos":[28432,28439],"content":"Reset()","needQuote":true,"nodes":[{"content":"Reset()","pos":[0,7]}]},{"pos":[29236,29247],"content":"System.Text","needQuote":true,"nodes":[{"content":"System.Text","pos":[0,11]}]},{"pos":[29393,29399],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[29559,29569],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[29664,29672],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29741,29742],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29769,29770],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[29840,29848],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[29917,29918],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[29945,29946],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30129,30143],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[30262,30268],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30335,30336],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30386,30392],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30452,30453],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30536,30542],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[30609,30610],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[30660,30666],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[30726,30727],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[30941,30963],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[31111,31117],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31184,31185],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31235,31241],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31302,31303]},{"pos":[31358,31364],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31424,31425],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[31522,31528],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[31595,31596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[31646,31652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[31713,31714]},{"pos":[31769,31775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[31835,31836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32081,32112],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[32278,32293],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[32369,32370],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32420,32426],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32487,32488]},{"pos":[32543,32549],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[32609,32610],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32716,32731],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[32807,32808],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32858,32864],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[32925,32926]},{"pos":[32981,32987],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[33047,33048],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33278,33291],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[33392,33403],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33475,33476],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33503,33504],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33577,33588],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[33660,33661],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33688,33689],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33864,33873],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[33966,33973],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34041,34042],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34069,34070],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34139,34146],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[34214,34215],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34242,34243],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34418,34435],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[34544,34559],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[34635,34636],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34663,34664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34741,34756],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[34832,34833],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34860,34861],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35006,35012],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[35162,35177],"content":"DecoderFallback","needQuote":true,"nodes":[{"content":"DecoderFallback","pos":[0,15]}]},{"pos":[35384,35405],"content":"DecoderFallbackBuffer","needQuote":true,"nodes":[{"content":"DecoderFallbackBuffer","pos":[0,21]}]},{"pos":[35568,35574],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[35694,35698],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[35757,35759]},{"pos":[35822,35826],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[35884,35886],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36018,36023],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[36128,36134],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[36254,36258],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[36317,36319]},{"pos":[36382,36386],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[36444,36446],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36580,36587],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[36733,36754],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[36955,36972],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[37154,37181],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[37395,37419],"content":"DecoderFallbackException","needQuote":true,"nodes":[{"content":"DecoderFallbackException","pos":[0,24]}]}],"content":"items:\n- uid: System.Text.Decoder\n  commentId: T:System.Text.Decoder\n  id: Decoder\n  parent: System.Text\n  children:\n  - System.Text.Decoder.#ctor\n  - System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  - System.Text.Decoder.Fallback\n  - System.Text.Decoder.FallbackBuffer\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  - System.Text.Decoder.Reset\n  langs:\n  - csharp\n  - vb\n  name: Decoder\n  fullName: System.Text.Decoder\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Decoder\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 21\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts a sequence of encoded bytes into a set of characters.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      [Serializable]\n\n      public abstract class Decoder\n    content.vb: >-\n      <ComVisible(True)>\n\n      <Serializable>\n\n      Public MustInherit Class Decoder\n  seealso:\n  - type: System.Text.Encoder\n    commentId: T:System.Text.Encoder\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  - type: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: Decoder\n- uid: System.Text.Decoder.#ctor\n  commentId: M:System.Text.Decoder.#ctor\n  id: '#ctor'\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: Decoder()\n  fullName: System.Text.Decoder.Decoder()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 35\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: protected Decoder()\n    content.vb: Protected Sub New\n  seealso:\n  - type: System.Text.Encoding\n    commentId: T:System.Text.Encoding\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Decoder.Decoder()\n- uid: System.Text.Decoder.Fallback\n  commentId: P:System.Text.Decoder.Fallback\n  id: Fallback\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: Fallback\n  fullName: System.Text.Decoder.Fallback\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Fallback\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 40\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets or sets a <xref href=\\\"System.Text.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the current <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public DecoderFallback Fallback { get; set; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Property Fallback As DecoderFallback\n    parameters: []\n    return:\n      type: System.Text.DecoderFallback\n      description: \"\\n<p>A <xref href=\\\"System.Text.DecoderFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>A new value cannot be assigned in a set operation because the current <xref href=\\\"System.Text.DecoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object contains data that has not been decoded yet. </p>\\n\"\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoder.FallbackBuffer\n    commentId: P:System.Text.Encoder.FallbackBuffer\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: Decoder.Fallback\n- uid: System.Text.Decoder.FallbackBuffer\n  commentId: P:System.Text.Decoder.FallbackBuffer\n  id: FallbackBuffer\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: FallbackBuffer\n  fullName: System.Text.Decoder.FallbackBuffer\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FallbackBuffer\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 66\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Text.DecoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object associated with the current <xref href=\\\"System.Text.Decoder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public DecoderFallbackBuffer FallbackBuffer { get; }\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public ReadOnly Property FallbackBuffer As DecoderFallbackBuffer\n    parameters: []\n    return:\n      type: System.Text.DecoderFallbackBuffer\n      description: \"\\n<p>A <xref href=\\\"System.Text.DecoderFallbackBuffer\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  seealso:\n  - type: System.Text.EncoderFallback\n    commentId: T:System.Text.EncoderFallback\n  - type: System.Text.Encoder.Fallback\n    commentId: P:System.Text.Encoder.Fallback\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: Decoder.FallbackBuffer\n- uid: System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  commentId: M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  id: Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)\n  fullName: System.Text.Decoder.Convert(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32, System.Int32, System.Boolean, out System.Int32, out System.Int32, out System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Convert\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 251\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>Converts an array of encoded bytes to UTF-16 encoded characters and stores the result in a character array.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual void Convert(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Sub Convert(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, charCount As Integer, flush As Boolean, ByRef bytesUsed As Integer, ByRef charsUsed As Integer, ByRef completed As Boolean)\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>A byte array to convert.</p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The first element of <em>bytes</em> to convert.</p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of elements of <em>bytes</em> to convert.</p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>An array to store the converted characters.</p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The first element of <em>chars</em> in which data is stored.</p>\\n\"\n    - id: charCount\n      type: System.Int32\n      description: \"\\n<p>The maximum number of elements of <em>chars</em> to use in the conversion.</p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to indicate that no further data is to be converted; otherwise, <strong>false</strong>.</p>\\n\"\n    - id: bytesUsed\n      type: System.Int32\n      description: \"\\n<p>When this method returns, contains the number of bytes that were used in the conversion. This parameter is passed uninitialized.</p>\\n\"\n    - id: charsUsed\n      type: System.Int32\n      description: \"\\n<p>When this method returns, contains the number of characters from <em>chars</em> that were produced by the conversion. This parameter is passed uninitialized.</p>\\n\"\n    - id: completed\n      type: System.Boolean\n      description: \"\\n<p>When this method returns, contains <strong>true</strong> if all the characters specified by <em>byteCount</em> were converted; otherwise, <strong>false</strong>. This parameter is passed uninitialized.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>chars</em> or <em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>charIndex</em>, <em>charCount</em>, <em>byteIndex</em>, or <em>byteCount</em> is less than zero.</p>\\n<p>-or-</p>\\n<p>The length of <em>chars</em> - <em>charIndex</em> is less than <em>charCount</em>.</p>\\n<p>-or-</p>\\n<p>The length of <em>bytes</em> - <em>byteIndex</em> is less than <em>byteCount</em>.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The output buffer is too small to contain any of the converted input. The output buffer should be greater than or equal to the size indicated by the <xref href=\\\"System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> method.</p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Decoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Decoder.Convert(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32, System.Int32, System.Boolean, ByRef System.Int32, ByRef System.Int32, ByRef System.Boolean)\n  name.vb: Convert(Byte(), Int32, Int32, Char(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)\n  nameWithType: Decoder.Convert(Byte[], Int32, Int32, Char[], Int32, Int32, Boolean, out Int32, out Int32, out Boolean)\n  nameWithType.vb: Decoder.Convert(Byte(), Int32, Int32, Char(), Int32, Int32, Boolean, ByRef Int32, ByRef Int32, ByRef Boolean)\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32)\n  fullName: System.Text.Decoder.GetCharCount(System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 116\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\\n\"\n  syntax:\n    content: public abstract int GetCharCount(byte[] bytes, int index, int count)\n    content.vb: Public MustOverride Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Decoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n    commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  - type: System.Text.Decoder.Reset\n    commentId: M:System.Text.Decoder.Reset\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Decoder.GetCharCount(System.Byte(), System.Int32, System.Int32)\n  name.vb: GetCharCount(Byte(), Int32, Int32)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32)\n  nameWithType.vb: Decoder.GetCharCount(Byte(), Int32, Int32)\n- uid: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  id: GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: GetCharCount(Byte[], Int32, Int32, Boolean)\n  fullName: System.Text.Decoder.GetCharCount(System.Byte[], System.Int32, System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetCharCount\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 118\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array. A parameter indicates whether to clear the internal state of the decoder after the calculation.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual int GetCharCount(byte[] bytes, int index, int count, bool flush)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Function GetCharCount(bytes As Byte(), index As Integer, count As Integer, flush As Boolean) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: count\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to simulate clearing the internal state of the encoder after the calculation; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> or <em>count</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Decoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n    commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  - type: System.Text.Decoder.Reset\n    commentId: M:System.Text.Decoder.Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Decoder.GetCharCount(System.Byte(), System.Int32, System.Int32, System.Boolean)\n  name.vb: GetCharCount(Byte(), Int32, Int32, Boolean)\n  nameWithType: Decoder.GetCharCount(Byte[], Int32, Int32, Boolean)\n  nameWithType.vb: Decoder.GetCharCount(Byte(), Int32, Int32, Boolean)\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32)\n  fullName: System.Text.Decoder.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 166\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.</p>\\n\"\n  syntax:\n    content: public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)\n    content.vb: Public MustOverride Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into <em>chars</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Decoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n    commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)\n  - type: System.Text.Decoder.Reset\n    commentId: M:System.Text.Decoder.Reset\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  fullName.vb: System.Text.Decoder.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32)\n  nameWithType.vb: Decoder.GetChars(Byte(), Int32, Int32, Char(), Int32)\n- uid: System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  commentId: M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  fullName: System.Text.Decoder.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32, System.Boolean)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetChars\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 169\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array. A parameter indicates whether to clear the internal state of the decoder after the conversion.</p>\\n\"\n  syntax:\n    content: public virtual int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush)\n    content.vb: Public Overridable Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer, flush As Boolean) As Integer\n    parameters:\n    - id: bytes\n      type: System.Byte[]\n      description: \"\\n<p>The byte array containing the sequence of bytes to decode. </p>\\n\"\n    - id: byteIndex\n      type: System.Int32\n      description: \"\\n<p>The index of the first byte to decode. </p>\\n\"\n    - id: byteCount\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to decode. </p>\\n\"\n    - id: chars\n      type: System.Char[]\n      description: \"\\n<p>The character array to contain the resulting set of characters. </p>\\n\"\n    - id: charIndex\n      type: System.Int32\n      description: \"\\n<p>The index at which to start writing the resulting set of characters. </p>\\n\"\n    - id: flush\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> to clear the internal state of the decoder after the conversion; otherwise, <strong>false</strong>. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The actual number of characters written into the <em>chars</em> parameter.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>bytes</em> is <strong>null </strong>(<strong>Nothing</strong>).</p>\\n<p>-or- </p>\\n<p>\\n<em>chars</em> is <strong>null </strong>(<strong>Nothing</strong>). </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\\n<p>-or- </p>\\n<p>\\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\\n<p>-or- </p>\\n<p>\\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\\n\"\n  - type: System.Text.DecoderFallbackException\n    commentId: T:System.Text.DecoderFallbackException\n    description: \"\\n<p>A fallback occurred (see Character Encoding in the .NET Framework for fuller explanation)</p>\\n<p>-and-</p>\\n<p>\\n<xref href=\\\"System.Text.Decoder.Fallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> is set to <xref href=\\\"System.Text.DecoderExceptionFallback\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n    commentId: M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)\n  - type: System.Text.Decoder.Reset\n    commentId: M:System.Text.Decoder.Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Text.Decoder.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32, System.Boolean)\n  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32, Boolean)\n  nameWithType: Decoder.GetChars(Byte[], Int32, Int32, Char[], Int32, Boolean)\n  nameWithType.vb: Decoder.GetChars(Byte(), Int32, Int32, Char(), Int32, Boolean)\n- uid: System.Text.Decoder.Reset\n  commentId: M:System.Text.Decoder.Reset\n  id: Reset\n  parent: System.Text.Decoder\n  langs:\n  - csharp\n  - vb\n  name: Reset()\n  fullName: System.Text.Decoder.Reset()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Text/Decoder.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Reset\n    path: src/mscorlib/src/System/Text/Decoder.cs\n    startLine: 100\n  assemblies:\n  - System.Text.Encoding\n  namespace: System.Text\n  summary: \"\\n<p>When overridden in a derived class, sets the decoder back to its initial state.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public virtual void Reset()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overridable Sub Reset\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Decoder.Reset()\nreferences:\n- uid: System.Text\n  isExternal: false\n  name: System.Text\n  fullName: System.Text\n  nameWithType: System.Text\n  commentId: N:System.Text\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Text.DecoderFallback\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallback\n  fullName: System.Text.DecoderFallback\n  nameWithType: DecoderFallback\n  commentId: T:System.Text.DecoderFallback\n- uid: System.Text.DecoderFallbackBuffer\n  parent: System.Text\n  isExternal: false\n  name: DecoderFallbackBuffer\n  fullName: System.Text.DecoderFallbackBuffer\n  nameWithType: DecoderFallbackBuffer\n  commentId: T:System.Text.DecoderFallbackBuffer\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.Text.DecoderFallbackException\n  isExternal: false\n  name: DecoderFallbackException\n  fullName: System.Text.DecoderFallbackException\n  nameWithType: DecoderFallbackException\n  commentId: T:System.Text.DecoderFallbackException\n"}