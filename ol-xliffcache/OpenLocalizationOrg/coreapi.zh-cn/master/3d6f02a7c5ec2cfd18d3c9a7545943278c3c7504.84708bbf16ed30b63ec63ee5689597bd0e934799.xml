{"nodes":[{"pos":[842,852],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[5113,5132],"content":"GetBaseDefinition()","needQuote":true,"nodes":[{"content":"GetBaseDefinition()","pos":[0,19]}]},{"pos":[6540,6555],"content":"ReturnParameter","needQuote":true,"nodes":[{"content":"ReturnParameter","pos":[0,15]}]},{"content":"\\n&lt;p&gt;This method is not implemented.&lt;/p&gt;\\n","pos":[7741,7783],"source":"\\n<p>This method is not implemented.</p>\\n"},{"pos":[8429,8439],"content":"ReturnType","needQuote":true,"nodes":[{"content":"ReturnType","pos":[0,10]}]},{"content":"\\n&lt;p&gt;The return type of this method.&lt;/p&gt;\\n","pos":[9097,9139],"source":"\\n<p>The return type of this method.</p>\\n"},{"pos":[9530,9550],"content":"CreateDelegate(Type)","needQuote":true,"nodes":[{"content":"CreateDelegate(Type)","pos":[0,20]}]},{"content":"\\n&lt;p&gt;The type of the delegate to create.&lt;/p&gt;\\n","pos":[10290,10336],"source":"\\n<p>The type of the delegate to create.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate for this method.&lt;/p&gt;\\n","pos":[10398,10438],"source":"\\n<p>The delegate for this method.</p>\\n"},{"pos":[10860,10888],"content":"CreateDelegate(Type, Object)","needQuote":true,"nodes":[{"content":"CreateDelegate(Type, Object)","pos":[0,28]}]},{"content":"\\n&lt;p&gt;The type of the delegate to create.&lt;/p&gt;\\n","pos":[11702,11748],"source":"\\n<p>The type of the delegate to create.</p>\\n"},{"content":"\\n&lt;p&gt;The object targeted by the delegate.&lt;/p&gt;\\n","pos":[11813,11860],"source":"\\n<p>The object targeted by the delegate.</p>\\n"},{"content":"\\n&lt;p&gt;The delegate for this method.&lt;/p&gt;\\n","pos":[11922,11962],"source":"\\n<p>The delegate for this method.</p>\\n"},{"pos":[12332,12346],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object to compare with this instance, or &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13061,13138],"source":"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;obj&lt;/em&gt; equals the type and value of this instance; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[13199,13328],"source":"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[13742,13763],"content":"GetGenericArguments()","needQuote":true,"nodes":[{"content":"GetGenericArguments()","pos":[0,21]}]},{"content":"\\n&lt;p&gt;This method is not supported.&lt;/p&gt;\\n","pos":[15132,15172],"source":"\\n<p>This method is not supported.</p>\\n"},{"pos":[16032,16060],"content":"GetGenericMethodDefinition()","needQuote":true,"nodes":[{"content":"GetGenericMethodDefinition()","pos":[0,28]}]},{"content":"\\n&lt;p&gt;This method is not supported.&lt;/p&gt;\\n","pos":[17641,17681],"source":"\\n<p>This method is not supported.</p>\\n"},{"pos":[18437,18450],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A 32-bit signed integer hash code.&lt;/p&gt;\\n","pos":[19083,19128],"source":"\\n<p>A 32-bit signed integer hash code.</p>\\n"},{"pos":[19570,19595],"content":"MakeGenericMethod(Type[])","needQuote":true,"nodes":[{"content":"MakeGenericMethod(Type[])","pos":[0,25]}]},{"content":"\\n&lt;p&gt;An array of types to be substituted for the type parameters of the current generic method definition.&lt;/p&gt;\\n","pos":[20596,20708],"source":"\\n<p>An array of types to be substituted for the type parameters of the current generic method definition.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;typeArguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;Any element of &lt;em&gt;typeArguments&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[21605,21746],"source":"\\n<p>\\n<em>typeArguments</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>Any element of <em>typeArguments</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[21747,21753],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of elements in &lt;em&gt;typeArguments&lt;/em&gt; is not the same as the number of type parameters of the current generic method definition.&lt;/p&gt;\\n&lt;p&gt;-or- &lt;/p&gt;\\n&lt;p&gt;An element of &lt;em&gt;typeArguments&lt;/em&gt; does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition.","pos":[21850,22175],"source":"\\n<p>The number of elements in <em>typeArguments</em> is not the same as the number of type parameters of the current generic method definition.</p>\\n<p>-or- </p>\\n<p>An element of <em>typeArguments</em> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition."},{"content":"&lt;/p&gt;\\n","pos":[22176,22182],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;This method is not supported.&lt;/p&gt;\\n","pos":[22287,22327],"source":"\\n<p>This method is not supported.</p>\\n"},{"pos":[23118,23128],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[24514,24540],"content":"ReturnTypeCustomAttributes","needQuote":true,"nodes":[{"content":"ReturnTypeCustomAttributes","pos":[0,26]}]},{"content":"\\n&lt;p&gt;An &lt;strong&gt;ICustomAttributeProvider&lt;/strong&gt; object representing the custom attributes for the return type.&lt;/p&gt;\\n","pos":[25346,25464],"source":"\\n<p>An <strong>ICustomAttributeProvider</strong> object representing the custom attributes for the return type.</p>\\n"},{"pos":[25694,25711],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[25875,25881],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26052,26062],"content":"MemberInfo","needQuote":true,"nodes":[{"content":"MemberInfo","pos":[0,10]}]},{"pos":[26267,26277],"content":"MethodBase","needQuote":true,"nodes":[{"content":"MethodBase","pos":[0,10]}]},{"pos":[26496,26520],"content":"ICustomAttributeProvider","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider","pos":[0,24]}]},{"pos":[26789,26799],"content":"Attributes","needQuote":true,"nodes":[{"content":"Attributes","pos":[0,10]}]},{"pos":[27066,27083],"content":"CallingConvention","needQuote":true,"nodes":[{"content":"CallingConvention","pos":[0,17]}]},{"pos":[27379,27404],"content":"ContainsGenericParameters","needQuote":true,"nodes":[{"content":"ContainsGenericParameters","pos":[0,25]}]},{"pos":[27709,27719],"content":"IsAbstract","needQuote":true,"nodes":[{"content":"IsAbstract","pos":[0,10]}]},{"pos":[27979,27989],"content":"IsAssembly","needQuote":true,"nodes":[{"content":"IsAssembly","pos":[0,10]}]},{"pos":[28252,28265],"content":"IsConstructor","needQuote":true,"nodes":[{"content":"IsConstructor","pos":[0,13]}]},{"pos":[28532,28540],"content":"IsFamily","needQuote":true,"nodes":[{"content":"IsFamily","pos":[0,8]}]},{"pos":[28803,28822],"content":"IsFamilyAndAssembly","needQuote":true,"nodes":[{"content":"IsFamilyAndAssembly","pos":[0,19]}]},{"pos":[29117,29135],"content":"IsFamilyOrAssembly","needQuote":true,"nodes":[{"content":"IsFamilyOrAssembly","pos":[0,18]}]},{"pos":[29416,29423],"content":"IsFinal","needQuote":true,"nodes":[{"content":"IsFinal","pos":[0,7]}]},{"pos":[29679,29694],"content":"IsGenericMethod","needQuote":true,"nodes":[{"content":"IsGenericMethod","pos":[0,15]}]},{"pos":[29984,30009],"content":"IsGenericMethodDefinition","needQuote":true,"nodes":[{"content":"IsGenericMethodDefinition","pos":[0,25]}]},{"pos":[30315,30326],"content":"IsHideBySig","needQuote":true,"nodes":[{"content":"IsHideBySig","pos":[0,11]}]},{"pos":[30588,30597],"content":"IsPrivate","needQuote":true,"nodes":[{"content":"IsPrivate","pos":[0,9]}]},{"pos":[30852,30860],"content":"IsPublic","needQuote":true,"nodes":[{"content":"IsPublic","pos":[0,8]}]},{"pos":[31117,31130],"content":"IsSpecialName","needQuote":true,"nodes":[{"content":"IsSpecialName","pos":[0,13]}]},{"pos":[31397,31405],"content":"IsStatic","needQuote":true,"nodes":[{"content":"IsStatic","pos":[0,8]}]},{"pos":[31658,31667],"content":"IsVirtual","needQuote":true,"nodes":[{"content":"IsVirtual","pos":[0,9]}]},{"pos":[31939,31964],"content":"MethodImplementationFlags","needQuote":true,"nodes":[{"content":"MethodImplementationFlags","pos":[0,25]}]},{"pos":[32305,32345],"content":"GetMethodFromHandle(RuntimeMethodHandle)","needQuote":true,"nodes":[{"content":"GetMethodFromHandle(RuntimeMethodHandle)","pos":[0,40]}]},{"pos":[32546,32565],"content":"GetMethodFromHandle","needQuote":true,"nodes":[{"content":"GetMethodFromHandle","pos":[0,19]}]},{"pos":[32639,32640],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[32703,32722],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[32795,32796],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[32920,32939],"content":"GetMethodFromHandle","needQuote":true,"nodes":[{"content":"GetMethodFromHandle","pos":[0,19]}]},{"pos":[33013,33014],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33077,33096],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"pos":[33169,33170],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[33522,33581],"content":"GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)","needQuote":true,"nodes":[{"content":"GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)","pos":[0,59]}]},{"pos":[33833,33852],"content":"GetMethodFromHandle","needQuote":true,"nodes":[{"content":"GetMethodFromHandle","pos":[0,19]}]},{"pos":[33926,33927],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[33990,34009],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"content":",","pos":[34083,34084]},{"pos":[34150,34167],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[34238,34239],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[34388,34407],"content":"GetMethodFromHandle","needQuote":true,"nodes":[{"content":"GetMethodFromHandle","pos":[0,19]}]},{"pos":[34481,34482],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[34545,34564],"content":"RuntimeMethodHandle","needQuote":true,"nodes":[{"content":"RuntimeMethodHandle","pos":[0,19]}]},{"content":",","pos":[34638,34639]},{"pos":[34705,34722],"content":"RuntimeTypeHandle","needQuote":true,"nodes":[{"content":"RuntimeTypeHandle","pos":[0,17]}]},{"pos":[34793,34794],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35132,35147],"content":"GetParameters()","needQuote":true,"nodes":[{"content":"GetParameters()","pos":[0,15]}]},{"pos":[35282,35295],"content":"GetParameters","needQuote":true,"nodes":[{"content":"GetParameters","pos":[0,13]}]},{"pos":[35363,35364],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35391,35392],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35482,35495],"content":"GetParameters","needQuote":true,"nodes":[{"content":"GetParameters","pos":[0,13]}]},{"pos":[35563,35564],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[35591,35592],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[35850,35874],"content":"Invoke(Object, Object[])","needQuote":true,"nodes":[{"content":"Invoke(Object, Object[])","pos":[0,24]}]},{"pos":[36175,36181],"content":"Invoke","needQuote":true,"nodes":[{"content":"Invoke","pos":[0,6]}]},{"pos":[36242,36243],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36293,36299],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36360,36361]},{"pos":[36416,36422],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[36483,36485]},{"pos":[36516,36517],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[36631,36637],"content":"Invoke","needQuote":true,"nodes":[{"content":"Invoke","pos":[0,6]}]},{"pos":[36698,36699],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[36749,36755],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[36816,36817]},{"pos":[36872,36878],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[36938,36940],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[36968,36969],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37307,37337],"content":"GetMethodImplementationFlags()","needQuote":true,"nodes":[{"content":"GetMethodImplementationFlags()","pos":[0,30]}]},{"pos":[37502,37530],"content":"GetMethodImplementationFlags","needQuote":true,"nodes":[{"content":"GetMethodImplementationFlags","pos":[0,28]}]},{"pos":[37613,37614],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37641,37642],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[37747,37775],"content":"GetMethodImplementationFlags","needQuote":true,"nodes":[{"content":"GetMethodImplementationFlags","pos":[0,28]}]},{"pos":[37858,37859],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[37886,37887],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[38155,38171],"content":"CustomAttributes","needQuote":true,"nodes":[{"content":"CustomAttributes","pos":[0,16]}]},{"pos":[38452,38465],"content":"DeclaringType","needQuote":true,"nodes":[{"content":"DeclaringType","pos":[0,13]}]},{"pos":[38737,38750],"content":"MetadataToken","needQuote":true,"nodes":[{"content":"MetadataToken","pos":[0,13]}]},{"pos":[39015,39021],"content":"Module","needQuote":true,"nodes":[{"content":"Module","pos":[0,6]}]},{"pos":[39263,39267],"content":"Name","needQuote":true,"nodes":[{"content":"Name","pos":[0,4]}]},{"pos":[39576,39629],"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Boolean)","pos":[0,53]}]},{"pos":[39975,40019],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[40136,40137],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40188,40195],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40256,40257],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[40412,40474],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[40591,40592],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[40643,40650],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40711,40712],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[41228,41287],"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)","pos":[0,59]}]},{"pos":[41664,41708],"content":"ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.GetCustomAttributes","pos":[0,44]}]},{"pos":[41825,41826],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[41874,41878],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[41937,41938]},{"pos":[41994,42001],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42062,42063],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[42230,42292],"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.GetCustomAttributes","pos":[0,62]}]},{"pos":[42409,42410],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[42458,42462],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[42521,42522]},{"pos":[42578,42585],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[42646,42647],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[43177,43226],"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined(Type, Boolean)","pos":[0,49]}]},{"pos":[43573,43607],"content":"ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"ICustomAttributeProvider.IsDefined","pos":[0,34]}]},{"pos":[43714,43715],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[43763,43767],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[43826,43827]},{"pos":[43883,43890],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[43951,43952],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44109,44161],"content":"System.Reflection.ICustomAttributeProvider.IsDefined","needQuote":true,"nodes":[{"content":"System.Reflection.ICustomAttributeProvider.IsDefined","pos":[0,52]}]},{"pos":[44268,44269],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[44317,44321],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":",","pos":[44380,44381]},{"pos":[44437,44444],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[44505,44506],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[44904,44914],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[45009,45017],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[45086,45087],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45114,45115],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45185,45193],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[45262,45263],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45290,45291],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[45488,45510],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[45658,45664],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[45731,45732],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[45782,45788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[45849,45850]},{"pos":[45905,45911],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[45971,45972],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46069,46075],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[46142,46143],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46193,46199],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[46260,46261]},{"pos":[46316,46322],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[46382,46383],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[46628,46659],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[46825,46840],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[46916,46917],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[46967,46973],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47034,47035]},{"pos":[47090,47096],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47156,47157],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47263,47278],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[47354,47355],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[47405,47411],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[47472,47473]},{"pos":[47528,47534],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[47594,47595],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[47821,47830],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[47923,47930],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[47998,47999],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48026,48027],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48096,48103],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[48171,48172],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48199,48200],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48375,48392],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[48501,48516],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48592,48593],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48620,48621],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48698,48713],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[48789,48790],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[48817,48818],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[48963,48969],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[49126,49136],"content":"MethodInfo","needQuote":true,"nodes":[{"content":"MethodInfo","pos":[0,10]}]},{"pos":[49344,49357],"content":"ParameterInfo","needQuote":true,"nodes":[{"content":"ParameterInfo","pos":[0,13]}]},{"pos":[49543,49547],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[49688,49696],"content":"Delegate","needQuote":true,"nodes":[{"content":"Delegate","pos":[0,8]}]},{"pos":[49905,49919],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[50068,50074],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50135,50136],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50186,50192],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50252,50253],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50351,50357],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[50418,50419],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[50469,50475],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[50535,50536],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[50728,50735],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[50940,50961],"content":"GetGenericArguments()","needQuote":true,"nodes":[{"content":"GetGenericArguments()","pos":[0,21]}]},{"pos":[51108,51127],"content":"GetGenericArguments","needQuote":true,"nodes":[{"content":"GetGenericArguments","pos":[0,19]}]},{"pos":[51201,51202],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51229,51230],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51326,51345],"content":"GetGenericArguments","needQuote":true,"nodes":[{"content":"GetGenericArguments","pos":[0,19]}]},{"pos":[51419,51420],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[51447,51448],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[51607,51613],"content":"Type[]","needQuote":true,"nodes":[{"content":"Type[]","pos":[0,6]}]},{"pos":[51733,51737],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"content":"[]","pos":[51775,51777]},{"pos":[51840,51844],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[51881,51883],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[52065,52078],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[52209,52220],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52286,52287],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52314,52315],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52403,52414],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[52480,52481],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[52508,52509],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[52688,52693],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[52883,52893],"content":"MemberType","needQuote":true,"nodes":[{"content":"MemberType","pos":[0,10]}]},{"pos":[53132,53143],"content":"MemberTypes","needQuote":true,"nodes":[{"content":"MemberTypes","pos":[0,11]}]},{"pos":[53325,53348],"content":"NotImplementedException","needQuote":true,"nodes":[{"content":"NotImplementedException","pos":[0,23]}]},{"pos":[53559,53580],"content":"NotSupportedException","needQuote":true,"nodes":[{"content":"NotSupportedException","pos":[0,21]}]},{"pos":[53789,53814],"content":"InvalidOperationException","needQuote":true,"nodes":[{"content":"InvalidOperationException","pos":[0,25]}]},{"pos":[54014,54035],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[54236,54253],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Reflection.MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n  id: MethodInfo\n  parent: System.Reflection\n  children:\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  - System.Reflection.MethodInfo.Equals(System.Object)\n  - System.Reflection.MethodInfo.GetBaseDefinition\n  - System.Reflection.MethodInfo.GetGenericArguments\n  - System.Reflection.MethodInfo.GetGenericMethodDefinition\n  - System.Reflection.MethodInfo.GetHashCode\n  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  - System.Reflection.MethodInfo.MemberType\n  - System.Reflection.MethodInfo.ReturnParameter\n  - System.Reflection.MethodInfo.ReturnType\n  - System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  langs:\n  - csharp\n  - vb\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MethodInfo\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 28\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Discovers the attributes of a method and provides access to method metadata.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.None)]\n\n      [ComDefaultInterface(typeof (_MethodInfo))]\n\n      [PermissionSet(SecurityAction.InheritanceDemand, Name = \"FullTrust\")]\n\n      [ComVisible(true)]\n\n      public abstract class MethodInfo : MethodBase, ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.None)>\n\n      <ComDefaultInterface(GetType(_MethodInfo))>\n\n      <PermissionSet(SecurityAction.InheritanceDemand, Name:=\"FullTrust\")>\n\n      <ComVisible(True)>\n\n      Public MustInherit Class MethodInfo\n          Inherits MethodBase\n          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo\n  seealso:\n  - type: System.Type.GetMethods\n    commentId: Overload:System.Type.GetMethods\n  - type: System.Type.GetMethod\n    commentId: Overload:System.Type.GetMethod\n  - type: System.Reflection.MethodInfo.IsGenericMethod\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethod\n  see:\n  - type: System.Security.Permissions.SecurityAction.InheritanceDemand\n    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand\n  inheritance:\n  - System.Object\n  - System.Reflection.MemberInfo\n  - System.Reflection.MethodBase\n  implements:\n  - System.Reflection.ICustomAttributeProvider\n  inheritedMembers:\n  - System.Reflection.MethodBase.Attributes\n  - System.Reflection.MethodBase.CallingConvention\n  - System.Reflection.MethodBase.ContainsGenericParameters\n  - System.Reflection.MethodBase.IsAbstract\n  - System.Reflection.MethodBase.IsAssembly\n  - System.Reflection.MethodBase.IsConstructor\n  - System.Reflection.MethodBase.IsFamily\n  - System.Reflection.MethodBase.IsFamilyAndAssembly\n  - System.Reflection.MethodBase.IsFamilyOrAssembly\n  - System.Reflection.MethodBase.IsFinal\n  - System.Reflection.MethodBase.IsGenericMethod\n  - System.Reflection.MethodBase.IsGenericMethodDefinition\n  - System.Reflection.MethodBase.IsHideBySig\n  - System.Reflection.MethodBase.IsPrivate\n  - System.Reflection.MethodBase.IsPublic\n  - System.Reflection.MethodBase.IsSpecialName\n  - System.Reflection.MethodBase.IsStatic\n  - System.Reflection.MethodBase.IsVirtual\n  - System.Reflection.MethodBase.MethodImplementationFlags\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  - System.Reflection.MethodBase.GetParameters\n  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  - System.Reflection.MethodBase.GetMethodImplementationFlags\n  - System.Reflection.MemberInfo.CustomAttributes\n  - System.Reflection.MemberInfo.DeclaringType\n  - System.Reflection.MemberInfo.MetadataToken\n  - System.Reflection.MemberInfo.Module\n  - System.Reflection.MemberInfo.Name\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - abstract\n  - class\n  modifiers.vb:\n  - Public\n  - MustInherit\n  - Class\n  nameWithType: MethodInfo\n- uid: System.Reflection.MethodInfo.GetBaseDefinition\n  commentId: M:System.Reflection.MethodInfo.GetBaseDefinition\n  id: GetBaseDefinition\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: GetBaseDefinition()\n  fullName: System.Reflection.MethodInfo.GetBaseDefinition()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetBaseDefinition\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 82\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>When overridden in a derived class, returns the <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the method on the direct or indirect base class in which the method represented by this instance was first declared.</p>\\n\"\n  syntax:\n    content: public abstract MethodInfo GetBaseDefinition()\n    content.vb: Public MustOverride Function GetBaseDefinition As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object for the first implementation of this method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  modifiers.vb:\n  - Public\n  - MustOverride\n  nameWithType: MethodInfo.GetBaseDefinition()\n- uid: System.Reflection.MethodInfo.ReturnParameter\n  commentId: P:System.Reflection.MethodInfo.ReturnParameter\n  id: ReturnParameter\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: ReturnParameter\n  fullName: System.Reflection.MethodInfo.ReturnParameter\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReturnParameter\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 78\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.ParameterInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </p>\\n\"\n  syntax:\n    content: public virtual ParameterInfo ReturnParameter { get; }\n    content.vb: Public Overridable ReadOnly Property ReturnParameter As ParameterInfo\n    parameters: []\n    return:\n      type: System.Reflection.ParameterInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.ParameterInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that contains information about the return type.</p>\\n\"\n  exceptions:\n  - type: System.NotImplementedException\n    commentId: T:System.NotImplementedException\n    description: \"\\n<p>This method is not implemented.</p>\\n\"\n  seealso:\n  - type: System.Reflection.ParameterInfo.GetOptionalCustomModifiers\n    commentId: M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers\n  - type: System.Reflection.ParameterInfo.GetRequiredCustomModifiers\n    commentId: M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodInfo.ReturnParameter\n- uid: System.Reflection.MethodInfo.ReturnType\n  commentId: P:System.Reflection.MethodInfo.ReturnType\n  id: ReturnType\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: ReturnType\n  fullName: System.Reflection.MethodInfo.ReturnType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReturnType\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 76\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the return type of this method.</p>\\n\"\n  syntax:\n    content: public virtual Type ReturnType { get; }\n    content.vb: Public Overridable ReadOnly Property ReturnType As Type\n    parameters: []\n    return:\n      type: System.Type\n      description: \"\\n<p>The return type of this method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  - get\n  modifiers.vb:\n  - Public\n  - Overridable\n  - ReadOnly\n  nameWithType: MethodInfo.ReturnType\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  id: CreateDelegate(System.Type)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: CreateDelegate(Type)\n  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateDelegate\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 92\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Creates a delegate of the specified type from this method.</p>\\n\"\n  syntax:\n    content: public virtual Delegate CreateDelegate(Type delegateType)\n    content.vb: 'Public Overridable Function CreateDelegate(delegateType As Type) As '\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate to create.</p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>The delegate for this method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MethodInfo.CreateDelegate(Type)\n- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)\n  id: CreateDelegate(System.Type,System.Object)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: CreateDelegate(Type, Object)\n  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateDelegate\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 93\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Creates a delegate of the specified type with the specified target from this method.</p>\\n\"\n  syntax:\n    content: public virtual Delegate CreateDelegate(Type delegateType, object target)\n    content.vb: 'Public Overridable Function CreateDelegate(delegateType As Type, target As Object) As '\n    parameters:\n    - id: delegateType\n      type: System.Type\n      description: \"\\n<p>The type of the delegate to create.</p>\\n\"\n    - id: target\n      type: System.Object\n      description: \"\\n<p>The object targeted by the delegate.</p>\\n\"\n    return:\n      type: System.Delegate\n      description: \"\\n<p>The delegate for this method.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MethodInfo.CreateDelegate(Type, Object)\n- uid: System.Reflection.MethodInfo.Equals(System.Object)\n  commentId: M:System.Reflection.MethodInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Reflection.MethodInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 61\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\\n\"\n  syntax:\n    content: public override bool Equals(object obj)\n    content.vb: Public Overrides Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Reflection.MethodBase.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MethodInfo.Equals(Object)\n- uid: System.Reflection.MethodInfo.GetGenericArguments\n  commentId: M:System.Reflection.MethodInfo.GetGenericArguments\n  id: GetGenericArguments\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGenericArguments()\n  fullName: System.Reflection.MethodInfo.GetGenericArguments()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGenericArguments\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 84\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns an array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public override Type[] GetGenericArguments()\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overrides Function GetGenericArguments As Type()\n    return:\n      type: System.Type[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</p>\\n\"\n  overridden: System.Reflection.MethodBase.GetGenericArguments\n  exceptions:\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This method is not supported.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo.IsGenericMethod\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethod\n  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition\n  - type: System.Reflection.MethodInfo.GetGenericMethodDefinition\n    commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition\n  - type: System.Type.IsGenericType\n    commentId: P:System.Type.IsGenericType\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MethodInfo.GetGenericArguments()\n- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition\n  commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition\n  id: GetGenericMethodDefinition\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: GetGenericMethodDefinition()\n  fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetGenericMethodDefinition\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 87\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns a <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents a generic method definition from which the current method can be constructed.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(true)]\n\n      public virtual MethodInfo GetGenericMethodDefinition()\n    content.vb: >-\n      <ComVisible(True)>\n\n      Public Overridable Function GetGenericMethodDefinition As MethodInfo\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing a generic method definition from which the current method can be constructed.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current method is not a generic method. That is, <xref href=\\\"System.Reflection.MethodInfo.IsGenericMethod\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This method is not supported.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n    commentId: M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  - type: System.Reflection.MethodInfo.IsGenericMethod\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethod\n  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: MethodInfo.GetGenericMethodDefinition()\n- uid: System.Reflection.MethodInfo.GetHashCode\n  commentId: M:System.Reflection.MethodInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Reflection.MethodInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 66\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Returns the hash code for this instance.</p>\\n\"\n  syntax:\n    content: public override int GetHashCode()\n    content.vb: Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code.</p>\\n\"\n  overridden: System.Reflection.MethodBase.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: MethodInfo.GetHashCode()\n- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  commentId: M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  id: MakeGenericMethod(System.Type[])\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: MakeGenericMethod(Type[])\n  fullName: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MakeGenericMethod\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 90\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object representing the resulting constructed method.</p>\\n\"\n  syntax:\n    content: public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments)\n    content.vb: Public Overridable Function MakeGenericMethod(ParamArray typeArguments As Type()) As MethodInfo\n    parameters:\n    - id: typeArguments\n      type: System.Type[]\n      description: \"\\n<p>An array of types to be substituted for the type parameters of the current generic method definition.</p>\\n\"\n    return:\n      type: System.Reflection.MethodInfo\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object that represents the constructed method formed by substituting the elements of <em>typeArguments</em> for the type parameters of the current generic method definition.</p>\\n\"\n  exceptions:\n  - type: System.InvalidOperationException\n    commentId: T:System.InvalidOperationException\n    description: \"\\n<p>The current <xref href=\\\"System.Reflection.MethodInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> does not represent a generic method definition. That is, <xref href=\\\"System.Reflection.MethodInfo.IsGenericMethodDefinition\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> returns <strong>false</strong>.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>typeArguments</em> is <strong>null</strong>.</p>\\n<p>-or- </p>\\n<p>Any element of <em>typeArguments</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The number of elements in <em>typeArguments</em> is not the same as the number of type parameters of the current generic method definition.</p>\\n<p>-or- </p>\\n<p>An element of <em>typeArguments</em> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition. </p>\\n\"\n  - type: System.NotSupportedException\n    commentId: T:System.NotSupportedException\n    description: \"\\n<p>This method is not supported.</p>\\n\"\n  seealso:\n  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition\n    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition\n  - type: System.Reflection.MethodInfo.GetGenericMethodDefinition\n    commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  fullName.vb: System.Reflection.MethodInfo.MakeGenericMethod(System.Type())\n  name.vb: MakeGenericMethod(Type())\n  nameWithType: MethodInfo.MakeGenericMethod(Type[])\n  nameWithType.vb: MethodInfo.MakeGenericMethod(Type())\n- uid: System.Reflection.MethodInfo.MemberType\n  commentId: P:System.Reflection.MethodInfo.MemberType\n  id: MemberType\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: MemberType\n  fullName: System.Reflection.MethodInfo.MemberType\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: MemberType\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 72\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets a <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a method.</p>\\n\"\n  syntax:\n    content: public override MemberTypes MemberType { get; }\n    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes\n    parameters: []\n    return:\n      type: System.Reflection.MemberTypes\n      description: \"\\n<p>A <xref href=\\\"System.Reflection.MemberTypes\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> value indicating that this member is a method.</p>\\n\"\n  overridden: System.Reflection.MemberInfo.MemberType\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: MethodInfo.MemberType\n- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  commentId: P:System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  id: ReturnTypeCustomAttributes\n  parent: System.Reflection.MethodInfo\n  langs:\n  - csharp\n  - vb\n  name: ReturnTypeCustomAttributes\n  fullName: System.Reflection.MethodInfo.ReturnTypeCustomAttributes\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReturnTypeCustomAttributes\n    path: src/mscorlib/src/System/Reflection/MethodInfo.cs\n    startLine: 80\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Gets the custom attributes for the return type.</p>\\n\"\n  syntax:\n    content: public abstract ICustomAttributeProvider ReturnTypeCustomAttributes { get; }\n    content.vb: Public MustOverride ReadOnly Property ReturnTypeCustomAttributes As ICustomAttributeProvider\n    parameters: []\n    return:\n      type: System.Reflection.ICustomAttributeProvider\n      description: \"\\n<p>An <strong>ICustomAttributeProvider</strong> object representing the custom attributes for the return type.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - abstract\n  - get\n  modifiers.vb:\n  - Public\n  - MustOverride\n  - ReadOnly\n  nameWithType: MethodInfo.ReturnTypeCustomAttributes\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Reflection.MemberInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MemberInfo\n  fullName: System.Reflection.MemberInfo\n  nameWithType: MemberInfo\n  commentId: T:System.Reflection.MemberInfo\n- uid: System.Reflection.MethodBase\n  parent: System.Reflection\n  isExternal: false\n  name: MethodBase\n  fullName: System.Reflection.MethodBase\n  nameWithType: MethodBase\n  commentId: T:System.Reflection.MethodBase\n- uid: System.Reflection.ICustomAttributeProvider\n  parent: System.Reflection\n  isExternal: false\n  name: ICustomAttributeProvider\n  fullName: System.Reflection.ICustomAttributeProvider\n  nameWithType: ICustomAttributeProvider\n  commentId: T:System.Reflection.ICustomAttributeProvider\n- uid: System.Reflection.MethodBase.Attributes\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: Attributes\n  fullName: System.Reflection.MethodBase.Attributes\n  nameWithType: MethodBase.Attributes\n  commentId: P:System.Reflection.MethodBase.Attributes\n- uid: System.Reflection.MethodBase.CallingConvention\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: CallingConvention\n  fullName: System.Reflection.MethodBase.CallingConvention\n  nameWithType: MethodBase.CallingConvention\n  commentId: P:System.Reflection.MethodBase.CallingConvention\n- uid: System.Reflection.MethodBase.ContainsGenericParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: ContainsGenericParameters\n  fullName: System.Reflection.MethodBase.ContainsGenericParameters\n  nameWithType: MethodBase.ContainsGenericParameters\n  commentId: P:System.Reflection.MethodBase.ContainsGenericParameters\n- uid: System.Reflection.MethodBase.IsAbstract\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAbstract\n  fullName: System.Reflection.MethodBase.IsAbstract\n  nameWithType: MethodBase.IsAbstract\n  commentId: P:System.Reflection.MethodBase.IsAbstract\n- uid: System.Reflection.MethodBase.IsAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsAssembly\n  fullName: System.Reflection.MethodBase.IsAssembly\n  nameWithType: MethodBase.IsAssembly\n  commentId: P:System.Reflection.MethodBase.IsAssembly\n- uid: System.Reflection.MethodBase.IsConstructor\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsConstructor\n  fullName: System.Reflection.MethodBase.IsConstructor\n  nameWithType: MethodBase.IsConstructor\n  commentId: P:System.Reflection.MethodBase.IsConstructor\n- uid: System.Reflection.MethodBase.IsFamily\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamily\n  fullName: System.Reflection.MethodBase.IsFamily\n  nameWithType: MethodBase.IsFamily\n  commentId: P:System.Reflection.MethodBase.IsFamily\n- uid: System.Reflection.MethodBase.IsFamilyAndAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyAndAssembly\n  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly\n  nameWithType: MethodBase.IsFamilyAndAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly\n- uid: System.Reflection.MethodBase.IsFamilyOrAssembly\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFamilyOrAssembly\n  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly\n  nameWithType: MethodBase.IsFamilyOrAssembly\n  commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly\n- uid: System.Reflection.MethodBase.IsFinal\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsFinal\n  fullName: System.Reflection.MethodBase.IsFinal\n  nameWithType: MethodBase.IsFinal\n  commentId: P:System.Reflection.MethodBase.IsFinal\n- uid: System.Reflection.MethodBase.IsGenericMethod\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethod\n  fullName: System.Reflection.MethodBase.IsGenericMethod\n  nameWithType: MethodBase.IsGenericMethod\n  commentId: P:System.Reflection.MethodBase.IsGenericMethod\n- uid: System.Reflection.MethodBase.IsGenericMethodDefinition\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsGenericMethodDefinition\n  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition\n  nameWithType: MethodBase.IsGenericMethodDefinition\n  commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition\n- uid: System.Reflection.MethodBase.IsHideBySig\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsHideBySig\n  fullName: System.Reflection.MethodBase.IsHideBySig\n  nameWithType: MethodBase.IsHideBySig\n  commentId: P:System.Reflection.MethodBase.IsHideBySig\n- uid: System.Reflection.MethodBase.IsPrivate\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPrivate\n  fullName: System.Reflection.MethodBase.IsPrivate\n  nameWithType: MethodBase.IsPrivate\n  commentId: P:System.Reflection.MethodBase.IsPrivate\n- uid: System.Reflection.MethodBase.IsPublic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsPublic\n  fullName: System.Reflection.MethodBase.IsPublic\n  nameWithType: MethodBase.IsPublic\n  commentId: P:System.Reflection.MethodBase.IsPublic\n- uid: System.Reflection.MethodBase.IsSpecialName\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsSpecialName\n  fullName: System.Reflection.MethodBase.IsSpecialName\n  nameWithType: MethodBase.IsSpecialName\n  commentId: P:System.Reflection.MethodBase.IsSpecialName\n- uid: System.Reflection.MethodBase.IsStatic\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsStatic\n  fullName: System.Reflection.MethodBase.IsStatic\n  nameWithType: MethodBase.IsStatic\n  commentId: P:System.Reflection.MethodBase.IsStatic\n- uid: System.Reflection.MethodBase.IsVirtual\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: IsVirtual\n  fullName: System.Reflection.MethodBase.IsVirtual\n  nameWithType: MethodBase.IsVirtual\n  commentId: P:System.Reflection.MethodBase.IsVirtual\n- uid: System.Reflection.MethodBase.MethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: MethodImplementationFlags\n  fullName: System.Reflection.MethodBase.MethodImplementationFlags\n  nameWithType: MethodBase.MethodImplementationFlags\n  commentId: P:System.Reflection.MethodBase.MethodImplementationFlags\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: true\n  name: GetMethodFromHandle(RuntimeMethodHandle)\n  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n    name: GetMethodFromHandle\n    fullName: System.Reflection.MethodBase.GetMethodFromHandle\n  - name: (\n    fullName: (\n  - uid: System.RuntimeMethodHandle\n    name: RuntimeMethodHandle\n    fullName: System.RuntimeMethodHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n    name: GetMethodFromHandle\n    fullName: System.Reflection.MethodBase.GetMethodFromHandle\n  - name: (\n    fullName: (\n  - uid: System.RuntimeMethodHandle\n    name: RuntimeMethodHandle\n    fullName: System.RuntimeMethodHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)\n- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n  parent: System.Reflection.MethodBase\n  isExternal: true\n  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n    name: GetMethodFromHandle\n    fullName: System.Reflection.MethodBase.GetMethodFromHandle\n  - name: (\n    fullName: (\n  - uid: System.RuntimeMethodHandle\n    name: RuntimeMethodHandle\n    fullName: System.RuntimeMethodHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.RuntimeTypeHandle\n    name: RuntimeTypeHandle\n    fullName: System.RuntimeTypeHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n    name: GetMethodFromHandle\n    fullName: System.Reflection.MethodBase.GetMethodFromHandle\n  - name: (\n    fullName: (\n  - uid: System.RuntimeMethodHandle\n    name: RuntimeMethodHandle\n    fullName: System.RuntimeMethodHandle\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.RuntimeTypeHandle\n    name: RuntimeTypeHandle\n    fullName: System.RuntimeTypeHandle\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)\n  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)\n- uid: System.Reflection.MethodBase.GetParameters\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetParameters()\n  fullName: System.Reflection.MethodBase.GetParameters()\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetParameters\n    name: GetParameters\n    fullName: System.Reflection.MethodBase.GetParameters\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetParameters\n    name: GetParameters\n    fullName: System.Reflection.MethodBase.GetParameters\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetParameters()\n  commentId: M:System.Reflection.MethodBase.GetParameters\n- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n  parent: System.Reflection.MethodBase\n  isExternal: true\n  name: Invoke(Object, Object[])\n  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])\n  fullname.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())\n  name.vb: Invoke(Object, Object())\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n    name: Invoke\n    fullName: System.Reflection.MethodBase.Invoke\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n    name: Invoke\n    fullName: System.Reflection.MethodBase.Invoke\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.Invoke(Object, Object[])\n  nameWithType.vb: MethodBase.Invoke(Object, Object())\n  commentId: M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\n- uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetMethodImplementationFlags()\n  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n    name: GetMethodImplementationFlags\n    fullName: System.Reflection.MethodBase.GetMethodImplementationFlags\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetMethodImplementationFlags\n    name: GetMethodImplementationFlags\n    fullName: System.Reflection.MethodBase.GetMethodImplementationFlags\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetMethodImplementationFlags()\n  commentId: M:System.Reflection.MethodBase.GetMethodImplementationFlags\n- uid: System.Reflection.MemberInfo.CustomAttributes\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: CustomAttributes\n  fullName: System.Reflection.MemberInfo.CustomAttributes\n  nameWithType: MemberInfo.CustomAttributes\n  commentId: P:System.Reflection.MemberInfo.CustomAttributes\n- uid: System.Reflection.MemberInfo.DeclaringType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: DeclaringType\n  fullName: System.Reflection.MemberInfo.DeclaringType\n  nameWithType: MemberInfo.DeclaringType\n  commentId: P:System.Reflection.MemberInfo.DeclaringType\n- uid: System.Reflection.MemberInfo.MetadataToken\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MetadataToken\n  fullName: System.Reflection.MemberInfo.MetadataToken\n  nameWithType: MemberInfo.MetadataToken\n  commentId: P:System.Reflection.MemberInfo.MetadataToken\n- uid: System.Reflection.MemberInfo.Module\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Module\n  fullName: System.Reflection.MemberInfo.Module\n  nameWithType: MemberInfo.Module\n  commentId: P:System.Reflection.MemberInfo.Module\n- uid: System.Reflection.MemberInfo.Name\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: Name\n  fullName: System.Reflection.MemberInfo.Name\n  nameWithType: MemberInfo.Name\n  commentId: P:System.Reflection.MemberInfo.Name\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)\n- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n  parent: System.Reflection.MemberInfo\n  isExternal: true\n  name: ICustomAttributeProvider.IsDefined(Type, Boolean)\n  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)\n  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  spec.csharp:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n    name: System.Reflection.ICustomAttributeProvider.IsDefined\n    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined\n  - name: (\n    fullName: (\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Boolean\n    name: Boolean\n    fullName: System.Boolean\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)\n  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Reflection.MethodInfo\n  parent: System.Reflection\n  isExternal: false\n  name: MethodInfo\n  fullName: System.Reflection.MethodInfo\n  nameWithType: MethodInfo\n  commentId: T:System.Reflection.MethodInfo\n- uid: System.Reflection.ParameterInfo\n  parent: System.Reflection\n  isExternal: false\n  name: ParameterInfo\n  fullName: System.Reflection.ParameterInfo\n  nameWithType: ParameterInfo\n  commentId: T:System.Reflection.ParameterInfo\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Delegate\n  parent: System\n  isExternal: false\n  name: Delegate\n  fullName: System.Delegate\n  nameWithType: Delegate\n  commentId: T:System.Delegate\n- uid: System.Reflection.MethodBase.Equals(System.Object)\n  parent: System.Reflection.MethodBase\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Reflection.MethodBase.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MethodBase.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.Equals(System.Object)\n    name: Equals\n    fullName: System.Reflection.MethodBase.Equals\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.Equals(Object)\n  commentId: M:System.Reflection.MethodBase.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Reflection.MethodBase.GetGenericArguments\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetGenericArguments()\n  fullName: System.Reflection.MethodBase.GetGenericArguments()\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetGenericArguments\n    name: GetGenericArguments\n    fullName: System.Reflection.MethodBase.GetGenericArguments\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetGenericArguments\n    name: GetGenericArguments\n    fullName: System.Reflection.MethodBase.GetGenericArguments\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetGenericArguments()\n  commentId: M:System.Reflection.MethodBase.GetGenericArguments\n- uid: System.Type[]\n  name: Type[]\n  fullName: System.Type[]\n  fullname.vb: System.Type()\n  name.vb: Type()\n  spec.csharp:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Type\n    name: Type\n    fullName: System.Type\n  - name: ()\n    fullName: ()\n  nameWithType: Type[]\n  nameWithType.vb: Type()\n- uid: System.Reflection.MethodBase.GetHashCode\n  parent: System.Reflection.MethodBase\n  isExternal: false\n  name: GetHashCode()\n  fullName: System.Reflection.MethodBase.GetHashCode()\n  spec.csharp:\n  - uid: System.Reflection.MethodBase.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MethodBase.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Reflection.MethodBase.GetHashCode\n    name: GetHashCode\n    fullName: System.Reflection.MethodBase.GetHashCode\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: MethodBase.GetHashCode()\n  commentId: M:System.Reflection.MethodBase.GetHashCode\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Reflection.MemberInfo.MemberType\n  parent: System.Reflection.MemberInfo\n  isExternal: false\n  name: MemberType\n  fullName: System.Reflection.MemberInfo.MemberType\n  nameWithType: MemberInfo.MemberType\n  commentId: P:System.Reflection.MemberInfo.MemberType\n- uid: System.Reflection.MemberTypes\n  parent: System.Reflection\n  isExternal: false\n  name: MemberTypes\n  fullName: System.Reflection.MemberTypes\n  nameWithType: MemberTypes\n  commentId: T:System.Reflection.MemberTypes\n- uid: System.NotImplementedException\n  isExternal: false\n  name: NotImplementedException\n  fullName: System.NotImplementedException\n  nameWithType: NotImplementedException\n  commentId: T:System.NotImplementedException\n- uid: System.NotSupportedException\n  parent: System\n  isExternal: false\n  name: NotSupportedException\n  fullName: System.NotSupportedException\n  nameWithType: NotSupportedException\n  commentId: T:System.NotSupportedException\n- uid: System.InvalidOperationException\n  parent: System\n  isExternal: false\n  name: InvalidOperationException\n  fullName: System.InvalidOperationException\n  nameWithType: InvalidOperationException\n  commentId: T:System.InvalidOperationException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}