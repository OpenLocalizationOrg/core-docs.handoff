{"nodes":[{"pos":[887,897],"content":"StringInfo","needQuote":true,"nodes":[{"content":"StringInfo","pos":[0,10]}]},{"pos":[2165,2177],"content":"StringInfo()","needQuote":true,"nodes":[{"content":"StringInfo()","pos":[0,12]}]},{"pos":[3221,3239],"content":"StringInfo(String)","needQuote":true,"nodes":[{"content":"StringInfo(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;value&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[4271,4324],"source":"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n"},{"pos":[4662,4682],"content":"LengthInTextElements","needQuote":true,"nodes":[{"content":"LengthInTextElements","pos":[0,20]}]},{"pos":[6009,6015],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"content":"\\n&lt;p&gt;The value in a set operation is &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[7028,7093],"source":"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n"},{"pos":[7438,7452],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;An object.&lt;/p&gt;\\n","pos":[8336,8357],"source":"\\n<p>An object.</p>\\n"},{"pos":[9460,9473],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11011,11037],"content":"GetNextTextElement(String)","needQuote":true,"nodes":[{"content":"GetNextTextElement(String)","pos":[0,26]}]},{"content":"\\n&lt;p&gt;The string from which to get the text element.","pos":[11778,11829],"source":"\\n<p>The string from which to get the text element."},{"content":"&lt;/p&gt;\\n","pos":[11830,11836],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string containing the first text element in the specified string.&lt;/p&gt;\\n","pos":[11896,11974],"source":"\\n<p>A string containing the first text element in the specified string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[12093,12138],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[12139,12145],"source":" </p>\\n"},{"pos":[12944,12977],"content":"GetNextTextElement(String, Int32)","needQuote":true,"nodes":[{"content":"GetNextTextElement(String, Int32)","pos":[0,33]}]},{"content":"\\n&lt;p&gt;The string from which to get the text element.","pos":[13780,13831],"source":"\\n<p>The string from which to get the text element."},{"content":"&lt;/p&gt;\\n","pos":[13832,13838],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index at which the text element starts.","pos":[13901,13960],"source":"\\n<p>The zero-based index at which the text element starts."},{"content":"&lt;/p&gt;\\n","pos":[13961,13967],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;A string containing the text element at the specified index of the specified string.&lt;/p&gt;\\n","pos":[14027,14122],"source":"\\n<p>A string containing the text element at the specified index of the specified string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[14241,14286],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[14287,14293],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;str&lt;/em&gt;.","pos":[14410,14487],"source":"\\n<p>\\n<em>index</em> is outside the range of valid indexes for <em>str</em>."},{"content":"&lt;/p&gt;\\n","pos":[14488,14494],"source":" </p>\\n"},{"pos":[15279,15311],"content":"GetTextElementEnumerator(String)","needQuote":true,"nodes":[{"content":"GetTextElementEnumerator(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string to iterate through.","pos":[16139,16174],"source":"\\n<p>The string to iterate through."},{"content":"&lt;/p&gt;\\n","pos":[16175,16181],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[16527,16572],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[16573,16579],"source":" </p>\\n"},{"pos":[17173,17212],"content":"GetTextElementEnumerator(String, Int32)","needQuote":true,"nodes":[{"content":"GetTextElementEnumerator(String, Int32)","pos":[0,39]}]},{"content":"\\n&lt;p&gt;The string to iterate through.","pos":[18109,18144],"source":"\\n<p>The string to iterate through."},{"content":"&lt;/p&gt;\\n","pos":[18145,18151],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The zero-based index at which to start iterating.","pos":[18214,18268],"source":"\\n<p>The zero-based index at which to start iterating."},{"content":"&lt;/p&gt;\\n","pos":[18269,18275],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[18641,18686],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[18687,18693],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;index&lt;/em&gt; is outside the range of valid indexes for &lt;em&gt;str&lt;/em&gt;.","pos":[18810,18887],"source":"\\n<p>\\n<em>index</em> is outside the range of valid indexes for <em>str</em>."},{"content":"&lt;/p&gt;\\n","pos":[18888,18894],"source":" </p>\\n"},{"pos":[19456,19488],"content":"ParseCombiningCharacters(String)","needQuote":true,"nodes":[{"content":"ParseCombiningCharacters(String)","pos":[0,32]}]},{"content":"\\n&lt;p&gt;The string to search.","pos":[20314,20340],"source":"\\n<p>The string to search."},{"content":"&lt;/p&gt;\\n","pos":[20341,20347],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.&lt;/p&gt;\\n","pos":[20408,20566],"source":"\\n<p>An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;str&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[20685,20730],"source":"\\n<p>\\n<em>str</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n","pos":[20731,20737],"source":" </p>\\n"},{"pos":[21237,21257],"content":"System.Globalization","needQuote":true,"nodes":[{"content":"System.Globalization","pos":[0,20]}]},{"pos":[21430,21436],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[21596,21606],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[21701,21709],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21778,21779],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21806,21807],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[21877,21885],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[21954,21955],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[21982,21983],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22180,22202],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[22350,22356],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22423,22424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22474,22480],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22541,22542]},{"pos":[22597,22603],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[22663,22664],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[22761,22767],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[22834,22835],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[22885,22891],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[22952,22953]},{"pos":[23008,23014],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23074,23075],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23320,23351],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[23517,23532],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[23608,23609],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[23659,23665],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[23726,23727]},{"pos":[23782,23788],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[23848,23849],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[23955,23970],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[24046,24047],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24097,24103],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[24164,24165]},{"pos":[24220,24226],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[24286,24287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24513,24522],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[24615,24622],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24690,24691],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24718,24719],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[24788,24795],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[24863,24864],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[24891,24892],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25067,25084],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[25193,25208],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25284,25285],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25312,25313],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25390,25405],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[25481,25482],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[25509,25510],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[25655,25661],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[25792,25798],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[25942,25947],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[26117,26131],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[26250,26256],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26323,26324],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26374,26380],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26440,26441],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26524,26530],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[26597,26598],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[26648,26654],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[26714,26715],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[26888,26895],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[27061,27074],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[27175,27186],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27258,27259],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27286,27287],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27360,27371],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[27443,27444],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[27471,27472],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[27676,27697],"content":"TextElementEnumerator","needQuote":true,"nodes":[{"content":"TextElementEnumerator","pos":[0,21]}]},{"pos":[27879,27886],"content":"Int32[]","needQuote":true,"nodes":[{"content":"Int32[]","pos":[0,7]}]},{"pos":[28010,28015],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"content":"[]","pos":[28075,28077]},{"pos":[28141,28146],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[28205,28207],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[28340,28361],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[28555,28582],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]}],"content":"items:\n- uid: System.Globalization.StringInfo\n  commentId: T:System.Globalization.StringInfo\n  id: StringInfo\n  parent: System.Globalization\n  children:\n  - System.Globalization.StringInfo.#ctor\n  - System.Globalization.StringInfo.#ctor(System.String)\n  - System.Globalization.StringInfo.Equals(System.Object)\n  - System.Globalization.StringInfo.GetHashCode\n  - System.Globalization.StringInfo.GetNextTextElement(System.String)\n  - System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)\n  - System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  - System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)\n  - System.Globalization.StringInfo.LengthInTextElements\n  - System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  - System.Globalization.StringInfo.String\n  langs:\n  - csharp\n  - vb\n  name: StringInfo\n  fullName: System.Globalization.StringInfo\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: StringInfo\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 22\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Provides functionality to split a string into text elements and to iterate through those text elements.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public class StringInfo\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public Class StringInfo\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: StringInfo\n- uid: System.Globalization.StringInfo.#ctor\n  commentId: M:System.Globalization.StringInfo.#ctor\n  id: '#ctor'\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: StringInfo()\n  fullName: System.Globalization.StringInfo.StringInfo()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 35\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: public StringInfo()\n    content.vb: Public Sub New\n  seealso:\n  - type: System.String.Empty\n    commentId: F:System.String.Empty\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringInfo.StringInfo()\n- uid: System.Globalization.StringInfo.#ctor(System.String)\n  commentId: M:System.Globalization.StringInfo.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: StringInfo(String)\n  fullName: System.Globalization.StringInfo.StringInfo(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 38\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class to a specified string.</p>\\n\"\n  syntax:\n    content: public StringInfo(string value)\n    content.vb: Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>A string to initialize this <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>value</em> is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: StringInfo.StringInfo(String)\n- uid: System.Globalization.StringInfo.LengthInTextElements\n  commentId: P:System.Globalization.StringInfo.LengthInTextElements\n  id: LengthInTextElements\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: LengthInTextElements\n  fullName: System.Globalization.StringInfo.LengthInTextElements\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: LengthInTextElements\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 105\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the number of text elements in the current <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public int LengthInTextElements { get; }\n    content.vb: Public ReadOnly Property LengthInTextElements As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of base characters, surrogate pairs, and combining character sequences in this <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: StringInfo.LengthInTextElements\n- uid: System.Globalization.StringInfo.String\n  commentId: P:System.Globalization.StringInfo.String\n  id: String\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: String\n  fullName: System.Globalization.StringInfo.String\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: String\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 89\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets or sets the value of the current <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: public string String { get; set; }\n    content.vb: Public Property String As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The string that is the value of the current <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The value in a set operation is <strong>null</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: StringInfo.String\n- uid: System.Globalization.StringInfo.Equals(System.Object)\n  commentId: M:System.Globalization.StringInfo.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Globalization.StringInfo.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 59\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Indicates whether the current <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object is equal to a specified object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override bool Equals(object value)\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function Equals(value As Object) As Boolean\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>An object.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <em>value</em> parameter is a <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object and its <xref href=\\\"System.Globalization.StringInfo.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property equals the <xref href=\\\"System.Globalization.StringInfo.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property of this <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object; otherwise, <strong>false</strong>.</p>\\n\"\n  overridden: System.Object.Equals(System.Object)\n  seealso:\n  - type: System.String.Equals(System.Object)\n    commentId: M:System.String.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringInfo.Equals(Object)\n- uid: System.Globalization.StringInfo.GetHashCode\n  commentId: M:System.Globalization.StringInfo.GetHashCode\n  id: GetHashCode\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Globalization.StringInfo.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 70\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Calculates a hash code for the value of the current <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [ComVisible(false)]\n\n      public override int GetHashCode()\n    content.vb: >-\n      <ComVisible(False)>\n\n      Public Overrides Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A 32-bit signed integer hash code based on the string value of this <xref href=\\\"System.Globalization.StringInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  overridden: System.Object.GetHashCode\n  seealso:\n  - type: System.String.GetHashCode\n    commentId: M:System.String.GetHashCode\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: StringInfo.GetHashCode()\n- uid: System.Globalization.StringInfo.GetNextTextElement(System.String)\n  commentId: M:System.Globalization.StringInfo.GetNextTextElement(System.String)\n  id: GetNextTextElement(System.String)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNextTextElement(String)\n  fullName: System.Globalization.StringInfo.GetNextTextElement(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNextTextElement\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 169\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the first text element in a specified string.</p>\\n\"\n  syntax:\n    content: public static string GetNextTextElement(string str)\n    content.vb: Public Shared Function GetNextTextElement(str As String) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string from which to get the text element. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the first text element in the specified string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n    commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  - type: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n    commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringInfo.GetNextTextElement(String)\n- uid: System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)\n  commentId: M:System.Globalization.StringInfo.GetNextTextElement(System.String,System.Int32)\n  id: GetNextTextElement(System.String,System.Int32)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: GetNextTextElement(String, Int32)\n  fullName: System.Globalization.StringInfo.GetNextTextElement(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetNextTextElement\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 266\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Gets the text element at the specified index of the specified string.</p>\\n\"\n  syntax:\n    content: public static string GetNextTextElement(string str, int index)\n    content.vb: Public Shared Function GetNextTextElement(str As String, index As Integer) As String\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string from which to get the text element. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which the text element starts. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>A string containing the text element at the specified index of the specified string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for <em>str</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n    commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  - type: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n    commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringInfo.GetNextTextElement(String, Int32)\n- uid: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  id: GetTextElementEnumerator(System.String)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: GetTextElementEnumerator(String)\n  fullName: System.Globalization.StringInfo.GetTextElementEnumerator(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTextElementEnumerator\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 288\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns an enumerator that iterates through the text elements of the entire string.</p>\\n\"\n  syntax:\n    content: public static TextElementEnumerator GetTextElementEnumerator(string str)\n    content.vb: Public Shared Function GetTextElementEnumerator(str As String) As TextElementEnumerator\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string to iterate through. </p>\\n\"\n    return:\n      type: System.Globalization.TextElementEnumerator\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.TextElementEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the entire string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TextElementEnumerator\n    commentId: T:System.Globalization.TextElementEnumerator\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringInfo.GetTextElementEnumerator(String)\n- uid: System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)\n  commentId: M:System.Globalization.StringInfo.GetTextElementEnumerator(System.String,System.Int32)\n  id: GetTextElementEnumerator(System.String,System.Int32)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: GetTextElementEnumerator(String, Int32)\n  fullName: System.Globalization.StringInfo.GetTextElementEnumerator(System.String, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetTextElementEnumerator\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 293\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns an enumerator that iterates through the text elements of the string, starting at the specified index.</p>\\n\"\n  syntax:\n    content: public static TextElementEnumerator GetTextElementEnumerator(string str, int index)\n    content.vb: Public Shared Function GetTextElementEnumerator(str As String, index As Integer) As TextElementEnumerator\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string to iterate through. </p>\\n\"\n    - id: index\n      type: System.Int32\n      description: \"\\n<p>The zero-based index at which to start iterating. </p>\\n\"\n    return:\n      type: System.Globalization.TextElementEnumerator\n      description: \"\\n<p>A <xref href=\\\"System.Globalization.TextElementEnumerator\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the string starting at <em>index</em>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>. </p>\\n\"\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>index</em> is outside the range of valid indexes for <em>str</em>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.TextElementEnumerator\n    commentId: T:System.Globalization.TextElementEnumerator\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringInfo.GetTextElementEnumerator(String, Int32)\n- uid: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  commentId: M:System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  id: ParseCombiningCharacters(System.String)\n  parent: System.Globalization.StringInfo\n  langs:\n  - csharp\n  - vb\n  name: ParseCombiningCharacters(String)\n  fullName: System.Globalization.StringInfo.ParseCombiningCharacters(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Globalization/StringInfo.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ParseCombiningCharacters\n    path: src/mscorlib/src/System/Globalization/StringInfo.cs\n    startLine: 325\n  assemblies:\n  - System.Globalization\n  namespace: System.Globalization\n  summary: \"\\n<p>Returns the indexes of each base character, high surrogate, or control character within the specified string.</p>\\n\"\n  syntax:\n    content: public static int[] ParseCombiningCharacters(string str)\n    content.vb: Public Shared Function ParseCombiningCharacters(str As String) As Integer()\n    parameters:\n    - id: str\n      type: System.String\n      description: \"\\n<p>The string to search. </p>\\n\"\n    return:\n      type: System.Int32[]\n      description: \"\\n<p>An array of integers that contains the zero-based indexes of each base character, high surrogate, or control character within the specified string.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>str</em> is <strong>null</strong>. </p>\\n\"\n  seealso:\n  - type: System.Globalization.StringInfo.SubstringByTextElements\n    commentId: Overload:System.Globalization.StringInfo.SubstringByTextElements\n  - type: System.Globalization.StringInfo.LengthInTextElements\n    commentId: P:System.Globalization.StringInfo.LengthInTextElements\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: StringInfo.ParseCombiningCharacters(String)\nreferences:\n- uid: System.Globalization\n  isExternal: false\n  name: System.Globalization\n  fullName: System.Globalization\n  nameWithType: System.Globalization\n  commentId: N:System.Globalization\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Globalization.TextElementEnumerator\n  parent: System.Globalization\n  isExternal: false\n  name: TextElementEnumerator\n  fullName: System.Globalization.TextElementEnumerator\n  nameWithType: TextElementEnumerator\n  commentId: T:System.Globalization.TextElementEnumerator\n- uid: System.Int32[]\n  name: Int32[]\n  fullName: System.Int32[]\n  fullname.vb: System.Int32()\n  name.vb: Int32()\n  spec.csharp:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Int32\n    name: Int32\n    fullName: System.Int32\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Int32[]\n  nameWithType.vb: Int32()\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n"}