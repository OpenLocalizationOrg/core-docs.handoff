{"nodes":[{"pos":[2800,2826],"content":"SqlConnectionStringBuilder","needQuote":true,"nodes":[{"content":"SqlConnectionStringBuilder","pos":[0,26]}]},{"pos":[4175,4203],"content":"SqlConnectionStringBuilder()","needQuote":true,"nodes":[{"content":"SqlConnectionStringBuilder()","pos":[0,28]}]},{"pos":[5379,5413],"content":"SqlConnectionStringBuilder(String)","needQuote":true,"nodes":[{"content":"SqlConnectionStringBuilder(String)","pos":[0,34]}]},{"content":"\\n&lt;p&gt;Invalid key name within the connection string.&lt;/p&gt;\\n","pos":[6818,6875],"source":"\\n<p>Invalid key name within the connection string.</p>\\n"},{"content":"\\n&lt;p&gt;Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).&lt;/p&gt;\\n","pos":[6968,7100],"source":"\\n<p>Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</p>\\n"},{"content":"\\n&lt;p&gt;The supplied &lt;em&gt;connectionString&lt;/em&gt; is not valid.&lt;/p&gt;\\n","pos":[7197,7260],"source":"\\n<p>The supplied <em>connectionString</em> is not valid.</p>\\n"},{"pos":[7672,7689],"content":"ApplicationIntent","needQuote":true,"nodes":[{"content":"ApplicationIntent","pos":[0,17]}]},{"pos":[9433,9448],"content":"ApplicationName","needQuote":true,"nodes":[{"content":"ApplicationName","pos":[0,15]}]},{"pos":[10996,11012],"content":"AttachDBFilename","needQuote":true,"nodes":[{"content":"AttachDBFilename","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The value of the &lt;strong&gt;AttachDBFilename&lt;/strong&gt; property, or &lt;strong&gt;String.Empty&lt;/strong&gt; if no value has been supplied.&lt;/p&gt;\\n","pos":[11864,11999],"source":"\\n<p>The value of the <strong>AttachDBFilename</strong> property, or <strong>String.Empty</strong> if no value has been supplied.</p>\\n"},{"pos":[12649,12666],"content":"ConnectRetryCount","needQuote":true,"nodes":[{"content":"ConnectRetryCount","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The number of reconnections attempted after identifying that there was an idle connection failure.&lt;/p&gt;\\n","pos":[13825,13934],"source":"\\n<p>The number of reconnections attempted after identifying that there was an idle connection failure.</p>\\n"},{"pos":[14354,14374],"content":"ConnectRetryInterval","needQuote":true,"nodes":[{"content":"ConnectRetryInterval","pos":[0,20]}]},{"content":"\\n&lt;p&gt;Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure.&lt;/p&gt;\\n","pos":[15519,15652],"source":"\\n<p>Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure.</p>\\n"},{"pos":[16057,16071],"content":"ConnectTimeout","needQuote":true,"nodes":[{"content":"ConnectTimeout","pos":[0,14]}]},{"pos":[17529,17544],"content":"CurrentLanguage","needQuote":true,"nodes":[{"content":"CurrentLanguage","pos":[0,15]}]},{"pos":[19165,19175],"content":"DataSource","needQuote":true,"nodes":[{"content":"DataSource","pos":[0,10]}]},{"pos":[20789,20796],"content":"Encrypt","needQuote":true,"nodes":[{"content":"Encrypt","pos":[0,7]}]},{"pos":[22257,22272],"content":"FailoverPartner","needQuote":true,"nodes":[{"content":"FailoverPartner","pos":[0,15]}]},{"pos":[23951,23965],"content":"InitialCatalog","needQuote":true,"nodes":[{"content":"InitialCatalog","pos":[0,14]}]},{"pos":[25620,25638],"content":"IntegratedSecurity","needQuote":true,"nodes":[{"content":"IntegratedSecurity","pos":[0,18]}]},{"pos":[27247,27259],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The key of the item to get or set.&lt;/p&gt;\\n","pos":[28101,28146],"source":"\\n<p>The key of the item to get or set.</p>\\n"},{"content":"\\n&lt;p&gt;The value associated with the specified key.","pos":[28206,28255],"source":"\\n<p>The value associated with the specified key."},{"content":"&lt;/p&gt;\\n","pos":[28256,28262],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is a null reference (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[28381,28474],"source":"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"content":"\\n&lt;p&gt;Tried to add a key that does not exist within the available keys.&lt;/p&gt;\\n","pos":[28617,28693],"source":"\\n<p>Tried to add a key that does not exist within the available keys.</p>\\n"},{"content":"\\n&lt;p&gt;Invalid value within the connection string (specifically, a Boolean or numeric value was expected but not supplied).&lt;/p&gt;\\n","pos":[28786,28913],"source":"\\n<p>Invalid value within the connection string (specifically, a Boolean or numeric value was expected but not supplied).</p>\\n"},{"pos":[29474,29478],"content":"Keys","needQuote":true,"nodes":[{"content":"Keys","pos":[0,4]}]},{"pos":[31432,31450],"content":"LoadBalanceTimeout","needQuote":true,"nodes":[{"content":"LoadBalanceTimeout","pos":[0,18]}]},{"pos":[32884,32895],"content":"MaxPoolSize","needQuote":true,"nodes":[{"content":"MaxPoolSize","pos":[0,11]}]},{"pos":[34287,34298],"content":"MinPoolSize","needQuote":true,"nodes":[{"content":"MinPoolSize","pos":[0,11]}]},{"pos":[35727,35751],"content":"MultipleActiveResultSets","needQuote":true,"nodes":[{"content":"MultipleActiveResultSets","pos":[0,24]}]},{"pos":[37505,37524],"content":"MultiSubnetFailover","needQuote":true,"nodes":[{"content":"MultiSubnetFailover","pos":[0,19]}]},{"pos":[39431,39441],"content":"PacketSize","needQuote":true,"nodes":[{"content":"PacketSize","pos":[0,10]}]},{"pos":[40810,40818],"content":"Password","needQuote":true,"nodes":[{"content":"Password","pos":[0,8]}]},{"content":"\\n&lt;p&gt;The password was incorrectly set to null.","pos":[41895,41941],"source":"\\n<p>The password was incorrectly set to null."},{"content":"See code sample below.&lt;/p&gt;\\n","pos":[41943,41971],"source":"  See code sample below.</p>\\n"},{"pos":[42379,42398],"content":"PersistSecurityInfo","needQuote":true,"nodes":[{"content":"PersistSecurityInfo","pos":[0,19]}]},{"pos":[43937,43944],"content":"Pooling","needQuote":true,"nodes":[{"content":"Pooling","pos":[0,7]}]},{"pos":[45366,45377],"content":"Replication","needQuote":true,"nodes":[{"content":"Replication","pos":[0,11]}]},{"pos":[46791,46813],"content":"TrustServerCertificate","needQuote":true,"nodes":[{"content":"TrustServerCertificate","pos":[0,22]}]},{"content":"\\n&lt;p&gt;A &lt;strong&gt;Boolean&lt;/strong&gt;.","pos":[47697,47729],"source":"\\n<p>A <strong>Boolean</strong>."},{"content":"Recognized values are &lt;strong&gt;true&lt;/strong&gt;, &lt;strong&gt;false&lt;/strong&gt;, &lt;strong&gt;yes&lt;/strong&gt;, and &lt;strong&gt;no&lt;/strong&gt;.","pos":[47730,47845],"source":" Recognized values are <strong>true</strong>, <strong>false</strong>, <strong>yes</strong>, and <strong>no</strong>."},{"content":"&lt;/p&gt;\\n","pos":[47846,47852],"source":" </p>\\n"},{"pos":[48268,48285],"content":"TypeSystemVersion","needQuote":true,"nodes":[{"content":"TypeSystemVersion","pos":[0,17]}]},{"pos":[50206,50212],"content":"UserID","needQuote":true,"nodes":[{"content":"UserID","pos":[0,6]}]},{"pos":[51798,51810],"content":"UserInstance","needQuote":true,"nodes":[{"content":"UserInstance","pos":[0,12]}]},{"pos":[53529,53535],"content":"Values","needQuote":true,"nodes":[{"content":"Values","pos":[0,6]}]},{"pos":[55319,55332],"content":"WorkstationID","needQuote":true,"nodes":[{"content":"WorkstationID","pos":[0,13]}]},{"pos":[56939,56946],"content":"Clear()","needQuote":true,"nodes":[{"content":"Clear()","pos":[0,7]}]},{"pos":[58119,58138],"content":"ContainsKey(String)","needQuote":true,"nodes":[{"content":"ContainsKey(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is null (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic)&lt;/p&gt;\\n","pos":[59573,59653],"source":"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n"},{"pos":[60089,60103],"content":"Remove(String)","needQuote":true,"nodes":[{"content":"Remove(String)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the key existed within the connection string and was removed; &lt;strong&gt;false&lt;/strong&gt; if the key did not exist.&lt;/p&gt;\\n","pos":[61268,61416],"source":"\\n<p>\\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; is null (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic)&lt;/p&gt;\\n","pos":[61535,61615],"source":"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n"},{"pos":[62073,62096],"content":"ShouldSerialize(String)","needQuote":true,"nodes":[{"content":"ShouldSerialize(String)","pos":[0,23]}]},{"pos":[63971,64002],"content":"TryGetValue(String, out Object)","needQuote":true,"nodes":[{"content":"TryGetValue(String, out Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The key of the item to retrieve.&lt;/p&gt;\\n","pos":[64990,65033],"source":"\\n<p>The key of the item to retrieve.</p>\\n"},{"content":"\\n&lt;p&gt;The value corresponding to &lt;em&gt;keyword.&lt;/em&gt;&lt;/p&gt;\\n","pos":[65097,65152],"source":"\\n<p>The value corresponding to <em>keyword.</em></p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;keyword&lt;/em&gt; was found within the connection string; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[65213,65342],"source":"\\n<p>\\n<strong>true</strong> if <em>keyword</em> was found within the connection string; otherwise, <strong>false</strong>.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;keyword&lt;/em&gt; contains a null value (&lt;strong&gt;Nothing&lt;/strong&gt; in Visual Basic).&lt;/p&gt;\\n","pos":[65461,65556],"source":"\\n<p>\\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\\n"},{"pos":[66024,66045],"content":"System.Data.SqlClient","needQuote":true,"nodes":[{"content":"System.Data.SqlClient","pos":[0,21]}]},{"pos":[66221,66227],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[66348,66354],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[66485,66491],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[66677,66694],"content":"ApplicationIntent","needQuote":true,"nodes":[{"content":"ApplicationIntent","pos":[0,17]}]},{"pos":[66901,66906],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[67049,67056],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[67233,67244],"content":"ICollection","needQuote":true,"nodes":[{"content":"ICollection","pos":[0,11]}]},{"pos":[67416,67434],"content":"System.Collections","needQuote":true,"nodes":[{"content":"System.Collections","pos":[0,18]}]},{"pos":[67618,67638],"content":"KeyNotFoundException","needQuote":true,"nodes":[{"content":"KeyNotFoundException","pos":[0,20]}]},{"pos":[67874,67889],"content":"FormatException","needQuote":true,"nodes":[{"content":"FormatException","pos":[0,15]}]},{"pos":[68072,68089],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]},{"pos":[68265,68286],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]}],"content":"items:\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder\n  commentId: T:System.Data.SqlClient.SqlConnectionStringBuilder\n  id: SqlConnectionStringBuilder\n  parent: System.Data.SqlClient\n  children:\n  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor\n  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName\n  - System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Clear\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\n  - System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\n  - System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\n  - System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\n  - System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n  - System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\n  - System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\n  - System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\n  - System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\n  - System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover\n  - System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Password\n  - System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Replication\n  - System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate\n  - System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  - System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\n  - System.Data.SqlClient.SqlConnectionStringBuilder.UserID\n  - System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\n  - System.Data.SqlClient.SqlConnectionStringBuilder.Values\n  - System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\n  langs:\n  - csharp\n  - vb\n  name: SqlConnectionStringBuilder\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder\n  type: Class\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: SqlConnectionStringBuilder\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 18\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Provides a simple way to create and manage the contents of connection strings used by the <xref href=\\\"System.Data.SqlClient.SqlConnection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. </p>\\n\"\n  syntax:\n    content: 'public sealed class SqlConnectionStringBuilder : DbConnectionStringBuilder'\n    content.vb: >-\n      Public NotInheritable Class SqlConnectionStringBuilder\n          Inherits DbConnectionStringBuilder\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: SqlConnectionStringBuilder\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor\n  id: '#ctor'\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: SqlConnectionStringBuilder()\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder()\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 191\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: public SqlConnectionStringBuilder()\n    content.vb: Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder()\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: SqlConnectionStringBuilder(String)\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 195\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class. The provided connection string provides the data for the instance's internal connection information.</p>\\n\"\n  syntax:\n    content: public SqlConnectionStringBuilder(string connectionString)\n    content.vb: Public Sub New(connectionString As String)\n    parameters:\n    - id: connectionString\n      type: System.String\n      description: \"\\n<p>The basis for the object's internal connection information. Parsed into name/value pairs. Invalid key names raise <xref href=\\\"System.Collections.Generic.KeyNotFoundException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: \"\\n<p>Invalid key name within the connection string.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>The supplied <em>connectionString</em> is not valid.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent\n  id: ApplicationIntent\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ApplicationIntent\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ApplicationIntent\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 261\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Declares the application workload type when connecting to a database in an SQL Server Availability Group. You can set the value of this property with <xref href=\\\"System.Data.SqlClient.ApplicationIntent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. For more information about SqlClient support for Always On Availability Groups, see SqlClient Support for High Availability, Disaster Recovery.</p>\\n\"\n  syntax:\n    content: public ApplicationIntent ApplicationIntent { get; set; }\n    content.vb: Public Property ApplicationIntent As ApplicationIntent\n    parameters: []\n    return:\n      type: System.Data.SqlClient.ApplicationIntent\n      description: \"\\n<p>Returns the current value of the property (a value of type <xref href=\\\"System.Data.SqlClient.ApplicationIntent\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.ApplicationIntent\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName\n  id: ApplicationName\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ApplicationName\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ApplicationName\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 276\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the name of the application associated with the connection string.</p>\\n\"\n  syntax:\n    content: public string ApplicationName { get; set; }\n    content.vb: Public Property ApplicationName As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the application, or \\\".NET SqlClient Data Provider\\\" if no name has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.ApplicationName\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename\n  id: AttachDBFilename\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: AttachDBFilename\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: AttachDBFilename\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 286\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a string that contains the name of the primary data file. This includes the full path name of an attachable database.</p>\\n\"\n  syntax:\n    content: public string AttachDBFilename { get; set; }\n    content.vb: Public Property AttachDBFilename As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <strong>AttachDBFilename</strong> property, or <strong>String.Empty</strong> if no value has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.AttachDBFilename\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount\n  id: ConnectRetryCount\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ConnectRetryCount\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectRetryCount\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 408\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>The number of reconnections attempted after identifying that there was an idle connection failure. This must be an integer between 0 and 255. Default is 1. Set to 0 to disable reconnecting on idle connection failures. An <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be thrown if set to a value outside of the allowed range.</p>\\n\"\n  syntax:\n    content: public int ConnectRetryCount { get; set; }\n    content.vb: Public Property ConnectRetryCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of reconnections attempted after identifying that there was an idle connection failure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.ConnectRetryCount\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval\n  id: ConnectRetryInterval\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ConnectRetryInterval\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectRetryInterval\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 422\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\\n<p>Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure. This must be an integer between 1 and 60. The default is 10 seconds. An <xref href=\\\"System.ArgumentException\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> will be thrown if set to a value outside of the allowed range.</p>\\n\"\n  syntax:\n    content: public int ConnectRetryInterval { get; set; }\n    content.vb: Public Property ConnectRetryInterval As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>Amount of time (in seconds) between each reconnection attempt after identifying that there was an idle connection failure.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.ConnectRetryInterval\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\n  id: ConnectTimeout\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ConnectTimeout\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ConnectTimeout\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 296\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the length of time (in seconds) to wait for a connection to the server before terminating the attempt and generating an error.</p>\\n\"\n  syntax:\n    content: public int ConnectTimeout { get; set; }\n    content.vb: Public Property ConnectTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or 15 seconds if no value has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.ConnectTimeout\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\n  id: CurrentLanguage\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: CurrentLanguage\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: CurrentLanguage\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 310\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the SQL Server Language record name.</p>\\n\"\n  syntax:\n    content: public string CurrentLanguage { get; set; }\n    content.vb: Public Property CurrentLanguage As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if no value has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.CurrentLanguage\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\n  id: DataSource\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: DataSource\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: DataSource\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 320\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the name or network address of the instance of SQL Server to connect to.</p>\\n\"\n  syntax:\n    content: public string DataSource { get; set; }\n    content.vb: Public Property DataSource As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.DataSource\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.DataSource\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\n  id: Encrypt\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Encrypt\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Encrypt\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 330\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a Boolean value that indicates whether SQL Server uses SSL encryption for all data sent between the client and server if the server has a certificate installed.</p>\\n\"\n  syntax:\n    content: public bool Encrypt { get; set; }\n    content.vb: Public Property Encrypt As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.Encrypt\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\n  id: FailoverPartner\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: FailoverPartner\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FailoverPartner\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 350\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the name or address of the partner server to connect to if the primary server is down.</p>\\n\"\n  syntax:\n    content: public string FailoverPartner { get; set; }\n    content.vb: Public Property FailoverPartner As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.FailoverPartner\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\n  id: InitialCatalog\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: InitialCatalog\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: InitialCatalog\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 360\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the name of the database associated with the connection.</p>\\n\"\n  syntax:\n    content: public string InitialCatalog { get; set; }\n    content.vb: Public Property InitialCatalog As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.InitialCatalog\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\n  id: IntegratedSecurity\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: IntegratedSecurity\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IntegratedSecurity\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 370\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a Boolean value that indicates whether User ID and Password are specified in the connection (when <strong>false</strong>) or whether the current Windows account credentials are used for authentication (when <strong>true</strong>).</p>\\n\"\n  syntax:\n    content: public bool IntegratedSecurity { get; set; }\n    content.vb: Public Property IntegratedSecurity As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.IntegratedSecurity\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 203\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</p>\\n\"\n  syntax:\n    content: public override object this[string keyword] { get; set; }\n    content.vb: Public Overrides Property Item(keyword As String) As Object\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the item to get or set.</p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The value associated with the specified key. </p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is a null reference (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  - type: System.Collections.Generic.KeyNotFoundException\n    commentId: T:System.Collections.Generic.KeyNotFoundException\n    description: \"\\n<p>Tried to add a key that does not exist within the available keys.</p>\\n\"\n  - type: System.FormatException\n    commentId: T:System.FormatException\n    description: \"\\n<p>Invalid value within the connection string (specifically, a Boolean or numeric value was expected but not supplied).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: SqlConnectionStringBuilder.Item[String]\n  nameWithType.vb: SqlConnectionStringBuilder.Item(String)\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n  id: Keys\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Keys\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Keys\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 581\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override ICollection Keys { get; }\n    content.vb: Public Overrides ReadOnly Property Keys As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the keys in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Values\n    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Values\n  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnectionStringBuilder.Keys\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\n  id: LoadBalanceTimeout\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: LoadBalanceTimeout\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: LoadBalanceTimeout\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 380\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before being destroyed.</p>\\n\"\n  syntax:\n    content: public int LoadBalanceTimeout { get; set; }\n    content.vb: Public Property LoadBalanceTimeout As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or 0 if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.LoadBalanceTimeout\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\n  id: MaxPoolSize\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: MaxPoolSize\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MaxPoolSize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 394\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.</p>\\n\"\n  syntax:\n    content: public int MaxPoolSize { get; set; }\n    content.vb: Public Property MaxPoolSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or 100 if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.MaxPoolSize\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\n  id: MinPoolSize\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: MinPoolSize\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MinPoolSize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 438\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.</p>\\n\"\n  syntax:\n    content: public int MinPoolSize { get; set; }\n    content.vb: Public Property MinPoolSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or 0 if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.MinPoolSize\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\n  id: MultipleActiveResultSets\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: MultipleActiveResultSets\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultipleActiveResultSets\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 452\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>When true, an application can maintain multiple active result sets (MARS). When false, an application must process or cancel all result sets from one batch before it can execute any other batch on that connection.</p>\\n<p>For more information, see <see href=\\\"http://msdn.microsoft.com//library/cfa084cz.aspx\\\">Multiple Active Result Sets (MARS)</see>.</p>\\n\"\n  syntax:\n    content: public bool MultipleActiveResultSets { get; set; }\n    content.vb: Public Property MultipleActiveResultSets As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.MultipleActiveResultSets\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover\n  id: MultiSubnetFailover\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: MultiSubnetFailover\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MultiSubnetFailover\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 462\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>If your application is connecting to an AlwaysOn availability group (AG) on different subnets, setting MultiSubnetFailover=true provides faster detection of and connection to the (currently) active server. For more information about SqlClient support for Always On Availability Groups, see SqlClient Support for High Availability, Disaster Recovery.</p>\\n\"\n  syntax:\n    content: >-\n      [SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", Justification = \"Reviewed and Approved by UE\")]\n\n      public bool MultiSubnetFailover { get; set; }\n    content.vb: >-\n      <SuppressMessage(\"Microsoft.Naming\", \"CA1704:IdentifiersShouldBeSpelledCorrectly\", Justification:=\"Reviewed and Approved by UE\")>\n\n      Public Property MultiSubnetFailover As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>Returns <xref href=\\\"System.Boolean\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> indicating the current value of the property.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.MultiSubnetFailover\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\n  id: PacketSize\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: PacketSize\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PacketSize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 486\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the size in bytes of the network packets used to communicate with an instance of SQL Server.</p>\\n\"\n  syntax:\n    content: public int PacketSize { get; set; }\n    content.vb: Public Property PacketSize As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or 8000 if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.PacketSize\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Password\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Password\n  id: Password\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Password\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Password\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Password\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 500\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the password for the SQL Server account.</p>\\n\"\n  syntax:\n    content: public string Password { get; set; }\n    content.vb: Public Property Password As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.Password\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>The password was incorrectly set to null.  See code sample below.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.Password\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\n  id: PersistSecurityInfo\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: PersistSecurityInfo\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: PersistSecurityInfo\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 510\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.</p>\\n\"\n  syntax:\n    content: public bool PersistSecurityInfo { get; set; }\n    content.vb: Public Property PersistSecurityInfo As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>false</strong> if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.PersistSecurityInfo\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\n  id: Pooling\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Pooling\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Pooling\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 520\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a Boolean value that indicates whether the connection will be pooled or explicitly opened every time that the connection is requested.</p>\\n\"\n  syntax:\n    content: public bool Pooling { get; set; }\n    content.vb: Public Property Pooling As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.Pooling\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>true</strong> if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.Pooling\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Replication\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Replication\n  id: Replication\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Replication\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Replication\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Replication\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 530\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a Boolean value that indicates whether replication is supported using the connection.</p>\\n\"\n  syntax:\n    content: public bool Replication { get; set; }\n    content.vb: Public Property Replication As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.Replication\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or false if none has been supplied.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.Replication\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate\n  id: TrustServerCertificate\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: TrustServerCertificate\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TrustServerCertificate\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 340\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a value that indicates whether the channel will be encrypted while bypassing walking the certificate chain to validate trust.</p>\\n\"\n  syntax:\n    content: public bool TrustServerCertificate { get; set; }\n    content.vb: Public Property TrustServerCertificate As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>A <strong>Boolean</strong>. Recognized values are <strong>true</strong>, <strong>false</strong>, <strong>yes</strong>, and <strong>no</strong>. </p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.TrustServerCertificate\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\n  id: TypeSystemVersion\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: TypeSystemVersion\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TypeSystemVersion\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 540\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a string value that indicates the type system the application expects.</p>\\n\"\n  syntax:\n    content: public string TypeSystemVersion { get; set; }\n    content.vb: Public Property TypeSystemVersion As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The following table shows the possible values for the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property:</p>\\n<p>Value</p>\\n<p>Description</p>\\n<table><tbody><tr><td>\\n<p>SQL Server 2005</p>\\n</td><td>\\n<p>Uses the SQL Server 2005 type system. No conversions are made for the current version of ADO.NET.</p>\\n</td></tr><tr><td>\\n<p>SQL Server 2008</p>\\n</td><td>\\n<p>Uses the SQL Server 2008 type system.</p>\\n</td></tr><tr><td>\\n<p>Latest</p>\\n</td><td>\\n<p>Use the latest version than this client-server pair can handle. This will automatically move forward as the client and server components are upgraded.</p>\\n</td></tr></tbody></table>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.TypeSystemVersion\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserID\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.UserID\n  id: UserID\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: UserID\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserID\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserID\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 550\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the user ID to be used when connecting to SQL Server.</p>\\n\"\n  syntax:\n    content: public string UserID { get; set; }\n    content.vb: Public Property UserID As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.UserID\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.UserID\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\n  id: UserInstance\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: UserInstance\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: UserInstance\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 560\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets a value that indicates whether to redirect the connection from the default SQL Server Express instance to a runtime-initiated instance running under the account of the caller.</p>\\n\"\n  syntax:\n    content: public bool UserInstance { get; set; }\n    content.vb: Public Property UserInstance As Boolean\n    parameters: []\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>False</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.UserInstance\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Values\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Values\n  id: Values\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Values\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Values\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Values\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 589\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets an <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the values in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override ICollection Values { get; }\n    content.vb: Public Overrides ReadOnly Property Values As ICollection\n    parameters: []\n    return:\n      type: System.Collections.ICollection\n      description: \"\\n<p>An <xref href=\\\"System.Collections.ICollection\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that contains the values in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  seealso:\n  - type: System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n    commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.Keys\n  modifiers.csharp:\n  - public\n  - override\n  - get\n  modifiers.vb:\n  - Public\n  - Overrides\n  - ReadOnly\n  nameWithType: SqlConnectionStringBuilder.Values\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\n  commentId: P:System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\n  id: WorkstationID\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: WorkstationID\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: WorkstationID\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 570\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Gets or sets the name of the workstation connecting to SQL Server.</p>\\n\"\n  syntax:\n    content: public string WorkstationID { get; set; }\n    content.vb: Public Property WorkstationID As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The value of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> property, or <strong>String.Empty</strong> if none has been supplied.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>To set the value to null, use <xref href=\\\"System.DBNull.Value\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  - set\n  modifiers.vb:\n  - Public\n  nameWithType: SqlConnectionStringBuilder.WorkstationID\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Clear\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.Clear\n  id: Clear\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Clear()\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Clear()\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Clear\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 604\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Clears the contents of the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override void Clear()\n    content.vb: Public Overrides Sub Clear\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnectionStringBuilder.Clear()\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)\n  id: ContainsKey(System.String)\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ContainsKey(String)\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ContainsKey\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 613\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Determines whether the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains a specific key.</p>\\n\"\n  syntax:\n    content: public override bool ContainsKey(string keyword)\n    content.vb: Public Overrides Function ContainsKey(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>true if the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an element that has the specified key; otherwise, false.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnectionStringBuilder.ContainsKey(String)\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\n  id: Remove(System.String)\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: Remove(String)\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: Remove\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 691\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Removes the entry with the specified key from the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override bool Remove(string keyword)\n    content.vb: Public Overrides Function Remove(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the key/value pair to be removed from the connection string in this <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the key existed within the connection string and was removed; <strong>false</strong> if the key did not exist.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> is null (<strong>Nothing</strong> in Visual Basic)</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnectionStringBuilder.Remove(String)\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)\n  id: ShouldSerialize(System.String)\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: ShouldSerialize(String)\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: ShouldSerialize\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 819\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Indicates whether the specified key exists in this <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instance.</p>\\n\"\n  syntax:\n    content: public override bool ShouldSerialize(string keyword)\n    content.vb: Public Overrides Function ShouldSerialize(keyword As String) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key to locate in the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> contains an entry with the specified key; otherwise, <strong>false</strong>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  nameWithType: SqlConnectionStringBuilder.ShouldSerialize(String)\n- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  commentId: M:System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)\n  id: TryGetValue(System.String,System.Object@)\n  parent: System.Data.SqlClient.SqlConnectionStringBuilder\n  langs:\n  - csharp\n  - vb\n  name: TryGetValue(String, out Object)\n  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String, out System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: TryGetValue\n    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionStringBuilder.cs\n    startLine: 826\n  assemblies:\n  - System.Data.SqlClient\n  namespace: System.Data.SqlClient\n  summary: \"\\n<p>Retrieves a value corresponding to the supplied key from this <xref href=\\\"System.Data.SqlClient.SqlConnectionStringBuilder\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: public override bool TryGetValue(string keyword, out object value)\n    content.vb: Public Overrides Function TryGetValue(keyword As String, ByRef value As Object) As Boolean\n    parameters:\n    - id: keyword\n      type: System.String\n      description: \"\\n<p>The key of the item to retrieve.</p>\\n\"\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The value corresponding to <em>keyword.</em></p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>keyword</em> was found within the connection string; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>keyword</em> contains a null value (<strong>Nothing</strong> in Visual Basic).</p>\\n\"\n  modifiers.csharp:\n  - public\n  - override\n  modifiers.vb:\n  - Public\n  - Overrides\n  fullName.vb: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String, ByRef System.Object)\n  name.vb: TryGetValue(String, ByRef Object)\n  nameWithType: SqlConnectionStringBuilder.TryGetValue(String, out Object)\n  nameWithType.vb: SqlConnectionStringBuilder.TryGetValue(String, ByRef Object)\nreferences:\n- uid: System.Data.SqlClient\n  isExternal: false\n  name: System.Data.SqlClient\n  fullName: System.Data.SqlClient\n  nameWithType: System.Data.SqlClient\n  commentId: N:System.Data.SqlClient\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Data.SqlClient.ApplicationIntent\n  parent: System.Data.SqlClient\n  isExternal: false\n  name: ApplicationIntent\n  fullName: System.Data.SqlClient.ApplicationIntent\n  nameWithType: ApplicationIntent\n  commentId: T:System.Data.SqlClient.ApplicationIntent\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Collections.ICollection\n  parent: System.Collections\n  isExternal: false\n  name: ICollection\n  fullName: System.Collections.ICollection\n  nameWithType: ICollection\n  commentId: T:System.Collections.ICollection\n- uid: System.Collections\n  isExternal: false\n  name: System.Collections\n  fullName: System.Collections\n  nameWithType: System.Collections\n  commentId: N:System.Collections\n- uid: System.Collections.Generic.KeyNotFoundException\n  isExternal: false\n  name: KeyNotFoundException\n  fullName: System.Collections.Generic.KeyNotFoundException\n  nameWithType: KeyNotFoundException\n  commentId: T:System.Collections.Generic.KeyNotFoundException\n- uid: System.FormatException\n  parent: System\n  isExternal: false\n  name: FormatException\n  fullName: System.FormatException\n  nameWithType: FormatException\n  commentId: T:System.FormatException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n"}