{"nodes":[{"pos":[1548,1559],"content":"IDataRecord","needQuote":true,"nodes":[{"content":"IDataRecord","pos":[0,11]}]},{"pos":[2522,2532],"content":"FieldCount","needQuote":true,"nodes":[{"content":"FieldCount","pos":[0,10]}]},{"content":"\\n&lt;p&gt;When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record.","pos":[3168,3273],"source":"\\n<p>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record."},{"content":"The default is -1.&lt;/p&gt;\\n","pos":[3274,3298],"source":" The default is -1.</p>\\n"},{"pos":[3598,3609],"content":"Item[Int32]","needQuote":true,"nodes":[{"content":"Item[Int32]","pos":[0,11]}]},{"content":"\\n&lt;p&gt;The zero-based index of the column to get.","pos":[4258,4305],"source":"\\n<p>The zero-based index of the column to get."},{"content":"&lt;/p&gt;\\n","pos":[4306,4312],"source":" </p>\\n"},{"pos":[5217,5229],"content":"Item[String]","needQuote":true,"nodes":[{"content":"Item[String]","pos":[0,12]}]},{"content":"\\n&lt;p&gt;The name of the column to find.","pos":[5884,5920],"source":"\\n<p>The name of the column to find."},{"content":"&lt;/p&gt;\\n","pos":[5921,5927],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;No column with the specified name was found.","pos":[6238,6287],"source":"\\n<p>No column with the specified name was found."},{"content":"&lt;/p&gt;\\n","pos":[6288,6294],"source":" </p>\\n"},{"pos":[6741,6758],"content":"GetBoolean(Int32)","needQuote":true,"nodes":[{"content":"GetBoolean(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[7413,7448],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[7449,7455],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The value of the column.&lt;/p&gt;\\n","pos":[7516,7551],"source":"\\n<p>The value of the column.</p>\\n"},{"pos":[8094,8108],"content":"GetByte(Int32)","needQuote":true,"nodes":[{"content":"GetByte(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[8758,8793],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[8794,8800],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 8-bit unsigned integer value of the specified column.&lt;/p&gt;\\n","pos":[8858,8926],"source":"\\n<p>The 8-bit unsigned integer value of the specified column.</p>\\n"},{"pos":[9628,9672],"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetBytes(Int32, Int64, Byte[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[10589,10624],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[10625,10631],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the field from which to start the read operation.","pos":[10700,10771],"source":"\\n<p>The index within the field from which to start the read operation."},{"content":"&lt;/p&gt;\\n","pos":[10772,10778],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to read the stream of bytes.","pos":[10843,10898],"source":"\\n<p>The buffer into which to read the stream of bytes."},{"content":"&lt;/p&gt;\\n","pos":[10899,10905],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index for &lt;em&gt;buffer&lt;/em&gt; to start the read operation.","pos":[10975,11038],"source":"\\n<p>The index for <em>buffer</em> to start the read operation."},{"content":"&lt;/p&gt;\\n","pos":[11039,11045],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to read.","pos":[11109,11142],"source":"\\n<p>The number of bytes to read."},{"content":"&lt;/p&gt;\\n","pos":[11143,11149],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of bytes read.&lt;/p&gt;\\n","pos":[11208,11251],"source":"\\n<p>The actual number of bytes read.</p>\\n"},{"pos":[12072,12086],"content":"GetChar(Int32)","needQuote":true,"nodes":[{"content":"GetChar(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[12723,12758],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[12759,12765],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The character value of the specified column.&lt;/p&gt;\\n","pos":[12823,12878],"source":"\\n<p>The character value of the specified column.</p>\\n"},{"pos":[13580,13624],"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","needQuote":true,"nodes":[{"content":"GetChars(Int32, Int64, Char[], Int32, Int32)","pos":[0,44]}]},{"content":"\\n&lt;p&gt;The zero-based column ordinal.","pos":[14546,14581],"source":"\\n<p>The zero-based column ordinal."},{"content":"&lt;/p&gt;\\n","pos":[14582,14588],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index within the row from which to start the read operation.","pos":[14657,14726],"source":"\\n<p>The index within the row from which to start the read operation."},{"content":"&lt;/p&gt;\\n","pos":[14727,14733],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The buffer into which to read the stream of bytes.","pos":[14798,14853],"source":"\\n<p>The buffer into which to read the stream of bytes."},{"content":"&lt;/p&gt;\\n","pos":[14854,14860],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index for &lt;em&gt;buffer&lt;/em&gt; to start the read operation.","pos":[14930,14993],"source":"\\n<p>The index for <em>buffer</em> to start the read operation."},{"content":"&lt;/p&gt;\\n","pos":[14994,15000],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The number of bytes to read.","pos":[15064,15097],"source":"\\n<p>The number of bytes to read."},{"content":"&lt;/p&gt;\\n","pos":[15098,15104],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The actual number of characters read.&lt;/p&gt;\\n","pos":[15163,15211],"source":"\\n<p>The actual number of characters read.</p>\\n"},{"pos":[16032,16046],"content":"GetData(Int32)","needQuote":true,"nodes":[{"content":"GetData(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[16776,16812],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[16813,16819],"source":" </p>\\n"},{"pos":[17585,17607],"content":"GetDataTypeName(Int32)","needQuote":true,"nodes":[{"content":"GetDataTypeName(Int32)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[18286,18322],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[18323,18329],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The data type information for the specified field.&lt;/p&gt;\\n","pos":[18389,18450],"source":"\\n<p>The data type information for the specified field.</p>\\n"},{"pos":[19010,19028],"content":"GetDateTime(Int32)","needQuote":true,"nodes":[{"content":"GetDateTime(Int32)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[19693,19729],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[19730,19736],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The date and time data value of the specified field.&lt;/p&gt;\\n","pos":[19798,19861],"source":"\\n<p>The date and time data value of the specified field.</p>\\n"},{"pos":[20414,20431],"content":"GetDecimal(Int32)","needQuote":true,"nodes":[{"content":"GetDecimal(Int32)","pos":[0,17]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[21098,21134],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[21135,21141],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The fixed-position numeric value of the specified field.&lt;/p&gt;\\n","pos":[21202,21269],"source":"\\n<p>The fixed-position numeric value of the specified field.</p>\\n"},{"pos":[21818,21834],"content":"GetDouble(Int32)","needQuote":true,"nodes":[{"content":"GetDouble(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[22505,22541],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[22542,22548],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The double-precision floating point number of the specified field.&lt;/p&gt;\\n","pos":[22608,22685],"source":"\\n<p>The double-precision floating point number of the specified field.</p>\\n"},{"pos":[23242,23261],"content":"GetFieldType(Int32)","needQuote":true,"nodes":[{"content":"GetFieldType(Int32)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[24200,24236],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[24237,24243],"source":" </p>\\n"},{"pos":[25186,25201],"content":"GetFloat(Int32)","needQuote":true,"nodes":[{"content":"GetFloat(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[25867,25903],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[25904,25910],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The single-precision floating point number of the specified field.&lt;/p&gt;\\n","pos":[25970,26047],"source":"\\n<p>The single-precision floating point number of the specified field.</p>\\n"},{"pos":[26588,26602],"content":"GetGuid(Int32)","needQuote":true,"nodes":[{"content":"GetGuid(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[27236,27272],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[27273,27279],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The GUID value of the specified field.&lt;/p&gt;\\n","pos":[27337,27386],"source":"\\n<p>The GUID value of the specified field.</p>\\n"},{"pos":[27929,27944],"content":"GetInt16(Int32)","needQuote":true,"nodes":[{"content":"GetInt16(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[28598,28634],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[28635,28641],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 16-bit signed integer value of the specified field.&lt;/p&gt;\\n","pos":[28700,28766],"source":"\\n<p>The 16-bit signed integer value of the specified field.</p>\\n"},{"pos":[29310,29325],"content":"GetInt32(Int32)","needQuote":true,"nodes":[{"content":"GetInt32(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[29979,30015],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[30016,30022],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 32-bit signed integer value of the specified field.&lt;/p&gt;\\n","pos":[30081,30147],"source":"\\n<p>The 32-bit signed integer value of the specified field.</p>\\n"},{"pos":[30691,30706],"content":"GetInt64(Int32)","needQuote":true,"nodes":[{"content":"GetInt64(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[31358,31394],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[31395,31401],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The 64-bit signed integer value of the specified field.&lt;/p&gt;\\n","pos":[31460,31526],"source":"\\n<p>The 64-bit signed integer value of the specified field.</p>\\n"},{"pos":[32067,32081],"content":"GetName(Int32)","needQuote":true,"nodes":[{"content":"GetName(Int32)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[32709,32745],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[32746,32752],"source":" </p>\\n"},{"pos":[33456,33474],"content":"GetOrdinal(String)","needQuote":true,"nodes":[{"content":"GetOrdinal(String)","pos":[0,18]}]},{"content":"\\n&lt;p&gt;The name of the field to find.","pos":[34125,34160],"source":"\\n<p>The name of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[34161,34167],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The index of the named field.&lt;/p&gt;\\n","pos":[34226,34266],"source":"\\n<p>The index of the named field.</p>\\n"},{"pos":[34532,34548],"content":"GetString(Int32)","needQuote":true,"nodes":[{"content":"GetString(Int32)","pos":[0,16]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[35193,35229],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[35230,35236],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The string value of the specified field.&lt;/p&gt;\\n","pos":[35296,35347],"source":"\\n<p>The string value of the specified field.</p>\\n"},{"pos":[35892,35907],"content":"GetValue(Int32)","needQuote":true,"nodes":[{"content":"GetValue(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[36543,36579],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[36580,36586],"source":" </p>\\n"},{"pos":[37338,37357],"content":"GetValues(Object[])","needQuote":true,"nodes":[{"content":"GetValues(Object[])","pos":[0,19]}]},{"pos":[38785,38800],"content":"IsDBNull(Int32)","needQuote":true,"nodes":[{"content":"IsDBNull(Int32)","pos":[0,15]}]},{"content":"\\n&lt;p&gt;The index of the field to find.","pos":[39445,39481],"source":"\\n<p>The index of the field to find."},{"content":"&lt;/p&gt;\\n","pos":[39482,39488],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified field is set to null; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[39549,39657],"source":"\\n<p>\\n<strong>true</strong> if the specified field is set to null; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[40046,40057],"content":"System.Data","needQuote":true,"nodes":[{"content":"System.Data","pos":[0,11]}]},{"pos":[40202,40207],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[40325,40331],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[40462,40468],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[40613,40619],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]},{"pos":[40765,40772],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[40918,40922],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41060,41065],"content":"Int64","needQuote":true,"nodes":[{"content":"Int64","pos":[0,5]}]},{"pos":[41170,41176],"content":"Byte[]","needQuote":true,"nodes":[{"content":"Byte[]","pos":[0,6]}]},{"pos":[41296,41300],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"content":"[]","pos":[41359,41361]},{"pos":[41424,41428],"content":"Byte","needQuote":true,"nodes":[{"content":"Byte","pos":[0,4]}]},{"pos":[41486,41488],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[41619,41623],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[41725,41731],"content":"Char[]","needQuote":true,"nodes":[{"content":"Char[]","pos":[0,6]}]},{"pos":[41851,41855],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"content":"[]","pos":[41914,41916]},{"pos":[41979,41983],"content":"Char","needQuote":true,"nodes":[{"content":"Char","pos":[0,4]}]},{"pos":[42041,42043],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[42191,42202],"content":"IDataReader","needQuote":true,"nodes":[{"content":"IDataReader","pos":[0,11]}]},{"pos":[42374,42382],"content":"DateTime","needQuote":true,"nodes":[{"content":"DateTime","pos":[0,8]}]},{"pos":[42534,42541],"content":"Decimal","needQuote":true,"nodes":[{"content":"Decimal","pos":[0,7]}]},{"pos":[42689,42695],"content":"Double","needQuote":true,"nodes":[{"content":"Double","pos":[0,6]}]},{"pos":[42838,42842],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[42981,42987],"content":"Single","needQuote":true,"nodes":[{"content":"Single","pos":[0,6]}]},{"pos":[43130,43134],"content":"Guid","needQuote":true,"nodes":[{"content":"Guid","pos":[0,4]}]},{"pos":[43272,43277],"content":"Int16","needQuote":true,"nodes":[{"content":"Int16","pos":[0,5]}]},{"pos":[43384,43392],"content":"Object[]","needQuote":true,"nodes":[{"content":"Object[]","pos":[0,8]}]},{"pos":[43520,43526],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":"[]","pos":[43587,43589]},{"pos":[43654,43660],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[43720,43722],"content":"()","needQuote":true,"nodes":[{"content":"()","pos":[0,2]}]},{"pos":[43860,43884],"content":"IndexOutOfRangeException","needQuote":true,"nodes":[{"content":"IndexOutOfRangeException","pos":[0,24]}]}],"content":"items:\n- uid: System.Data.IDataRecord\n  commentId: T:System.Data.IDataRecord\n  id: IDataRecord\n  parent: System.Data\n  children:\n  - System.Data.IDataRecord.FieldCount\n  - System.Data.IDataRecord.GetBoolean(System.Int32)\n  - System.Data.IDataRecord.GetByte(System.Int32)\n  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  - System.Data.IDataRecord.GetChar(System.Int32)\n  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  - System.Data.IDataRecord.GetData(System.Int32)\n  - System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  - System.Data.IDataRecord.GetDateTime(System.Int32)\n  - System.Data.IDataRecord.GetDecimal(System.Int32)\n  - System.Data.IDataRecord.GetDouble(System.Int32)\n  - System.Data.IDataRecord.GetFieldType(System.Int32)\n  - System.Data.IDataRecord.GetFloat(System.Int32)\n  - System.Data.IDataRecord.GetGuid(System.Int32)\n  - System.Data.IDataRecord.GetInt16(System.Int32)\n  - System.Data.IDataRecord.GetInt32(System.Int32)\n  - System.Data.IDataRecord.GetInt64(System.Int32)\n  - System.Data.IDataRecord.GetName(System.Int32)\n  - System.Data.IDataRecord.GetOrdinal(System.String)\n  - System.Data.IDataRecord.GetString(System.Int32)\n  - System.Data.IDataRecord.GetValue(System.Int32)\n  - System.Data.IDataRecord.GetValues(System.Object[])\n  - System.Data.IDataRecord.IsDBNull(System.Int32)\n  - System.Data.IDataRecord.Item(System.Int32)\n  - System.Data.IDataRecord.Item(System.String)\n  langs:\n  - csharp\n  - vb\n  name: IDataRecord\n  fullName: System.Data.IDataRecord\n  type: Interface\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IDataRecord\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 9\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Provides access to the column values within each row for a <strong>DataReader</strong>, and is implemented by .NET Framework data providers that access relational databases.</p>\\n\"\n  syntax:\n    content: public interface IDataRecord\n    content.vb: Public Interface IDataRecord\n  modifiers.csharp:\n  - public\n  - interface\n  modifiers.vb:\n  - Public\n  - Interface\n  nameWithType: IDataRecord\n- uid: System.Data.IDataRecord.FieldCount\n  commentId: P:System.Data.IDataRecord.FieldCount\n  id: FieldCount\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: FieldCount\n  fullName: System.Data.IDataRecord.FieldCount\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: FieldCount\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 12\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the number of columns in the current row.</p>\\n\"\n  syntax:\n    content: int FieldCount { get; }\n    content.vb: ReadOnly Property FieldCount As Integer\n    parameters: []\n    return:\n      type: System.Int32\n      description: \"\\n<p>When not positioned in a valid recordset, 0; otherwise, the number of columns in the current record. The default is -1.</p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  nameWithType: IDataRecord.FieldCount\n- uid: System.Data.IDataRecord.Item(System.Int32)\n  commentId: P:System.Data.IDataRecord.Item(System.Int32)\n  id: Item(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: Item[Int32]\n  fullName: System.Data.IDataRecord.Item[System.Int32]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 14\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the column located at the specified index.</p>\\n\"\n  syntax:\n    content: object this[int i] { get; }\n    content.vb: ReadOnly Property Item(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based index of the column to get. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The column located at the specified index as an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Data.IDataRecord.Item(System.Int32)\n  name.vb: Item(Int32)\n  nameWithType: IDataRecord.Item[Int32]\n  nameWithType.vb: IDataRecord.Item(Int32)\n- uid: System.Data.IDataRecord.Item(System.String)\n  commentId: P:System.Data.IDataRecord.Item(System.String)\n  id: Item(System.String)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: Item[String]\n  fullName: System.Data.IDataRecord.Item[System.String]\n  type: Property\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: this[]\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 16\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the column with the specified name.</p>\\n\"\n  syntax:\n    content: object this[string name] { get; }\n    content.vb: ReadOnly Property Item(name As String) As Object\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the column to find. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The column with the specified name as an <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>No column with the specified name was found. </p>\\n\"\n  modifiers.csharp:\n  - get\n  modifiers.vb:\n  - ReadOnly\n  fullName.vb: System.Data.IDataRecord.Item(System.String)\n  name.vb: Item(String)\n  nameWithType: IDataRecord.Item[String]\n  nameWithType.vb: IDataRecord.Item(String)\n- uid: System.Data.IDataRecord.GetBoolean(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)\n  id: GetBoolean(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetBoolean(Int32)\n  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBoolean\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 30\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the value of the specified column as a Boolean.</p>\\n\"\n  syntax:\n    content: bool GetBoolean(int i)\n    content.vb: Function GetBoolean(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>The value of the column.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetBoolean(Int32)\n- uid: System.Data.IDataRecord.GetByte(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)\n  id: GetByte(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetByte(Int32)\n  fullName: System.Data.IDataRecord.GetByte(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetByte\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 32\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the 8-bit unsigned integer value of the specified column.</p>\\n\"\n  syntax:\n    content: byte GetByte(int i)\n    content.vb: Function GetByte(i As Integer) As Byte\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Byte\n      description: \"\\n<p>The 8-bit unsigned integer value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetByte(Int32)\n- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetBytes\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 34\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\\n\"\n  syntax:\n    content: long GetBytes(int i, long fieldOffset, byte[] buffer, int bufferoffset, int length)\n    content.vb: Function GetBytes(i As Integer, fieldOffset As Long, buffer As Byte(), bufferoffset As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    - id: fieldOffset\n      type: System.Int64\n      description: \"\\n<p>The index within the field from which to start the read operation. </p>\\n\"\n    - id: buffer\n      type: System.Byte[]\n      description: \"\\n<p>The buffer into which to read the stream of bytes. </p>\\n\"\n    - id: bufferoffset\n      type: System.Int32\n      description: \"\\n<p>The index for <em>buffer</em> to start the read operation. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to read. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of bytes read.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  fullName.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)\n  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)\n  nameWithType: IDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)\n- uid: System.Data.IDataRecord.GetChar(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)\n  id: GetChar(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetChar(Int32)\n  fullName: System.Data.IDataRecord.GetChar(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChar\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 36\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the character value of the specified column.</p>\\n\"\n  syntax:\n    content: char GetChar(int i)\n    content.vb: Function GetChar(i As Integer) As Char\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    return:\n      type: System.Char\n      description: \"\\n<p>The character value of the specified column.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetChar(Int32)\n- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetChars(Int32, Int64, Char[], Int32, Int32)\n  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetChars\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 38\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</p>\\n\"\n  syntax:\n    content: long GetChars(int i, long fieldoffset, char[] buffer, int bufferoffset, int length)\n    content.vb: Function GetChars(i As Integer, fieldoffset As Long, buffer As Char(), bufferoffset As Integer, length As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The zero-based column ordinal. </p>\\n\"\n    - id: fieldoffset\n      type: System.Int64\n      description: \"\\n<p>The index within the row from which to start the read operation. </p>\\n\"\n    - id: buffer\n      type: System.Char[]\n      description: \"\\n<p>The buffer into which to read the stream of bytes. </p>\\n\"\n    - id: bufferoffset\n      type: System.Int32\n      description: \"\\n<p>The index for <em>buffer</em> to start the read operation. </p>\\n\"\n    - id: length\n      type: System.Int32\n      description: \"\\n<p>The number of bytes to read. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The actual number of characters read.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  fullName.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)\n  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)\n  nameWithType: IDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)\n  nameWithType.vb: IDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)\n- uid: System.Data.IDataRecord.GetData(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetData(System.Int32)\n  id: GetData(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetData(Int32)\n  fullName: System.Data.IDataRecord.GetData(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetData\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 58\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Returns an <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified column ordinal.</p>\\n\"\n  syntax:\n    content: IDataReader GetData(int i)\n    content.vb: Function GetData(i As Integer) As IDataReader\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Data.IDataReader\n      description: \"\\n<p>The <xref href=\\\"System.Data.IDataReader\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> for the specified column ordinal.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetData(Int32)\n- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  id: GetDataTypeName(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDataTypeName(Int32)\n  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDataTypeName\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 20\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the data type information for the specified field.</p>\\n\"\n  syntax:\n    content: string GetDataTypeName(int i)\n    content.vb: Function GetDataTypeName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The data type information for the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetDataTypeName(Int32)\n- uid: System.Data.IDataRecord.GetDateTime(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)\n  id: GetDateTime(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDateTime(Int32)\n  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDateTime\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 56\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the date and time data value of the specified field.</p>\\n\"\n  syntax:\n    content: DateTime GetDateTime(int i)\n    content.vb: Function GetDateTime(i As Integer) As Date\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.DateTime\n      description: \"\\n<p>The date and time data value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetDateTime(Int32)\n- uid: System.Data.IDataRecord.GetDecimal(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)\n  id: GetDecimal(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDecimal(Int32)\n  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDecimal\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 54\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the fixed-position numeric value of the specified field.</p>\\n\"\n  syntax:\n    content: decimal GetDecimal(int i)\n    content.vb: Function GetDecimal(i As Integer) As Decimal\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Decimal\n      description: \"\\n<p>The fixed-position numeric value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetDecimal(Int32)\n- uid: System.Data.IDataRecord.GetDouble(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)\n  id: GetDouble(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetDouble(Int32)\n  fullName: System.Data.IDataRecord.GetDouble(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetDouble\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 50\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the double-precision floating point number of the specified field.</p>\\n\"\n  syntax:\n    content: double GetDouble(int i)\n    content.vb: Function GetDouble(i As Integer) As Double\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Double\n      description: \"\\n<p>The double-precision floating point number of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetDouble(Int32)\n- uid: System.Data.IDataRecord.GetFieldType(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)\n  id: GetFieldType(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetFieldType(Int32)\n  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFieldType\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 22\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information corresponding to the type of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that would be returned from <xref href=\\\"System.Data.IDataRecord.GetValue(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: Type GetFieldType(int i)\n    content.vb: Function GetFieldType(i As Integer) As Type\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Type\n      description: \"\\n<p>The <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> information corresponding to the type of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that would be returned from <xref href=\\\"System.Data.IDataRecord.GetValue(System.Int32)\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetFieldType(Int32)\n- uid: System.Data.IDataRecord.GetFloat(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)\n  id: GetFloat(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetFloat(Int32)\n  fullName: System.Data.IDataRecord.GetFloat(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetFloat\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 48\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the single-precision floating point number of the specified field.</p>\\n\"\n  syntax:\n    content: float GetFloat(int i)\n    content.vb: Function GetFloat(i As Integer) As Single\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Single\n      description: \"\\n<p>The single-precision floating point number of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetFloat(Int32)\n- uid: System.Data.IDataRecord.GetGuid(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)\n  id: GetGuid(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetGuid(Int32)\n  fullName: System.Data.IDataRecord.GetGuid(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetGuid\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 40\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Returns the GUID value of the specified field.</p>\\n\"\n  syntax:\n    content: Guid GetGuid(int i)\n    content.vb: Function GetGuid(i As Integer) As Guid\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Guid\n      description: \"\\n<p>The GUID value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetGuid(Int32)\n- uid: System.Data.IDataRecord.GetInt16(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)\n  id: GetInt16(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt16(Int32)\n  fullName: System.Data.IDataRecord.GetInt16(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt16\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 42\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the 16-bit signed integer value of the specified field.</p>\\n\"\n  syntax:\n    content: short GetInt16(int i)\n    content.vb: Function GetInt16(i As Integer) As Short\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Int16\n      description: \"\\n<p>The 16-bit signed integer value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetInt16(Int32)\n- uid: System.Data.IDataRecord.GetInt32(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)\n  id: GetInt32(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt32(Int32)\n  fullName: System.Data.IDataRecord.GetInt32(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt32\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 44\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the 32-bit signed integer value of the specified field.</p>\\n\"\n  syntax:\n    content: int GetInt32(int i)\n    content.vb: Function GetInt32(i As Integer) As Integer\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The 32-bit signed integer value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetInt32(Int32)\n- uid: System.Data.IDataRecord.GetInt64(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)\n  id: GetInt64(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetInt64(Int32)\n  fullName: System.Data.IDataRecord.GetInt64(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetInt64\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 46\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the 64-bit signed integer value of the specified field.</p>\\n\"\n  syntax:\n    content: long GetInt64(int i)\n    content.vb: Function GetInt64(i As Integer) As Long\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Int64\n      description: \"\\n<p>The 64-bit signed integer value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetInt64(Int32)\n- uid: System.Data.IDataRecord.GetName(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetName(System.Int32)\n  id: GetName(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetName(Int32)\n  fullName: System.Data.IDataRecord.GetName(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetName\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 18\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the name for the field to find.</p>\\n\"\n  syntax:\n    content: string GetName(int i)\n    content.vb: Function GetName(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The name of the field or the empty string (\\\"\\\"), if there is no value to return.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetName(Int32)\n- uid: System.Data.IDataRecord.GetOrdinal(System.String)\n  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)\n  id: GetOrdinal(System.String)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetOrdinal(String)\n  fullName: System.Data.IDataRecord.GetOrdinal(System.String)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetOrdinal\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 28\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Return the index of the named field.</p>\\n\"\n  syntax:\n    content: int GetOrdinal(string name)\n    content.vb: Function GetOrdinal(name As String) As Integer\n    parameters:\n    - id: name\n      type: System.String\n      description: \"\\n<p>The name of the field to find. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The index of the named field.</p>\\n\"\n  nameWithType: IDataRecord.GetOrdinal(String)\n- uid: System.Data.IDataRecord.GetString(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetString(System.Int32)\n  id: GetString(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetString(Int32)\n  fullName: System.Data.IDataRecord.GetString(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetString\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 52\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Gets the string value of the specified field.</p>\\n\"\n  syntax:\n    content: string GetString(int i)\n    content.vb: Function GetString(i As Integer) As String\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.String\n      description: \"\\n<p>The string value of the specified field.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetString(Int32)\n- uid: System.Data.IDataRecord.GetValue(System.Int32)\n  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)\n  id: GetValue(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetValue(Int32)\n  fullName: System.Data.IDataRecord.GetValue(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValue\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 24\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Return the value of the specified field.</p>\\n\"\n  syntax:\n    content: object GetValue(int i)\n    content.vb: Function GetValue(i As Integer) As Object\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Object\n      description: \"\\n<p>The <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> which will contain the field value upon return.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.GetValue(Int32)\n- uid: System.Data.IDataRecord.GetValues(System.Object[])\n  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])\n  id: GetValues(System.Object[])\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: GetValues(Object[])\n  fullName: System.Data.IDataRecord.GetValues(System.Object[])\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: GetValues\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 26\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Populates an array of objects with the column values of the current record.</p>\\n\"\n  syntax:\n    content: int GetValues(object[] values)\n    content.vb: Function GetValues(values As Object()) As Integer\n    parameters:\n    - id: values\n      type: System.Object[]\n      description: \"\\n<p>An array of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> to copy the attribute fields into. </p>\\n\"\n    return:\n      type: System.Int32\n      description: \"\\n<p>The number of instances of <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> in the array.</p>\\n\"\n  fullName.vb: System.Data.IDataRecord.GetValues(System.Object())\n  name.vb: GetValues(Object())\n  nameWithType: IDataRecord.GetValues(Object[])\n  nameWithType.vb: IDataRecord.GetValues(Object())\n- uid: System.Data.IDataRecord.IsDBNull(System.Int32)\n  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)\n  id: IsDBNull(System.Int32)\n  parent: System.Data.IDataRecord\n  langs:\n  - csharp\n  - vb\n  name: IsDBNull(Int32)\n  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)\n  type: Method\n  source:\n    remote:\n      path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: IsDBNull\n    path: src/System.Data.Common/src/System/Data/IDataRecord.cs\n    startLine: 60\n  assemblies:\n  - System.Data.Common\n  namespace: System.Data\n  summary: \"\\n<p>Return whether the specified field is set to null.</p>\\n\"\n  syntax:\n    content: bool IsDBNull(int i)\n    content.vb: Function IsDBNull(i As Integer) As Boolean\n    parameters:\n    - id: i\n      type: System.Int32\n      description: \"\\n<p>The index of the field to find. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified field is set to null; otherwise, <strong>false</strong>.</p>\\n\"\n  exceptions:\n  - type: System.IndexOutOfRangeException\n    commentId: T:System.IndexOutOfRangeException\n    description: \"\\n<p>The index passed was outside the range of 0 through <xref href=\\\"System.Data.IDataRecord.FieldCount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>. </p>\\n\"\n  nameWithType: IDataRecord.IsDBNull(Int32)\nreferences:\n- uid: System.Data\n  isExternal: false\n  name: System.Data\n  fullName: System.Data\n  nameWithType: System.Data\n  commentId: N:System.Data\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Byte\n  parent: System\n  isExternal: false\n  name: Byte\n  fullName: System.Byte\n  nameWithType: Byte\n  commentId: T:System.Byte\n- uid: System.Int64\n  parent: System\n  isExternal: false\n  name: Int64\n  fullName: System.Int64\n  nameWithType: Int64\n  commentId: T:System.Int64\n- uid: System.Byte[]\n  name: Byte[]\n  fullName: System.Byte[]\n  fullname.vb: System.Byte()\n  name.vb: Byte()\n  spec.csharp:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Byte\n    name: Byte\n    fullName: System.Byte\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Byte[]\n  nameWithType.vb: Byte()\n- uid: System.Char\n  parent: System\n  isExternal: false\n  name: Char\n  fullName: System.Char\n  nameWithType: Char\n  commentId: T:System.Char\n- uid: System.Char[]\n  name: Char[]\n  fullName: System.Char[]\n  fullname.vb: System.Char()\n  name.vb: Char()\n  spec.csharp:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Char\n    name: Char\n    fullName: System.Char\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Char[]\n  nameWithType.vb: Char()\n- uid: System.Data.IDataReader\n  parent: System.Data\n  isExternal: false\n  name: IDataReader\n  fullName: System.Data.IDataReader\n  nameWithType: IDataReader\n  commentId: T:System.Data.IDataReader\n- uid: System.DateTime\n  parent: System\n  isExternal: false\n  name: DateTime\n  fullName: System.DateTime\n  nameWithType: DateTime\n  commentId: T:System.DateTime\n- uid: System.Decimal\n  parent: System\n  isExternal: false\n  name: Decimal\n  fullName: System.Decimal\n  nameWithType: Decimal\n  commentId: T:System.Decimal\n- uid: System.Double\n  parent: System\n  isExternal: false\n  name: Double\n  fullName: System.Double\n  nameWithType: Double\n  commentId: T:System.Double\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.Single\n  parent: System\n  isExternal: false\n  name: Single\n  fullName: System.Single\n  nameWithType: Single\n  commentId: T:System.Single\n- uid: System.Guid\n  parent: System\n  isExternal: false\n  name: Guid\n  fullName: System.Guid\n  nameWithType: Guid\n  commentId: T:System.Guid\n- uid: System.Int16\n  parent: System\n  isExternal: false\n  name: Int16\n  fullName: System.Int16\n  nameWithType: Int16\n  commentId: T:System.Int16\n- uid: System.Object[]\n  name: Object[]\n  fullName: System.Object[]\n  fullname.vb: System.Object()\n  name.vb: Object()\n  spec.csharp:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: '[]'\n    fullName: '[]'\n  spec.vb:\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ()\n    fullName: ()\n  nameWithType: Object[]\n  nameWithType.vb: Object()\n- uid: System.IndexOutOfRangeException\n  isExternal: false\n  name: IndexOutOfRangeException\n  fullName: System.IndexOutOfRangeException\n  nameWithType: IndexOutOfRangeException\n  commentId: T:System.IndexOutOfRangeException\n"}