{"nodes":[{"pos":[827,839],"content":"BindingFlags","needQuote":true,"nodes":[{"content":"BindingFlags","pos":[0,12]}]},{"pos":[2013,2027],"content":"CreateInstance","needQuote":true,"nodes":[{"content":"CreateInstance","pos":[0,14]}]},{"pos":[3259,3271],"content":"DeclaredOnly","needQuote":true,"nodes":[{"content":"DeclaredOnly","pos":[0,12]}]},{"pos":[4237,4244],"content":"Default","needQuote":true,"nodes":[{"content":"Default","pos":[0,7]}]},{"pos":[5119,5135],"content":"FlattenHierarchy","needQuote":true,"nodes":[{"content":"FlattenHierarchy","pos":[0,16]}]},{"pos":[6223,6231],"content":"GetField","needQuote":true,"nodes":[{"content":"GetField","pos":[0,8]}]},{"pos":[7215,7226],"content":"GetProperty","needQuote":true,"nodes":[{"content":"GetProperty","pos":[0,11]}]},{"pos":[8229,8239],"content":"IgnoreCase","needQuote":true,"nodes":[{"content":"IgnoreCase","pos":[0,10]}]},{"pos":[9139,9147],"content":"Instance","needQuote":true,"nodes":[{"content":"Instance","pos":[0,8]}]},{"pos":[10035,10047],"content":"InvokeMethod","needQuote":true,"nodes":[{"content":"InvokeMethod","pos":[0,12]}]},{"pos":[11066,11075],"content":"NonPublic","needQuote":true,"nodes":[{"content":"NonPublic","pos":[0,9]}]},{"pos":[11952,11958],"content":"Public","needQuote":true,"nodes":[{"content":"Public","pos":[0,6]}]},{"pos":[12825,12833],"content":"SetField","needQuote":true,"nodes":[{"content":"SetField","pos":[0,8]}]},{"pos":[13812,13823],"content":"SetProperty","needQuote":true,"nodes":[{"content":"SetProperty","pos":[0,11]}]},{"pos":[14960,14966],"content":"Static","needQuote":true,"nodes":[{"content":"Static","pos":[0,6]}]},{"pos":[15704,15721],"content":"System.Reflection","needQuote":true,"nodes":[{"content":"System.Reflection","pos":[0,17]}]},{"pos":[15913,15925],"content":"BindingFlags","needQuote":true,"nodes":[{"content":"BindingFlags","pos":[0,12]}]}],"content":"items:\n- uid: System.Reflection.BindingFlags\n  commentId: T:System.Reflection.BindingFlags\n  id: BindingFlags\n  parent: System.Reflection\n  children:\n  - System.Reflection.BindingFlags.CreateInstance\n  - System.Reflection.BindingFlags.DeclaredOnly\n  - System.Reflection.BindingFlags.Default\n  - System.Reflection.BindingFlags.FlattenHierarchy\n  - System.Reflection.BindingFlags.GetField\n  - System.Reflection.BindingFlags.GetProperty\n  - System.Reflection.BindingFlags.IgnoreCase\n  - System.Reflection.BindingFlags.Instance\n  - System.Reflection.BindingFlags.InvokeMethod\n  - System.Reflection.BindingFlags.NonPublic\n  - System.Reflection.BindingFlags.Public\n  - System.Reflection.BindingFlags.SetField\n  - System.Reflection.BindingFlags.SetProperty\n  - System.Reflection.BindingFlags.Static\n  langs:\n  - csharp\n  - vb\n  name: BindingFlags\n  fullName: System.Reflection.BindingFlags\n  type: Enum\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BindingFlags\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 17\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [Flags]\n\n      [ComVisible(true)]\n\n      public enum BindingFlags\n    content.vb: >-\n      <Serializable>\n\n      <Flags>\n\n      <ComVisible(True)>\n\n      Public Enum BindingFlags\n  attributes:\n  - type: System.FlagsAttribute\n    ctor: System.FlagsAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - enum\n  modifiers.vb:\n  - Public\n  - Enum\n  nameWithType: BindingFlags\n- uid: System.Reflection.BindingFlags.CreateInstance\n  commentId: F:System.Reflection.BindingFlags.CreateInstance\n  id: CreateInstance\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: CreateInstance\n  fullName: System.Reflection.BindingFlags.CreateInstance\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: CreateInstance\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 42\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a constructor. </p>\\n\"\n  syntax:\n    content: CreateInstance = 512\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.CreateInstance\n- uid: System.Reflection.BindingFlags.DeclaredOnly\n  commentId: F:System.Reflection.BindingFlags.DeclaredOnly\n  id: DeclaredOnly\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: DeclaredOnly\n  fullName: System.Reflection.BindingFlags.DeclaredOnly\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: DeclaredOnly\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 31\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</p>\\n\"\n  syntax:\n    content: DeclaredOnly = 2\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.DeclaredOnly\n- uid: System.Reflection.BindingFlags.Default\n  commentId: F:System.Reflection.BindingFlags.Default\n  id: Default\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: Default\n  fullName: System.Reflection.BindingFlags.Default\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Default\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 27\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that no binding flags are defined.</p>\\n\"\n  syntax:\n    content: Default = 0\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.Default\n- uid: System.Reflection.BindingFlags.FlattenHierarchy\n  commentId: F:System.Reflection.BindingFlags.FlattenHierarchy\n  id: FlattenHierarchy\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: FlattenHierarchy\n  fullName: System.Reflection.BindingFlags.FlattenHierarchy\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: FlattenHierarchy\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 36\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</p>\\n\"\n  syntax:\n    content: FlattenHierarchy = 64\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.FlattenHierarchy\n- uid: System.Reflection.BindingFlags.GetField\n  commentId: F:System.Reflection.BindingFlags.GetField\n  id: GetField\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: GetField\n  fullName: System.Reflection.BindingFlags.GetField\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetField\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 43\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the value of the specified field should be returned.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to get a field value. </p>\\n\"\n  syntax:\n    content: GetField = 1024\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.GetField\n- uid: System.Reflection.BindingFlags.GetProperty\n  commentId: F:System.Reflection.BindingFlags.GetProperty\n  id: GetProperty\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: GetProperty\n  fullName: System.Reflection.BindingFlags.GetProperty\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetProperty\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 45\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the value of the specified property should be returned.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a property getter. </p>\\n\"\n  syntax:\n    content: GetProperty = 4096\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.GetProperty\n- uid: System.Reflection.BindingFlags.IgnoreCase\n  commentId: F:System.Reflection.BindingFlags.IgnoreCase\n  id: IgnoreCase\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: IgnoreCase\n  fullName: System.Reflection.BindingFlags.IgnoreCase\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: IgnoreCase\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 30\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the case of the member name should not be considered when binding.</p>\\n\"\n  syntax:\n    content: IgnoreCase = 1\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.IgnoreCase\n- uid: System.Reflection.BindingFlags.Instance\n  commentId: F:System.Reflection.BindingFlags.Instance\n  id: Instance\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: Instance\n  fullName: System.Reflection.BindingFlags.Instance\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Instance\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 32\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that instance members are to be included in the search.</p>\\n\"\n  syntax:\n    content: Instance = 4\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.Instance\n- uid: System.Reflection.BindingFlags.InvokeMethod\n  commentId: F:System.Reflection.BindingFlags.InvokeMethod\n  id: InvokeMethod\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: InvokeMethod\n  fullName: System.Reflection.BindingFlags.InvokeMethod\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: InvokeMethod\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 41\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a method. </p>\\n\"\n  syntax:\n    content: InvokeMethod = 256\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.InvokeMethod\n- uid: System.Reflection.BindingFlags.NonPublic\n  commentId: F:System.Reflection.BindingFlags.NonPublic\n  id: NonPublic\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: NonPublic\n  fullName: System.Reflection.BindingFlags.NonPublic\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: NonPublic\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 35\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that non-public members are to be included in the search.</p>\\n\"\n  syntax:\n    content: NonPublic = 32\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.NonPublic\n- uid: System.Reflection.BindingFlags.Public\n  commentId: F:System.Reflection.BindingFlags.Public\n  id: Public\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: Public\n  fullName: System.Reflection.BindingFlags.Public\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Public\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 34\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that public members are to be included in the search.</p>\\n\"\n  syntax:\n    content: Public = 16\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.Public\n- uid: System.Reflection.BindingFlags.SetField\n  commentId: F:System.Reflection.BindingFlags.SetField\n  id: SetField\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: SetField\n  fullName: System.Reflection.BindingFlags.SetField\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetField\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 44\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the value of the specified field should be set.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to set a field value. </p>\\n\"\n  syntax:\n    content: SetField = 2048\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.SetField\n- uid: System.Reflection.BindingFlags.SetProperty\n  commentId: F:System.Reflection.BindingFlags.SetProperty\n  id: SetProperty\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: SetProperty\n  fullName: System.Reflection.BindingFlags.SetProperty\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: SetProperty\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 46\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying <strong>PutDispProperty</strong> and <strong>PutRefDispProperty</strong>.</p>\\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a property setter. </p>\\n\"\n  syntax:\n    content: SetProperty = 8192\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.SetProperty\n- uid: System.Reflection.BindingFlags.Static\n  commentId: F:System.Reflection.BindingFlags.Static\n  id: Static\n  parent: System.Reflection.BindingFlags\n  langs:\n  - csharp\n  - vb\n  name: Static\n  fullName: System.Reflection.BindingFlags.Static\n  type: Field\n  source:\n    remote:\n      path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Static\n    path: src/mscorlib/src/System/Reflection/BindingFlags.cs\n    startLine: 33\n  assemblies:\n  - System.Reflection\n  namespace: System.Reflection\n  summary: \"\\n<p>Specifies that static members are to be included in the search.</p>\\n\"\n  syntax:\n    content: Static = 8\n    return:\n      type: System.Reflection.BindingFlags\n  modifiers.csharp:\n  - public\n  - const\n  modifiers.vb:\n  - Public\n  - Const\n  nameWithType: BindingFlags.Static\nreferences:\n- uid: System.Reflection\n  isExternal: false\n  name: System.Reflection\n  fullName: System.Reflection\n  nameWithType: System.Reflection\n  commentId: N:System.Reflection\n- uid: System.Reflection.BindingFlags\n  parent: System.Reflection\n  isExternal: false\n  name: BindingFlags\n  fullName: System.Reflection.BindingFlags\n  nameWithType: BindingFlags\n  commentId: T:System.Reflection.BindingFlags\n"}