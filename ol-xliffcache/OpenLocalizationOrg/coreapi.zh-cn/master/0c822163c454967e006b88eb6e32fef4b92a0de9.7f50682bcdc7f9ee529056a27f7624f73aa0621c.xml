{"nodes":[{"pos":[418,429],"content":"BStrWrapper","needQuote":true,"nodes":[{"content":"BStrWrapper","pos":[0,11]}]},{"pos":[2219,2238],"content":"BStrWrapper(Object)","needQuote":true,"nodes":[{"content":"BStrWrapper(Object)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The object to wrap and marshal as &lt;strong&gt;VT_BSTR&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3428,3498],"source":"\\n<p>The object to wrap and marshal as <strong>VT_BSTR</strong>.</p>\\n"},{"pos":[4001,4020],"content":"BStrWrapper(String)","needQuote":true,"nodes":[{"content":"BStrWrapper(String)","pos":[0,19]}]},{"content":"\\n&lt;p&gt;The object to wrap and marshal as &lt;strong&gt;VT_BSTR&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5210,5280],"source":"\\n<p>The object to wrap and marshal as <strong>VT_BSTR</strong>.</p>\\n"},{"pos":[5760,5773],"content":"WrappedObject","needQuote":true,"nodes":[{"content":"WrappedObject","pos":[0,13]}]},{"pos":[6948,6978],"content":"System.Runtime.InteropServices","needQuote":true,"nodes":[{"content":"System.Runtime.InteropServices","pos":[0,30]}]},{"pos":[7181,7187],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[7347,7357],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[7452,7460],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7529,7530],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7557,7558],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7628,7636],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[7705,7706],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[7733,7734],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[7917,7931],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[8050,8056],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8123,8124],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8174,8180],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8240,8241],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8324,8330],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8397,8398],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[8448,8454],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8514,8515],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[8729,8751],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[8899,8905],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[8972,8973],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9023,9029],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9090,9091]},{"pos":[9146,9152],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9212,9213],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9310,9316],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[9383,9384],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[9434,9440],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[9501,9502]},{"pos":[9557,9563],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[9623,9624],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[9869,9900],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[10066,10081],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10157,10158],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10208,10214],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10275,10276]},{"pos":[10331,10337],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10397,10398],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[10504,10519],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[10595,10596],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[10646,10652],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[10713,10714]},{"pos":[10769,10775],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[10835,10836],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11066,11079],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[11180,11191],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11263,11264],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11291,11292],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11365,11376],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[11448,11449],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11476,11477],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11652,11661],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[11754,11761],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[11829,11830],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11857,11858],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11927,11934],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[12002,12003],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12030,12031],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12206,12223],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[12332,12347],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12423,12424],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12451,12452],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12529,12544],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[12620,12621],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12648,12649],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12794,12800],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[12931,12937],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Runtime.InteropServices.BStrWrapper\n  commentId: T:System.Runtime.InteropServices.BStrWrapper\n  id: BStrWrapper\n  parent: System.Runtime.InteropServices\n  children:\n  - System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)\n  - System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)\n  - System.Runtime.InteropServices.BStrWrapper.WrappedObject\n  langs:\n  - csharp\n  - vb\n  name: BStrWrapper\n  fullName: System.Runtime.InteropServices.BStrWrapper\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: BStrWrapper\n    path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n    startLine: 19\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Marshals data of type <strong>VT_BSTR</strong> from managed to unmanaged code. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ComVisible(true)]\n\n      public sealed class BStrWrapper\n    content.vb: >-\n      <Serializable>\n\n      <ComVisible(True)>\n\n      Public NotInheritable Class BStrWrapper\n  inheritance:\n  - System.Object\n  inheritedMembers:\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.ObsoleteAttribute\n    ctor: System.ObsoleteAttribute.#ctor(System.String)\n    arguments:\n    - type: System.String\n      value: BStrWrapper and support for marshalling to the VARIANT type may be unavailable in future releases.\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: BStrWrapper\n- uid: System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)\n  commentId: M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)\n  id: '#ctor(System.Object)'\n  parent: System.Runtime.InteropServices.BStrWrapper\n  langs:\n  - csharp\n  - vb\n  name: BStrWrapper(Object)\n  fullName: System.Runtime.InteropServices.BStrWrapper.BStrWrapper(System.Object)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n    startLine: 32\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.BStrWrapper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]\n\n      public BStrWrapper(object value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>\n\n      Public Sub New(value As Object)\n    parameters:\n    - id: value\n      type: System.Object\n      description: \"\\n<p>The object to wrap and marshal as <strong>VT_BSTR</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BStrWrapper.BStrWrapper(Object)\n- uid: System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)\n  commentId: M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)\n  id: '#ctor(System.String)'\n  parent: System.Runtime.InteropServices.BStrWrapper\n  langs:\n  - csharp\n  - vb\n  name: BStrWrapper(String)\n  fullName: System.Runtime.InteropServices.BStrWrapper.BStrWrapper(System.String)\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n    startLine: 23\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Runtime.InteropServices.BStrWrapper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class with the specified <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]\n\n      public BStrWrapper(string value)\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>\n\n      Public Sub New(value As String)\n    parameters:\n    - id: value\n      type: System.String\n      description: \"\\n<p>The object to wrap and marshal as <strong>VT_BSTR</strong>.</p>\\n\"\n  see:\n  - type: System.Security.Permissions.SecurityPermission\n    commentId: T:System.Security.Permissions.SecurityPermission\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: BStrWrapper.BStrWrapper(String)\n- uid: System.Runtime.InteropServices.BStrWrapper.WrappedObject\n  commentId: P:System.Runtime.InteropServices.BStrWrapper.WrappedObject\n  id: WrappedObject\n  parent: System.Runtime.InteropServices.BStrWrapper\n  langs:\n  - csharp\n  - vb\n  name: WrappedObject\n  fullName: System.Runtime.InteropServices.BStrWrapper.WrappedObject\n  type: Property\n  source:\n    remote:\n      path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: WrappedObject\n    path: src/mscorlib/src/System/Runtime/InteropServices/BStrWrapper.cs\n    startLine: 41\n  assemblies:\n  - System.Runtime.InteropServices\n  namespace: System.Runtime.InteropServices\n  summary: \"\\n<p>Gets the wrapped <xref href=\\\"System.String\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> object to marshal as type <strong>VT_BSTR</strong>.</p>\\n\"\n  syntax:\n    content: public string WrappedObject { get; }\n    content.vb: Public ReadOnly Property WrappedObject As String\n    parameters: []\n    return:\n      type: System.String\n      description: \"\\n<p>The object that is wrapped by <xref href=\\\"System.Runtime.InteropServices.BStrWrapper\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: BStrWrapper.WrappedObject\nreferences:\n- uid: System.Runtime.InteropServices\n  isExternal: false\n  name: System.Runtime.InteropServices\n  fullName: System.Runtime.InteropServices\n  nameWithType: System.Runtime.InteropServices\n  commentId: N:System.Runtime.InteropServices\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.ToString()\n  commentId: M:System.Object.ToString\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object)\n  commentId: M:System.Object.Equals(System.Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.Equals(Object, Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  nameWithType: Object.ReferenceEquals(Object, Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetHashCode()\n  commentId: M:System.Object.GetHashCode\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.GetType()\n  commentId: M:System.Object.GetType\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  nameWithType: Object.MemberwiseClone()\n  commentId: M:System.Object.MemberwiseClone\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}