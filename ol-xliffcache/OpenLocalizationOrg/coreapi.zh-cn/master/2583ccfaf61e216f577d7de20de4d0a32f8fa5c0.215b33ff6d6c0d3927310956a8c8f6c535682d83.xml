{"nodes":[{"pos":[471,485],"content":"MutexAuditRule","needQuote":true,"nodes":[{"content":"MutexAuditRule","pos":[0,14]}]},{"pos":[3009,3067],"content":"MutexAuditRule(IdentityReference, MutexRights, AuditFlags)","needQuote":true,"nodes":[{"content":"MutexAuditRule(IdentityReference, MutexRights, AuditFlags)","pos":[0,58]}]},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;eventRights&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;flags&lt;/em&gt; specifies an invalid value.&lt;/p&gt;\\n","pos":[5413,5540],"source":"\\n<p>\\n<em>eventRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>flags</em> specifies an invalid value.</p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;em&gt;identity&lt;/em&gt; is &lt;strong&gt;null&lt;/strong&gt;.","pos":[5645,5695],"source":"\\n<p>\\n<em>identity</em> is <strong>null</strong>."},{"content":"&lt;/p&gt;\\n&lt;p&gt;-or-&lt;/p&gt;\\n&lt;p&gt;\\n&lt;em&gt;eventRights&lt;/em&gt; is zero.&lt;/p&gt;\\n","pos":[5696,5755],"source":" </p>\\n<p>-or-</p>\\n<p>\\n<em>eventRights</em> is zero.</p>\\n"},{"pos":[6655,6666],"content":"MutexRights","needQuote":true,"nodes":[{"content":"MutexRights","pos":[0,11]}]},{"pos":[7853,7882],"content":"System.Security.AccessControl","needQuote":true,"nodes":[{"content":"System.Security.AccessControl","pos":[0,29]}]},{"pos":[8082,8088],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[8290,8307],"content":"AuthorizationRule","needQuote":true,"nodes":[{"content":"AuthorizationRule","pos":[0,17]}]},{"pos":[8580,8589],"content":"AuditRule","needQuote":true,"nodes":[{"content":"AuditRule","pos":[0,9]}]},{"pos":[8859,8869],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[9195,9212],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[9576,9586],"content":"AccessMask","needQuote":true,"nodes":[{"content":"AccessMask","pos":[0,10]}]},{"pos":[9930,9941],"content":"IsInherited","needQuote":true,"nodes":[{"content":"IsInherited","pos":[0,11]}]},{"pos":[10293,10309],"content":"InheritanceFlags","needQuote":true,"nodes":[{"content":"InheritanceFlags","pos":[0,16]}]},{"pos":[10676,10692],"content":"PropagationFlags","needQuote":true,"nodes":[{"content":"PropagationFlags","pos":[0,16]}]},{"pos":[10982,10992],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"pos":[11087,11095],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11164,11165],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11192,11193],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11263,11271],"content":"ToString","needQuote":true,"nodes":[{"content":"ToString","pos":[0,8]}]},{"pos":[11340,11341],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11368,11369],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11552,11566],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"pos":[11685,11691],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[11758,11759],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[11809,11815],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[11875,11876],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[11959,11965],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12032,12033],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12083,12089],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12149,12150],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12364,12386],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"pos":[12534,12540],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[12607,12608],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[12658,12664],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[12725,12726]},{"pos":[12781,12787],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[12847,12848],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[12945,12951],"content":"Equals","needQuote":true,"nodes":[{"content":"Equals","pos":[0,6]}]},{"pos":[13018,13019],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13069,13075],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13136,13137]},{"pos":[13192,13198],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13258,13259],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[13504,13535],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"pos":[13701,13716],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[13792,13793],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[13843,13849],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[13910,13911]},{"pos":[13966,13972],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14032,14033],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14139,14154],"content":"ReferenceEquals","needQuote":true,"nodes":[{"content":"ReferenceEquals","pos":[0,15]}]},{"pos":[14230,14231],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14281,14287],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"content":",","pos":[14348,14349]},{"pos":[14404,14410],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[14470,14471],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[14701,14714],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"pos":[14815,14826],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[14898,14899],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[14926,14927],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15000,15011],"content":"GetHashCode","needQuote":true,"nodes":[{"content":"GetHashCode","pos":[0,11]}]},{"pos":[15083,15084],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15111,15112],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15287,15296],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"pos":[15389,15396],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15464,15465],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15492,15493],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15562,15569],"content":"GetType","needQuote":true,"nodes":[{"content":"GetType","pos":[0,7]}]},{"pos":[15637,15638],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[15665,15666],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[15841,15858],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[15967,15982],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16058,16059],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16086,16087],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16164,16179],"content":"MemberwiseClone","needQuote":true,"nodes":[{"content":"MemberwiseClone","pos":[0,15]}]},{"pos":[16255,16256],"content":"(","needQuote":true,"nodes":[{"content":"(","pos":[0,1]}]},{"pos":[16283,16284],"content":")","needQuote":true,"nodes":[{"content":")","pos":[0,1]}]},{"pos":[16429,16435],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[16615,16632],"content":"IdentityReference","needQuote":true,"nodes":[{"content":"IdentityReference","pos":[0,17]}]},{"pos":[16899,16910],"content":"MutexRights","needQuote":true,"nodes":[{"content":"MutexRights","pos":[0,11]}]},{"pos":[17166,17176],"content":"AuditFlags","needQuote":true,"nodes":[{"content":"AuditFlags","pos":[0,10]}]},{"pos":[17374,17399],"content":"System.Security.Principal","needQuote":true,"nodes":[{"content":"System.Security.Principal","pos":[0,25]}]},{"pos":[17591,17618],"content":"ArgumentOutOfRangeException","needQuote":true,"nodes":[{"content":"ArgumentOutOfRangeException","pos":[0,27]}]},{"pos":[17824,17845],"content":"ArgumentNullException","needQuote":true,"nodes":[{"content":"ArgumentNullException","pos":[0,21]}]},{"pos":[18046,18063],"content":"ArgumentException","needQuote":true,"nodes":[{"content":"ArgumentException","pos":[0,17]}]}],"content":"items:\n- uid: System.Security.AccessControl.MutexAuditRule\n  commentId: T:System.Security.AccessControl.MutexAuditRule\n  id: MutexAuditRule\n  parent: System.Security.AccessControl\n  children:\n  - System.Security.AccessControl.MutexAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AuditFlags)\n  - System.Security.AccessControl.MutexAuditRule.MutexRights\n  langs:\n  - csharp\n  - vb\n  name: MutexAuditRule\n  fullName: System.Security.AccessControl.MutexAuditRule\n  type: Class\n  source:\n    remote:\n      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MutexAuditRule\n    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n    startLine: 30\n  assemblies:\n  - System.Threading.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Represents a set of access rights to be audited for a user or group. This class cannot be inherited.</p>\\n\"\n  syntax:\n    content: >-\n      [SecurityCritical]\n\n      public sealed class MutexAuditRule : AuditRule\n    content.vb: >-\n      <SecurityCritical>\n\n      Public NotInheritable Class MutexAuditRule\n          Inherits AuditRule\n  inheritance:\n  - System.Object\n  - System.Security.AccessControl.AuthorizationRule\n  - System.Security.AccessControl.AuditRule\n  inheritedMembers:\n  - System.Security.AccessControl.AuditRule.AuditFlags\n  - System.Security.AccessControl.AuthorizationRule.IdentityReference\n  - System.Security.AccessControl.AuthorizationRule.AccessMask\n  - System.Security.AccessControl.AuthorizationRule.IsInherited\n  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  - System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  - System.Object.ToString\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  attributes:\n  - type: System.Security.SecurityCriticalAttribute\n    ctor: System.Security.SecurityCriticalAttribute.#ctor\n    arguments: []\n  modifiers.csharp:\n  - public\n  - sealed\n  - class\n  modifiers.vb:\n  - Public\n  - NotInheritable\n  - Class\n  nameWithType: MutexAuditRule\n- uid: System.Security.AccessControl.MutexAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AuditFlags)\n  commentId: M:System.Security.AccessControl.MutexAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AuditFlags)\n  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AuditFlags)'\n  parent: System.Security.AccessControl.MutexAuditRule\n  langs:\n  - csharp\n  - vb\n  name: MutexAuditRule(IdentityReference, MutexRights, AuditFlags)\n  fullName: System.Security.AccessControl.MutexAuditRule.MutexAuditRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.MutexRights, System.Security.AccessControl.AuditFlags)\n  type: Constructor\n  source:\n    remote:\n      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: .ctor\n    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n    startLine: 33\n  assemblies:\n  - System.Threading.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Security.AccessControl.MutexAuditRule\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class, specifying the user or group to audit, the rights to audit, and whether to audit success, failure, or both.</p>\\n\"\n  syntax:\n    content: public MutexAuditRule(IdentityReference identity, MutexRights eventRights, AuditFlags flags)\n    content.vb: Public Sub New(identity As IdentityReference, eventRights As MutexRights, flags As AuditFlags)\n    parameters:\n    - id: identity\n      type: System.Security.Principal.IdentityReference\n      description: \"\\n<p>The user or group the rule applies to. Must be of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> or a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be converted to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n    - id: eventRights\n      type: System.Security.AccessControl.MutexRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.MutexRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying the kinds of access to audit.</p>\\n\"\n    - id: flags\n      type: System.Security.AccessControl.AuditFlags\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.AuditFlags\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values specifying whether to audit success, failure, or both.</p>\\n\"\n  exceptions:\n  - type: System.ArgumentOutOfRangeException\n    commentId: T:System.ArgumentOutOfRangeException\n    description: \"\\n<p>\\n<em>eventRights</em> specifies an invalid value.</p>\\n<p>-or-</p>\\n<p>\\n<em>flags</em> specifies an invalid value.</p>\\n\"\n  - type: System.ArgumentNullException\n    commentId: T:System.ArgumentNullException\n    description: \"\\n<p>\\n<em>identity</em> is <strong>null</strong>. </p>\\n<p>-or-</p>\\n<p>\\n<em>eventRights</em> is zero.</p>\\n\"\n  - type: System.ArgumentException\n    commentId: T:System.ArgumentException\n    description: \"\\n<p>\\n<em>identity</em> is neither of type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> nor of a type such as <xref href=\\\"System.Security.Principal.NTAccount\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> that can be translated to type <xref href=\\\"System.Security.Principal.SecurityIdentifier\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: MutexAuditRule.MutexAuditRule(IdentityReference, MutexRights, AuditFlags)\n- uid: System.Security.AccessControl.MutexAuditRule.MutexRights\n  commentId: P:System.Security.AccessControl.MutexAuditRule.MutexRights\n  id: MutexRights\n  parent: System.Security.AccessControl.MutexAuditRule\n  langs:\n  - csharp\n  - vb\n  name: MutexRights\n  fullName: System.Security.AccessControl.MutexAuditRule.MutexRights\n  type: Property\n  source:\n    remote:\n      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n      branch: master\n      repo: https://github.com/dotnet/corefx.git\n    id: MutexRights\n    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs\n    startLine: 34\n  assemblies:\n  - System.Threading.AccessControl\n  namespace: System.Security.AccessControl\n  summary: \"\\n<p>Gets the access rights affected by the audit rule.</p>\\n\"\n  syntax:\n    content: public MutexRights MutexRights { get; }\n    content.vb: Public ReadOnly Property MutexRights As MutexRights\n    parameters: []\n    return:\n      type: System.Security.AccessControl.MutexRights\n      description: \"\\n<p>A bitwise combination of <xref href=\\\"System.Security.AccessControl.MutexRights\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> values that indicates the rights affected by the audit rule.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - get\n  modifiers.vb:\n  - Public\n  - ReadOnly\n  nameWithType: MutexAuditRule.MutexRights\nreferences:\n- uid: System.Security.AccessControl\n  isExternal: false\n  name: System.Security.AccessControl\n  fullName: System.Security.AccessControl\n  commentId: N:System.Security.AccessControl\n  nameWithType: System.Security.AccessControl\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  commentId: T:System.Object\n  nameWithType: Object\n- uid: System.Security.AccessControl.AuthorizationRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuthorizationRule\n  fullName: System.Security.AccessControl.AuthorizationRule\n  commentId: T:System.Security.AccessControl.AuthorizationRule\n  nameWithType: AuthorizationRule\n- uid: System.Security.AccessControl.AuditRule\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditRule\n  fullName: System.Security.AccessControl.AuditRule\n  commentId: T:System.Security.AccessControl.AuditRule\n  nameWithType: AuditRule\n- uid: System.Security.AccessControl.AuditRule.AuditFlags\n  parent: System.Security.AccessControl.AuditRule\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditRule.AuditFlags\n  commentId: P:System.Security.AccessControl.AuditRule.AuditFlags\n  nameWithType: AuditRule.AuditFlags\n- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IdentityReference\n  nameWithType: AuthorizationRule.IdentityReference\n- uid: System.Security.AccessControl.AuthorizationRule.AccessMask\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: AccessMask\n  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask\n  commentId: P:System.Security.AccessControl.AuthorizationRule.AccessMask\n  nameWithType: AuthorizationRule.AccessMask\n- uid: System.Security.AccessControl.AuthorizationRule.IsInherited\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: IsInherited\n  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited\n  commentId: P:System.Security.AccessControl.AuthorizationRule.IsInherited\n  nameWithType: AuthorizationRule.IsInherited\n- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: InheritanceFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.InheritanceFlags\n  nameWithType: AuthorizationRule.InheritanceFlags\n- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  parent: System.Security.AccessControl.AuthorizationRule\n  isExternal: false\n  name: PropagationFlags\n  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  commentId: P:System.Security.AccessControl.AuthorizationRule.PropagationFlags\n  nameWithType: AuthorizationRule.PropagationFlags\n- uid: System.Object.ToString\n  parent: System.Object\n  isExternal: true\n  name: ToString()\n  fullName: System.Object.ToString()\n  spec.csharp:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ToString\n    name: ToString\n    fullName: System.Object.ToString\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ToString\n  nameWithType: Object.ToString()\n- uid: System.Object.Equals(System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object)\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.Equals(System.Object,System.Object)\n    name: Equals\n    fullName: System.Object.Equals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  isExternal: true\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  spec.csharp:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.ReferenceEquals(System.Object,System.Object)\n    name: ReferenceEquals\n    fullName: System.Object.ReferenceEquals\n    isExternal: true\n  - name: (\n    fullName: (\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: ', '\n    fullName: ', '\n  - uid: System.Object\n    name: Object\n    fullName: System.Object\n    isExternal: true\n  - name: )\n    fullName: )\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.GetHashCode\n  parent: System.Object\n  isExternal: true\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  spec.csharp:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetHashCode\n    name: GetHashCode\n    fullName: System.Object.GetHashCode\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetHashCode\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  parent: System.Object\n  isExternal: true\n  name: GetType()\n  fullName: System.Object.GetType()\n  spec.csharp:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.GetType\n    name: GetType\n    fullName: System.Object.GetType\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.GetType\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  parent: System.Object\n  isExternal: true\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  spec.csharp:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  spec.vb:\n  - uid: System.Object.MemberwiseClone\n    name: MemberwiseClone\n    fullName: System.Object.MemberwiseClone\n    isExternal: true\n  - name: (\n    fullName: (\n  - name: )\n    fullName: )\n  commentId: M:System.Object.MemberwiseClone\n  nameWithType: Object.MemberwiseClone()\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  commentId: N:System\n  nameWithType: System\n- uid: System.Security.Principal.IdentityReference\n  parent: System.Security.Principal\n  isExternal: false\n  name: IdentityReference\n  fullName: System.Security.Principal.IdentityReference\n  commentId: T:System.Security.Principal.IdentityReference\n  nameWithType: IdentityReference\n- uid: System.Security.AccessControl.MutexRights\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: MutexRights\n  fullName: System.Security.AccessControl.MutexRights\n  commentId: T:System.Security.AccessControl.MutexRights\n  nameWithType: MutexRights\n- uid: System.Security.AccessControl.AuditFlags\n  parent: System.Security.AccessControl\n  isExternal: false\n  name: AuditFlags\n  fullName: System.Security.AccessControl.AuditFlags\n  commentId: T:System.Security.AccessControl.AuditFlags\n  nameWithType: AuditFlags\n- uid: System.Security.Principal\n  isExternal: false\n  name: System.Security.Principal\n  fullName: System.Security.Principal\n  commentId: N:System.Security.Principal\n  nameWithType: System.Security.Principal\n- uid: System.ArgumentOutOfRangeException\n  isExternal: false\n  name: ArgumentOutOfRangeException\n  fullName: System.ArgumentOutOfRangeException\n  nameWithType: ArgumentOutOfRangeException\n  commentId: T:System.ArgumentOutOfRangeException\n- uid: System.ArgumentNullException\n  isExternal: false\n  name: ArgumentNullException\n  fullName: System.ArgumentNullException\n  nameWithType: ArgumentNullException\n  commentId: T:System.ArgumentNullException\n- uid: System.ArgumentException\n  parent: System\n  isExternal: false\n  name: ArgumentException\n  fullName: System.ArgumentException\n  nameWithType: ArgumentException\n  commentId: T:System.ArgumentException\n"}