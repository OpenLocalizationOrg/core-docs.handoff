{"nodes":[{"pos":[459,465],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[1586,1594],"content":"Object()","needQuote":true,"nodes":[{"content":"Object()","pos":[0,8]}]},{"pos":[2614,2628],"content":"Equals(Object)","needQuote":true,"nodes":[{"content":"Equals(Object)","pos":[0,14]}]},{"content":"\\n&lt;p&gt;The object to compare with the current object.","pos":[3272,3323],"source":"\\n<p>The object to compare with the current object."},{"content":"&lt;/p&gt;\\n","pos":[3324,3330],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the specified object  is equal to the current object; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[3391,3517],"source":"\\n<p>\\n<strong>true</strong> if the specified object  is equal to the current object; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[4397,4419],"content":"Equals(Object, Object)","needQuote":true,"nodes":[{"content":"Equals(Object, Object)","pos":[0,22]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[5104,5137],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[5138,5144],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object to compare.","pos":[5207,5241],"source":"\\n<p>The second object to compare."},{"content":"&lt;/p&gt;\\n","pos":[5242,5248],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if the objects are considered equal; otherwise, &lt;strong&gt;false&lt;/strong&gt;.","pos":[5309,5409],"source":"\\n<p>\\n<strong>true</strong> if the objects are considered equal; otherwise, <strong>false</strong>."},{"content":"If both &lt;em&gt;objA&lt;/em&gt; and &lt;em&gt;objB&lt;/em&gt; are null, the method returns &lt;strong&gt;true&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[5410,5507],"source":" If both <em>objA</em> and <em>objB</em> are null, the method returns <strong>true</strong>.</p>\\n"},{"pos":[6032,6042],"content":"Finalize()","needQuote":true,"nodes":[{"content":"Finalize()","pos":[0,10]}]},{"pos":[7478,7491],"content":"GetHashCode()","needQuote":true,"nodes":[{"content":"GetHashCode()","pos":[0,13]}]},{"content":"\\n&lt;p&gt;A hash code for the current object.&lt;/p&gt;\\n","pos":[8063,8109],"source":"\\n<p>A hash code for the current object.</p>\\n"},{"pos":[8743,8752],"content":"GetType()","needQuote":true,"nodes":[{"content":"GetType()","pos":[0,9]}]},{"content":"\\n&lt;p&gt;The exact runtime type of the current instance.&lt;/p&gt;\\n","pos":[9382,9440],"source":"\\n<p>The exact runtime type of the current instance.</p>\\n"},{"pos":[9758,9775],"content":"MemberwiseClone()","needQuote":true,"nodes":[{"content":"MemberwiseClone()","pos":[0,17]}]},{"pos":[10920,10951],"content":"ReferenceEquals(Object, Object)","needQuote":true,"nodes":[{"content":"ReferenceEquals(Object, Object)","pos":[0,31]}]},{"content":"\\n&lt;p&gt;The first object to compare.","pos":[11956,11989],"source":"\\n<p>The first object to compare."},{"content":"&lt;/p&gt;\\n","pos":[11990,11996],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;The second object  to compare.","pos":[12059,12094],"source":"\\n<p>The second object  to compare."},{"content":"&lt;/p&gt;\\n","pos":[12095,12101],"source":" </p>\\n"},{"content":"\\n&lt;p&gt;\\n&lt;strong&gt;true&lt;/strong&gt; if &lt;em&gt;objA&lt;/em&gt; is the same instance as &lt;em&gt;objB&lt;/em&gt; or if both are null; otherwise, &lt;strong&gt;false&lt;/strong&gt;.&lt;/p&gt;\\n","pos":[12162,12307],"source":"\\n<p>\\n<strong>true</strong> if <em>objA</em> is the same instance as <em>objB</em> or if both are null; otherwise, <strong>false</strong>.</p>\\n"},{"pos":[12696,12706],"content":"ToString()","needQuote":true,"nodes":[{"content":"ToString()","pos":[0,10]}]},{"content":"\\n&lt;p&gt;A string that represents the current object.&lt;/p&gt;\\n","pos":[13284,13339],"source":"\\n<p>A string that represents the current object.</p>\\n"},{"pos":[13515,13521],"content":"System","needQuote":true,"nodes":[{"content":"System","pos":[0,6]}]},{"pos":[13652,13658],"content":"Object","needQuote":true,"nodes":[{"content":"Object","pos":[0,6]}]},{"pos":[13804,13811],"content":"Boolean","needQuote":true,"nodes":[{"content":"Boolean","pos":[0,7]}]},{"pos":[13958,13963],"content":"Int32","needQuote":true,"nodes":[{"content":"Int32","pos":[0,5]}]},{"pos":[14103,14107],"content":"Type","needQuote":true,"nodes":[{"content":"Type","pos":[0,4]}]},{"pos":[14246,14252],"content":"String","needQuote":true,"nodes":[{"content":"String","pos":[0,6]}]}],"content":"items:\n- uid: System.Object\n  commentId: T:System.Object\n  id: Object\n  parent: System\n  children:\n  - System.Object.#ctor\n  - System.Object.Equals(System.Object)\n  - System.Object.Equals(System.Object,System.Object)\n  - System.Object.Finalize\n  - System.Object.GetHashCode\n  - System.Object.GetType\n  - System.Object.MemberwiseClone\n  - System.Object.ReferenceEquals(System.Object,System.Object)\n  - System.Object.ToString\n  langs:\n  - csharp\n  - vb\n  name: Object\n  fullName: System.Object\n  type: Class\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Object\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 34\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Supports all classes in the .NET Framework class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all classes in the .NET Framework; it is the root of the type hierarchy.</p>\\n\"\n  syntax:\n    content: >-\n      [Serializable]\n\n      [ClassInterface(ClassInterfaceType.AutoDual)]\n\n      [ComVisible(true)]\n\n      public class Object\n    content.vb: >-\n      <Serializable>\n\n      <ClassInterface(ClassInterfaceType.AutoDual)>\n\n      <ComVisible(True)>\n\n      Public Class Object\n  inheritance:\n  - System.Object\n  modifiers.csharp:\n  - public\n  - class\n  modifiers.vb:\n  - Public\n  - Class\n  nameWithType: Object\n- uid: System.Object.#ctor\n  commentId: M:System.Object.#ctor\n  id: '#ctor'\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: Object()\n  fullName: System.Object.Object()\n  type: Constructor\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: .ctor\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 40\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Initializes a new instance of the <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> class.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]\n\n      [NonVersionable]\n\n      public Object()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>\n\n      <NonVersionable>\n\n      Public Sub New\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Object.Object()\n- uid: System.Object.Equals(System.Object)\n  commentId: M:System.Object.Equals(System.Object)\n  id: Equals(System.Object)\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object)\n  fullName: System.Object.Equals(System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 60\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified object is equal to the current object.</p>\\n\"\n  syntax:\n    content: public virtual bool Equals(object obj)\n    content.vb: Public Overridable Function Equals(obj As Object) As Boolean\n    parameters:\n    - id: obj\n      type: System.Object\n      description: \"\\n<p>The object to compare with the current object. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the specified object  is equal to the current object; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Object.ReferenceEquals(System.Object,System.Object)\n    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  - type: System.Object.GetHashCode\n    commentId: M:System.Object.GetHashCode\n  - type: System.ValueType\n    commentId: T:System.ValueType\n  - type: System.IComparable\n    commentId: T:System.IComparable\n  - type: System.Collections.ArrayList\n    commentId: T:System.Collections.ArrayList\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Object.Equals(Object)\n- uid: System.Object.Equals(System.Object,System.Object)\n  commentId: M:System.Object.Equals(System.Object,System.Object)\n  id: Equals(System.Object,System.Object)\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: Equals(Object, Object)\n  fullName: System.Object.Equals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Equals\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 65\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified object instances are considered equal.</p>\\n\"\n  syntax:\n    content: public static bool Equals(object objA, object objB)\n    content.vb: Public Shared Function Equals(objA As Object, objB As Object) As Boolean\n    parameters:\n    - id: objA\n      type: System.Object\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: objB\n      type: System.Object\n      description: \"\\n<p>The second object to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if the objects are considered equal; otherwise, <strong>false</strong>. If both <em>objA</em> and <em>objB</em> are null, the method returns <strong>true</strong>.</p>\\n\"\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  - type: System.Object.ReferenceEquals(System.Object,System.Object)\n    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Object.Equals(Object, Object)\n- uid: System.Object.Finalize\n  commentId: M:System.Object.Finalize\n  id: Finalize\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: Finalize()\n  fullName: System.Object.Finalize()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: Finalize\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 105\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      protected void Finalize()\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Protected Sub Finalize\n  seealso:\n  - type: System.GC.SuppressFinalize(System.Object)\n    commentId: M:System.GC.SuppressFinalize(System.Object)\n  - type: System.GC.ReRegisterForFinalize(System.Object)\n    commentId: M:System.GC.ReRegisterForFinalize(System.Object)\n  - type: System.GC.WaitForPendingFinalizers\n    commentId: M:System.GC.WaitForPendingFinalizers\n  - type: System.WeakReference\n    commentId: T:System.WeakReference\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Object.Finalize()\n- uid: System.Object.GetHashCode\n  commentId: M:System.Object.GetHashCode\n  id: GetHashCode\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: GetHashCode()\n  fullName: System.Object.GetHashCode()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: GetHashCode\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 91\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Serves as the default hash function. </p>\\n\"\n  syntax:\n    content: public virtual int GetHashCode()\n    content.vb: Public Overridable Function GetHashCode As Integer\n    return:\n      type: System.Int32\n      description: \"\\n<p>A hash code for the current object.</p>\\n\"\n  seealso:\n  - type: System.Collections.Hashtable\n    commentId: T:System.Collections.Hashtable\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  - type: System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\n    commentId: M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Object.GetHashCode()\n- uid: System.Object.GetType\n  commentId: M:System.Object.GetType\n  id: GetType\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: GetType()\n  fullName: System.Object.GetType()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Gets the <xref href=\\\"System.Type\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> of the current instance.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      public Type GetType()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Public Function GetType As Type\n    return:\n      type: System.Type\n      description: \"\\n<p>The exact runtime type of the current instance.</p>\\n\"\n  seealso:\n  - type: System.Type\n    commentId: T:System.Type\n  modifiers.csharp:\n  - public\n  modifiers.vb:\n  - Public\n  nameWithType: Object.GetType()\n- uid: System.Object.MemberwiseClone\n  commentId: M:System.Object.MemberwiseClone\n  id: MemberwiseClone\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: MemberwiseClone()\n  fullName: System.Object.MemberwiseClone()\n  type: Method\n  source:\n    path: System.Private.CoreLib\n    isExternal: true\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Creates a shallow copy of the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  syntax:\n    content: >-\n      [SecuritySafeCritical]\n\n      [MethodImpl(MethodImplOptions.InternalCall)]\n\n      protected object MemberwiseClone()\n    content.vb: >-\n      <SecuritySafeCritical>\n\n      <MethodImpl(MethodImplOptions.InternalCall)>\n\n      Protected Function MemberwiseClone As Object\n    return:\n      type: System.Object\n      description: \"\\n<p>A shallow copy of the current <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref>.</p>\\n\"\n  modifiers.csharp:\n  - protected\n  modifiers.vb:\n  - Protected\n  nameWithType: Object.MemberwiseClone()\n- uid: System.Object.ReferenceEquals(System.Object,System.Object)\n  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)\n  id: ReferenceEquals(System.Object,System.Object)\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: ReferenceEquals(Object, Object)\n  fullName: System.Object.ReferenceEquals(System.Object, System.Object)\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ReferenceEquals\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 76\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Determines whether the specified <xref href=\\\"System.Object\\\" data-throw-if-not-resolved=\\\"false\\\"></xref> instances are the same instance.</p>\\n\"\n  syntax:\n    content: >-\n      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]\n\n      [NonVersionable]\n\n      public static bool ReferenceEquals(object objA, object objB)\n    content.vb: >-\n      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n\n      <NonVersionable>\n\n      Public Shared Function ReferenceEquals(objA As Object, objB As Object) As Boolean\n    parameters:\n    - id: objA\n      type: System.Object\n      description: \"\\n<p>The first object to compare. </p>\\n\"\n    - id: objB\n      type: System.Object\n      description: \"\\n<p>The second object  to compare. </p>\\n\"\n    return:\n      type: System.Boolean\n      description: \"\\n<p>\\n<strong>true</strong> if <em>objA</em> is the same instance as <em>objB</em> or if both are null; otherwise, <strong>false</strong>.</p>\\n\"\n  seealso:\n  - type: System.Object.Equals(System.Object)\n    commentId: M:System.Object.Equals(System.Object)\n  modifiers.csharp:\n  - public\n  - static\n  modifiers.vb:\n  - Public\n  - Shared\n  nameWithType: Object.ReferenceEquals(Object, Object)\n- uid: System.Object.ToString\n  commentId: M:System.Object.ToString\n  id: ToString\n  parent: System.Object\n  langs:\n  - csharp\n  - vb\n  name: ToString()\n  fullName: System.Object.ToString()\n  type: Method\n  source:\n    remote:\n      path: src/mscorlib/src/System/Object.cs\n      branch: master\n      repo: https://github.com/dotnet/coreclr.git\n    id: ToString\n    path: src/mscorlib/src/System/Object.cs\n    startLine: 49\n  assemblies:\n  - System.Runtime\n  namespace: System\n  summary: \"\\n<p>Returns a string that represents the current object.</p>\\n\"\n  syntax:\n    content: public virtual string ToString()\n    content.vb: Public Overridable Function ToString As String\n    return:\n      type: System.String\n      description: \"\\n<p>A string that represents the current object.</p>\\n\"\n  modifiers.csharp:\n  - public\n  - virtual\n  modifiers.vb:\n  - Public\n  - Overridable\n  nameWithType: Object.ToString()\nreferences:\n- uid: System\n  isExternal: false\n  name: System\n  fullName: System\n  nameWithType: System\n  commentId: N:System\n- uid: System.Object\n  parent: System\n  isExternal: false\n  name: Object\n  fullName: System.Object\n  nameWithType: Object\n  commentId: T:System.Object\n- uid: System.Boolean\n  parent: System\n  isExternal: false\n  name: Boolean\n  fullName: System.Boolean\n  nameWithType: Boolean\n  commentId: T:System.Boolean\n- uid: System.Int32\n  parent: System\n  isExternal: false\n  name: Int32\n  fullName: System.Int32\n  nameWithType: Int32\n  commentId: T:System.Int32\n- uid: System.Type\n  parent: System\n  isExternal: false\n  name: Type\n  fullName: System.Type\n  nameWithType: Type\n  commentId: T:System.Type\n- uid: System.String\n  parent: System\n  isExternal: false\n  name: String\n  fullName: System.String\n  nameWithType: String\n  commentId: T:System.String\n"}